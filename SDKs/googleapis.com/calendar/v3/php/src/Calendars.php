<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Calendars 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearResponse
     */
	public function calendarCalendarsClear(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/clear', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteResponse
     */
	public function calendarCalendarsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns metadata for a calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetResponse
     */
	public function calendarCalendarsGet(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Calendar', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a secondary calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertResponse
     */
	public function calendarCalendarsInsert(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendar", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Calendar', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates metadata for a calendar. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchResponse
     */
	public function calendarCalendarsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendar", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Calendar', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates metadata for a calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateResponse
     */
	public function calendarCalendarsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendar", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Calendar', 'json');
            }
        }

        return $response;
    }
}