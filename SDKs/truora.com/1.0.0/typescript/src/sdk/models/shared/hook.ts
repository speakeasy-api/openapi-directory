/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Entity events you want to be notified. If all is selected, there is no need to enter actions
 */
export enum HookEventTypeEnum {
  All = "all",
  Check = "check",
}

/**
 * indicates whether the hook is active or not. enabled by default
 */
export enum HookStatusEnum {
  Enabled = "enabled",
  Disabled = "disabled",
}

/**
 * Represents a hook configuration
 */
export class Hook extends SpeakeasyBase {
  /**
   * Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actions" })
  actions?: string[];

  /**
   * Entity events you want to be notified. If all is selected, there is no need to enter actions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_type" })
  eventType?: HookEventTypeEnum;

  /**
   * Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signing_key" })
  signingKey?: string;

  /**
   * indicates whether the hook is active or not. enabled by default
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: HookStatusEnum;

  /**
   * Platform with an endpoint ready to process the information. Only web is supported currently
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_type" })
  subscriberType?: string;

  /**
   * Link where notification requests will be sent, required when subscriber_type is web
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_url" })
  subscriberUrl?: string;
}
