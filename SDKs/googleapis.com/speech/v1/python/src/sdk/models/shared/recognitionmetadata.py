"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RecognitionMetadataInteractionTypeEnum(str, Enum):
    r"""The use case most closely describing the audio content to be recognized."""
    INTERACTION_TYPE_UNSPECIFIED = 'INTERACTION_TYPE_UNSPECIFIED'
    DISCUSSION = 'DISCUSSION'
    PRESENTATION = 'PRESENTATION'
    PHONE_CALL = 'PHONE_CALL'
    VOICEMAIL = 'VOICEMAIL'
    PROFESSIONALLY_PRODUCED = 'PROFESSIONALLY_PRODUCED'
    VOICE_SEARCH = 'VOICE_SEARCH'
    VOICE_COMMAND = 'VOICE_COMMAND'
    DICTATION = 'DICTATION'

class RecognitionMetadataMicrophoneDistanceEnum(str, Enum):
    r"""The audio type that most closely describes the audio being recognized."""
    MICROPHONE_DISTANCE_UNSPECIFIED = 'MICROPHONE_DISTANCE_UNSPECIFIED'
    NEARFIELD = 'NEARFIELD'
    MIDFIELD = 'MIDFIELD'
    FARFIELD = 'FARFIELD'

class RecognitionMetadataOriginalMediaTypeEnum(str, Enum):
    r"""The original media the speech was recorded on."""
    ORIGINAL_MEDIA_TYPE_UNSPECIFIED = 'ORIGINAL_MEDIA_TYPE_UNSPECIFIED'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'

class RecognitionMetadataRecordingDeviceTypeEnum(str, Enum):
    r"""The type of device the speech was recorded with."""
    RECORDING_DEVICE_TYPE_UNSPECIFIED = 'RECORDING_DEVICE_TYPE_UNSPECIFIED'
    SMARTPHONE = 'SMARTPHONE'
    PC = 'PC'
    PHONE_LINE = 'PHONE_LINE'
    VEHICLE = 'VEHICLE'
    OTHER_OUTDOOR_DEVICE = 'OTHER_OUTDOOR_DEVICE'
    OTHER_INDOOR_DEVICE = 'OTHER_INDOOR_DEVICE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecognitionMetadata:
    r"""Description of audio data to be recognized."""
    
    audio_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioTopic'), 'exclude': lambda f: f is None }})
    r"""Description of the content. Eg. \\"Recordings of federal supreme court hearings from 2012\\"."""  
    industry_naics_code_of_audio: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('industryNaicsCodeOfAudio'), 'exclude': lambda f: f is None }})
    r"""The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/."""  
    interaction_type: Optional[RecognitionMetadataInteractionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactionType'), 'exclude': lambda f: f is None }})
    r"""The use case most closely describing the audio content to be recognized."""  
    microphone_distance: Optional[RecognitionMetadataMicrophoneDistanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microphoneDistance'), 'exclude': lambda f: f is None }})
    r"""The audio type that most closely describes the audio being recognized."""  
    original_media_type: Optional[RecognitionMetadataOriginalMediaTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalMediaType'), 'exclude': lambda f: f is None }})
    r"""The original media the speech was recorded on."""  
    original_mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalMimeType'), 'exclude': lambda f: f is None }})
    r"""Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio"""  
    recording_device_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordingDeviceName'), 'exclude': lambda f: f is None }})
    r"""The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'."""  
    recording_device_type: Optional[RecognitionMetadataRecordingDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordingDeviceType'), 'exclude': lambda f: f is None }})
    r"""The type of device the speech was recorded with."""  
    