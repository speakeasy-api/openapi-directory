"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactdetail as shared_contactdetail
from ..shared import nameserver as shared_nameserver
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransferDomainRequest:
    r"""The TransferDomain request includes the following elements."""
    
    admin_contact: shared_contactdetail.ContactDetail = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdminContact') }})  
    domain_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainName') }})  
    duration_in_years: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DurationInYears') }})  
    registrant_contact: shared_contactdetail.ContactDetail = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistrantContact') }})  
    tech_contact: shared_contactdetail.ContactDetail = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TechContact') }})  
    auth_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthCode'), 'exclude': lambda f: f is None }})  
    auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoRenew'), 'exclude': lambda f: f is None }})  
    idn_lang_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdnLangCode'), 'exclude': lambda f: f is None }})  
    nameservers: Optional[list[shared_nameserver.Nameserver]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Nameservers'), 'exclude': lambda f: f is None }})  
    privacy_protect_admin_contact: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivacyProtectAdminContact'), 'exclude': lambda f: f is None }})  
    privacy_protect_registrant_contact: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivacyProtectRegistrantContact'), 'exclude': lambda f: f is None }})  
    privacy_protect_tech_contact: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivacyProtectTechContact'), 'exclude': lambda f: f is None }})  
    