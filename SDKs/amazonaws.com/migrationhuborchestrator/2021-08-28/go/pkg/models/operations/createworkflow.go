// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateWorkflowHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateWorkflowRequestBody struct {
	// The configuration ID of the application configured in Application Discovery Service.
	ApplicationConfigurationID string `json:"applicationConfigurationId"`
	// The description of the migration workflow.
	Description *string `json:"description,omitempty"`
	// The input parameters required to create a migration workflow.
	InputParameters map[string]shared.StepInput `json:"inputParameters"`
	// The name of the migration workflow.
	Name string `json:"name"`
	// The servers on which a step will be run.
	StepTargets []string `json:"stepTargets,omitempty"`
	// The tags to add on a migration workflow.
	Tags map[string]string `json:"tags,omitempty"`
	// The ID of the template.
	TemplateID string `json:"templateId"`
}

type CreateWorkflowRequest struct {
	Headers CreateWorkflowHeaders
	Request CreateWorkflowRequestBody `request:"mediaType=application/json"`
}

type CreateWorkflowResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateMigrationWorkflowResponse *shared.CreateMigrationWorkflowResponse
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
