<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class TransactionResourceAttributes
{
    /**
     * The amount of this transaction in Australian dollars. For
     * 
     * transactions that were once `HELD` but are now `SETTLED`, refer to
     * the `holdInfo` field for the original `amount` the transaction was
     * `HELD` at.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MoneyObject $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MoneyObject')]
    public MoneyObject $amount;
    
    /**
     * If all or part of this transaction was instantly reimbursed in the
     * 
     * form of cashback, details of the reimbursement.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesCashback $cashback
     */
	#[\JMS\Serializer\Annotation\SerializedName('cashback')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesCashback')]
    public TransactionResourceAttributesCashback $cashback;
    
    /**
     * The date-time at which this transaction was first encountered.
     * 
     * 
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('createdAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * A short description for this transaction. Usually the merchant name
     * 
     * for purchases.
     * 
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * The foreign currency amount of this transaction. This field will be
     * 
     * `null` for domestic transactions. The amount was converted to the AUD
     * amount reflected in the `amount` of this transaction. Refer to the
     * `holdInfo` field for the original `foreignAmount` the transaction was
     * `HELD` at.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesForeignAmount $foreignAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('foreignAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesForeignAmount')]
    public TransactionResourceAttributesForeignAmount $foreignAmount;
    
    /**
     * If this transaction is currently in the `HELD` status, or was ever in
     * 
     * the `HELD` status, the `amount` and `foreignAmount` of the
     * transaction while `HELD`.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesHoldInfo $holdInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('holdInfo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesHoldInfo')]
    public TransactionResourceAttributesHoldInfo $holdInfo;
    
    /**
     * Boolean flag set to true on transactions that support the use of
     * 
     * categories.
     * 
     * 
     * @var bool $isCategorizable
     */
	#[\JMS\Serializer\Annotation\SerializedName('isCategorizable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isCategorizable;
    
    /**
     * Attached message for this transaction, such as a payment message, or a
     * 
     * transfer note.
     * 
     * 
     * @var string $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $message;
    
    /**
     * The original, unprocessed text of the transaction. This is often not
     * 
     * a perfect indicator of the actual merchant, but it is useful for
     * reconciliation purposes in some cases.
     * 
     * 
     * @var string $rawText
     */
	#[\JMS\Serializer\Annotation\SerializedName('rawText')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $rawText;
    
    /**
     * Details of how this transaction was rounded-up. If no Round Up was
     * 
     * applied this field will be `null`.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesRoundUp $roundUp
     */
	#[\JMS\Serializer\Annotation\SerializedName('roundUp')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesRoundUp')]
    public TransactionResourceAttributesRoundUp $roundUp;
    
    /**
     * The date-time at which this transaction settled. This field will be
     * 
     * `null` for transactions that are currently in the `HELD` status.
     * 
     * 
     * @var \DateTime $settledAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('settledAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $settledAt;
    
    /**
     * The current processing status of this transaction, according to
     * 
     * whether or not this transaction has settled or is still held.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnumEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnumEnum>')]
    public TransactionStatusEnumEnum $status;
    
	public function __construct()
	{
		$this->amount = new \OpenAPI\OpenAPI\Models\Shared\MoneyObject();
		$this->cashback = new \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesCashback();
		$this->createdAt = new \DateTime();
		$this->description = "";
		$this->foreignAmount = new \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesForeignAmount();
		$this->holdInfo = new \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesHoldInfo();
		$this->isCategorizable = false;
		$this->message = "";
		$this->rawText = "";
		$this->roundUp = new \OpenAPI\OpenAPI\Models\Shared\TransactionResourceAttributesRoundUp();
		$this->settledAt = new \DateTime();
		$this->status = \OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnumEnum::HELD;
	}
}
