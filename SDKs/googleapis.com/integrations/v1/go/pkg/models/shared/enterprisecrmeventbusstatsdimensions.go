// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum - Whether to include or exclude the enums matching the regex.
type EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum string

const (
	EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnumDefaultInclusive EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum = "DEFAULT_INCLUSIVE"
	EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnumExclusive        EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum = "EXCLUSIVE"
)

func (e EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum) ToPointer() *EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum {
	return &e
}

func (e *EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT_INCLUSIVE":
		fallthrough
	case "EXCLUSIVE":
		*e = EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum: %v", v)
	}
}

type EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum string

const (
	EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnumUnspecified EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum = "UNSPECIFIED"
	EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnumFinal       EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum = "FINAL"
	EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnumRetryable   EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum = "RETRYABLE"
	EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnumCanceled    EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum = "CANCELED"
)

func (e EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum) ToPointer() *EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum {
	return &e
}

func (e *EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "FINAL":
		fallthrough
	case "RETRYABLE":
		fallthrough
	case "CANCELED":
		*e = EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum: %v", v)
	}
}

type EnterpriseCrmEventbusStatsDimensions struct {
	ClientID *string `json:"clientId,omitempty"`
	// Whether to include or exclude the enums matching the regex.
	EnumFilterType  *EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum `json:"enumFilterType,omitempty"`
	ErrorEnumString *string                                                 `json:"errorEnumString,omitempty"`
	RetryAttempt    *EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum   `json:"retryAttempt,omitempty"`
	TaskName        *string                                                 `json:"taskName,omitempty"`
	TaskNumber      *string                                                 `json:"taskNumber,omitempty"`
	// Stats have been or will be aggregated on set fields for any semantically-meaningful combination.
	TriggerID         *string `json:"triggerId,omitempty"`
	WarningEnumString *string `json:"warningEnumString,omitempty"`
	WorkflowID        *string `json:"workflowId,omitempty"`
	WorkflowName      *string `json:"workflowName,omitempty"`
}
