/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties.
 */
export class SamplingRule extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Attributes" })
  attributes?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "FixedRate" })
  fixedRate: number;

  @SpeakeasyMetadata()
  @Expose({ name: "HTTPMethod" })
  httpMethod: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Host" })
  host: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Priority" })
  priority: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ReservoirSize" })
  reservoirSize: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceARN" })
  resourceARN: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleARN" })
  ruleARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleName" })
  ruleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceName" })
  serviceName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceType" })
  serviceType: string;

  @SpeakeasyMetadata()
  @Expose({ name: "URLPath" })
  urlPath: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version: number;
}
