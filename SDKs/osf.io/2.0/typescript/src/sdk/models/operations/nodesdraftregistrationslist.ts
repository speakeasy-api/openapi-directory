/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class NodesDraftRegistrationsListRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the node.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=node_id",
  })
  nodeId: string;
}

export class NodesDraftRegistrationsListDraftRegistrationAttributesNodeLicense extends SpeakeasyBase {
  /**
   * A list of names of copyright holders for the license.
   */
  @SpeakeasyMetadata()
  copyrightHolders?: string[];

  /**
   * The year the copyright was made.
   */
  @SpeakeasyMetadata()
  year?: number;
}

/**
 * The properties of the Draft Registration entity.
 */
export class NodesDraftRegistrationsListDraftRegistrationAttributes extends SpeakeasyBase {
  /**
   * The category of the Draft Registration.
   */
  @SpeakeasyMetadata()
  category?: string;

  /**
   * The current users permission level for the Draft Registration.
   */
  @SpeakeasyMetadata()
  currentUserPermissions?: string[];

  /**
   * The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  datetimeInitiated?: Date;

  /**
   * The time at which the draft registration was last updated, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  datetimeUpdated?: Date;

  /**
   * The description of the Draft Registration.
   */
  @SpeakeasyMetadata()
  description?: string;

  /**
   * This indicates whether a Draft Registration was branched from a project.
   */
  @SpeakeasyMetadata()
  hasProject?: boolean;

  @SpeakeasyMetadata()
  nodeLicense?: NodesDraftRegistrationsListDraftRegistrationAttributesNodeLicense;

  /**
   * This is a legacy format for `registration_responses`.
   */
  @SpeakeasyMetadata()
  registrationMetadata?: Record<string, any>;

  /**
   * A dictionary of question IDs and responses from the registration schema.
   */
  @SpeakeasyMetadata()
  registrationResponses?: Record<string, any>;

  /**
   * The searchable tags of the Draft Registration.
   */
  @SpeakeasyMetadata()
  tags?: string[];

  /**
   * The title of the Draft Registration.
   */
  @SpeakeasyMetadata()
  title?: string;
}

/**
 * URLs to alternative representations of the draft registration entity.
 */
export class NodesDraftRegistrationsListDraftRegistrationLinks extends SpeakeasyBase {
  /**
   * A link to the draft registration's page on the OSF.
   */
  @SpeakeasyMetadata()
  html: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the draft registration entity.
 */
export class NodesDraftRegistrationsListDraftRegistrationRelationships extends SpeakeasyBase {
  /**
   * A link to the node that this draft registration was created from.
   */
  @SpeakeasyMetadata()
  branchedFrom?: string;

  /**
   * A link to the user who initiated the draft registration.
   */
  @SpeakeasyMetadata()
  initiator?: string;

  /**
   * A link to the detailed registration schema that this draft conforms to.
   */
  @SpeakeasyMetadata()
  registrationSchema?: string;
}

export class NodesDraftRegistrationsListDraftRegistration extends SpeakeasyBase {
  /**
   * The properties of the Draft Registration entity.
   */
  @SpeakeasyMetadata()
  attributes: NodesDraftRegistrationsListDraftRegistrationAttributes;

  /**
   * The unique identifier of the draft registration entity.
   */
  @SpeakeasyMetadata()
  id: string;

  /**
   * URLs to alternative representations of the draft registration entity.
   */
  @SpeakeasyMetadata()
  links: NodesDraftRegistrationsListDraftRegistrationLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the draft registration entity.
   */
  @SpeakeasyMetadata()
  relationships: NodesDraftRegistrationsListDraftRegistrationRelationships;

  /**
   * The type identifier of the draft registration entity (`draft_registrations`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class NodesDraftRegistrationsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
