/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TeamDiscussion - A team discussion is a persistent record of a free-form conversation within a team.
 */
public class TeamDiscussion {
    /**
     * Simple User
     */
    @JsonProperty("author")
    public NullableSimpleUser author;

    public TeamDiscussion withAuthor(NullableSimpleUser author) {
        this.author = author;
        return this;
    }
    
    /**
     * The main text of the discussion.
     */
    @JsonProperty("body")
    public String body;

    public TeamDiscussion withBody(String body) {
        this.body = body;
        return this;
    }
    
    @JsonProperty("body_html")
    public String bodyHtml;

    public TeamDiscussion withBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
        return this;
    }
    
    /**
     * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
     */
    @JsonProperty("body_version")
    public String bodyVersion;

    public TeamDiscussion withBodyVersion(String bodyVersion) {
        this.bodyVersion = bodyVersion;
        return this;
    }
    
    @JsonProperty("comments_count")
    public Long commentsCount;

    public TeamDiscussion withCommentsCount(Long commentsCount) {
        this.commentsCount = commentsCount;
        return this;
    }
    
    @JsonProperty("comments_url")
    public String commentsUrl;

    public TeamDiscussion withCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public TeamDiscussion withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;

    public TeamDiscussion withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_edited_at")
    public OffsetDateTime lastEditedAt;

    public TeamDiscussion withLastEditedAt(OffsetDateTime lastEditedAt) {
        this.lastEditedAt = lastEditedAt;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;

    public TeamDiscussion withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * The unique sequence number of a team discussion.
     */
    @JsonProperty("number")
    public Long number;

    public TeamDiscussion withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * Whether or not this discussion should be pinned for easy retrieval.
     */
    @JsonProperty("pinned")
    public Boolean pinned;

    public TeamDiscussion withPinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }
    
    /**
     * Whether or not this discussion should be restricted to team members and organization administrators.
     */
    @JsonProperty("private")
    public Boolean private_;

    public TeamDiscussion withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactions")
    public ReactionRollup reactions;

    public TeamDiscussion withReactions(ReactionRollup reactions) {
        this.reactions = reactions;
        return this;
    }
    
    @JsonProperty("team_url")
    public String teamUrl;

    public TeamDiscussion withTeamUrl(String teamUrl) {
        this.teamUrl = teamUrl;
        return this;
    }
    
    /**
     * The title of the discussion.
     */
    @JsonProperty("title")
    public String title;

    public TeamDiscussion withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public TeamDiscussion withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonProperty("url")
    public String url;

    public TeamDiscussion withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public TeamDiscussion(@JsonProperty("author") NullableSimpleUser author, @JsonProperty("body") String body, @JsonProperty("body_html") String bodyHtml, @JsonProperty("body_version") String bodyVersion, @JsonProperty("comments_count") Long commentsCount, @JsonProperty("comments_url") String commentsUrl, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("html_url") String htmlUrl, @JsonProperty("last_edited_at") OffsetDateTime lastEditedAt, @JsonProperty("node_id") String nodeId, @JsonProperty("number") Long number, @JsonProperty("pinned") Boolean pinned, @JsonProperty("private") Boolean private_, @JsonProperty("team_url") String teamUrl, @JsonProperty("title") String title, @JsonProperty("updated_at") OffsetDateTime updatedAt, @JsonProperty("url") String url) {
        this.author = author;
        this.body = body;
        this.bodyHtml = bodyHtml;
        this.bodyVersion = bodyVersion;
        this.commentsCount = commentsCount;
        this.commentsUrl = commentsUrl;
        this.createdAt = createdAt;
        this.htmlUrl = htmlUrl;
        this.lastEditedAt = lastEditedAt;
        this.nodeId = nodeId;
        this.number = number;
        this.pinned = pinned;
        this.private_ = private_;
        this.teamUrl = teamUrl;
        this.title = title;
        this.updatedAt = updatedAt;
        this.url = url;
  }
}
