/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * GroupCoverageResult - Successful Response - Returns the new Group Coverage
 */
public class GroupCoverageResult {
    /**
     * Unique identifier of the application in Noyo
     */
    @JsonProperty("application_id")
    public String applicationId;
    public GroupCoverageResult withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }
    
    /**
     * The date the record was created
     */
    @JsonProperty("created")
    public Long created;
    public GroupCoverageResult withCreated(Long created) {
        this.created = created;
        return this;
    }
    
    /**
     * True if this line of coverage is currently active with the carrier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("existing_coverage")
    public Boolean existingCoverage;
    public GroupCoverageResult withExistingCoverage(Boolean existingCoverage) {
        this.existingCoverage = existingCoverage;
        return this;
    }
    
    /**
     * Unique identifier of the record in Noyo
     */
    @JsonProperty("id")
    public String id;
    public GroupCoverageResult withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The line of coverage requested with the carrier application
     */
    @JsonProperty("line_of_coverage")
    public GroupCoverageResultLineOfCoverageEnum lineOfCoverage;
    public GroupCoverageResult withLineOfCoverage(GroupCoverageResultLineOfCoverageEnum lineOfCoverage) {
        this.lineOfCoverage = lineOfCoverage;
        return this;
    }
    
    /**
     * The date the record was last updated
     */
    @JsonProperty("modified")
    public Long modified;
    public GroupCoverageResult withModified(Long modified) {
        this.modified = modified;
        return this;
    }
    
    /**
     * General platform notes about the group coverage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public GroupCoverageResult withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Requested effective date for start of coverage
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("requested_effective_date")
    public LocalDate requestedEffectiveDate;
    public GroupCoverageResult withRequestedEffectiveDate(LocalDate requestedEffectiveDate) {
        this.requestedEffectiveDate = requestedEffectiveDate;
        return this;
    }
    
    /**
     * Current version of the record
     */
    @JsonProperty("version")
    public String version;
    public GroupCoverageResult withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
