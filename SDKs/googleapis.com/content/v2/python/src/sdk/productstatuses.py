"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Productstatuses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_productstatuses_custombatch(self, request: operations.ContentProductstatusesCustombatchRequest, security: operations.ContentProductstatusesCustombatchSecurity) -> operations.ContentProductstatusesCustombatchResponse:
        r"""Gets the statuses of multiple products in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/productstatuses/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "productstatuses_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentProductstatusesCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentProductstatusesCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductstatusesCustomBatchResponse])
                res.productstatuses_custom_batch_response = out

        return res

    def content_productstatuses_get(self, request: operations.ContentProductstatusesGetRequest, security: operations.ContentProductstatusesGetSecurity) -> operations.ContentProductstatusesGetResponse:
        r"""Gets the status of a product from your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentProductstatusesGetRequest, base_url, '/{merchantId}/productstatuses/{productId}', request)
        
        query_params = utils.get_query_params(operations.ContentProductstatusesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentProductstatusesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductStatus])
                res.product_status = out

        return res

    def content_productstatuses_list(self, request: operations.ContentProductstatusesListRequest, security: operations.ContentProductstatusesListSecurity) -> operations.ContentProductstatusesListResponse:
        r"""Lists the statuses of the products in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentProductstatusesListRequest, base_url, '/{merchantId}/productstatuses', request)
        
        query_params = utils.get_query_params(operations.ContentProductstatusesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentProductstatusesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductstatusesListResponse])
                res.productstatuses_list_response = out

        return res

    