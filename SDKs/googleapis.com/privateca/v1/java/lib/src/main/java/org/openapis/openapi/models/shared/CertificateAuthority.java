/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateAuthority - A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */
public class CertificateAuthority {
    /**
     * URLs where a CertificateAuthority will publish content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessUrls")
    public AccessUrls accessUrls;

    public CertificateAuthority withAccessUrls(AccessUrls accessUrls) {
        this.accessUrls = accessUrls;
        return this;
    }
    
    /**
     * Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caCertificateDescriptions")
    public CertificateDescription[] caCertificateDescriptions;

    public CertificateAuthority withCaCertificateDescriptions(CertificateDescription[] caCertificateDescriptions) {
        this.caCertificateDescriptions = caCertificateDescriptions;
        return this;
    }
    
    /**
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public CertificateConfig config;

    public CertificateAuthority withConfig(CertificateConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Output only. The time at which this CertificateAuthority was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public CertificateAuthority withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;

    public CertificateAuthority withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;

    public CertificateAuthority withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gcsBucket")
    public String gcsBucket;

    public CertificateAuthority withGcsBucket(String gcsBucket) {
        this.gcsBucket = gcsBucket;
        return this;
    }
    
    /**
     * A Cloud KMS key configuration that a CertificateAuthority will use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keySpec")
    public KeyVersionSpec keySpec;

    public CertificateAuthority withKeySpec(KeyVersionSpec keySpec) {
        this.keySpec = keySpec;
        return this;
    }
    
    /**
     * Optional. Labels with user-defined metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public CertificateAuthority withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    public String lifetime;

    public CertificateAuthority withLifetime(String lifetime) {
        this.lifetime = lifetime;
        return this;
    }
    
    /**
     * Output only. The resource name for this CertificateAuthority in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CertificateAuthority withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCaCertificates")
    public String[] pemCaCertificates;

    public CertificateAuthority withPemCaCertificates(String[] pemCaCertificates) {
        this.pemCaCertificates = pemCaCertificates;
        return this;
    }
    
    /**
     * Output only. The State for this CertificateAuthority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CertificateAuthorityStateEnum state;

    public CertificateAuthority withState(CertificateAuthorityStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subordinateConfig")
    public SubordinateConfig subordinateConfig;

    public CertificateAuthority withSubordinateConfig(SubordinateConfig subordinateConfig) {
        this.subordinateConfig = subordinateConfig;
        return this;
    }
    
    /**
     * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public CertificateAuthorityTierEnum tier;

    public CertificateAuthority withTier(CertificateAuthorityTierEnum tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CertificateAuthorityTypeEnum type;

    public CertificateAuthority withType(CertificateAuthorityTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Output only. The time at which this CertificateAuthority was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public CertificateAuthority withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public CertificateAuthority(){}
}
