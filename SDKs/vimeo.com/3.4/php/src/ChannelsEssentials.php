<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ChannelsEssentials 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a channel
     * 
     * This method creates a new channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
     */
	public function createChannel(
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a channel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
     */
	public function deleteChannel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a channel
     * 
     * This method edits the specified channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditChannelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditChannelResponse
     */
	public function editChannel(
        \OpenAPI\OpenAPI\Models\Operations\EditChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditChannelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}', \OpenAPI\OpenAPI\Models\Operations\EditChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific channel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse
     */
	public function getChannel(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}', \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the channels to which a user subscribes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsResponse
     */
	public function getChannelSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/channels', \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Channel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * Get all the channels to which a user subscribes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Response
     */
	public function getChannelSubscriptionsAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/channels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelSubscriptionsAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Channel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * Get all channels
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelsResponse
     */
	public function getChannels(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Channel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.channel+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}