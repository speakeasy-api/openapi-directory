/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CertificateAuthority - Contains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate &lt;b&gt;Subject&lt;/b&gt; field owns or controls the public key contained in the &lt;b&gt;Subject Public Key Info&lt;/b&gt; field. Call the &lt;a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html"&gt;CreateCertificateAuthority&lt;/a&gt; action to create your private CA. You must then call the &lt;a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCertificate.html"&gt;GetCertificateAuthorityCertificate&lt;/a&gt; action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA certificate. Call the &lt;a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html"&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action to import the signed certificate into Certificate Manager (ACM). 
 */
public class CertificateAuthority {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Arn")
    public String arn;

    public CertificateAuthority withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CertificateAuthorityConfiguration")
    public CertificateAuthorityConfiguration certificateAuthorityConfiguration;

    public CertificateAuthority withCertificateAuthorityConfiguration(CertificateAuthorityConfiguration certificateAuthorityConfiguration) {
        this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedAt")
    public OffsetDateTime createdAt;

    public CertificateAuthority withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FailureReason")
    public FailureReasonEnum failureReason;

    public CertificateAuthority withFailureReason(FailureReasonEnum failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KeyStorageSecurityStandard")
    public KeyStorageSecurityStandardEnum keyStorageSecurityStandard;

    public CertificateAuthority withKeyStorageSecurityStandard(KeyStorageSecurityStandardEnum keyStorageSecurityStandard) {
        this.keyStorageSecurityStandard = keyStorageSecurityStandard;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastStateChangeAt")
    public OffsetDateTime lastStateChangeAt;

    public CertificateAuthority withLastStateChangeAt(OffsetDateTime lastStateChangeAt) {
        this.lastStateChangeAt = lastStateChangeAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("NotAfter")
    public OffsetDateTime notAfter;

    public CertificateAuthority withNotAfter(OffsetDateTime notAfter) {
        this.notAfter = notAfter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("NotBefore")
    public OffsetDateTime notBefore;

    public CertificateAuthority withNotBefore(OffsetDateTime notBefore) {
        this.notBefore = notBefore;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OwnerAccount")
    public String ownerAccount;

    public CertificateAuthority withOwnerAccount(String ownerAccount) {
        this.ownerAccount = ownerAccount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RestorableUntil")
    public OffsetDateTime restorableUntil;

    public CertificateAuthority withRestorableUntil(OffsetDateTime restorableUntil) {
        this.restorableUntil = restorableUntil;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevocationConfiguration")
    public RevocationConfiguration revocationConfiguration;

    public CertificateAuthority withRevocationConfiguration(RevocationConfiguration revocationConfiguration) {
        this.revocationConfiguration = revocationConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Serial")
    public String serial;

    public CertificateAuthority withSerial(String serial) {
        this.serial = serial;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public CertificateAuthorityStatusEnum status;

    public CertificateAuthority withStatus(CertificateAuthorityStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public CertificateAuthorityTypeEnum type;

    public CertificateAuthority withType(CertificateAuthorityTypeEnum type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UsageMode")
    public CertificateAuthorityUsageModeEnum usageMode;

    public CertificateAuthority withUsageMode(CertificateAuthorityUsageModeEnum usageMode) {
        this.usageMode = usageMode;
        return this;
    }
    
    public CertificateAuthority(){}
}
