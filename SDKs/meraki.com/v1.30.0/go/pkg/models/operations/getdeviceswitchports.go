// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetDeviceSwitchPortsPathParams struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

type GetDeviceSwitchPortsRequest struct {
	PathParams GetDeviceSwitchPortsPathParams
}

// GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum - The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
type GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum string

const (
	GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnumCustomAccessPolicy GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum = "Custom access policy"
	GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnumMacAllowList       GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum = "MAC allow list"
	GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnumOpen               GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum = "Open"
	GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnumStickyMacAllowList GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum = "Sticky MAC allow list"
)

func (e *GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Custom access policy":
		fallthrough
	case "MAC allow list":
		fallthrough
	case "Open":
		fallthrough
	case "Sticky MAC allow list":
		*e = GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum: %s", s)
	}
}

// GetDeviceSwitchPorts200ApplicationJSONProfile - Profile attributes
type GetDeviceSwitchPorts200ApplicationJSONProfile struct {
	// When enabled, override this port's configuration with a port profile.
	Enabled *bool `json:"enabled,omitempty"`
	// When enabled, the ID of the port profile used to override the port's configuration.
	ID *string `json:"id,omitempty"`
	// When enabled, the IName of the profile.
	Iname *string `json:"iname,omitempty"`
}

// GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum - The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
type GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum string

const (
	GetDeviceSwitchPorts200ApplicationJSONStpGuardEnumBpduGuard GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum = "bpdu guard"
	GetDeviceSwitchPorts200ApplicationJSONStpGuardEnumDisabled  GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum = "disabled"
	GetDeviceSwitchPorts200ApplicationJSONStpGuardEnumLoopGuard GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum = "loop guard"
	GetDeviceSwitchPorts200ApplicationJSONStpGuardEnumRootGuard GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum = "root guard"
)

func (e *GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bpdu guard":
		fallthrough
	case "disabled":
		fallthrough
	case "loop guard":
		fallthrough
	case "root guard":
		*e = GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum: %s", s)
	}
}

// GetDeviceSwitchPorts200ApplicationJSONTypeEnum - The type of the switch port ('trunk' or 'access').
type GetDeviceSwitchPorts200ApplicationJSONTypeEnum string

const (
	GetDeviceSwitchPorts200ApplicationJSONTypeEnumAccess GetDeviceSwitchPorts200ApplicationJSONTypeEnum = "access"
	GetDeviceSwitchPorts200ApplicationJSONTypeEnumTrunk  GetDeviceSwitchPorts200ApplicationJSONTypeEnum = "trunk"
)

func (e *GetDeviceSwitchPorts200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "trunk":
		*e = GetDeviceSwitchPorts200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPorts200ApplicationJSONTypeEnum: %s", s)
	}
}

// GetDeviceSwitchPorts200ApplicationJSONUdldEnum - The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
type GetDeviceSwitchPorts200ApplicationJSONUdldEnum string

const (
	GetDeviceSwitchPorts200ApplicationJSONUdldEnumAlertOnly GetDeviceSwitchPorts200ApplicationJSONUdldEnum = "Alert only"
	GetDeviceSwitchPorts200ApplicationJSONUdldEnumEnforce   GetDeviceSwitchPorts200ApplicationJSONUdldEnum = "Enforce"
)

func (e *GetDeviceSwitchPorts200ApplicationJSONUdldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Alert only":
		fallthrough
	case "Enforce":
		*e = GetDeviceSwitchPorts200ApplicationJSONUdldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPorts200ApplicationJSONUdldEnum: %s", s)
	}
}

type GetDeviceSwitchPorts200ApplicationJSON struct {
	// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int64 `json:"accessPolicyNumber,omitempty"`
	// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *GetDeviceSwitchPorts200ApplicationJSONAccessPolicyTypeEnum `json:"accessPolicyType,omitempty"`
	// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
	AdaptivePolicyGroupID *string `json:"adaptivePolicyGroupId,omitempty"`
	// The VLANs allowed on the switch port. Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `json:"daiTrusted,omitempty"`
	// The status of the switch port.
	Enabled *bool `json:"enabled,omitempty"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `json:"flexibleStackingEnabled,omitempty"`
	// The isolation status of the switch port.
	IsolationEnabled *bool `json:"isolationEnabled,omitempty"`
	// The link speed for the switch port.
	LinkNegotiation *string `json:"linkNegotiation,omitempty"`
	// Available link speeds for the switch port.
	LinkNegotiationCapabilities []string `json:"linkNegotiationCapabilities,omitempty"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowList []string `json:"macAllowList,omitempty"`
	// The name of the switch port.
	Name *string `json:"name,omitempty"`
	// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
	PeerSgtCapable *bool `json:"peerSgtCapable,omitempty"`
	// The PoE status of the switch port.
	PoeEnabled *bool `json:"poeEnabled,omitempty"`
	// The identifier of the switch port.
	PortID *string `json:"portId,omitempty"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID *string `json:"portScheduleId,omitempty"`
	// Profile attributes
	Profile *GetDeviceSwitchPorts200ApplicationJSONProfile `json:"profile,omitempty"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `json:"rstpEnabled,omitempty"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList,omitempty"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int64 `json:"stickyMacAllowListLimit,omitempty"`
	// The storm control status of the switch port.
	StormControlEnabled *bool `json:"stormControlEnabled,omitempty"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *GetDeviceSwitchPorts200ApplicationJSONStpGuardEnum `json:"stpGuard,omitempty"`
	// The list of tags of the switch port.
	Tags []string `json:"tags,omitempty"`
	// The type of the switch port ('trunk' or 'access').
	Type *GetDeviceSwitchPorts200ApplicationJSONTypeEnum `json:"type,omitempty"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *GetDeviceSwitchPorts200ApplicationJSONUdldEnum `json:"udld,omitempty"`
	// The VLAN of the switch port. A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the switch port. Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

type GetDeviceSwitchPortsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetDeviceSwitchPorts200ApplicationJSONObjects []GetDeviceSwitchPorts200ApplicationJSON
}
