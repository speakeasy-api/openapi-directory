/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CostEstimateRequest {
    @JsonProperty("amount")
    public Amount amount;

    public CostEstimateRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assumptions")
    public CostEstimateAssumptions assumptions;

    public CostEstimateRequest withAssumptions(CostEstimateAssumptions assumptions) {
        this.assumptions = assumptions;
        return this;
    }
    
    /**
     * The card number (4-19 characters) for PCI compliant use cases. Do not use any separators.
     * 
     * &gt; Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardNumber")
    public String cardNumber;

    public CostEstimateRequest withCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
        return this;
    }
    
    /**
     * Encrypted data that stores card information for non PCI-compliant use cases. The encrypted data must be created with the Checkout Card Component or Secured Fields Component, and must contain the `encryptedCardNumber` field.
     * 
     * &gt; Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedCardNumber")
    public String encryptedCardNumber;

    public CostEstimateRequest withEncryptedCardNumber(String encryptedCardNumber) {
        this.encryptedCardNumber = encryptedCardNumber;
        return this;
    }
    
    /**
     * The merchant account identifier you want to process the (transaction) request with.
     */
    @JsonProperty("merchantAccount")
    public String merchantAccount;

    public CostEstimateRequest withMerchantAccount(String merchantAccount) {
        this.merchantAccount = merchantAccount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantDetails")
    public MerchantDetails merchantDetails;

    public CostEstimateRequest withMerchantDetails(MerchantDetails merchantDetails) {
        this.merchantDetails = merchantDetails;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    public Recurring recurring;

    public CostEstimateRequest withRecurring(Recurring recurring) {
        this.recurring = recurring;
        return this;
    }
    
    /**
     * The `recurringDetailReference` you want to use for this cost estimate. The value `LATEST` can be used to select the most recently stored recurring detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedRecurringDetailReference")
    public String selectedRecurringDetailReference;

    public CostEstimateRequest withSelectedRecurringDetailReference(String selectedRecurringDetailReference) {
        this.selectedRecurringDetailReference = selectedRecurringDetailReference;
        return this;
    }
    
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
     * For the web service API, Adyen assumes Ecommerce shopper interaction by default.
     * 
     * This field has the following possible values:
     * * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
     * * `ContAuth` - Card on file and/or subscription transactions, where the card holder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
     * * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
     * * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperInteraction")
    public CostEstimateRequestShopperInteractionEnum shopperInteraction;

    public CostEstimateRequest withShopperInteraction(CostEstimateRequestShopperInteractionEnum shopperInteraction) {
        this.shopperInteraction = shopperInteraction;
        return this;
    }
    
    /**
     * Required for recurring payments. 
     * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.
     * &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperReference")
    public String shopperReference;

    public CostEstimateRequest withShopperReference(String shopperReference) {
        this.shopperReference = shopperReference;
        return this;
    }
    
    public CostEstimateRequest(@JsonProperty("amount") Amount amount, @JsonProperty("merchantAccount") String merchantAccount) {
        this.amount = amount;
        this.merchantAccount = merchantAccount;
  }
}
