// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestGroupsXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestGroupsXSdsDateFormatEnum string

const (
	RequestGroupsXSdsDateFormatEnumUtc    RequestGroupsXSdsDateFormatEnum = "UTC"
	RequestGroupsXSdsDateFormatEnumLocal  RequestGroupsXSdsDateFormatEnum = "LOCAL"
	RequestGroupsXSdsDateFormatEnumOffset RequestGroupsXSdsDateFormatEnum = "OFFSET"
	RequestGroupsXSdsDateFormatEnumEpoch  RequestGroupsXSdsDateFormatEnum = "EPOCH"
	RequestGroupsXSdsDateFormatEnumLeet   RequestGroupsXSdsDateFormatEnum = "LEET"
)

func (e *RequestGroupsXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestGroupsXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestGroupsXSdsDateFormatEnum: %s", s)
	}
}

type RequestGroupsRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestGroupsXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Filter string
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Range limit.
	//
	// Maximum 500.
	//
	//  For more results please use paging (`offset` + `limit`).
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Range offset
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort string
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
}

type RequestGroupsResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	// OK
	GroupList   *shared.GroupList
	StatusCode  int
	RawResponse *http.Response
}
