// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateEntitlementXAmzTargetEnum
type CreateEntitlementXAmzTargetEnum string

const (
	CreateEntitlementXAmzTargetEnumPhotonAdminProxyServiceCreateEntitlement CreateEntitlementXAmzTargetEnum = "PhotonAdminProxyService.CreateEntitlement"
)

func (e CreateEntitlementXAmzTargetEnum) ToPointer() *CreateEntitlementXAmzTargetEnum {
	return &e
}

func (e *CreateEntitlementXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.CreateEntitlement":
		*e = CreateEntitlementXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEntitlementXAmzTargetEnum: %v", v)
	}
}

type CreateEntitlementRequest struct {
	CreateEntitlementRequest shared.CreateEntitlementRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateEntitlementXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateEntitlementResponse struct {
	ContentType string
	// Success
	CreateEntitlementResult *shared.CreateEntitlementResult
	// EntitlementAlreadyExistsException
	EntitlementAlreadyExistsException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
