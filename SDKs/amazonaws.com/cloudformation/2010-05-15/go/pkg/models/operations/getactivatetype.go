// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETActivateTypeActionEnum
type GETActivateTypeActionEnum string

const (
	GETActivateTypeActionEnumActivateType GETActivateTypeActionEnum = "ActivateType"
)

func (e *GETActivateTypeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ActivateType":
		*e = GETActivateTypeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETActivateTypeActionEnum: %s", s)
	}
}

// GETActivateTypeLoggingConfig - Contains logging configuration information for an extension.
type GETActivateTypeLoggingConfig struct {
	LogGroupName string `queryParam:"name=LogGroupName"`
	LogRoleArn   string `queryParam:"name=LogRoleArn"`
}

// GETActivateTypeTypeEnum - <p>The extension type.</p> <p>Conditional: You must specify <code>PublicTypeArn</code>, or <code>TypeName</code>, <code>Type</code>, and <code>PublisherId</code>.</p>
type GETActivateTypeTypeEnum string

const (
	GETActivateTypeTypeEnumResource GETActivateTypeTypeEnum = "RESOURCE"
	GETActivateTypeTypeEnumModule   GETActivateTypeTypeEnum = "MODULE"
	GETActivateTypeTypeEnumHook     GETActivateTypeTypeEnum = "HOOK"
)

func (e *GETActivateTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETActivateTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETActivateTypeTypeEnum: %s", s)
	}
}

// GETActivateTypeVersionEnum
type GETActivateTypeVersionEnum string

const (
	GETActivateTypeVersionEnumTwoThousandAndTen0515 GETActivateTypeVersionEnum = "2010-05-15"
)

func (e *GETActivateTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETActivateTypeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETActivateTypeVersionEnum: %s", s)
	}
}

// GETActivateTypeVersionBumpEnum - <p>Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of <code>AutoUpdate</code>.</p> <ul> <li> <p> <code>MAJOR</code>: CloudFormation updates the extension to the newest major version, if one is available.</p> </li> <li> <p> <code>MINOR</code>: CloudFormation updates the extension to the newest minor version, if one is available.</p> </li> </ul>
type GETActivateTypeVersionBumpEnum string

const (
	GETActivateTypeVersionBumpEnumMajor GETActivateTypeVersionBumpEnum = "MAJOR"
	GETActivateTypeVersionBumpEnumMinor GETActivateTypeVersionBumpEnum = "MINOR"
)

func (e *GETActivateTypeVersionBumpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAJOR":
		fallthrough
	case "MINOR":
		*e = GETActivateTypeVersionBumpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETActivateTypeVersionBumpEnum: %s", s)
	}
}

type GETActivateTypeQueryParams struct {
	Action GETActivateTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>Whether to automatically update the extension in this account and region when a new <i>minor</i> version is published by the extension publisher. Major versions released by the publisher must be manually updated.</p> <p>The default is <code>true</code>.</p>
	AutoUpdate *bool `queryParam:"style=form,explode=true,name=AutoUpdate"`
	// The name of the IAM execution role to use to activate the extension.
	ExecutionRoleArn *string `queryParam:"style=form,explode=true,name=ExecutionRoleArn"`
	// Contains logging configuration information for an extension.
	LoggingConfig *GETActivateTypeLoggingConfig `queryParam:"style=form,explode=true,name=LoggingConfig"`
	// <p>The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available <i>minor</i> version of the major version selected.</p> <p>You can specify <code>MajorVersion</code> or <code>VersionBump</code>, but not both.</p>
	MajorVersion *int64 `queryParam:"style=form,explode=true,name=MajorVersion"`
	// <p>The Amazon Resource Name (ARN) of the public extension.</p> <p>Conditional: You must specify <code>PublicTypeArn</code>, or <code>TypeName</code>, <code>Type</code>, and <code>PublisherId</code>.</p>
	PublicTypeArn *string `queryParam:"style=form,explode=true,name=PublicTypeArn"`
	// <p>The ID of the extension publisher.</p> <p>Conditional: You must specify <code>PublicTypeArn</code>, or <code>TypeName</code>, <code>Type</code>, and <code>PublisherId</code>.</p>
	PublisherID *string `queryParam:"style=form,explode=true,name=PublisherId"`
	// <p>The extension type.</p> <p>Conditional: You must specify <code>PublicTypeArn</code>, or <code>TypeName</code>, <code>Type</code>, and <code>PublisherId</code>.</p>
	Type *GETActivateTypeTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension.</p> <p>Conditional: You must specify <code>PublicTypeArn</code>, or <code>TypeName</code>, <code>Type</code>, and <code>PublisherId</code>.</p>
	TypeName *string `queryParam:"style=form,explode=true,name=TypeName"`
	// <p>An alias to assign to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.</p> <p>An extension alias must be unique within a given account and region. You can activate the same public resource multiple times in the same account and region, using different type name aliases.</p>
	TypeNameAlias *string                    `queryParam:"style=form,explode=true,name=TypeNameAlias"`
	Version       GETActivateTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// <p>Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of <code>AutoUpdate</code>.</p> <ul> <li> <p> <code>MAJOR</code>: CloudFormation updates the extension to the newest major version, if one is available.</p> </li> <li> <p> <code>MINOR</code>: CloudFormation updates the extension to the newest minor version, if one is available.</p> </li> </ul>
	VersionBump *GETActivateTypeVersionBumpEnum `queryParam:"style=form,explode=true,name=VersionBump"`
}

type GETActivateTypeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETActivateTypeRequest struct {
	QueryParams GETActivateTypeQueryParams
	Headers     GETActivateTypeHeaders
}

type GETActivateTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
