// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FormFieldSettings - Advanced field settings
type FormFieldSettings struct {
	// Secondary description of field.
	Description *string `json:"description,omitempty"`
	// Whether this field must be completed before form can be submitted
	IsRequired  *bool `json:"isRequired,omitempty"`
	SenderEmail *bool `json:"senderEmail,omitempty"`
	// Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the `fileDropCreateFolders` parameter on the receive folder is `true`. `isRequired` must be set to `true` if this setting is `true`.
	UseAsFolderName *bool `json:"useAsFolderName,omitempty"`
	// How much of the available width the field should occupy
	Width *float32 `json:"width,omitempty"`
}

// FormFieldTypeEnum - Field type
type FormFieldTypeEnum string

const (
	FormFieldTypeEnumEmail    FormFieldTypeEnum = "email"
	FormFieldTypeEnumTextarea FormFieldTypeEnum = "textarea"
	FormFieldTypeEnumName     FormFieldTypeEnum = "name"
	FormFieldTypeEnumText     FormFieldTypeEnum = "text"
)

func (e *FormFieldTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "email":
		fallthrough
	case "textarea":
		fallthrough
	case "name":
		fallthrough
	case "text":
		*e = FormFieldTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FormFieldTypeEnum: %s", s)
	}
}

type FormField struct {
	// ID of the form field.
	ID *int `json:"id,omitempty"`
	// Label of the field.
	Name *string `json:"name,omitempty"`
	// Order that field appears on the form, starting from 0
	Order *int `json:"order,omitempty"`
	// Advanced field settings
	Settings *FormFieldSettings `json:"settings,omitempty"`
	// Field type
	Type *FormFieldTypeEnum `json:"type,omitempty"`
}
