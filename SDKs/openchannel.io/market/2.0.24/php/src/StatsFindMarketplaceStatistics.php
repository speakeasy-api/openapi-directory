<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StatsFindMarketplaceStatistics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return a timeseries for a particular field
     * 
     * Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsResponse
     */
	public function getStatsSeriesPeriodFields(
        \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stats/series/{period}/{fields}', \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatsSeriesPeriodFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the total number of events for a particular field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatsTotalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatsTotalResponse
     */
	public function getStatsTotal(
        \OpenAPI\OpenAPI\Models\Operations\GetStatsTotalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatsTotalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stats/total');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatsTotalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatsTotalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Increments a statistics field
     * 
     * increment a statistics field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldResponse
     */
	public function postStatsIncrementField(
        \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stats/increment/{field}', \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStatsIncrementFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
}