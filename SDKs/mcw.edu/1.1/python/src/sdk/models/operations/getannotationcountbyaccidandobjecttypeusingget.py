"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GETAnnotationCountByAccIDAndObjectTypeUsingGETRequest:
    
    acc_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accId', 'style': 'simple', 'explode': False }})
    r"""Ontology term accession ID"""  
    include_children: bool = dataclasses.field(metadata={'path_param': { 'field_name': 'includeChildren', 'style': 'simple', 'explode': False }})
    r"""true: return annotations for the term and children, false: return annotations for the term only"""  
    object_type: int = dataclasses.field(metadata={'path_param': { 'field_name': 'objectType', 'style': 'simple', 'explode': False }})
    r"""A list of object types can be found using the lookup service"""  
    species_type_key: int = dataclasses.field(metadata={'path_param': { 'field_name': 'speciesTypeKey', 'style': 'simple', 'explode': False }})
    r"""A list of species type keys can be found using the lookup service"""  
    

@dataclasses.dataclass
class GETAnnotationCountByAccIDAndObjectTypeUsingGETResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    