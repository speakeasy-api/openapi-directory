"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class WirelessHealth:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_network_client_connection_stats(self, request: operations.GetNetworkClientConnectionStatsRequest) -> operations.GetNetworkClientConnectionStatsResponse:
        r"""Aggregated connectivity info for a given client on this network
        Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientConnectionStatsRequest, base_url, '/networks/{networkId}/clients/{clientId}/connectionStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientConnectionStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientConnectionStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_client_connection_stats_200_application_json_object = out

        return res

    def get_network_client_latency_stats(self, request: operations.GetNetworkClientLatencyStatsRequest) -> operations.GetNetworkClientLatencyStatsResponse:
        r"""Aggregated latency info for a given client on this network
        Aggregated latency info for a given client on this network. Clients are identified by their MAC.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientLatencyStatsRequest, base_url, '/networks/{networkId}/clients/{clientId}/latencyStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientLatencyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientLatencyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_client_latency_stats_200_application_json_object = out

        return res

    def get_network_clients_connection_stats(self, request: operations.GetNetworkClientsConnectionStatsRequest) -> operations.GetNetworkClientsConnectionStatsResponse:
        r"""Aggregated connectivity info for this network, grouped by clients
        Aggregated connectivity info for this network, grouped by clients
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientsConnectionStatsRequest, base_url, '/networks/{networkId}/clients/connectionStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientsConnectionStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientsConnectionStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_clients_connection_stats_200_application_json_objects = out

        return res

    def get_network_clients_latency_stats(self, request: operations.GetNetworkClientsLatencyStatsRequest) -> operations.GetNetworkClientsLatencyStatsResponse:
        r"""Aggregated latency info for this network, grouped by clients
        Aggregated latency info for this network, grouped by clients
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientsLatencyStatsRequest, base_url, '/networks/{networkId}/clients/latencyStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientsLatencyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientsLatencyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_clients_latency_stats_200_application_json_objects = out

        return res

    def get_network_connection_stats(self, request: operations.GetNetworkConnectionStatsRequest) -> operations.GetNetworkConnectionStatsResponse:
        r"""Aggregated connectivity info for this network
        Aggregated connectivity info for this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkConnectionStatsRequest, base_url, '/networks/{networkId}/connectionStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkConnectionStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkConnectionStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_connection_stats_200_application_json_object = out

        return res

    def get_network_device_connection_stats(self, request: operations.GetNetworkDeviceConnectionStatsRequest) -> operations.GetNetworkDeviceConnectionStatsResponse:
        r"""Aggregated connectivity info for a given AP on this network
        Aggregated connectivity info for a given AP on this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDeviceConnectionStatsRequest, base_url, '/networks/{networkId}/devices/{serial}/connectionStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkDeviceConnectionStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDeviceConnectionStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_device_connection_stats_200_application_json_object = out

        return res

    def get_network_device_latency_stats(self, request: operations.GetNetworkDeviceLatencyStatsRequest) -> operations.GetNetworkDeviceLatencyStatsResponse:
        r"""Aggregated latency info for a given AP on this network
        Aggregated latency info for a given AP on this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDeviceLatencyStatsRequest, base_url, '/networks/{networkId}/devices/{serial}/latencyStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkDeviceLatencyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDeviceLatencyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_device_latency_stats_200_application_json_object = out

        return res

    def get_network_devices_connection_stats(self, request: operations.GetNetworkDevicesConnectionStatsRequest) -> operations.GetNetworkDevicesConnectionStatsResponse:
        r"""Aggregated connectivity info for this network, grouped by node
        Aggregated connectivity info for this network, grouped by node
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDevicesConnectionStatsRequest, base_url, '/networks/{networkId}/devices/connectionStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkDevicesConnectionStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDevicesConnectionStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_devices_connection_stats_200_application_json_objects = out

        return res

    def get_network_devices_latency_stats(self, request: operations.GetNetworkDevicesLatencyStatsRequest) -> operations.GetNetworkDevicesLatencyStatsResponse:
        r"""Aggregated latency info for this network, grouped by node
        Aggregated latency info for this network, grouped by node
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDevicesLatencyStatsRequest, base_url, '/networks/{networkId}/devices/latencyStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkDevicesLatencyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDevicesLatencyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_devices_latency_stats_200_application_json_objects = out

        return res

    def get_network_failed_connections(self, request: operations.GetNetworkFailedConnectionsRequest) -> operations.GetNetworkFailedConnectionsResponse:
        r"""List of all failed client connection events on this network in a given time range
        List of all failed client connection events on this network in a given time range
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFailedConnectionsRequest, base_url, '/networks/{networkId}/failedConnections', request)
        
        query_params = utils.get_query_params(operations.GetNetworkFailedConnectionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFailedConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_failed_connections_200_application_json_objects = out

        return res

    def get_network_latency_stats(self, request: operations.GetNetworkLatencyStatsRequest) -> operations.GetNetworkLatencyStatsResponse:
        r"""Aggregated latency info for this network
        Aggregated latency info for this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkLatencyStatsRequest, base_url, '/networks/{networkId}/latencyStats', request)
        
        query_params = utils.get_query_params(operations.GetNetworkLatencyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkLatencyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_latency_stats_200_application_json_object = out

        return res

    