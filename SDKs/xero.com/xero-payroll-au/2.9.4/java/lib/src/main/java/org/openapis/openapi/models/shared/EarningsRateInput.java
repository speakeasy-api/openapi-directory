/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class EarningsRateInput {
    /**
     * See Accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountCode")
    public String accountCode;

    public EarningsRateInput withAccountCode(String accountCode) {
        this.accountCode = accountCode;
        return this;
    }
    
    /**
     * Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccrueLeave")
    public Boolean accrueLeave;

    public EarningsRateInput withAccrueLeave(Boolean accrueLeave) {
        this.accrueLeave = accrueLeave;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllowanceType")
    public AllowanceTypeEnum allowanceType;

    public EarningsRateInput withAllowanceType(AllowanceTypeEnum allowanceType) {
        this.allowanceType = allowanceType;
        return this;
    }
    
    /**
     * Optional Amount for FIXEDAMOUNT RateType EarningsRate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Amount")
    public Double amount;

    public EarningsRateInput withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Is the current record
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentRecord")
    public Boolean currentRecord;

    public EarningsRateInput withCurrentRecord(Boolean currentRecord) {
        this.currentRecord = currentRecord;
        return this;
    }
    
    /**
     * Xero identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EarningsRateID")
    public String earningsRateID;

    public EarningsRateInput withEarningsRateID(String earningsRateID) {
        this.earningsRateID = earningsRateID;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EarningsType")
    public EarningsTypeEnum earningsType;

    public EarningsRateInput withEarningsType(EarningsTypeEnum earningsType) {
        this.earningsType = earningsType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EmploymentTerminationPaymentType")
    public EmploymentTerminationPaymentTypeEnum employmentTerminationPaymentType;

    public EarningsRateInput withEmploymentTerminationPaymentType(EmploymentTerminationPaymentTypeEnum employmentTerminationPaymentType) {
        this.employmentTerminationPaymentType = employmentTerminationPaymentType;
        return this;
    }
    
    /**
     * See the ATO website for details of which payments are exempt from SGC
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsExemptFromSuper")
    public Boolean isExemptFromSuper;

    public EarningsRateInput withIsExemptFromSuper(Boolean isExemptFromSuper) {
        this.isExemptFromSuper = isExemptFromSuper;
        return this;
    }
    
    /**
     * Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsExemptFromTax")
    public Boolean isExemptFromTax;

    public EarningsRateInput withIsExemptFromTax(Boolean isExemptFromTax) {
        this.isExemptFromTax = isExemptFromTax;
        return this;
    }
    
    /**
     * Boolean to determine if the earnings rate is reportable or exempt from W1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsReportableAsW1")
    public Boolean isReportableAsW1;

    public EarningsRateInput withIsReportableAsW1(Boolean isReportableAsW1) {
        this.isReportableAsW1 = isReportableAsW1;
        return this;
    }
    
    /**
     * This is the multiplier used to calculate the rate per unit, based on the employeeâ€™s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Multiplier")
    public Double multiplier;

    public EarningsRateInput withMultiplier(Double multiplier) {
        this.multiplier = multiplier;
        return this;
    }
    
    /**
     * Name of the earnings rate (max length = 100)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;

    public EarningsRateInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RatePerUnit")
    public String ratePerUnit;

    public EarningsRateInput withRatePerUnit(String ratePerUnit) {
        this.ratePerUnit = ratePerUnit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RateType")
    public RateTypeEnum rateType;

    public EarningsRateInput withRateType(RateTypeEnum rateType) {
        this.rateType = rateType;
        return this;
    }
    
    /**
     * Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TypeOfUnits")
    public String typeOfUnits;

    public EarningsRateInput withTypeOfUnits(String typeOfUnits) {
        this.typeOfUnits = typeOfUnits;
        return this;
    }
    
    public EarningsRateInput(){}
}
