"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCapacityReservationUsageResult = exports.GetCapacityReservationUsageResultStateEnum = exports.GetCapacityReservationUsageResultInstanceUsages = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Information about the Capacity Reservation usage.
 */
var GetCapacityReservationUsageResultInstanceUsages = /** @class */ (function (_super) {
    __extends(GetCapacityReservationUsageResultInstanceUsages, _super);
    function GetCapacityReservationUsageResultInstanceUsages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetCapacityReservationUsageResultInstanceUsages.prototype, "accountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetCapacityReservationUsageResultInstanceUsages.prototype, "usedInstanceCount", void 0);
    return GetCapacityReservationUsageResultInstanceUsages;
}(utils_1.SpeakeasyBase));
exports.GetCapacityReservationUsageResultInstanceUsages = GetCapacityReservationUsageResultInstanceUsages;
/**
 * <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul>
 */
var GetCapacityReservationUsageResultStateEnum;
(function (GetCapacityReservationUsageResultStateEnum) {
    GetCapacityReservationUsageResultStateEnum["Active"] = "active";
    GetCapacityReservationUsageResultStateEnum["Expired"] = "expired";
    GetCapacityReservationUsageResultStateEnum["Cancelled"] = "cancelled";
    GetCapacityReservationUsageResultStateEnum["Pending"] = "pending";
    GetCapacityReservationUsageResultStateEnum["Failed"] = "failed";
})(GetCapacityReservationUsageResultStateEnum = exports.GetCapacityReservationUsageResultStateEnum || (exports.GetCapacityReservationUsageResultStateEnum = {}));
/**
 * Success
 */
var GetCapacityReservationUsageResult = /** @class */ (function (_super) {
    __extends(GetCapacityReservationUsageResult, _super);
    function GetCapacityReservationUsageResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetCapacityReservationUsageResult.prototype, "availableInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetCapacityReservationUsageResult.prototype, "capacityReservationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetCapacityReservationUsageResult.prototype, "instanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetCapacityReservationUsageResultInstanceUsages,
        }),
        __metadata("design:type", Array)
    ], GetCapacityReservationUsageResult.prototype, "instanceUsages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetCapacityReservationUsageResult.prototype, "nextToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetCapacityReservationUsageResult.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetCapacityReservationUsageResult.prototype, "totalInstanceCount", void 0);
    return GetCapacityReservationUsageResult;
}(utils_1.SpeakeasyBase));
exports.GetCapacityReservationUsageResult = GetCapacityReservationUsageResult;
