// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetEventsCountDirectionEnum - Filter by event direction
type GetEventsCountDirectionEnum string

const (
	GetEventsCountDirectionEnumInbound  GetEventsCountDirectionEnum = "INBOUND"
	GetEventsCountDirectionEnumOutbound GetEventsCountDirectionEnum = "OUTBOUND"
)

func (e *GetEventsCountDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		*e = GetEventsCountDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsCountDirectionEnum: %s", s)
	}
}

// GetEventsCountStatesEnum - Filter events by state
type GetEventsCountStatesEnum string

const (
	GetEventsCountStatesEnumInitializing GetEventsCountStatesEnum = "INITIALIZING"
	GetEventsCountStatesEnumRinging      GetEventsCountStatesEnum = "RINGING"
	GetEventsCountStatesEnumActive       GetEventsCountStatesEnum = "ACTIVE"
	GetEventsCountStatesEnumHeld         GetEventsCountStatesEnum = "HELD"
	GetEventsCountStatesEnumRemoteHeld   GetEventsCountStatesEnum = "REMOTE_HELD"
)

func (e *GetEventsCountStatesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INITIALIZING":
		fallthrough
	case "RINGING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "HELD":
		fallthrough
	case "REMOTE_HELD":
		*e = GetEventsCountStatesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsCountStatesEnum: %s", s)
	}
}

type GetEventsCountRequest struct {
	// Filter by event direction
	Direction *GetEventsCountDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Return events that occurred after this point in time
	FromDate *int64 `queryParam:"style=form,explode=true,name=fromDate"`
	// Filter events by state
	States *GetEventsCountStatesEnum `queryParam:"style=form,explode=true,name=states"`
	// Return events that occurred before this point in time
	ToDate *int64 `queryParam:"style=form,explode=true,name=toDate"`
}

type GetEventsCountResponse struct {
	ContentType string
	// Bad Request: The client should not repeat the request without modifications
	ErrorResponse *shared.ErrorResponse
	// Successful
	EventsCount *shared.EventsCount
	StatusCode  int
	RawResponse *http.Response
}
