"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def documentai_projects_locations_fetch_processor_types(self, request: operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest, security: operations.DocumentaiProjectsLocationsFetchProcessorTypesSecurity) -> operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse:
        r"""Fetches processor types. Note that we do not use ListProcessorTypes here because it is not paginated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest, base_url, '/v1/{parent}:fetchProcessorTypes', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1FetchProcessorTypesResponse])
                res.google_cloud_documentai_v1_fetch_processor_types_response = out

        return res

    def documentai_projects_locations_list(self, request: operations.DocumentaiProjectsLocationsListRequest, security: operations.DocumentaiProjectsLocationsListSecurity) -> operations.DocumentaiProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudLocationListLocationsResponse])
                res.google_cloud_location_list_locations_response = out

        return res

    def documentai_projects_locations_operations_cancel(self, request: operations.DocumentaiProjectsLocationsOperationsCancelRequest, security: operations.DocumentaiProjectsLocationsOperationsCancelSecurity) -> operations.DocumentaiProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def documentai_projects_locations_processor_types_list(self, request: operations.DocumentaiProjectsLocationsProcessorTypesListRequest, security: operations.DocumentaiProjectsLocationsProcessorTypesListSecurity) -> operations.DocumentaiProjectsLocationsProcessorTypesListResponse:
        r"""Lists the processor types that exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorTypesListRequest, base_url, '/v1/{parent}/processorTypes', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorTypesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1ListProcessorTypesResponse])
                res.google_cloud_documentai_v1_list_processor_types_response = out

        return res

    def documentai_projects_locations_processors_create(self, request: operations.DocumentaiProjectsLocationsProcessorsCreateRequest, security: operations.DocumentaiProjectsLocationsProcessorsCreateSecurity) -> operations.DocumentaiProjectsLocationsProcessorsCreateResponse:
        r"""Creates a processor from the type processor that the user chose. The processor will be at \\"ENABLED\\" state by default after its creation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsCreateRequest, base_url, '/v1/{parent}/processors', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_processor_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1Processor])
                res.google_cloud_documentai_v1_processor = out

        return res

    def documentai_projects_locations_processors_disable(self, request: operations.DocumentaiProjectsLocationsProcessorsDisableRequest, security: operations.DocumentaiProjectsLocationsProcessorsDisableSecurity) -> operations.DocumentaiProjectsLocationsProcessorsDisableResponse:
        r"""Disables a processor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsDisableRequest, base_url, '/v1/{name}:disable', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsDisableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsDisableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_enable(self, request: operations.DocumentaiProjectsLocationsProcessorsEnableRequest, security: operations.DocumentaiProjectsLocationsProcessorsEnableSecurity) -> operations.DocumentaiProjectsLocationsProcessorsEnableResponse:
        r"""Enables a processor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsEnableRequest, base_url, '/v1/{name}:enable', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsEnableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsEnableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_human_review_config_review_document(self, request: operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest, security: operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity) -> operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse:
        r"""Send a document for Human Review. The input document should be processed by the specified processor."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest, base_url, '/v1/{humanReviewConfig}:reviewDocument', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_review_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_list(self, request: operations.DocumentaiProjectsLocationsProcessorsListRequest, security: operations.DocumentaiProjectsLocationsProcessorsListSecurity) -> operations.DocumentaiProjectsLocationsProcessorsListResponse:
        r"""Lists all processors which belong to this project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsListRequest, base_url, '/v1/{parent}/processors', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1ListProcessorsResponse])
                res.google_cloud_documentai_v1_list_processors_response = out

        return res

    def documentai_projects_locations_processors_processor_versions_batch_process(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse:
        r"""LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest, base_url, '/v1/{name}:batchProcess', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_batch_process_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_processor_versions_delete(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse:
        r"""Deletes the processor version, all artifacts under the processor version will be deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_processor_versions_deploy(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse:
        r"""Deploys the processor version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest, base_url, '/v1/{name}:deploy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_processor_versions_evaluate_processor_version(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse:
        r"""Evaluates a ProcessorVersion against annotated documents, producing an Evaluation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest, base_url, '/v1/{processorVersion}:evaluateProcessorVersion', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_evaluate_processor_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_processor_versions_evaluations_list(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse:
        r"""Retrieves a set of evaluations for a given processor version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest, base_url, '/v1/{parent}/evaluations', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1ListEvaluationsResponse])
                res.google_cloud_documentai_v1_list_evaluations_response = out

        return res

    def documentai_projects_locations_processors_processor_versions_list(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse:
        r"""Lists all versions of a processor."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest, base_url, '/v1/{parent}/processorVersions', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1ListProcessorVersionsResponse])
                res.google_cloud_documentai_v1_list_processor_versions_response = out

        return res

    def documentai_projects_locations_processors_processor_versions_process(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse:
        r"""Processes a single document."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest, base_url, '/v1/{name}:process', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_process_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1ProcessResponse])
                res.google_cloud_documentai_v1_process_response = out

        return res

    def documentai_projects_locations_processors_processor_versions_train(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse:
        r"""Trains a new processor version. Operation metadata is returned as cloud_documentai_core.TrainProcessorVersionMetadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest, base_url, '/v1/{parent}/processorVersions:train', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_train_processor_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_processor_versions_undeploy(self, request: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest, security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity) -> operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse:
        r"""Undeploys the processor version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest, base_url, '/v1/{name}:undeploy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_processors_set_default_processor_version(self, request: operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest, security: operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity) -> operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse:
        r"""Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest, base_url, '/v1/{processor}:setDefaultProcessorVersion', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1_set_default_processor_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_operations_get(self, request: operations.DocumentaiProjectsOperationsGetRequest, security: operations.DocumentaiProjectsOperationsGetSecurity) -> operations.DocumentaiProjectsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsOperationsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    