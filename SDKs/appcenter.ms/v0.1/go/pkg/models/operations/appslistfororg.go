// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsListForOrgSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsListForOrgRequest struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type AppsListForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumConflict            AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumNotFound            AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsListForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsListForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsListForOrgDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsListForOrgDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsListForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsListForOrgDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrgDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsListForOrgDefaultApplicationJSONError struct {
	Code    AppsListForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

// AppsListForOrgDefaultApplicationJSON - Error
type AppsListForOrgDefaultApplicationJSON struct {
	Error AppsListForOrgDefaultApplicationJSONError `json:"error"`
}

type AppsListForOrg200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsListForOrg200ApplicationJSONMemberPermissionsEnum string

const (
	AppsListForOrg200ApplicationJSONMemberPermissionsEnumManager   AppsListForOrg200ApplicationJSONMemberPermissionsEnum = "manager"
	AppsListForOrg200ApplicationJSONMemberPermissionsEnumDeveloper AppsListForOrg200ApplicationJSONMemberPermissionsEnum = "developer"
	AppsListForOrg200ApplicationJSONMemberPermissionsEnumViewer    AppsListForOrg200ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsListForOrg200ApplicationJSONMemberPermissionsEnumTester    AppsListForOrg200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e AppsListForOrg200ApplicationJSONMemberPermissionsEnum) ToPointer() *AppsListForOrg200ApplicationJSONMemberPermissionsEnum {
	return &e
}

func (e *AppsListForOrg200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsListForOrg200ApplicationJSONMemberPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrg200ApplicationJSONMemberPermissionsEnum: %v", v)
	}
}

// AppsListForOrg200ApplicationJSONOriginEnum - The creation origin of this app
type AppsListForOrg200ApplicationJSONOriginEnum string

const (
	AppsListForOrg200ApplicationJSONOriginEnumAppcenter AppsListForOrg200ApplicationJSONOriginEnum = "appcenter"
	AppsListForOrg200ApplicationJSONOriginEnumHockeyapp AppsListForOrg200ApplicationJSONOriginEnum = "hockeyapp"
	AppsListForOrg200ApplicationJSONOriginEnumCodepush  AppsListForOrg200ApplicationJSONOriginEnum = "codepush"
)

func (e AppsListForOrg200ApplicationJSONOriginEnum) ToPointer() *AppsListForOrg200ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsListForOrg200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsListForOrg200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrg200ApplicationJSONOriginEnum: %v", v)
	}
}

// AppsListForOrg200ApplicationJSONOsEnum - The OS the app will be running on
type AppsListForOrg200ApplicationJSONOsEnum string

const (
	AppsListForOrg200ApplicationJSONOsEnumAndroid AppsListForOrg200ApplicationJSONOsEnum = "Android"
	AppsListForOrg200ApplicationJSONOsEnumIOs     AppsListForOrg200ApplicationJSONOsEnum = "iOS"
	AppsListForOrg200ApplicationJSONOsEnumMacOs   AppsListForOrg200ApplicationJSONOsEnum = "macOS"
	AppsListForOrg200ApplicationJSONOsEnumTizen   AppsListForOrg200ApplicationJSONOsEnum = "Tizen"
	AppsListForOrg200ApplicationJSONOsEnumTvOs    AppsListForOrg200ApplicationJSONOsEnum = "tvOS"
	AppsListForOrg200ApplicationJSONOsEnumWindows AppsListForOrg200ApplicationJSONOsEnum = "Windows"
	AppsListForOrg200ApplicationJSONOsEnumLinux   AppsListForOrg200ApplicationJSONOsEnum = "Linux"
	AppsListForOrg200ApplicationJSONOsEnumCustom  AppsListForOrg200ApplicationJSONOsEnum = "Custom"
)

func (e AppsListForOrg200ApplicationJSONOsEnum) ToPointer() *AppsListForOrg200ApplicationJSONOsEnum {
	return &e
}

func (e *AppsListForOrg200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsListForOrg200ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrg200ApplicationJSONOsEnum: %v", v)
	}
}

// AppsListForOrg200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsListForOrg200ApplicationJSONOwnerTypeEnum string

const (
	AppsListForOrg200ApplicationJSONOwnerTypeEnumOrg  AppsListForOrg200ApplicationJSONOwnerTypeEnum = "org"
	AppsListForOrg200ApplicationJSONOwnerTypeEnumUser AppsListForOrg200ApplicationJSONOwnerTypeEnum = "user"
)

func (e AppsListForOrg200ApplicationJSONOwnerTypeEnum) ToPointer() *AppsListForOrg200ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *AppsListForOrg200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = AppsListForOrg200ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrg200ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// AppsListForOrg200ApplicationJSONOwner - The information about the app's owner
type AppsListForOrg200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsListForOrg200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsListForOrg200ApplicationJSONPlatformEnum - The platform of the app
type AppsListForOrg200ApplicationJSONPlatformEnum string

const (
	AppsListForOrg200ApplicationJSONPlatformEnumJava            AppsListForOrg200ApplicationJSONPlatformEnum = "Java"
	AppsListForOrg200ApplicationJSONPlatformEnumObjectiveCSwift AppsListForOrg200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsListForOrg200ApplicationJSONPlatformEnumUwp             AppsListForOrg200ApplicationJSONPlatformEnum = "UWP"
	AppsListForOrg200ApplicationJSONPlatformEnumCordova         AppsListForOrg200ApplicationJSONPlatformEnum = "Cordova"
	AppsListForOrg200ApplicationJSONPlatformEnumReactNative     AppsListForOrg200ApplicationJSONPlatformEnum = "React-Native"
	AppsListForOrg200ApplicationJSONPlatformEnumUnity           AppsListForOrg200ApplicationJSONPlatformEnum = "Unity"
	AppsListForOrg200ApplicationJSONPlatformEnumElectron        AppsListForOrg200ApplicationJSONPlatformEnum = "Electron"
	AppsListForOrg200ApplicationJSONPlatformEnumXamarin         AppsListForOrg200ApplicationJSONPlatformEnum = "Xamarin"
	AppsListForOrg200ApplicationJSONPlatformEnumWpf             AppsListForOrg200ApplicationJSONPlatformEnum = "WPF"
	AppsListForOrg200ApplicationJSONPlatformEnumWinForms        AppsListForOrg200ApplicationJSONPlatformEnum = "WinForms"
	AppsListForOrg200ApplicationJSONPlatformEnumUnknown         AppsListForOrg200ApplicationJSONPlatformEnum = "Unknown"
	AppsListForOrg200ApplicationJSONPlatformEnumCustom          AppsListForOrg200ApplicationJSONPlatformEnum = "Custom"
)

func (e AppsListForOrg200ApplicationJSONPlatformEnum) ToPointer() *AppsListForOrg200ApplicationJSONPlatformEnum {
	return &e
}

func (e *AppsListForOrg200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsListForOrg200ApplicationJSONPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListForOrg200ApplicationJSONPlatformEnum: %v", v)
	}
}

type AppsListForOrg200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                             `json:"app_secret"`
	AzureSubscription *AppsListForOrg200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsListForOrg200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsListForOrg200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsListForOrg200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsListForOrg200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsListForOrg200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsListForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsListForOrg200ApplicationJSONAnies []AppsListForOrg200ApplicationJSON
	// Error
	AppsListForOrgDefaultApplicationJSONObject *AppsListForOrgDefaultApplicationJSON
}
