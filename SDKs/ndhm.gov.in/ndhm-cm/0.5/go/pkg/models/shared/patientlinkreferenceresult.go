// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientLinkReferenceResultLinkAuthenticationTypeEnum string

const (
	PatientLinkReferenceResultLinkAuthenticationTypeEnumDirect   PatientLinkReferenceResultLinkAuthenticationTypeEnum = "DIRECT"
	PatientLinkReferenceResultLinkAuthenticationTypeEnumMediated PatientLinkReferenceResultLinkAuthenticationTypeEnum = "MEDIATED"
)

func (e *PatientLinkReferenceResultLinkAuthenticationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DIRECT":
		fallthrough
	case "MEDIATED":
		*e = PatientLinkReferenceResultLinkAuthenticationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientLinkReferenceResultLinkAuthenticationTypeEnum: %s", s)
	}
}

type PatientLinkReferenceResultLink struct {
	AuthenticationType PatientLinkReferenceResultLinkAuthenticationTypeEnum `json:"authenticationType"`
	Meta               *Meta                                                `json:"meta,omitempty"`
	ReferenceNumber    string                                               `json:"referenceNumber"`
}

type PatientLinkReferenceResult struct {
	Error *Error                          `json:"error,omitempty"`
	Link  *PatientLinkReferenceResultLink `json:"link,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string           `json:"requestId"`
	Resp      RequestReference `json:"resp"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp     time.Time `json:"timestamp"`
	TransactionID string    `json:"transactionId"`
}
