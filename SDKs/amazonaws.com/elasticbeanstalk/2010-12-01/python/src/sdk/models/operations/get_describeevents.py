"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from enum import Enum
from typing import Optional

class GETDescribeEventsActionEnum(str, Enum):
    DESCRIBE_EVENTS = 'DescribeEvents'

class GETDescribeEventsSeverityEnum(str, Enum):
    r"""If specified, limits the events returned from this call to include only those with the specified severity or higher."""
    TRACE = 'TRACE'
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'
    FATAL = 'FATAL'

class GETDescribeEventsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_12_01 = '2010-12-01'


@dataclasses.dataclass
class GETDescribeEventsRequest:
    
    action: GETDescribeEventsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDescribeEventsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    application_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ApplicationName', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndTime', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the <code>EndTime</code>."""  
    environment_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnvironmentId', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment."""  
    environment_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnvironmentName', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment."""  
    max_records: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxRecords', 'style': 'form', 'explode': True }})
    r"""Specifies the maximum number of events that can be returned, beginning with the most recent event."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token. If specified, the events return the next batch of results."""  
    platform_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PlatformArn', 'style': 'form', 'explode': True }})
    r"""The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequestId', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID."""  
    severity: Optional[GETDescribeEventsSeverityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Severity', 'style': 'form', 'explode': True }})
    r"""If specified, limits the events returned from this call to include only those with the specified severity or higher."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StartTime', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time."""  
    template_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TemplateName', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration."""  
    version_label: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VersionLabel', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDescribeEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    