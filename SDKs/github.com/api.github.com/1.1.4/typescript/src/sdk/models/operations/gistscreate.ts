/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class GistsCreateRequestBodyFiles extends SpeakeasyBase {
  /**
   * Content of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content: string;
}

export enum GistsCreateRequestBodyPublic2Enum {
  True = "true",
  False = "false",
}

export class GistsCreateRequestBody extends SpeakeasyBase {
  /**
   * Description of the gist
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Names and content for the files that make up the gist
   */
  @SpeakeasyMetadata({ elemType: GistsCreateRequestBodyFiles })
  @Expose({ name: "files" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GistsCreateRequestBodyFiles> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], GistsCreateRequestBodyFiles);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  files: Record<string, GistsCreateRequestBodyFiles>;

  @SpeakeasyMetadata()
  @Expose({ name: "public" })
  public?: any;
}

export class GistsCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  gistSimple?: shared.GistSimple;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
