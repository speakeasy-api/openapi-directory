// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetLoadBalancerPoliciesOfListenerActionEnum
type GETSetLoadBalancerPoliciesOfListenerActionEnum string

const (
	GETSetLoadBalancerPoliciesOfListenerActionEnumSetLoadBalancerPoliciesOfListener GETSetLoadBalancerPoliciesOfListenerActionEnum = "SetLoadBalancerPoliciesOfListener"
)

func (e GETSetLoadBalancerPoliciesOfListenerActionEnum) ToPointer() *GETSetLoadBalancerPoliciesOfListenerActionEnum {
	return &e
}

func (e *GETSetLoadBalancerPoliciesOfListenerActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SetLoadBalancerPoliciesOfListener":
		*e = GETSetLoadBalancerPoliciesOfListenerActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetLoadBalancerPoliciesOfListenerActionEnum: %v", v)
	}
}

// GETSetLoadBalancerPoliciesOfListenerVersionEnum
type GETSetLoadBalancerPoliciesOfListenerVersionEnum string

const (
	GETSetLoadBalancerPoliciesOfListenerVersionEnumTwoThousandAndTwelve0601 GETSetLoadBalancerPoliciesOfListenerVersionEnum = "2012-06-01"
)

func (e GETSetLoadBalancerPoliciesOfListenerVersionEnum) ToPointer() *GETSetLoadBalancerPoliciesOfListenerVersionEnum {
	return &e
}

func (e *GETSetLoadBalancerPoliciesOfListenerVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2012-06-01":
		*e = GETSetLoadBalancerPoliciesOfListenerVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetLoadBalancerPoliciesOfListenerVersionEnum: %v", v)
	}
}

type GETSetLoadBalancerPoliciesOfListenerRequest struct {
	Action GETSetLoadBalancerPoliciesOfListenerActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the load balancer.
	LoadBalancerName string `queryParam:"style=form,explode=true,name=LoadBalancerName"`
	// The external port of the load balancer.
	LoadBalancerPort int64 `queryParam:"style=form,explode=true,name=LoadBalancerPort"`
	// The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.
	PolicyNames       []string                                        `queryParam:"style=form,explode=true,name=PolicyNames"`
	Version           GETSetLoadBalancerPoliciesOfListenerVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetLoadBalancerPoliciesOfListenerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
