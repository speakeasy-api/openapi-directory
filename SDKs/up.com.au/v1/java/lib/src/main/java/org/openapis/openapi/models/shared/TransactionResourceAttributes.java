/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class TransactionResourceAttributes {
    /**
     * The amount of this transaction in Australian dollars. For
     * transactions that were once `HELD` but are now `SETTLED`, refer to
     * the `holdInfo` field for the original `amount` the transaction was
     * `HELD` at.
     * 
     */
    @JsonProperty("amount")
    public MoneyObject amount;

    public TransactionResourceAttributes withAmount(MoneyObject amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * If all or part of this transaction was instantly reimbursed in the
     * form of cashback, details of the reimbursement.
     * 
     */
    @JsonProperty("cashback")
    public TransactionResourceAttributesCashback cashback;

    public TransactionResourceAttributes withCashback(TransactionResourceAttributesCashback cashback) {
        this.cashback = cashback;
        return this;
    }
    
    /**
     * The date-time at which this transaction was first encountered.
     * 
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public TransactionResourceAttributes withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * A short description for this transaction. Usually the merchant name
     * for purchases.
     * 
     */
    @JsonProperty("description")
    public String description;

    public TransactionResourceAttributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The foreign currency amount of this transaction. This field will be
     * `null` for domestic transactions. The amount was converted to the AUD
     * amount reflected in the `amount` of this transaction. Refer to the
     * `holdInfo` field for the original `foreignAmount` the transaction was
     * `HELD` at.
     * 
     */
    @JsonProperty("foreignAmount")
    public TransactionResourceAttributesForeignAmount foreignAmount;

    public TransactionResourceAttributes withForeignAmount(TransactionResourceAttributesForeignAmount foreignAmount) {
        this.foreignAmount = foreignAmount;
        return this;
    }
    
    /**
     * If this transaction is currently in the `HELD` status, or was ever in
     * the `HELD` status, the `amount` and `foreignAmount` of the
     * transaction while `HELD`.
     * 
     */
    @JsonProperty("holdInfo")
    public TransactionResourceAttributesHoldInfo holdInfo;

    public TransactionResourceAttributes withHoldInfo(TransactionResourceAttributesHoldInfo holdInfo) {
        this.holdInfo = holdInfo;
        return this;
    }
    
    /**
     * Boolean flag set to true on transactions that support the use of
     * categories.
     * 
     */
    @JsonProperty("isCategorizable")
    public Boolean isCategorizable;

    public TransactionResourceAttributes withIsCategorizable(Boolean isCategorizable) {
        this.isCategorizable = isCategorizable;
        return this;
    }
    
    /**
     * Attached message for this transaction, such as a payment message, or a
     * transfer note.
     * 
     */
    @JsonProperty("message")
    public String message;

    public TransactionResourceAttributes withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * The original, unprocessed text of the transaction. This is often not
     * a perfect indicator of the actual merchant, but it is useful for
     * reconciliation purposes in some cases.
     * 
     */
    @JsonProperty("rawText")
    public String rawText;

    public TransactionResourceAttributes withRawText(String rawText) {
        this.rawText = rawText;
        return this;
    }
    
    /**
     * Details of how this transaction was rounded-up. If no Round Up was
     * applied this field will be `null`.
     * 
     */
    @JsonProperty("roundUp")
    public TransactionResourceAttributesRoundUp roundUp;

    public TransactionResourceAttributes withRoundUp(TransactionResourceAttributesRoundUp roundUp) {
        this.roundUp = roundUp;
        return this;
    }
    
    /**
     * The date-time at which this transaction settled. This field will be
     * `null` for transactions that are currently in the `HELD` status.
     * 
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("settledAt")
    public OffsetDateTime settledAt;

    public TransactionResourceAttributes withSettledAt(OffsetDateTime settledAt) {
        this.settledAt = settledAt;
        return this;
    }
    
    /**
     * The current processing status of this transaction, according to
     * whether or not this transaction has settled or is still held.
     * 
     */
    @JsonProperty("status")
    public TransactionStatusEnumEnum status;

    public TransactionResourceAttributes withStatus(TransactionStatusEnumEnum status) {
        this.status = status;
        return this;
    }
    
    public TransactionResourceAttributes(@JsonProperty("amount") MoneyObject amount, @JsonProperty("cashback") TransactionResourceAttributesCashback cashback, @JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("description") String description, @JsonProperty("foreignAmount") TransactionResourceAttributesForeignAmount foreignAmount, @JsonProperty("holdInfo") TransactionResourceAttributesHoldInfo holdInfo, @JsonProperty("isCategorizable") Boolean isCategorizable, @JsonProperty("message") String message, @JsonProperty("rawText") String rawText, @JsonProperty("roundUp") TransactionResourceAttributesRoundUp roundUp, @JsonProperty("settledAt") OffsetDateTime settledAt, @JsonProperty("status") TransactionStatusEnumEnum status) {
        this.amount = amount;
        this.cashback = cashback;
        this.createdAt = createdAt;
        this.description = description;
        this.foreignAmount = foreignAmount;
        this.holdInfo = holdInfo;
        this.isCategorizable = isCategorizable;
        this.message = message;
        this.rawText = rawText;
        this.roundUp = roundUp;
        this.settledAt = settledAt;
        this.status = status;
  }
}
