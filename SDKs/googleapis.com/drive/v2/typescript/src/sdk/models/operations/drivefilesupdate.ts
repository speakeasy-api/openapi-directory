/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DriveFilesUpdateSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurityOption3 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurityOption4 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurityOption5 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurityOption6 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DriveFilesUpdateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: DriveFilesUpdateSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: DriveFilesUpdateSecurityOption2;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option3?: DriveFilesUpdateSecurityOption3;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option4?: DriveFilesUpdateSecurityOption4;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option5?: DriveFilesUpdateSecurityOption5;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option6?: DriveFilesUpdateSecurityOption6;
}

/**
 * Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate.
 */
export enum DriveFilesUpdateModifiedDateBehaviorEnum {
  FromBody = "fromBody",
  FromBodyIfNeeded = "fromBodyIfNeeded",
  FromBodyOrNow = "fromBodyOrNow",
  NoChange = "noChange",
  Now = "now",
  NowIfNeeded = "nowIfNeeded",
}

export class DriveFilesUpdateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/octet-stream" })
  requestBody?: Uint8Array;

  /**
   * Comma-separated list of parent IDs to add.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=addParents",
  })
  addParents?: string;

  /**
   * Data format for the response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * This parameter is deprecated and has no function.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=convert",
  })
  convert?: boolean;

  /**
   * Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=enforceSingleParent",
  })
  enforceSingleParent?: boolean;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * The ID of the file to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=fileId",
  })
  fileId: string;

  /**
   * A comma-separated list of IDs of labels to include in the labelInfo part of the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeLabels",
  })
  includeLabels?: string;

  /**
   * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includePermissionsForView",
  })
  includePermissionsForView?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=modifiedDateBehavior",
  })
  modifiedDateBehavior?: DriveFilesUpdateModifiedDateBehaviorEnum;

  /**
   * Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the Drive Help Center. Note that this field is ignored if there is no payload in the request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=newRevision",
  })
  newRevision?: boolean;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ocr" })
  ocr?: boolean;

  /**
   * If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ocrLanguage",
  })
  ocrLanguage?: string;

  /**
   * Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pinned",
  })
  pinned?: boolean;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Comma-separated list of parent IDs to remove.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=removeParents",
  })
  removeParents?: string;

  /**
   * Whether to set the modified date using the value supplied in the request body. Setting this field to true is equivalent to modifiedDateBehavior=fromBodyOrNow, and false is equivalent to modifiedDateBehavior=now. To prevent any changes to the modified date set modifiedDateBehavior=noChange.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=setModifiedDate",
  })
  setModifiedDate?: boolean;

  /**
   * Whether the requesting application supports both My Drives and shared drives.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=supportsAllDrives",
  })
  supportsAllDrives?: boolean;

  /**
   * Deprecated use supportsAllDrives instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=supportsTeamDrives",
  })
  supportsTeamDrives?: boolean;

  /**
   * The language of the timed text.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timedTextLanguage",
  })
  timedTextLanguage?: string;

  /**
   * The timed text track name.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timedTextTrackName",
  })
  timedTextTrackName?: string;

  /**
   * Whether to update the view date after successfully updating the file.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=updateViewedDate",
  })
  updateViewedDate?: boolean;

  /**
   * Whether to use the content as indexable text.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=useContentAsIndexableText",
  })
  useContentAsIndexableText?: boolean;

  /**
   * Deprecated. Please use quotaUser instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userIp",
  })
  userIp?: string;
}

export class DriveFilesUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  file?: shared.File;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
