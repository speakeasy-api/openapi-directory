// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetBlobXAmzTargetEnum
type GetBlobXAmzTargetEnum string

const (
	GetBlobXAmzTargetEnumCodeCommit20150413GetBlob GetBlobXAmzTargetEnum = "CodeCommit_20150413.GetBlob"
)

func (e *GetBlobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.GetBlob":
		*e = GetBlobXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBlobXAmzTargetEnum: %s", s)
	}
}

type GetBlobHeaders struct {
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetBlobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetBlobRequest struct {
	Headers GetBlobHeaders
	Request shared.GetBlobInput `request:"mediaType=application/json"`
}

type GetBlobResponse struct {
	// BlobIdDoesNotExistException
	BlobIDDoesNotExistException interface{}
	// BlobIdRequiredException
	BlobIDRequiredException interface{}
	ContentType             string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// FileTooLargeException
	FileTooLargeException interface{}
	// Success
	GetBlobOutput *shared.GetBlobOutput
	// InvalidBlobIdException
	InvalidBlobIDException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
