/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CreditSpecificationRequest } from "./creditspecificationrequest";
import { InstanceIpv6AddressListRequest } from "./instanceipv6addresslistrequest";
import { InstanceRequirementsRequest } from "./instancerequirementsrequest";
import { InstanceTypeEnum } from "./instancetypeenum";
import { LaunchTemplateCapacityReservationSpecificationRequest } from "./launchtemplatecapacityreservationspecificationrequest";
import { LaunchTemplateCpuOptionsRequest } from "./launchtemplatecpuoptionsrequest";
import { LaunchTemplateEbsBlockDeviceRequest } from "./launchtemplateebsblockdevicerequest";
import { LaunchTemplateEnclaveOptionsRequest } from "./launchtemplateenclaveoptionsrequest";
import { LaunchTemplateHibernationOptionsRequest } from "./launchtemplatehibernationoptionsrequest";
import { LaunchTemplateIamInstanceProfileSpecificationRequest } from "./launchtemplateiaminstanceprofilespecificationrequest";
import { LaunchTemplateInstanceMaintenanceOptionsRequest } from "./launchtemplateinstancemaintenanceoptionsrequest";
import { LaunchTemplateInstanceMarketOptionsRequest } from "./launchtemplateinstancemarketoptionsrequest";
import { LaunchTemplateInstanceMetadataOptionsRequest } from "./launchtemplateinstancemetadataoptionsrequest";
import { LaunchTemplatePlacementRequest } from "./launchtemplateplacementrequest";
import { LaunchTemplatePrivateDnsNameOptionsRequest } from "./launchtemplateprivatednsnameoptionsrequest";
import { LaunchTemplatesMonitoringRequest } from "./launchtemplatesmonitoringrequest";
import { PrivateIpAddressSpecificationList } from "./privateipaddressspecificationlist";
import { ResourceTypeEnum } from "./resourcetypeenum";
import { ShutdownBehaviorEnum } from "./shutdownbehaviorenum";

/**
 * Describes a block device mapping.
 */
export class RequestLaunchTemplateDataBlockDeviceMappings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deviceName?: string;

  @SpeakeasyMetadata()
  ebs?: LaunchTemplateEbsBlockDeviceRequest;

  @SpeakeasyMetadata()
  noDevice?: string;

  @SpeakeasyMetadata()
  virtualName?: string;
}

/**
 * A specification for an Elastic Graphics accelerator.
 */
export class RequestLaunchTemplateDataElasticGpuSpecifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  type: string;
}

/**
 *  Describes an elastic inference accelerator.
 */
export class RequestLaunchTemplateDataElasticInferenceAccelerators extends SpeakeasyBase {
  @SpeakeasyMetadata()
  count?: number;

  @SpeakeasyMetadata()
  type: string;
}

/**
 * Describes a license configuration.
 */
export class RequestLaunchTemplateDataLicenseSpecifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  licenseConfigurationArn?: string;
}

/**
 * Describes the IPv4 prefix option for a network interface.
 */
export class RequestLaunchTemplateDataNetworkInterfacesIpv4Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv4Prefix?: string;
}

/**
 * Describes the IPv4 prefix option for a network interface.
 */
export class RequestLaunchTemplateDataNetworkInterfacesIpv6Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Prefix?: string;
}

/**
 * The parameters for a network interface.
 */
export class RequestLaunchTemplateDataNetworkInterfaces extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associateCarrierIpAddress?: boolean;

  @SpeakeasyMetadata()
  associatePublicIpAddress?: boolean;

  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  deviceIndex?: number;

  @SpeakeasyMetadata()
  groups?: string[];

  @SpeakeasyMetadata()
  interfaceType?: string;

  @SpeakeasyMetadata()
  ipv4PrefixCount?: number;

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataNetworkInterfacesIpv4Prefixes,
  })
  ipv4Prefixes?: RequestLaunchTemplateDataNetworkInterfacesIpv4Prefixes[];

  @SpeakeasyMetadata()
  ipv6AddressCount?: number;

  @SpeakeasyMetadata({ elemType: InstanceIpv6AddressListRequest })
  ipv6Addresses?: InstanceIpv6AddressListRequest[];

  @SpeakeasyMetadata()
  ipv6PrefixCount?: number;

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataNetworkInterfacesIpv6Prefixes,
  })
  ipv6Prefixes?: RequestLaunchTemplateDataNetworkInterfacesIpv6Prefixes[];

  @SpeakeasyMetadata()
  networkCardIndex?: number;

  @SpeakeasyMetadata()
  networkInterfaceId?: string;

  @SpeakeasyMetadata()
  privateIpAddress?: string;

  @SpeakeasyMetadata({ elemType: PrivateIpAddressSpecificationList })
  privateIpAddresses?: PrivateIpAddressSpecificationList[];

  @SpeakeasyMetadata()
  secondaryPrivateIpAddressCount?: number;

  @SpeakeasyMetadata()
  subnetId?: string;
}

/**
 * Describes a tag.
 */
export class RequestLaunchTemplateDataTagSpecificationsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The tags specification for the resources that are created during instance launch.
 */
export class RequestLaunchTemplateDataTagSpecifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceType?: ResourceTypeEnum;

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataTagSpecificationsTags,
  })
  tags?: RequestLaunchTemplateDataTagSpecificationsTags[];
}

/**
 * <p>The information to include in the launch template.</p> <note> <p>You must specify at least one parameter for the launch template data.</p> </note>
 */
export class RequestLaunchTemplateData extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: RequestLaunchTemplateDataBlockDeviceMappings })
  blockDeviceMappings?: RequestLaunchTemplateDataBlockDeviceMappings[];

  @SpeakeasyMetadata()
  capacityReservationSpecification?: LaunchTemplateCapacityReservationSpecificationRequest;

  @SpeakeasyMetadata()
  cpuOptions?: LaunchTemplateCpuOptionsRequest;

  @SpeakeasyMetadata()
  creditSpecification?: CreditSpecificationRequest;

  @SpeakeasyMetadata()
  disableApiStop?: boolean;

  @SpeakeasyMetadata()
  disableApiTermination?: boolean;

  @SpeakeasyMetadata()
  ebsOptimized?: boolean;

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataElasticGpuSpecifications,
  })
  elasticGpuSpecifications?: RequestLaunchTemplateDataElasticGpuSpecifications[];

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataElasticInferenceAccelerators,
  })
  elasticInferenceAccelerators?: RequestLaunchTemplateDataElasticInferenceAccelerators[];

  @SpeakeasyMetadata()
  enclaveOptions?: LaunchTemplateEnclaveOptionsRequest;

  @SpeakeasyMetadata()
  hibernationOptions?: LaunchTemplateHibernationOptionsRequest;

  @SpeakeasyMetadata()
  iamInstanceProfile?: LaunchTemplateIamInstanceProfileSpecificationRequest;

  @SpeakeasyMetadata()
  imageId?: string;

  @SpeakeasyMetadata()
  instanceInitiatedShutdownBehavior?: ShutdownBehaviorEnum;

  @SpeakeasyMetadata()
  instanceMarketOptions?: LaunchTemplateInstanceMarketOptionsRequest;

  @SpeakeasyMetadata()
  instanceRequirements?: InstanceRequirementsRequest;

  @SpeakeasyMetadata()
  instanceType?: InstanceTypeEnum;

  @SpeakeasyMetadata()
  kernelId?: string;

  @SpeakeasyMetadata()
  keyName?: string;

  @SpeakeasyMetadata({
    elemType: RequestLaunchTemplateDataLicenseSpecifications,
  })
  licenseSpecifications?: RequestLaunchTemplateDataLicenseSpecifications[];

  @SpeakeasyMetadata()
  maintenanceOptions?: LaunchTemplateInstanceMaintenanceOptionsRequest;

  @SpeakeasyMetadata()
  metadataOptions?: LaunchTemplateInstanceMetadataOptionsRequest;

  @SpeakeasyMetadata()
  monitoring?: LaunchTemplatesMonitoringRequest;

  @SpeakeasyMetadata({ elemType: RequestLaunchTemplateDataNetworkInterfaces })
  networkInterfaces?: RequestLaunchTemplateDataNetworkInterfaces[];

  @SpeakeasyMetadata()
  placement?: LaunchTemplatePlacementRequest;

  @SpeakeasyMetadata()
  privateDnsNameOptions?: LaunchTemplatePrivateDnsNameOptionsRequest;

  @SpeakeasyMetadata()
  ramDiskId?: string;

  @SpeakeasyMetadata()
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  securityGroups?: string[];

  @SpeakeasyMetadata({ elemType: RequestLaunchTemplateDataTagSpecifications })
  tagSpecifications?: RequestLaunchTemplateDataTagSpecifications[];

  @SpeakeasyMetadata()
  userData?: string;
}
