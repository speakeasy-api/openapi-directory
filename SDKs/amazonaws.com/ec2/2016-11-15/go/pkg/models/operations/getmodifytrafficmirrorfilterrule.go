// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GETModifyTrafficMirrorFilterRuleActionEnum
type GETModifyTrafficMirrorFilterRuleActionEnum string

const (
	GETModifyTrafficMirrorFilterRuleActionEnumModifyTrafficMirrorFilterRule GETModifyTrafficMirrorFilterRuleActionEnum = "ModifyTrafficMirrorFilterRule"
)

func (e GETModifyTrafficMirrorFilterRuleActionEnum) ToPointer() *GETModifyTrafficMirrorFilterRuleActionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterRuleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ModifyTrafficMirrorFilterRule":
		*e = GETModifyTrafficMirrorFilterRuleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterRuleActionEnum: %v", v)
	}
}

// GETModifyTrafficMirrorFilterRuleDestinationPortRange - Information about the Traffic Mirror filter rule port range.
type GETModifyTrafficMirrorFilterRuleDestinationPortRange struct {
	FromPort *int64 `queryParam:"name=FromPort"`
	ToPort   *int64 `queryParam:"name=ToPort"`
}

// GETModifyTrafficMirrorFilterRuleRuleActionEnum - The action to assign to the rule.
type GETModifyTrafficMirrorFilterRuleRuleActionEnum string

const (
	GETModifyTrafficMirrorFilterRuleRuleActionEnumAccept GETModifyTrafficMirrorFilterRuleRuleActionEnum = "accept"
	GETModifyTrafficMirrorFilterRuleRuleActionEnumReject GETModifyTrafficMirrorFilterRuleRuleActionEnum = "reject"
)

func (e GETModifyTrafficMirrorFilterRuleRuleActionEnum) ToPointer() *GETModifyTrafficMirrorFilterRuleRuleActionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterRuleRuleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "reject":
		*e = GETModifyTrafficMirrorFilterRuleRuleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterRuleRuleActionEnum: %v", v)
	}
}

// GETModifyTrafficMirrorFilterRuleSourcePortRange - Information about the Traffic Mirror filter rule port range.
type GETModifyTrafficMirrorFilterRuleSourcePortRange struct {
	FromPort *int64 `queryParam:"name=FromPort"`
	ToPort   *int64 `queryParam:"name=ToPort"`
}

// GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum - The type of traffic to assign to the rule.
type GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum string

const (
	GETModifyTrafficMirrorFilterRuleTrafficDirectionEnumIngress GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum = "ingress"
	GETModifyTrafficMirrorFilterRuleTrafficDirectionEnumEgress  GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum = "egress"
)

func (e GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum) ToPointer() *GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingress":
		fallthrough
	case "egress":
		*e = GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum: %v", v)
	}
}

// GETModifyTrafficMirrorFilterRuleVersionEnum
type GETModifyTrafficMirrorFilterRuleVersionEnum string

const (
	GETModifyTrafficMirrorFilterRuleVersionEnumTwoThousandAndSixteen1115 GETModifyTrafficMirrorFilterRuleVersionEnum = "2016-11-15"
)

func (e GETModifyTrafficMirrorFilterRuleVersionEnum) ToPointer() *GETModifyTrafficMirrorFilterRuleVersionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterRuleVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETModifyTrafficMirrorFilterRuleVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterRuleVersionEnum: %v", v)
	}
}

type GETModifyTrafficMirrorFilterRuleRequest struct {
	Action GETModifyTrafficMirrorFilterRuleActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The description to assign to the Traffic Mirror rule.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// The destination ports that are associated with the Traffic Mirror rule.
	DestinationPortRange *GETModifyTrafficMirrorFilterRuleDestinationPortRange `queryParam:"style=form,explode=true,name=DestinationPortRange"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The protocol, for example TCP, to assign to the Traffic Mirror rule.
	Protocol *int64 `queryParam:"style=form,explode=true,name=Protocol"`
	// <p>The properties that you want to remove from the Traffic Mirror filter rule.</p> <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>
	RemoveField []shared.TrafficMirrorFilterRuleFieldEnum `queryParam:"style=form,explode=true,name=RemoveField"`
	// The action to assign to the rule.
	RuleAction *GETModifyTrafficMirrorFilterRuleRuleActionEnum `queryParam:"style=form,explode=true,name=RuleAction"`
	// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber *int64 `queryParam:"style=form,explode=true,name=RuleNumber"`
	// The source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock *string `queryParam:"style=form,explode=true,name=SourceCidrBlock"`
	// The port range to assign to the Traffic Mirror rule.
	SourcePortRange *GETModifyTrafficMirrorFilterRuleSourcePortRange `queryParam:"style=form,explode=true,name=SourcePortRange"`
	// The type of traffic to assign to the rule.
	TrafficDirection *GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum `queryParam:"style=form,explode=true,name=TrafficDirection"`
	// The ID of the Traffic Mirror rule.
	TrafficMirrorFilterRuleID string                                      `queryParam:"style=form,explode=true,name=TrafficMirrorFilterRuleId"`
	Version                   GETModifyTrafficMirrorFilterRuleVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm             *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyTrafficMirrorFilterRuleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
