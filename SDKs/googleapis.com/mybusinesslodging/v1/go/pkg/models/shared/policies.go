// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PoliciesAllInclusiveAvailableExceptionEnum - All inclusive available exception.
type PoliciesAllInclusiveAvailableExceptionEnum string

const (
	PoliciesAllInclusiveAvailableExceptionEnumExceptionUnspecified PoliciesAllInclusiveAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesAllInclusiveAvailableExceptionEnumUnderConstruction    PoliciesAllInclusiveAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesAllInclusiveAvailableExceptionEnumDependentOnSeason    PoliciesAllInclusiveAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesAllInclusiveAvailableExceptionEnumDependentOnDayOfWeek PoliciesAllInclusiveAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesAllInclusiveAvailableExceptionEnum) ToPointer() *PoliciesAllInclusiveAvailableExceptionEnum {
	return &e
}

func (e *PoliciesAllInclusiveAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesAllInclusiveAvailableExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesAllInclusiveAvailableExceptionEnum: %v", v)
	}
}

// PoliciesAllInclusiveOnlyExceptionEnum - All inclusive only exception.
type PoliciesAllInclusiveOnlyExceptionEnum string

const (
	PoliciesAllInclusiveOnlyExceptionEnumExceptionUnspecified PoliciesAllInclusiveOnlyExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesAllInclusiveOnlyExceptionEnumUnderConstruction    PoliciesAllInclusiveOnlyExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesAllInclusiveOnlyExceptionEnumDependentOnSeason    PoliciesAllInclusiveOnlyExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesAllInclusiveOnlyExceptionEnumDependentOnDayOfWeek PoliciesAllInclusiveOnlyExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesAllInclusiveOnlyExceptionEnum) ToPointer() *PoliciesAllInclusiveOnlyExceptionEnum {
	return &e
}

func (e *PoliciesAllInclusiveOnlyExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesAllInclusiveOnlyExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesAllInclusiveOnlyExceptionEnum: %v", v)
	}
}

// PoliciesCheckinTimeExceptionEnum - Check-in time exception.
type PoliciesCheckinTimeExceptionEnum string

const (
	PoliciesCheckinTimeExceptionEnumExceptionUnspecified PoliciesCheckinTimeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesCheckinTimeExceptionEnumUnderConstruction    PoliciesCheckinTimeExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesCheckinTimeExceptionEnumDependentOnSeason    PoliciesCheckinTimeExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesCheckinTimeExceptionEnumDependentOnDayOfWeek PoliciesCheckinTimeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesCheckinTimeExceptionEnum) ToPointer() *PoliciesCheckinTimeExceptionEnum {
	return &e
}

func (e *PoliciesCheckinTimeExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesCheckinTimeExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesCheckinTimeExceptionEnum: %v", v)
	}
}

// PoliciesCheckoutTimeExceptionEnum - Check-out time exception.
type PoliciesCheckoutTimeExceptionEnum string

const (
	PoliciesCheckoutTimeExceptionEnumExceptionUnspecified PoliciesCheckoutTimeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesCheckoutTimeExceptionEnumUnderConstruction    PoliciesCheckoutTimeExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesCheckoutTimeExceptionEnumDependentOnSeason    PoliciesCheckoutTimeExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesCheckoutTimeExceptionEnumDependentOnDayOfWeek PoliciesCheckoutTimeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesCheckoutTimeExceptionEnum) ToPointer() *PoliciesCheckoutTimeExceptionEnum {
	return &e
}

func (e *PoliciesCheckoutTimeExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesCheckoutTimeExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesCheckoutTimeExceptionEnum: %v", v)
	}
}

// PoliciesKidsStayFreeExceptionEnum - Kids stay free exception.
type PoliciesKidsStayFreeExceptionEnum string

const (
	PoliciesKidsStayFreeExceptionEnumExceptionUnspecified PoliciesKidsStayFreeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesKidsStayFreeExceptionEnumUnderConstruction    PoliciesKidsStayFreeExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesKidsStayFreeExceptionEnumDependentOnSeason    PoliciesKidsStayFreeExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesKidsStayFreeExceptionEnumDependentOnDayOfWeek PoliciesKidsStayFreeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesKidsStayFreeExceptionEnum) ToPointer() *PoliciesKidsStayFreeExceptionEnum {
	return &e
}

func (e *PoliciesKidsStayFreeExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesKidsStayFreeExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesKidsStayFreeExceptionEnum: %v", v)
	}
}

// PoliciesMaxChildAgeExceptionEnum - Max child age exception.
type PoliciesMaxChildAgeExceptionEnum string

const (
	PoliciesMaxChildAgeExceptionEnumExceptionUnspecified PoliciesMaxChildAgeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesMaxChildAgeExceptionEnumUnderConstruction    PoliciesMaxChildAgeExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesMaxChildAgeExceptionEnumDependentOnSeason    PoliciesMaxChildAgeExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesMaxChildAgeExceptionEnumDependentOnDayOfWeek PoliciesMaxChildAgeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesMaxChildAgeExceptionEnum) ToPointer() *PoliciesMaxChildAgeExceptionEnum {
	return &e
}

func (e *PoliciesMaxChildAgeExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesMaxChildAgeExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesMaxChildAgeExceptionEnum: %v", v)
	}
}

// PoliciesMaxKidsStayFreeCountExceptionEnum - Max kids stay free count exception.
type PoliciesMaxKidsStayFreeCountExceptionEnum string

const (
	PoliciesMaxKidsStayFreeCountExceptionEnumExceptionUnspecified PoliciesMaxKidsStayFreeCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesMaxKidsStayFreeCountExceptionEnumUnderConstruction    PoliciesMaxKidsStayFreeCountExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesMaxKidsStayFreeCountExceptionEnumDependentOnSeason    PoliciesMaxKidsStayFreeCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesMaxKidsStayFreeCountExceptionEnumDependentOnDayOfWeek PoliciesMaxKidsStayFreeCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesMaxKidsStayFreeCountExceptionEnum) ToPointer() *PoliciesMaxKidsStayFreeCountExceptionEnum {
	return &e
}

func (e *PoliciesMaxKidsStayFreeCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesMaxKidsStayFreeCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesMaxKidsStayFreeCountExceptionEnum: %v", v)
	}
}

// PoliciesSmokeFreePropertyExceptionEnum - Smoke free property exception.
type PoliciesSmokeFreePropertyExceptionEnum string

const (
	PoliciesSmokeFreePropertyExceptionEnumExceptionUnspecified PoliciesSmokeFreePropertyExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoliciesSmokeFreePropertyExceptionEnumUnderConstruction    PoliciesSmokeFreePropertyExceptionEnum = "UNDER_CONSTRUCTION"
	PoliciesSmokeFreePropertyExceptionEnumDependentOnSeason    PoliciesSmokeFreePropertyExceptionEnum = "DEPENDENT_ON_SEASON"
	PoliciesSmokeFreePropertyExceptionEnumDependentOnDayOfWeek PoliciesSmokeFreePropertyExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoliciesSmokeFreePropertyExceptionEnum) ToPointer() *PoliciesSmokeFreePropertyExceptionEnum {
	return &e
}

func (e *PoliciesSmokeFreePropertyExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoliciesSmokeFreePropertyExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoliciesSmokeFreePropertyExceptionEnum: %v", v)
	}
}

// Policies - Property rules that impact guests.
type Policies struct {
	// All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
	AllInclusiveAvailable *bool `json:"allInclusiveAvailable,omitempty"`
	// All inclusive available exception.
	AllInclusiveAvailableException *PoliciesAllInclusiveAvailableExceptionEnum `json:"allInclusiveAvailableException,omitempty"`
	// All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
	AllInclusiveOnly *bool `json:"allInclusiveOnly,omitempty"`
	// All inclusive only exception.
	AllInclusiveOnlyException *PoliciesAllInclusiveOnlyExceptionEnum `json:"allInclusiveOnlyException,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	CheckinTime *TimeOfDay `json:"checkinTime,omitempty"`
	// Check-in time exception.
	CheckinTimeException *PoliciesCheckinTimeExceptionEnum `json:"checkinTimeException,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	CheckoutTime *TimeOfDay `json:"checkoutTime,omitempty"`
	// Check-out time exception.
	CheckoutTimeException *PoliciesCheckoutTimeExceptionEnum `json:"checkoutTimeException,omitempty"`
	// Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.
	KidsStayFree *bool `json:"kidsStayFree,omitempty"`
	// Kids stay free exception.
	KidsStayFreeException *PoliciesKidsStayFreeExceptionEnum `json:"kidsStayFreeException,omitempty"`
	// Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
	MaxChildAge *int `json:"maxChildAge,omitempty"`
	// Max child age exception.
	MaxChildAgeException *PoliciesMaxChildAgeExceptionEnum `json:"maxChildAgeException,omitempty"`
	// Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
	MaxKidsStayFreeCount *int `json:"maxKidsStayFreeCount,omitempty"`
	// Max kids stay free count exception.
	MaxKidsStayFreeCountException *PoliciesMaxKidsStayFreeCountExceptionEnum `json:"maxKidsStayFreeCountException,omitempty"`
	// Forms of payment accepted at the property.
	PaymentOptions *PaymentOptions `json:"paymentOptions,omitempty"`
	// Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
	SmokeFreeProperty *bool `json:"smokeFreeProperty,omitempty"`
	// Smoke free property exception.
	SmokeFreePropertyException *PoliciesSmokeFreePropertyExceptionEnum `json:"smokeFreePropertyException,omitempty"`
}
