// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TargetChangeTargetChangeTypeEnum - The type of change that occurred.
type TargetChangeTargetChangeTypeEnum string

const (
	TargetChangeTargetChangeTypeEnumNoChange TargetChangeTargetChangeTypeEnum = "NO_CHANGE"
	TargetChangeTargetChangeTypeEnumAdd      TargetChangeTargetChangeTypeEnum = "ADD"
	TargetChangeTargetChangeTypeEnumRemove   TargetChangeTargetChangeTypeEnum = "REMOVE"
	TargetChangeTargetChangeTypeEnumCurrent  TargetChangeTargetChangeTypeEnum = "CURRENT"
	TargetChangeTargetChangeTypeEnumReset    TargetChangeTargetChangeTypeEnum = "RESET"
)

func (e *TargetChangeTargetChangeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_CHANGE":
		fallthrough
	case "ADD":
		fallthrough
	case "REMOVE":
		fallthrough
	case "CURRENT":
		fallthrough
	case "RESET":
		*e = TargetChangeTargetChangeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetChangeTargetChangeTypeEnum: %s", s)
	}
}

// TargetChange - Targets being watched have changed.
type TargetChange struct {
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Cause *Status `json:"cause,omitempty"`
	// The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.
	ReadTime *string `json:"readTime,omitempty"`
	// A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.
	ResumeToken *string `json:"resumeToken,omitempty"`
	// The type of change that occurred.
	TargetChangeType *TargetChangeTargetChangeTypeEnum `json:"targetChangeType,omitempty"`
	// The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.
	TargetIds []int `json:"targetIds,omitempty"`
}
