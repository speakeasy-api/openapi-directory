"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NetworkAddressAssignmentEnum(str, Enum):
    r"""Whether DHCP is used to assign addresses."""
    ADDRESS_ASSIGNMENT_UNSPECIFIED = 'ADDRESS_ASSIGNMENT_UNSPECIFIED'
    ADDRESS_ASSIGNMENT_STATIC = 'ADDRESS_ASSIGNMENT_STATIC'
    ADDRESS_ASSIGNMENT_DHCP = 'ADDRESS_ASSIGNMENT_DHCP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkAddress:
    r"""Details of network address."""
    
    assignment: Optional[NetworkAddressAssignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignment'), 'exclude': lambda f: f is None }})
    r"""Whether DHCP is used to assign addresses."""  
    bcast: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bcast'), 'exclude': lambda f: f is None }})
    r"""Broadcast address."""  
    fqdn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fqdn'), 'exclude': lambda f: f is None }})
    r"""Fully qualified domain name."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddress'), 'exclude': lambda f: f is None }})
    r"""Assigned or configured IP Address."""  
    subnet_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetMask'), 'exclude': lambda f: f is None }})
    r"""Subnet mask."""  
    