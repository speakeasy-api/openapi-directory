// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PersonAddress struct {
	City       *string `json:"City,omitempty"`
	Complement *string `json:"Complement,omitempty"`
	Country    *string `json:"Country,omitempty"`
	Street     *string `json:"Street,omitempty"`
	ZipCode    *string `json:"ZipCode,omitempty"`
}

type PersonBirth struct {
	Date  *int64  `json:"Date,omitempty"`
	Place *string `json:"Place,omitempty"`
}

type PersonSexEnum string

const (
	PersonSexEnumMale   PersonSexEnum = "male"
	PersonSexEnumFemale PersonSexEnum = "female"
)

func (e *PersonSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = PersonSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonSexEnum: %s", s)
	}
}

type PersonValidatedEnum string

const (
	PersonValidatedEnumTrue  PersonValidatedEnum = "true"
	PersonValidatedEnumFalse PersonValidatedEnum = "false"
)

func (e *PersonValidatedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = PersonValidatedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonValidatedEnum: %s", s)
	}
}

type Person struct {
	Address          *PersonAddress       `json:"Address,omitempty"`
	ArchivalDate     *string              `json:"ArchivalDate,omitempty"`
	Birth            *PersonBirth         `json:"Birth,omitempty"`
	Comment          *string              `json:"Comment,omitempty"`
	Email            *string              `json:"Email,omitempty"`
	FirstName        *string              `json:"FirstName,omitempty"`
	Function         []string             `json:"Function,omitempty"`
	ID               *string              `json:"Id,omitempty"`
	MemberID         *string              `json:"MemberId,omitempty"`
	Mobile           *string              `json:"Mobile,omitempty"`
	ModificationDate *string              `json:"ModificationDate,omitempty"`
	Name             *string              `json:"Name,omitempty"`
	Sex              *PersonSexEnum       `json:"Sex,omitempty"`
	Validated        *PersonValidatedEnum `json:"Validated,omitempty"`
}
