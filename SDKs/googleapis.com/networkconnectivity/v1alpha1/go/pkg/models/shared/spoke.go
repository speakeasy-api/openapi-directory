// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SpokeInput - A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
type SpokeInput struct {
	// The time when the Spoke was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Short description of the spoke resource
	Description *string `json:"description,omitempty"`
	// The resource URL of the hub resource that the spoke is attached to
	Hub *string `json:"hub,omitempty"`
	// User-defined labels.
	Labels map[string]string `json:"labels,omitempty"`
	// The URIs of linked interconnect attachment resources
	LinkedInterconnectAttachments []string `json:"linkedInterconnectAttachments,omitempty"`
	// The URIs of linked Router appliance resources
	LinkedRouterApplianceInstances []RouterApplianceInstance `json:"linkedRouterApplianceInstances,omitempty"`
	// The URIs of linked VPN tunnel resources
	LinkedVpnTunnels []string `json:"linkedVpnTunnels,omitempty"`
	// Immutable. The name of a Spoke resource.
	Name *string `json:"name,omitempty"`
	// The time when the Spoke was updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// SpokeStateEnum - Output only. The current lifecycle state of this Hub.
type SpokeStateEnum string

const (
	SpokeStateEnumStateUnspecified SpokeStateEnum = "STATE_UNSPECIFIED"
	SpokeStateEnumCreating         SpokeStateEnum = "CREATING"
	SpokeStateEnumActive           SpokeStateEnum = "ACTIVE"
	SpokeStateEnumDeleting         SpokeStateEnum = "DELETING"
	SpokeStateEnumUpdating         SpokeStateEnum = "UPDATING"
)

func (e SpokeStateEnum) ToPointer() *SpokeStateEnum {
	return &e
}

func (e *SpokeStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPDATING":
		*e = SpokeStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SpokeStateEnum: %v", v)
	}
}

// Spoke - A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
type Spoke struct {
	// The time when the Spoke was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Short description of the spoke resource
	Description *string `json:"description,omitempty"`
	// The resource URL of the hub resource that the spoke is attached to
	Hub *string `json:"hub,omitempty"`
	// User-defined labels.
	Labels map[string]string `json:"labels,omitempty"`
	// The URIs of linked interconnect attachment resources
	LinkedInterconnectAttachments []string `json:"linkedInterconnectAttachments,omitempty"`
	// The URIs of linked Router appliance resources
	LinkedRouterApplianceInstances []RouterApplianceInstance `json:"linkedRouterApplianceInstances,omitempty"`
	// The URIs of linked VPN tunnel resources
	LinkedVpnTunnels []string `json:"linkedVpnTunnels,omitempty"`
	// Immutable. The name of a Spoke resource.
	Name *string `json:"name,omitempty"`
	// Output only. The current lifecycle state of this Hub.
	State *SpokeStateEnum `json:"state,omitempty"`
	// Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.
	UniqueID *string `json:"uniqueId,omitempty"`
	// The time when the Spoke was updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}
