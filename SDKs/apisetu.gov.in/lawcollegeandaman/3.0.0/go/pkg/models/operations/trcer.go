// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TrcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type TrcerRequestBodyCertificateParameters struct {
	// Admn No.
	AdmnNo string `json:"ADMN_NO"`
	// Full name
	FullName string `json:"FullName"`
}

// TrcerRequestBodyFormatEnum - The format of the certificate in response.
type TrcerRequestBodyFormatEnum string

const (
	TrcerRequestBodyFormatEnumPdf TrcerRequestBodyFormatEnum = "pdf"
)

func (e *TrcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TrcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrcerRequestBodyFormatEnum: %s", s)
	}
}

// TrcerRequestBody - Request format
type TrcerRequestBody struct {
	CertificateParameters *TrcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TrcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Trcer504ApplicationJSONErrorEnum string

const (
	Trcer504ApplicationJSONErrorEnumGatewayTimeout Trcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Trcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Trcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer504ApplicationJSONErrorDescriptionEnum string

const (
	Trcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Trcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Trcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Trcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer504ApplicationJSON - Gateway timeout
type Trcer504ApplicationJSON struct {
	Error            *Trcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer503ApplicationJSONErrorEnum string

const (
	Trcer503ApplicationJSONErrorEnumServiceUnavailable Trcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Trcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Trcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer503ApplicationJSONErrorDescriptionEnum string

const (
	Trcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Trcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Trcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Trcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer503ApplicationJSON - Service unavailable
type Trcer503ApplicationJSON struct {
	Error            *Trcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer502ApplicationJSONErrorEnum string

const (
	Trcer502ApplicationJSONErrorEnumBadGatewy Trcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Trcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Trcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer502ApplicationJSONErrorDescriptionEnum string

const (
	Trcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Trcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Trcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Trcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer502ApplicationJSON - Bad gateway
type Trcer502ApplicationJSON struct {
	Error            *Trcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer500ApplicationJSONErrorEnum string

const (
	Trcer500ApplicationJSONErrorEnumInternalServerError Trcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Trcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Trcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer500ApplicationJSONErrorDescriptionEnum string

const (
	Trcer500ApplicationJSONErrorDescriptionEnumInternalServerError Trcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Trcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Trcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer500ApplicationJSON - Internal server error
type Trcer500ApplicationJSON struct {
	Error            *Trcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer404ApplicationJSONErrorEnum string

const (
	Trcer404ApplicationJSONErrorEnumRecordNotFound Trcer404ApplicationJSONErrorEnum = "record_not_found"
	Trcer404ApplicationJSONErrorEnumURLNotFound    Trcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Trcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Trcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer404ApplicationJSONErrorDescriptionEnum string

const (
	Trcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Trcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Trcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Trcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Trcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Trcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer404ApplicationJSON - No record found
type Trcer404ApplicationJSON struct {
	Error            *Trcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer401ApplicationJSONErrorEnum string

const (
	Trcer401ApplicationJSONErrorEnumInvalidAuthentication Trcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Trcer401ApplicationJSONErrorEnumInvalidAuthorization  Trcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Trcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Trcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer401ApplicationJSONErrorDescriptionEnum string

const (
	Trcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Trcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Trcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Trcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Trcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Trcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer401ApplicationJSON - Unauthorized access
type Trcer401ApplicationJSON struct {
	Error            *Trcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Trcer400ApplicationJSONErrorEnum string

const (
	Trcer400ApplicationJSONErrorEnumMissingParameter Trcer400ApplicationJSONErrorEnum = "missing_parameter"
	Trcer400ApplicationJSONErrorEnumInvalidParameter Trcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Trcer400ApplicationJSONErrorEnumInvalidFormat    Trcer400ApplicationJSONErrorEnum = "invalid_format"
	Trcer400ApplicationJSONErrorEnumInvalidTxnid     Trcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Trcer400ApplicationJSONErrorEnumInvalidConsentid Trcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Trcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Trcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Trcer400ApplicationJSONErrorDescriptionEnum string

const (
	Trcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Trcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Trcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Trcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Trcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Trcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Trcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Trcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Trcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Trcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Trcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Trcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Trcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Trcer400ApplicationJSON - Bad request
type Trcer400ApplicationJSON struct {
	Error            *Trcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Trcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TrcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Trcer400ApplicationJSONObject *Trcer400ApplicationJSON
	// Unauthorized access
	Trcer401ApplicationJSONObject *Trcer401ApplicationJSON
	// No record found
	Trcer404ApplicationJSONObject *Trcer404ApplicationJSON
	// Internal server error
	Trcer500ApplicationJSONObject *Trcer500ApplicationJSON
	// Bad gateway
	Trcer502ApplicationJSONObject *Trcer502ApplicationJSON
	// Service unavailable
	Trcer503ApplicationJSONObject *Trcer503ApplicationJSON
	// Gateway timeout
	Trcer504ApplicationJSONObject *Trcer504ApplicationJSON
}
