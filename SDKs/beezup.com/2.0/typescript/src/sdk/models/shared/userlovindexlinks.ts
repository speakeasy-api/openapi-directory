/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LinksGetUserListOfValuesLink } from "./linksgetuserlistofvalueslink";
import { LinksGetUserLovIndexLink } from "./linksgetuserlovindexlink";
import { Expose, Transform, Type } from "class-transformer";

export class UserLovIndexLinks extends SpeakeasyBase {
  /**
   * List of lov link. The key is the list name.
   */
  @SpeakeasyMetadata({ elemType: LinksGetUserListOfValuesLink })
  @Expose({ name: "lists" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LinksGetUserListOfValuesLink> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LinksGetUserListOfValuesLink);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  lists?: Record<string, LinksGetUserListOfValuesLink>;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => LinksGetUserLovIndexLink)
  self?: LinksGetUserLovIndexLink;
}
