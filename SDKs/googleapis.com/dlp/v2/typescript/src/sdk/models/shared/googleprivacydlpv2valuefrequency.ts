/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GooglePrivacyDlpV2Value } from "./googleprivacydlpv2value";
import { Expose, Type } from "class-transformer";

/**
 * A value of a field, including its frequency.
 */
export class GooglePrivacyDlpV2ValueFrequency extends SpeakeasyBase {
  /**
   * How many times the value is contained in the field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: string;

  /**
   * Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(() => GooglePrivacyDlpV2Value)
  value?: GooglePrivacyDlpV2Value;
}
