// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// QueueInformation200ApplicationJSONActionEnum - The id of the action
type QueueInformation200ApplicationJSONActionEnum string

const (
	QueueInformation200ApplicationJSONActionEnumQueueInformation QueueInformation200ApplicationJSONActionEnum = "queueInformation"
)

func (e *QueueInformation200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queueInformation":
		*e = QueueInformation200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QueueInformation200ApplicationJSONActionEnum: %s", s)
	}
}

// QueueInformation200ApplicationJSONData - Information about the service
type QueueInformation200ApplicationJSONData struct {
	QueueMaxSize int64 `json:"queueMaxSize"`
	// Is the inventory queue full
	QueueSaturated bool `json:"queueSaturated"`
}

// QueueInformation200ApplicationJSONResultEnum - Result of the request
type QueueInformation200ApplicationJSONResultEnum string

const (
	QueueInformation200ApplicationJSONResultEnumSuccess QueueInformation200ApplicationJSONResultEnum = "success"
	QueueInformation200ApplicationJSONResultEnumError   QueueInformation200ApplicationJSONResultEnum = "error"
)

func (e *QueueInformation200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = QueueInformation200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QueueInformation200ApplicationJSONResultEnum: %s", s)
	}
}

// QueueInformation200ApplicationJSON - Inventories information
type QueueInformation200ApplicationJSON struct {
	// The id of the action
	Action QueueInformation200ApplicationJSONActionEnum `json:"action"`
	// Information about the service
	Data QueueInformation200ApplicationJSONData `json:"data"`
	// Result of the request
	Result QueueInformation200ApplicationJSONResultEnum `json:"result"`
}

type QueueInformationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Inventories information
	QueueInformation200ApplicationJSONObject *QueueInformation200ApplicationJSON
}
