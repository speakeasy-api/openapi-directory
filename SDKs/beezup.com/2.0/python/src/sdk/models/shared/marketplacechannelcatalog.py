"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_apisettingsstatus_enum as shared_beezup_common_apisettingsstatus_enum
from ..shared import marketplacechannelcataloglinks as shared_marketplacechannelcataloglinks
from ..shared import marketplacechannelcataloglovlinks as shared_marketplacechannelcataloglovlinks
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarketplaceChannelCatalog:
    r"""This object indicates you the association between a channel catalog and a marketplace. The account identifier will be automatically defined based on your marketplace merchant identfier."""
    
    api_settings_status: shared_beezup_common_apisettingsstatus_enum.BeezUPCommonAPISettingsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiSettingsStatus') }})  
    beez_up_channel_catalog_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPChannelCatalogId') }})
    r"""The channel catalog identifier"""  
    beez_up_channel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPChannelId') }})
    r"""The channel identifier"""  
    beez_up_marketplace_name: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPMarketplaceName') }})
    r"""The marketplace name"""  
    beez_up_store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPStoreId') }})
    r"""The store identifier"""  
    beez_up_store_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPStoreName') }})
    r"""The store name"""  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""The enabled status of the Channel Catalog"""  
    links: shared_marketplacechannelcataloglinks.MarketplaceChannelCatalogLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history."""  
    lov_links: shared_marketplacechannelcataloglovlinks.MarketplaceChannelCatalogLovLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovLinks') }})
    r"""Indicates the List Of Values related to the marketplace"""  
    marketplace_business_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceBusinessCode') }})
    r"""In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code."""  
    marketplace_iso_country_code_alpha2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceIsoCountryCodeAlpha2') }})
    r"""The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)"""  
    marketplace_market_place_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceMarketPlaceId') }})
    r"""The marketplace identifier in the marketplace"""  
    marketplace_technical_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceTechnicalCode') }})
    r"""The technical code of the marketplace."""  
    marketplace_account_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceAccountId'), 'exclude': lambda f: f is None }})
    r"""The marketplace account identifier in BeezUP. This account identifier is based on your api settings."""  
    marketplace_merchant_identifiers: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceMerchantIdentifiers'), 'exclude': lambda f: f is None }})
    r"""The marketplace merchant identifier list"""  
    