"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://api.nytimes.com/svc/news/v3",
    "https://api.nytimes.com/svc/news/v3",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
    http://developer.nytimes.com/
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def get_content_json(self, request: operations.GetContentJSONRequest) -> operations.GetContentJSONResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/content.json'
        
        query_params = utils.get_query_params(operations.GetContentJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContentJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetContentJSON200ApplicationJSON])
                res.get_content_json_200_application_json_object = out

        return res

    def get_content_source_section_json(self, request: operations.GetContentSourceSectionJSONRequest) -> operations.GetContentSourceSectionJSONResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContentSourceSectionJSONRequest, base_url, '/content/{source}/{section}.json', request)
        
        query_params = utils.get_query_params(operations.GetContentSourceSectionJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContentSourceSectionJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetContentSourceSectionJSON200ApplicationJSON])
                res.get_content_source_section_json_200_application_json_object = out

        return res

    def get_content_source_section_time_period_json(self, request: operations.GetContentSourceSectionTimePeriodJSONRequest) -> operations.GetContentSourceSectionTimePeriodJSONResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContentSourceSectionTimePeriodJSONRequest, base_url, '/content/{source}/{section}/{time-period}.json', request)
        
        query_params = utils.get_query_params(operations.GetContentSourceSectionTimePeriodJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContentSourceSectionTimePeriodJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetContentSourceSectionTimePeriodJSON200ApplicationJSON])
                res.get_content_source_section_time_period_json_200_application_json_object = out

        return res

    