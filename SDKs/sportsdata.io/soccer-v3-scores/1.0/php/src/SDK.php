<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/soccer/scores',
		'https://azure-api.sportsdata.io/v3/soccer/scores',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Areas (Countries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AreasCountriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AreasCountriesResponse
     */
	public function areasCountries(
        \OpenAPI\OpenAPI\Models\Operations\AreasCountriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AreasCountriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Areas', \OpenAPI\OpenAPI\Models\Operations\AreasCountriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreasCountriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areas = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Area>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Canceled Memberships
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsResponse
     */
	public function canceledMemberships(
        \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CanceledMemberships', \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CanceledMembershipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->canceledMembership = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CanceledMembership', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Competition Fixtures (League Details)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsResponse
     */
	public function competitionFixturesLeagueDetails(
        \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CompetitionDetails/{competition}', \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompetitionFixturesLeagueDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->competitionDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompetitionDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Competition Hierarchy (League Hierarchy)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyResponse
     */
	public function competitionHierarchyLeagueHierarchy(
        \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CompetitionHierarchy', \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompetitionHierarchyLeagueHierarchyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areas = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Area>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Competitions (Leagues)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesResponse
     */
	public function competitionsLeagues(
        \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Competitions', \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompetitionsLeaguesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->competitions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Competition>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Games by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
     */
	public function gamesByDate(
        \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GamesByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships (Active)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveResponse
     */
	public function membershipsActive(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ActiveMemberships', \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships by Competition (Active)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveResponse
     */
	public function membershipsByCompetitionActive(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/MembershipsByCompetition/{competition}', \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships by Competition (Historical)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalResponse
     */
	public function membershipsByCompetitionHistorical(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/HistoricalMembershipsByCompetition/{competition}', \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsByCompetitionHistoricalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships by Team (Active)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveResponse
     */
	public function membershipsByTeamActive(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/MembershipsByTeam/{teamid}', \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships by Team (Historical)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalResponse
     */
	public function membershipsByTeamHistorical(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/HistoricalMembershipsByTeam/{teamid}', \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsByTeamHistoricalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships (Historical)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalResponse
     */
	public function membershipsHistorical(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/HistoricalMemberships', \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsHistoricalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Memberships (Recently Changed)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedResponse
     */
	public function membershipsRecentlyChanged(
        \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/RecentlyChangedMemberships/{days}', \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MembershipsRecentlyChangedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Membership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerResponse
     */
	public function player(
        \OpenAPI\OpenAPI\Models\Operations\PlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->player = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Player', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Players
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayersResponse
     */
	public function players(
        \OpenAPI\OpenAPI\Models\Operations\PlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Players by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamResponse
     */
	public function playersByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayersByTeam/{teamid}', \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
     */
	public function schedule(
        \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Schedule/{roundid}', \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Teams
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsResponse
     */
	public function seasonTeams(
        \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SeasonTeams/{seasonid}', \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonTeams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SeasonTeam>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Standings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
     */
	public function standings(
        \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Standings/{roundid}', \OpenAPI\OpenAPI\Models\Operations\StandingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StandingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->standings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Standing>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Stats by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse
     */
	public function teamGameStatsByDate(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
     */
	public function teamSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSeasonStats/{roundid}', \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
     */
	public function teams(
        \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams', \OpenAPI\OpenAPI\Models\Operations\TeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upcoming Schedule By Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerResponse
     */
	public function upcomingScheduleByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingScheduleByPlayer/{playerid}', \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpcomingScheduleByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Venues
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VenuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VenuesResponse
     */
	public function venues(
        \OpenAPI\OpenAPI\Models\Operations\VenuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VenuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Venues', \OpenAPI\OpenAPI\Models\Operations\VenuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VenuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->venues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Venue>', 'json');
            }
        }

        return $response;
    }
}