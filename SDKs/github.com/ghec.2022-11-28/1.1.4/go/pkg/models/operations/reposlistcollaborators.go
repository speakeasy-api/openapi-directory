// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposListCollaboratorsPathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReposListCollaboratorsAffiliationEnum - Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
type ReposListCollaboratorsAffiliationEnum string

const (
	ReposListCollaboratorsAffiliationEnumOutside ReposListCollaboratorsAffiliationEnum = "outside"
	ReposListCollaboratorsAffiliationEnumDirect  ReposListCollaboratorsAffiliationEnum = "direct"
	ReposListCollaboratorsAffiliationEnumAll     ReposListCollaboratorsAffiliationEnum = "all"
)

func (e *ReposListCollaboratorsAffiliationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "outside":
		fallthrough
	case "direct":
		fallthrough
	case "all":
		*e = ReposListCollaboratorsAffiliationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListCollaboratorsAffiliationEnum: %s", s)
	}
}

// ReposListCollaboratorsPermissionEnum - Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
type ReposListCollaboratorsPermissionEnum string

const (
	ReposListCollaboratorsPermissionEnumPull     ReposListCollaboratorsPermissionEnum = "pull"
	ReposListCollaboratorsPermissionEnumTriage   ReposListCollaboratorsPermissionEnum = "triage"
	ReposListCollaboratorsPermissionEnumPush     ReposListCollaboratorsPermissionEnum = "push"
	ReposListCollaboratorsPermissionEnumMaintain ReposListCollaboratorsPermissionEnum = "maintain"
	ReposListCollaboratorsPermissionEnumAdmin    ReposListCollaboratorsPermissionEnum = "admin"
)

func (e *ReposListCollaboratorsPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pull":
		fallthrough
	case "triage":
		fallthrough
	case "push":
		fallthrough
	case "maintain":
		fallthrough
	case "admin":
		*e = ReposListCollaboratorsPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListCollaboratorsPermissionEnum: %s", s)
	}
}

type ReposListCollaboratorsQueryParams struct {
	// Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
	Affiliation *ReposListCollaboratorsAffiliationEnum `queryParam:"style=form,explode=true,name=affiliation"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
	Permission *ReposListCollaboratorsPermissionEnum `queryParam:"style=form,explode=true,name=permission"`
}

type ReposListCollaboratorsRequest struct {
	PathParams  ReposListCollaboratorsPathParams
	QueryParams ReposListCollaboratorsQueryParams
}

type ReposListCollaboratorsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Collaborators []shared.Collaborator
}
