// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UncommittedFileChangeStateEnum - Indicates the status of the file.
type UncommittedFileChangeStateEnum string

const (
	UncommittedFileChangeStateEnumStateUnspecified UncommittedFileChangeStateEnum = "STATE_UNSPECIFIED"
	UncommittedFileChangeStateEnumAdded            UncommittedFileChangeStateEnum = "ADDED"
	UncommittedFileChangeStateEnumDeleted          UncommittedFileChangeStateEnum = "DELETED"
	UncommittedFileChangeStateEnumModified         UncommittedFileChangeStateEnum = "MODIFIED"
	UncommittedFileChangeStateEnumHasConflicts     UncommittedFileChangeStateEnum = "HAS_CONFLICTS"
)

func (e UncommittedFileChangeStateEnum) ToPointer() *UncommittedFileChangeStateEnum {
	return &e
}

func (e *UncommittedFileChangeStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ADDED":
		fallthrough
	case "DELETED":
		fallthrough
	case "MODIFIED":
		fallthrough
	case "HAS_CONFLICTS":
		*e = UncommittedFileChangeStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UncommittedFileChangeStateEnum: %v", v)
	}
}

// UncommittedFileChange - Represents the Git state of a file with uncommitted changes.
type UncommittedFileChange struct {
	// The file's full path including filename, relative to the workspace root.
	Path *string `json:"path,omitempty"`
	// Indicates the status of the file.
	State *UncommittedFileChangeStateEnum `json:"state,omitempty"`
}
