/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Agents {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create new Agent Contact
   *
   * @remarks
   * Creates a new agent contact for an agent
   */
  createAgentContact(
    req: operations.CreateAgentContactRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAgentContactResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAgentContactRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/contacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentContactCreateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAgentContactResponse =
        new operations.CreateAgentContactResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentContactResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentContactResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create new Agent Location
   *
   * @remarks
   * Creates a new agent location for an agent
   */
  createAgentLocation(
    req: operations.CreateAgentLocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAgentLocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAgentLocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/locations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentLocationCreateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAgentLocationResponse =
        new operations.CreateAgentLocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentLocationResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentLocationResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create new Agent
   *
   * @remarks
   * Create a new agent for a group application
   */
  createApplicationAgent(
    req: operations.CreateApplicationAgentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateApplicationAgentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateApplicationAgentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/applications/{application_id}/agents",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentCreateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateApplicationAgentResponse =
        new operations.CreateApplicationAgentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an Agent
   *
   * @remarks
   * Edit an agent based on the ID provided. The version parameter must match the latest agent version.
   */
  editAgent(
    req: operations.EditAgentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EditAgentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditAgentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/{version}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentEditRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditAgentResponse =
        new operations.EditAgentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an Agent Contact
   *
   * @remarks
   * Edit an agent contact based on the ID provided. The version parameter must match the latest agent contact version.
   */
  editAgentContact(
    req: operations.EditAgentContactRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EditAgentContactResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditAgentContactRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/contacts/{contact_id}/{version}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentContactEditRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditAgentContactResponse =
        new operations.EditAgentContactResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentContactResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentContactResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an Agent Location
   *
   * @remarks
   * Edit an agent location based on the ID provided. The version parameter must match the latest agent location version.
   */
  editAgentLocation(
    req: operations.EditAgentLocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EditAgentLocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditAgentLocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/locations/{location_id}/{version}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentLocationEditRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditAgentLocationResponse =
        new operations.EditAgentLocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentLocationResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentLocationResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Agent
   *
   * @remarks
   * Returns the latest version of a single agent based on the ID provided
   */
  getAgent(
    req: operations.GetAgentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAgentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgentResponse = new operations.GetAgentResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Agent
   *
   * @remarks
   * Returns the latest version of a single agent based on the ID provided
   */
  getAgentContact(
    req: operations.GetAgentContactRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentContactResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAgentContactRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/contacts/{contact_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgentContactResponse =
        new operations.GetAgentContactResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentContactResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentContactResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Agent Contacts
   *
   * @remarks
   * Returns a list of all contacts for the given agent
   */
  getAgentContacts(
    req: operations.GetAgentContactsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentContactsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAgentContactsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/contacts",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgentContactsResponse =
        new operations.GetAgentContactsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedAgentContactResults = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedAgentContactResults
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Agent
   *
   * @remarks
   * Returns the latest version of a single agent based on the ID provided
   */
  getAgentLocation(
    req: operations.GetAgentLocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentLocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAgentLocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/locations/{location_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgentLocationResponse =
        new operations.GetAgentLocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agentLocationResult = utils.objectToClass(
              httpRes?.data,
              shared.AgentLocationResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Agent Locations
   *
   * @remarks
   * Returns a list of all locations for the given agent
   */
  getAgentLocations(
    req: operations.GetAgentLocationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentLocationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAgentLocationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/agents/{agent_id}/locations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAgentLocationsResponse =
        new operations.GetAgentLocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedAgentLocationResult = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedAgentLocationResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Application Agents
   *
   * @remarks
   * Returns a list of all agents for the given application
   */
  getApplicationAgents(
    req: operations.GetApplicationAgentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApplicationAgentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApplicationAgentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/applications/{application_id}/agents",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApplicationAgentsResponse =
        new operations.GetApplicationAgentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedAgentResult = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedAgentResult
            );
          }
          break;
      }

      return res;
    });
  }
}
