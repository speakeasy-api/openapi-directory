<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * GetPostAndRelatedData200ApplicationJSON - The post and related data.
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class GetPostAndRelatedData200ApplicationJSON
{
	#[\JMS\Serializer\Annotation\SerializedName('author')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\User')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\OpenAPI\OpenAPI\Models\Shared\User $author = null;
    
    /**
     * Count of offer posts made by the post author in the last 90 days.
     * 
     * @var ?int $authorOfferCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('author_offer_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $authorOfferCount = null;
    
    /**
     * Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
     * 
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Post> $authorPosts
     */
	#[\JMS\Serializer\Annotation\SerializedName('author_posts')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Post>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $authorPosts = null;
    
    /**
     * Count of wanted posts made by the post author in the last 90 days.
     * 
     * @var ?int $authorWantedCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('author_wanted_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $authorWantedCount = null;
    
    /**
     * Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
     * 
     * @var ?bool $bookmarked
     */
	#[\JMS\Serializer\Annotation\SerializedName('bookmarked')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $bookmarked = null;
    
    /**
     * Feedback the current user has left on the post author.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Feedback> $feedback
     */
	#[\JMS\Serializer\Annotation\SerializedName('feedback')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Feedback>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $feedback = null;
    
    /**
     * The groups the post is published on.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Group> $groups
     */
	#[\JMS\Serializer\Annotation\SerializedName('groups')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Group>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $groups = null;
    
    /**
     * An offer, wanted, admin, taken or received post.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Post $post
     */
	#[\JMS\Serializer\Annotation\SerializedName('post')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Post')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\OpenAPI\OpenAPI\Models\Shared\Post $post = null;
    
    /**
     * Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
     * 
     * @var ?bool $replied
     */
	#[\JMS\Serializer\Annotation\SerializedName('replied')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $replied = null;
    
    /**
     * Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
     * 
     * 
     * 
     * @var ?bool $userCanReply
     */
	#[\JMS\Serializer\Annotation\SerializedName('user_can_reply')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $userCanReply = null;
    
    /**
     * Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
     * 
     * @var ?bool $viewed
     */
	#[\JMS\Serializer\Annotation\SerializedName('viewed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $viewed = null;
    
	public function __construct()
	{
		$this->author = null;
		$this->authorOfferCount = null;
		$this->authorPosts = null;
		$this->authorWantedCount = null;
		$this->bookmarked = null;
		$this->feedback = null;
		$this->groups = null;
		$this->post = null;
		$this->replied = null;
		$this->userCanReply = null;
		$this->viewed = null;
	}
}
