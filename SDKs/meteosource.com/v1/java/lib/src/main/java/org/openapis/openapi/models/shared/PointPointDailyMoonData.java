/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class PointPointDailyMoonData {
    /**
     * True if the moon never rises on given day, false otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("always_down")
    public Boolean alwaysDown;

    public PointPointDailyMoonData withAlwaysDown(Boolean alwaysDown) {
        this.alwaysDown = alwaysDown;
        return this;
    }
    
    /**
     * True if the moon never sets on given day, false otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("always_up")
    public Boolean alwaysUp;

    public PointPointDailyMoonData withAlwaysUp(Boolean alwaysUp) {
        this.alwaysUp = alwaysUp;
        return this;
    }
    
    /**
     * Name of the moon phase, one of 'new_moon', 'first_quarter', 'full_moon', 'last_quarter'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phase")
    public byte[] phase;

    public PointPointDailyMoonData withPhase(byte[] phase) {
        this.phase = phase;
        return this;
    }
    
    /**
     * Datetime of the moonrise or null if the moon does not rise on given day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rise")
    public OffsetDateTime rise;

    public PointPointDailyMoonData withRise(OffsetDateTime rise) {
        this.rise = rise;
        return this;
    }
    
    /**
     * Datetime of the moonset or null if the moon does not set on given day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("set")
    public OffsetDateTime set;

    public PointPointDailyMoonData withSet(OffsetDateTime set) {
        this.set = set;
        return this;
    }
    
    public PointPointDailyMoonData(){}
}
