/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RevenueItems {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List revenue items by revenue event number
   *
   * @remarks
   * This REST API reference describes how to get the details of each revenue item in a revenue event by specifying the revenue event number. Request and response field descriptions and sample code are provided.
   *
   */
  getRevenueItemsByChargeRevenueEventNumber(
    req: operations.GETRevenueItemsByChargeRevenueEventNumberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRevenueItemsByChargeRevenueEventNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRevenueItemsByChargeRevenueEventNumberRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/revenue-items/revenue-events/{event-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRevenueItemsByChargeRevenueEventNumberResponse =
        new operations.GETRevenueItemsByChargeRevenueEventNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRevenueItemsType = utils.objectToClass(
              httpRes?.data,
              shared.GETRevenueItemsType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List revenue items by charge revenue summary number
   *
   * @remarks
   * This REST API reference describes how to get the details for each revenue item in a charge revenue summary by specifying the charge revenue summary number. Request and response field descriptions and sample code are provided.
   *
   */
  getRevenueItemsByChargeRevenueSummaryNumber(
    req: operations.GETRevenueItemsByChargeRevenueSummaryNumberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRevenueItemsByChargeRevenueSummaryNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRevenueItemsByChargeRevenueSummaryNumberRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/revenue-items/charge-revenue-summaries/{crs-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRevenueItemsByChargeRevenueSummaryNumberResponse =
        new operations.GETRevenueItemsByChargeRevenueSummaryNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRevenueItemsType = utils.objectToClass(
              httpRes?.data,
              shared.GETRevenueItemsType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all revenue items of a revenue schedule
   *
   * @remarks
   * This REST API reference describes how to get the details for each revenue items in a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.
   *
   */
  getRevenueItemsByRevenueSchedule(
    req: operations.GETRevenueItemsByRevenueScheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRevenueItemsByRevenueScheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRevenueItemsByRevenueScheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/revenue-items/revenue-schedules/{rs-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRevenueItemsByRevenueScheduleResponse =
        new operations.GETRevenueItemsByRevenueScheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRsRevenueItemsType = utils.objectToClass(
              httpRes?.data,
              shared.GETRsRevenueItemsType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update custom fields on revenue items by revenue event number
   *
   * @remarks
   * This REST API reference describes how to update custom fields on revenue items by specifying the revenue event number. Request and response field descriptions and sample code are provided.
   *
   */
  putCustomFieldsonRevenueItemsByRevenueEvent(
    req: operations.PUTCustomFieldsonRevenueItemsByRevenueEventRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTCustomFieldsonRevenueItemsByRevenueEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTCustomFieldsonRevenueItemsByRevenueEventRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/revenue-items/revenue-events/{event-number}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putEventRIDetailType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTCustomFieldsonRevenueItemsByRevenueEventResponse =
        new operations.PUTCustomFieldsonRevenueItemsByRevenueEventResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update custom fields on revenue items by revenue schedule number
   *
   * @remarks
   * This REST API reference describes how to update custom fields on revenue Items by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.
   *
   */
  putCustomFieldsonRevenueItemsByRevenueSchedule(
    req: operations.PUTCustomFieldsonRevenueItemsByRevenueScheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTCustomFieldsonRevenueItemsByRevenueScheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PUTCustomFieldsonRevenueItemsByRevenueScheduleRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/revenue-items/revenue-schedules/{rs-number}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putScheduleRIDetailType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTCustomFieldsonRevenueItemsByRevenueScheduleResponse =
        new operations.PUTCustomFieldsonRevenueItemsByRevenueScheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }
}
