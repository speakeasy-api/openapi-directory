/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations to manage event subscriptions.
 */
export class Subscriptions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(
    req: operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveRequest,
    security: operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions/{subscriptionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse =
        new operations.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(
    req: operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdRequest,
    security: operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions/{subscriptionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse =
        new operations.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subscriptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubscriptionResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  getWebhooksV3AppIdSubscriptionsGetAll(
    req: operations.GetWebhooksV3AppIdSubscriptionsGetAllRequest,
    security: operations.GetWebhooksV3AppIdSubscriptionsGetAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhooksV3AppIdSubscriptionsGetAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWebhooksV3AppIdSubscriptionsGetAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWebhooksV3AppIdSubscriptionsGetAllSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhooksV3AppIdSubscriptionsGetAllResponse =
        new operations.GetWebhooksV3AppIdSubscriptionsGetAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subscriptionListResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubscriptionListResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(
    req: operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateRequest,
    security: operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions/{subscriptionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "subscriptionPatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse =
        new operations.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subscriptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubscriptionResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(
    req: operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchRequest,
    security: operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions/batch/update",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchInputSubscriptionBatchUpdateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse =
        new operations.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchResponseSubscriptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchResponseSubscriptionResponse
            );
          }
          break;
        case httpRes?.status == 207:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchResponseSubscriptionResponseWithErrors =
              utils.objectToClass(
                httpRes?.data,
                shared.BatchResponseSubscriptionResponseWithErrors
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  postWebhooksV3AppIdSubscriptionsCreate(
    req: operations.PostWebhooksV3AppIdSubscriptionsCreateRequest,
    security: operations.PostWebhooksV3AppIdSubscriptionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWebhooksV3AppIdSubscriptionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWebhooksV3AppIdSubscriptionsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/v3/{appId}/subscriptions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "subscriptionCreateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostWebhooksV3AppIdSubscriptionsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWebhooksV3AppIdSubscriptionsCreateResponse =
        new operations.PostWebhooksV3AppIdSubscriptionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subscriptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubscriptionResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
