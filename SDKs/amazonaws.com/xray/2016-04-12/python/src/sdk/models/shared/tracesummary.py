"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import availabilityzonedetail as shared_availabilityzonedetail
from ..shared import errorrootcause as shared_errorrootcause
from ..shared import faultrootcause as shared_faultrootcause
from ..shared import http as shared_http
from ..shared import instanceiddetail as shared_instanceiddetail
from ..shared import resourcearndetail as shared_resourcearndetail
from ..shared import responsetimerootcause as shared_responsetimerootcause
from ..shared import serviceid as shared_serviceid
from ..shared import traceuser as shared_traceuser
from ..shared import valuewithserviceids as shared_valuewithserviceids
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TraceSummary:
    r"""Metadata generated from the segment documents in a trace."""
    
    annotations: Optional[dict[str, list[shared_valuewithserviceids.ValueWithServiceIds]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Annotations'), 'exclude': lambda f: f is None }})  
    availability_zones: Optional[list[shared_availabilityzonedetail.AvailabilityZoneDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZones'), 'exclude': lambda f: f is None }})  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Duration'), 'exclude': lambda f: f is None }})  
    entry_point: Optional[shared_serviceid.ServiceID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntryPoint'), 'exclude': lambda f: f is None }})  
    error_root_causes: Optional[list[shared_errorrootcause.ErrorRootCause]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorRootCauses'), 'exclude': lambda f: f is None }})  
    fault_root_causes: Optional[list[shared_faultrootcause.FaultRootCause]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FaultRootCauses'), 'exclude': lambda f: f is None }})  
    has_error: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasError'), 'exclude': lambda f: f is None }})  
    has_fault: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasFault'), 'exclude': lambda f: f is None }})  
    has_throttle: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasThrottle'), 'exclude': lambda f: f is None }})  
    http: Optional[shared_http.HTTP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Http'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    instance_ids: Optional[list[shared_instanceiddetail.InstanceIDDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceIds'), 'exclude': lambda f: f is None }})  
    is_partial: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsPartial'), 'exclude': lambda f: f is None }})  
    matched_event_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MatchedEventTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    resource_ar_ns: Optional[list[shared_resourcearndetail.ResourceARNDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARNs'), 'exclude': lambda f: f is None }})  
    response_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResponseTime'), 'exclude': lambda f: f is None }})  
    response_time_root_causes: Optional[list[shared_responsetimerootcause.ResponseTimeRootCause]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResponseTimeRootCauses'), 'exclude': lambda f: f is None }})  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})  
    service_ids: Optional[list[shared_serviceid.ServiceID]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceIds'), 'exclude': lambda f: f is None }})  
    users: Optional[list[shared_traceuser.TraceUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Users'), 'exclude': lambda f: f is None }})  
    