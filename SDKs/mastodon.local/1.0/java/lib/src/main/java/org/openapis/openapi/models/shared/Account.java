/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Account - Represents a user of Mastodon and their associated profile.
 * https://docs.joinmastodon.org/entities/account/
 */
public class Account {
    /**
     * The Webfinger account URI. Equal to `username` for local users, or `username@domain` for
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acct")
    public String acct;

    public Account withAcct(String acct) {
        this.acct = acct;
        return this;
    }
    
    /**
     * An image icon that is shown next to statuses and in the profile. The format is URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    public String avatar;

    public Account withAvatar(String avatar) {
        this.avatar = avatar;
        return this;
    }
    
    /**
     * A static version of the avatar. Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF. The format is URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_static")
    public String avatarStatic;

    public Account withAvatarStatic(String avatarStatic) {
        this.avatarStatic = avatarStatic;
        return this;
    }
    
    /**
     * A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bot")
    public Boolean bot;

    public Account withBot(Boolean bot) {
        this.bot = bot;
        return this;
    }
    
    /**
     * When the account was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Account withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Whether the account has opted into discovery features such as the profile directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discoverable")
    public Boolean discoverable;

    public Account withDiscoverable(Boolean discoverable) {
        this.discoverable = discoverable;
        return this;
    }
    
    /**
     * The profile's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    public String displayName;

    public Account withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emojis")
    public Emoji[] emojis;

    public Account withEmojis(Emoji[] emojis) {
        this.emojis = emojis;
        return this;
    }
    
    /**
     * Additional metadata attached to a profile as name-value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public Field[] fields;

    public Account withFields(Field[] fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * The reported followers of this profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers_count")
    public Long followersCount;

    public Account withFollowersCount(Long followersCount) {
        this.followersCount = followersCount;
        return this;
    }
    
    /**
     * The reported follows of this profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("following_count")
    public Long followingCount;

    public Account withFollowingCount(Long followingCount) {
        this.followingCount = followingCount;
        return this;
    }
    
    /**
     * An image banner that is shown above the profile and in profile cards. The format is URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    public String header;

    public Account withHeader(String header) {
        this.header = header;
        return this;
    }
    
    /**
     * A static version of the header. Equal to `header` if its value is a static image; different if `header` is an animated GIF. The format is URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header_static")
    public String headerStatic;

    public Account withHeaderStatic(String headerStatic) {
        this.headerStatic = headerStatic;
        return this;
    }
    
    /**
     * The account id `header`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Account withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * When the most recent status was posted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_status_at")
    public OffsetDateTime lastStatusAt;

    public Account withLastStatusAt(OffsetDateTime lastStatusAt) {
        this.lastStatusAt = lastStatusAt;
        return this;
    }
    
    /**
     * Whether the account manually approves follow requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    public Boolean locked;

    public Account withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * Represents a user of Mastodon and their associated profile.
     * https://docs.joinmastodon.org/entities/account/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moved")
    public Account moved;

    public Account withMoved(Account moved) {
        this.moved = moved;
        return this;
    }
    
    /**
     * When a timed mute will expire, if applicable. ISO 8601 Datetime.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("mute_expires_at")
    public OffsetDateTime muteExpiresAt;

    public Account withMuteExpiresAt(OffsetDateTime muteExpiresAt) {
        this.muteExpiresAt = muteExpiresAt;
        return this;
    }
    
    /**
     * The profile's bio / description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public Account withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Represents display or publishing preferences of user's own account. Returned as an additional entity when verifying and updated credentials, as an attribute of Account.
     * https://docs.joinmastodon.org/entities/source/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public Source source;

    public Account withSource(Source source) {
        this.source = source;
        return this;
    }
    
    /**
     * How many statuses are attached to this account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statuses_count")
    public Long statusesCount;

    public Account withStatusesCount(Long statusesCount) {
        this.statusesCount = statusesCount;
        return this;
    }
    
    /**
     * An extra entity returned when an account is suspended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    public Boolean suspended;

    public Account withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }
    
    /**
     * The location of the user's profile page. (HTTPS URL)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Account withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The username of the account, not including domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public Account withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public Account(){}
}
