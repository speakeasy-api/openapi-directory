"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PredictedSpecs:
    r"""Specs of predicted vehicle"""
    
    base_exterior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_exterior_color'), 'exclude': lambda f: f is None }})
    r"""Base exterior color of vehicle"""  
    base_interior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_interior_color'), 'exclude': lambda f: f is None }})
    r"""base interior color of vehicle"""  
    carfax_1_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_1_owner'), 'exclude': lambda f: f is None }})
    r"""Indicates whether car has had only one owner or not"""  
    carfax_clean_title: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_clean_title'), 'exclude': lambda f: f is None }})
    r"""Indicates whether car has clean ownership records"""  
    city_mpg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_mpg'), 'exclude': lambda f: f is None }})
    r"""City mileage"""  
    cylinders: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cylinders'), 'exclude': lambda f: f is None }})
    r"""Number of cylinders"""  
    doors: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doors'), 'exclude': lambda f: f is None }})
    r"""Number of doors"""  
    drivetrain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivetrain'), 'exclude': lambda f: f is None }})
    r"""Drivetrain of the vehicle"""  
    engine_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_block'), 'exclude': lambda f: f is None }})
    r"""Engine block of the vehicle"""  
    engine_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_size'), 'exclude': lambda f: f is None }})
    r"""Engine size"""  
    highway_mpg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highway_mpg'), 'exclude': lambda f: f is None }})
    r"""Highway mileage"""  
    is_certified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_certified'), 'exclude': lambda f: f is None }})
    r"""Certified vehicle"""  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})
    r"""Latutide for the vehicle location"""  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})
    r"""Longitude for the vehicle location"""  
    make: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('make'), 'exclude': lambda f: f is None }})
    r"""make"""  
    miles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miles'), 'exclude': lambda f: f is None }})
    r"""Miles"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""model"""  
    transmission: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmission'), 'exclude': lambda f: f is None }})
    r"""transmission"""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trim'), 'exclude': lambda f: f is None }})
    r"""trim"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""year"""  
    