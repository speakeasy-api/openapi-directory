"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RegisterRealtimeAPIDataRegistrationTypeEnum(str, Enum):
    r"""The Type of this registration (per meter, per user, ...)"""
    DISABLED = 'Disabled'
    SINGLE_METER_REGISTRATION = 'SingleMeterRegistration'
    USER_REGISTRATION = 'UserRegistration'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterRealtimeAPIData:
    r"""Container class for the register realtime API API"""
    
    api_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiUrl'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ApiUrl' }})
    r"""The URL of your endpoint. To this endpoint all the values are send to."""  
    basic_auth_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BasicAuthPassword'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'BasicAuthPassword' }})
    r"""The Password (basic auth) of your endpoint. Leave empty of none."""  
    basic_auth_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BasicAuthUsername'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'BasicAuthUsername' }})
    r"""The Username (basic auth) of your endpoint. Leave empty of none."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Id' }})
    r"""The ID of the registration"""  
    meter_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeterId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'MeterId' }})
    r"""The ID of the Meter. Just used if the RegistrationType is \\"SingleMeterRegistration\\"."""  
    registration_type: Optional[RegisterRealtimeAPIDataRegistrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistrationType'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'RegistrationType' }})
    r"""The Type of this registration (per meter, per user, ...)"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerialNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'SerialNumber' }})
    r"""The serial number of the Meter. Just used if the RegistrationType is \\"SingleMeterRegistration\\" and the MeterId is null.
                Example: 1 SME 01 63000000 or 6300000
    """  
    