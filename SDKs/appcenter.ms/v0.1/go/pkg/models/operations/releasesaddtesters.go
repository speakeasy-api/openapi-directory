// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesAddTestersSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ReleasesAddTestersRequestBody - The release information.
type ReleasesAddTestersRequestBody struct {
	// Tester's email address
	Email string `json:"email"`
	// Flag to mark the release for the provided destinations as mandatory
	MandatoryUpdate *bool `json:"mandatory_update,omitempty"`
	// Flag to enable or disable notifications to testers
	NotifyTesters *bool `json:"notify_testers,omitempty"`
}

type ReleasesAddTestersRequest struct {
	// The release information.
	RequestBody ReleasesAddTestersRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

type ReleasesAddTesters404ApplicationJSONCodeEnum string

const (
	ReleasesAddTesters404ApplicationJSONCodeEnumBadRequest          ReleasesAddTesters404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddTesters404ApplicationJSONCodeEnumConflict            ReleasesAddTesters404ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddTesters404ApplicationJSONCodeEnumNotAcceptable       ReleasesAddTesters404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddTesters404ApplicationJSONCodeEnumNotFound            ReleasesAddTesters404ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddTesters404ApplicationJSONCodeEnumInternalServerError ReleasesAddTesters404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddTesters404ApplicationJSONCodeEnumUnauthorized        ReleasesAddTesters404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddTesters404ApplicationJSONCodeEnumTooManyRequests     ReleasesAddTesters404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesAddTesters404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddTesters404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddTesters404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesAddTesters404ApplicationJSON - Release not found
type ReleasesAddTesters404ApplicationJSON struct {
	Code    ReleasesAddTesters404ApplicationJSONCodeEnum `json:"code"`
	Message string                                       `json:"message"`
}

type ReleasesAddTesters400ApplicationJSONCodeEnum string

const (
	ReleasesAddTesters400ApplicationJSONCodeEnumBadRequest          ReleasesAddTesters400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesAddTesters400ApplicationJSONCodeEnumConflict            ReleasesAddTesters400ApplicationJSONCodeEnum = "Conflict"
	ReleasesAddTesters400ApplicationJSONCodeEnumNotAcceptable       ReleasesAddTesters400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesAddTesters400ApplicationJSONCodeEnumNotFound            ReleasesAddTesters400ApplicationJSONCodeEnum = "NotFound"
	ReleasesAddTesters400ApplicationJSONCodeEnumInternalServerError ReleasesAddTesters400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesAddTesters400ApplicationJSONCodeEnumUnauthorized        ReleasesAddTesters400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesAddTesters400ApplicationJSONCodeEnumTooManyRequests     ReleasesAddTesters400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesAddTesters400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesAddTesters400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAddTesters400ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesAddTesters400ApplicationJSON - Failure
type ReleasesAddTesters400ApplicationJSON struct {
	Code    ReleasesAddTesters400ApplicationJSONCodeEnum `json:"code"`
	Message string                                       `json:"message"`
}

// ReleasesAddTesters201ApplicationJSON - Created
type ReleasesAddTesters201ApplicationJSON struct {
	// Unique id for the release destination
	ID string `json:"id"`
	// Flag to mark the release for the provided destinations as mandatory
	MandatoryUpdate bool `json:"mandatory_update"`
	// The url to check provisioning status.
	ProvisioningStatusURL *string `json:"provisioning_status_url,omitempty"`
}

type ReleasesAddTestersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	ReleasesAddTesters201ApplicationJSONObject *ReleasesAddTesters201ApplicationJSON
	// Failure
	ReleasesAddTesters400ApplicationJSONObject *ReleasesAddTesters400ApplicationJSON
	// Release not found
	ReleasesAddTesters404ApplicationJSONObject *ReleasesAddTesters404ApplicationJSON
}
