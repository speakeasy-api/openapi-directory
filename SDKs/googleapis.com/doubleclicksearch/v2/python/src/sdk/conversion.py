"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conversion:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def doubleclicksearch_conversion_get(self, request: operations.DoubleclicksearchConversionGetRequest, security: operations.DoubleclicksearchConversionGetSecurity) -> operations.DoubleclicksearchConversionGetResponse:
        r"""Retrieves a list of conversions from a DoubleClick Search engine account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclicksearchConversionGetRequest, base_url, '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion', request)
        
        query_params = utils.get_query_params(operations.DoubleclicksearchConversionGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclicksearchConversionGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionList])
                res.conversion_list = out

        return res

    def doubleclicksearch_conversion_get_by_customer_id(self, request: operations.DoubleclicksearchConversionGetByCustomerIDRequest, security: operations.DoubleclicksearchConversionGetByCustomerIDSecurity) -> operations.DoubleclicksearchConversionGetByCustomerIDResponse:
        r"""Retrieves a list of conversions from a DoubleClick Search engine account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclicksearchConversionGetByCustomerIDRequest, base_url, '/doubleclicksearch/v2/customer/{customerId}/conversion', request)
        
        query_params = utils.get_query_params(operations.DoubleclicksearchConversionGetByCustomerIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclicksearchConversionGetByCustomerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionList])
                res.conversion_list = out

        return res

    def doubleclicksearch_conversion_insert(self, request: operations.DoubleclicksearchConversionInsertRequest, security: operations.DoubleclicksearchConversionInsertSecurity) -> operations.DoubleclicksearchConversionInsertResponse:
        r"""Inserts a batch of new conversions into DoubleClick Search."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/doubleclicksearch/v2/conversion'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversion_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DoubleclicksearchConversionInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclicksearchConversionInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionList])
                res.conversion_list = out

        return res

    def doubleclicksearch_conversion_update(self, request: operations.DoubleclicksearchConversionUpdateRequest, security: operations.DoubleclicksearchConversionUpdateSecurity) -> operations.DoubleclicksearchConversionUpdateResponse:
        r"""Updates a batch of conversions in DoubleClick Search."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/doubleclicksearch/v2/conversion'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversion_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DoubleclicksearchConversionUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclicksearchConversionUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionList])
                res.conversion_list = out

        return res

    def doubleclicksearch_conversion_update_availability(self, request: operations.DoubleclicksearchConversionUpdateAvailabilityRequest, security: operations.DoubleclicksearchConversionUpdateAvailabilitySecurity) -> operations.DoubleclicksearchConversionUpdateAvailabilityResponse:
        r"""Updates the availabilities of a batch of floodlight activities in DoubleClick Search."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/doubleclicksearch/v2/conversion/updateAvailability'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_availability_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DoubleclicksearchConversionUpdateAvailabilityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclicksearchConversionUpdateAvailabilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateAvailabilityResponse])
                res.update_availability_response = out

        return res

    