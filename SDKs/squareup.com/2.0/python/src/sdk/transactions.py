"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transactions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def capture_transaction(self, request: operations.CaptureTransactionRequest, security: operations.CaptureTransactionSecurity) -> operations.CaptureTransactionResponse:
        r"""CaptureTransaction
        Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
        endpoint with a `delay_capture` value of `true`.
        
        
        See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
        for more information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CaptureTransactionRequest, base_url, '/v2/locations/{location_id}/transactions/{transaction_id}/capture', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CaptureTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CaptureTransactionResponse])
                res.capture_transaction_response = out

        return res

    def charge(self, request: operations.ChargeRequest, security: operations.ChargeSecurity) -> operations.ChargeResponse:
        r"""Charge
        Charges a card represented by a card nonce or a customer's card on file.
        
        Your request to this endpoint must include _either_:
        
        - A value for the `card_nonce` parameter (to charge a card payment token generated
        with the Web Payments SDK)
        - Values for the `customer_card_id` and `customer_id` parameters (to charge
        a customer's card on file)
        
        In order for an eCommerce payment to potentially qualify for
        [Square chargeback protection](https://squareup.com/help/article/5394), you
        _must_ provide values for the following parameters in your request:
        
        - `buyer_email_address`
        - At least one of `billing_address` or `shipping_address`
        
        When this response is returned, the amount of Square's processing fee might not yet be
        calculated. To obtain the processing fee, wait about ten seconds and call
        [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money`
        field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChargeRequest, base_url, '/v2/locations/{location_id}/transactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "charge_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChargeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChargeResponse])
                res.charge_response = out

        return res

    def list_transactions(self, request: operations.ListTransactionsRequest, security: operations.ListTransactionsSecurity) -> operations.ListTransactionsResponse:
        r"""ListTransactions
        Lists transactions for a particular location.
        
        Transactions include payment information from sales and exchanges and refund
        information from returns and exchanges.
        
        Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListTransactionsRequest, base_url, '/v2/locations/{location_id}/transactions', request)
        
        query_params = utils.get_query_params(operations.ListTransactionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTransactionsResponse])
                res.list_transactions_response = out

        return res

    def retrieve_transaction(self, request: operations.RetrieveTransactionRequest, security: operations.RetrieveTransactionSecurity) -> operations.RetrieveTransactionResponse:
        r"""RetrieveTransaction
        Retrieves details for a single transaction.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveTransactionRequest, base_url, '/v2/locations/{location_id}/transactions/{transaction_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveTransactionResponse])
                res.retrieve_transaction_response = out

        return res

    def void_transaction(self, request: operations.VoidTransactionRequest, security: operations.VoidTransactionSecurity) -> operations.VoidTransactionResponse:
        r"""VoidTransaction
        Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
        endpoint with a `delay_capture` value of `true`.
        
        
        See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
        for more information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VoidTransactionRequest, base_url, '/v2/locations/{location_id}/transactions/{transaction_id}/void', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VoidTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VoidTransactionResponse])
                res.void_transaction_response = out

        return res

    def get_v2_locations_location_id_refunds(self, request: operations.GetV2LocationsLocationIDRefundsRequest, security: operations.GetV2LocationsLocationIDRefundsSecurity) -> operations.GetV2LocationsLocationIDRefundsResponse:
        r"""ListRefunds
        Lists refunds for one of a business's locations.
        
        In addition to full or partial tender refunds processed through Square APIs,
        refunds may result from itemized returns or exchanges through Square's
        Point of Sale applications.
        
        Refunds with a `status` of `PENDING` are not currently included in this
        endpoint's response.
        
        Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2LocationsLocationIDRefundsRequest, base_url, '/v2/locations/{location_id}/refunds', request)
        
        query_params = utils.get_query_params(operations.GetV2LocationsLocationIDRefundsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2LocationsLocationIDRefundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRefundsResponse])
                res.list_refunds_response = out

        return res

    def post_v2_locations_location_id_transactions_transaction_id_refund(self, request: operations.PostV2LocationsLocationIDTransactionsTransactionIDRefundRequest, security: operations.PostV2LocationsLocationIDTransactionsTransactionIDRefundSecurity) -> operations.PostV2LocationsLocationIDTransactionsTransactionIDRefundResponse:
        r"""CreateRefund
        Initiates a refund for a previously charged tender.
        
        You must issue a refund within 120 days of the associated payment. See
        [this article](https://squareup.com/help/us/en/article/5060) for more information
        on refund behavior.
        
        NOTE: Card-present transactions with Interac credit cards **cannot be
        refunded using the Connect API**. Interac transactions must refunded
        in-person (e.g., dipping the card using POS app).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostV2LocationsLocationIDTransactionsTransactionIDRefundRequest, base_url, '/v2/locations/{location_id}/transactions/{transaction_id}/refund', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_refund_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2LocationsLocationIDTransactionsTransactionIDRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateRefundResponse])
                res.create_refund_response = out

        return res

    