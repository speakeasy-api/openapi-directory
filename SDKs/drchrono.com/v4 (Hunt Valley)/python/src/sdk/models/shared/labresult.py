"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LabResultAbnormalStatusEnum(str, Enum):
    r"""Value | Notes
    ----- | -----
    `'L'` | `'low'`
    `'LL'` | `'alert low'`
    `'H'` | `'high'`
    `'HH'` | `'alert high'`
    `'<'` | `'panic low'`
    `'>'` | `'panic high'`
    `'A'` | `'abnormal'`
    `'AA'` | `'very abnormal'`
    `'S'` | `'susceptible'`
    `'R'` | `'resistant'`
    `'I'` | `'intermediate'`
    `'NEG'` | `'negative'`
    `'POS'` | `'positive'`
    `'N'` | `'normal'`
    `''` | `'no comment'`
    """
    L = 'L'
    LL = 'LL'
    H = 'H'
    HH = 'HH'
    LESS_THAN_ = '<'
    GREATER_THAN_ = '>'
    A = 'A'
    AA = 'AA'
    S = 'S'
    R = 'R'
    I = 'I'
    NEG = 'NEG'
    POS = 'POS'
    N = 'N'
    UNKNOWN = ''

class LabResultStatusEnum(str, Enum):
    r"""Value | Notes
    ----- | -----
    `'P'` | `'preliminary'`
    `'I'` | `'pending'`
    `'C'` | `'correction'`
    `'F'` | `'final'`
    `'X'` | `'canceled'`
    """
    P = 'P'
    I = 'I'
    C = 'C'
    F = 'F'
    X = 'X'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabResult:
    r"""Created"""
    
    document: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document') }})
    r"""ID of `/lab_documents` object for the result"""  
    lab_test: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_test') }})
    r"""ID of `/lab_tests` object for the result"""  
    status: LabResultStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Value | Notes
    ----- | -----
    `'P'` | `'preliminary'`
    `'I'` | `'pending'`
    `'C'` | `'correction'`
    `'F'` | `'final'`
    `'X'` | `'canceled'`
    """  
    test_performed: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_performed') }})  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    abnormal_status: Optional[LabResultAbnormalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abnormal_status'), 'exclude': lambda f: f is None }})
    r"""Value | Notes
    ----- | -----
    `'L'` | `'low'`
    `'LL'` | `'alert low'`
    `'H'` | `'high'`
    `'HH'` | `'alert high'`
    `'<'` | `'panic low'`
    `'>'` | `'panic high'`
    `'A'` | `'abnormal'`
    `'AA'` | `'very abnormal'`
    `'S'` | `'susceptible'`
    `'R'` | `'resistant'`
    `'I'` | `'intermediate'`
    `'NEG'` | `'negative'`
    `'POS'` | `'positive'`
    `'N'` | `'normal'`
    `''` | `'no comment'`
    """  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    group_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_code'), 'exclude': lambda f: f is None }})
    r"""This is the code used for grouping result data."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    is_abnormal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_abnormal'), 'exclude': lambda f: f is None }})
    r"""If true, the result will be flagged for the doctor's attention"""  
    lab_order: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_order'), 'exclude': lambda f: f is None }})
    r"""ID of `/lab_orders` object the result belongs to"""  
    normal_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normal_range'), 'exclude': lambda f: f is None }})
    r"""When ``value_is_numeric`` is True, this parameter must be a string of the form ``\\"<lower> <upper>\\", where both lower and upper are numerical``"""  
    observation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observation_code'), 'exclude': lambda f: f is None }})  
    observation_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observation_description'), 'exclude': lambda f: f is None }})
    r"""For example, ``\\"Blood Urea Nitrogen (BUN)\\"``"""  
    specimen_received: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specimen_received'), 'exclude': lambda f: f is None }})  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Unit used for the value"""  
    value_is_numeric: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value_is_numeric'), 'exclude': lambda f: f is None }})
    r"""Default to `False`"""  
    