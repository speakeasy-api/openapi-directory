/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * JobExecutionInformation - Contains information about the execution of a job in the Azure Batch service.
 */
public class JobExecutionInformation {
    /**
     * The completion time of the job. This property is set only if the job is in the completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;
    public JobExecutionInformation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The id of the pool to which this job is assigned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolId")
    public String poolId;
    public JobExecutionInformation withPoolId(String poolId) {
        this.poolId = poolId;
        return this;
    }
    
    /**
     * An error encountered by the Batch service when scheduling a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingError")
    public JobSchedulingError schedulingError;
    public JobExecutionInformation withSchedulingError(JobSchedulingError schedulingError) {
        this.schedulingError = schedulingError;
        return this;
    }
    
    /**
     * The start time of the job.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public JobExecutionInformation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * A string describing the reason the job ended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminateReason")
    public String terminateReason;
    public JobExecutionInformation withTerminateReason(String terminateReason) {
        this.terminateReason = terminateReason;
        return this;
    }
    
}
