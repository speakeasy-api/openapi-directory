"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tagmanager_accounts_containers_combine(self, request: operations.TagmanagerAccountsContainersCombineRequest, security: operations.TagmanagerAccountsContainersCombineSecurity) -> operations.TagmanagerAccountsContainersCombineResponse:
        r"""Combines Containers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersCombineRequest, base_url, '/tagmanager/v2/{path}:combine', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersCombineRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersCombineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Container])
                res.container = out

        return res

    def tagmanager_accounts_containers_create(self, request: operations.TagmanagerAccountsContainersCreateRequest, security: operations.TagmanagerAccountsContainersCreateSecurity) -> operations.TagmanagerAccountsContainersCreateResponse:
        r"""Creates a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersCreateRequest, base_url, '/tagmanager/v2/{parent}/containers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "container", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Container])
                res.container = out

        return res

    def tagmanager_accounts_containers_destinations_link(self, request: operations.TagmanagerAccountsContainersDestinationsLinkRequest, security: operations.TagmanagerAccountsContainersDestinationsLinkSecurity) -> operations.TagmanagerAccountsContainersDestinationsLinkResponse:
        r"""Adds a Destination to this Container and removes it from the Container to which it is currently linked."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersDestinationsLinkRequest, base_url, '/tagmanager/v2/{parent}/destinations:link', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersDestinationsLinkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersDestinationsLinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Destination])
                res.destination = out

        return res

    def tagmanager_accounts_containers_destinations_list(self, request: operations.TagmanagerAccountsContainersDestinationsListRequest, security: operations.TagmanagerAccountsContainersDestinationsListSecurity) -> operations.TagmanagerAccountsContainersDestinationsListResponse:
        r"""Lists all Destinations linked to a GTM Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersDestinationsListRequest, base_url, '/tagmanager/v2/{parent}/destinations', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersDestinationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersDestinationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDestinationsResponse])
                res.list_destinations_response = out

        return res

    def tagmanager_accounts_containers_environments_create(self, request: operations.TagmanagerAccountsContainersEnvironmentsCreateRequest, security: operations.TagmanagerAccountsContainersEnvironmentsCreateSecurity) -> operations.TagmanagerAccountsContainersEnvironmentsCreateResponse:
        r"""Creates a GTM Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersEnvironmentsCreateRequest, base_url, '/tagmanager/v2/{parent}/environments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersEnvironmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersEnvironmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Environment])
                res.environment = out

        return res

    def tagmanager_accounts_containers_environments_list(self, request: operations.TagmanagerAccountsContainersEnvironmentsListRequest, security: operations.TagmanagerAccountsContainersEnvironmentsListSecurity) -> operations.TagmanagerAccountsContainersEnvironmentsListResponse:
        r"""Lists all GTM Environments of a GTM Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersEnvironmentsListRequest, base_url, '/tagmanager/v2/{parent}/environments', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersEnvironmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersEnvironmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListEnvironmentsResponse])
                res.list_environments_response = out

        return res

    def tagmanager_accounts_containers_environments_reauthorize(self, request: operations.TagmanagerAccountsContainersEnvironmentsReauthorizeRequest, security: operations.TagmanagerAccountsContainersEnvironmentsReauthorizeSecurity) -> operations.TagmanagerAccountsContainersEnvironmentsReauthorizeResponse:
        r"""Re-generates the authorization code for a GTM Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersEnvironmentsReauthorizeRequest, base_url, '/tagmanager/v2/{path}:reauthorize', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersEnvironmentsReauthorizeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersEnvironmentsReauthorizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Environment])
                res.environment = out

        return res

    def tagmanager_accounts_containers_list(self, request: operations.TagmanagerAccountsContainersListRequest, security: operations.TagmanagerAccountsContainersListSecurity) -> operations.TagmanagerAccountsContainersListResponse:
        r"""Lists all Containers that belongs to a GTM Account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersListRequest, base_url, '/tagmanager/v2/{parent}/containers', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListContainersResponse])
                res.list_containers_response = out

        return res

    def tagmanager_accounts_containers_lookup(self, request: operations.TagmanagerAccountsContainersLookupRequest, security: operations.TagmanagerAccountsContainersLookupSecurity) -> operations.TagmanagerAccountsContainersLookupResponse:
        r"""Looks up a Container by destination ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tagmanager/v2/accounts/containers:lookup'
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersLookupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Container])
                res.container = out

        return res

    def tagmanager_accounts_containers_move_tag_id(self, request: operations.TagmanagerAccountsContainersMoveTagIDRequest, security: operations.TagmanagerAccountsContainersMoveTagIDSecurity) -> operations.TagmanagerAccountsContainersMoveTagIDResponse:
        r"""Move Tag ID out of a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersMoveTagIDRequest, base_url, '/tagmanager/v2/{path}:move_tag_id', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersMoveTagIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersMoveTagIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Container])
                res.container = out

        return res

    def tagmanager_accounts_containers_snippet(self, request: operations.TagmanagerAccountsContainersSnippetRequest, security: operations.TagmanagerAccountsContainersSnippetSecurity) -> operations.TagmanagerAccountsContainersSnippetResponse:
        r"""Gets the tagging snippet for a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersSnippetRequest, base_url, '/tagmanager/v2/{path}:snippet', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersSnippetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersSnippetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetContainerSnippetResponse])
                res.get_container_snippet_response = out

        return res

    def tagmanager_accounts_containers_version_headers_latest(self, request: operations.TagmanagerAccountsContainersVersionHeadersLatestRequest, security: operations.TagmanagerAccountsContainersVersionHeadersLatestSecurity) -> operations.TagmanagerAccountsContainersVersionHeadersLatestResponse:
        r"""Gets the latest container version header"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionHeadersLatestRequest, base_url, '/tagmanager/v2/{parent}/version_headers:latest', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionHeadersLatestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionHeadersLatestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerVersionHeader])
                res.container_version_header = out

        return res

    def tagmanager_accounts_containers_version_headers_list(self, request: operations.TagmanagerAccountsContainersVersionHeadersListRequest, security: operations.TagmanagerAccountsContainersVersionHeadersListSecurity) -> operations.TagmanagerAccountsContainersVersionHeadersListResponse:
        r"""Lists all Container Versions of a GTM Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionHeadersListRequest, base_url, '/tagmanager/v2/{parent}/version_headers', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionHeadersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionHeadersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListContainerVersionsResponse])
                res.list_container_versions_response = out

        return res

    def tagmanager_accounts_containers_versions_live(self, request: operations.TagmanagerAccountsContainersVersionsLiveRequest, security: operations.TagmanagerAccountsContainersVersionsLiveSecurity) -> operations.TagmanagerAccountsContainersVersionsLiveResponse:
        r"""Gets the live (i.e. published) container version"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionsLiveRequest, base_url, '/tagmanager/v2/{parent}/versions:live', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionsLiveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionsLiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerVersion])
                res.container_version = out

        return res

    def tagmanager_accounts_containers_versions_publish(self, request: operations.TagmanagerAccountsContainersVersionsPublishRequest, security: operations.TagmanagerAccountsContainersVersionsPublishSecurity) -> operations.TagmanagerAccountsContainersVersionsPublishResponse:
        r"""Publishes a Container Version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionsPublishRequest, base_url, '/tagmanager/v2/{path}:publish', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionsPublishRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionsPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PublishContainerVersionResponse])
                res.publish_container_version_response = out

        return res

    def tagmanager_accounts_containers_versions_set_latest(self, request: operations.TagmanagerAccountsContainersVersionsSetLatestRequest, security: operations.TagmanagerAccountsContainersVersionsSetLatestSecurity) -> operations.TagmanagerAccountsContainersVersionsSetLatestResponse:
        r"""Sets the latest version used for synchronization of workspaces when detecting conflicts and errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionsSetLatestRequest, base_url, '/tagmanager/v2/{path}:set_latest', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionsSetLatestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionsSetLatestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerVersion])
                res.container_version = out

        return res

    def tagmanager_accounts_containers_versions_undelete(self, request: operations.TagmanagerAccountsContainersVersionsUndeleteRequest, security: operations.TagmanagerAccountsContainersVersionsUndeleteSecurity) -> operations.TagmanagerAccountsContainersVersionsUndeleteResponse:
        r"""Undeletes a Container Version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersVersionsUndeleteRequest, base_url, '/tagmanager/v2/{path}:undelete', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersVersionsUndeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersVersionsUndeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerVersion])
                res.container_version = out

        return res

    def tagmanager_accounts_containers_workspaces_built_in_variables_create(self, request: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse:
        r"""Creates one or more GTM Built-In Variables."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest, base_url, '/tagmanager/v2/{parent}/built_in_variables', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateBuiltInVariableResponse])
                res.create_built_in_variable_response = out

        return res

    def tagmanager_accounts_containers_workspaces_built_in_variables_list(self, request: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest, security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse:
        r"""Lists all the enabled Built-In Variables of a GTM Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest, base_url, '/tagmanager/v2/{parent}/built_in_variables', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListEnabledBuiltInVariablesResponse])
                res.list_enabled_built_in_variables_response = out

        return res

    def tagmanager_accounts_containers_workspaces_built_in_variables_revert(self, request: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest, security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity) -> operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse:
        r"""Reverts changes to a GTM Built-In Variables in a GTM Workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest, base_url, '/tagmanager/v2/{path}/built_in_variables:revert', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RevertBuiltInVariableResponse])
                res.revert_built_in_variable_response = out

        return res

    def tagmanager_accounts_containers_workspaces_clients_create(self, request: operations.TagmanagerAccountsContainersWorkspacesClientsCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesClientsCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesClientsCreateResponse:
        r"""Creates a GTM Client."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesClientsCreateRequest, base_url, '/tagmanager/v2/{parent}/clients', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesClientsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesClientsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out

        return res

    def tagmanager_accounts_containers_workspaces_clients_list(self, request: operations.TagmanagerAccountsContainersWorkspacesClientsListRequest, security: operations.TagmanagerAccountsContainersWorkspacesClientsListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesClientsListResponse:
        r"""Lists all GTM Clients of a GTM container workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesClientsListRequest, base_url, '/tagmanager/v2/{parent}/clients', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesClientsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesClientsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListClientsResponse])
                res.list_clients_response = out

        return res

    def tagmanager_accounts_containers_workspaces_create(self, request: operations.TagmanagerAccountsContainersWorkspacesCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesCreateResponse:
        r"""Creates a Workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesCreateRequest, base_url, '/tagmanager/v2/{parent}/workspaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workspace", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Workspace])
                res.workspace = out

        return res

    def tagmanager_accounts_containers_workspaces_create_version(self, request: operations.TagmanagerAccountsContainersWorkspacesCreateVersionRequest, security: operations.TagmanagerAccountsContainersWorkspacesCreateVersionSecurity) -> operations.TagmanagerAccountsContainersWorkspacesCreateVersionResponse:
        r"""Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesCreateVersionRequest, base_url, '/tagmanager/v2/{path}:create_version', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_container_version_request_version_options", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesCreateVersionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesCreateVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateContainerVersionResponse])
                res.create_container_version_response = out

        return res

    def tagmanager_accounts_containers_workspaces_folders_create(self, request: operations.TagmanagerAccountsContainersWorkspacesFoldersCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesFoldersCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesFoldersCreateResponse:
        r"""Creates a GTM Folder."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesFoldersCreateRequest, base_url, '/tagmanager/v2/{parent}/folders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "folder", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesFoldersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesFoldersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out

        return res

    def tagmanager_accounts_containers_workspaces_folders_entities(self, request: operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest, security: operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesSecurity) -> operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse:
        r"""List all entities in a GTM Folder."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest, base_url, '/tagmanager/v2/{path}:entities', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderEntities])
                res.folder_entities = out

        return res

    def tagmanager_accounts_containers_workspaces_folders_list(self, request: operations.TagmanagerAccountsContainersWorkspacesFoldersListRequest, security: operations.TagmanagerAccountsContainersWorkspacesFoldersListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesFoldersListResponse:
        r"""Lists all GTM Folders of a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesFoldersListRequest, base_url, '/tagmanager/v2/{parent}/folders', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesFoldersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesFoldersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFoldersResponse])
                res.list_folders_response = out

        return res

    def tagmanager_accounts_containers_workspaces_folders_move_entities_to_folder(self, request: operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest, security: operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderSecurity) -> operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse:
        r"""Moves entities to a GTM Folder."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest, base_url, '/tagmanager/v2/{path}:move_entities_to_folder', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "folder", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tagmanager_accounts_containers_workspaces_get_status(self, request: operations.TagmanagerAccountsContainersWorkspacesGetStatusRequest, security: operations.TagmanagerAccountsContainersWorkspacesGetStatusSecurity) -> operations.TagmanagerAccountsContainersWorkspacesGetStatusResponse:
        r"""Finds conflicting and modified entities in the workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesGetStatusRequest, base_url, '/tagmanager/v2/{path}/status', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesGetStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesGetStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetWorkspaceStatusResponse])
                res.get_workspace_status_response = out

        return res

    def tagmanager_accounts_containers_workspaces_gtag_config_create(self, request: operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse:
        r"""Creates a Google tag config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest, base_url, '/tagmanager/v2/{parent}/gtag_config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "gtag_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GtagConfig])
                res.gtag_config = out

        return res

    def tagmanager_accounts_containers_workspaces_gtag_config_list(self, request: operations.TagmanagerAccountsContainersWorkspacesGtagConfigListRequest, security: operations.TagmanagerAccountsContainersWorkspacesGtagConfigListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesGtagConfigListResponse:
        r"""Lists all Google tag configs in a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesGtagConfigListRequest, base_url, '/tagmanager/v2/{parent}/gtag_config', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesGtagConfigListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesGtagConfigListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGtagConfigResponse])
                res.list_gtag_config_response = out

        return res

    def tagmanager_accounts_containers_workspaces_list(self, request: operations.TagmanagerAccountsContainersWorkspacesListRequest, security: operations.TagmanagerAccountsContainersWorkspacesListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesListResponse:
        r"""Lists all Workspaces that belong to a GTM Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesListRequest, base_url, '/tagmanager/v2/{parent}/workspaces', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkspacesResponse])
                res.list_workspaces_response = out

        return res

    def tagmanager_accounts_containers_workspaces_quick_preview(self, request: operations.TagmanagerAccountsContainersWorkspacesQuickPreviewRequest, security: operations.TagmanagerAccountsContainersWorkspacesQuickPreviewSecurity) -> operations.TagmanagerAccountsContainersWorkspacesQuickPreviewResponse:
        r"""Quick previews a workspace by creating a fake container version from all entities in the provided workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesQuickPreviewRequest, base_url, '/tagmanager/v2/{path}:quick_preview', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesQuickPreviewRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesQuickPreviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuickPreviewResponse])
                res.quick_preview_response = out

        return res

    def tagmanager_accounts_containers_workspaces_resolve_conflict(self, request: operations.TagmanagerAccountsContainersWorkspacesResolveConflictRequest, security: operations.TagmanagerAccountsContainersWorkspacesResolveConflictSecurity) -> operations.TagmanagerAccountsContainersWorkspacesResolveConflictResponse:
        r"""Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesResolveConflictRequest, base_url, '/tagmanager/v2/{path}:resolve_conflict', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesResolveConflictRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesResolveConflictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tagmanager_accounts_containers_workspaces_sync(self, request: operations.TagmanagerAccountsContainersWorkspacesSyncRequest, security: operations.TagmanagerAccountsContainersWorkspacesSyncSecurity) -> operations.TagmanagerAccountsContainersWorkspacesSyncResponse:
        r"""Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesSyncRequest, base_url, '/tagmanager/v2/{path}:sync', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesSyncRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncWorkspaceResponse])
                res.sync_workspace_response = out

        return res

    def tagmanager_accounts_containers_workspaces_tags_create(self, request: operations.TagmanagerAccountsContainersWorkspacesTagsCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesTagsCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTagsCreateResponse:
        r"""Creates a GTM Tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTagsCreateRequest, base_url, '/tagmanager/v2/{parent}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTagsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTagsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out

        return res

    def tagmanager_accounts_containers_workspaces_tags_list(self, request: operations.TagmanagerAccountsContainersWorkspacesTagsListRequest, security: operations.TagmanagerAccountsContainersWorkspacesTagsListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTagsListResponse:
        r"""Lists all GTM Tags of a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTagsListRequest, base_url, '/tagmanager/v2/{parent}/tags', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTagsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTagsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagsResponse])
                res.list_tags_response = out

        return res

    def tagmanager_accounts_containers_workspaces_templates_create(self, request: operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse:
        r"""Creates a GTM Custom Template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest, base_url, '/tagmanager/v2/{parent}/templates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomTemplate])
                res.custom_template = out

        return res

    def tagmanager_accounts_containers_workspaces_templates_list(self, request: operations.TagmanagerAccountsContainersWorkspacesTemplatesListRequest, security: operations.TagmanagerAccountsContainersWorkspacesTemplatesListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTemplatesListResponse:
        r"""Lists all GTM Templates of a GTM container workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTemplatesListRequest, base_url, '/tagmanager/v2/{parent}/templates', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTemplatesResponse])
                res.list_templates_response = out

        return res

    def tagmanager_accounts_containers_workspaces_triggers_create(self, request: operations.TagmanagerAccountsContainersWorkspacesTriggersCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesTriggersCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTriggersCreateResponse:
        r"""Creates a GTM Trigger."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTriggersCreateRequest, base_url, '/tagmanager/v2/{parent}/triggers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "trigger", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTriggersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTriggersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Trigger])
                res.trigger = out

        return res

    def tagmanager_accounts_containers_workspaces_triggers_list(self, request: operations.TagmanagerAccountsContainersWorkspacesTriggersListRequest, security: operations.TagmanagerAccountsContainersWorkspacesTriggersListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesTriggersListResponse:
        r"""Lists all GTM Triggers of a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesTriggersListRequest, base_url, '/tagmanager/v2/{parent}/triggers', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesTriggersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesTriggersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTriggersResponse])
                res.list_triggers_response = out

        return res

    def tagmanager_accounts_containers_workspaces_variables_create(self, request: operations.TagmanagerAccountsContainersWorkspacesVariablesCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesVariablesCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesVariablesCreateResponse:
        r"""Creates a GTM Variable."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesVariablesCreateRequest, base_url, '/tagmanager/v2/{parent}/variables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "variable", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesVariablesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesVariablesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Variable])
                res.variable = out

        return res

    def tagmanager_accounts_containers_workspaces_variables_list(self, request: operations.TagmanagerAccountsContainersWorkspacesVariablesListRequest, security: operations.TagmanagerAccountsContainersWorkspacesVariablesListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesVariablesListResponse:
        r"""Lists all GTM Variables of a Container."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesVariablesListRequest, base_url, '/tagmanager/v2/{parent}/variables', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesVariablesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesVariablesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVariablesResponse])
                res.list_variables_response = out

        return res

    def tagmanager_accounts_containers_workspaces_zones_create(self, request: operations.TagmanagerAccountsContainersWorkspacesZonesCreateRequest, security: operations.TagmanagerAccountsContainersWorkspacesZonesCreateSecurity) -> operations.TagmanagerAccountsContainersWorkspacesZonesCreateResponse:
        r"""Creates a GTM Zone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesZonesCreateRequest, base_url, '/tagmanager/v2/{parent}/zones', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "zone", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesZonesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesZonesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Zone])
                res.zone = out

        return res

    def tagmanager_accounts_containers_workspaces_zones_list(self, request: operations.TagmanagerAccountsContainersWorkspacesZonesListRequest, security: operations.TagmanagerAccountsContainersWorkspacesZonesListSecurity) -> operations.TagmanagerAccountsContainersWorkspacesZonesListResponse:
        r"""Lists all GTM Zones of a GTM container workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesZonesListRequest, base_url, '/tagmanager/v2/{parent}/zones', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesZonesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesZonesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListZonesResponse])
                res.list_zones_response = out

        return res

    def tagmanager_accounts_containers_workspaces_zones_revert(self, request: operations.TagmanagerAccountsContainersWorkspacesZonesRevertRequest, security: operations.TagmanagerAccountsContainersWorkspacesZonesRevertSecurity) -> operations.TagmanagerAccountsContainersWorkspacesZonesRevertResponse:
        r"""Reverts changes to a GTM Zone in a GTM Workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsContainersWorkspacesZonesRevertRequest, base_url, '/tagmanager/v2/{path}:revert', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsContainersWorkspacesZonesRevertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsContainersWorkspacesZonesRevertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RevertZoneResponse])
                res.revert_zone_response = out

        return res

    def tagmanager_accounts_list(self, request: operations.TagmanagerAccountsListRequest, security: operations.TagmanagerAccountsListSecurity) -> operations.TagmanagerAccountsListResponse:
        r"""Lists all GTM Accounts that a user has access to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tagmanager/v2/accounts'
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccountsResponse])
                res.list_accounts_response = out

        return res

    def tagmanager_accounts_user_permissions_create(self, request: operations.TagmanagerAccountsUserPermissionsCreateRequest, security: operations.TagmanagerAccountsUserPermissionsCreateSecurity) -> operations.TagmanagerAccountsUserPermissionsCreateResponse:
        r"""Creates a user's Account & Container access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsUserPermissionsCreateRequest, base_url, '/tagmanager/v2/{parent}/user_permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_permission", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsUserPermissionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsUserPermissionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPermission])
                res.user_permission = out

        return res

    def tagmanager_accounts_user_permissions_delete(self, request: operations.TagmanagerAccountsUserPermissionsDeleteRequest, security: operations.TagmanagerAccountsUserPermissionsDeleteSecurity) -> operations.TagmanagerAccountsUserPermissionsDeleteResponse:
        r"""Removes a user from the account, revoking access to it and all of its containers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsUserPermissionsDeleteRequest, base_url, '/tagmanager/v2/{path}', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsUserPermissionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsUserPermissionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tagmanager_accounts_user_permissions_get(self, request: operations.TagmanagerAccountsUserPermissionsGetRequest, security: operations.TagmanagerAccountsUserPermissionsGetSecurity) -> operations.TagmanagerAccountsUserPermissionsGetResponse:
        r"""Gets a user's Account & Container access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsUserPermissionsGetRequest, base_url, '/tagmanager/v2/{path}', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsUserPermissionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsUserPermissionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPermission])
                res.user_permission = out

        return res

    def tagmanager_accounts_user_permissions_list(self, request: operations.TagmanagerAccountsUserPermissionsListRequest, security: operations.TagmanagerAccountsUserPermissionsListSecurity) -> operations.TagmanagerAccountsUserPermissionsListResponse:
        r"""List all users that have access to the account along with Account and Container user access granted to each of them."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsUserPermissionsListRequest, base_url, '/tagmanager/v2/{parent}/user_permissions', request)
        
        query_params = utils.get_query_params(operations.TagmanagerAccountsUserPermissionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsUserPermissionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUserPermissionsResponse])
                res.list_user_permissions_response = out

        return res

    def tagmanager_accounts_user_permissions_update(self, request: operations.TagmanagerAccountsUserPermissionsUpdateRequest, security: operations.TagmanagerAccountsUserPermissionsUpdateSecurity) -> operations.TagmanagerAccountsUserPermissionsUpdateResponse:
        r"""Updates a user's Account & Container access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagmanagerAccountsUserPermissionsUpdateRequest, base_url, '/tagmanager/v2/{path}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_permission", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TagmanagerAccountsUserPermissionsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagmanagerAccountsUserPermissionsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPermission])
                res.user_permission = out

        return res

    