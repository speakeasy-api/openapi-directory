<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Districts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the admins for a district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictResponse
     */
	public function getAdminsForDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/admins', \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminsForDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtAdminsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistrictAdminsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a specific district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictResponse
     */
	public function getDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistrictRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistrictResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the status of the district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusResponse
     */
	public function getDistrictStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/status', \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtStatusResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistrictStatusResponses', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of districts. In practice this will only return the one district associated with the bearer token
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictsResponse
     */
	public function getDistricts(
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistrictsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the schools for a district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictResponse
     */
	public function getSchoolsForDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/schools', \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSchoolsForDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SchoolsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the sections for a district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictResponse
     */
	public function getSectionsForDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/sections', \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSectionsForDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SectionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the students for a district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictResponse
     */
	public function getStudentsForDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/students', \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStudentsForDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudentsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the teachers for a district
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictResponse
     */
	public function getTeachersForDistrict(
        \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{id}/teachers', \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeachersForDistrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teachersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeachersResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
}