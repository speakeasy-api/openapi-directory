/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GetMergeConflictsXAmzTargetEnum {
  CodeCommit20150413GetMergeConflicts = "CodeCommit_20150413.GetMergeConflicts",
}

export class GetMergeConflictsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  getMergeConflictsInput: shared.GetMergeConflictsInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: GetMergeConflictsXAmzTargetEnum;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxConflictFiles",
  })
  maxConflictFiles?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class GetMergeConflictsResponse extends SpeakeasyBase {
  /**
   * CommitDoesNotExistException
   */
  @SpeakeasyMetadata()
  commitDoesNotExistException?: any;

  /**
   * CommitRequiredException
   */
  @SpeakeasyMetadata()
  commitRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getMergeConflictsOutput?: shared.GetMergeConflictsOutput;

  /**
   * InvalidCommitException
   */
  @SpeakeasyMetadata()
  invalidCommitException?: any;

  /**
   * InvalidConflictDetailLevelException
   */
  @SpeakeasyMetadata()
  invalidConflictDetailLevelException?: any;

  /**
   * InvalidConflictResolutionStrategyException
   */
  @SpeakeasyMetadata()
  invalidConflictResolutionStrategyException?: any;

  /**
   * InvalidContinuationTokenException
   */
  @SpeakeasyMetadata()
  invalidContinuationTokenException?: any;

  /**
   * InvalidDestinationCommitSpecifierException
   */
  @SpeakeasyMetadata()
  invalidDestinationCommitSpecifierException?: any;

  /**
   * InvalidMaxConflictFilesException
   */
  @SpeakeasyMetadata()
  invalidMaxConflictFilesException?: any;

  /**
   * InvalidMergeOptionException
   */
  @SpeakeasyMetadata()
  invalidMergeOptionException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidSourceCommitSpecifierException
   */
  @SpeakeasyMetadata()
  invalidSourceCommitSpecifierException?: any;

  /**
   * MaximumFileContentToLoadExceededException
   */
  @SpeakeasyMetadata()
  maximumFileContentToLoadExceededException?: any;

  /**
   * MaximumItemsToCompareExceededException
   */
  @SpeakeasyMetadata()
  maximumItemsToCompareExceededException?: any;

  /**
   * MergeOptionRequiredException
   */
  @SpeakeasyMetadata()
  mergeOptionRequiredException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TipsDivergenceExceededException
   */
  @SpeakeasyMetadata()
  tipsDivergenceExceededException?: any;
}
