"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import wlt_record as shared_wlt_record
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamEventStatusRankRanking:
    
    dq: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dq'), 'exclude': lambda f: f is None }})
    r"""Number of matches the team was disqualified for."""  
    matches_played: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matches_played'), 'exclude': lambda f: f is None }})
    r"""Number of matches played."""  
    qual_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qual_average'), 'exclude': lambda f: f is None }})
    r"""For some years, average qualification score. Can be null."""  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})
    r"""Relative rank of this team."""  
    record: Optional[shared_wlt_record.WLTRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record'), 'exclude': lambda f: f is None }})
    r"""A Win-Loss-Tie record for a team, or an alliance."""  
    sort_orders: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_orders'), 'exclude': lambda f: f is None }})
    r"""Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value."""  
    team_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_key'), 'exclude': lambda f: f is None }})
    r"""TBA team key for this rank."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamEventStatusRankSortOrderInfo:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The descriptive name of the value used to sort the ranking."""  
    precision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision'), 'exclude': lambda f: f is None }})
    r"""The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamEventStatusRank:
    
    num_teams: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_teams'), 'exclude': lambda f: f is None }})
    r"""Number of teams ranked."""  
    ranking: Optional[TeamEventStatusRankRanking] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ranking'), 'exclude': lambda f: f is None }})  
    sort_order_info: Optional[list[TeamEventStatusRankSortOrderInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order_info'), 'exclude': lambda f: f is None }})
    r"""Ordered list of names corresponding to the elements of the `sort_orders` array."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    