"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from enum import Enum
from typing import Optional

class ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum(str, Enum):
    r"""The current state of the gateway association."""
    ASSOCIATED = 'associated'
    NOT_ASSOCIATED = 'not-associated'
    ASSOCIATING = 'associating'
    DISASSOCIATING = 'disassociating'

class ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum(str, Enum):
    r"""Indicates whether the VPN tunnels process IPv4 or IPv6 traffic."""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions:
    r"""The internet key exchange (IKE) version permitted for the VPN tunnel."""
    
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions:
    r"""Options for sending VPN tunnel logs to CloudWatch."""
    
    log_enabled: Optional[bool] = dataclasses.field(default=None)  
    log_group_arn: Optional[str] = dataclasses.field(default=None)  
    log_output_format: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions:
    r"""Options for logging VPN tunnel activity."""
    
    cloud_watch_log_options: Optional[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers:
    r"""The Diffie-Hellmann group number for phase 1 IKE negotiations."""
    
    value: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms:
    r"""The encryption algorithm for phase 1 IKE negotiations."""
    
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms:
    r"""The integrity algorithm for phase 1 IKE negotiations."""
    
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers:
    r"""The Diffie-Hellmann group number for phase 2 IKE negotiations."""
    
    value: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms:
    r"""The encryption algorithm for phase 2 IKE negotiations."""
    
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms:
    r"""The integrity algorithm for phase 2 IKE negotiations."""
    
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions:
    r"""The VPN tunnel options."""
    
    dpd_timeout_action: Optional[str] = dataclasses.field(default=None)  
    dpd_timeout_seconds: Optional[int] = dataclasses.field(default=None)  
    ike_versions: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions]] = dataclasses.field(default=None)  
    log_options: Optional[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions] = dataclasses.field(default=None)  
    outside_ip_address: Optional[str] = dataclasses.field(default=None)  
    phase1_dh_group_numbers: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers]] = dataclasses.field(default=None)  
    phase1_encryption_algorithms: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms]] = dataclasses.field(default=None)  
    phase1_integrity_algorithms: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms]] = dataclasses.field(default=None)  
    phase1_lifetime_seconds: Optional[int] = dataclasses.field(default=None)  
    phase2_dh_group_numbers: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers]] = dataclasses.field(default=None)  
    phase2_encryption_algorithms: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms]] = dataclasses.field(default=None)  
    phase2_integrity_algorithms: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms]] = dataclasses.field(default=None)  
    phase2_lifetime_seconds: Optional[int] = dataclasses.field(default=None)  
    pre_shared_key: Optional[str] = dataclasses.field(default=None)  
    rekey_fuzz_percentage: Optional[int] = dataclasses.field(default=None)  
    rekey_margin_time_seconds: Optional[int] = dataclasses.field(default=None)  
    replay_window_size: Optional[int] = dataclasses.field(default=None)  
    startup_action: Optional[str] = dataclasses.field(default=None)  
    tunnel_inside_cidr: Optional[str] = dataclasses.field(default=None)  
    tunnel_inside_ipv6_cidr: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionOptions:
    r"""The VPN connection options."""
    
    enable_acceleration: Optional[bool] = dataclasses.field(default=None)  
    local_ipv4_network_cidr: Optional[str] = dataclasses.field(default=None)  
    local_ipv6_network_cidr: Optional[str] = dataclasses.field(default=None)  
    outside_ip_address_type: Optional[str] = dataclasses.field(default=None)  
    remote_ipv4_network_cidr: Optional[str] = dataclasses.field(default=None)  
    remote_ipv6_network_cidr: Optional[str] = dataclasses.field(default=None)  
    static_routes_only: Optional[bool] = dataclasses.field(default=None)  
    transport_transit_gateway_attachment_id: Optional[str] = dataclasses.field(default=None)  
    tunnel_inside_ip_version: Optional[ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum] = dataclasses.field(default=None)  
    tunnel_options: Optional[list[ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions]] = dataclasses.field(default=None)  
    
class ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum(str, Enum):
    r"""Indicates how the routes were provided."""
    STATIC = 'Static'

class ModifyVpnConnectionResultVpnConnectionRoutesStateEnum(str, Enum):
    r"""The current state of the static route."""
    PENDING = 'pending'
    AVAILABLE = 'available'
    DELETING = 'deleting'
    DELETED = 'deleted'


@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionRoutes:
    r"""Describes a static route for a VPN connection."""
    
    destination_cidr_block: Optional[str] = dataclasses.field(default=None)  
    source: Optional[ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum] = dataclasses.field(default=None)  
    state: Optional[ModifyVpnConnectionResultVpnConnectionRoutesStateEnum] = dataclasses.field(default=None)  
    
class ModifyVpnConnectionResultVpnConnectionStateEnum(str, Enum):
    r"""The current state of the VPN connection."""
    PENDING = 'pending'
    AVAILABLE = 'available'
    DELETING = 'deleting'
    DELETED = 'deleted'


@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    
class ModifyVpnConnectionResultVpnConnectionTypeEnum(str, Enum):
    r"""The type of VPN connection."""
    IPSEC_1 = 'ipsec.1'

class ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum(str, Enum):
    r"""The status of the VPN tunnel."""
    UP = 'UP'
    DOWN = 'DOWN'


@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnectionVgwTelemetry:
    r"""Describes telemetry for a VPN tunnel."""
    
    accepted_route_count: Optional[int] = dataclasses.field(default=None)  
    certificate_arn: Optional[str] = dataclasses.field(default=None)  
    last_status_change: Optional[datetime] = dataclasses.field(default=None)  
    outside_ip_address: Optional[str] = dataclasses.field(default=None)  
    status: Optional[ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum] = dataclasses.field(default=None)  
    status_message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResultVpnConnection:
    r"""Information about the VPN connection."""
    
    category: Optional[str] = dataclasses.field(default=None)  
    core_network_arn: Optional[str] = dataclasses.field(default=None)  
    core_network_attachment_arn: Optional[str] = dataclasses.field(default=None)  
    customer_gateway_configuration: Optional[str] = dataclasses.field(default=None)  
    customer_gateway_id: Optional[str] = dataclasses.field(default=None)  
    gateway_association_state: Optional[ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum] = dataclasses.field(default=None)  
    options: Optional[ModifyVpnConnectionResultVpnConnectionOptions] = dataclasses.field(default=None)  
    routes: Optional[list[ModifyVpnConnectionResultVpnConnectionRoutes]] = dataclasses.field(default=None)  
    state: Optional[ModifyVpnConnectionResultVpnConnectionStateEnum] = dataclasses.field(default=None)  
    tags: Optional[list[ModifyVpnConnectionResultVpnConnectionTags]] = dataclasses.field(default=None)  
    transit_gateway_id: Optional[str] = dataclasses.field(default=None)  
    type: Optional[ModifyVpnConnectionResultVpnConnectionTypeEnum] = dataclasses.field(default=None)  
    vgw_telemetry: Optional[list[ModifyVpnConnectionResultVpnConnectionVgwTelemetry]] = dataclasses.field(default=None)  
    vpn_connection_id: Optional[str] = dataclasses.field(default=None)  
    vpn_gateway_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ModifyVpnConnectionResult:
    r"""Success"""
    
    vpn_connection: Optional[ModifyVpnConnectionResultVpnConnection] = dataclasses.field(default=None)  
    