"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetzipcodeinfoRequest:
    
    license: str = dataclasses.field(metadata={'query_param': { 'field_name': 'license', 'style': 'form', 'explode': True }})
    r"""Your Interzoid license API key. Register at www.interzoid.com/register"""  
    zip: str = dataclasses.field(metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zip code to retrieve detailed information"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getzipcodeinfo200ApplicationJSON:
    r"""Zip code detailed code information"""
    
    area_square_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AreaSquareMiles'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    credits: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Credits'), 'exclude': lambda f: f is None }})  
    elderly_household_percent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElderlyHouseholdPercent'), 'exclude': lambda f: f is None }})  
    farmer_household_percent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FarmerHouseholdPercent'), 'exclude': lambda f: f is None }})  
    income_percent100k: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncomePercent100k'), 'exclude': lambda f: f is None }})  
    income_percent200k: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncomePercent200k'), 'exclude': lambda f: f is None }})  
    income_percent50k: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncomePercent50k'), 'exclude': lambda f: f is None }})  
    latitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Latitude'), 'exclude': lambda f: f is None }})  
    longitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Longitude'), 'exclude': lambda f: f is None }})  
    married_household_percent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MarriedHouseholdPercent'), 'exclude': lambda f: f is None }})  
    population: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Population'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipCode'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetzipcodeinfoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getzipcodeinfo_200_application_json_object: Optional[Getzipcodeinfo200ApplicationJSON] = dataclasses.field(default=None)
    r"""Zip code detailed code information"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    