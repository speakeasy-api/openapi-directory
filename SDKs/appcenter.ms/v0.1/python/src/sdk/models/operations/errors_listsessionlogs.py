"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsListSessionLogsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class ErrorsListSessionLogsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    error_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'errorId', 'style': 'simple', 'explode': False }})
    r"""The id of the error"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date', 'style': 'form', 'explode': True }})
    r"""Date of data requested"""  
    
class ErrorsListSessionLogsDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsListSessionLogsDefaultApplicationJSONError:
    
    code: ErrorsListSessionLogsDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsListSessionLogsDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsListSessionLogsDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsListSessionLogs200ApplicationJSONLogsDevice:
    r"""Device characteristics."""
    
    app_build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_build') }})
    r"""The app's build number, e.g. 42."""  
    app_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_version') }})
    r"""Application version name, e.g. 1.1.0"""  
    locale: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale') }})
    r"""Language code (example: en_US)."""  
    os_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_name') }})
    r"""OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows."""  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})
    r"""OS version (example: 9.3.0)."""  
    sdk_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdk_name') }})
    r"""Name of the SDK. Consists of the name of the SDK and the platform, e.g. \\"appcenter.ios\\", \\"hockeysdk.android\\"."""  
    sdk_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdk_version') }})
    r"""Version of the SDK in semver format, e.g. \\"1.2.0\\" or \\"0.12.3-alpha.1\\"."""  
    time_zone_offset: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_zone_offset') }})
    r"""The offset in minutes from UTC for the device time zone, including daylight savings time."""  
    app_namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_namespace'), 'exclude': lambda f: f is None }})
    r"""The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example."""  
    carrier_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_code'), 'exclude': lambda f: f is None }})
    r"""Carrier country code (for mobile devices)."""  
    carrier_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_country'), 'exclude': lambda f: f is None }})
    r"""Carrier country."""  
    carrier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_name'), 'exclude': lambda f: f is None }})
    r"""Carrier name (for mobile devices)."""  
    live_update_deployment_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('live_update_deployment_key'), 'exclude': lambda f: f is None }})
    r"""Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging."""  
    live_update_package_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('live_update_package_hash'), 'exclude': lambda f: f is None }})
    r"""Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future."""  
    live_update_release_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('live_update_release_label'), 'exclude': lambda f: f is None }})
    r"""Label that is used to identify application code 'version' released via Live Update beacon running on device"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Device model (example: iPad2,3)."""  
    oem_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oem_name'), 'exclude': lambda f: f is None }})
    r"""Device manufacturer (example: HTC)."""  
    os_api_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_api_level'), 'exclude': lambda f: f is None }})
    r"""API level when applicable like in Android (example: 15)."""  
    os_build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_build'), 'exclude': lambda f: f is None }})
    r"""OS build code (example: LMY47X)."""  
    screen_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_size'), 'exclude': lambda f: f is None }})
    r"""Screen size of the device in pixels (example: 640x480)."""  
    wrapper_runtime_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrapper_runtime_version'), 'exclude': lambda f: f is None }})
    r"""Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other."""  
    wrapper_sdk_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrapper_sdk_name'), 'exclude': lambda f: f is None }})
    r"""Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \\"appcenter.xamarin\\", \\"hockeysdk.cordova\\"."""  
    wrapper_sdk_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrapper_sdk_version'), 'exclude': lambda f: f is None }})
    r"""Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK."""  
    
class ErrorsListSessionLogs200ApplicationJSONLogsTypeEnum(str, Enum):
    r"""Log type."""
    EVENT = 'event'
    PAGE = 'page'
    START_SESSION = 'start_session'
    ERROR = 'error'
    PUSH_INSTALLATION = 'push_installation'
    START_SERVICE = 'start_service'
    CUSTOM_PROPERTIES = 'custom_properties'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsListSessionLogs200ApplicationJSONLogs:
    r"""Generic log."""
    
    device: ErrorsListSessionLogs200ApplicationJSONLogsDevice = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})
    r"""Device characteristics."""  
    install_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('install_id') }})
    r"""Install ID."""  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Log creation timestamp."""  
    type: ErrorsListSessionLogs200ApplicationJSONLogsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Log type."""  
    event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_id'), 'exclude': lambda f: f is None }})
    r"""Event ID."""  
    event_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_name'), 'exclude': lambda f: f is None }})
    r"""Event name."""  
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""Message ID."""  
    properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""event specific properties."""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_id'), 'exclude': lambda f: f is None }})
    r"""Session ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsListSessionLogs200ApplicationJSON:
    r"""Session logs of specific error"""
    
    logs: list[ErrorsListSessionLogs200ApplicationJSONLogs] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logs') }})
    r"""the list of logs"""  
    exceeded_max_limit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceeded_max_limit'), 'exclude': lambda f: f is None }})
    r"""indicates if the number of available logs are more than the max allowed return limit(100)."""  
    last_received_log_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_received_log_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call."""  
    

@dataclasses.dataclass
class ErrorsListSessionLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_list_session_logs_200_application_json_object: Optional[ErrorsListSessionLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""Session logs of specific error"""  
    errors_list_session_logs_default_application_json_object: Optional[ErrorsListSessionLogsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    