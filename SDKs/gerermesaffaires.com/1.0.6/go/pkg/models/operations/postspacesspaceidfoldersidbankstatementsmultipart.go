// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartPathParams struct {
	// Id of the folder bank
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                          `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                          `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormData1 - Bank statement to add (either DocumentId,StatementDate either (File,Name,Content64Encoded,Title,StatementDate) is mandatory)
type PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormData1 struct {
	Accounting    *PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author        *string                                                              `multipartForm:"name=Author"`
	Balance       *float64                                                             `multipartForm:"name=Balance"`
	Code          *string                                                              `multipartForm:"name=Code"`
	Comment       *string                                                              `multipartForm:"name=Comment"`
	Date          *string                                                              `multipartForm:"name=Date"`
	File          PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormDataFile        `multipartForm:"file"`
	Number        *float64                                                             `multipartForm:"name=Number"`
	StatementDate string                                                               `multipartForm:"name=StatementDate"`
	Title         string                                                               `multipartForm:"name=Title"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartRequest struct {
	PathParams PostSpacesSpaceIDFoldersIDBankStatementsMultipartPathParams
	// Bank statement to add (either DocumentId,StatementDate either (File,Name,Content64Encoded,Title,StatementDate) is mandatory)
	Request  PostSpacesSpaceIDFoldersIDBankStatementsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	Security PostSpacesSpaceIDFoldersIDBankStatementsMultipartSecurity
}

// PostSpacesSpaceIDFoldersIDBankStatementsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDBankStatementsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDBankStatementsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDBankStatementsMultipart201ApplicationJSON
}
