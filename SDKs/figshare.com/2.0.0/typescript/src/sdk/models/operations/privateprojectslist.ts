/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PrivateProjectsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth2: string;
}

/**
 * The field by which to order.
 */
export enum PrivateProjectsListOrderEnum {
  PublishedDate = "published_date",
  ModifiedDate = "modified_date",
  Views = "views",
}

export enum PrivateProjectsListOrderDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * only return collections from this institution
 */
export enum PrivateProjectsListStorageEnum {
  Group = "group",
  Individual = "individual",
}

export class PrivateProjectsListRequest extends SpeakeasyBase {
  /**
   * Number of results included on a page. Used for pagination with query
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Where to start the listing(the offset of the first result). Used for pagination with limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * The field by which to order.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: PrivateProjectsListOrderEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=order_direction",
  })
  orderDirection?: PrivateProjectsListOrderDirectionEnum;

  /**
   * Page number. Used for pagination with page_size
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results included on a page. Used for pagination with page
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Any combination of owner, collaborator, viewer separated by comma. Examples: "owner" or "owner,collaborator".
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=roles" })
  roles?: string;

  /**
   * only return collections from this institution
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=storage",
  })
  storage?: PrivateProjectsListStorageEnum;
}

export class PrivateProjectsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  errorMessage?: shared.ErrorMessage;

  /**
   * OK. An array of projects
   */
  @SpeakeasyMetadata({ elemType: shared.ProjectPrivate })
  projectPrivates?: shared.ProjectPrivate[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
