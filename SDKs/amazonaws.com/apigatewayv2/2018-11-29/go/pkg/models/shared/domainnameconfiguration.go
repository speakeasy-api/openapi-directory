// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DomainNameConfigurationDomainNameStatusEnum - The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.
type DomainNameConfigurationDomainNameStatusEnum string

const (
	DomainNameConfigurationDomainNameStatusEnumAvailable                    DomainNameConfigurationDomainNameStatusEnum = "AVAILABLE"
	DomainNameConfigurationDomainNameStatusEnumUpdating                     DomainNameConfigurationDomainNameStatusEnum = "UPDATING"
	DomainNameConfigurationDomainNameStatusEnumPendingCertificateReimport   DomainNameConfigurationDomainNameStatusEnum = "PENDING_CERTIFICATE_REIMPORT"
	DomainNameConfigurationDomainNameStatusEnumPendingOwnershipVerification DomainNameConfigurationDomainNameStatusEnum = "PENDING_OWNERSHIP_VERIFICATION"
)

func (e *DomainNameConfigurationDomainNameStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AVAILABLE":
		fallthrough
	case "UPDATING":
		fallthrough
	case "PENDING_CERTIFICATE_REIMPORT":
		fallthrough
	case "PENDING_OWNERSHIP_VERIFICATION":
		*e = DomainNameConfigurationDomainNameStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainNameConfigurationDomainNameStatusEnum: %s", s)
	}
}

// DomainNameConfigurationEndpointTypeEnum - The endpoint type.
type DomainNameConfigurationEndpointTypeEnum string

const (
	DomainNameConfigurationEndpointTypeEnumRegional DomainNameConfigurationEndpointTypeEnum = "REGIONAL"
	DomainNameConfigurationEndpointTypeEnumEdge     DomainNameConfigurationEndpointTypeEnum = "EDGE"
)

func (e *DomainNameConfigurationEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REGIONAL":
		fallthrough
	case "EDGE":
		*e = DomainNameConfigurationEndpointTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainNameConfigurationEndpointTypeEnum: %s", s)
	}
}

// DomainNameConfigurationSecurityPolicyEnum - The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
type DomainNameConfigurationSecurityPolicyEnum string

const (
	DomainNameConfigurationSecurityPolicyEnumTls10 DomainNameConfigurationSecurityPolicyEnum = "TLS_1_0"
	DomainNameConfigurationSecurityPolicyEnumTls12 DomainNameConfigurationSecurityPolicyEnum = "TLS_1_2"
)

func (e *DomainNameConfigurationSecurityPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TLS_1_0":
		fallthrough
	case "TLS_1_2":
		*e = DomainNameConfigurationSecurityPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainNameConfigurationSecurityPolicyEnum: %s", s)
	}
}

// DomainNameConfiguration - The domain name configuration.
type DomainNameConfiguration struct {
	APIGatewayDomainName                *string                                      `json:"ApiGatewayDomainName,omitempty"`
	CertificateArn                      *string                                      `json:"CertificateArn,omitempty"`
	CertificateName                     *string                                      `json:"CertificateName,omitempty"`
	CertificateUploadDate               *time.Time                                   `json:"CertificateUploadDate,omitempty"`
	DomainNameStatus                    *DomainNameConfigurationDomainNameStatusEnum `json:"DomainNameStatus,omitempty"`
	DomainNameStatusMessage             *string                                      `json:"DomainNameStatusMessage,omitempty"`
	EndpointType                        *DomainNameConfigurationEndpointTypeEnum     `json:"EndpointType,omitempty"`
	HostedZoneID                        *string                                      `json:"HostedZoneId,omitempty"`
	OwnershipVerificationCertificateArn *string                                      `json:"OwnershipVerificationCertificateArn,omitempty"`
	SecurityPolicy                      *DomainNameConfigurationSecurityPolicyEnum   `json:"SecurityPolicy,omitempty"`
}
