"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import modelqualityappspecification as shared_modelqualityappspecification
from ..shared import modelqualitybaselineconfig as shared_modelqualitybaselineconfig
from ..shared import modelqualityjobinput as shared_modelqualityjobinput
from ..shared import monitoringnetworkconfig as shared_monitoringnetworkconfig
from ..shared import monitoringoutputconfig as shared_monitoringoutputconfig
from ..shared import monitoringresources as shared_monitoringresources
from ..shared import monitoringstoppingcondition as shared_monitoringstoppingcondition
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateModelQualityJobDefinitionRequest:
    
    job_definition_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDefinitionName') }})  
    job_resources: shared_monitoringresources.MonitoringResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobResources') }})
    r"""Identifies the resources to deploy for a monitoring job."""  
    model_quality_app_specification: shared_modelqualityappspecification.ModelQualityAppSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelQualityAppSpecification') }})  
    model_quality_job_input: shared_modelqualityjobinput.ModelQualityJobInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelQualityJobInput') }})  
    model_quality_job_output_config: shared_monitoringoutputconfig.MonitoringOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelQualityJobOutputConfig') }})
    r"""The output configuration for monitoring jobs."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    model_quality_baseline_config: Optional[shared_modelqualitybaselineconfig.ModelQualityBaselineConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelQualityBaselineConfig'), 'exclude': lambda f: f is None }})  
    network_config: Optional[shared_monitoringnetworkconfig.MonitoringNetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfig'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_monitoringstoppingcondition.MonitoringStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition'), 'exclude': lambda f: f is None }})
    r"""A time limit for how long the monitoring job is allowed to run before stopping."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    