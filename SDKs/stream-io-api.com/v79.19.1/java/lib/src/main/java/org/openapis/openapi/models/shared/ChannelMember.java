/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ChannelMember {
    /**
     * Expiration date of the ban
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ban_expires")
    public OffsetDateTime banExpires;
    public ChannelMember withBanExpires(OffsetDateTime banExpires) {
        this.banExpires = banExpires;
        return this;
    }
    
    /**
     * Whether member is banned this channel or not
     */
    @JsonProperty("banned")
    public Boolean banned;
    public ChannelMember withBanned(Boolean banned) {
        this.banned = banned;
        return this;
    }
    
    /**
     * Role of the member in the channel
     */
    @JsonProperty("channel_role")
    public String channelRole;
    public ChannelMember withChannelRole(String channelRole) {
        this.channelRole = channelRole;
        return this;
    }
    
    /**
     * Date/time of creation
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public ChannelMember withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deleted_at")
    public OffsetDateTime deletedAt;
    public ChannelMember withDeletedAt(OffsetDateTime deletedAt) {
        this.deletedAt = deletedAt;
        return this;
    }
    
    /**
     * Date when invite was accepted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("invite_accepted_at")
    public OffsetDateTime inviteAcceptedAt;
    public ChannelMember withInviteAcceptedAt(OffsetDateTime inviteAcceptedAt) {
        this.inviteAcceptedAt = inviteAcceptedAt;
        return this;
    }
    
    /**
     * Date when invite was rejected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("invite_rejected_at")
    public OffsetDateTime inviteRejectedAt;
    public ChannelMember withInviteRejectedAt(OffsetDateTime inviteRejectedAt) {
        this.inviteRejectedAt = inviteRejectedAt;
        return this;
    }
    
    /**
     * Whether member was invited or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invited")
    public Boolean invited;
    public ChannelMember withInvited(Boolean invited) {
        this.invited = invited;
        return this;
    }
    
    /**
     * Whether member is channel moderator or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_moderator")
    public Boolean isModerator;
    public ChannelMember withIsModerator(Boolean isModerator) {
        this.isModerator = isModerator;
        return this;
    }
    
    /**
     * Permission level of the member in the channel (DEPRECATED: use channel_role instead)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public ChannelMemberRoleEnum role;
    public ChannelMember withRole(ChannelMemberRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * Whether member is shadow banned in this channel or not
     */
    @JsonProperty("shadow_banned")
    public Boolean shadowBanned;
    public ChannelMember withShadowBanned(Boolean shadowBanned) {
        this.shadowBanned = shadowBanned;
        return this;
    }
    
    /**
     * Date/time of the last update
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public ChannelMember withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public ChannelMember withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public ChannelMember withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
}
