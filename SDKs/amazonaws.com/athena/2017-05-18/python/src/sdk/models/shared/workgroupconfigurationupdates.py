"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customercontentencryptionconfiguration as shared_customercontentencryptionconfiguration
from ..shared import engineversion as shared_engineversion
from ..shared import resultconfigurationupdates as shared_resultconfigurationupdates
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkGroupConfigurationUpdates:
    r"""The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified."""
    
    additional_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalConfiguration'), 'exclude': lambda f: f is None }})  
    bytes_scanned_cutoff_per_query: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BytesScannedCutoffPerQuery'), 'exclude': lambda f: f is None }})  
    customer_content_encryption_configuration: Optional[shared_customercontentencryptionconfiguration.CustomerContentEncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerContentEncryptionConfiguration'), 'exclude': lambda f: f is None }})
    r"""Specifies the KMS key that is used to encrypt the user's data stores in Athena."""  
    enable_minimum_encryption_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableMinimumEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    enforce_work_group_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnforceWorkGroupConfiguration'), 'exclude': lambda f: f is None }})  
    engine_version: Optional[shared_engineversion.EngineVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineVersion'), 'exclude': lambda f: f is None }})  
    execution_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionRole'), 'exclude': lambda f: f is None }})  
    publish_cloud_watch_metrics_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublishCloudWatchMetricsEnabled'), 'exclude': lambda f: f is None }})  
    remove_bytes_scanned_cutoff_per_query: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveBytesScannedCutoffPerQuery'), 'exclude': lambda f: f is None }})  
    remove_customer_content_encryption_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveCustomerContentEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    requester_pays_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequesterPaysEnabled'), 'exclude': lambda f: f is None }})  
    result_configuration_updates: Optional[shared_resultconfigurationupdates.ResultConfigurationUpdates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResultConfigurationUpdates'), 'exclude': lambda f: f is None }})  
    