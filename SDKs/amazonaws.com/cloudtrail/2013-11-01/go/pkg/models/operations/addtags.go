// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddTagsXAmzTargetEnum
type AddTagsXAmzTargetEnum string

const (
	AddTagsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101AddTags AddTagsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.AddTags"
)

func (e *AddTagsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.AddTags":
		*e = AddTagsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddTagsXAmzTargetEnum: %s", s)
	}
}

type AddTagsHeaders struct {
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AddTagsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddTagsRequest struct {
	Headers AddTagsHeaders
	Request shared.AddTagsRequest `request:"mediaType=application/json"`
}

type AddTagsResponse struct {
	// Success
	AddTagsResponse map[string]interface{}
	// ChannelNotFoundException
	ChannelNotFoundException interface{}
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InvalidTagParameterException
	InvalidTagParameterException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceTypeNotSupportedException
	ResourceTypeNotSupportedException interface{}
	// TagsLimitExceededException
	TagsLimitExceededException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
