<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PortfolioSimulation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Drift-weight Portfolio Rebalancing
     * 
     * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being never rebalanced (a.k.a. buy and hold).
     * 
     * References
     * * [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeightRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeightResponse
     */
	public function postPortfolioSimulationRebalancingDriftWeight(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeightRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeightResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/simulation/rebalancing/drift-weight');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeightResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioSimulationRebalancingDriftWeight200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingDriftWeight200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fixed-weight Portfolio Rebalancing
     * 
     * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward fixed weights at the beginning of each time period.
     * 
     * References
     * * [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)        
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeightRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeightResponse
     */
	public function postPortfolioSimulationRebalancingFixedWeight(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeightRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeightResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/simulation/rebalancing/fixed-weight');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeightResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioSimulationRebalancingFixedWeight200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingFixedWeight200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Random-weight Portfolio Rebalancing
     * 
     * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward random weights at the beginning of each time period.
     * 
     * References
     * * [R Stein, Not fooled by randomness: Using random portfolios to analyse investment funds, Investment Analysts Journal, 43:79, 1-15, DOI: 10.1080/10293523.2014.11082564](https://www.tandfonline.com/doi/abs/10.1080/10293523.2014.11082564)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeightRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeightResponse
     */
	public function postPortfolioSimulationRebalancingRandomWeight(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeightRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeightResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/simulation/rebalancing/random-weight');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeightResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioSimulationRebalancingRandomWeight200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioSimulationRebalancingRandomWeight200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}