<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudIdentitytoolkitAdminV2HashConfig - History information of the hash algorithm and key. Different accounts' passwords may be generated by different version.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudIdentitytoolkitAdminV2HashConfig
{
    /**
     * Output only. Different password hash algorithms used in Identity Toolkit.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum $algorithm
     */
	#[\JMS\Serializer\Annotation\SerializedName('algorithm')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum $algorithm = null;
    
    /**
     * Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
     * 
     * @var ?int $memoryCost
     */
	#[\JMS\Serializer\Annotation\SerializedName('memoryCost')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $memoryCost = null;
    
    /**
     * Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
     * 
     * @var ?int $rounds
     */
	#[\JMS\Serializer\Annotation\SerializedName('rounds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $rounds = null;
    
    /**
     * Output only. Non-printable character to be inserted between the salt and plain text password in base64.
     * 
     * @var ?string $saltSeparator
     */
	#[\JMS\Serializer\Annotation\SerializedName('saltSeparator')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $saltSeparator = null;
    
    /**
     * Output only. Signer key in base64.
     * 
     * @var ?string $signerKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('signerKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signerKey = null;
    
	public function __construct()
	{
		$this->algorithm = null;
		$this->memoryCost = null;
		$this->rounds = null;
		$this->saltSeparator = null;
		$this->signerKey = null;
	}
}
