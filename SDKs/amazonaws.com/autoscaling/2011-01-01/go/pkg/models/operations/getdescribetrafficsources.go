// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeTrafficSourcesActionEnum
type GETDescribeTrafficSourcesActionEnum string

const (
	GETDescribeTrafficSourcesActionEnumDescribeTrafficSources GETDescribeTrafficSourcesActionEnum = "DescribeTrafficSources"
)

func (e GETDescribeTrafficSourcesActionEnum) ToPointer() *GETDescribeTrafficSourcesActionEnum {
	return &e
}

func (e *GETDescribeTrafficSourcesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeTrafficSources":
		*e = GETDescribeTrafficSourcesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeTrafficSourcesActionEnum: %v", v)
	}
}

// GETDescribeTrafficSourcesVersionEnum
type GETDescribeTrafficSourcesVersionEnum string

const (
	GETDescribeTrafficSourcesVersionEnumTwoThousandAndEleven0101 GETDescribeTrafficSourcesVersionEnum = "2011-01-01"
)

func (e GETDescribeTrafficSourcesVersionEnum) ToPointer() *GETDescribeTrafficSourcesVersionEnum {
	return &e
}

func (e *GETDescribeTrafficSourcesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2011-01-01":
		*e = GETDescribeTrafficSourcesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeTrafficSourcesVersionEnum: %v", v)
	}
}

type GETDescribeTrafficSourcesRequest struct {
	Action GETDescribeTrafficSourcesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the Auto Scaling group.
	AutoScalingGroupName string `queryParam:"style=form,explode=true,name=AutoScalingGroupName"`
	// The maximum number of items to return with this call. The maximum value is <code>50</code>.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// The token for the next set of items to return. (You received this token from a previous call.)
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>The traffic source type that you want to describe.</p> <p>The following lists the valid values:</p> <ul> <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li> <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li> <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li> </ul>
	TrafficSourceType *string                              `queryParam:"style=form,explode=true,name=TrafficSourceType"`
	Version           GETDescribeTrafficSourcesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeTrafficSourcesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
