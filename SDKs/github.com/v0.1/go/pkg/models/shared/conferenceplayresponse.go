// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferencePlayResponseMessageEnum - Response message
type ConferencePlayResponseMessageEnum string

const (
	ConferencePlayResponseMessageEnumConferencePlayExecuted                 ConferencePlayResponseMessageEnum = "Conference Play Executed"
	ConferencePlayResponseMessageEnumConferenceNameParameterMustBePresent   ConferencePlayResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferencePlayResponseMessageEnumFilePathParameterMustBePresent         ConferencePlayResponseMessageEnum = "FilePath Parameter must be present"
	ConferencePlayResponseMessageEnumMemberIDParameterMustBePresent         ConferencePlayResponseMessageEnum = "MemberID Parameter must be present"
	ConferencePlayResponseMessageEnumConferencePlayFailedConferenceNotFound ConferencePlayResponseMessageEnum = "Conference Play Failed -- Conference not found"
	ConferencePlayResponseMessageEnumConferencePlayFailed                   ConferencePlayResponseMessageEnum = "Conference Play Failed"
)

func (e *ConferencePlayResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Conference Play Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "FilePath Parameter must be present":
		fallthrough
	case "MemberID Parameter must be present":
		fallthrough
	case "Conference Play Failed -- Conference not found":
		fallthrough
	case "Conference Play Failed":
		*e = ConferencePlayResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferencePlayResponseMessageEnum: %s", s)
	}
}

// ConferencePlayResponse - Response
type ConferencePlayResponse struct {
	// Response message
	Message ConferencePlayResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
