"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accepttranscript_enum as shared_accepttranscript_enum
from ..shared import transcript as shared_transcript
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetTranscriptByIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Rev.ai API Job Id"""  
    accept: Optional[shared_accepttranscript_enum.AcceptTranscriptEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""MIME type specifying the transcription output format"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTranscriptByID409ApplicationProblemPlusJSON:
    r"""Problem details object returned on errors"""
    
    allowed_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_values'), 'exclude': lambda f: f is None }})
    r"""Allowed values for this request"""  
    current_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_value'), 'exclude': lambda f: f is None }})
    r"""Value passed in given request"""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Human-readable explanation specific to this occurrence of the problem"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""URI that identifies the problem"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTranscriptByID406ApplicationProblemPlusJSON:
    r"""Problem details object returned on errors"""
    
    allowed_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_values'), 'exclude': lambda f: f is None }})
    r"""Allowed values for this request"""  
    current_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_value'), 'exclude': lambda f: f is None }})
    r"""Value passed in given request"""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Human-readable explanation specific to this occurrence of the problem"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""URI that identifies the problem"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTranscriptByID404ApplicationProblemPlusJSON:
    r"""Problem details object returned on errors"""
    
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""URI that identifies the problem"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTranscriptByID401ApplicationProblemPlusJSON:
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """
    
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    

@dataclasses.dataclass
class GetTranscriptByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_transcript_by_id_401_application_problem_plus_json_object: Optional[GetTranscriptByID401ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """  
    get_transcript_by_id_404_application_problem_plus_json_object: Optional[GetTranscriptByID404ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Job Not Found"""  
    get_transcript_by_id_406_application_problem_plus_json_object: Optional[GetTranscriptByID406ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Invalid Transcript Format"""  
    get_transcript_by_id_409_application_problem_plus_json_object: Optional[GetTranscriptByID409ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Invalid Job State
    ***
    In case of failure, more details can be found at [`GET /jobs/{id}`](#operation/GetJobById)
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    transcript: Optional[shared_transcript.Transcript] = dataclasses.field(default=None)
    r"""Rev.ai API Transcript
    ***
    Note: Transcript output format is required in the Accept header. Output can either be in Rev's JSON format or plaintext.
    """  
    transcript_text: Optional[str] = dataclasses.field(default=None)
    r"""Rev.ai API Transcript
    ***
    Note: Transcript output format is required in the Accept header. Output can either be in Rev's JSON format or plaintext.
    """  
    