// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateSubnetGroupXAmzTargetEnum
type UpdateSubnetGroupXAmzTargetEnum string

const (
	UpdateSubnetGroupXAmzTargetEnumAmazonMemoryDbUpdateSubnetGroup UpdateSubnetGroupXAmzTargetEnum = "AmazonMemoryDB.UpdateSubnetGroup"
)

func (e UpdateSubnetGroupXAmzTargetEnum) ToPointer() *UpdateSubnetGroupXAmzTargetEnum {
	return &e
}

func (e *UpdateSubnetGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonMemoryDB.UpdateSubnetGroup":
		*e = UpdateSubnetGroupXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubnetGroupXAmzTargetEnum: %v", v)
	}
}

type UpdateSubnetGroupRequest struct {
	UpdateSubnetGroupRequest shared.UpdateSubnetGroupRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               UpdateSubnetGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateSubnetGroupResponse struct {
	ContentType string
	// InvalidSubnet
	InvalidSubnet interface{}
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// SubnetGroupNotFoundFault
	SubnetGroupNotFoundFault interface{}
	// SubnetInUse
	SubnetInUse interface{}
	// SubnetNotAllowedFault
	SubnetNotAllowedFault interface{}
	// SubnetQuotaExceededFault
	SubnetQuotaExceededFault interface{}
	// Success
	UpdateSubnetGroupResponse *shared.UpdateSubnetGroupResponse
}
