// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type EmailResponseCodeEnum string

const (
	EmailResponseCodeEnumTwoThousand EmailResponseCodeEnum = "2000"
)

func (e *EmailResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = EmailResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailResponseCodeEnum: %s", s)
	}
}

type EmailResponseMessageEnum string

const (
	EmailResponseMessageEnumSuccess EmailResponseMessageEnum = "Success"
)

func (e *EmailResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = EmailResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailResponseMessageEnum: %s", s)
	}
}

type EmailResponseResultType string

const (
	EmailResponseResultTypeEmail        EmailResponseResultType = "Email"
	EmailResponseResultTypeUnknownEmail EmailResponseResultType = "UnknownEmail"
)

type EmailResponseResult struct {
	Email        *Email
	UnknownEmail *UnknownEmail

	Type EmailResponseResultType
}

func CreateEmailResponseResultEmail(email Email) EmailResponseResult {
	typ := EmailResponseResultTypeEmail

	return EmailResponseResult{
		Email: &email,
		Type:  typ,
	}
}

func CreateEmailResponseResultUnknownEmail(unknownEmail UnknownEmail) EmailResponseResult {
	typ := EmailResponseResultTypeUnknownEmail

	return EmailResponseResult{
		UnknownEmail: &unknownEmail,
		Type:         typ,
	}
}

func (u *EmailResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	email := new(Email)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&email); err == nil {
		u.Email = email
		u.Type = EmailResponseResultTypeEmail
		return nil
	}

	unknownEmail := new(UnknownEmail)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&unknownEmail); err == nil {
		u.UnknownEmail = unknownEmail
		u.Type = EmailResponseResultTypeUnknownEmail
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EmailResponseResult) MarshalJSON() ([]byte, error) {
	if u.Email != nil {
		return json.Marshal(u.Email)
	}

	if u.UnknownEmail != nil {
		return json.Marshal(u.UnknownEmail)
	}

	return nil, nil
}

// EmailResponse - Success
type EmailResponse struct {
	Code    EmailResponseCodeEnum    `json:"code"`
	Message EmailResponseMessageEnum `json:"message"`
	Result  EmailResponseResult      `json:"result"`
}
