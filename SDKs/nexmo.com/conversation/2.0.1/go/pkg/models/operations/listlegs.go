// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ListLegs200ApplicationJSONEmbeddedLegs struct {
	Embedded map[string]interface{} `json:"_embedded,omitempty"`
	Links    map[string]interface{} `json:"_links,omitempty"`
	// The unique identifier for this conversation
	ConversationUUID *string                `json:"conversation_uuid,omitempty"`
	From             map[string]interface{} `json:"from,omitempty"`
	// Time of leg end
	StartEnd *string `json:"start_end,omitempty"`
	// Time of leg start
	StartTime *string `json:"start_time,omitempty"`
	// Leg Status
	State *shared.LegStateEnum   `json:"state,omitempty"`
	To    map[string]interface{} `json:"to,omitempty"`
	// Channel type
	Type *shared.ChannelTypeEnum `json:"type,omitempty"`
	// The id of the leg. rtc_id and call_id are leg id
	UUID string `json:"uuid"`
}

// ListLegs200ApplicationJSONEmbedded - A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects
type ListLegs200ApplicationJSONEmbedded struct {
	Legs []ListLegs200ApplicationJSONEmbeddedLegs `json:"legs"`
}

type ListLegs200ApplicationJSONLinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type ListLegs200ApplicationJSONLinks struct {
	Self ListLegs200ApplicationJSONLinksSelf `json:"self"`
}

// ListLegs200ApplicationJSON - List Legs Response Payload Object
type ListLegs200ApplicationJSON struct {
	// A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects
	Embedded ListLegs200ApplicationJSONEmbedded `json:"_embedded"`
	Links    ListLegs200ApplicationJSONLinks    `json:"_links"`
	// The total number of records returned by your request.
	Count float64 `json:"count"`
	// The amount of records returned in this response
	PageSize float64 `json:"page_size"`
	// Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls.
	RecordIndex float64 `json:"record_index"`
}

type ListLegsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// List Legs Successfully
	ListLegs200ApplicationJSONObject *ListLegs200ApplicationJSON
}
