/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StreamingApplianceSnapshotConfig } from "./streamingappliancesnapshotconfig";
import { TopologyConfig } from "./topologyconfig";
import { Expose, Type } from "class-transformer";

/**
 * A task which initializes part of a streaming Dataflow job.
 */
export class StreamingSetupTask extends SpeakeasyBase {
  /**
   * The user has requested drain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drain" })
  drain?: boolean;

  /**
   * The TCP port on which the worker should listen for messages from other streaming computation workers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "receiveWorkPort" })
  receiveWorkPort?: number;

  /**
   * Streaming appliance snapshot configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "snapshotConfig" })
  @Type(() => StreamingApplianceSnapshotConfig)
  snapshotConfig?: StreamingApplianceSnapshotConfig;

  /**
   * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamingComputationTopology" })
  @Type(() => TopologyConfig)
  streamingComputationTopology?: TopologyConfig;

  /**
   * The TCP port used by the worker to communicate with the Dataflow worker harness.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workerHarnessPort" })
  workerHarnessPort?: number;
}
