<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Google Home Local API
 * 
 * This is an unofficial documentation of the local API used by the Home app to communicate with GH devices.
 * [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)
 * 
 * [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)
 * 
 * ## Getting Started
 * 
 * Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`
 * 
 * Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.
 * 
 * GET requests are simple, in the browser kind.  
 * POST requests need to set the header (when there's a body): `content-type: application/json`
 * 
 * ## Authentication
 * 
 * Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.
 * 
 * There are 3 kinds of tokens involved here:
 * 
 * ### Local Authorization Token
 * This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.)
 * ##### Get this token
 * - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f).
 * - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.
 * 
 * ### Access Token
 * This is a standard google oauth2 access token. It is in the form `ya29.***`.
 * This gives access to the Google Home Foyer API. These expire in an hour.
 * Use this to get the homegraph (and then the local authorization token above).
 * ##### Get this token
 * To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist.
 * Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).
 * 
 * ### Master Token
 * This is in the form `aas_et/***` and can be used to request access tokens.
 * ##### Get this token
 * The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.
 * 
 * ## Example
 * 
 * Here's the whole flow from just a pair of username/password to using the local API.
 * 
 * Prerequisites:
 * - [grpcurl](https://github.com/fullstorydev/grpcurl)
 * - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)
 * 
 * ### 1. Get an access token with the script
 * - Download get_tokens.py
 * - Fill in username and password
 * ```sh
 * python3 get_tokens.py
 * # Note down the access token printed.
 * ```
 * 
 * ### 2. Use the access token and get home graph
 * - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken
 * - This will give a list of all devices and their local auth tokens
 * ```sh
 * ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \
 * 	-import-path /path/to/protos \
 * 	-proto /path/to/protos/google/internal/home/foyer/v1.proto \
 * 	googlehomefoyer-pa.googleapis.com:443 \
 * 	google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}'
 * # Note down the local auth token for the device you want.
 * ```
 * 
 * ### 3. Make the call to the local device using the local auth token
 * ```sh
 * curl -H "cast-local-authorization-token: LOCAL_AUTH_TOKEN" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status
 * ```
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://example.com/setup',
	];
  	
    /**
     * This folder contains all endpoints related to Assistant's tasks like Do Not Disturb, Alarms and Timers, Accessibility and equalizer.
     * 
     * @var Assistant $$assistant
     */
	public Assistant $assistant;
	
    /**
     * This folder contains Bluetooth related endpoints.
     * 
     * @var Bluetooth $$bluetooth
     */
	public Bluetooth $bluetooth;
	
    /**
     * Endpoints in this folder give information about the device.
     * 
     * @var DeviceInfo $$deviceInfo
     */
	public DeviceInfo $deviceInfo;
	
    /**
     * This folder consists of all endpoints to modify and control the device.
     * 
     * @var DeviceSettings $$deviceSettings
     */
	public DeviceSettings $deviceSettings;
	
    /**
     * This folder contains a list of static files stored in Home.
     * 
     * @var StaticFiles $$staticFiles
     */
	public StaticFiles $staticFiles;
	
    /**
     * This folder contains Wi-Fi related endpoints.
     * 
     * @var Wifi $$wifi
     */
	public Wifi $wifi;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->assistant = new Assistant(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bluetooth = new Bluetooth(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->deviceInfo = new DeviceInfo(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->deviceSettings = new DeviceSettings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->staticFiles = new StaticFiles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->wifi = new Wifi(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}