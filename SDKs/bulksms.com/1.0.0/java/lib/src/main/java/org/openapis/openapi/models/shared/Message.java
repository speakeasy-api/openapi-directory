/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Message - The message detail
 */
public class Message {
    /**
     * The content of the message
     */
    @JsonProperty("body")
    public Object body;
    public Message withBody(Object body) {
        this.body = body;
        return this;
    }
    
    /**
     * The cost of the message (in credits).   Note that this field does not have a value in the submission response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditCost")
    public Float creditCost;
    public Message withCreditCost(Float creditCost) {
        this.creditCost = creditCost;
        return this;
    }
    
    /**
     * The type of the content.  See the `encoding` field for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoding")
    public MessageEncodingEnum encoding;
    public Message withEncoding(MessageEncodingEnum encoding) {
        this.encoding = encoding;
        return this;
    }
    
    /**
     * The address part of the sender id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public String from;
    public Message withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * A unique identifier that is assigned when the message is created.
     */
    @JsonProperty("id")
    public String id;
    public Message withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * See the `messageClass` field for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageClass")
    public Integer messageClass;
    public Message withMessageClass(Integer messageClass) {
        this.messageClass = messageClass;
        return this;
    }
    
    /**
     * The number of parts.  If this is a concatenated message, the number of parts will be more than 1.  Note that this field does not have a value in the submission response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfParts")
    public Integer numberOfParts;
    public Message withNumberOfParts(Integer numberOfParts) {
        this.numberOfParts = numberOfParts;
        return this;
    }
    
    /**
     * See the `protocolId` field for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocolId")
    public Integer protocolId;
    public Message withProtocolId(Integer protocolId) {
        this.protocolId = protocolId;
        return this;
    }
    
    /**
     * This field has a value only if the type is RECEIVED.
     * With SMS messages, it is not possible to link a reply directly with a specific sent message.  However, if you specified `REPLIABLE` in the `from` property, BulkSMS will link any reply to the most recent message sent to a given phone number.
     * 
     * The `relatedSentMessageId` property keeps the information about this link.
     * 
     * You can use this property to derive an implicit conversation from a set of messages.
     *   - If a received reply message has a `relatedSentMessageId`, you can use it to retrieve the last message that was sent before the reply was received.
     *   - If you have the `id` of the sent message and you want all the received messages that relate to it, you can use the List Related Messages Operation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedSentMessageId")
    public String relatedSentMessageId;
    public Message withRelatedSentMessageId(String relatedSentMessageId) {
        this.relatedSentMessageId = relatedSentMessageId;
        return this;
    }
    
    /**
     * The status of the message
     */
    @JsonProperty("status")
    public MessageStatus status;
    public Message withStatus(MessageStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Identifies the submission.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submission")
    public MessageSubmission submission;
    public Message withSubmission(MessageSubmission submission) {
        this.submission = submission;
        return this;
    }
    
    /**
     * The phone number of the recipient
     */
    @JsonProperty("to")
    public String to;
    public Message withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * The message direction
     */
    @JsonProperty("type")
    public MessageTypeEnum type;
    public Message withType(MessageTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * This is the value you supplied in the `userSuppliedId` field.
     * Has a value only if the `type` is SENT.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userSuppliedId")
    public String userSuppliedId;
    public Message withUserSuppliedId(String userSuppliedId) {
        this.userSuppliedId = userSuppliedId;
        return this;
    }
    
}
