// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceConditionStateEnum - state of the condition.
type ResourceConditionStateEnum string

const (
	ResourceConditionStateEnumStateUnspecified ResourceConditionStateEnum = "STATE_UNSPECIFIED"
	ResourceConditionStateEnumStateTrue        ResourceConditionStateEnum = "STATE_TRUE"
	ResourceConditionStateEnumStateFalse       ResourceConditionStateEnum = "STATE_FALSE"
	ResourceConditionStateEnumStateUnknown     ResourceConditionStateEnum = "STATE_UNKNOWN"
)

func (e ResourceConditionStateEnum) ToPointer() *ResourceConditionStateEnum {
	return &e
}

func (e *ResourceConditionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "STATE_TRUE":
		fallthrough
	case "STATE_FALSE":
		fallthrough
	case "STATE_UNKNOWN":
		*e = ResourceConditionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceConditionStateEnum: %v", v)
	}
}

// ResourceCondition - ResourceCondition provides a standard mechanism for higher-level status reporting from controller.
type ResourceCondition struct {
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Machine-readable message indicating details about last transition.
	Reason *string `json:"reason,omitempty"`
	// state of the condition.
	State *ResourceConditionStateEnum `json:"state,omitempty"`
	// Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
	Type *string `json:"type,omitempty"`
}
