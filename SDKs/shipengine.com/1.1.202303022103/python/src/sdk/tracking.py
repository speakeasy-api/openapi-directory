"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tracking:
    r"""[Track packages](https://www.shipengine.com/docs/tracking/) across any of our 20+ supported carrier accounts and create tracking events to keep your customers up-to-date. Easily integrate real-time tracking information for shipments into your app, email, or SMS.
    https://www.shipengine.com/docs/tracking/ - Learn how to use ShipEngine to track any package with a carrier and a tracking number
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_tracking_log(self, request: operations.GetTrackingLogRequest) -> operations.GetTrackingLogResponse:
        r"""Get Tracking Information
        Retrieve package tracking information
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/tracking'
        
        query_params = utils.get_query_params(operations.GetTrackingLogRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrackingLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTrackingLogResponseBody])
                res.get_tracking_log_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def start_tracking(self, request: operations.StartTrackingRequest) -> operations.StartTrackingResponse:
        r"""Start Tracking a Package
        Allows you to subscribe to tracking updates for a package. You specify the carrier_code and tracking_number of the package,
        and receive notifications via webhooks whenever the shipping status changes.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/tracking/start'
        
        query_params = utils.get_query_params(operations.StartTrackingRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartTrackingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def stop_tracking(self, request: operations.StopTrackingRequest) -> operations.StopTrackingResponse:
        r"""Stop Tracking a Package
        Unsubscribe from tracking updates for a package.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/tracking/stop'
        
        query_params = utils.get_query_params(operations.StopTrackingRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StopTrackingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    