<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Data Fusion instance in the specified project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateResponse
     */
	public function datafusionProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates DNS peering on the given resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateResponse
     */
	public function datafusionProjectsLocationsInstancesDnsPeeringsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/dnsPeerings', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dnsPeering", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dnsPeering = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DnsPeering', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DNS peerings for a given resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListResponse
     */
	public function datafusionProjectsLocationsInstancesDnsPeeringsList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/dnsPeerings', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesDnsPeeringsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDnsPeeringsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDnsPeeringsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Data Fusion instances in the specified project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListResponse
     */
	public function datafusionProjectsLocationsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyResponse
     */
	public function datafusionProjectsLocationsInstancesNamespacesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List namespaces in a given instance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListResponse
     */
	public function datafusionProjectsLocationsInstancesNamespacesList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/namespaces', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNamespacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNamespacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyResponse
     */
	public function datafusionProjectsLocationsInstancesNamespacesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsResponse
     */
	public function datafusionProjectsLocationsInstancesNamespacesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesNamespacesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a single Data Fusion instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchResponse
     */
	public function datafusionProjectsLocationsInstancesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restart a single Data Fusion instance. At the end of an operation instance is fully restarted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartResponse
     */
	public function datafusionProjectsLocationsInstancesRestart(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:restart', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesRestartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrade a single Data Fusion instance. At the end of an operation instance is fully upgraded.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeResponse
     */
	public function datafusionProjectsLocationsInstancesUpgrade(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:upgrade', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsInstancesUpgradeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListResponse
     */
	public function datafusionProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelResponse
     */
	public function datafusionProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteResponse
     */
	public function datafusionProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetResponse
     */
	public function datafusionProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListResponse
     */
	public function datafusionProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove IAM policy that is currently set on the given resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyResponse
     */
	public function datafusionProjectsLocationsRemoveIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:removeIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsRemoveIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeIamPolicyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists possible versions for Data Fusion instances in the specified project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListResponse
     */
	public function datafusionProjectsLocationsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatafusionProjectsLocationsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailableVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAvailableVersionsResponse', 'json');
            }
        }

        return $response;
    }
}