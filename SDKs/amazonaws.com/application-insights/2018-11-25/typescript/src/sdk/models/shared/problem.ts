/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FeedbackValueEnum } from "./feedbackvalueenum";
import { SeverityLevelEnum } from "./severitylevelenum";
import { StatusEnum } from "./statusenum";
import { Expose, Transform } from "class-transformer";

/**
 * Describes a problem that is detected by correlating observations.
 */
export class Problem extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AffectedResource" })
  affectedResource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Feedback" })
  feedback?: Record<string, FeedbackValueEnum>;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Insights" })
  insights?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastRecurrenceTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastRecurrenceTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "RecurringCount" })
  recurringCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceGroupName" })
  resourceGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SeverityLevel" })
  severityLevel?: SeverityLevelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: StatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Title" })
  title?: string;
}
