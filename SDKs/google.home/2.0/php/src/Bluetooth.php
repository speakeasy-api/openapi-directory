<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bluetooth 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change Discoverability
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For Part 1 only**
     * 
     * This enables/disables Home's bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ChangeDiscoverabilityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeDiscoverabilityResponse
     */
	public function changeDiscoverability(
        \OpenAPI\OpenAPI\Models\Shared\ChangeDiscoverabilityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeDiscoverabilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/discovery');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeDiscoverabilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->changeDiscoverability200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Forget paired device
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For both parts**
     * 
     * This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ForgetpaireddeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForgetpaireddeviceResponse
     */
	public function forgetpaireddevice(
        \OpenAPI\OpenAPI\Models\Shared\ForgetpaireddeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForgetpaireddeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/bond');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForgetpaireddeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->forgetpaireddevice200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Paired Devices
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For both parts**
     * 
     * This gives a list of all paired or 'bonded' devices. The response field names are self-descriptive.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPairedDevicesResponse
     */
	public function getPairedDevices(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPairedDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/get_bonded');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPairedDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example111s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example111>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Scan Results
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For Part 2 only**
     * 
     * This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.
     * 
     * `rssi` is signal strength, `name` is name, `mac_address` is mac address.  
     * `device_class` and `device_type` are bluetooth codes.  
     * 
     * The Home app only lists those devices with `expected_profiles` > 0. Basically, the device should function as a speaker.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScanResultsResponse
     */
	public function getScanResults(
    ): \OpenAPI\OpenAPI\Models\Operations\GetScanResultsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/scan_results');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScanResultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example112s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example112>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pair with Speaker
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For Part 2 only**
     * 
     * This pairs with other bluetooth speakers by mac address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PairwithSpeakerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PairwithSpeakerResponse
     */
	public function pairwithSpeaker(
        \OpenAPI\OpenAPI\Models\Shared\PairwithSpeakerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PairwithSpeakerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/connect');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PairwithSpeakerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->pairwithSpeaker200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Scan for devices
     * 
     * *See note for Bluetooth under `/setup/bluetooth/status`*
     * 
     * **For Part 2 only**
     * 
     * This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for `timeout` seconds.  
     * To get the scan results, see /setup/bluetooth/scan_results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScanfordevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScanfordevicesResponse
     */
	public function scanfordevices(
        \OpenAPI\OpenAPI\Models\Shared\ScanfordevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScanfordevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/scan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScanfordevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->scanfordevices200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Status
     * 
     * > **There are 2 parts of Bluetooth.**
     * >
     * > *Part 1*: Devices like phones connect to Home and play audio through Home.  
     * > For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker.
     * >
     * > *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers.
     * > For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers.
     * >
     * > The other endpoints are common for both parts.
     * 
     * 
     * **For both parts**
     * 
     * This gives the status of all bluetooth things.
     * - Not sure what `audio_mode` is.
     * - `discovery_enabled` states whether Home is discoverable. (**Part 1**)
     * - `connecting_devices` is a list of all media sources (like phones) connected to Home. (**Part 1**)
     * - `scanning_enabled` states whether Home scanning for other bluetooth speakers/devices. (**Part 2**)
     * - `connected_devices` is a list of all speakers connected to Home. (**Part 2**)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\StatusResponse
     */
	public function status(
    ): \OpenAPI\OpenAPI\Models\Operations\StatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bluetooth/status');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example110 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example110', 'json');
            }
        }

        return $response;
    }
}