/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CompanionSetting } from "./companionsetting";
import { ObaIcon } from "./obaicon";
import { SkippableSetting } from "./skippablesetting";
import { TranscodeSetting } from "./transcodesetting";
import { Expose, Type } from "class-transformer";

/**
 * Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.
 */
export enum VideoSettingsOrientationEnum {
  Any = "ANY",
  Landscape = "LANDSCAPE",
  Portrait = "PORTRAIT",
}

/**
 * Video Settings
 */
export class VideoSettings extends SpeakeasyBase {
  /**
   * Companion Settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companionSettings" })
  @Type(() => CompanionSetting)
  companionSettings?: CompanionSetting;

  /**
   * Duration of a video placement in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durationSeconds" })
  durationSeconds?: number;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoSettings".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Whether OBA icons are enabled for this placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "obaEnabled" })
  obaEnabled?: boolean;

  /**
   * Online Behavioral Advertiser icon.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "obaSettings" })
  @Type(() => ObaIcon)
  obaSettings?: ObaIcon;

  /**
   * Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orientation" })
  orientation?: VideoSettingsOrientationEnum;

  /**
   * Publisher specification ID of a video placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publisherSpecificationId" })
  publisherSpecificationId?: string;

  /**
   * Skippable Settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skippableSettings" })
  @Type(() => SkippableSetting)
  skippableSettings?: SkippableSetting;

  /**
   * Transcode Settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transcodeSettings" })
  @Type(() => TranscodeSetting)
  transcodeSettings?: TranscodeSetting;
}
