"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import capacityproviderstrategyitem as shared_capacityproviderstrategyitem
from ..shared import deploymentconfiguration as shared_deploymentconfiguration
from ..shared import loadbalancer as shared_loadbalancer
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import placementconstraint as shared_placementconstraint
from ..shared import placementstrategy as shared_placementstrategy
from ..shared import propagatetags_enum as shared_propagatetags_enum
from ..shared import serviceconnectconfiguration as shared_serviceconnectconfiguration
from ..shared import serviceregistry as shared_serviceregistry
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateServiceRequest:
    
    service: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service') }})  
    capacity_provider_strategy: Optional[list[shared_capacityproviderstrategyitem.CapacityProviderStrategyItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacityProviderStrategy'), 'exclude': lambda f: f is None }})  
    cluster: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cluster'), 'exclude': lambda f: f is None }})  
    deployment_configuration: Optional[shared_deploymentconfiguration.DeploymentConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfiguration'), 'exclude': lambda f: f is None }})  
    desired_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desiredCount'), 'exclude': lambda f: f is None }})  
    enable_ecs_managed_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableECSManagedTags'), 'exclude': lambda f: f is None }})  
    enable_execute_command: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableExecuteCommand'), 'exclude': lambda f: f is None }})  
    force_new_deployment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forceNewDeployment'), 'exclude': lambda f: f is None }})  
    health_check_grace_period_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthCheckGracePeriodSeconds'), 'exclude': lambda f: f is None }})  
    load_balancers: Optional[list[shared_loadbalancer.LoadBalancer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadBalancers'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_networkconfiguration.NetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfiguration'), 'exclude': lambda f: f is None }})  
    placement_constraints: Optional[list[shared_placementconstraint.PlacementConstraint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementConstraints'), 'exclude': lambda f: f is None }})  
    placement_strategy: Optional[list[shared_placementstrategy.PlacementStrategy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementStrategy'), 'exclude': lambda f: f is None }})  
    platform_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformVersion'), 'exclude': lambda f: f is None }})  
    propagate_tags: Optional[shared_propagatetags_enum.PropagateTagsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propagateTags'), 'exclude': lambda f: f is None }})  
    service_connect_configuration: Optional[shared_serviceconnectconfiguration.ServiceConnectConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceConnectConfiguration'), 'exclude': lambda f: f is None }})  
    service_registries: Optional[list[shared_serviceregistry.ServiceRegistry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRegistries'), 'exclude': lambda f: f is None }})  
    task_definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskDefinition'), 'exclude': lambda f: f is None }})  
    