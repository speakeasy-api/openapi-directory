"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import monitoringappspecification as shared_monitoringappspecification
from ..shared import monitoringbaselineconfig as shared_monitoringbaselineconfig
from ..shared import monitoringinput as shared_monitoringinput
from ..shared import monitoringoutputconfig as shared_monitoringoutputconfig
from ..shared import monitoringresources as shared_monitoringresources
from ..shared import monitoringstoppingcondition as shared_monitoringstoppingcondition
from ..shared import networkconfig as shared_networkconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MonitoringJobDefinition:
    r"""Defines the monitoring job."""
    
    monitoring_app_specification: shared_monitoringappspecification.MonitoringAppSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringAppSpecification') }})  
    monitoring_inputs: list[shared_monitoringinput.MonitoringInput] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringInputs') }})  
    monitoring_output_config: shared_monitoringoutputconfig.MonitoringOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringOutputConfig') }})  
    monitoring_resources: shared_monitoringresources.MonitoringResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringResources') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    baseline_config: Optional[shared_monitoringbaselineconfig.MonitoringBaselineConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaselineConfig'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    network_config: Optional[shared_networkconfig.NetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfig'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_monitoringstoppingcondition.MonitoringStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition'), 'exclude': lambda f: f is None }})  
    