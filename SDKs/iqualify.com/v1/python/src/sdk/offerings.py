"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Offerings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_offerings(self) -> operations.GetOfferingsResponse:
        r"""Find current, past and future offerings
        Responds with all offerings for your organisation.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offerings'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingMetadataResponse]])
                res.offering_metadata_responses = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_current(self) -> operations.GetOfferingsCurrentResponse:
        r"""Find active offerings
        Responds with active offerings for your organisation.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offerings/current'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingMetadataResponse]])
                res.offering_metadata_responses = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_future(self) -> operations.GetOfferingsFutureResponse:
        r"""Find scheduled offerings
        Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today's date (inclusive).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offerings/future'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsFutureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingMetadataResponse]])
                res.offering_metadata_responses = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_info_text_pattern_(self, request: operations.GetOfferingsInfoTextPatternRequest) -> operations.GetOfferingsInfoTextPatternResponse:
        r"""Find offerings where info field matches the specified textPattern
        Find offerings where info field matches the specified text pattern.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsInfoTextPatternRequest, base_url, '/offerings/info/{textPattern}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsInfoTextPatternResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PortfolioActivations]])
                res.portfolio_activations = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_past(self) -> operations.GetOfferingsPastResponse:
        r"""Find past offerings
        Responds with past offerings for your organisation.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offerings/past'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsPastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingMetadataResponse]])
                res.offering_metadata_responses = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_(self, request: operations.GetOfferingsOfferingIDRequest) -> operations.GetOfferingsOfferingIDResponse:
        r"""Find offering by ID
        Responds with an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDRequest, base_url, '/offerings/{offeringId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferingMetadataResponse])
                res.offering_metadata_response = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_offerings_offering_id_(self, request: operations.PatchOfferingsOfferingIDRequest) -> operations.PatchOfferingsOfferingIDResponse:
        r"""Update offering
        Updates the offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOfferingsOfferingIDRequest, base_url, '/offerings/{offeringId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "offering", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOfferingsOfferingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferingMetadataResponse])
                res.offering_metadata_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_offerings(self, request: shared.OfferingRequired) -> operations.PostOfferingsResponse:
        r"""Create offering
        Creates a new offering.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offerings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOfferingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferingMetadataResponse])
                res.offering_metadata_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    