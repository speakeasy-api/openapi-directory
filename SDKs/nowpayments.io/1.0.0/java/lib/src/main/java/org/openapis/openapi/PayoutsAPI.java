/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class PayoutsAPI {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PayoutsAPI(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Verify payout
     * This method is required to verify payouts by using your 2fa code.  
     * You\u2019ll have 10 attempts to verify the payout. If it is not verified after 10 attempts, the payout will remain in \u2018creating\u2019 status.  
     * Payout will be processed only when it is verified.
     * 
     * Make sure to have your 2fa authentication enabled in your NOWPayments Account (in Account Settings).  
     * When 2fa is disabled, the code automatically goes to your registration email.  
     * The code sent by email is valid for one hour.
     * 
     * Next is a description of the required request fields:
     * 
     * - :batch-withdrawal-id - payout id you received in `2. Create payout` method
     * - verification_code - 2fa code you received with your Google Auth app or via email
     *     
     * 
     * In order to establish an automatic verification of payouts, you should switch 2FA through the application.  
     * There are several libraries for different frameworks aimed on generating a 2FA codes based on a secret key from your account settings.  
     * e.g: Speakeasy for JavaScript.  
     * We do not recommend to change any default settings.  
     * 
     * ```
     * const 2faVerificationCode = speakeasy.totp({
     *       your_2fa_secret_key,
     *       encoding: 'base32',
     * })
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.VerifyPayoutResponse verifyPayout(org.openapis.openapi.models.operations.VerifyPayoutRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.VerifyPayoutRequest.class, baseUrl, "/v1/payout/{withdrawals-id}/verify", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.VerifyPayoutResponse res = new org.openapis.openapi.models.operations.VerifyPayoutResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}