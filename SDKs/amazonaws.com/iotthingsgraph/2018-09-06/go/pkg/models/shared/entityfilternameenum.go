// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityFilterNameEnum string

const (
	EntityFilterNameEnumName               EntityFilterNameEnum = "NAME"
	EntityFilterNameEnumNamespace          EntityFilterNameEnum = "NAMESPACE"
	EntityFilterNameEnumSemanticTypePath   EntityFilterNameEnum = "SEMANTIC_TYPE_PATH"
	EntityFilterNameEnumReferencedEntityID EntityFilterNameEnum = "REFERENCED_ENTITY_ID"
)

func (e EntityFilterNameEnum) ToPointer() *EntityFilterNameEnum {
	return &e
}

func (e *EntityFilterNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		fallthrough
	case "NAMESPACE":
		fallthrough
	case "SEMANTIC_TYPE_PATH":
		fallthrough
	case "REFERENCED_ENTITY_ID":
		*e = EntityFilterNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityFilterNameEnum: %v", v)
	}
}
