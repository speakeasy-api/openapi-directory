// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KeySpecEnum string

const (
	KeySpecEnumRsa2048          KeySpecEnum = "RSA_2048"
	KeySpecEnumRsa3072          KeySpecEnum = "RSA_3072"
	KeySpecEnumRsa4096          KeySpecEnum = "RSA_4096"
	KeySpecEnumEccNistP256      KeySpecEnum = "ECC_NIST_P256"
	KeySpecEnumEccNistP384      KeySpecEnum = "ECC_NIST_P384"
	KeySpecEnumEccNistP521      KeySpecEnum = "ECC_NIST_P521"
	KeySpecEnumEccSecgP256K1    KeySpecEnum = "ECC_SECG_P256K1"
	KeySpecEnumSymmetricDefault KeySpecEnum = "SYMMETRIC_DEFAULT"
	KeySpecEnumHmac224          KeySpecEnum = "HMAC_224"
	KeySpecEnumHmac256          KeySpecEnum = "HMAC_256"
	KeySpecEnumHmac384          KeySpecEnum = "HMAC_384"
	KeySpecEnumHmac512          KeySpecEnum = "HMAC_512"
	KeySpecEnumSm2              KeySpecEnum = "SM2"
)

func (e KeySpecEnum) ToPointer() *KeySpecEnum {
	return &e
}

func (e *KeySpecEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RSA_2048":
		fallthrough
	case "RSA_3072":
		fallthrough
	case "RSA_4096":
		fallthrough
	case "ECC_NIST_P256":
		fallthrough
	case "ECC_NIST_P384":
		fallthrough
	case "ECC_NIST_P521":
		fallthrough
	case "ECC_SECG_P256K1":
		fallthrough
	case "SYMMETRIC_DEFAULT":
		fallthrough
	case "HMAC_224":
		fallthrough
	case "HMAC_256":
		fallthrough
	case "HMAC_384":
		fallthrough
	case "HMAC_512":
		fallthrough
	case "SM2":
		*e = KeySpecEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeySpecEnum: %v", v)
	}
}
