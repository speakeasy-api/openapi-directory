"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryption as shared_encryption
from ..shared import segmentsettings as shared_segmentsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MuxStream:
    r"""Multiplexing settings for output stream."""
    
    container: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('container'), 'exclude': lambda f: f is None }})
    r"""The container format. The default is `\\"mp4\\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\\".m4s\\"` - 'mp4' - 'vtt'"""  
    elementary_streams: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elementaryStreams'), 'exclude': lambda f: f is None }})
    r"""List of `ElementaryStream.key`s multiplexed in this stream."""  
    encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption'), 'exclude': lambda f: f is None }})
    r"""Encryption settings."""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName'), 'exclude': lambda f: f is None }})
    r"""The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\\"mux_stream0000000123.ts\\"`."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\\".m3u8\\"` extension suffix."""  
    segment_settings: Optional[shared_segmentsettings.SegmentSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentSettings'), 'exclude': lambda f: f is None }})
    r"""Segment settings for `\\"ts\\"`, `\\"fmp4\\"` and `\\"vtt\\"`."""  
    