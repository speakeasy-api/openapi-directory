// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AggregatedGetStatisticsListGroupByEnum - The temporal entity you want to group by ("week"/"month"). If unspecified is "day".
type AggregatedGetStatisticsListGroupByEnum string

const (
	AggregatedGetStatisticsListGroupByEnumWeek  AggregatedGetStatisticsListGroupByEnum = "week"
	AggregatedGetStatisticsListGroupByEnumMonth AggregatedGetStatisticsListGroupByEnum = "month"
)

func (e *AggregatedGetStatisticsListGroupByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "week":
		fallthrough
	case "month":
		*e = AggregatedGetStatisticsListGroupByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregatedGetStatisticsListGroupByEnum: %s", s)
	}
}

// AggregatedGetStatisticsListTimeFrameEnum - Timeframe of the request. See list at $timeframeList
type AggregatedGetStatisticsListTimeFrameEnum string

const (
	AggregatedGetStatisticsListTimeFrameEnumToday         AggregatedGetStatisticsListTimeFrameEnum = "today"
	AggregatedGetStatisticsListTimeFrameEnumYesterday     AggregatedGetStatisticsListTimeFrameEnum = "yesterday"
	AggregatedGetStatisticsListTimeFrameEnumLast7         AggregatedGetStatisticsListTimeFrameEnum = "last7"
	AggregatedGetStatisticsListTimeFrameEnumLast30        AggregatedGetStatisticsListTimeFrameEnum = "last30"
	AggregatedGetStatisticsListTimeFrameEnumLastmonth     AggregatedGetStatisticsListTimeFrameEnum = "lastmonth"
	AggregatedGetStatisticsListTimeFrameEnumCurrentmonth  AggregatedGetStatisticsListTimeFrameEnum = "currentmonth"
	AggregatedGetStatisticsListTimeFrameEnumPreviousmonth AggregatedGetStatisticsListTimeFrameEnum = "previousmonth"
	AggregatedGetStatisticsListTimeFrameEnumLast90        AggregatedGetStatisticsListTimeFrameEnum = "last90"
	AggregatedGetStatisticsListTimeFrameEnumLast120       AggregatedGetStatisticsListTimeFrameEnum = "last120"
	AggregatedGetStatisticsListTimeFrameEnumLast180       AggregatedGetStatisticsListTimeFrameEnum = "last180"
	AggregatedGetStatisticsListTimeFrameEnumLast12months  AggregatedGetStatisticsListTimeFrameEnum = "last12months"
	AggregatedGetStatisticsListTimeFrameEnumLastyear      AggregatedGetStatisticsListTimeFrameEnum = "lastyear"
	AggregatedGetStatisticsListTimeFrameEnumCurrentyear   AggregatedGetStatisticsListTimeFrameEnum = "currentyear"
	AggregatedGetStatisticsListTimeFrameEnumBeginning     AggregatedGetStatisticsListTimeFrameEnum = "beginning"
	AggregatedGetStatisticsListTimeFrameEnumCustom        AggregatedGetStatisticsListTimeFrameEnum = "custom"
)

func (e *AggregatedGetStatisticsListTimeFrameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "today":
		fallthrough
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "last12months":
		fallthrough
	case "lastyear":
		fallthrough
	case "currentyear":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = AggregatedGetStatisticsListTimeFrameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregatedGetStatisticsListTimeFrameEnum: %s", s)
	}
}

type AggregatedGetStatisticsListQueryParams struct {
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// The temporal entity you want to group by ("week"/"month"). If unspecified is "day".
	GroupBy *AggregatedGetStatisticsListGroupByEnum `queryParam:"style=form,explode=true,name=groupBy"`
	// Timeframe of the request. See list at $timeframeList
	TimeFrame AggregatedGetStatisticsListTimeFrameEnum `queryParam:"style=form,explode=true,name=timeFrame"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
}

type AggregatedGetStatisticsListRequest struct {
	QueryParams AggregatedGetStatisticsListQueryParams
}

type AggregatedGetStatisticsListResponse struct {
	APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult *shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult
	ContentType                                                          string
	StatusCode                                                           int
	RawResponse                                                          *http.Response
}
