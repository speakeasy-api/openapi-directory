/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PayoutSummaryResponseV3 - Details of Payout
 */
public class PayoutSummaryResponseV3 {
    @JsonProperty("acceptedPayments")
    public AcceptedPaymentV3[] acceptedPayments;

    public PayoutSummaryResponseV3 withAcceptedPayments(AcceptedPaymentV3[] acceptedPayments) {
        this.acceptedPayments = acceptedPayments;
        return this;
    }
    
    @JsonProperty("accounts")
    public SourceAccountV3[] accounts;

    public PayoutSummaryResponseV3 withAccounts(SourceAccountV3[] accounts) {
        this.accounts = accounts;
        return this;
    }
    
    @JsonProperty("fxSummaries")
    public QuoteFxSummaryV3[] fxSummaries;

    public PayoutSummaryResponseV3 withFxSummaries(QuoteFxSummaryV3[] fxSummaries) {
        this.fxSummaries = fxSummaries;
        return this;
    }
    
    /**
     * The number of payments that were accepted in the payout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsAccepted")
    public Long paymentsAccepted;

    public PayoutSummaryResponseV3 withPaymentsAccepted(Long paymentsAccepted) {
        this.paymentsAccepted = paymentsAccepted;
        return this;
    }
    
    /**
     * The number of payments that were rejected in the payout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsRejected")
    public Long paymentsRejected;

    public PayoutSummaryResponseV3 withPaymentsRejected(Long paymentsRejected) {
        this.paymentsRejected = paymentsRejected;
        return this;
    }
    
    /**
     * The number of payments that were submitted in the payout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsSubmitted")
    public Long paymentsSubmitted;

    public PayoutSummaryResponseV3 withPaymentsSubmitted(Long paymentsSubmitted) {
        this.paymentsSubmitted = paymentsSubmitted;
        return this;
    }
    
    /**
     * The number of payments that were withdrawn in the payout
     */
    @JsonProperty("paymentsWithdrawn")
    public Long paymentsWithdrawn;

    public PayoutSummaryResponseV3 withPaymentsWithdrawn(Long paymentsWithdrawn) {
        this.paymentsWithdrawn = paymentsWithdrawn;
        return this;
    }
    
    /**
     * The id of the payout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutId")
    public String payoutId;

    public PayoutSummaryResponseV3 withPayoutId(String payoutId) {
        this.payoutId = payoutId;
        return this;
    }
    
    @JsonProperty("rejectedPayments")
    public RejectedPaymentV3[] rejectedPayments;

    public PayoutSummaryResponseV3 withRejectedPayments(RejectedPaymentV3[] rejectedPayments) {
        this.rejectedPayments = rejectedPayments;
        return this;
    }
    
    /**
     * Details relating to a payout that was executed via a schedule or is still waiting to be executed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public PayoutScheduleV3 schedule;

    public PayoutSummaryResponseV3 withSchedule(PayoutScheduleV3 schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * The status of the payout (one of SUBMITTED, ACCEPTED, REJECTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, WITHDRAWN)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public PayoutSummaryResponseV3 withStatus(String status) {
        this.status = status;
        return this;
    }
    
    public PayoutSummaryResponseV3(@JsonProperty("acceptedPayments") AcceptedPaymentV3[] acceptedPayments, @JsonProperty("accounts") SourceAccountV3[] accounts, @JsonProperty("fxSummaries") QuoteFxSummaryV3[] fxSummaries, @JsonProperty("paymentsWithdrawn") Long paymentsWithdrawn, @JsonProperty("rejectedPayments") RejectedPaymentV3[] rejectedPayments) {
        this.acceptedPayments = acceptedPayments;
        this.accounts = accounts;
        this.fxSummaries = fxSummaries;
        this.paymentsWithdrawn = paymentsWithdrawn;
        this.rejectedPayments = rejectedPayments;
  }
}
