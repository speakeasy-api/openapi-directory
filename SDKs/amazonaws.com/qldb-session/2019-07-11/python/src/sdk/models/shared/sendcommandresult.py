"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aborttransactionresult as shared_aborttransactionresult
from ..shared import committransactionresult as shared_committransactionresult
from ..shared import endsessionresult as shared_endsessionresult
from ..shared import executestatementresult as shared_executestatementresult
from ..shared import fetchpageresult as shared_fetchpageresult
from ..shared import startsessionresult as shared_startsessionresult
from ..shared import starttransactionresult as shared_starttransactionresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendCommandResult:
    r"""Success"""
    
    abort_transaction: Optional[shared_aborttransactionresult.AbortTransactionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbortTransaction'), 'exclude': lambda f: f is None }})  
    commit_transaction: Optional[shared_committransactionresult.CommitTransactionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommitTransaction'), 'exclude': lambda f: f is None }})  
    end_session: Optional[shared_endsessionresult.EndSessionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndSession'), 'exclude': lambda f: f is None }})  
    execute_statement: Optional[shared_executestatementresult.ExecuteStatementResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecuteStatement'), 'exclude': lambda f: f is None }})  
    fetch_page: Optional[shared_fetchpageresult.FetchPageResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FetchPage'), 'exclude': lambda f: f is None }})  
    start_session: Optional[shared_startsessionresult.StartSessionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartSession'), 'exclude': lambda f: f is None }})  
    start_transaction: Optional[shared_starttransactionresult.StartTransactionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTransaction'), 'exclude': lambda f: f is None }})  
    