<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateCallRecordingCreateCallRecordingRequest
{
    /**
     * The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
     * 
     * @var ?string $recordingChannels
     */
	#[SpeakeasyMetadata('form:name=RecordingChannels')]
    public ?string $recordingChannels = null;
    
    /**
     * The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
     * 
     * @var ?string $recordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallback')]
    public ?string $recordingStatusCallback = null;
    
    /**
     * The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
     * 
     * @var ?array<string> $recordingStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackEvent')]
    public ?array $recordingStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackMethod')]
    public ?CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod = null;
    
    /**
     * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
     * 
     * @var ?string $recordingTrack
     */
	#[SpeakeasyMetadata('form:name=RecordingTrack')]
    public ?string $recordingTrack = null;
    
    /**
     * Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
     * 
     * @var ?string $trim
     */
	#[SpeakeasyMetadata('form:name=Trim')]
    public ?string $trim = null;
    
	public function __construct()
	{
		$this->recordingChannels = null;
		$this->recordingStatusCallback = null;
		$this->recordingStatusCallbackEvent = null;
		$this->recordingStatusCallbackMethod = null;
		$this->recordingTrack = null;
		$this->trim = null;
	}
}
