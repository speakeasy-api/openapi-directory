<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new AppConnection in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateResponse
     */
	public function beyondcorpProjectsLocationsAppConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appConnections', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudBeyondcorpAppconnectionsV1AppConnectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists AppConnections in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListResponse
     */
	public function beyondcorpProjectsLocationsAppConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appConnections', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resolves AppConnections details for a given AppConnector. An internal method called by a connector to find AppConnections to connect to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveResponse
     */
	public function beyondcorpProjectsLocationsAppConnectionsResolve(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appConnections:resolve', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectionsResolveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new AppConnector in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateResponse
     */
	public function beyondcorpProjectsLocationsAppConnectorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appConnectors', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudBeyondcorpAppconnectorsV1AppConnectorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists AppConnectors in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListResponse
     */
	public function beyondcorpProjectsLocationsAppConnectorsList(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appConnectors', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single AppConnector.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchResponse
     */
	public function beyondcorpProjectsLocationsAppConnectorsPatch(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudBeyondcorpAppconnectorsV1AppConnectorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report status for a given connector.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusResponse
     */
	public function beyondcorpProjectsLocationsAppConnectorsReportStatus(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{appConnector}:reportStatus', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudBeyondcorpAppconnectorsV1ReportStatusRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsReportStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets instance configuration for a given AppConnector. An internal method called by a AppConnector to get its container config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigResponse
     */
	public function beyondcorpProjectsLocationsAppConnectorsResolveInstanceConfig(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{appConnector}:resolveInstanceConfig', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new AppGateway in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateResponse
     */
	public function beyondcorpProjectsLocationsAppGatewaysCreate(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appGateways', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appGatewayInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists AppGateways in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListResponse
     */
	public function beyondcorpProjectsLocationsAppGatewaysList(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/appGateways', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsAppGatewaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppGatewaysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAppGatewaysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyResponse
     */
	public function beyondcorpProjectsLocationsClientGatewaysGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyResponse
     */
	public function beyondcorpProjectsLocationsClientGatewaysSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsResponse
     */
	public function beyondcorpProjectsLocationsClientGatewaysTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsClientGatewaysTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListResponse
     */
	public function beyondcorpProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudLocationListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudLocationListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelResponse
     */
	public function beyondcorpProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteResponse
     */
	public function beyondcorpProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetResponse
     */
	public function beyondcorpProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListResponse
     */
	public function beyondcorpProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BeyondcorpProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}