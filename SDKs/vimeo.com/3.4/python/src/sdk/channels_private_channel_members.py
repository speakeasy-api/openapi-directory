"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsPrivateChannelMembers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_channel_privacy_user(self, request: operations.DeleteChannelPrivacyUserRequest, security: operations.DeleteChannelPrivacyUserSecurity) -> operations.DeleteChannelPrivacyUserResponse:
        r"""Restrict a user from viewing a private channel
        This method prevents a single user from being able to access the specified private channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteChannelPrivacyUserRequest, base_url, '/channels/{channel_id}/privacy/users/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteChannelPrivacyUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_channel_privacy_users(self, request: operations.GetChannelPrivacyUsersRequest) -> operations.GetChannelPrivacyUsersResponse:
        r"""Get all the users who can view a private channel
        This method gets all the users who have access to the specified private channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelPrivacyUsersRequest, base_url, '/channels/{channel_id}/privacy/users', request)
        
        query_params = utils.get_query_params(operations.GetChannelPrivacyUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelPrivacyUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def set_channel_privacy_user(self, request: operations.SetChannelPrivacyUserRequest, security: operations.SetChannelPrivacyUserSecurity) -> operations.SetChannelPrivacyUserResponse:
        r"""Permit a specific user to view a private channel
        This method gives a single user access to the specified private channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetChannelPrivacyUserRequest, base_url, '/channels/{channel_id}/privacy/users/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetChannelPrivacyUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def set_channel_privacy_users(self, request: operations.SetChannelPrivacyUsersRequest, security: operations.SetChannelPrivacyUsersSecurity) -> operations.SetChannelPrivacyUsersResponse:
        r"""Permit a list of users to view a private channel
        This method gives multiple users access to the specified private channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetChannelPrivacyUsersRequest, base_url, '/channels/{channel_id}/privacy/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetChannelPrivacyUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    