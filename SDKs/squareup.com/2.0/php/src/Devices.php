<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Devices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateDeviceCode
     * 
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
     * terminal mode.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateDeviceCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceCodeResponse
     */
	public function createDeviceCode(
        \OpenAPI\OpenAPI\Models\Shared\CreateDeviceCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/devices/codes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateDeviceCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetDeviceCode
     * 
     * Retrieves DeviceCode with the associated ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeResponse
     */
	public function getDeviceCode(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/devices/codes/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetDeviceCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListDeviceCodes
     * 
     * Lists all DeviceCodes associated with the merchant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesResponse
     */
	public function listDeviceCodes(
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/devices/codes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeviceCodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceCodesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceCodesResponse', 'json');
            }
        }

        return $response;
    }
}