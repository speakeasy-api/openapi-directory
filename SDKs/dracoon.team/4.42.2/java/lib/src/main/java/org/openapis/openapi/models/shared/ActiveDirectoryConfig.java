/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ActiveDirectoryConfig - Active Directory configuration
 */
public class ActiveDirectoryConfig {
    /**
     * If `userImport` is set to `true`,
     * 
     * the user must be member of this Active Directory group to receive a newly created DRACOON account.
     */
    @JsonProperty("adExportGroup")
    public String adExportGroup;
    public ActiveDirectoryConfig withAdExportGroup(String adExportGroup) {
        this.adExportGroup = adExportGroup;
        return this;
    }
    
    /**
     * Unique name for an Active Directory configuration
     */
    @JsonProperty("alias")
    public String alias;
    public ActiveDirectoryConfig withAlias(String alias) {
        this.alias = alias;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * DEPRECATED, will be ignored
     * 
     * Determines whether a room is created for each user that is created by automatic import (like a home folder).
     * 
     * Room's name will equal the user's login name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createHomeFolder")
    public Boolean createHomeFolder;
    public ActiveDirectoryConfig withCreateHomeFolder(Boolean createHomeFolder) {
        this.createHomeFolder = createHomeFolder;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * DEPRECATED, will be ignored
     * 
     * ID of the room in which the individual rooms for users will be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeFolderParent")
    public Long homeFolderParent;
    public ActiveDirectoryConfig withHomeFolderParent(Long homeFolderParent) {
        this.homeFolderParent = homeFolderParent;
        return this;
    }
    
    /**
     * ID
     */
    @JsonProperty("id")
    public Integer id;
    public ActiveDirectoryConfig withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Search scope of Active Directory; only users below this node can log on.
     */
    @JsonProperty("ldapUsersDomain")
    public String ldapUsersDomain;
    public ActiveDirectoryConfig withLdapUsersDomain(String ldapUsersDomain) {
        this.ldapUsersDomain = ldapUsersDomain;
        return this;
    }
    
    /**
     * User group that is assigned to users who are created by automatic import.
     * 
     * Reset with `0`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sdsImportGroup")
    public Long sdsImportGroup;
    public ActiveDirectoryConfig withSdsImportGroup(Long sdsImportGroup) {
        this.sdsImportGroup = sdsImportGroup;
        return this;
    }
    
    /**
     * Distinguished Name (DN) of Active Directory administrative account
     */
    @JsonProperty("serverAdminName")
    public String serverAdminName;
    public ActiveDirectoryConfig withServerAdminName(String serverAdminName) {
        this.serverAdminName = serverAdminName;
        return this;
    }
    
    /**
     * IPv4 or IPv6 address or host name
     */
    @JsonProperty("serverIp")
    public String serverIp;
    public ActiveDirectoryConfig withServerIp(String serverIp) {
        this.serverIp = serverIp;
        return this;
    }
    
    /**
     * Port
     */
    @JsonProperty("serverPort")
    public Integer serverPort;
    public ActiveDirectoryConfig withServerPort(Integer serverPort) {
        this.serverPort = serverPort;
        return this;
    }
    
    /**
     * SSL finger print of Active Directory server.
     * 
     * Mandatory for LDAPS connections.
     * 
     * Format: `Algorithm/Fingerprint`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslFingerPrint")
    public String sslFingerPrint;
    public ActiveDirectoryConfig withSslFingerPrint(String sslFingerPrint) {
        this.sslFingerPrint = sslFingerPrint;
        return this;
    }
    
    /**
     * Determines whether LDAPS should be used instead of plain LDAP.
     */
    @JsonProperty("useLdaps")
    public Boolean useLdaps;
    public ActiveDirectoryConfig withUseLdaps(Boolean useLdaps) {
        this.useLdaps = useLdaps;
        return this;
    }
    
    /**
     * Name of Active Directory attribute that is used as login name.
     */
    @JsonProperty("userFilter")
    public String userFilter;
    public ActiveDirectoryConfig withUserFilter(String userFilter) {
        this.userFilter = userFilter;
        return this;
    }
    
    /**
     * Determines if a DRACOON account is automatically created for a new user
     * 
     * who successfully logs on with his / her AD / IDP account.
     */
    @JsonProperty("userImport")
    public Boolean userImport;
    public ActiveDirectoryConfig withUserImport(Boolean userImport) {
        this.userImport = userImport;
        return this;
    }
    
}
