/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum MeterUsageXAmzTargetEnum {
  AWSMPMeteringServiceMeterUsage = "AWSMPMeteringService.MeterUsage",
}

export class MeterUsageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  meterUsageRequest: shared.MeterUsageRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: MeterUsageXAmzTargetEnum;
}

export class MeterUsageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * CustomerNotEntitledException
   */
  @SpeakeasyMetadata()
  customerNotEntitledException?: any;

  /**
   * DuplicateRequestException
   */
  @SpeakeasyMetadata()
  duplicateRequestException?: any;

  /**
   * InternalServiceErrorException
   */
  @SpeakeasyMetadata()
  internalServiceErrorException?: any;

  /**
   * InvalidEndpointRegionException
   */
  @SpeakeasyMetadata()
  invalidEndpointRegionException?: any;

  /**
   * InvalidProductCodeException
   */
  @SpeakeasyMetadata()
  invalidProductCodeException?: any;

  /**
   * InvalidTagException
   */
  @SpeakeasyMetadata()
  invalidTagException?: any;

  /**
   * InvalidUsageAllocationsException
   */
  @SpeakeasyMetadata()
  invalidUsageAllocationsException?: any;

  /**
   * InvalidUsageDimensionException
   */
  @SpeakeasyMetadata()
  invalidUsageDimensionException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  meterUsageResult?: shared.MeterUsageResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * TimestampOutOfBoundsException
   */
  @SpeakeasyMetadata()
  timestampOutOfBoundsException?: any;
}
