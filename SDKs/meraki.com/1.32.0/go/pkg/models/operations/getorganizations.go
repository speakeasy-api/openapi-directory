// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOrganizations200ApplicationJSONAPI - API related settings
type GetOrganizations200ApplicationJSONAPI struct {
	// Enable API access
	Enabled *bool `json:"enabled,omitempty"`
}

// GetOrganizations200ApplicationJSONCloudRegion - Region info
type GetOrganizations200ApplicationJSONCloudRegion struct {
	// Name of region
	Name *string `json:"name,omitempty"`
}

// GetOrganizations200ApplicationJSONCloud - Data for this organization
type GetOrganizations200ApplicationJSONCloud struct {
	// Region info
	Region *GetOrganizations200ApplicationJSONCloudRegion `json:"region,omitempty"`
}

// GetOrganizations200ApplicationJSONLicensingModelEnum - Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
type GetOrganizations200ApplicationJSONLicensingModelEnum string

const (
	GetOrganizations200ApplicationJSONLicensingModelEnumCoTerm       GetOrganizations200ApplicationJSONLicensingModelEnum = "co-term"
	GetOrganizations200ApplicationJSONLicensingModelEnumPerDevice    GetOrganizations200ApplicationJSONLicensingModelEnum = "per-device"
	GetOrganizations200ApplicationJSONLicensingModelEnumSubscription GetOrganizations200ApplicationJSONLicensingModelEnum = "subscription"
)

func (e GetOrganizations200ApplicationJSONLicensingModelEnum) ToPointer() *GetOrganizations200ApplicationJSONLicensingModelEnum {
	return &e
}

func (e *GetOrganizations200ApplicationJSONLicensingModelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "co-term":
		fallthrough
	case "per-device":
		fallthrough
	case "subscription":
		*e = GetOrganizations200ApplicationJSONLicensingModelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizations200ApplicationJSONLicensingModelEnum: %v", v)
	}
}

// GetOrganizations200ApplicationJSONLicensing - Licensing related settings
type GetOrganizations200ApplicationJSONLicensing struct {
	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	Model *GetOrganizations200ApplicationJSONLicensingModelEnum `json:"model,omitempty"`
}

type GetOrganizations200ApplicationJSONManagementDetails struct {
	// Name of management data
	Name *string `json:"name,omitempty"`
	// Value of management data
	Value *string `json:"value,omitempty"`
}

// GetOrganizations200ApplicationJSONManagement - Information about the organization's management system
type GetOrganizations200ApplicationJSONManagement struct {
	// Details related to organization management, possibly empty
	Details []GetOrganizations200ApplicationJSONManagementDetails `json:"details,omitempty"`
}

type GetOrganizations200ApplicationJSON struct {
	// API related settings
	API *GetOrganizations200ApplicationJSONAPI `json:"api,omitempty"`
	// Data for this organization
	Cloud *GetOrganizations200ApplicationJSONCloud `json:"cloud,omitempty"`
	// Organization ID
	ID *string `json:"id,omitempty"`
	// Licensing related settings
	Licensing *GetOrganizations200ApplicationJSONLicensing `json:"licensing,omitempty"`
	// Information about the organization's management system
	Management *GetOrganizations200ApplicationJSONManagement `json:"management,omitempty"`
	// Organization name
	Name *string `json:"name,omitempty"`
	// Organization URL
	URL *string `json:"url,omitempty"`
}

type GetOrganizationsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizations200ApplicationJSONObjects []GetOrganizations200ApplicationJSON
}
