<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExpectedAttributeValue - <p>Represents a condition to be compared with an attribute value. This condition can be used with <code>DeleteItem</code>, <code>PutItem</code>, or <code>UpdateItem</code> operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use <code>ExpectedAttributeValue</code> in one of two different ways:</p> <ul> <li> <p>Use <code>AttributeValueList</code> to specify one or more values to compare against an attribute. Use <code>ComparisonOperator</code> to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.</p> </li> <li> <p>Use <code>Value</code> to specify a value that DynamoDB will compare against an attribute. If the values match, then <code>ExpectedAttributeValue</code> evaluates to true and the conditional operation succeeds. Optionally, you can also set <code>Exists</code> to false, indicating that you <i>do not</i> expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.</p> </li> </ul> <p> <code>Value</code> and <code>Exists</code> are incompatible with <code>AttributeValueList</code> and <code>ComparisonOperator</code>. Note that if you use both sets of parameters at once, DynamoDB will return a <code>ValidationException</code> exception.</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExpectedAttributeValue
{
    /**
     * $attributeValueList
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AttributeValue> $attributeValueList
     */
	#[\JMS\Serializer\Annotation\SerializedName('AttributeValueList')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AttributeValue>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $attributeValueList = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ComparisonOperator')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ComparisonOperatorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ComparisonOperatorEnum $comparisonOperator = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Exists')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $exists = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Value')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AttributeValue')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AttributeValue $value = null;
    
	public function __construct()
	{
		$this->attributeValueList = null;
		$this->comparisonOperator = null;
		$this->exists = null;
		$this->value = null;
	}
}
