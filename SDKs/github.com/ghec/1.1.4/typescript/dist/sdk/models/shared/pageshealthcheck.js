"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagesHealthCheck = exports.PagesHealthCheckDomain = exports.PagesHealthCheckAltDomain = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var PagesHealthCheckAltDomain = /** @class */ (function (_super) {
    __extends(PagesHealthCheckAltDomain, _super);
    function PagesHealthCheckAltDomain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "caa_error" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "caaError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dns_resolves" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "dnsResolves", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enforces_https" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "enforcesHttps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_cname_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "hasCnameRecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_mx_records_present" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "hasMxRecordsPresent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "https_error" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "httpsError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_a_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_apex_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isApexDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cloudflare_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isCloudflareIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_fastly" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isCnameToFastly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_github_user_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isCnameToGithubUserDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_pages_dot_github_dot_com" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isCnameToPagesDotGithubDotCom", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_fastly_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isFastlyIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_https_eligible" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isHttpsEligible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_non_github_pages_ip_present" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isNonGithubPagesIpPresent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_old_ip_address" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isOldIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_pages_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isPagesDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_pointed_to_github_pages_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isPointedToGithubPagesIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_proxied" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isProxied", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_served_by_pages" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isServedByPages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_valid" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isValid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_valid_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "isValidDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameservers" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "nameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reason" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "reason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "responds_to_https" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "respondsToHttps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "should_be_a_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckAltDomain.prototype, "shouldBeARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uri" }),
        __metadata("design:type", String)
    ], PagesHealthCheckAltDomain.prototype, "uri", void 0);
    return PagesHealthCheckAltDomain;
}(utils_1.SpeakeasyBase));
exports.PagesHealthCheckAltDomain = PagesHealthCheckAltDomain;
var PagesHealthCheckDomain = /** @class */ (function (_super) {
    __extends(PagesHealthCheckDomain, _super);
    function PagesHealthCheckDomain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "caa_error" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "caaError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dns_resolves" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "dnsResolves", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enforces_https" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "enforcesHttps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_cname_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "hasCnameRecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_mx_records_present" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "hasMxRecordsPresent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "https_error" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "httpsError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_a_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_apex_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isApexDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cloudflare_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isCloudflareIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_fastly" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isCnameToFastly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_github_user_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isCnameToGithubUserDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_cname_to_pages_dot_github_dot_com" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isCnameToPagesDotGithubDotCom", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_fastly_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isFastlyIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_https_eligible" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isHttpsEligible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_non_github_pages_ip_present" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isNonGithubPagesIpPresent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_old_ip_address" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isOldIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_pages_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isPagesDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_pointed_to_github_pages_ip" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isPointedToGithubPagesIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_proxied" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isProxied", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_served_by_pages" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isServedByPages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_valid" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isValid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "is_valid_domain" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "isValidDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameservers" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "nameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reason" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "reason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "responds_to_https" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "respondsToHttps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "should_be_a_record" }),
        __metadata("design:type", Boolean)
    ], PagesHealthCheckDomain.prototype, "shouldBeARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uri" }),
        __metadata("design:type", String)
    ], PagesHealthCheckDomain.prototype, "uri", void 0);
    return PagesHealthCheckDomain;
}(utils_1.SpeakeasyBase));
exports.PagesHealthCheckDomain = PagesHealthCheckDomain;
/**
 * Pages Health Check Status
 */
var PagesHealthCheck = /** @class */ (function (_super) {
    __extends(PagesHealthCheck, _super);
    function PagesHealthCheck() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alt_domain" }),
        (0, class_transformer_1.Type)(function () { return PagesHealthCheckAltDomain; }),
        __metadata("design:type", PagesHealthCheckAltDomain)
    ], PagesHealthCheck.prototype, "altDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "domain" }),
        (0, class_transformer_1.Type)(function () { return PagesHealthCheckDomain; }),
        __metadata("design:type", PagesHealthCheckDomain)
    ], PagesHealthCheck.prototype, "domain", void 0);
    return PagesHealthCheck;
}(utils_1.SpeakeasyBase));
exports.PagesHealthCheck = PagesHealthCheck;
