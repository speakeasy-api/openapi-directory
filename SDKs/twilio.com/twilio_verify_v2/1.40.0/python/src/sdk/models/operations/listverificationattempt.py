"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import verification_attempt_enum_channels_enum as shared_verification_attempt_enum_channels_enum
from ..shared import verification_attempt_enum_conversion_status_enum as shared_verification_attempt_enum_conversion_status_enum
from ..shared import verify_v2_verification_attempt as shared_verify_v2_verification_attempt
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional

LIST_VERIFICATION_ATTEMPT_SERVERS = [
	"https://verify.twilio.com",
]


@dataclasses.dataclass
class ListVerificationAttemptSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListVerificationAttemptRequest:
    
    channel: Optional[shared_verification_attempt_enum_channels_enum.VerificationAttemptEnumChannelsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Channel', 'style': 'form', 'explode': True }})
    r"""Filter used to query Verification Attempts by communication channel. Valid values are `SMS` and `CALL`"""  
    channel_data_to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ChannelData.To', 'style': 'form', 'explode': True }})
    r"""Destination of a verification. It is phone number in E.164 format."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Country', 'style': 'form', 'explode': True }})
    r"""Filter used to query Verification Attempts sent to the specified destination country."""  
    date_created_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DateCreatedAfter', 'style': 'form', 'explode': True }})
    r"""Datetime filter used to query Verification Attempts created after this datetime. Given as GMT in RFC 2822 format."""  
    date_created_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DateCreatedBefore', 'style': 'form', 'explode': True }})
    r"""Datetime filter used to query Verification Attempts created before this datetime. Given as GMT in RFC 2822 format."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    status: Optional[shared_verification_attempt_enum_conversion_status_enum.VerificationAttemptEnumConversionStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Status', 'style': 'form', 'explode': True }})
    r"""Filter used to query Verification Attempts by conversion status. Valid values are `UNCONVERTED`, for attempts that were not converted, and `CONVERTED`, for attempts that were confirmed."""  
    verification_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VerificationSid', 'style': 'form', 'explode': True }})
    r"""Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned."""  
    verify_service_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VerifyServiceSid', 'style': 'form', 'explode': True }})
    r"""Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListVerificationAttemptListVerificationAttemptResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListVerificationAttemptListVerificationAttemptResponse:
    r"""OK"""
    
    attempts: Optional[list[shared_verify_v2_verification_attempt.VerifyV2VerificationAttempt]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attempts'), 'exclude': lambda f: f is None }})  
    meta: Optional[ListVerificationAttemptListVerificationAttemptResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListVerificationAttemptResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_verification_attempt_response: Optional[ListVerificationAttemptListVerificationAttemptResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    