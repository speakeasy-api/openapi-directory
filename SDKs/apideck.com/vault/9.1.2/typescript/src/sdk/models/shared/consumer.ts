/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConsumerConnection } from "./consumerconnection";
import { ConsumerMetadata } from "./consumermetadata";
import { RequestCountAllocation } from "./requestcountallocation";
import { Expose, Type } from "class-transformer";

export class Consumer extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "aggregated_request_count" })
  aggregatedRequestCount?: number;

  /**
   * ID of your Apideck Application
   */
  @SpeakeasyMetadata()
  @Expose({ name: "application_id" })
  applicationId?: string;

  @SpeakeasyMetadata({ elemType: ConsumerConnection })
  @Expose({ name: "connections" })
  @Type(() => ConsumerConnection)
  connections?: ConsumerConnection[];

  /**
   * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consumer_id" })
  consumerId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created?: string;

  /**
   * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => ConsumerMetadata)
  metadata?: ConsumerMetadata;

  @SpeakeasyMetadata()
  @Expose({ name: "modified" })
  modified?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_count_updated" })
  requestCountUpdated?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_counts" })
  @Type(() => RequestCountAllocation)
  requestCounts?: RequestCountAllocation;

  @SpeakeasyMetadata()
  @Expose({ name: "services" })
  services?: string[];
}

export class ConsumerInput extends SpeakeasyBase {
  /**
   * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consumer_id" })
  consumerId: string;

  /**
   * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => ConsumerMetadata)
  metadata?: ConsumerMetadata;
}
