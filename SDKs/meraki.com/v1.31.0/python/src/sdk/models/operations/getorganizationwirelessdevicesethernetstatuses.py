"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatusesRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONAggregation:
    r"""Aggregation details object"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Link Aggregation enabled flag"""  
    speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})
    r"""Link Aggregation speed"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONNetwork:
    r"""Network details object"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The network ID the AP is associated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsLinkNegotiation:
    r"""Link negotiation details object for the port"""
    
    duplex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplex'), 'exclude': lambda f: f is None }})
    r"""The duplex mode of the port. Can be 'full' or 'half'"""  
    speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})
    r"""The speed of the port"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsPoe:
    r"""PoE details object for the port"""
    
    standard: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard'), 'exclude': lambda f: f is None }})
    r"""The PoE Standard for the port. Can be '802.3at', '802.3af', '802.3bt', or null"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPorts:
    
    link_negotiation: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsLinkNegotiation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkNegotiation'), 'exclude': lambda f: f is None }})
    r"""Link negotiation details object for the port"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Label of the port"""  
    poe: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsPoe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poe'), 'exclude': lambda f: f is None }})
    r"""PoE details object for the port"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerAc:
    r"""AC power details object"""
    
    is_connected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isConnected'), 'exclude': lambda f: f is None }})
    r"""AC power connected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerPoe:
    r"""PoE power details object"""
    
    is_connected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isConnected'), 'exclude': lambda f: f is None }})
    r"""PoE power connected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPower:
    r"""Power details object"""
    
    ac: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerAc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ac'), 'exclude': lambda f: f is None }})
    r"""AC power details object"""  
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The PoE power mode for the AP. Can be 'full' or 'low'"""  
    poe: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerPoe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poe'), 'exclude': lambda f: f is None }})
    r"""PoE power details object"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON:
    
    aggregation: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregation'), 'exclude': lambda f: f is None }})
    r"""Aggregation details object"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the AP"""  
    network: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network details object"""  
    ports: Optional[list[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPorts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ports'), 'exclude': lambda f: f is None }})
    r"""List of port details"""  
    power: Optional[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPower] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power'), 'exclude': lambda f: f is None }})
    r"""Power details object"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The serial number of the AP"""  
    

@dataclasses.dataclass
class GetOrganizationWirelessDevicesEthernetStatusesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_wireless_devices_ethernet_statuses_200_application_json_objects: Optional[list[GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    