/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SubscriptionPushReporting - The subscription push reporting
 */
public class SubscriptionPushReporting {
    /**
     * The duration of the push operation
     */
    @JsonProperty("duration")
    public String duration;

    public SubscriptionPushReporting withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public ErrorResponseMessage errorMessage;

    public SubscriptionPushReporting withErrorMessage(ErrorResponseMessage errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * The message identifier. It's a guid.
     */
    @JsonProperty("eventId")
    public String eventId;

    public SubscriptionPushReporting withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * The HTTP status received from the consumer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpStatus")
    public Integer httpStatus;

    public SubscriptionPushReporting withHttpStatus(Integer httpStatus) {
        this.httpStatus = httpStatus;
        return this;
    }
    
    /**
     * This modification date correspond to the last order pushed by your subscription consumer
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastOrderModificationUtcDate")
    public OffsetDateTime lastOrderModificationUtcDate;

    public SubscriptionPushReporting withLastOrderModificationUtcDate(OffsetDateTime lastOrderModificationUtcDate) {
        this.lastOrderModificationUtcDate = lastOrderModificationUtcDate;
        return this;
    }
    
    /**
     * The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRetryCount")
    public Long maxRetryCount;

    public SubscriptionPushReporting withMaxRetryCount(Long maxRetryCount) {
        this.maxRetryCount = maxRetryCount;
        return this;
    }
    
    /**
     * The next scheduled  date we retry to send orders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("nextScheduledRetryUtcDate")
    public OffsetDateTime nextScheduledRetryUtcDate;

    public SubscriptionPushReporting withNextScheduledRetryUtcDate(OffsetDateTime nextScheduledRetryUtcDate) {
        this.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate;
        return this;
    }
    
    /**
     * The order count sent
     */
    @JsonProperty("orderCount")
    public Integer orderCount;

    public SubscriptionPushReporting withOrderCount(Integer orderCount) {
        this.orderCount = orderCount;
        return this;
    }
    
    /**
     * The URL &lt;a href="https://en.wikipedia.org/wiki/URL"&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestUri")
    public String requestUri;

    public SubscriptionPushReporting withRequestUri(String requestUri) {
        this.requestUri = requestUri;
        return this;
    }
    
    /**
     * The URL &lt;a href="https://en.wikipedia.org/wiki/URL"&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseUri")
    public String responseUri;

    public SubscriptionPushReporting withResponseUri(String responseUri) {
        this.responseUri = responseUri;
        return this;
    }
    
    /**
     * The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retryCount")
    public Long retryCount;

    public SubscriptionPushReporting withRetryCount(Long retryCount) {
        this.retryCount = retryCount;
        return this;
    }
    
    /**
     * The identifier of the subscription to the orders for a merchant
     */
    @JsonProperty("subscriptionId")
    public String subscriptionId;

    public SubscriptionPushReporting withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * Indicates if the push operation has succeed
     */
    @JsonProperty("succeed")
    public Boolean succeed;

    public SubscriptionPushReporting withSucceed(Boolean succeed) {
        this.succeed = succeed;
        return this;
    }
    
    public SubscriptionPushReporting(@JsonProperty("duration") String duration, @JsonProperty("eventId") String eventId, @JsonProperty("lastOrderModificationUtcDate") OffsetDateTime lastOrderModificationUtcDate, @JsonProperty("orderCount") Integer orderCount, @JsonProperty("subscriptionId") String subscriptionId, @JsonProperty("succeed") Boolean succeed) {
        this.duration = duration;
        this.eventId = eventId;
        this.lastOrderModificationUtcDate = lastOrderModificationUtcDate;
        this.orderCount = orderCount;
        this.subscriptionId = subscriptionId;
        this.succeed = succeed;
  }
}
