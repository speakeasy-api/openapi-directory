// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PlayerSeasonSplitStatsFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type PlayerSeasonSplitStatsFormatEnum string

const (
	PlayerSeasonSplitStatsFormatEnumXML  PlayerSeasonSplitStatsFormatEnum = "XML"
	PlayerSeasonSplitStatsFormatEnumJSON PlayerSeasonSplitStatsFormatEnum = "JSON"
)

func (e *PlayerSeasonSplitStatsFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "XML":
		fallthrough
	case "JSON":
		*e = PlayerSeasonSplitStatsFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayerSeasonSplitStatsFormatEnum: %s", s)
	}
}

// PlayerSeasonSplitStatsSplitEnum - The desired split of stats. Currently, we support vs. Left/Right/Switch handed pitchers/hitters. Possible values are: <code>L</code>, <code>R</code> and <code>S</code>
type PlayerSeasonSplitStatsSplitEnum string

const (
	PlayerSeasonSplitStatsSplitEnumL PlayerSeasonSplitStatsSplitEnum = "L"
	PlayerSeasonSplitStatsSplitEnumR PlayerSeasonSplitStatsSplitEnum = "R"
	PlayerSeasonSplitStatsSplitEnumS PlayerSeasonSplitStatsSplitEnum = "S"
)

func (e *PlayerSeasonSplitStatsSplitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "L":
		fallthrough
	case "R":
		fallthrough
	case "S":
		*e = PlayerSeasonSplitStatsSplitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayerSeasonSplitStatsSplitEnum: %s", s)
	}
}

type PlayerSeasonSplitStatsRequest struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format PlayerSeasonSplitStatsFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Year of the season.
	// <br>Examples: <code>2017</code>, <code>2018</code>.
	Season string `pathParam:"style=simple,explode=false,name=season"`
	// The desired split of stats. Currently, we support vs. Left/Right/Switch handed pitchers/hitters. Possible values are: <code>L</code>, <code>R</code> and <code>S</code>
	Split PlayerSeasonSplitStatsSplitEnum `pathParam:"style=simple,explode=false,name=split"`
}

type PlayerSeasonSplitStatsResponse struct {
	ContentType   string
	PlayerSeasons []shared.PlayerSeason
	StatusCode    int
	RawResponse   *http.Response
}
