"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Codepush:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def code_push_acquisition_get_acquisition_status(self) -> operations.CodePushAcquisitionGetAcquisitionStatusResponse:
        r"""Returns the acquisition service status to the caller"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/public/codepush/status'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushAcquisitionGetAcquisitionStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionGetAcquisitionStatus200ApplicationJSON])
                res.code_push_acquisition_get_acquisition_status_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionGetAcquisitionStatusDefaultApplicationJSON])
                res.code_push_acquisition_get_acquisition_status_default_application_json_object = out

        return res

    def code_push_acquisition_update_check(self, request: operations.CodePushAcquisitionUpdateCheckRequest) -> operations.CodePushAcquisitionUpdateCheckResponse:
        r"""Check for updates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/public/codepush/update_check'
        
        query_params = utils.get_query_params(operations.CodePushAcquisitionUpdateCheckRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushAcquisitionUpdateCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionUpdateCheck200ApplicationJSON])
                res.code_push_acquisition_update_check_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionUpdateCheckDefaultApplicationJSON])
                res.code_push_acquisition_update_check_default_application_json_object = out

        return res

    def code_push_acquisition_update_deploy_status(self, request: operations.CodePushAcquisitionUpdateDeployStatusRequestBody) -> operations.CodePushAcquisitionUpdateDeployStatusResponse:
        r"""Report Deployment status metric"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/public/codepush/report_status/deploy'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushAcquisitionUpdateDeployStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionUpdateDeployStatusDefaultApplicationJSON])
                res.code_push_acquisition_update_deploy_status_default_application_json_object = out

        return res

    def code_push_acquisition_update_download_status(self, request: operations.CodePushAcquisitionUpdateDownloadStatusRequestBody) -> operations.CodePushAcquisitionUpdateDownloadStatusResponse:
        r"""Report download of specified release"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/public/codepush/report_status/download'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushAcquisitionUpdateDownloadStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushAcquisitionUpdateDownloadStatusDefaultApplicationJSON])
                res.code_push_acquisition_update_download_status_default_application_json_object = out

        return res

    def code_push_deployment_metrics_get(self, request: operations.CodePushDeploymentMetricsGetRequest, security: operations.CodePushDeploymentMetricsGetSecurity) -> operations.CodePushDeploymentMetricsGetResponse:
        r"""Gets all releases metrics for specified Deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentMetricsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentMetricsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CodePushDeploymentMetricsGet200ApplicationJSON]])
                res.code_push_deployment_metrics_get_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentMetricsGetDefaultApplicationJSON])
                res.code_push_deployment_metrics_get_default_application_json_object = out

        return res

    def code_push_deployment_release_rollback(self, request: operations.CodePushDeploymentReleaseRollbackRequest, security: operations.CodePushDeploymentReleaseRollbackSecurity) -> operations.CodePushDeploymentReleaseRollbackResponse:
        r"""Rollback the latest or a specific release for an app deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentReleaseRollbackRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentReleaseRollbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleaseRollback201ApplicationJSON])
                res.code_push_deployment_release_rollback_201_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleaseRollbackDefaultApplicationJSON])
                res.code_push_deployment_release_rollback_default_application_json_object = out

        return res

    def code_push_deployment_releases_create(self, request: operations.CodePushDeploymentReleasesCreateRequest, security: operations.CodePushDeploymentReleasesCreateSecurity) -> operations.CodePushDeploymentReleasesCreateResponse:
        r"""Create a new CodePush release for the specified deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentReleasesCreateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentReleasesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleasesCreate201ApplicationJSON])
                res.code_push_deployment_releases_create_201_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleasesCreateDefaultApplicationJSON])
                res.code_push_deployment_releases_create_default_application_json_object = out

        return res

    def code_push_deployment_releases_delete(self, request: operations.CodePushDeploymentReleasesDeleteRequest, security: operations.CodePushDeploymentReleasesDeleteSecurity) -> operations.CodePushDeploymentReleasesDeleteResponse:
        r"""Clears a Deployment of releases"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentReleasesDeleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentReleasesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleasesDeleteDefaultApplicationJSON])
                res.code_push_deployment_releases_delete_default_application_json_object = out

        return res

    def code_push_deployment_releases_get(self, request: operations.CodePushDeploymentReleasesGetRequest, security: operations.CodePushDeploymentReleasesGetSecurity) -> operations.CodePushDeploymentReleasesGetResponse:
        r"""Gets the history of releases on a Deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentReleasesGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentReleasesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CodePushDeploymentReleasesGet200ApplicationJSON]])
                res.code_push_deployment_releases_get_200_application_json_anies = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentReleasesGetDefaultApplicationJSON])
                res.code_push_deployment_releases_get_default_application_json_object = out

        return res

    def code_push_deployment_upload_create(self, request: operations.CodePushDeploymentUploadCreateRequest, security: operations.CodePushDeploymentUploadCreateSecurity) -> operations.CodePushDeploymentUploadCreateResponse:
        r"""Create a new CodePush release upload for the specified deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentUploadCreateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentUploadCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentUploadCreate200ApplicationJSON])
                res.code_push_deployment_upload_create_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentUploadCreateDefaultApplicationJSON])
                res.code_push_deployment_upload_create_default_application_json_object = out

        return res

    def code_push_deployments_create(self, request: operations.CodePushDeploymentsCreateRequest, security: operations.CodePushDeploymentsCreateSecurity) -> operations.CodePushDeploymentsCreateResponse:
        r"""Creates a CodePush Deployment for the given app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsCreateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsCreate201ApplicationJSON])
                res.code_push_deployments_create_201_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsCreateDefaultApplicationJSON])
                res.code_push_deployments_create_default_application_json_object = out

        return res

    def code_push_deployments_delete(self, request: operations.CodePushDeploymentsDeleteRequest, security: operations.CodePushDeploymentsDeleteSecurity) -> operations.CodePushDeploymentsDeleteResponse:
        r"""Deletes a CodePush Deployment for the given app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsDeleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsDeleteDefaultApplicationJSON])
                res.code_push_deployments_delete_default_application_json_object = out

        return res

    def code_push_deployments_get(self, request: operations.CodePushDeploymentsGetRequest, security: operations.CodePushDeploymentsGetSecurity) -> operations.CodePushDeploymentsGetResponse:
        r"""Gets a CodePush Deployment for the given app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsGet200ApplicationJSON])
                res.code_push_deployments_get_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsGetDefaultApplicationJSON])
                res.code_push_deployments_get_default_application_json_object = out

        return res

    def code_push_deployments_list(self, request: operations.CodePushDeploymentsListRequest, security: operations.CodePushDeploymentsListSecurity) -> operations.CodePushDeploymentsListResponse:
        r"""Gets a list of CodePush deployments for the given app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CodePushDeploymentsList200ApplicationJSON]])
                res.code_push_deployments_list_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsListDefaultApplicationJSON])
                res.code_push_deployments_list_default_application_json_object = out

        return res

    def code_push_deployments_promote(self, request: operations.CodePushDeploymentsPromoteRequest, security: operations.CodePushDeploymentsPromoteSecurity) -> operations.CodePushDeploymentsPromoteResponse:
        r"""Promote one release (default latest one) from one deployment to another"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsPromoteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsPromoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsPromote200ApplicationJSON])
                res.code_push_deployments_promote_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsPromoteDefaultApplicationJSON])
                res.code_push_deployments_promote_default_application_json_object = out

        return res

    def code_push_deployments_update(self, request: operations.CodePushDeploymentsUpdateRequest, security: operations.CodePushDeploymentsUpdateSecurity) -> operations.CodePushDeploymentsUpdateResponse:
        r"""Modifies a CodePush Deployment for the given app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodePushDeploymentsUpdateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodePushDeploymentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodePushDeploymentsUpdateDefaultApplicationJSON])
                res.code_push_deployments_update_default_application_json_object = out

        return res

    def deployment_releases_update(self, request: operations.DeploymentReleasesUpdateRequest, security: operations.DeploymentReleasesUpdateSecurity) -> operations.DeploymentReleasesUpdateResponse:
        r"""Modifies a CodePush release metadata under the given Deployment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentReleasesUpdateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentReleasesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeploymentReleasesUpdate200ApplicationJSON])
                res.deployment_releases_update_200_application_json_object = out
        elif http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeploymentReleasesUpdateDefaultApplicationJSON])
                res.deployment_releases_update_default_application_json_object = out

        return res

    def legacy_code_push_acquisition_update_check(self, request: operations.LegacyCodePushAcquisitionUpdateCheckRequest, security: operations.LegacyCodePushAcquisitionUpdateCheckSecurity) -> operations.LegacyCodePushAcquisitionUpdateCheckResponse:
        r"""Check for updates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/legacy/updateCheck'
        
        query_params = utils.get_query_params(operations.LegacyCodePushAcquisitionUpdateCheckRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LegacyCodePushAcquisitionUpdateCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LegacyCodePushAcquisitionUpdateCheck200ApplicationJSON])
                res.legacy_code_push_acquisition_update_check_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LegacyCodePushAcquisitionUpdateCheckDefaultApplicationJSON])
                res.legacy_code_push_acquisition_update_check_default_application_json_object = out

        return res

    def legacy_code_push_acquisition_update_download_status(self, request: operations.LegacyCodePushAcquisitionUpdateDownloadStatusRequestBody, security: operations.LegacyCodePushAcquisitionUpdateDownloadStatusSecurity) -> operations.LegacyCodePushAcquisitionUpdateDownloadStatusResponse:
        r"""Report download of specified release"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/legacy/reportStatus/download'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LegacyCodePushAcquisitionUpdateDownloadStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LegacyCodePushAcquisitionUpdateDownloadStatusDefaultApplicationJSON])
                res.legacy_code_push_acquisition_update_download_status_default_application_json_object = out

        return res

    def legacy_code_push_acquisition_update_installs_status(self, request: operations.LegacyCodePushAcquisitionUpdateInstallsStatusRequestBody, security: operations.LegacyCodePushAcquisitionUpdateInstallsStatusSecurity) -> operations.LegacyCodePushAcquisitionUpdateInstallsStatusResponse:
        r"""Report deploy of specified release"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/legacy/reportStatus/deploy'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LegacyCodePushAcquisitionUpdateInstallsStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LegacyCodePushAcquisitionUpdateInstallsStatusDefaultApplicationJSON])
                res.legacy_code_push_acquisition_update_installs_status_default_application_json_object = out

        return res

    