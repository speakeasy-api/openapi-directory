// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetUserDocumentsOrderByEnum
type GetUserDocumentsOrderByEnum string

const (
	GetUserDocumentsOrderByEnumID        GetUserDocumentsOrderByEnum = "id"
	GetUserDocumentsOrderByEnumUpdatedAt GetUserDocumentsOrderByEnum = "updated_at"
	GetUserDocumentsOrderByEnumCreatedAt GetUserDocumentsOrderByEnum = "created_at"
	GetUserDocumentsOrderByEnumName      GetUserDocumentsOrderByEnum = "name"
)

func (e GetUserDocumentsOrderByEnum) ToPointer() *GetUserDocumentsOrderByEnum {
	return &e
}

func (e *GetUserDocumentsOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "updated_at":
		fallthrough
	case "created_at":
		fallthrough
	case "name":
		*e = GetUserDocumentsOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserDocumentsOrderByEnum: %v", v)
	}
}

// GetUserDocumentsTypeFilterEnum
type GetUserDocumentsTypeFilterEnum string

const (
	GetUserDocumentsTypeFilterEnumAll           GetUserDocumentsTypeFilterEnum = "ALL"
	GetUserDocumentsTypeFilterEnumTextDocuments GetUserDocumentsTypeFilterEnum = "TEXT_DOCUMENTS"
	GetUserDocumentsTypeFilterEnumPresentations GetUserDocumentsTypeFilterEnum = "PRESENTATIONS"
	GetUserDocumentsTypeFilterEnumSpreadsheets  GetUserDocumentsTypeFilterEnum = "SPREADSHEETS"
	GetUserDocumentsTypeFilterEnumPdfs          GetUserDocumentsTypeFilterEnum = "PDFS"
	GetUserDocumentsTypeFilterEnumImages        GetUserDocumentsTypeFilterEnum = "IMAGES"
	GetUserDocumentsTypeFilterEnumSubtitles     GetUserDocumentsTypeFilterEnum = "SUBTITLES"
	GetUserDocumentsTypeFilterEnumDesigns       GetUserDocumentsTypeFilterEnum = "DESIGNS"
	GetUserDocumentsTypeFilterEnumLocalization  GetUserDocumentsTypeFilterEnum = "LOCALIZATION"
	GetUserDocumentsTypeFilterEnumWeb           GetUserDocumentsTypeFilterEnum = "WEB"
	GetUserDocumentsTypeFilterEnumStyleGuides   GetUserDocumentsTypeFilterEnum = "STYLE_GUIDES"
	GetUserDocumentsTypeFilterEnumGlossaries    GetUserDocumentsTypeFilterEnum = "GLOSSARIES"
)

func (e GetUserDocumentsTypeFilterEnum) ToPointer() *GetUserDocumentsTypeFilterEnum {
	return &e
}

func (e *GetUserDocumentsTypeFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "TEXT_DOCUMENTS":
		fallthrough
	case "PRESENTATIONS":
		fallthrough
	case "SPREADSHEETS":
		fallthrough
	case "PDFS":
		fallthrough
	case "IMAGES":
		fallthrough
	case "SUBTITLES":
		fallthrough
	case "DESIGNS":
		fallthrough
	case "LOCALIZATION":
		fallthrough
	case "WEB":
		fallthrough
	case "STYLE_GUIDES":
		fallthrough
	case "GLOSSARIES":
		*e = GetUserDocumentsTypeFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserDocumentsTypeFilterEnum: %v", v)
	}
}

type GetUserDocumentsRequest struct {
	// searches in source language of documents, in source and target languages of document's quote
	LanguageCode *string                      `queryParam:"style=form,explode=true,name=language_code"`
	OrderBy      *GetUserDocumentsOrderByEnum `queryParam:"style=form,explode=true,name=order_by"`
	OrderType    *shared.ListOrderTypeEnum    `queryParam:"style=form,explode=true,name=order_type"`
	Page         *int64                       `queryParam:"style=form,explode=true,name=page"`
	PerPage      *int64                       `queryParam:"style=form,explode=true,name=per_page"`
	// When true, this will return the most 4 recent active documents.
	Recent     *bool                           `queryParam:"style=form,explode=true,name=recent"`
	Search     *string                         `queryParam:"style=form,explode=true,name=search"`
	TypeFilter *GetUserDocumentsTypeFilterEnum `queryParam:"style=form,explode=true,name=type_filter"`
	// User ID
	UserID int64 `pathParam:"style=simple,explode=false,name=userId"`
}

type GetUserDocumentsResponse struct {
	ContentType string
	// Document list
	DocumentList *shared.DocumentList
	StatusCode   int
	RawResponse  *http.Response
}
