"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Article:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def article_add_measure_unit(self, request: list[shared.MeasureUnitDTO]) -> operations.ArticleAddMeasureUnitResponse:
        r"""Add measure unit"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/MeasureUnit'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleAddMeasureUnitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_delete(self, request: operations.ArticleDeleteRequest) -> operations.ArticleDeleteResponse:
        r"""Delete article from the system"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article'
        
        query_params = utils.get_query_params(operations.ArticleDeleteRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfInteger])
                res.default_response_dto_of_integer = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIException])
                res.api_exception = out

        return res

    def article_get_addons(self, request: operations.ArticleGetAddonsRequest) -> operations.ArticleGetAddonsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/GetAddons'
        
        query_params = utils.get_query_params(operations.ArticleGetAddonsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleGetAddonsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfListOfArticleSearchDTO])
                res.default_response_dto_of_list_of_article_search_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_get_measure_units(self, request: operations.ArticleGetMeasureUnitsRequest) -> operations.ArticleGetMeasureUnitsResponse:
        r"""Get mesure units"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/MeasureUnits'
        
        query_params = utils.get_query_params(operations.ArticleGetMeasureUnitsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleGetMeasureUnitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_get_revenue_accounts(self) -> operations.ArticleGetRevenueAccountsResponse:
        r"""Get Revenue Accounts"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/RevenueAccounts'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleGetRevenueAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_gym_article_details(self, request: operations.ArticleGymArticleDetailsRequest) -> operations.ArticleGymArticleDetailsResponse:
        r"""Get Gym specific properties for article"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArticleGymArticleDetailsRequest, base_url, '/api/Article/GymArticle/{articleId}/{gymId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleGymArticleDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GymArticleDetailsDTO])
                res.gym_article_details_dto = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfListOfArticleSearchDTO])
                res.default_response_dto_of_list_of_article_search_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_post(self, request: shared.ArticleDTO) -> operations.ArticlePostResponse:
        r"""Add new article"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticlePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_put(self, request: shared.ArticleDTO) -> operations.ArticlePutResponse:
        r"""update existing article"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticlePutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIException])
                res.api_exception = out

        return res

    def article_search(self, request: operations.ArticleSearchRequest) -> operations.ArticleSearchResponse:
        r"""Search articles
        It will only return basic information of article
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/Search'
        
        query_params = utils.get_query_params(operations.ArticleSearchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfListOfArticleSearchDTO])
                res.default_response_dto_of_list_of_article_search_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_update_article_gym_details(self, request: list[shared.GymArticleDetailsDTO]) -> operations.ArticleUpdateArticleGymDetailsResponse:
        r"""Add article details that associate with a Gym"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/ArticleGymDetails'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleUpdateArticleGymDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfStatusDTO])
                res.default_response_dto_of_status_dto = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def article_update_status(self, request: operations.ArticleUpdateStatusRequest) -> operations.ArticleUpdateStatusResponse:
        r"""Deactivate existing article"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/Article/UpdateStatus'
        
        query_params = utils.get_query_params(operations.ArticleUpdateStatusRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleUpdateStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfInteger])
                res.default_response_dto_of_integer = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIException])
                res.api_exception = out

        return res

    def article_get(self, request: operations.ArticleGetRequest) -> operations.ArticleGetResponse:
        r"""Get article details
        This will return all properties related to article entity
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArticleGetRequest, base_url, '/api/Article/{articleID}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArticleGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultResponseDTOOfArticleDTO])
                res.default_response_dto_of_article_dto = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    