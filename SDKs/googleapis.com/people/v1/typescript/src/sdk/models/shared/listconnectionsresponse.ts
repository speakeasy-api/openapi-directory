/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Person } from "./person";
import { Expose, Type } from "class-transformer";

/**
 * The response to a request for the authenticated user's connections.
 */
export class ListConnectionsResponse extends SpeakeasyBase {
  /**
   * The list of people that the requestor is connected to.
   */
  @SpeakeasyMetadata({ elemType: Person })
  @Expose({ name: "connections" })
  @Type(() => Person)
  connections?: Person[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPageToken" })
  nextPageToken?: string;

  /**
   * A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextSyncToken" })
  nextSyncToken?: string;

  /**
   * The total number of items in the list without pagination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalItems" })
  totalItems?: number;

  /**
   * **DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPeople" })
  totalPeople?: number;
}
