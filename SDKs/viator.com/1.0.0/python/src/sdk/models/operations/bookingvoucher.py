"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class BookingVoucherRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    embedded_resources: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'embeddedResources', 'style': 'form', 'explode': True }})
    r"""ignore (Viator only)"""  
    full_html: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fullHTML', 'style': 'form', 'explode': True }})
    r"""**specifier**:
    - set to `true` if you wish to retrieve the full HTML-formatted voucher
    - set to `false` if you want the div fragment (optional)
    """  
    item_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'itemId', 'style': 'form', 'explode': True }})
    r"""Booking-reference number generated by Viator
    
      - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
    """  
    lead_last_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'leadLastName', 'style': 'form', 'explode': True }})
    r"""**surname** of *this* lead traveler"""  
    mobile_voucher: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mobileVoucher', 'style': 'form', 'explode': True }})
    r"""**specifier**:
    - if set to `true`, the service returns the mobile (cut down) HTML-formatted voucher
    - if `false` the full voucher HTML is returned (ignoring `fullHTML`)
    - default: `true` 
    - this field should only be enabled for products that have a `voucherOption` of `'VOUCHER_E'`
    - do not enable `mobileVouchers` for paper vouchers (`voucherOption` of `'VOUCHER_PAPER_ONLY'`) as no barcode is returned
    - the voucher information is available in the response from [/product](#operation/product), [/booking/book](#operation/bookingBook), [/booking/pastbooking](#operation/bookingPastbooking), [/booking/mybookings](#operation/bookingMybookings) (it is also displayed under the 'Redemption Info' heading in this service)
    """  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'voucherKey', 'style': 'form', 'explode': True }})
    r"""**identifier** for the voucher
    - **note**: use &lt;u&gt;either&lt;/u&gt; `voucherKey` &lt;u&gt;or&lt;/u&gt; the three separate parameters
    - if `voucherKey` is provided as well as the other parameters, then `voucherKey` overrides the other paramaters
    - `voucherKey` is obtained from [/booking/mybookings](#operation/bookingMybookings) or in the response from [/booking/book](#operation/bookingBook) when you make a booking
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingVoucher200ApplicationJSON:
    r"""Success"""
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""**HTML-formatted** voucher content"""  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class BookingVoucherResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    booking_voucher_200_application_json_object: Optional[BookingVoucher200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    