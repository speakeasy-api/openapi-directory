/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProvisioningConfigInput - A provisioning configuration.
 */
public class ProvisioningConfigInput {
    /**
     * Optional. The user-defined identifier of the provisioning config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customId")
    public String customId;

    public ProvisioningConfigInput withCustomId(String customId) {
        this.customId = customId;
        return this;
    }
    
    /**
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public ProvisioningConfigInput withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * A service account to enable customers to access instance credentials upon handover.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handoverServiceAccount")
    public String handoverServiceAccount;

    public ProvisioningConfigInput withHandoverServiceAccount(String handoverServiceAccount) {
        this.handoverServiceAccount = handoverServiceAccount;
        return this;
    }
    
    /**
     * Instances to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    public InstanceConfigInput[] instances;

    public ProvisioningConfigInput withInstances(InstanceConfigInput[] instances) {
        this.instances = instances;
        return this;
    }
    
    /**
     * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public ProvisioningConfigInput withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Networks to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networks")
    public NetworkConfigInput[] networks;

    public ProvisioningConfigInput withNetworks(NetworkConfigInput[] networks) {
        this.networks = networks;
        return this;
    }
    
    /**
     * Optional status messages associated with the FAILED state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public ProvisioningConfigInput withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * A generated ticket id to track provisioning request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticketId")
    public String ticketId;

    public ProvisioningConfigInput withTicketId(String ticketId) {
        this.ticketId = ticketId;
        return this;
    }
    
    /**
     * Volumes to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public VolumeConfigInput[] volumes;

    public ProvisioningConfigInput withVolumes(VolumeConfigInput[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    /**
     * If true, VPC SC is enabled for the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcScEnabled")
    public Boolean vpcScEnabled;

    public ProvisioningConfigInput withVpcScEnabled(Boolean vpcScEnabled) {
        this.vpcScEnabled = vpcScEnabled;
        return this;
    }
    
    public ProvisioningConfigInput(){}
}
