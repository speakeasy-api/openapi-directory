// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeCertificatesActionEnum
type POSTDescribeCertificatesActionEnum string

const (
	POSTDescribeCertificatesActionEnumDescribeCertificates POSTDescribeCertificatesActionEnum = "DescribeCertificates"
)

func (e POSTDescribeCertificatesActionEnum) ToPointer() *POSTDescribeCertificatesActionEnum {
	return &e
}

func (e *POSTDescribeCertificatesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeCertificates":
		*e = POSTDescribeCertificatesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeCertificatesActionEnum: %v", v)
	}
}

// POSTDescribeCertificatesVersionEnum
type POSTDescribeCertificatesVersionEnum string

const (
	POSTDescribeCertificatesVersionEnumTwoThousandAndFourteen1031 POSTDescribeCertificatesVersionEnum = "2014-10-31"
)

func (e POSTDescribeCertificatesVersionEnum) ToPointer() *POSTDescribeCertificatesVersionEnum {
	return &e
}

func (e *POSTDescribeCertificatesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2014-10-31":
		*e = POSTDescribeCertificatesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeCertificatesVersionEnum: %v", v)
	}
}

type POSTDescribeCertificatesRequest struct {
	Action POSTDescribeCertificatesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords        *string                             `queryParam:"style=form,explode=true,name=MaxRecords"`
	RequestBody       []byte                              `request:"mediaType=text/xml"`
	Version           POSTDescribeCertificatesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeCertificatesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
