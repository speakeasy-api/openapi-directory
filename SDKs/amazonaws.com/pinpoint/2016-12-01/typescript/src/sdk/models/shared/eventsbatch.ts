/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Event } from "./event";
import { PublicEndpoint } from "./publicendpoint";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies a batch of endpoints and events to process.
 */
export class EventsBatch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Endpoint" })
  @Type(() => PublicEndpoint)
  endpoint: PublicEndpoint;

  @SpeakeasyMetadata({ elemType: Event })
  @Expose({ name: "Events" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Event> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Event);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  events: Record<string, Event>;
}
