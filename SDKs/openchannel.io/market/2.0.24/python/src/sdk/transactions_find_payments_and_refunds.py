"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class TransactionsFindPaymentsAndRefunds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_transactions_transaction_id_(self, request: operations.DeleteTransactionsTransactionIDRequest) -> operations.DeleteTransactionsTransactionIDResponse:
        r"""Deleted a transaction
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTransactionsTransactionIDRequest, base_url, '/transactions/{transactionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTransactionsTransactionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_transactions(self, request: operations.GetTransactionsRequest) -> operations.GetTransactionsResponse:
        r"""Returns a paginated list of transactions
        - Results are paginated and the default is value is 100 if no limit is provided
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/transactions'
        
        query_params = utils.get_query_params(operations.GetTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_transactions_transaction_id_(self, request: operations.GetTransactionsTransactionIDRequest) -> operations.GetTransactionsTransactionIDResponse:
        r"""Returns a transaction
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsTransactionIDRequest, base_url, '/transactions/{transactionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsTransactionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_transactions_transaction_id_(self, request: operations.PostTransactionsTransactionIDRequest) -> operations.PostTransactionsTransactionIDResponse:
        r"""Updates a transaction
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTransactionsTransactionIDRequest, base_url, '/transactions/{transactionId}', request)
        
        query_params = utils.get_query_params(operations.PostTransactionsTransactionIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTransactionsTransactionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    