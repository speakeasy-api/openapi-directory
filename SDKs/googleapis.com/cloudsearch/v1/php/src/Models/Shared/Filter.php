<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Filter - A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Filter
{
	#[\JMS\Serializer\Annotation\SerializedName('compositeFilter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CompositeFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CompositeFilter $compositeFilter = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('valueFilter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ValueFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ValueFilter $valueFilter = null;
    
	public function __construct()
	{
		$this->compositeFilter = null;
		$this->valueFilter = null;
	}
}
