/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FileReference } from "./filereference";
import { ToolExitCode } from "./toolexitcode";
import { ToolOutputReference } from "./tooloutputreference";
import { Expose, Type } from "class-transformer";

/**
 * An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
 */
export class ToolExecution extends SpeakeasyBase {
  /**
   * The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commandLineArguments" })
  commandLineArguments?: string[];

  /**
   * Exit code from a tool execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exitCode" })
  @Type(() => ToolExitCode)
  exitCode?: ToolExitCode;

  /**
   * References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
   */
  @SpeakeasyMetadata({ elemType: FileReference })
  @Expose({ name: "toolLogs" })
  @Type(() => FileReference)
  toolLogs?: FileReference[];

  /**
   * References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
   */
  @SpeakeasyMetadata({ elemType: ToolOutputReference })
  @Expose({ name: "toolOutputs" })
  @Type(() => ToolOutputReference)
  toolOutputs?: ToolOutputReference[];
}
