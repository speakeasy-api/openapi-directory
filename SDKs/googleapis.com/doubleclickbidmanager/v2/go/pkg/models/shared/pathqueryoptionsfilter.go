// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PathQueryOptionsFilterMatchEnum - Match logic of the filter.
type PathQueryOptionsFilterMatchEnum string

const (
	PathQueryOptionsFilterMatchEnumUnknown            PathQueryOptionsFilterMatchEnum = "UNKNOWN"
	PathQueryOptionsFilterMatchEnumExact              PathQueryOptionsFilterMatchEnum = "EXACT"
	PathQueryOptionsFilterMatchEnumPartial            PathQueryOptionsFilterMatchEnum = "PARTIAL"
	PathQueryOptionsFilterMatchEnumBeginsWith         PathQueryOptionsFilterMatchEnum = "BEGINS_WITH"
	PathQueryOptionsFilterMatchEnumWildcardExpression PathQueryOptionsFilterMatchEnum = "WILDCARD_EXPRESSION"
)

func (e *PathQueryOptionsFilterMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "EXACT":
		fallthrough
	case "PARTIAL":
		fallthrough
	case "BEGINS_WITH":
		fallthrough
	case "WILDCARD_EXPRESSION":
		*e = PathQueryOptionsFilterMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PathQueryOptionsFilterMatchEnum: %s", s)
	}
}

// PathQueryOptionsFilter - Dimension filter on path events.
type PathQueryOptionsFilter struct {
	// Dimension the filter is applied to.
	Filter *string `json:"filter,omitempty"`
	// Match logic of the filter.
	Match *PathQueryOptionsFilterMatchEnum `json:"match,omitempty"`
	// Values to filter on.
	Values []string `json:"values,omitempty"`
}
