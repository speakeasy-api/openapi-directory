"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Topics:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bookmark_topic(self, request: operations.BookmarkTopicRequest) -> operations.BookmarkTopicResponse:
        r"""Bookmark topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BookmarkTopicRequest, base_url, '/t/{id}/bookmark.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BookmarkTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_topic_post_pm(self, request: operations.CreateTopicPostPMRequestBody) -> operations.CreateTopicPostPMResponse:
        r"""Creates a new topic, a new post, or a private message"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/posts.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTopicPostPMResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateTopicPostPM200ApplicationJSON])
                res.create_topic_post_pm_200_application_json_object = out

        return res

    def create_topic_timer(self, request: operations.CreateTopicTimerRequest) -> operations.CreateTopicTimerResponse:
        r"""Create topic timer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTopicTimerRequest, base_url, '/t/{id}/timer.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTopicTimerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateTopicTimer200ApplicationJSON])
                res.create_topic_timer_200_application_json_object = out

        return res

    def get_specific_posts_from_topic(self, request: operations.GetSpecificPostsFromTopicRequest) -> operations.GetSpecificPostsFromTopicResponse:
        r"""Get specific posts from a topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpecificPostsFromTopicRequest, base_url, '/t/{id}/posts.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpecificPostsFromTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpecificPostsFromTopic200ApplicationJSON])
                res.get_specific_posts_from_topic_200_application_json_object = out

        return res

    def get_topic(self, request: operations.GetTopicRequest) -> operations.GetTopicResponse:
        r"""Get a single topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTopicRequest, base_url, '/t/{id}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTopic200ApplicationJSON])
                res.get_topic_200_application_json_object = out

        return res

    def get_topic_by_external_id(self, request: operations.GetTopicByExternalIDRequest) -> operations.GetTopicByExternalIDResponse:
        r"""Get topic by external_id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTopicByExternalIDRequest, base_url, '/t/external_id/{external_id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTopicByExternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def invite_to_topic(self, request: operations.InviteToTopicRequest) -> operations.InviteToTopicResponse:
        r"""Invite to topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.InviteToTopicRequest, base_url, '/t/{id}/invite.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InviteToTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InviteToTopic200ApplicationJSON])
                res.invite_to_topic_200_application_json_object = out

        return res

    def list_latest_topics(self, request: operations.ListLatestTopicsRequest) -> operations.ListLatestTopicsResponse:
        r"""Get the latest topics"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/latest.json'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListLatestTopicsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLatestTopicsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListLatestTopics200ApplicationJSON])
                res.list_latest_topics_200_application_json_object = out

        return res

    def list_top_topics(self, request: operations.ListTopTopicsRequest) -> operations.ListTopTopicsResponse:
        r"""Get the top topics filtered by period"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/top.json'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListTopTopicsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTopTopicsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTopTopics200ApplicationJSON])
                res.list_top_topics_200_application_json_object = out

        return res

    def remove_topic(self, request: operations.RemoveTopicRequest) -> operations.RemoveTopicResponse:
        r"""Remove a topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveTopicRequest, base_url, '/t/{id}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def set_notification_level(self, request: operations.SetNotificationLevelRequest) -> operations.SetNotificationLevelResponse:
        r"""Set notification level"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetNotificationLevelRequest, base_url, '/t/{id}/notifications.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetNotificationLevelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetNotificationLevel200ApplicationJSON])
                res.set_notification_level_200_application_json_object = out

        return res

    def update_topic(self, request: operations.UpdateTopicRequest) -> operations.UpdateTopicResponse:
        r"""Update a topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTopicRequest, base_url, '/t/-/{id}.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateTopic200ApplicationJSON])
                res.update_topic_200_application_json_object = out

        return res

    def update_topic_status(self, request: operations.UpdateTopicStatusRequest) -> operations.UpdateTopicStatusResponse:
        r"""Update the status of a topic"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTopicStatusRequest, base_url, '/t/{id}/status.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTopicStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateTopicStatus200ApplicationJSON])
                res.update_topic_status_200_application_json_object = out

        return res

    def update_topic_timestamp(self, request: operations.UpdateTopicTimestampRequest) -> operations.UpdateTopicTimestampResponse:
        r"""Update topic timestamp"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTopicTimestampRequest, base_url, '/t/{id}/change-timestamp.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTopicTimestampResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateTopicTimestamp200ApplicationJSON])
                res.update_topic_timestamp_200_application_json_object = out

        return res

    