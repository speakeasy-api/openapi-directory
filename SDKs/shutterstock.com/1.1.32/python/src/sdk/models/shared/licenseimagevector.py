"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cookie as shared_cookie
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class LicenseImageVectorFormatEnum(str, Enum):
    r"""(Deprecated) Image format to download"""
    EPS = 'eps'

class LicenseImageVectorSizeEnum(str, Enum):
    r"""Image size to download"""
    VECTOR = 'vector'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LicenseImageVector:
    r"""Data required to license an image"""
    
    image_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_id') }})
    r"""Image ID"""  
    auth_cookie: Optional[shared_cookie.Cookie] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_cookie'), 'exclude': lambda f: f is None }})
    r"""Cookie object"""  
    editorial_acknowledgement: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editorial_acknowledgement'), 'exclude': lambda f: f is None }})
    r"""Set to true to acknowledge the editorial agreement"""  
    format: Optional[LicenseImageVectorFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""(Deprecated) Image format to download"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder"""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34"""  
    search_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_id'), 'exclude': lambda f: f is None }})
    r"""ID of the search that led to this licensing transaction"""  
    show_modal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_modal'), 'exclude': lambda f: f is None }})
    r"""(Deprecated)"""  
    size: Optional[LicenseImageVectorSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Image size to download"""  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_id'), 'exclude': lambda f: f is None }})
    r"""ID of the subscription to use for the download."""  
    verification_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_code'), 'exclude': lambda f: f is None }})
    r"""(Deprecated)"""  
    