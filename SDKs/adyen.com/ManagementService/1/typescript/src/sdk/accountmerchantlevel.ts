/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccountMerchantLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of merchant accounts
   *
   * @remarks
   * Returns the list of merchant accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Account read
   */
  getMerchants(
    req: operations.GetMerchantsRequest,
    security: operations.GetMerchantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/merchants";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsResponse =
        new operations.GetMerchantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMerchantResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMerchantResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a merchant account
   *
   * @remarks
   * Returns the merchant account specified in the path. Your API credential must have access to the merchant account.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Account read
   */
  getMerchantsMerchantId(
    req: operations.GetMerchantsMerchantIdRequest,
    security: operations.GetMerchantsMerchantIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdResponse =
        new operations.GetMerchantsMerchantIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.merchant = utils.objectToClass(httpRes?.data, shared.Merchant);
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a merchant account
   *
   * @remarks
   * Creates a merchant account for the company account specified in the request.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Accounts read and write
   */
  postMerchants(
    req: shared.CreateMerchantRequest,
    security: operations.PostMerchantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateMerchantRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/merchants";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostMerchantsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsResponse =
        new operations.PostMerchantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createMerchantResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateMerchantResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request to activate a merchant account
   *
   * @remarks
   * Sends a request to activate the merchant account identified in the path.
   *
   * You get the result of the activation asychronously through a [`merchant.updated`](https://docs.adyen.com/api-explorer/ManagementNotification/latest/post/merchant.updated) webhook. Once the merchant account is activated, you can start using it to accept payments and payouts.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Accounts read and write
   */
  postMerchantsMerchantIdActivate(
    req: operations.PostMerchantsMerchantIdActivateRequest,
    security: operations.PostMerchantsMerchantIdActivateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdActivateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMerchantsMerchantIdActivateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/activate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostMerchantsMerchantIdActivateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdActivateResponse =
        new operations.PostMerchantsMerchantIdActivateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.requestActivationResponse = utils.objectToClass(
              httpRes?.data,
              shared.RequestActivationResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
