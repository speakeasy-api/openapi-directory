"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Team:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bulk_create_team_members(self, request: shared.BulkCreateTeamMembersRequest, security: operations.BulkCreateTeamMembersSecurity) -> operations.BulkCreateTeamMembersResponse:
        r"""BulkCreateTeamMembers
        Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
        This process is non-transactional and processes as much of the request as possible. If one of the creates in
        the request cannot be successfully processed, the request is not marked as failed, but the body of the response
        contains explicit error information for the failed create.
        
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/team-members/bulk-create'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkCreateTeamMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkCreateTeamMembersResponse])
                res.bulk_create_team_members_response = out

        return res

    def bulk_update_team_members(self, request: shared.BulkUpdateTeamMembersRequest, security: operations.BulkUpdateTeamMembersSecurity) -> operations.BulkUpdateTeamMembersResponse:
        r"""BulkUpdateTeamMembers
        Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
        This process is non-transactional and processes as much of the request as possible. If one of the updates in
        the request cannot be successfully processed, the request is not marked as failed, but the body of the response
        contains explicit error information for the failed update.
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/team-members/bulk-update'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpdateTeamMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkUpdateTeamMembersResponse])
                res.bulk_update_team_members_response = out

        return res

    def create_team_member(self, request: shared.CreateTeamMemberRequest, security: operations.CreateTeamMemberSecurity) -> operations.CreateTeamMemberResponse:
        r"""CreateTeamMember
        Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
        You must provide the following values in your request to this endpoint:
        - `given_name`
        - `family_name`
        
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/team-members'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTeamMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateTeamMemberResponse])
                res.create_team_member_response = out

        return res

    def retrieve_team_member(self, request: operations.RetrieveTeamMemberRequest, security: operations.RetrieveTeamMemberSecurity) -> operations.RetrieveTeamMemberResponse:
        r"""RetrieveTeamMember
        Retrieves a `TeamMember` object for the given `TeamMember.id`.
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveTeamMemberRequest, base_url, '/v2/team-members/{team_member_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveTeamMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveTeamMemberResponse])
                res.retrieve_team_member_response = out

        return res

    def retrieve_wage_setting(self, request: operations.RetrieveWageSettingRequest, security: operations.RetrieveWageSettingSecurity) -> operations.RetrieveWageSettingResponse:
        r"""RetrieveWageSetting
        Retrieves a `WageSetting` object for a team member specified
        by `TeamMember.id`.
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveWageSettingRequest, base_url, '/v2/team-members/{team_member_id}/wage-setting', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveWageSettingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveWageSettingResponse])
                res.retrieve_wage_setting_response = out

        return res

    def search_team_members(self, request: shared.SearchTeamMembersRequest, security: operations.SearchTeamMembersSecurity) -> operations.SearchTeamMembersResponse:
        r"""SearchTeamMembers
        Returns a paginated list of `TeamMember` objects for a business.
        The list can be filtered by the following:
        - location IDs
        - `status`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/team-members/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchTeamMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchTeamMembersResponse])
                res.search_team_members_response = out

        return res

    def update_team_member(self, request: operations.UpdateTeamMemberRequest, security: operations.UpdateTeamMemberSecurity) -> operations.UpdateTeamMemberResponse:
        r"""UpdateTeamMember
        Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTeamMemberRequest, base_url, '/v2/team-members/{team_member_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_team_member_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTeamMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateTeamMemberResponse])
                res.update_team_member_response = out

        return res

    def update_wage_setting(self, request: operations.UpdateWageSettingRequest, security: operations.UpdateWageSettingSecurity) -> operations.UpdateWageSettingResponse:
        r"""UpdateWageSetting
        Creates or updates a `WageSetting` object. The object is created if a
        `WageSetting` with the specified `team_member_id` does not exist. Otherwise,
        it fully replaces the `WageSetting` object for the team member.
        The `WageSetting` is returned on a successful update.
        Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateWageSettingRequest, base_url, '/v2/team-members/{team_member_id}/wage-setting', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_wage_setting_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWageSettingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateWageSettingResponse])
                res.update_wage_setting_response = out

        return res

    