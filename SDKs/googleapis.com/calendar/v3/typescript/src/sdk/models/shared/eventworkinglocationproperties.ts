/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * If present, specifies that the user is working from a custom location.
 */
export class EventWorkingLocationPropertiesCustomLocation extends SpeakeasyBase {
  /**
   * An optional extra label for additional information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;
}

/**
 * If present, specifies that the user is working from an office.
 */
export class EventWorkingLocationPropertiesOfficeLocation extends SpeakeasyBase {
  /**
   * An optional building identifier. This should reference a building ID in the organization's Resources database.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildingId" })
  buildingId?: string;

  /**
   * An optional arbitrary desk identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deskId" })
  deskId?: string;

  /**
   * An optional arbitrary floor identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "floorId" })
  floorId?: string;

  /**
   * An optional arbitrary floor section identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "floorSectionId" })
  floorSectionId?: string;

  /**
   * An optional extra label for additional information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;
}

export class EventWorkingLocationProperties extends SpeakeasyBase {
  /**
   * If present, specifies that the user is working from a custom location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customLocation" })
  @Type(() => EventWorkingLocationPropertiesCustomLocation)
  customLocation?: EventWorkingLocationPropertiesCustomLocation;

  /**
   * If present, specifies that the user is working at home.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "homeOffice" })
  homeOffice?: any;

  /**
   * If present, specifies that the user is working from an office.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "officeLocation" })
  @Type(() => EventWorkingLocationPropertiesOfficeLocation)
  officeLocation?: EventWorkingLocationPropertiesOfficeLocation;
}
