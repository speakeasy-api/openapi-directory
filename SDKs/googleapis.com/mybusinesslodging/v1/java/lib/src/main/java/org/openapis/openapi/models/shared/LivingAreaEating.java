/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivingAreaEating - Information about eating features in the living area.
 */
public class LivingAreaEating {
    /**
     * Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coffeeMaker")
    public Boolean coffeeMaker;

    public LivingAreaEating withCoffeeMaker(Boolean coffeeMaker) {
        this.coffeeMaker = coffeeMaker;
        return this;
    }
    
    /**
     * Coffee maker exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coffeeMakerException")
    public LivingAreaEatingCoffeeMakerExceptionEnum coffeeMakerException;

    public LivingAreaEating withCoffeeMakerException(LivingAreaEatingCoffeeMakerExceptionEnum coffeeMakerException) {
        this.coffeeMakerException = coffeeMakerException;
        return this;
    }
    
    /**
     * Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookware")
    public Boolean cookware;

    public LivingAreaEating withCookware(Boolean cookware) {
        this.cookware = cookware;
        return this;
    }
    
    /**
     * Cookware exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookwareException")
    public LivingAreaEatingCookwareExceptionEnum cookwareException;

    public LivingAreaEating withCookwareException(LivingAreaEatingCookwareExceptionEnum cookwareException) {
        this.cookwareException = cookwareException;
        return this;
    }
    
    /**
     * Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dishwasher")
    public Boolean dishwasher;

    public LivingAreaEating withDishwasher(Boolean dishwasher) {
        this.dishwasher = dishwasher;
        return this;
    }
    
    /**
     * Dishwasher exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dishwasherException")
    public LivingAreaEatingDishwasherExceptionEnum dishwasherException;

    public LivingAreaEating withDishwasherException(LivingAreaEatingDishwasherExceptionEnum dishwasherException) {
        this.dishwasherException = dishwasherException;
        return this;
    }
    
    /**
     * Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indoorGrill")
    public Boolean indoorGrill;

    public LivingAreaEating withIndoorGrill(Boolean indoorGrill) {
        this.indoorGrill = indoorGrill;
        return this;
    }
    
    /**
     * Indoor grill exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indoorGrillException")
    public LivingAreaEatingIndoorGrillExceptionEnum indoorGrillException;

    public LivingAreaEating withIndoorGrillException(LivingAreaEatingIndoorGrillExceptionEnum indoorGrillException) {
        this.indoorGrillException = indoorGrillException;
        return this;
    }
    
    /**
     * Kettle. A covered container with a handle and a spout used for boiling water.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kettle")
    public Boolean kettle;

    public LivingAreaEating withKettle(Boolean kettle) {
        this.kettle = kettle;
        return this;
    }
    
    /**
     * Kettle exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kettleException")
    public LivingAreaEatingKettleExceptionEnum kettleException;

    public LivingAreaEating withKettleException(LivingAreaEatingKettleExceptionEnum kettleException) {
        this.kettleException = kettleException;
        return this;
    }
    
    /**
     * Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kitchenAvailable")
    public Boolean kitchenAvailable;

    public LivingAreaEating withKitchenAvailable(Boolean kitchenAvailable) {
        this.kitchenAvailable = kitchenAvailable;
        return this;
    }
    
    /**
     * Kitchen available exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kitchenAvailableException")
    public LivingAreaEatingKitchenAvailableExceptionEnum kitchenAvailableException;

    public LivingAreaEating withKitchenAvailableException(LivingAreaEatingKitchenAvailableExceptionEnum kitchenAvailableException) {
        this.kitchenAvailableException = kitchenAvailableException;
        return this;
    }
    
    /**
     * Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microwave")
    public Boolean microwave;

    public LivingAreaEating withMicrowave(Boolean microwave) {
        this.microwave = microwave;
        return this;
    }
    
    /**
     * Microwave exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microwaveException")
    public LivingAreaEatingMicrowaveExceptionEnum microwaveException;

    public LivingAreaEating withMicrowaveException(LivingAreaEatingMicrowaveExceptionEnum microwaveException) {
        this.microwaveException = microwaveException;
        return this;
    }
    
    /**
     * Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minibar")
    public Boolean minibar;

    public LivingAreaEating withMinibar(Boolean minibar) {
        this.minibar = minibar;
        return this;
    }
    
    /**
     * Minibar exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minibarException")
    public LivingAreaEatingMinibarExceptionEnum minibarException;

    public LivingAreaEating withMinibarException(LivingAreaEatingMinibarExceptionEnum minibarException) {
        this.minibarException = minibarException;
        return this;
    }
    
    /**
     * Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outdoorGrill")
    public Boolean outdoorGrill;

    public LivingAreaEating withOutdoorGrill(Boolean outdoorGrill) {
        this.outdoorGrill = outdoorGrill;
        return this;
    }
    
    /**
     * Outdoor grill exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outdoorGrillException")
    public LivingAreaEatingOutdoorGrillExceptionEnum outdoorGrillException;

    public LivingAreaEating withOutdoorGrillException(LivingAreaEatingOutdoorGrillExceptionEnum outdoorGrillException) {
        this.outdoorGrillException = outdoorGrillException;
        return this;
    }
    
    /**
     * Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oven")
    public Boolean oven;

    public LivingAreaEating withOven(Boolean oven) {
        this.oven = oven;
        return this;
    }
    
    /**
     * Oven exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ovenException")
    public LivingAreaEatingOvenExceptionEnum ovenException;

    public LivingAreaEating withOvenException(LivingAreaEatingOvenExceptionEnum ovenException) {
        this.ovenException = ovenException;
        return this;
    }
    
    /**
     * Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refrigerator")
    public Boolean refrigerator;

    public LivingAreaEating withRefrigerator(Boolean refrigerator) {
        this.refrigerator = refrigerator;
        return this;
    }
    
    /**
     * Refrigerator exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refrigeratorException")
    public LivingAreaEatingRefrigeratorExceptionEnum refrigeratorException;

    public LivingAreaEating withRefrigeratorException(LivingAreaEatingRefrigeratorExceptionEnum refrigeratorException) {
        this.refrigeratorException = refrigeratorException;
        return this;
    }
    
    /**
     * Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sink")
    public Boolean sink;

    public LivingAreaEating withSink(Boolean sink) {
        this.sink = sink;
        return this;
    }
    
    /**
     * Sink exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sinkException")
    public LivingAreaEatingSinkExceptionEnum sinkException;

    public LivingAreaEating withSinkException(LivingAreaEatingSinkExceptionEnum sinkException) {
        this.sinkException = sinkException;
        return this;
    }
    
    /**
     * Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snackbar")
    public Boolean snackbar;

    public LivingAreaEating withSnackbar(Boolean snackbar) {
        this.snackbar = snackbar;
        return this;
    }
    
    /**
     * Snackbar exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snackbarException")
    public LivingAreaEatingSnackbarExceptionEnum snackbarException;

    public LivingAreaEating withSnackbarException(LivingAreaEatingSnackbarExceptionEnum snackbarException) {
        this.snackbarException = snackbarException;
        return this;
    }
    
    /**
     * Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stove")
    public Boolean stove;

    public LivingAreaEating withStove(Boolean stove) {
        this.stove = stove;
        return this;
    }
    
    /**
     * Stove exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stoveException")
    public LivingAreaEatingStoveExceptionEnum stoveException;

    public LivingAreaEating withStoveException(LivingAreaEatingStoveExceptionEnum stoveException) {
        this.stoveException = stoveException;
        return this;
    }
    
    /**
     * Tea station. A small area with the supplies needed to heat water and make tea.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teaStation")
    public Boolean teaStation;

    public LivingAreaEating withTeaStation(Boolean teaStation) {
        this.teaStation = teaStation;
        return this;
    }
    
    /**
     * Tea station exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teaStationException")
    public LivingAreaEatingTeaStationExceptionEnum teaStationException;

    public LivingAreaEating withTeaStationException(LivingAreaEatingTeaStationExceptionEnum teaStationException) {
        this.teaStationException = teaStationException;
        return this;
    }
    
    /**
     * Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toaster")
    public Boolean toaster;

    public LivingAreaEating withToaster(Boolean toaster) {
        this.toaster = toaster;
        return this;
    }
    
    /**
     * Toaster exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toasterException")
    public LivingAreaEatingToasterExceptionEnum toasterException;

    public LivingAreaEating withToasterException(LivingAreaEatingToasterExceptionEnum toasterException) {
        this.toasterException = toasterException;
        return this;
    }
    
    public LivingAreaEating(){}
}
