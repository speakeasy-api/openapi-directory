/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostEntitiesRequestBody {
    /**
     * Solo necesario cuando se est\u00e9 completando la seguda petici\u00f3n de un login con 2 factores de autenticaci\u00f3n, si el tipo de desaf\u00edo es OTP. Requiere la clave que la entidad le ha enviado al usario final
     */
    @SpeakeasyMetadata("form:name=OTP")
    public String otp;
    public PostEntitiesRequestBody withOtp(String otp) {
        this.otp = otp;
        return this;
    }
    
    /**
     * Solo necesario cuando se est\u00e9 completando la seguda petici\u00f3n de un login con 2 factores de autenticaci\u00f3n. Requiere el valor de SESSION obtenido en la primera petici\u00f3n
     */
    @SpeakeasyMetadata("form:name=SESSION")
    public String session;
    public PostEntitiesRequestBody withSession(String session) {
        this.session = session;
        return this;
    }
    
    /**
     * Identifica al cliente en el servicio
     */
    @SpeakeasyMetadata("form:name=api_key")
    public String apiKey;
    public PostEntitiesRequestBody withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Nombre de la entidad. El listado completo est\u00e1 disponible con GET
     */
    @SpeakeasyMetadata("form:name=code")
    public String code;
    public PostEntitiesRequestBody withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Solo necesario cuando el usuario puede acceder a m\u00e1s de un contrato. El listado de contratos disponibles se obtiene al realizar una conexi\u00f3n con un usuario con opci\u00f3n a trabajar con varios contratos en su entidad (que al hacer login en su banca online ve como primera opci\u00f3n una pantalla de selecci\u00f3n de contratos) y cuya llamada a la API no se le ha especificado un valor a contract_code
     */
    @SpeakeasyMetadata("form:name=contract_code")
    public String contractCode;
    public PostEntitiesRequestBody withContractCode(String contractCode) {
        this.contractCode = contractCode;
        return this;
    }
    
    /**
     * Tipo de documento, requerido seg\u00fan la entidad. Si es requerido o no, est\u00e1 indicado en el listado de entidades. Ver definici\u00f3n.
     */
    @SpeakeasyMetadata("form:name=document_type")
    public PostEntitiesRequestBodyDocumentTypeEnum documentType;
    public PostEntitiesRequestBody withDocumentType(PostEntitiesRequestBodyDocumentTypeEnum documentType) {
        this.documentType = documentType;
        return this;
    }
    
    /**
     * Contrase\u00f1a
     */
    @SpeakeasyMetadata("form:name=password")
    public String password;
    public PostEntitiesRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Segunda contrase\u00f1a, requerida seg\u00fan la entidad.
     */
    @SpeakeasyMetadata("form:name=second_password")
    public String secondPassword;
    public PostEntitiesRequestBody withSecondPassword(String secondPassword) {
        this.secondPassword = secondPassword;
        return this;
    }
    
    /**
     * Valor para credenciales custodiadas, tokenizadas previamente mediante una llamada a este m\u00e9todo con el valor de tokenize=true. Est\u00e1n disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desaf\u00edo OTP; MOCKLOGINKO, respuesta con error de login
     */
    @SpeakeasyMetadata("form:name=token")
    public String token;
    public PostEntitiesRequestBody withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * Indica si Wealth Reader debe custodiar los credenciales, de tal manera que inclu\u00eddo en el body de respuesta estar\u00e1 un token que permite conectar con la entidad sin necesidad de conocer los credenciales: document_type, user, password, second_password, contract_code
     */
    @SpeakeasyMetadata("form:name=tokenize")
    public Boolean tokenize;
    public PostEntitiesRequestBody withTokenize(Boolean tokenize) {
        this.tokenize = tokenize;
        return this;
    }
    
    /**
     * Usuario. Est\u00e1n disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desaf\u00edo OTP; MOCKLOGINKO, respuesta con error de login
     */
    @SpeakeasyMetadata("form:name=user")
    public String user;
    public PostEntitiesRequestBody withUser(String user) {
        this.user = user;
        return this;
    }
    
}
