<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Support 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Request the password of an account's primary profile be reset.
     * 
     * Should be called when a user has forgotten their password.
     * 
     * This will send an email with a password reset link to the email address of the
     * primary profile of an account.
     * 
     * The link, once clicked, should take the user to the "reset-password" page of the
     * website. Here they will enter their new password and submit to the /reset-password
     * endpoint here, along with the password reset token provided in the original link.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordResponse
     */
	public function forgotPassword(
        \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/request-password-reset');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "passwordResetEmailRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForgotPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of subscription data for a user with specified id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataResponse
     */
	public function getSubscriptionData(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/check-subscription/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * When a user requests to reset their password via the /request-password-reset endpoint, an
     * email is sent to the email address of the primary profile of the account. This email contains a link
     * with a reset token as query parameter. The link should take the user to the "reset-password"
     * page of the website.
     * 
     * From the reset-password page a user should enter the new password they wish to use. 
     * It should then be submitted to this endpoint,
     * along with the reset token from the email link. 
     * The token should be provided in the body as resetToken property.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
     */
	public function resetPassword(
        \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reset-password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "passwordResetRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * When an account is created an email is sent to the email address of the new account.
     * This contains a link, which once clicked, verifies the email address of the account is correct.
     * 
     * The link contains a token as a query parameter which should be passed as the authorization
     * bearer token to this endpoint to complete email verification.
     * 
     * The token has en expiry, so if the link is not clicked before it expires, the account holder
     * may need to request a new verification email be sent. This can be done via the endpoint
     * /account/request-email-verification.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyEmailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyEmailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifyEmailResponse
     */
	public function verifyEmail(
        \OpenAPI\OpenAPI\Models\Operations\VerifyEmailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VerifyEmailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifyEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/verify-email');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VerifyEmailRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifyEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}