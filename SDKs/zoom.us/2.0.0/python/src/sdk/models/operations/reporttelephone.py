"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportTelephoneSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ReportTelephoneTypeEnum(str, Enum):
    r"""Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>
    `3` - SIP Connected Audio
    """
    ONE = '1'
    THREE = '3'


@dataclasses.dataclass
class ReportTelephoneRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \\"next_page_token\\" for pagination instead of this field.
    
    The page number of the current page in the returned records.
    """  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[ReportTelephoneTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>
    `3` - SIP Connected Audio
    """  
    
class ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum(str, Enum):
    r"""Call type."""
    TOLL_FREE = 'toll-free'
    CALL_OUT = 'call-out'
    CALL_IN = 'call-in'
    US_TOLL_NUMBER = 'US toll-number'
    GLOBAL_TOLL_NUMBER = 'global toll-number'
    PREMIUM = 'premium'
    PREMIUM_CALL_IN = 'premium call-in'


@dataclasses.dataclass
class ReportTelephone200ApplicationXMLTelephonyUsage:
    
    call_in_number: Optional[str] = dataclasses.field(default=None)
    r"""Caller's call-in number."""  
    country_name: Optional[str] = dataclasses.field(default=None)
    r"""Country name."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""User department."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Call leg duration"""  
    end_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Call leg end time"""  
    host_email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    host_id: Optional[str] = dataclasses.field(default=None)
    r"""The user ID of the meeting host."""  
    host_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    meeting_id: Optional[int] = dataclasses.field(default=None)
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    meeting_type: Optional[str] = dataclasses.field(default=None)
    r"""Meeting type."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""Toll-free telephone number."""  
    rate: Optional[float] = dataclasses.field(default=None)
    r"""Calling rate for the telephone call."""  
    signaled_number: Optional[str] = dataclasses.field(default=None)
    r"""The number that is signaled to Zoom."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Call leg start time"""  
    total: Optional[float] = dataclasses.field(default=None)
    r"""Total cost (USD) for Call Out. Calculated as plan rate by duration."""  
    type: Optional[ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum] = dataclasses.field(default=None)
    r"""Call type."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Meeting UUID."""  
    

@dataclasses.dataclass
class ReportTelephone200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Telephone report returned.<br>
    This is only available for paid account:{accountId}.<br>
    The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
    Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
    """
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report."""  
    next_page_token: Optional[int] = dataclasses.field(default=None)
    r"""The page number of the current results."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    telephony_usage: Optional[list[ReportTelephone200ApplicationXMLTelephonyUsage]] = dataclasses.field(default=None)
    r"""Array of telephony objects."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of all the records available across pages."""  
    
class ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum(str, Enum):
    r"""Call type."""
    TOLL_FREE = 'toll-free'
    CALL_OUT = 'call-out'
    CALL_IN = 'call-in'
    US_TOLL_NUMBER = 'US toll-number'
    GLOBAL_TOLL_NUMBER = 'global toll-number'
    PREMIUM = 'premium'
    PREMIUM_CALL_IN = 'premium call-in'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportTelephone200ApplicationJSONTelephonyUsage:
    
    call_in_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_in_number'), 'exclude': lambda f: f is None }})
    r"""Caller's call-in number."""  
    country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_name'), 'exclude': lambda f: f is None }})
    r"""Country name."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""User department."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Call leg duration"""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Call leg end time"""  
    host_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    host_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_id'), 'exclude': lambda f: f is None }})
    r"""The user ID of the meeting host."""  
    host_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    meeting_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_id'), 'exclude': lambda f: f is None }})
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    meeting_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_type'), 'exclude': lambda f: f is None }})
    r"""Meeting type."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Toll-free telephone number."""  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""Calling rate for the telephone call."""  
    signaled_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signaled_number'), 'exclude': lambda f: f is None }})
    r"""The number that is signaled to Zoom."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Call leg start time"""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total cost (USD) for Call Out. Calculated as plan rate by duration."""  
    type: Optional[ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Call type."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Meeting UUID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportTelephone200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Telephone report returned.<br>
    This is only available for paid account:{accountId}.<br>
    The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
    Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
    """
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report."""  
    next_page_token: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The page number of the current results."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    telephony_usage: Optional[list[ReportTelephone200ApplicationJSONTelephonyUsage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephony_usage'), 'exclude': lambda f: f is None }})
    r"""Array of telephony objects."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of all the records available across pages."""  
    

@dataclasses.dataclass
class ReportTelephoneResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_telephone_200_application_json_object: Optional[ReportTelephone200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Telephone report returned.<br>
    This is only available for paid account:{accountId}.<br>
    The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
    Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
    """  
    