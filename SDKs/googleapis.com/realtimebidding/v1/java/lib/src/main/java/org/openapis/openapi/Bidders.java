/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Bidders {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Bidders(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchResponse realtimebiddingBiddersCreativesWatch(org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchRequest.class, baseUrl, "/v1/{parent}/creatives:watch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersCreativesWatchResponse(contentType, httpRes.statusCode()) {{
            watchCreativesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WatchCreativesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WatchCreativesResponse.class);
                res.watchCreativesResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists all the bidder's endpoints.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListResponse realtimebiddingBiddersEndpointsList(org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListRequest.class, baseUrl, "/v1/{parent}/endpoints", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersEndpointsListResponse(contentType, httpRes.statusCode()) {{
            listEndpointsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListEndpointsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListEndpointsResponse.class);
                res.listEndpointsResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists all the bidder accounts that belong to the caller.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersListResponse realtimebiddingBiddersList(org.openapis.openapi.models.operations.RealtimebiddingBiddersListRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/bidders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersListResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersListResponse(contentType, httpRes.statusCode()) {{
            listBiddersResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListBiddersResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListBiddersResponse.class);
                res.listBiddersResponse = out;
            }
        }

        return res;
    }

    /**
     * Activates a pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateResponse realtimebiddingBiddersPretargetingConfigsActivate(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateRequest.class, baseUrl, "/v1/{name}:activate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsActivateResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Adds targeted apps to the pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse realtimebiddingBiddersPretargetingConfigsAddTargetedApps(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest.class, baseUrl, "/v1/{pretargetingConfig}:addTargetedApps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "addTargetedAppsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Adds targeted publishers to the pretargeting config.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest.class, baseUrl, "/v1/{pretargetingConfig}:addTargetedPublishers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "addTargetedPublishersRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Adds targeted sites to the pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse realtimebiddingBiddersPretargetingConfigsAddTargetedSites(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest.class, baseUrl, "/v1/{pretargetingConfig}:addTargetedSites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "addTargetedSitesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Creates a pretargeting configuration. A pretargeting configuration's state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateResponse realtimebiddingBiddersPretargetingConfigsCreate(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateRequest.class, baseUrl, "/v1/{parent}/pretargetingConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "pretargetingConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsCreateResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Deletes a pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteResponse realtimebiddingBiddersPretargetingConfigsDelete(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsDeleteResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Lists all pretargeting configurations for a single bidder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListResponse realtimebiddingBiddersPretargetingConfigsList(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListRequest.class, baseUrl, "/v1/{parent}/pretargetingConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsListResponse(contentType, httpRes.statusCode()) {{
            listPretargetingConfigsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListPretargetingConfigsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListPretargetingConfigsResponse.class);
                res.listPretargetingConfigsResponse = out;
            }
        }

        return res;
    }

    /**
     * Removes targeted apps from the pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest.class, baseUrl, "/v1/{pretargetingConfig}:removeTargetedApps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "removeTargetedAppsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Removes targeted publishers from the pretargeting config.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest.class, baseUrl, "/v1/{pretargetingConfig}:removeTargetedPublishers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "removeTargetedPublishersRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Removes targeted sites from the pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest.class, baseUrl, "/v1/{pretargetingConfig}:removeTargetedSites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "removeTargetedSitesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Suspends a pretargeting configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendResponse realtimebiddingBiddersPretargetingConfigsSuspend(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendRequest.class, baseUrl, "/v1/{name}:suspend", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPretargetingConfigsSuspendResponse(contentType, httpRes.statusCode()) {{
            pretargetingConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PretargetingConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PretargetingConfig.class);
                res.pretargetingConfig = out;
            }
        }

        return res;
    }

    /**
     * Batch approves multiple publisher connections.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse realtimebiddingBiddersPublisherConnectionsBatchApprove(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest.class, baseUrl, "/v1/{parent}/publisherConnections:batchApprove", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "batchApprovePublisherConnectionsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse(contentType, httpRes.statusCode()) {{
            batchApprovePublisherConnectionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BatchApprovePublisherConnectionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BatchApprovePublisherConnectionsResponse.class);
                res.batchApprovePublisherConnectionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Batch rejects multiple publisher connections.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse realtimebiddingBiddersPublisherConnectionsBatchReject(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest.class, baseUrl, "/v1/{parent}/publisherConnections:batchReject", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "batchRejectPublisherConnectionsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse(contentType, httpRes.statusCode()) {{
            batchRejectPublisherConnectionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BatchRejectPublisherConnectionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BatchRejectPublisherConnectionsResponse.class);
                res.batchRejectPublisherConnectionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists publisher connections for a given bidder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListResponse realtimebiddingBiddersPublisherConnectionsList(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListRequest request, org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListRequest.class, baseUrl, "/v1/{parent}/publisherConnections", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListResponse res = new org.openapis.openapi.models.operations.RealtimebiddingBiddersPublisherConnectionsListResponse(contentType, httpRes.statusCode()) {{
            listPublisherConnectionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListPublisherConnectionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListPublisherConnectionsResponse.class);
                res.listPublisherConnectionsResponse = out;
            }
        }

        return res;
    }
}