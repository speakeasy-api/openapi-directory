"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import permissionentity as shared_permissionentity
from typing import Optional


@dataclasses.dataclass
class PostPermissionsRequestBody:
    
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'group_id' }})
    r"""Group ID"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'path' }})
    r"""Folder path"""  
    permission: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'permission' }})
    r"""Permission type.  Can be `admin`, `full`, `readonly`, `writeonly`, `list`, or `history`"""  
    recursive: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'recursive' }})
    r"""Apply to subfolders recursively?"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_id' }})
    r"""User ID.  Provide `username` or `user_id`"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'username' }})
    r"""User username.  Provide `username` or `user_id`"""  
    

@dataclasses.dataclass
class PostPermissionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    permission_entity: Optional[shared_permissionentity.PermissionEntity] = dataclasses.field(default=None)
    r"""The Permissions object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    