"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Welcome:
    r"""Welcome specific methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def addwebhook(self, request: operations.AddwebhookRequest, security: operations.AddwebhookSecurity) -> operations.AddwebhookResponse:
        r"""Links a callback url to a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/addwebhook'
        
        query_params = utils.get_query_params(operations.AddwebhookRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddwebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeWebhookResponse])
                res.na_welcome_webhook_response = out

        return res

    def dropwebhook(self, request: operations.DropwebhookRequest, security: operations.DropwebhookSecurity) -> operations.DropwebhookResponse:
        r"""Dissociates a webhook from a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dropwebhook'
        
        query_params = utils.get_query_params(operations.DropwebhookRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DropwebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeWebhookResponse])
                res.na_welcome_webhook_response = out

        return res

    def getcamerapicture(self, request: operations.GetcamerapictureRequest, security: operations.GetcamerapictureSecurity) -> operations.GetcamerapictureResponse:
        r"""Returns the snapshot associated to an event."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getcamerapicture'
        
        query_params = utils.get_query_params(operations.GetcamerapictureRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetcamerapictureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.getcamerapicture_200_application_json_byte_string = http_res.content

        return res

    def geteventsuntil(self, request: operations.GeteventsuntilRequest, security: operations.GeteventsuntilSecurity) -> operations.GeteventsuntilResponse:
        r"""Returns the snapshot associated to an event."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/geteventsuntil'
        
        query_params = utils.get_query_params(operations.GeteventsuntilRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeteventsuntilResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeEventResponse])
                res.na_welcome_event_response = out

        return res

    def gethomedata(self, request: operations.GethomedataRequest, security: operations.GethomedataSecurity) -> operations.GethomedataResponse:
        r"""Returns information about users homes and cameras."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/gethomedata'
        
        query_params = utils.get_query_params(operations.GethomedataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GethomedataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeHomeDataResponse])
                res.na_welcome_home_data_response = out

        return res

    def getlasteventof(self, request: operations.GetlasteventofRequest, security: operations.GetlasteventofSecurity) -> operations.GetlasteventofResponse:
        r"""Returns most recent events."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getlasteventof'
        
        query_params = utils.get_query_params(operations.GetlasteventofRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetlasteventofResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeEventResponse])
                res.na_welcome_event_response = out

        return res

    def getnextevents(self, request: operations.GetnexteventsRequest, security: operations.GetnexteventsSecurity) -> operations.GetnexteventsResponse:
        r"""Returns previous events."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getnextevents'
        
        query_params = utils.get_query_params(operations.GetnexteventsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetnexteventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomeEventResponse])
                res.na_welcome_event_response = out

        return res

    def setpersonsaway(self, request: operations.SetpersonsawayRequest, security: operations.SetpersonsawaySecurity) -> operations.SetpersonsawayResponse:
        r"""Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the userâ€™s timeline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setpersonsaway'
        
        query_params = utils.get_query_params(operations.SetpersonsawayRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetpersonsawayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomePersonsAwayResponse])
                res.na_welcome_persons_away_response = out

        return res

    def setpersonshome(self, request: operations.SetpersonshomeRequest, security: operations.SetpersonshomeSecurity) -> operations.SetpersonshomeResponse:
        r"""Sets a person as 'At home'."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setpersonshome'
        
        query_params = utils.get_query_params(operations.SetpersonshomeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetpersonshomeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAWelcomePersonsHomeResponse])
                res.na_welcome_persons_home_response = out

        return res

    