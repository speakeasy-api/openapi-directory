// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GroupNewProperties struct {
	// Property name
	Name string `json:"name"`
	// Property value (can be a string or JSON object)
	Value interface{} `json:"value"`
}

// GroupNewQueryCompositionEnum - Boolean operator to use between each  `where` criteria.
type GroupNewQueryCompositionEnum string

const (
	GroupNewQueryCompositionEnumAnd GroupNewQueryCompositionEnum = "and"
	GroupNewQueryCompositionEnumOr  GroupNewQueryCompositionEnum = "or"
)

func (e *GroupNewQueryCompositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "and":
		fallthrough
	case "or":
		*e = GroupNewQueryCompositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupNewQueryCompositionEnum: %s", s)
	}
}

type GroupNewQueryWhere struct {
	// Attribute to compare
	Attribute *string `json:"attribute,omitempty"`
	// Comparator to use
	Comparator *string `json:"comparator,omitempty"`
	// Type of the object
	ObjectType *string `json:"objectType,omitempty"`
	// Value to compare against
	Value *string `json:"value,omitempty"`
}

// GroupNewQuery - The criteria defining the group. If not provided, the group will be empty.
type GroupNewQuery struct {
	// Boolean operator to use between each  `where` criteria.
	Composition *GroupNewQueryCompositionEnum `json:"composition,omitempty"`
	// What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.
	Select *string `json:"select,omitempty"`
	// List of criteria
	Where []GroupNewQueryWhere `json:"where,omitempty"`
}

type GroupNew struct {
	// Id of the new group's category
	Category string `json:"category"`
	// Group description
	Description *string `json:"description,omitempty"`
	// Name of the group
	DisplayName string `json:"displayName"`
	// Should the group be dynamically refreshed (if not, it is a static group)
	Dynamic *bool `json:"dynamic,omitempty"`
	// Enable or disable the group
	Enabled *bool `json:"enabled,omitempty"`
	// Group id, only provide it when needed.
	ID *string `json:"id,omitempty"`
	// Group properties
	Properties []GroupNewProperties `json:"properties,omitempty"`
	// The criteria defining the group. If not provided, the group will be empty.
	Query *GroupNewQuery `json:"query,omitempty"`
	// The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source.
	Source *string `json:"source,omitempty"`
}
