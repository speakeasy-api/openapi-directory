/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Templates {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create
   */
  create(
    req: shared.BodyCreate,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BodyCreate(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/templates";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateResponse = new operations.CreateResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete
   */
  deleteTemplatesIdDelete(
    req: operations.DeleteTemplatesIdDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTemplatesIdDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTemplatesIdDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/templates/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTemplatesIdDeleteResponse =
        new operations.DeleteTemplatesIdDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkNoneType = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkNoneType
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fill
   */
  fill(
    req: operations.FillRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FillResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FillRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/templates/{id}/fill", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "fillTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FillResponse = new operations.FillResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fill200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Template
   */
  get(
    req: operations.GetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/templates/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResponse = new operations.GetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get File
   */
  getFileTemplatesIdFileGet(
    req: operations.GetFileTemplatesIdFileGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFileTemplatesIdFileGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFileTemplatesIdFileGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/templates/{id}/file", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFileTemplatesIdFileGetResponse =
        new operations.GetFileTemplatesIdFileGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkHttpUrl = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkHttpUrl
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List
   */
  list(
    req: operations.ListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/templates";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListResponse = new operations.ListResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkListAppsApiRoutesTemplatesTemplate =
              utils.objectToClass(
                httpRes?.data,
                shared.ResponseOkListAppsApiRoutesTemplatesTemplate
              );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update
   */
  update(
    req: operations.UpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/templates/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateResponse = new operations.UpdateResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }
}
