"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import computetype as shared_computetype
from ..shared import rootstorage as shared_rootstorage
from ..shared import tag as shared_tag
from ..shared import userstorage as shared_userstorage
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWorkspaceBundleRequest:
    
    bundle_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BundleDescription') }})  
    bundle_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BundleName') }})  
    compute_type: shared_computetype.ComputeType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComputeType') }})
    r"""Describes the compute type of the bundle."""  
    image_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageId') }})  
    user_storage: shared_userstorage.UserStorage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserStorage') }})
    r"""Describes the user volume for a WorkSpace bundle."""  
    root_storage: Optional[shared_rootstorage.RootStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootStorage'), 'exclude': lambda f: f is None }})
    r"""Describes the root volume for a WorkSpace bundle."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    