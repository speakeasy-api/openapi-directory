"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PricesLegacyV1:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deletebysku_id(self, request: operations.DeletebyskuIDRequest, server_url: Optional[str] = None) -> operations.DeletebyskuIDResponse:
        r"""Delete Price by SKU Id
        Delete all prices from an SKU. 
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
        
        > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
        """
        base_url = operations.DELETEBYSKU_ID_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeletebyskuIDRequest, base_url, '/price-sheet/{skuId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeletebyskuIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletebyskuIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getallpaged(self, request: operations.GetallpagedRequest, server_url: Optional[str] = None) -> operations.GetallpagedResponse:
        r"""Get all paged prices
        Get all paged prices. 
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
        
        > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
        """
        base_url = operations.GETALLPAGED_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.GetallpagedRequest, base_url, '/price-sheet/all/{page}/{pageSize}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetallpagedRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetallpagedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def pricebycontext(self, request: operations.PricebycontextRequest, server_url: Optional[str] = None) -> operations.PricebycontextResponse:
        r"""Get Price by context
        Get price by context. 
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
        
        > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
        """
        base_url = operations.PRICEBYCONTEXT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/price-sheet/context'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "pricebycontext_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PricebycontextRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PricebycontextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def pricebysku_id(self, request: operations.PricebyskuIDRequest, server_url: Optional[str] = None) -> operations.PricebyskuIDResponse:
        r"""Get Price by SKU ID
        Price by SKU ID              
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://developers.vtex.com/docs/api-reference/pricing-api)
        """
        base_url = operations.PRICEBYSKU_ID_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.PricebyskuIDRequest, base_url, '/price-sheet/{skuId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.PricebyskuIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PricebyskuIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def pricebysku_idandtrade_policy(self, request: operations.PricebyskuIdandtradePolicyRequest, server_url: Optional[str] = None) -> operations.PricebyskuIdandtradePolicyResponse:
        r"""Get Price by SKU ID and Trade Policy
        Retrieve price by SKU ID and Trade Policy. 
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
        
        > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
        """
        base_url = operations.PRICEBYSKU_IDANDTRADE_POLICY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.PricebyskuIdandtradePolicyRequest, base_url, '/price-sheet/{skuId}/{tradePolicy}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.PricebyskuIdandtradePolicyRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PricebyskuIdandtradePolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def saveprice(self, request: operations.SavepriceRequest, server_url: Optional[str] = None) -> operations.SavepriceResponse:
        r"""Save Price
        Save price. 
        > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
        
        > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
        """
        base_url = operations.SAVEPRICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/price-sheet'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SavepriceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SavepriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    