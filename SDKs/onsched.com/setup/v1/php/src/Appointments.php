<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Appointments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List Appointments
     * 
     * <p>Use this endpoint to return a <b>List of Appointments</b>. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsResponse
     */
	public function getSetupV1Appointments(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/appointments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentListViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentListViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Appointment
     * 
     * <p>Use this endpoint to return an <b>Appointment</b> object. A valid <b>appointment id</b> is required. Find appointment id's by using the <i>GET​/setup​/v1​/appointments</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdResponse
     */
	public function getSetupV1AppointmentsId(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/appointments/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1AppointmentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reassign Appointment
     * 
     * <p>Use this endpoint to <b>Reassign</b> an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid <b>appointment id</b> and <b>resource id</b> is required. Find appointment id's by using the <i>GET /setup/v1/appointments</i> endpoint, find resource id's by using the <i>GET ​/setup​/v1​/resources</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdResponse
     */
	public function putSetupV1AppointmentsIdReassignResourceResourceId(
        \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/appointments/{id}/reassign/resource/{resourceId}', \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSetupV1AppointmentsIdReassignResourceResourceIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentViewModel', 'json');
            }
        }

        return $response;
    }
}