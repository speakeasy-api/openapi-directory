<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PacketMirrorings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of packetMirrorings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListResponse
     */
	public function computePacketMirroringsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/packetMirrorings', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->packetMirroringAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PacketMirroringAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified PacketMirroring resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteResponse
     */
	public function computePacketMirroringsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified PacketMirroring resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetResponse
     */
	public function computePacketMirroringsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->packetMirroring = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PacketMirroring', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a PacketMirroring resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertResponse
     */
	public function computePacketMirroringsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "packetMirroring", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of PacketMirroring resources available to the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListResponse
     */
	public function computePacketMirroringsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->packetMirroringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PacketMirroringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchResponse
     */
	public function computePacketMirroringsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "packetMirroring1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsResponse
     */
	public function computePacketMirroringsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePacketMirroringsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}