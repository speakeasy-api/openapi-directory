/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { TargetHttpProxiesScopedList } from "./targethttpproxiesscopedlist";
import { Expose, Transform } from "class-transformer";

/**
 * Successful response
 */
export class TargetHttpProxyAggregatedList extends SpeakeasyBase {
  /**
   * [Output Only] Unique identifier for the resource; defined by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A list of TargetHttpProxiesScopedList resources.
   */
  @SpeakeasyMetadata({ elemType: TargetHttpProxiesScopedList })
  @Expose({ name: "items" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TargetHttpProxiesScopedList> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TargetHttpProxiesScopedList);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  items?: Record<string, TargetHttpProxiesScopedList>;

  /**
   * [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPageToken" })
  nextPageToken?: string;

  /**
   * [Output Only] Server-defined URL for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * [Output Only] Unreachable resources.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unreachables" })
  unreachables?: string[];
}
