// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateUserSettingsRequestBodyCopyAllowedEnum - Specifies whether the user can copy text from the streaming session to the local device.
type UpdateUserSettingsRequestBodyCopyAllowedEnum string

const (
	UpdateUserSettingsRequestBodyCopyAllowedEnumDisabled UpdateUserSettingsRequestBodyCopyAllowedEnum = "Disabled"
	UpdateUserSettingsRequestBodyCopyAllowedEnumEnabled  UpdateUserSettingsRequestBodyCopyAllowedEnum = "Enabled"
)

func (e UpdateUserSettingsRequestBodyCopyAllowedEnum) ToPointer() *UpdateUserSettingsRequestBodyCopyAllowedEnum {
	return &e
}

func (e *UpdateUserSettingsRequestBodyCopyAllowedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = UpdateUserSettingsRequestBodyCopyAllowedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSettingsRequestBodyCopyAllowedEnum: %v", v)
	}
}

// UpdateUserSettingsRequestBodyDownloadAllowedEnum - Specifies whether the user can download files from the streaming session to the local device.
type UpdateUserSettingsRequestBodyDownloadAllowedEnum string

const (
	UpdateUserSettingsRequestBodyDownloadAllowedEnumDisabled UpdateUserSettingsRequestBodyDownloadAllowedEnum = "Disabled"
	UpdateUserSettingsRequestBodyDownloadAllowedEnumEnabled  UpdateUserSettingsRequestBodyDownloadAllowedEnum = "Enabled"
)

func (e UpdateUserSettingsRequestBodyDownloadAllowedEnum) ToPointer() *UpdateUserSettingsRequestBodyDownloadAllowedEnum {
	return &e
}

func (e *UpdateUserSettingsRequestBodyDownloadAllowedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = UpdateUserSettingsRequestBodyDownloadAllowedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSettingsRequestBodyDownloadAllowedEnum: %v", v)
	}
}

// UpdateUserSettingsRequestBodyPasteAllowedEnum - Specifies whether the user can paste text from the local device to the streaming session.
type UpdateUserSettingsRequestBodyPasteAllowedEnum string

const (
	UpdateUserSettingsRequestBodyPasteAllowedEnumDisabled UpdateUserSettingsRequestBodyPasteAllowedEnum = "Disabled"
	UpdateUserSettingsRequestBodyPasteAllowedEnumEnabled  UpdateUserSettingsRequestBodyPasteAllowedEnum = "Enabled"
)

func (e UpdateUserSettingsRequestBodyPasteAllowedEnum) ToPointer() *UpdateUserSettingsRequestBodyPasteAllowedEnum {
	return &e
}

func (e *UpdateUserSettingsRequestBodyPasteAllowedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = UpdateUserSettingsRequestBodyPasteAllowedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSettingsRequestBodyPasteAllowedEnum: %v", v)
	}
}

// UpdateUserSettingsRequestBodyPrintAllowedEnum - Specifies whether the user can print to the local device.
type UpdateUserSettingsRequestBodyPrintAllowedEnum string

const (
	UpdateUserSettingsRequestBodyPrintAllowedEnumDisabled UpdateUserSettingsRequestBodyPrintAllowedEnum = "Disabled"
	UpdateUserSettingsRequestBodyPrintAllowedEnumEnabled  UpdateUserSettingsRequestBodyPrintAllowedEnum = "Enabled"
)

func (e UpdateUserSettingsRequestBodyPrintAllowedEnum) ToPointer() *UpdateUserSettingsRequestBodyPrintAllowedEnum {
	return &e
}

func (e *UpdateUserSettingsRequestBodyPrintAllowedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = UpdateUserSettingsRequestBodyPrintAllowedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSettingsRequestBodyPrintAllowedEnum: %v", v)
	}
}

// UpdateUserSettingsRequestBodyUploadAllowedEnum - Specifies whether the user can upload files from the local device to the streaming session.
type UpdateUserSettingsRequestBodyUploadAllowedEnum string

const (
	UpdateUserSettingsRequestBodyUploadAllowedEnumDisabled UpdateUserSettingsRequestBodyUploadAllowedEnum = "Disabled"
	UpdateUserSettingsRequestBodyUploadAllowedEnumEnabled  UpdateUserSettingsRequestBodyUploadAllowedEnum = "Enabled"
)

func (e UpdateUserSettingsRequestBodyUploadAllowedEnum) ToPointer() *UpdateUserSettingsRequestBodyUploadAllowedEnum {
	return &e
}

func (e *UpdateUserSettingsRequestBodyUploadAllowedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = UpdateUserSettingsRequestBodyUploadAllowedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSettingsRequestBodyUploadAllowedEnum: %v", v)
	}
}

type UpdateUserSettingsRequestBody struct {
	// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
	ClientToken *string `json:"clientToken,omitempty"`
	// Specifies whether the user can copy text from the streaming session to the local device.
	CopyAllowed *UpdateUserSettingsRequestBodyCopyAllowedEnum `json:"copyAllowed,omitempty"`
	// The amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInMinutes *int64 `json:"disconnectTimeoutInMinutes,omitempty"`
	// Specifies whether the user can download files from the streaming session to the local device.
	DownloadAllowed *UpdateUserSettingsRequestBodyDownloadAllowedEnum `json:"downloadAllowed,omitempty"`
	// The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
	IdleDisconnectTimeoutInMinutes *int64 `json:"idleDisconnectTimeoutInMinutes,omitempty"`
	// Specifies whether the user can paste text from the local device to the streaming session.
	PasteAllowed *UpdateUserSettingsRequestBodyPasteAllowedEnum `json:"pasteAllowed,omitempty"`
	// Specifies whether the user can print to the local device.
	PrintAllowed *UpdateUserSettingsRequestBodyPrintAllowedEnum `json:"printAllowed,omitempty"`
	// Specifies whether the user can upload files from the local device to the streaming session.
	UploadAllowed *UpdateUserSettingsRequestBodyUploadAllowedEnum `json:"uploadAllowed,omitempty"`
}

type UpdateUserSettingsRequest struct {
	RequestBody       UpdateUserSettingsRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ARN of the user settings.
	UserSettingsArn string `pathParam:"style=simple,explode=false,name=userSettingsArn"`
}

type UpdateUserSettingsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateUserSettingsResponse *shared.UpdateUserSettingsResponse
	// ValidationException
	ValidationException interface{}
}
