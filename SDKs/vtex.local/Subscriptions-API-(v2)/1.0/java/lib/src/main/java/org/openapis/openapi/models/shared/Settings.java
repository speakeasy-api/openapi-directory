/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Settings - Subscriptions settings
 */
public class Settings {
    /**
     * Default delivery method.
     */
    @JsonProperty("defaultSla")
    public String defaultSla;

    public Settings withDefaultSla(String defaultSla) {
        this.defaultSla = defaultSla;
        return this;
    }
    
    /**
     * Array containing delivery channels.
     */
    @JsonProperty("deliveryChannels")
    public String[] deliveryChannels;

    public Settings withDeliveryChannels(String[] deliveryChannels) {
        this.deliveryChannels = deliveryChannels;
        return this;
    }
    
    /**
     * Indicates the time future subscription orders will be generated.
     */
    @JsonProperty("executionHourInUtc")
    public Long executionHourInUtc;

    public Settings withExecutionHourInUtc(Long executionHourInUtc) {
        this.executionHourInUtc = executionHourInUtc;
        return this;
    }
    
    /**
     * Defines whether or not multiple installments are enabled when a subscription is created.
     */
    @JsonProperty("isMultipleInstallmentsEnabledOnCreation")
    public Boolean isMultipleInstallmentsEnabledOnCreation;

    public Settings withIsMultipleInstallmentsEnabledOnCreation(Boolean isMultipleInstallmentsEnabledOnCreation) {
        this.isMultipleInstallmentsEnabledOnCreation = isMultipleInstallmentsEnabledOnCreation;
        return this;
    }
    
    /**
     * Defines whether or not multiple installments are enabled when a subscription is updated.
     */
    @JsonProperty("isMultipleInstallmentsEnabledOnUpdate")
    public Boolean isMultipleInstallmentsEnabledOnUpdate;

    public Settings withIsMultipleInstallmentsEnabledOnUpdate(Boolean isMultipleInstallmentsEnabledOnUpdate) {
        this.isMultipleInstallmentsEnabledOnUpdate = isMultipleInstallmentsEnabledOnUpdate;
        return this;
    }
    
    /**
     * Indicates whether or not Subscriptions V3 is enabled.
     */
    @JsonProperty("isUsingV3")
    public Boolean isUsingV3;

    public Settings withIsUsingV3(Boolean isUsingV3) {
        this.isUsingV3 = isUsingV3;
        return this;
    }
    
    /**
     * When set to `true`, this property enables manual price configuration in subscription items. This is valid for all existing subscriptions, provided that there is a manual price configured and that `isUsingV3` is `true`.
     */
    @JsonProperty("manualPriceAllowed")
    public Boolean manualPriceAllowed;

    public Settings withManualPriceAllowed(Boolean manualPriceAllowed) {
        this.manualPriceAllowed = manualPriceAllowed;
        return this;
    }
    
    /**
     * Indicates whether or not the account is in the migration process to Subscriptions V3.
     */
    @JsonProperty("onMigrationProcess")
    public Boolean onMigrationProcess;

    public Settings withOnMigrationProcess(Boolean onMigrationProcess) {
        this.onMigrationProcess = onMigrationProcess;
        return this;
    }
    
    /**
     * When filled, this field passes along the `customData` infomration in the order to the future recurrent subscription orders.
     */
    @JsonProperty("orderCustomDataAppId")
    public String orderCustomDataAppId;

    public Settings withOrderCustomDataAppId(String orderCustomDataAppId) {
        this.orderCustomDataAppId = orderCustomDataAppId;
        return this;
    }
    
    /**
     * Defines whether or not the expiration of subscriptions can be postponed.
     */
    @JsonProperty("postponeExpiration")
    public Boolean postponeExpiration;

    public Settings withPostponeExpiration(Boolean postponeExpiration) {
        this.postponeExpiration = postponeExpiration;
        return this;
    }
    
    /**
     * Defines whether or not the subscription order IDs will be randomly generated.
     */
    @JsonProperty("randomIdGeneration")
    public Boolean randomIdGeneration;

    public Settings withRandomIdGeneration(Boolean randomIdGeneration) {
        this.randomIdGeneration = randomIdGeneration;
        return this;
    }
    
    /**
     * Delivery method.
     */
    @JsonProperty("slaOption")
    public String slaOption;

    public Settings withSlaOption(String slaOption) {
        this.slaOption = slaOption;
        return this;
    }
    
    /**
     * When set to `true`, this property enables using the manual price for each item from the original subscription order. This is only valid for new subscriptions, created from the moment this configuration is enabled. For this to work, it is mandatory that the `manualPriceAllowed` property is set to `true` and that `isUsingV3` is `true`.
     */
    @JsonProperty("useItemPriceFromOriginalOrder")
    public Boolean useItemPriceFromOriginalOrder;

    public Settings withUseItemPriceFromOriginalOrder(Boolean useItemPriceFromOriginalOrder) {
        this.useItemPriceFromOriginalOrder = useItemPriceFromOriginalOrder;
        return this;
    }
    
    /**
     * Workflow version.
     */
    @JsonProperty("workflowVersion")
    public String workflowVersion;

    public Settings withWorkflowVersion(String workflowVersion) {
        this.workflowVersion = workflowVersion;
        return this;
    }
    
    public Settings(@JsonProperty("defaultSla") String defaultSla, @JsonProperty("deliveryChannels") String[] deliveryChannels, @JsonProperty("executionHourInUtc") Long executionHourInUtc, @JsonProperty("isMultipleInstallmentsEnabledOnCreation") Boolean isMultipleInstallmentsEnabledOnCreation, @JsonProperty("isMultipleInstallmentsEnabledOnUpdate") Boolean isMultipleInstallmentsEnabledOnUpdate, @JsonProperty("isUsingV3") Boolean isUsingV3, @JsonProperty("manualPriceAllowed") Boolean manualPriceAllowed, @JsonProperty("onMigrationProcess") Boolean onMigrationProcess, @JsonProperty("orderCustomDataAppId") String orderCustomDataAppId, @JsonProperty("postponeExpiration") Boolean postponeExpiration, @JsonProperty("randomIdGeneration") Boolean randomIdGeneration, @JsonProperty("slaOption") String slaOption, @JsonProperty("useItemPriceFromOriginalOrder") Boolean useItemPriceFromOriginalOrder, @JsonProperty("workflowVersion") String workflowVersion) {
        this.defaultSla = defaultSla;
        this.deliveryChannels = deliveryChannels;
        this.executionHourInUtc = executionHourInUtc;
        this.isMultipleInstallmentsEnabledOnCreation = isMultipleInstallmentsEnabledOnCreation;
        this.isMultipleInstallmentsEnabledOnUpdate = isMultipleInstallmentsEnabledOnUpdate;
        this.isUsingV3 = isUsingV3;
        this.manualPriceAllowed = manualPriceAllowed;
        this.onMigrationProcess = onMigrationProcess;
        this.orderCustomDataAppId = orderCustomDataAppId;
        this.postponeExpiration = postponeExpiration;
        this.randomIdGeneration = randomIdGeneration;
        this.slaOption = slaOption;
        this.useItemPriceFromOriginalOrder = useItemPriceFromOriginalOrder;
        this.workflowVersion = workflowVersion;
  }
}
