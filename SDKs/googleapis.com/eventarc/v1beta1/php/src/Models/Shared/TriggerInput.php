<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TriggerInput - A representation of the trigger resource.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TriggerInput
{
    /**
     * Represents a target of an invocation over HTTP.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Destination $destination
     */
	#[\JMS\Serializer\Annotation\SerializedName('destination')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Destination')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Destination $destination = null;
    
    /**
     * Optional. User labels attached to the triggers that can be used to group resources.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Required. Unordered list. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\MatchingCriteria> $matchingCriteria
     */
	#[\JMS\Serializer\Annotation\SerializedName('matchingCriteria')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MatchingCriteria>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $matchingCriteria = null;
    
    /**
     * Required. The resource name of the trigger. Must be unique within the location on the project and must in `projects/{project}/locations/{location}/triggers/{trigger}` format.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have 'eventarc.events.receiveAuditLogV1Written' permission.
     * 
     * @var ?string $serviceAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceAccount')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serviceAccount = null;
    
    /**
     * Represents the transport intermediaries created for the trigger in order to deliver events.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransportInput $transport
     */
	#[\JMS\Serializer\Annotation\SerializedName('transport')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransportInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransportInput $transport = null;
    
	public function __construct()
	{
		$this->destination = null;
		$this->labels = null;
		$this->matchingCriteria = null;
		$this->name = null;
		$this->serviceAccount = null;
		$this->transport = null;
	}
}
