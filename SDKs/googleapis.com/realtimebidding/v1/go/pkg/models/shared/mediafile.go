// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MediaFileMimeTypeEnum - The MIME type of this media file. Can be used to filter the response of the creatives.list method.
type MediaFileMimeTypeEnum string

const (
	MediaFileMimeTypeEnumVideoMimeTypeUnspecified   MediaFileMimeTypeEnum = "VIDEO_MIME_TYPE_UNSPECIFIED"
	MediaFileMimeTypeEnumMimeVideoXflv              MediaFileMimeTypeEnum = "MIME_VIDEO_XFLV"
	MediaFileMimeTypeEnumMimeVideoWebm              MediaFileMimeTypeEnum = "MIME_VIDEO_WEBM"
	MediaFileMimeTypeEnumMimeVideoMp4               MediaFileMimeTypeEnum = "MIME_VIDEO_MP4"
	MediaFileMimeTypeEnumMimeVideoOgg               MediaFileMimeTypeEnum = "MIME_VIDEO_OGG"
	MediaFileMimeTypeEnumMimeVideoYtHosted          MediaFileMimeTypeEnum = "MIME_VIDEO_YT_HOSTED"
	MediaFileMimeTypeEnumMimeVideoXMsWmv            MediaFileMimeTypeEnum = "MIME_VIDEO_X_MS_WMV"
	MediaFileMimeTypeEnumMimeVideo3Gpp              MediaFileMimeTypeEnum = "MIME_VIDEO_3GPP"
	MediaFileMimeTypeEnumMimeVideoMov               MediaFileMimeTypeEnum = "MIME_VIDEO_MOV"
	MediaFileMimeTypeEnumMimeApplicationSwf         MediaFileMimeTypeEnum = "MIME_APPLICATION_SWF"
	MediaFileMimeTypeEnumMimeApplicationSurvey      MediaFileMimeTypeEnum = "MIME_APPLICATION_SURVEY"
	MediaFileMimeTypeEnumMimeApplicationJavascript  MediaFileMimeTypeEnum = "MIME_APPLICATION_JAVASCRIPT"
	MediaFileMimeTypeEnumMimeApplicationSilverlight MediaFileMimeTypeEnum = "MIME_APPLICATION_SILVERLIGHT"
	MediaFileMimeTypeEnumMimeApplicationMpegurl     MediaFileMimeTypeEnum = "MIME_APPLICATION_MPEGURL"
	MediaFileMimeTypeEnumMimeApplicationMpegdash    MediaFileMimeTypeEnum = "MIME_APPLICATION_MPEGDASH"
	MediaFileMimeTypeEnumMimeAudioMp4A              MediaFileMimeTypeEnum = "MIME_AUDIO_MP4A"
	MediaFileMimeTypeEnumMimeAudioMp3               MediaFileMimeTypeEnum = "MIME_AUDIO_MP3"
	MediaFileMimeTypeEnumMimeAudioOgg               MediaFileMimeTypeEnum = "MIME_AUDIO_OGG"
)

func (e *MediaFileMimeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIDEO_MIME_TYPE_UNSPECIFIED":
		fallthrough
	case "MIME_VIDEO_XFLV":
		fallthrough
	case "MIME_VIDEO_WEBM":
		fallthrough
	case "MIME_VIDEO_MP4":
		fallthrough
	case "MIME_VIDEO_OGG":
		fallthrough
	case "MIME_VIDEO_YT_HOSTED":
		fallthrough
	case "MIME_VIDEO_X_MS_WMV":
		fallthrough
	case "MIME_VIDEO_3GPP":
		fallthrough
	case "MIME_VIDEO_MOV":
		fallthrough
	case "MIME_APPLICATION_SWF":
		fallthrough
	case "MIME_APPLICATION_SURVEY":
		fallthrough
	case "MIME_APPLICATION_JAVASCRIPT":
		fallthrough
	case "MIME_APPLICATION_SILVERLIGHT":
		fallthrough
	case "MIME_APPLICATION_MPEGURL":
		fallthrough
	case "MIME_APPLICATION_MPEGDASH":
		fallthrough
	case "MIME_AUDIO_MP4A":
		fallthrough
	case "MIME_AUDIO_MP3":
		fallthrough
	case "MIME_AUDIO_OGG":
		*e = MediaFileMimeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaFileMimeTypeEnum: %s", s)
	}
}

// MediaFile - Information about each media file in the VAST.
type MediaFile struct {
	// Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method.
	Bitrate *string `json:"bitrate,omitempty"`
	// The MIME type of this media file. Can be used to filter the response of the creatives.list method.
	MimeType *MediaFileMimeTypeEnum `json:"mimeType,omitempty"`
}
