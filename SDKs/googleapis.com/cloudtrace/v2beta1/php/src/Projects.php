<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a sink that exports trace spans to a destination. The export of newly-ingested traces begins immediately, unless the sink's `writer_identity` is not permitted to write to the destination. A sink can export traces only from the resource owning the sink (the 'parent').
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateResponse
     */
	public function cloudtraceProjectsTraceSinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{parent}/traceSinks', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "traceSinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->traceSink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TraceSink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a sink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteResponse
     */
	public function cloudtraceProjectsTraceSinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a trace sink by name under the parent resource (GCP project).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetResponse
     */
	public function cloudtraceProjectsTraceSinksGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->traceSink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TraceSink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all sinks for the parent resource (GCP project).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListResponse
     */
	public function cloudtraceProjectsTraceSinksList(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{parent}/traceSinks', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTraceSinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTraceSinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a sink. This method updates fields in the existing sink according to the provided update mask. The sink's name cannot be changed nor any output-only fields (e.g. the writer_identity).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchResponse
     */
	public function cloudtraceProjectsTraceSinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "traceSinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTraceSinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->traceSink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TraceSink', 'json');
            }
        }

        return $response;
    }
}