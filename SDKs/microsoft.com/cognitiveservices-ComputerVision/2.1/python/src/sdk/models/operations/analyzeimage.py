"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import computervisionerror as shared_computervisionerror
from ..shared import descriptionexclude_enum as shared_descriptionexclude_enum
from ..shared import imageanalysis as shared_imageanalysis
from ..shared import imageurl as shared_imageurl
from ..shared import servicelanguage_enum as shared_servicelanguage_enum
from ..shared import visualfeatures_enum as shared_visualfeatures_enum
from enum import Enum
from typing import Optional

class AnalyzeImageDetailsEnum(str, Enum):
    CELEBRITIES = 'Celebrities'
    LANDMARKS = 'Landmarks'


@dataclasses.dataclass
class AnalyzeImageRequest:
    
    image_url: shared_imageurl.ImageURL = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""A JSON document with a URL pointing to the image that is to be analyzed."""  
    description_exclude: Optional[list[shared_descriptionexclude_enum.DescriptionExcludeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'descriptionExclude', 'style': 'form', 'explode': False }})
    r"""Turn off specified domain models when generating the description."""  
    details: Optional[list[AnalyzeImageDetailsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'details', 'style': 'form', 'explode': False }})
    r"""A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image."""  
    language: Optional[shared_servicelanguage_enum.ServiceLanguageEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese."""  
    visual_features: Optional[list[shared_visualfeatures_enum.VisualFeaturesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'visualFeatures', 'style': 'form', 'explode': False }})
    r"""A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English."""  
    

@dataclasses.dataclass
class AnalyzeImageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    computer_vision_error: Optional[shared_computervisionerror.ComputerVisionError] = dataclasses.field(default=None)
    r"""Error response."""  
    image_analysis: Optional[shared_imageanalysis.ImageAnalysis] = dataclasses.field(default=None)
    r"""The response include the extracted features in JSON format. Here is the definitions for enumeration types:
     ClipartType
     Non - clipart = 0, ambiguous = 1, normal - clipart = 2, good - clipart = 3. LineDrawingTypeNon - LineDrawing = 0, LineDrawing = 1.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    