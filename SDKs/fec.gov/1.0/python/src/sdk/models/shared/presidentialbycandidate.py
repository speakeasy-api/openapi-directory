"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresidentialByCandidate:
    
    candidate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
      -P00000001    All candidates
      -P00000002    Democrasts
      -P00000003    Republicans
    """  
    candidate_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_last_name'), 'exclude': lambda f: f is None }})
    r"""Candidate last name"""  
    candidate_party_affiliation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_party_affiliation'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    contributor_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_state'), 'exclude': lambda f: f is None }})
    r"""State of contributor"""  
    election_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_year'), 'exclude': lambda f: f is None }})
    r"""Year of election"""  
    net_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_receipts'), 'exclude': lambda f: f is None }})
    r"""Net contributions"""  
    rounded_net_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rounded_net_receipts'), 'exclude': lambda f: f is None }})
    r"""Net receipts, in millions"""  
    