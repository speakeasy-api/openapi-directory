"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import putinventoryrequest as shared_putinventoryrequest
from ..shared import putinventoryresult as shared_putinventoryresult
from enum import Enum
from typing import Any, Optional

class PutInventoryXAmzTargetEnum(str, Enum):
    AMAZON_SSM_PUT_INVENTORY = 'AmazonSSM.PutInventory'


@dataclasses.dataclass
class PutInventoryRequest:
    
    put_inventory_request: shared_putinventoryrequest.PutInventoryRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: PutInventoryXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutInventoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    custom_schema_count_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CustomSchemaCountLimitExceededException"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    invalid_instance_id: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInstanceId"""  
    invalid_inventory_item_context_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInventoryItemContextException"""  
    invalid_item_content_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidItemContentException"""  
    invalid_type_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTypeNameException"""  
    item_content_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ItemContentMismatchException"""  
    item_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ItemSizeLimitExceededException"""  
    put_inventory_result: Optional[shared_putinventoryresult.PutInventoryResult] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sub_type_count_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SubTypeCountLimitExceededException"""  
    total_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TotalSizeLimitExceededException"""  
    unsupported_inventory_item_context_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedInventoryItemContextException"""  
    unsupported_inventory_schema_version_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedInventorySchemaVersionException"""  
    