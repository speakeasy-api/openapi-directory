"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import condition as shared_condition
from ..shared import logconfig as shared_logconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RuleActionEnum(str, Enum):
    r"""Required"""
    NO_ACTION = 'NO_ACTION'
    ALLOW = 'ALLOW'
    ALLOW_WITH_LOG = 'ALLOW_WITH_LOG'
    DENY = 'DENY'
    DENY_WITH_LOG = 'DENY_WITH_LOG'
    LOG = 'LOG'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Rule:
    r"""A rule to be applied in a Policy."""
    
    action: Optional[RuleActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Required"""  
    conditions: Optional[list[shared_condition.Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions'), 'exclude': lambda f: f is None }})
    r"""Additional restrictions that must be met. All conditions must pass for the rule to match."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Human-readable description of the rule."""  
    in_: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in'), 'exclude': lambda f: f is None }})
    r"""If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries."""  
    log_config: Optional[list[shared_logconfig.LogConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logConfig'), 'exclude': lambda f: f is None }})
    r"""The config returned to callers of CheckPolicy for any entries that match the LOG action."""  
    not_in: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notIn'), 'exclude': lambda f: f is None }})
    r"""If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features)."""  
    permissions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs."""  
    