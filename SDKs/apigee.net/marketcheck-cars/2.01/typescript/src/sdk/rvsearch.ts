/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RVSearch {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * RV listing by id
   *
   * @remarks
   * Get a particular RV listing by its id
   */
  getListingRvUkId(
    req: operations.GetListingRvUkIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvUkIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvUkIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/listing/rv/uk/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvUkIdResponse =
        new operations.GetListingRvUkIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rvListing = utils.objectToClass(
              httpRes?.data,
              shared.RVListing
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text RV Listings attributes for Listing with the given id
   *
   * @remarks
   * Get RV listing options, features, seller comments
   */
  getListingRvUkIdExtra(
    req: operations.GetListingRvUkIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvUkIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvUkIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/rv/uk/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvUkIdExtraResponse =
        new operations.GetListingRvUkIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingRvUkIdMedia(
    req: operations.GetListingRvUkIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvUkIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvUkIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/rv/uk/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvUkIdMediaResponse =
        new operations.GetListingRvUkIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * RV listing by id
   *
   * @remarks
   * Get a particular RV listing by its id
   */
  getListingRvId(
    req: operations.GetListingRvIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/listing/rv/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvIdResponse =
        new operations.GetListingRvIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rvListing = utils.objectToClass(
              httpRes?.data,
              shared.RVListing
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text RV Listings attributes for Listing with the given id
   *
   * @remarks
   * Get RV listing options, features, seller comments
   */
  getListingRvIdExtra(
    req: operations.GetListingRvIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/rv/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvIdExtraResponse =
        new operations.GetListingRvIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingRvIdMedia(
    req: operations.GetListingRvIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingRvIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRvIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/rv/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingRvIdMediaResponse =
        new operations.GetListingRvIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active RV listings for the given search criteria
   *
   * @remarks
   * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search RV around a given geo-point within a given radius
   * 2. Search RV for a specific year / make / model or combination of these
   * 3. Search RV matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most RV specification attributes
   * 5. Filter RV within a given price / miles range
   * 6. Specify a sort order for the results on price / miles / listed date
   * 7. Search RV for a given City / State combination
   * 8. Get Facets to build the search drill downs
   * 9. Get Market averages for price/miles for your search
   */
  getSearchRvActive(
    req: operations.GetSearchRvActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchRvActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchRvActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/rv/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchRvActiveResponse =
        new operations.GetSearchRvActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rvSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.RVSearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * API for auto-completion of inputs
   *
   * @remarks
   * Auto-complete the inputs of your end users
   */
  getSearchRvAutoComplete(
    req: operations.GetSearchRvAutoCompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchRvAutoCompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchRvAutoCompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/rv/auto-complete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchRvAutoCompleteResponse =
        new operations.GetSearchRvAutoCompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchAutoCompleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchAutoCompleteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active RV listings for the given search criteria
   *
   * @remarks
   * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search RV around a given geo-point within a given radius
   * 2. Search RV for a specific year / make / model or combination of these
   * 3. Search RV matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most RV specification attributes
   * 5. Filter RV within a given price / miles range
   * 6. Specify a sort order for the results on price / miles / listed date
   * 7. Search RV for a given City / State combination
   * 8. Get Facets to build the search drill downs
   * 9. Get Market averages for price/miles for your search
   */
  getSearchRvUkActive(
    req: operations.GetSearchRvUkActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchRvUkActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchRvUkActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/rv/uk/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchRvUkActiveResponse =
        new operations.GetSearchRvUkActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ukrvSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.UKRVSearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
