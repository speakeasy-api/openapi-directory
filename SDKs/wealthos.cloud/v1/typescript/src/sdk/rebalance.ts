/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The rebalancing feature provides advisors and portfolio managers the ability to evaluate which pots have drifted significantly from their target portfolios, and trigger a rebalance execution for these pots to bring the holdings back to parity with the pot's target portfolio. Driven by a single rebalance request, the system completely orchestrates this multi-day buy/sell process across a host of different pots, with status updates being provided via API endpoints and web sockets.
 */
export class Rebalance {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Trigger rebalance process
   *
   * @remarks
   * This endpoint allows you to trigger the rebalancing of a pot (or a group of pots), all pots belonging to an investor (or a group of investors) or all pots linked to a portfolio (or a group of portfolios). The response will contain a `rebalance_request_id` and `status` of the request.
   */
  createRebalance(
    req: operations.CreateRebalanceRequest,
    security: operations.CreateRebalanceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateRebalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateRebalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/rebalance";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateRebalanceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateRebalanceResponse =
        new operations.CreateRebalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRebalance500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateRebalance500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Evaluate rebalance
   *
   * @remarks
   * Evaluate if a pot or a group of pots has deviated significatly from the target portfolio and eligible for rebalancing. The request can be sent for a pot (or a group of pots), all pots belonging to an investor (or a group of investors) or all pots linked to a portfolio (or a group of portfolios). The response will indicate if the pot is eligible for rebalance and % deviation from the target portfolio template.
   */
  evaluateRebalance(
    req: operations.EvaluateRebalanceRequest,
    security: operations.EvaluateRebalanceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EvaluateRebalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EvaluateRebalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/rebalance/evaluate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EvaluateRebalanceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EvaluateRebalanceResponse =
        new operations.EvaluateRebalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.thisIsTheReturnObjectWithEvaluationPerPot = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPot
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.evaluateRebalance500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EvaluateRebalance500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve rebalance request related details
   *
   * @remarks
   * Retrieve details of a rebalace request using the `rebalance_request_id`.
   */
  getRebalanceDetails(
    req: operations.GetRebalanceDetailsRequest,
    security: operations.GetRebalanceDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRebalanceDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRebalanceDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/transactions/v1/rebalance/{rebalance_request_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetRebalanceDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRebalanceDetailsResponse =
        new operations.GetRebalanceDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRebalanceDetails500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRebalanceDetails500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
