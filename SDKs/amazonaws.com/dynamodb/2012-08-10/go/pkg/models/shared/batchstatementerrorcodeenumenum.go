// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BatchStatementErrorCodeEnumEnum string

const (
	BatchStatementErrorCodeEnumEnumConditionalCheckFailed          BatchStatementErrorCodeEnumEnum = "ConditionalCheckFailed"
	BatchStatementErrorCodeEnumEnumItemCollectionSizeLimitExceeded BatchStatementErrorCodeEnumEnum = "ItemCollectionSizeLimitExceeded"
	BatchStatementErrorCodeEnumEnumRequestLimitExceeded            BatchStatementErrorCodeEnumEnum = "RequestLimitExceeded"
	BatchStatementErrorCodeEnumEnumValidationError                 BatchStatementErrorCodeEnumEnum = "ValidationError"
	BatchStatementErrorCodeEnumEnumProvisionedThroughputExceeded   BatchStatementErrorCodeEnumEnum = "ProvisionedThroughputExceeded"
	BatchStatementErrorCodeEnumEnumTransactionConflict             BatchStatementErrorCodeEnumEnum = "TransactionConflict"
	BatchStatementErrorCodeEnumEnumThrottlingError                 BatchStatementErrorCodeEnumEnum = "ThrottlingError"
	BatchStatementErrorCodeEnumEnumInternalServerError             BatchStatementErrorCodeEnumEnum = "InternalServerError"
	BatchStatementErrorCodeEnumEnumResourceNotFound                BatchStatementErrorCodeEnumEnum = "ResourceNotFound"
	BatchStatementErrorCodeEnumEnumAccessDenied                    BatchStatementErrorCodeEnumEnum = "AccessDenied"
	BatchStatementErrorCodeEnumEnumDuplicateItem                   BatchStatementErrorCodeEnumEnum = "DuplicateItem"
)

func (e BatchStatementErrorCodeEnumEnum) ToPointer() *BatchStatementErrorCodeEnumEnum {
	return &e
}

func (e *BatchStatementErrorCodeEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ConditionalCheckFailed":
		fallthrough
	case "ItemCollectionSizeLimitExceeded":
		fallthrough
	case "RequestLimitExceeded":
		fallthrough
	case "ValidationError":
		fallthrough
	case "ProvisionedThroughputExceeded":
		fallthrough
	case "TransactionConflict":
		fallthrough
	case "ThrottlingError":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "AccessDenied":
		fallthrough
	case "DuplicateItem":
		*e = BatchStatementErrorCodeEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchStatementErrorCodeEnumEnum: %v", v)
	}
}
