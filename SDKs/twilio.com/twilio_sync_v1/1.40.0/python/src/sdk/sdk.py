"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://sync.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_document(self, request: operations.CreateDocumentRequest, security: operations.CreateDocumentSecurity, server_url: Optional[str] = None) -> operations.CreateDocumentResponse:
        base_url = operations.CREATE_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateDocumentRequest, base_url, '/v1/Services/{ServiceSid}/Documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceDocument])
                res.sync_v1_service_document = out

        return res

    def create_service(self, request: operations.CreateServiceCreateServiceRequest, security: operations.CreateServiceSecurity, server_url: Optional[str] = None) -> operations.CreateServiceResponse:
        base_url = operations.CREATE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Services'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1Service])
                res.sync_v1_service = out

        return res

    def create_stream_message(self, request: operations.CreateStreamMessageRequest, security: operations.CreateStreamMessageSecurity, server_url: Optional[str] = None) -> operations.CreateStreamMessageResponse:
        r"""Create a new Stream Message."""
        base_url = operations.CREATE_STREAM_MESSAGE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateStreamMessageRequest, base_url, '/v1/Services/{ServiceSid}/Streams/{StreamSid}/Messages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateStreamMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncStreamStreamMessage])
                res.sync_v1_service_sync_stream_stream_message = out

        return res

    def create_sync_list(self, request: operations.CreateSyncListRequest, security: operations.CreateSyncListSecurity, server_url: Optional[str] = None) -> operations.CreateSyncListResponse:
        base_url = operations.CREATE_SYNC_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSyncListRequest, base_url, '/v1/Services/{ServiceSid}/Lists', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSyncListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncList])
                res.sync_v1_service_sync_list = out

        return res

    def create_sync_list_item(self, request: operations.CreateSyncListItemRequest, security: operations.CreateSyncListItemSecurity, server_url: Optional[str] = None) -> operations.CreateSyncListItemResponse:
        base_url = operations.CREATE_SYNC_LIST_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSyncListItemRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSyncListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncListSyncListItem])
                res.sync_v1_service_sync_list_sync_list_item = out

        return res

    def create_sync_map(self, request: operations.CreateSyncMapRequest, security: operations.CreateSyncMapSecurity, server_url: Optional[str] = None) -> operations.CreateSyncMapResponse:
        base_url = operations.CREATE_SYNC_MAP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSyncMapRequest, base_url, '/v1/Services/{ServiceSid}/Maps', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSyncMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMap])
                res.sync_v1_service_sync_map = out

        return res

    def create_sync_map_item(self, request: operations.CreateSyncMapItemRequest, security: operations.CreateSyncMapItemSecurity, server_url: Optional[str] = None) -> operations.CreateSyncMapItemResponse:
        base_url = operations.CREATE_SYNC_MAP_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSyncMapItemRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSyncMapItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMapSyncMapItem])
                res.sync_v1_service_sync_map_sync_map_item = out

        return res

    def create_sync_stream(self, request: operations.CreateSyncStreamRequest, security: operations.CreateSyncStreamSecurity, server_url: Optional[str] = None) -> operations.CreateSyncStreamResponse:
        r"""Create a new Stream."""
        base_url = operations.CREATE_SYNC_STREAM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSyncStreamRequest, base_url, '/v1/Services/{ServiceSid}/Streams', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSyncStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncStream])
                res.sync_v1_service_sync_stream = out

        return res

    def delete_document(self, request: operations.DeleteDocumentRequest, security: operations.DeleteDocumentSecurity, server_url: Optional[str] = None) -> operations.DeleteDocumentResponse:
        base_url = operations.DELETE_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteDocumentRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_document_permission(self, request: operations.DeleteDocumentPermissionRequest, security: operations.DeleteDocumentPermissionSecurity, server_url: Optional[str] = None) -> operations.DeleteDocumentPermissionResponse:
        r"""Delete a specific Sync Document Permission."""
        base_url = operations.DELETE_DOCUMENT_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteDocumentPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDocumentPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_service(self, request: operations.DeleteServiceRequest, security: operations.DeleteServiceSecurity, server_url: Optional[str] = None) -> operations.DeleteServiceResponse:
        base_url = operations.DELETE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_list(self, request: operations.DeleteSyncListRequest, security: operations.DeleteSyncListSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncListResponse:
        base_url = operations.DELETE_SYNC_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncListRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_list_item(self, request: operations.DeleteSyncListItemRequest, security: operations.DeleteSyncListItemSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncListItemResponse:
        base_url = operations.DELETE_SYNC_LIST_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncListItemRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_list_permission(self, request: operations.DeleteSyncListPermissionRequest, security: operations.DeleteSyncListPermissionSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncListPermissionResponse:
        r"""Delete a specific Sync List Permission."""
        base_url = operations.DELETE_SYNC_LIST_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncListPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncListPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_map(self, request: operations.DeleteSyncMapRequest, security: operations.DeleteSyncMapSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncMapResponse:
        base_url = operations.DELETE_SYNC_MAP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncMapRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_map_item(self, request: operations.DeleteSyncMapItemRequest, security: operations.DeleteSyncMapItemSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncMapItemResponse:
        base_url = operations.DELETE_SYNC_MAP_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncMapItemRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncMapItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_map_permission(self, request: operations.DeleteSyncMapPermissionRequest, security: operations.DeleteSyncMapPermissionSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncMapPermissionResponse:
        r"""Delete a specific Sync Map Permission."""
        base_url = operations.DELETE_SYNC_MAP_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncMapPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncMapPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sync_stream(self, request: operations.DeleteSyncStreamRequest, security: operations.DeleteSyncStreamSecurity, server_url: Optional[str] = None) -> operations.DeleteSyncStreamResponse:
        r"""Delete a specific Stream."""
        base_url = operations.DELETE_SYNC_STREAM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSyncStreamRequest, base_url, '/v1/Services/{ServiceSid}/Streams/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSyncStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_document(self, request: operations.FetchDocumentRequest, security: operations.FetchDocumentSecurity, server_url: Optional[str] = None) -> operations.FetchDocumentResponse:
        base_url = operations.FETCH_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDocumentRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceDocument])
                res.sync_v1_service_document = out

        return res

    def fetch_document_permission(self, request: operations.FetchDocumentPermissionRequest, security: operations.FetchDocumentPermissionSecurity, server_url: Optional[str] = None) -> operations.FetchDocumentPermissionResponse:
        r"""Fetch a specific Sync Document Permission."""
        base_url = operations.FETCH_DOCUMENT_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDocumentPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDocumentPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceDocumentDocumentPermission])
                res.sync_v1_service_document_document_permission = out

        return res

    def fetch_service(self, request: operations.FetchServiceRequest, security: operations.FetchServiceSecurity, server_url: Optional[str] = None) -> operations.FetchServiceResponse:
        base_url = operations.FETCH_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1Service])
                res.sync_v1_service = out

        return res

    def fetch_sync_list(self, request: operations.FetchSyncListRequest, security: operations.FetchSyncListSecurity, server_url: Optional[str] = None) -> operations.FetchSyncListResponse:
        base_url = operations.FETCH_SYNC_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncListRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncList])
                res.sync_v1_service_sync_list = out

        return res

    def fetch_sync_list_item(self, request: operations.FetchSyncListItemRequest, security: operations.FetchSyncListItemSecurity, server_url: Optional[str] = None) -> operations.FetchSyncListItemResponse:
        base_url = operations.FETCH_SYNC_LIST_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncListItemRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncListSyncListItem])
                res.sync_v1_service_sync_list_sync_list_item = out

        return res

    def fetch_sync_list_permission(self, request: operations.FetchSyncListPermissionRequest, security: operations.FetchSyncListPermissionSecurity, server_url: Optional[str] = None) -> operations.FetchSyncListPermissionResponse:
        r"""Fetch a specific Sync List Permission."""
        base_url = operations.FETCH_SYNC_LIST_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncListPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncListPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncListSyncListPermission])
                res.sync_v1_service_sync_list_sync_list_permission = out

        return res

    def fetch_sync_map(self, request: operations.FetchSyncMapRequest, security: operations.FetchSyncMapSecurity, server_url: Optional[str] = None) -> operations.FetchSyncMapResponse:
        base_url = operations.FETCH_SYNC_MAP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncMapRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMap])
                res.sync_v1_service_sync_map = out

        return res

    def fetch_sync_map_item(self, request: operations.FetchSyncMapItemRequest, security: operations.FetchSyncMapItemSecurity, server_url: Optional[str] = None) -> operations.FetchSyncMapItemResponse:
        base_url = operations.FETCH_SYNC_MAP_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncMapItemRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncMapItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMapSyncMapItem])
                res.sync_v1_service_sync_map_sync_map_item = out

        return res

    def fetch_sync_map_permission(self, request: operations.FetchSyncMapPermissionRequest, security: operations.FetchSyncMapPermissionSecurity, server_url: Optional[str] = None) -> operations.FetchSyncMapPermissionResponse:
        r"""Fetch a specific Sync Map Permission."""
        base_url = operations.FETCH_SYNC_MAP_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncMapPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncMapPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMapSyncMapPermission])
                res.sync_v1_service_sync_map_sync_map_permission = out

        return res

    def fetch_sync_stream(self, request: operations.FetchSyncStreamRequest, security: operations.FetchSyncStreamSecurity, server_url: Optional[str] = None) -> operations.FetchSyncStreamResponse:
        r"""Fetch a specific Stream."""
        base_url = operations.FETCH_SYNC_STREAM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSyncStreamRequest, base_url, '/v1/Services/{ServiceSid}/Streams/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSyncStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncStream])
                res.sync_v1_service_sync_stream = out

        return res

    def list_document(self, request: operations.ListDocumentRequest, security: operations.ListDocumentSecurity, server_url: Optional[str] = None) -> operations.ListDocumentResponse:
        base_url = operations.LIST_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDocumentRequest, base_url, '/v1/Services/{ServiceSid}/Documents', request)
        
        query_params = utils.get_query_params(operations.ListDocumentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDocumentListDocumentResponse])
                res.list_document_response = out

        return res

    def list_document_permission(self, request: operations.ListDocumentPermissionRequest, security: operations.ListDocumentPermissionSecurity, server_url: Optional[str] = None) -> operations.ListDocumentPermissionResponse:
        r"""Retrieve a list of all Permissions applying to a Sync Document."""
        base_url = operations.LIST_DOCUMENT_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDocumentPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions', request)
        
        query_params = utils.get_query_params(operations.ListDocumentPermissionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDocumentPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDocumentPermissionListDocumentPermissionResponse])
                res.list_document_permission_response = out

        return res

    def list_service(self, request: operations.ListServiceRequest, security: operations.ListServiceSecurity, server_url: Optional[str] = None) -> operations.ListServiceResponse:
        base_url = operations.LIST_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Services'
        
        query_params = utils.get_query_params(operations.ListServiceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListServiceListServiceResponse])
                res.list_service_response = out

        return res

    def list_sync_list(self, request: operations.ListSyncListRequest, security: operations.ListSyncListSecurity, server_url: Optional[str] = None) -> operations.ListSyncListResponse:
        base_url = operations.LIST_SYNC_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncListRequest, base_url, '/v1/Services/{ServiceSid}/Lists', request)
        
        query_params = utils.get_query_params(operations.ListSyncListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncListListSyncListResponse])
                res.list_sync_list_response = out

        return res

    def list_sync_list_item(self, request: operations.ListSyncListItemRequest, security: operations.ListSyncListItemSecurity, server_url: Optional[str] = None) -> operations.ListSyncListItemResponse:
        base_url = operations.LIST_SYNC_LIST_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncListItemRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items', request)
        
        query_params = utils.get_query_params(operations.ListSyncListItemRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncListItemListSyncListItemResponse])
                res.list_sync_list_item_response = out

        return res

    def list_sync_list_permission(self, request: operations.ListSyncListPermissionRequest, security: operations.ListSyncListPermissionSecurity, server_url: Optional[str] = None) -> operations.ListSyncListPermissionResponse:
        r"""Retrieve a list of all Permissions applying to a Sync List."""
        base_url = operations.LIST_SYNC_LIST_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncListPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions', request)
        
        query_params = utils.get_query_params(operations.ListSyncListPermissionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncListPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncListPermissionListSyncListPermissionResponse])
                res.list_sync_list_permission_response = out

        return res

    def list_sync_map(self, request: operations.ListSyncMapRequest, security: operations.ListSyncMapSecurity, server_url: Optional[str] = None) -> operations.ListSyncMapResponse:
        base_url = operations.LIST_SYNC_MAP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncMapRequest, base_url, '/v1/Services/{ServiceSid}/Maps', request)
        
        query_params = utils.get_query_params(operations.ListSyncMapRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncMapListSyncMapResponse])
                res.list_sync_map_response = out

        return res

    def list_sync_map_item(self, request: operations.ListSyncMapItemRequest, security: operations.ListSyncMapItemSecurity, server_url: Optional[str] = None) -> operations.ListSyncMapItemResponse:
        base_url = operations.LIST_SYNC_MAP_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncMapItemRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items', request)
        
        query_params = utils.get_query_params(operations.ListSyncMapItemRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncMapItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncMapItemListSyncMapItemResponse])
                res.list_sync_map_item_response = out

        return res

    def list_sync_map_permission(self, request: operations.ListSyncMapPermissionRequest, security: operations.ListSyncMapPermissionSecurity, server_url: Optional[str] = None) -> operations.ListSyncMapPermissionResponse:
        r"""Retrieve a list of all Permissions applying to a Sync Map."""
        base_url = operations.LIST_SYNC_MAP_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncMapPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions', request)
        
        query_params = utils.get_query_params(operations.ListSyncMapPermissionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncMapPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncMapPermissionListSyncMapPermissionResponse])
                res.list_sync_map_permission_response = out

        return res

    def list_sync_stream(self, request: operations.ListSyncStreamRequest, security: operations.ListSyncStreamSecurity, server_url: Optional[str] = None) -> operations.ListSyncStreamResponse:
        r"""Retrieve a list of all Streams in a Service Instance."""
        base_url = operations.LIST_SYNC_STREAM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSyncStreamRequest, base_url, '/v1/Services/{ServiceSid}/Streams', request)
        
        query_params = utils.get_query_params(operations.ListSyncStreamRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSyncStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSyncStreamListSyncStreamResponse])
                res.list_sync_stream_response = out

        return res

    def update_document(self, request: operations.UpdateDocumentRequest, security: operations.UpdateDocumentSecurity, server_url: Optional[str] = None) -> operations.UpdateDocumentResponse:
        base_url = operations.UPDATE_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDocumentRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{Sid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceDocument])
                res.sync_v1_service_document = out

        return res

    def update_document_permission(self, request: operations.UpdateDocumentPermissionRequest, security: operations.UpdateDocumentPermissionSecurity, server_url: Optional[str] = None) -> operations.UpdateDocumentPermissionResponse:
        r"""Update an identity's access to a specific Sync Document."""
        base_url = operations.UPDATE_DOCUMENT_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDocumentPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDocumentPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceDocumentDocumentPermission])
                res.sync_v1_service_document_document_permission = out

        return res

    def update_service(self, request: operations.UpdateServiceRequest, security: operations.UpdateServiceSecurity, server_url: Optional[str] = None) -> operations.UpdateServiceResponse:
        base_url = operations.UPDATE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1Service])
                res.sync_v1_service = out

        return res

    def update_sync_list(self, request: operations.UpdateSyncListRequest, security: operations.UpdateSyncListSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncListResponse:
        base_url = operations.UPDATE_SYNC_LIST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncListRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncList])
                res.sync_v1_service_sync_list = out

        return res

    def update_sync_list_item(self, request: operations.UpdateSyncListItemRequest, security: operations.UpdateSyncListItemSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncListItemResponse:
        base_url = operations.UPDATE_SYNC_LIST_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncListItemRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncListSyncListItem])
                res.sync_v1_service_sync_list_sync_list_item = out

        return res

    def update_sync_list_permission(self, request: operations.UpdateSyncListPermissionRequest, security: operations.UpdateSyncListPermissionSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncListPermissionResponse:
        r"""Update an identity's access to a specific Sync List."""
        base_url = operations.UPDATE_SYNC_LIST_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncListPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncListPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncListSyncListPermission])
                res.sync_v1_service_sync_list_sync_list_permission = out

        return res

    def update_sync_map(self, request: operations.UpdateSyncMapRequest, security: operations.UpdateSyncMapSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncMapResponse:
        base_url = operations.UPDATE_SYNC_MAP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncMapRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMap])
                res.sync_v1_service_sync_map = out

        return res

    def update_sync_map_item(self, request: operations.UpdateSyncMapItemRequest, security: operations.UpdateSyncMapItemSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncMapItemResponse:
        base_url = operations.UPDATE_SYNC_MAP_ITEM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncMapItemRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncMapItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMapSyncMapItem])
                res.sync_v1_service_sync_map_sync_map_item = out

        return res

    def update_sync_map_permission(self, request: operations.UpdateSyncMapPermissionRequest, security: operations.UpdateSyncMapPermissionSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncMapPermissionResponse:
        r"""Update an identity's access to a specific Sync Map."""
        base_url = operations.UPDATE_SYNC_MAP_PERMISSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncMapPermissionRequest, base_url, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncMapPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncMapSyncMapPermission])
                res.sync_v1_service_sync_map_sync_map_permission = out

        return res

    def update_sync_stream(self, request: operations.UpdateSyncStreamRequest, security: operations.UpdateSyncStreamSecurity, server_url: Optional[str] = None) -> operations.UpdateSyncStreamResponse:
        r"""Update a specific Stream."""
        base_url = operations.UPDATE_SYNC_STREAM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSyncStreamRequest, base_url, '/v1/Services/{ServiceSid}/Streams/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSyncStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyncV1ServiceSyncStream])
                res.sync_v1_service_sync_stream = out

        return res

    