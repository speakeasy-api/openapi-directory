/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EntityKey } from "./entitykey";
import { TransitiveMembershipRole } from "./transitivemembershiprole";
import { Expose, Type } from "class-transformer";

/**
 * The relation between the member and the transitive group.
 */
export enum GroupRelationRelationTypeEnum {
  RelationTypeUnspecified = "RELATION_TYPE_UNSPECIFIED",
  Direct = "DIRECT",
  Indirect = "INDIRECT",
  DirectAndIndirect = "DIRECT_AND_INDIRECT",
}

/**
 * Message representing a transitive group of a user or a group.
 */
export class GroupRelation extends SpeakeasyBase {
  /**
   * Display name for this group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Resource name for this group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group" })
  group?: string;

  /**
   * A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupKey" })
  @Type(() => EntityKey)
  groupKey?: EntityKey;

  /**
   * Labels for Group resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The relation between the member and the transitive group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationType" })
  relationType?: GroupRelationRelationTypeEnum;

  /**
   * Membership roles of the member for the group.
   */
  @SpeakeasyMetadata({ elemType: TransitiveMembershipRole })
  @Expose({ name: "roles" })
  @Type(() => TransitiveMembershipRole)
  roles?: TransitiveMembershipRole[];
}
