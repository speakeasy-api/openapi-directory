"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subnetwork = exports.SubnetworkStateEnum = exports.SubnetworkStackTypeEnum = exports.SubnetworkRoleEnum = exports.SubnetworkPurposeEnum = exports.SubnetworkPrivateIpv6GoogleAccessEnum = exports.SubnetworkIpv6AccessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var subnetworklogconfig_1 = require("./subnetworklogconfig");
var subnetworksecondaryrange_1 = require("./subnetworksecondaryrange");
var class_transformer_1 = require("class-transformer");
/**
 * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
 */
var SubnetworkIpv6AccessTypeEnum;
(function (SubnetworkIpv6AccessTypeEnum) {
    SubnetworkIpv6AccessTypeEnum["External"] = "EXTERNAL";
    SubnetworkIpv6AccessTypeEnum["Internal"] = "INTERNAL";
})(SubnetworkIpv6AccessTypeEnum = exports.SubnetworkIpv6AccessTypeEnum || (exports.SubnetworkIpv6AccessTypeEnum = {}));
/**
 * This field is for internal use. This field can be both set at resource creation time and updated using patch.
 */
var SubnetworkPrivateIpv6GoogleAccessEnum;
(function (SubnetworkPrivateIpv6GoogleAccessEnum) {
    SubnetworkPrivateIpv6GoogleAccessEnum["DisableGoogleAccess"] = "DISABLE_GOOGLE_ACCESS";
    SubnetworkPrivateIpv6GoogleAccessEnum["EnableBidirectionalAccessToGoogle"] = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE";
    SubnetworkPrivateIpv6GoogleAccessEnum["EnableOutboundVmAccessToGoogle"] = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE";
})(SubnetworkPrivateIpv6GoogleAccessEnum = exports.SubnetworkPrivateIpv6GoogleAccessEnum || (exports.SubnetworkPrivateIpv6GoogleAccessEnum = {}));
/**
 * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
 */
var SubnetworkPurposeEnum;
(function (SubnetworkPurposeEnum) {
    SubnetworkPurposeEnum["InternalHttpsLoadBalancer"] = "INTERNAL_HTTPS_LOAD_BALANCER";
    SubnetworkPurposeEnum["Private"] = "PRIVATE";
    SubnetworkPurposeEnum["PrivateRfc1918"] = "PRIVATE_RFC_1918";
    SubnetworkPurposeEnum["PrivateServiceConnect"] = "PRIVATE_SERVICE_CONNECT";
    SubnetworkPurposeEnum["RegionalManagedProxy"] = "REGIONAL_MANAGED_PROXY";
})(SubnetworkPurposeEnum = exports.SubnetworkPurposeEnum || (exports.SubnetworkPurposeEnum = {}));
/**
 * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
 */
var SubnetworkRoleEnum;
(function (SubnetworkRoleEnum) {
    SubnetworkRoleEnum["Active"] = "ACTIVE";
    SubnetworkRoleEnum["Backup"] = "BACKUP";
})(SubnetworkRoleEnum = exports.SubnetworkRoleEnum || (exports.SubnetworkRoleEnum = {}));
/**
 * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
 */
var SubnetworkStackTypeEnum;
(function (SubnetworkStackTypeEnum) {
    SubnetworkStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    SubnetworkStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(SubnetworkStackTypeEnum = exports.SubnetworkStackTypeEnum || (exports.SubnetworkStackTypeEnum = {}));
/**
 * [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
 */
var SubnetworkStateEnum;
(function (SubnetworkStateEnum) {
    SubnetworkStateEnum["Draining"] = "DRAINING";
    SubnetworkStateEnum["Ready"] = "READY";
})(SubnetworkStateEnum = exports.SubnetworkStateEnum || (exports.SubnetworkStateEnum = {}));
/**
 * Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network.
 */
var Subnetwork = /** @class */ (function (_super) {
    __extends(Subnetwork, _super);
    function Subnetwork() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowSubnetCidrRoutesOverlap" }),
        __metadata("design:type", Boolean)
    ], Subnetwork.prototype, "allowSubnetCidrRoutesOverlap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enableFlowLogs" }),
        __metadata("design:type", Boolean)
    ], Subnetwork.prototype, "enableFlowLogs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIpv6Prefix" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "externalIpv6Prefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gatewayAddress" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "gatewayAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIpv6Prefix" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "internalIpv6Prefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipCidrRange" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "ipCidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessType" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "ipv6AccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6CidrRange" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "ipv6CidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "logConfig" }),
        (0, class_transformer_1.Type)(function () { return subnetworklogconfig_1.SubnetworkLogConfig; }),
        __metadata("design:type", subnetworklogconfig_1.SubnetworkLogConfig)
    ], Subnetwork.prototype, "logConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privateIpGoogleAccess" }),
        __metadata("design:type", Boolean)
    ], Subnetwork.prototype, "privateIpGoogleAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privateIpv6GoogleAccess" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "privateIpv6GoogleAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "purpose" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "purpose", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reservedInternalRange" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "reservedInternalRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "role" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "role", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: subnetworksecondaryrange_1.SubnetworkSecondaryRange }),
        (0, class_transformer_1.Expose)({ name: "secondaryIpRanges" }),
        (0, class_transformer_1.Type)(function () { return subnetworksecondaryrange_1.SubnetworkSecondaryRange; }),
        __metadata("design:type", Array)
    ], Subnetwork.prototype, "secondaryIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Subnetwork.prototype, "state", void 0);
    return Subnetwork;
}(utils_1.SpeakeasyBase));
exports.Subnetwork = Subnetwork;
