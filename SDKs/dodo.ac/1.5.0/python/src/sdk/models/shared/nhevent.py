"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NHEventTypeEnum(str, Enum):
    r"""The type of event. \\"Event\\" is a festivity the player can take part in. \\"Nook Shopping\\" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). \\"Recipes\\" refers to the start or end of certain recipes being available. \\"Birthday\\" refers to the birthday of a villager or special character."""
    EVENT = 'Event'
    NOOK_SHOPPING = 'Nook Shopping'
    RECIPES = 'Recipes'
    BIRTHDAY = 'Birthday'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHEvent:
    
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date of the event in YYYY-MM-DD format."""  
    event: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""The description of the event."""  
    type: Optional[NHEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of event. \\"Event\\" is a festivity the player can take part in. \\"Nook Shopping\\" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). \\"Recipes\\" refers to the start or end of certain recipes being available. \\"Birthday\\" refers to the birthday of a villager or special character."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article for the event."""  
    