/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BackupInput - A Filestore backup.
 */
public class BackupInput {
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public BackupInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Immutable. KMS key name used for data encryption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyName")
    public String kmsKeyName;

    public BackupInput withKmsKeyName(String kmsKeyName) {
        this.kmsKeyName = kmsKeyName;
        return this;
    }
    
    /**
     * Resource labels to represent user provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public BackupInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Name of the file share in the source Filestore instance that the backup is created from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceFileShare")
    public String sourceFileShare;

    public BackupInput withSourceFileShare(String sourceFileShare) {
        this.sourceFileShare = sourceFileShare;
        return this;
    }
    
    /**
     * The resource name of the source Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceInstance")
    public String sourceInstance;

    public BackupInput withSourceInstance(String sourceInstance) {
        this.sourceInstance = sourceInstance;
        return this;
    }
    
    public BackupInput(){}
}
