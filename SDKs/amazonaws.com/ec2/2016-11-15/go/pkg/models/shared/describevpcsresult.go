// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum - The state of the CIDR block.
type DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum string

const (
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumAssociating    DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "associating"
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumAssociated     DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "associated"
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumDisassociating DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "disassociating"
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumDisassociated  DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "disassociated"
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumFailing        DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "failing"
	DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnumFailed         DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum = "failed"
)

func (e *DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum: %s", s)
	}
}

// DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockState - Information about the state of the CIDR block.
type DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockState struct {
	State         *DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum
	StatusMessage *string
}

// DescribeVpcsResultVpcsCidrBlockAssociationSet - Describes an IPv4 CIDR block associated with a VPC.
type DescribeVpcsResultVpcsCidrBlockAssociationSet struct {
	AssociationID  *string
	CidrBlock      *string
	CidrBlockState *DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockState
}

// DescribeVpcsResultVpcsInstanceTenancyEnum - The allowed tenancy of instances launched into the VPC.
type DescribeVpcsResultVpcsInstanceTenancyEnum string

const (
	DescribeVpcsResultVpcsInstanceTenancyEnumDefault   DescribeVpcsResultVpcsInstanceTenancyEnum = "default"
	DescribeVpcsResultVpcsInstanceTenancyEnumDedicated DescribeVpcsResultVpcsInstanceTenancyEnum = "dedicated"
	DescribeVpcsResultVpcsInstanceTenancyEnumHost      DescribeVpcsResultVpcsInstanceTenancyEnum = "host"
)

func (e *DescribeVpcsResultVpcsInstanceTenancyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "dedicated":
		fallthrough
	case "host":
		*e = DescribeVpcsResultVpcsInstanceTenancyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcsResultVpcsInstanceTenancyEnum: %s", s)
	}
}

// DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum - The state of the CIDR block.
type DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum string

const (
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociating    DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associating"
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociated     DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associated"
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociating DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociating"
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociated  DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociated"
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailing        DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failing"
	DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailed         DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failed"
)

func (e *DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum: %s", s)
	}
}

// DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockState - Information about the state of the CIDR block.
type DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockState struct {
	State         *DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// DescribeVpcsResultVpcsIpv6CidrBlockAssociationSet - Describes an IPv6 CIDR block associated with a VPC.
type DescribeVpcsResultVpcsIpv6CidrBlockAssociationSet struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockState
	Ipv6Pool           *string
	NetworkBorderGroup *string
}

// DescribeVpcsResultVpcsStateEnum - The current state of the VPC.
type DescribeVpcsResultVpcsStateEnum string

const (
	DescribeVpcsResultVpcsStateEnumPending   DescribeVpcsResultVpcsStateEnum = "pending"
	DescribeVpcsResultVpcsStateEnumAvailable DescribeVpcsResultVpcsStateEnum = "available"
)

func (e *DescribeVpcsResultVpcsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "available":
		*e = DescribeVpcsResultVpcsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcsResultVpcsStateEnum: %s", s)
	}
}

// DescribeVpcsResultVpcsTags - Describes a tag.
type DescribeVpcsResultVpcsTags struct {
	Key   *string
	Value *string
}

// DescribeVpcsResultVpcs - Describes a VPC.
type DescribeVpcsResultVpcs struct {
	CidrBlock                   *string
	CidrBlockAssociationSet     []DescribeVpcsResultVpcsCidrBlockAssociationSet
	DhcpOptionsID               *string
	InstanceTenancy             *DescribeVpcsResultVpcsInstanceTenancyEnum
	Ipv6CidrBlockAssociationSet []DescribeVpcsResultVpcsIpv6CidrBlockAssociationSet
	IsDefault                   *bool
	OwnerID                     *string
	State                       *DescribeVpcsResultVpcsStateEnum
	Tags                        []DescribeVpcsResultVpcsTags
	VpcID                       *string
}

// DescribeVpcsResult - Success
type DescribeVpcsResult struct {
	NextToken *string
	Vpcs      []DescribeVpcsResultVpcs
}
