/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthTokenUpdateStrategyTypeEnum } from "./authtokenupdatestrategytypeenum";
import { IpDiscoveryEnum } from "./ipdiscoveryenum";
import { LogDeliveryConfigurationRequestList } from "./logdeliveryconfigurationrequestlist";
import { TransitEncryptionModeEnum } from "./transitencryptionmodeenum";

/**
 * Represents the input of a <code>ModifyReplicationGroups</code> operation.
 */
export class ModifyReplicationGroupMessage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  applyImmediately?: boolean;

  @SpeakeasyMetadata()
  authToken?: string;

  @SpeakeasyMetadata()
  authTokenUpdateStrategy?: AuthTokenUpdateStrategyTypeEnum;

  @SpeakeasyMetadata()
  autoMinorVersionUpgrade?: boolean;

  @SpeakeasyMetadata()
  automaticFailoverEnabled?: boolean;

  @SpeakeasyMetadata()
  cacheNodeType?: string;

  @SpeakeasyMetadata()
  cacheParameterGroupName?: string;

  @SpeakeasyMetadata()
  cacheSecurityGroupNames?: string[];

  @SpeakeasyMetadata()
  engineVersion?: string;

  @SpeakeasyMetadata()
  ipDiscovery?: IpDiscoveryEnum;

  @SpeakeasyMetadata({ elemType: LogDeliveryConfigurationRequestList })
  logDeliveryConfigurations?: LogDeliveryConfigurationRequestList[];

  @SpeakeasyMetadata()
  multiAZEnabled?: boolean;

  @SpeakeasyMetadata()
  nodeGroupId?: string;

  @SpeakeasyMetadata()
  notificationTopicArn?: string;

  @SpeakeasyMetadata()
  notificationTopicStatus?: string;

  @SpeakeasyMetadata()
  preferredMaintenanceWindow?: string;

  @SpeakeasyMetadata()
  primaryClusterId?: string;

  @SpeakeasyMetadata()
  removeUserGroups?: boolean;

  @SpeakeasyMetadata()
  replicationGroupDescription?: string;

  @SpeakeasyMetadata()
  replicationGroupId: string;

  @SpeakeasyMetadata()
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  snapshotRetentionLimit?: number;

  @SpeakeasyMetadata()
  snapshotWindow?: string;

  @SpeakeasyMetadata()
  snapshottingClusterId?: string;

  @SpeakeasyMetadata()
  transitEncryptionEnabled?: boolean;

  @SpeakeasyMetadata()
  transitEncryptionMode?: TransitEncryptionModeEnum;

  @SpeakeasyMetadata()
  userGroupIdsToAdd?: string[];

  @SpeakeasyMetadata()
  userGroupIdsToRemove?: string[];
}
