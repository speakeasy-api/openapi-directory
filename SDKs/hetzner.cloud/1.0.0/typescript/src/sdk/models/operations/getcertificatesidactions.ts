/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetCertificatesIdActionsSortParameterSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Command = "command",
  CommandAsc = "command:asc",
  CommandDesc = "command:desc",
  Status = "status",
  StatusAsc = "status:asc",
  StatusDesc = "status:desc",
  Progress = "progress",
  ProgressAsc = "progress:asc",
  ProgressDesc = "progress:desc",
  Started = "started",
  StartedAsc = "started:asc",
  StartedDesc = "started:desc",
  Finished = "finished",
  FinishedAsc = "finished:asc",
  FinishedDesc = "finished:desc",
}

/**
 * Can be used multiple times, the response will contain only Actions with specified statuses
 */
export enum GetCertificatesIdActionsStatusParameterStatusEnum {
  Running = "running",
  Success = "success",
  Error = "error",
}

export class GetCertificatesIdActionsRequest extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetCertificatesIdActionsSortParameterSortEnum;

  /**
   * Can be used multiple times, the response will contain only Actions with specified statuses
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: GetCertificatesIdActionsStatusParameterStatusEnum;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class GetCertificatesIdActionsActionsResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class GetCertificatesIdActionsActionsResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum GetCertificatesIdActionsActionsResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class GetCertificatesIdActionsActionsResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => GetCertificatesIdActionsActionsResponseActionError)
  error: GetCertificatesIdActionsActionsResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: GetCertificatesIdActionsActionsResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => GetCertificatesIdActionsActionsResponseActionResources)
  resources: GetCertificatesIdActionsActionsResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCertificatesIdActionsActionsResponseActionStatusEnum;
}

export class GetCertificatesIdActionsActionsResponseMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetCertificatesIdActionsActionsResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetCertificatesIdActionsActionsResponseMetaPagination)
  pagination: GetCertificatesIdActionsActionsResponseMetaPagination;
}

/**
 * The `actions` key contains a list of Actions
 */
export class GetCertificatesIdActionsActionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetCertificatesIdActionsActionsResponseAction,
  })
  @Expose({ name: "actions" })
  @Type(() => GetCertificatesIdActionsActionsResponseAction)
  actions: GetCertificatesIdActionsActionsResponseAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetCertificatesIdActionsActionsResponseMeta)
  meta?: GetCertificatesIdActionsActionsResponseMeta;
}

export class GetCertificatesIdActionsResponse extends SpeakeasyBase {
  /**
   * The `actions` key contains a list of Actions
   */
  @SpeakeasyMetadata()
  actionsResponse?: GetCertificatesIdActionsActionsResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
