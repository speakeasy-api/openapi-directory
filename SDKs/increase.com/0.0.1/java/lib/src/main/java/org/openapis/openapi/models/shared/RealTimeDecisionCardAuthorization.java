/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RealTimeDecisionCardAuthorization - Fields related to a card authorization.
 */
public class RealTimeDecisionCardAuthorization {
    /**
     * The identifier of the Account the authorization will debit.
     */
    @JsonProperty("account_id")
    public String accountId;
    public RealTimeDecisionCardAuthorization withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The identifier of the Card that is being authorized.
     */
    @JsonProperty("card_id")
    public String cardId;
    public RealTimeDecisionCardAuthorization withCardId(String cardId) {
        this.cardId = cardId;
        return this;
    }
    
    /**
     * Whether or not the authorization was approved.
     */
    @JsonProperty("decision")
    public RealTimeDecisionCardAuthorizationDecisionEnum decision;
    public RealTimeDecisionCardAuthorization withDecision(RealTimeDecisionCardAuthorizationDecisionEnum decision) {
        this.decision = decision;
        return this;
    }
    
    /**
     * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
     */
    @JsonProperty("merchant_acceptor_id")
    public String merchantAcceptorId;
    public RealTimeDecisionCardAuthorization withMerchantAcceptorId(String merchantAcceptorId) {
        this.merchantAcceptorId = merchantAcceptorId;
        return this;
    }
    
    /**
     * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
     */
    @JsonProperty("merchant_category_code")
    public String merchantCategoryCode;
    public RealTimeDecisionCardAuthorization withMerchantCategoryCode(String merchantCategoryCode) {
        this.merchantCategoryCode = merchantCategoryCode;
        return this;
    }
    
    /**
     * The city the merchant resides in.
     */
    @JsonProperty("merchant_city")
    public String merchantCity;
    public RealTimeDecisionCardAuthorization withMerchantCity(String merchantCity) {
        this.merchantCity = merchantCity;
        return this;
    }
    
    /**
     * The country the merchant resides in.
     */
    @JsonProperty("merchant_country")
    public String merchantCountry;
    public RealTimeDecisionCardAuthorization withMerchantCountry(String merchantCountry) {
        this.merchantCountry = merchantCountry;
        return this;
    }
    
    /**
     * The merchant descriptor of the merchant the card is transacting with.
     */
    @JsonProperty("merchant_descriptor")
    public String merchantDescriptor;
    public RealTimeDecisionCardAuthorization withMerchantDescriptor(String merchantDescriptor) {
        this.merchantDescriptor = merchantDescriptor;
        return this;
    }
    
    /**
     * The payment network used to process this card authorization
     */
    @JsonProperty("network")
    public RealTimeDecisionCardAuthorizationNetworkEnum network;
    public RealTimeDecisionCardAuthorization withNetwork(RealTimeDecisionCardAuthorizationNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * Fields specific to the `network`
     */
    @JsonProperty("network_details")
    public RealTimeDecisionCardAuthorizationNetworkDetails networkDetails;
    public RealTimeDecisionCardAuthorization withNetworkDetails(RealTimeDecisionCardAuthorizationNetworkDetails networkDetails) {
        this.networkDetails = networkDetails;
        return this;
    }
    
    /**
     * The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
     */
    @JsonProperty("presentment_amount")
    public Long presentmentAmount;
    public RealTimeDecisionCardAuthorization withPresentmentAmount(Long presentmentAmount) {
        this.presentmentAmount = presentmentAmount;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
     */
    @JsonProperty("presentment_currency")
    public String presentmentCurrency;
    public RealTimeDecisionCardAuthorization withPresentmentCurrency(String presentmentCurrency) {
        this.presentmentCurrency = presentmentCurrency;
        return this;
    }
    
    /**
     * The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
     */
    @JsonProperty("settlement_amount")
    public Long settlementAmount;
    public RealTimeDecisionCardAuthorization withSettlementAmount(Long settlementAmount) {
        this.settlementAmount = settlementAmount;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
     */
    @JsonProperty("settlement_currency")
    public String settlementCurrency;
    public RealTimeDecisionCardAuthorization withSettlementCurrency(String settlementCurrency) {
        this.settlementCurrency = settlementCurrency;
        return this;
    }
    
}
