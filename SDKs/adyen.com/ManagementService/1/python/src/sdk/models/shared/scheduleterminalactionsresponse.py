"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import terminalactionscheduledetail as shared_terminalactionscheduledetail
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleTerminalActionsResponse:
    r"""OK - the request has succeeded."""
    
    action_details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionDetails'), 'exclude': lambda f: f is None }})
    r"""Information about the action to take."""  
    items: Optional[list[shared_terminalactionscheduledetail.TerminalActionScheduleDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""A list containing a terminal ID and an action ID for each terminal that the action was scheduled for."""  
    scheduled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledAt'), 'exclude': lambda f: f is None }})
    r"""The date and time when the action should happen.
    Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00** 
    The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal. 
    An empty value causes the action to be sent as soon as possible: at the next maintenance call.
    """  
    store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store."""  
    terminal_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terminalIds'), 'exclude': lambda f: f is None }})
    r"""A list of unique IDs of the terminals that the action applies to."""  
    terminals_with_errors: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terminalsWithErrors'), 'exclude': lambda f: f is None }})
    r"""The validation errors that occurred in the list of terminals, and for each error the IDs of the terminals that the error applies to."""  
    total_errors: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalErrors'), 'exclude': lambda f: f is None }})
    r"""The number of terminals for which scheduling the action failed."""  
    total_scheduled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalScheduled'), 'exclude': lambda f: f is None }})
    r"""The number of terminals for which the action was successfully scheduled. This doesn't mean the action has happened yet."""  
    