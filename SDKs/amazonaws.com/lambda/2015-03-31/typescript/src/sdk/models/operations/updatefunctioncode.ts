/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateFunctionCodeRequestBody extends SpeakeasyBase {
  /**
   * The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Architectures" })
  architectures?: shared.ArchitectureEnum[];

  /**
   * Set to true to validate the request parameters and access permissions without modifying the function code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DryRun" })
  dryRun?: boolean;

  /**
   * URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImageUri" })
  imageUri?: string;

  /**
   * Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Publish" })
  publish?: boolean;

  /**
   * Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RevisionId" })
  revisionId?: string;

  /**
   * An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3Bucket" })
  s3Bucket?: string;

  /**
   * The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3Key" })
  s3Key?: string;

  /**
   * For versioned objects, the version of the deployment package object to use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3ObjectVersion" })
  s3ObjectVersion?: string;

  /**
   * The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients handle the encoding for you. Use only with a function defined with a .zip file archive deployment package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ZipFile" })
  zipFile?: string;
}

export class UpdateFunctionCodeRequest extends SpeakeasyBase {
  /**
   * <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FunctionName",
  })
  functionName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFunctionCodeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateFunctionCodeResponse extends SpeakeasyBase {
  /**
   * CodeSigningConfigNotFoundException
   */
  @SpeakeasyMetadata()
  codeSigningConfigNotFoundException?: any;

  /**
   * CodeStorageExceededException
   */
  @SpeakeasyMetadata()
  codeStorageExceededException?: any;

  /**
   * CodeVerificationFailedException
   */
  @SpeakeasyMetadata()
  codeVerificationFailedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  functionConfiguration?: shared.FunctionConfiguration;

  /**
   * InvalidCodeSignatureException
   */
  @SpeakeasyMetadata()
  invalidCodeSignatureException?: any;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
