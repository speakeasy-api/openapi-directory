<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LifecycleOperations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate User
     * 
     * Activate User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateUserResponse
     */
	public function activateUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivateUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/activate', \OpenAPI\OpenAPI\Models\Operations\ActivateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivateUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deactivate User
     * 
     * Deactivate User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeactivateUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeactivateUserResponse
     */
	public function deactivateUser(
        \OpenAPI\OpenAPI\Models\Operations\DeactivateUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeactivateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/deactivate', \OpenAPI\OpenAPI\Models\Operations\DeactivateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeactivateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset Password
     * 
     * Reset Password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
     */
	public function resetPassword(
        \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/reset_password', \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Set Temp Password
     * 
     * Set Temp Password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordResponse
     */
	public function setTempPassword(
        \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/expire_password', \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SetTempPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetTempPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Suspend User
     * 
     * Suspend User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
     */
	public function suspendUser(
        \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/suspend', \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unlock User
     * 
     * Unlock User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse
     */
	public function unlockUser(
        \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/unlock', \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unsuspend User
     * 
     * Unsuspend User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserResponse
     */
	public function unsuspendUser(
        \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/unsuspend', \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}