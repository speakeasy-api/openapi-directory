/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The configuration of the circuit breaker for a service descriptor
 */
export class ClientConfig extends SpeakeasyBase {
  /**
   * Specify the factor to multiply the delay for each retry
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backoffFactor" })
  backoffFactor: number;

  /**
   * Specify how long each call should last at most in milliseconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callTimeout" })
  callTimeout: number;

  /**
   * Specify how long the global call (with retries) should last at most in milliseconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "globalTimeout" })
  globalTimeout: number;

  /**
   * Specify how many errors can pass before opening the circuit breaker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxErrors" })
  maxErrors: number;

  /**
   * Specify how many times the client will try to fetch the result of the request after an error before giving up.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retries" })
  retries: number;

  /**
   * Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retryInitialDelay" })
  retryInitialDelay: number;

  /**
   * Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sampleInterval" })
  sampleInterval: number;

  /**
   * Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useCircuitBreaker" })
  useCircuitBreaker: boolean;
}
