/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Adunits {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List all custom channels which the specified ad unit belongs to.
   */
  adsenseAdunitsCustomchannelsList(
    req: operations.AdsenseAdunitsCustomchannelsListRequest,
    security: operations.AdsenseAdunitsCustomchannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAdunitsCustomchannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAdunitsCustomchannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/adclients/{adClientId}/adunits/{adUnitId}/customchannels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAdunitsCustomchannelsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAdunitsCustomchannelsListResponse =
        new operations.AdsenseAdunitsCustomchannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customChannels = utils.objectToClass(
              httpRes?.data,
              shared.CustomChannels
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified ad unit in the specified ad client.
   */
  adsenseAdunitsGet(
    req: operations.AdsenseAdunitsGetRequest,
    security: operations.AdsenseAdunitsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAdunitsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAdunitsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/adclients/{adClientId}/adunits/{adUnitId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAdunitsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAdunitsGetResponse =
        new operations.AdsenseAdunitsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get ad code for the specified ad unit.
   */
  adsenseAdunitsGetAdCode(
    req: operations.AdsenseAdunitsGetAdCodeRequest,
    security: operations.AdsenseAdunitsGetAdCodeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAdunitsGetAdCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAdunitsGetAdCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/adclients/{adClientId}/adunits/{adUnitId}/adcode",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAdunitsGetAdCodeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAdunitsGetAdCodeResponse =
        new operations.AdsenseAdunitsGetAdCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adCode = utils.objectToClass(httpRes?.data, shared.AdCode);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ad units in the specified ad client for this AdSense account.
   */
  adsenseAdunitsList(
    req: operations.AdsenseAdunitsListRequest,
    security: operations.AdsenseAdunitsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAdunitsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAdunitsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/adclients/{adClientId}/adunits",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAdunitsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAdunitsListResponse =
        new operations.AdsenseAdunitsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnits = utils.objectToClass(httpRes?.data, shared.AdUnits);
          }
          break;
      }

      return res;
    });
  }
}
