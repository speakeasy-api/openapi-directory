"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AnalyticsGroupByEnum(str, Enum):
    r"""Defines the grouping of the data."""
    DATE = 'date'
    LABEL = 'label'
    SUBACCOUNT = 'subaccount'
    COUNTRY = 'country'


@dataclasses.dataclass
class AnalyticsRequest:
    
    end: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': True }})
    r"""End date of the statistics in the format YYYY-MM-DD. By default, the current day."""  
    group_by: Optional[AnalyticsGroupByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group_by', 'style': 'form', 'explode': True }})
    r"""Defines the grouping of the data."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label', 'style': 'form', 'explode': True }})
    r"""Shows only data of a specific label."""  
    start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set."""  
    subaccounts: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'subaccounts', 'style': 'form', 'explode': True }})
    r"""Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Analytics200ApplicationJSON:
    r"""OK"""
    
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})  
    direct: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direct'), 'exclude': lambda f: f is None }})  
    economy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('economy'), 'exclude': lambda f: f is None }})  
    hlr: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hlr'), 'exclude': lambda f: f is None }})  
    inbound: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inbound'), 'exclude': lambda f: f is None }})  
    mnp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mnp'), 'exclude': lambda f: f is None }})  
    usage_eur: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage_eur'), 'exclude': lambda f: f is None }})  
    voice: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AnalyticsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_200_application_json_object: Optional[Analytics200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    