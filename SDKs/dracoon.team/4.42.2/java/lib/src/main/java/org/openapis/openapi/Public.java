/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Public API (upload / download shares, software information)
 */
public class Public {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Public(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Cancel file upload
     * ### Description:
     * Abort (chunked) upload via Upload Share.
     * 
     * ### Precondition:
     * Valid Upload ID.
     * 
     * ### Postcondition:
     * Aborts upload and invalidates upload ID / token.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CancelFileUploadViaShareResponse cancelFileUploadViaShare(org.openapis.openapi.models.operations.CancelFileUploadViaShareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CancelFileUploadViaShareRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CancelFileUploadViaShareResponse res = new org.openapis.openapi.models.operations.CancelFileUploadViaShareResponse() {{
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 504 || httpRes.statusCode() == 507) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Check public Download Share password
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.36.0&lt;/h3&gt;
     * 
     * ### Description:
     * Check password for a public Download Share
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * None.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordResponse checkPublicDownloadSharePassword(org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordRequest.class, baseUrl, "/v4/public/shares/downloads/{access_key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordResponse res = new org.openapis.openapi.models.operations.CheckPublicDownloadSharePasswordResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406) {
        }

        return res;
    }

    /**
     * Complete file upload
     * ### Description:
     * Finalize (chunked) upload via Upload Share.
     * 
     * ### Precondition:
     * Valid upload ID.  
     * Only returns users that owns one of the following permissions: &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage upload share&lt;/span&gt;
     * 
     * ### Postcondition:
     * Finalizes upload.
     * 
     * ### Further Information:
     * Chunked uploads (range requests) are supported.  
     * 
     * Please ensure that all chunks have been transferred correctly before finishing the upload.  
     * If file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it.
     * 
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CompleteFileUploadViaShareResponse completeFileUploadViaShare(org.openapis.openapi.models.operations.CompleteFileUploadViaShareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CompleteFileUploadViaShareRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "userFileKeyList", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CompleteFileUploadViaShareResponse res = new org.openapis.openapi.models.operations.CompleteFileUploadViaShareResponse() {{
            publicUploadedFileData = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201 || httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PublicUploadedFileData out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PublicUploadedFileData.class);
                res.publicUploadedFileData = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412 || httpRes.statusCode() == 504 || httpRes.statusCode() == 507) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Complete S3 file upload
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;
     * 
     * ### Description:
     * Finishes a S3 file upload and closes the corresponding upload channel.
     * 
     * ### Precondition:
     * Valid upload ID.  
     * Only returns users that owns one of the following permissions: &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage upload share&lt;/span&gt;
     * 
     * ### Postcondition:
     * Upload channel is closed. S3 multipart upload request is completed.
     * 
     * ### Further Information:
     * None.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CompleteS3FileUploadViaShareResponse completeS3FileUploadViaShare(org.openapis.openapi.models.operations.CompleteS3FileUploadViaShareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CompleteS3FileUploadViaShareRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}/s3", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "completeS3ShareUploadRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CompleteS3FileUploadViaShareResponse res = new org.openapis.openapi.models.operations.CompleteS3FileUploadViaShareResponse() {{
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Create new file upload channel
     * ### Description:  
     * Create a new upload channel.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Upload channel is created and corresponding upload URL, token &amp; upload ID are returned.
     * 
     * ### Further Information:
     * Use `uploadUrl` the upload `token` is deprecated.  
     * 
     * Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.
     * 
     * ### Node naming convention:
     * * Node (room, folder, file) names are limited to **150** characters.
     * * Illegal names:  
     * `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
     * * Illegal characters in names:  
     * `'\\', '&lt;','&gt;', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateShareUploadChannelResponse createShareUploadChannel(org.openapis.openapi.models.operations.CreateShareUploadChannelRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateShareUploadChannelRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "createShareUploadChannelRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateShareUploadChannelResponse res = new org.openapis.openapi.models.operations.CreateShareUploadChannelResponse() {{
            createShareUploadChannelResponse = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateShareUploadChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateShareUploadChannelResponse.class);
                res.createShareUploadChannelResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412 || httpRes.statusCode() == 504 || httpRes.statusCode() == 507) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Download file with token
     * ### Description:  
     * Download a file (or zip archive if target is a folder or room).
     * 
     * ### Precondition:
     * Valid download token.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * Range requests are supported.  
     * Range requests are illegal for zip archive download.
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DownloadFileViaTokenPublicResponse downloadFileViaTokenPublic(org.openapis.openapi.models.operations.DownloadFileViaTokenPublicRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DownloadFileViaTokenPublicRequest.class, baseUrl, "/v4/public/shares/downloads/{access_key}/{token}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DownloadFileViaTokenPublicRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DownloadFileViaTokenPublicResponse res = new org.openapis.openapi.models.operations.DownloadFileViaTokenPublicResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 206) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 416) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Download file with token
     * ### Description:  
     * Download a file (or zip archive if target is a folder or room).
     * 
     * ### Precondition:
     * Valid download token.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * Range requests are supported.  
     * Range requests are illegal for zip archive download.
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Response downloadFileViaTokenPublic1(org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Request.class, baseUrl, "/v4/public/shares/downloads/{access_key}/{token}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Response res = new org.openapis.openapi.models.operations.DownloadFileViaTokenPublic1Response() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 206) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 416) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Generate download URL
     * ### Description:
     * Generate a download URL to retrieve a shared file.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Download URL and token are generated and returned.
     * 
     * ### Further Information:
     * Use `downloadUrl` the download `token` is deprecated.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GenerateDownloadUrlPublicResponse generateDownloadUrlPublic(org.openapis.openapi.models.operations.GenerateDownloadUrlPublicRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GenerateDownloadUrlPublicRequest.class, baseUrl, "/v4/public/shares/downloads/{access_key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "publicDownloadTokenGenerateRequest", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GenerateDownloadUrlPublicResponse res = new org.openapis.openapi.models.operations.GenerateDownloadUrlPublicResponse() {{
            publicDownloadTokenGenerateResponse = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PublicDownloadTokenGenerateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PublicDownloadTokenGenerateResponse.class);
                res.publicDownloadTokenGenerateResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Generate presigned URLs for S3 file upload
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;
     * 
     * ### Description:
     * Generate presigned URLs for S3 file upload.
     * 
     * ### Precondition:
     * Valid upload ID
     * 
     * ### Postcondition:
     * List of presigned URLs is returned.
     * 
     * ### Further Information:
     * The size for each part must be &gt;= 5 MB, except for the last part.  
     * The part number of the first part in S3 is 1 (not 0).  
     * Use HTTP method `PUT` for uploading bytes via presigned URL.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GeneratePresignedUrlsPublicResponse generatePresignedUrlsPublic(org.openapis.openapi.models.operations.GeneratePresignedUrlsPublicRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GeneratePresignedUrlsPublicRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "generatePresignedUrlsRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GeneratePresignedUrlsPublicResponse res = new org.openapis.openapi.models.operations.GeneratePresignedUrlsPublicResponse() {{
            presignedUrlList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PresignedUrlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PresignedUrlList.class);
                res.presignedUrlList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412 || httpRes.statusCode() == 504 || httpRes.statusCode() == 507) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request Active Directory authentication information
     * ### Description:  
     * Provides information about Active Directory authentication options.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Active Directory authentication options information is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestActiveDirectoryAuthInfoResponse requestActiveDirectoryAuthInfo(org.openapis.openapi.models.operations.RequestActiveDirectoryAuthInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/system/info/auth/ad");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestActiveDirectoryAuthInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestActiveDirectoryAuthInfoResponse res = new org.openapis.openapi.models.operations.RequestActiveDirectoryAuthInfoResponse() {{
            activeDirectoryAuthInfo = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActiveDirectoryAuthInfo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActiveDirectoryAuthInfo.class);
                res.activeDirectoryAuthInfo = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request OpenID Connect provider authentication information
     * ### Description:  
     * Provides information about OpenID Connect authentication options.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * OpenID Connect authentication options information is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestOpenIdAuthInfoResponse requestOpenIdAuthInfo(org.openapis.openapi.models.operations.RequestOpenIdAuthInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/system/info/auth/openid");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestOpenIdAuthInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestOpenIdAuthInfoResponse res = new org.openapis.openapi.models.operations.RequestOpenIdAuthInfoResponse() {{
            openIdAuthInfo = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OpenIdAuthInfo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OpenIdAuthInfo.class);
                res.openIdAuthInfo = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request public Download Share information
     * ### Description:  
     * Retrieve the public information of a Download Share.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Download Share information is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestPublicDownloadShareInfoResponse requestPublicDownloadShareInfo(org.openapis.openapi.models.operations.RequestPublicDownloadShareInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestPublicDownloadShareInfoRequest.class, baseUrl, "/v4/public/shares/downloads/{access_key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestPublicDownloadShareInfoResponse res = new org.openapis.openapi.models.operations.RequestPublicDownloadShareInfoResponse() {{
            publicDownloadShare = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PublicDownloadShare out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PublicDownloadShare.class);
                res.publicDownloadShare = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request public Upload Share information
     * ### Description:  
     * Provides information about the desired Upload Share.
     * 
     * ### Precondition:
     * Only `userUserPublicKeyList` is returned to the users who owns one of the following permissions: &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; manage upload share&lt;/span&gt;
     * 
     * ### Postcondition:
     * None.
     * 
     * ### Further Information:
     * If no password is set, the returned information is reduced to the following attributes (if available):
     * 
     * * `name`
     * * `createdAt`
     * * `isProtected`
     * * `isEncrypted`
     * * `showUploadedFiles`
     * * `userUserPublicKeyList` (if parent is end-to-end encrypted)
     * 
     * Only if the password is transmitted as `X-Sds-Share-Password` header, all values are returned.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestPublicUploadShareInfoResponse requestPublicUploadShareInfo(org.openapis.openapi.models.operations.RequestPublicUploadShareInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestPublicUploadShareInfoRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestPublicUploadShareInfoResponse res = new org.openapis.openapi.models.operations.RequestPublicUploadShareInfoResponse() {{
            publicUploadShare = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PublicUploadShare out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PublicUploadShare.class);
                res.publicUploadShare = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request software version information
     * ### Description:  
     * Public software version information.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Sofware version information is returned.
     * 
     * ### Further Information:
     * The version of DRACOON Server consists of two components:
     * * **API**
     * * **Core** (referred to as _"Server"_)
     * 
     * which are versioned individually.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSoftwareVersionResponse requestSoftwareVersion(org.openapis.openapi.models.operations.RequestSoftwareVersionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/software/version");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSoftwareVersionResponse res = new org.openapis.openapi.models.operations.RequestSoftwareVersionResponse() {{
            softwareVersionData = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SoftwareVersionData out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SoftwareVersionData.class);
                res.softwareVersionData = out;
            }
        }
        else if (httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request system information
     * ### Description:  
     * Provides information about system.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * System information is returned.
     * 
     * ### Further Information:
     * Authentication methods are sorted by **priority** attribute.  
     * Smaller values have higher priority.  
     * Authentication method with highest priority is considered as default.
     * 
     * ### System information:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
     * | `hideLoginInputFields` | Defines if login fields should be hidden. | `true or false` |
     * | `s3Hosts` | List of available S3 hosts. | `String array` |
     * | `s3EnforceDirectUpload` | Determines whether S3 direct upload is enforced or not. | `true or false` |
     * | `useS3Storage` | Determines whether S3 Storage enabled and used. | `true or false` |
     * 
     * &lt;/details&gt;
     * 
     * ### Authentication methods:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Authentication Method | Description |
     * | :--- | :--- |
     * | `basic` | **Basic** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their credentials stored in the database.&lt;br&gt;Formerly known as `sql`. |
     * | `active_directory` | **Active Directory** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
     * | `radius` | **RADIUS** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
     * | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
     * | `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |
     * 
     * &lt;/details&gt;
     * https://tools.ietf.org/html/rfc5646 - Tags for Identifying Languages
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSystemInfoResponse requestSystemInfo(org.openapis.openapi.models.operations.RequestSystemInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/system/info");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestSystemInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSystemInfoResponse res = new org.openapis.openapi.models.operations.RequestSystemInfoResponse() {{
            systemInfo = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SystemInfo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SystemInfo.class);
                res.systemInfo = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request system time
     * ### Description:  
     * Retrieve the actual server time.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * Server time is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSystemTimeResponse requestSystemTime(org.openapis.openapi.models.operations.RequestSystemTimeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/time");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSystemTimeResponse res = new org.openapis.openapi.models.operations.RequestSystemTimeResponse() {{
            sdsServerTime = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SdsServerTime out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SdsServerTime.class);
                res.sdsServerTime = out;
            }
        }
        else if (httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request third-party software dependencies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Provides information about used third-party software dependencies.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * List of the third-party software dependencies used by **DRACOON Core** (referred to as _"Server"_) is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * 
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestThirdPartyDependenciesResponse requestThirdPartyDependencies() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/public/software/third_party_dependencies");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestThirdPartyDependenciesResponse res = new org.openapis.openapi.models.operations.RequestThirdPartyDependenciesResponse() {{
            thirdPartyDependenciesData = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ThirdPartyDependenciesData[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ThirdPartyDependenciesData[].class);
                res.thirdPartyDependenciesData = out;
            }
        }
        else if (httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request status of S3 file upload
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;
     * 
     * ### Description:
     * Request status of a S3 file upload.
     * 
     * ### Precondition:
     * An upload channel has been created and the user has &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; create&lt;/span&gt; permissions in the parent container (room or folder).
     * 
     * ### Postcondition:
     * Status of S3 multipart upload request is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Possible errors:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Http Status | Error Code | Description |
     * | :--- | :--- | :--- |
     * | `400 Bad Request` | `-80000` | Mandatory fields cannot be empty |
     * | `400 Bad Request` | `-80001` | Invalid positive number |
     * | `400 Bad Request` | `-80002` | Invalid number |
     * | `400 Bad Request` | `-40001` | (Target) room is not encrypted |
     * | `400 Bad Request` | `-40755` | Bad file name |
     * | `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room |
     * | `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share |
     * | `403 Forbidden` |  | Access denied |
     * | `404 Not Found` | `-20501` | Upload not found |
     * | `404 Not Found` | `-40000` | Container not found |
     * | `404 Not Found` | `-41000` | Node not found |
     * | `404 Not Found` | `-70501` | User not found |
     * | `409 Conflict` | `-40010` | Container cannot be overwritten |
     * | `409 Conflict` |  | File cannot be overwritten |
     * | `500 Internal Server Error` |  | System Error |
     * | `502 Bad Gateway` |  | S3 Error |
     * | `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share |
     * | `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room |
     * | `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota |
     * | `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestUploadStatusPublicResponse requestUploadStatusPublic(org.openapis.openapi.models.operations.RequestUploadStatusPublicRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestUploadStatusPublicRequest.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestUploadStatusPublicResponse res = new org.openapis.openapi.models.operations.RequestUploadStatusPublicResponse() {{
            s3ShareUploadStatus = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.S3ShareUploadStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.S3ShareUploadStatus.class);
                res.s3ShareUploadStatus = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Upload file
     * ### Description:  
     * Chunked upload of files via Upload Share.
     * 
     * ### Precondition:
     * Valid upload ID.
     * 
     * ### Postcondition:
     * Chunk of file is uploaded.
     * 
     * ### Further Information:
     * Chunked uploads (range requests) are supported.
     * 
     * Following `Content-Types` are supported by this API:
     * * `multipart/form-data`
     * * provided `Content-Type`  
     * 
     * For both file upload types set the correct `Content-Type` header and body.  
     * 
     * ### Examples:  
     * 
     * * `multipart/form-data`
     * ```
     * POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1
     * 
     * Header:
     * ...
     * Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
     * ...
     * 
     * Body:
     * ------WebKitFormBoundary7MA4YWxkTrZu0gW
     * Content-Disposition: form-data; name="file"; filename="file.txt"
     * Content-Type: text/plain
     * 
     * Content of file.txt
     * ------WebKitFormBoundary7MA4YWxkTrZu0gW--
     * ```
     * 
     * * any other `Content-Type`  
     * ```
     * POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1
     * 
     * Header:
     * ...
     * Content-Type: { ... }
     * ...
     * 
     * Body:
     * raw content
     * ```
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UploadFileAsMultipartPublic1Response uploadFileAsMultipartPublic1(org.openapis.openapi.models.operations.UploadFileAsMultipartPublic1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UploadFileAsMultipartPublic1Request.class, baseUrl, "/v4/public/shares/uploads/{access_key}/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UploadFileAsMultipartPublic1Response res = new org.openapis.openapi.models.operations.UploadFileAsMultipartPublic1Response() {{
            chunkUploadResponse = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ChunkUploadResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ChunkUploadResponse.class);
                res.chunkUploadResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412 || httpRes.statusCode() == 507) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}