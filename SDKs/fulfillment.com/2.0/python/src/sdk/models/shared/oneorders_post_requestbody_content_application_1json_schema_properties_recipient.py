"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OneordersPostRequestBodyContentApplication1jsonSchemaPropertiesRecipient:
    
    address1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1') }})
    r"""Address Line 1"""  
    address_locality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLocality') }})
    r"""City"""  
    address_region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressRegion') }})
    r"""Province / State"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Country, for best results please provide the two character ISO code"""  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email, required for international shipments"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})  
    phone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone') }})
    r"""Phone number, required for international shipments"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})
    r"""Address Line 2"""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal Code / Zip"""  
    