/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * How long, in days, message data is kept.
 */
export class UpdateDatasetRequestBodyRetentionPeriod extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfDays" })
  numberOfDays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unlimited" })
  unlimited?: boolean;
}

/**
 * Information about the versioning of dataset contents.
 */
export class UpdateDatasetRequestBodyVersioningConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "maxVersions" })
  maxVersions?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unlimited" })
  unlimited?: boolean;
}

export class UpdateDatasetRequestBody extends SpeakeasyBase {
  /**
   * A list of <code>DatasetAction</code> objects.
   */
  @SpeakeasyMetadata({ elemType: shared.DatasetAction })
  @Expose({ name: "actions" })
  @Type(() => shared.DatasetAction)
  actions: shared.DatasetAction[];

  /**
   * When dataset contents are created, they are delivered to destinations specified here.
   */
  @SpeakeasyMetadata({ elemType: shared.DatasetContentDeliveryRule })
  @Expose({ name: "contentDeliveryRules" })
  @Type(() => shared.DatasetContentDeliveryRule)
  contentDeliveryRules?: shared.DatasetContentDeliveryRule[];

  /**
   * A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.
   */
  @SpeakeasyMetadata({ elemType: shared.LateDataRule })
  @Expose({ name: "lateDataRules" })
  @Type(() => shared.LateDataRule)
  lateDataRules?: shared.LateDataRule[];

  /**
   * How long, in days, message data is kept.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => UpdateDatasetRequestBodyRetentionPeriod)
  retentionPeriod?: UpdateDatasetRequestBodyRetentionPeriod;

  /**
   * A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to five <code>DatasetTrigger</code> objects.
   */
  @SpeakeasyMetadata({ elemType: shared.DatasetTrigger })
  @Expose({ name: "triggers" })
  @Type(() => shared.DatasetTrigger)
  triggers?: shared.DatasetTrigger[];

  /**
   * Information about the versioning of dataset contents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "versioningConfiguration" })
  @Type(() => UpdateDatasetRequestBodyVersioningConfiguration)
  versioningConfiguration?: UpdateDatasetRequestBodyVersioningConfiguration;
}

export class UpdateDatasetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateDatasetRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the dataset to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=datasetName",
  })
  datasetName: string;
}

export class UpdateDatasetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
