// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SkhscSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SkhscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// SkhscRequestBodyFormatEnum - The format of the certificate in response.
type SkhscRequestBodyFormatEnum string

const (
	SkhscRequestBodyFormatEnumPdf SkhscRequestBodyFormatEnum = "pdf"
)

func (e SkhscRequestBodyFormatEnum) ToPointer() *SkhscRequestBodyFormatEnum {
	return &e
}

func (e *SkhscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SkhscRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SkhscRequestBodyFormatEnum: %v", v)
	}
}

// SkhscRequestBody - Request format
type SkhscRequestBody struct {
	CertificateParameters *SkhscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SkhscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Skhsc504ApplicationJSONErrorEnum string

const (
	Skhsc504ApplicationJSONErrorEnumGatewayTimeout Skhsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Skhsc504ApplicationJSONErrorEnum) ToPointer() *Skhsc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Skhsc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc504ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Skhsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Skhsc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Skhsc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc504ApplicationJSON - Gateway timeout
type Skhsc504ApplicationJSON struct {
	Error            *Skhsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc503ApplicationJSONErrorEnum string

const (
	Skhsc503ApplicationJSONErrorEnumServiceUnavailable Skhsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Skhsc503ApplicationJSONErrorEnum) ToPointer() *Skhsc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Skhsc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc503ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Skhsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Skhsc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Skhsc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc503ApplicationJSON - Service unavailable
type Skhsc503ApplicationJSON struct {
	Error            *Skhsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc502ApplicationJSONErrorEnum string

const (
	Skhsc502ApplicationJSONErrorEnumBadGatewy Skhsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Skhsc502ApplicationJSONErrorEnum) ToPointer() *Skhsc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Skhsc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc502ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Skhsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Skhsc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Skhsc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc502ApplicationJSON - Bad gateway
type Skhsc502ApplicationJSON struct {
	Error            *Skhsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc500ApplicationJSONErrorEnum string

const (
	Skhsc500ApplicationJSONErrorEnumInternalServerError Skhsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Skhsc500ApplicationJSONErrorEnum) ToPointer() *Skhsc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Skhsc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc500ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc500ApplicationJSONErrorDescriptionEnumInternalServerError Skhsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Skhsc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Skhsc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc500ApplicationJSON - Internal server error
type Skhsc500ApplicationJSON struct {
	Error            *Skhsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc404ApplicationJSONErrorEnum string

const (
	Skhsc404ApplicationJSONErrorEnumRecordNotFound Skhsc404ApplicationJSONErrorEnum = "record_not_found"
	Skhsc404ApplicationJSONErrorEnumURLNotFound    Skhsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Skhsc404ApplicationJSONErrorEnum) ToPointer() *Skhsc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Skhsc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc404ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Skhsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Skhsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Skhsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Skhsc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Skhsc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc404ApplicationJSON - No record found
type Skhsc404ApplicationJSON struct {
	Error            *Skhsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc401ApplicationJSONErrorEnum string

const (
	Skhsc401ApplicationJSONErrorEnumInvalidAuthentication Skhsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Skhsc401ApplicationJSONErrorEnumInvalidAuthorization  Skhsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Skhsc401ApplicationJSONErrorEnum) ToPointer() *Skhsc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Skhsc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc401ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Skhsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Skhsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Skhsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Skhsc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Skhsc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc401ApplicationJSON - Unauthorized access
type Skhsc401ApplicationJSON struct {
	Error            *Skhsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skhsc400ApplicationJSONErrorEnum string

const (
	Skhsc400ApplicationJSONErrorEnumMissingParameter Skhsc400ApplicationJSONErrorEnum = "missing_parameter"
	Skhsc400ApplicationJSONErrorEnumInvalidParameter Skhsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Skhsc400ApplicationJSONErrorEnumInvalidFormat    Skhsc400ApplicationJSONErrorEnum = "invalid_format"
	Skhsc400ApplicationJSONErrorEnumInvalidTxnid     Skhsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Skhsc400ApplicationJSONErrorEnumInvalidConsentid Skhsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Skhsc400ApplicationJSONErrorEnum) ToPointer() *Skhsc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Skhsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Skhsc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Skhsc400ApplicationJSONErrorDescriptionEnum string

const (
	Skhsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Skhsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Skhsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Skhsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Skhsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Skhsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Skhsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Skhsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Skhsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Skhsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Skhsc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Skhsc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skhsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Skhsc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skhsc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skhsc400ApplicationJSON - Bad request
type Skhsc400ApplicationJSON struct {
	Error            *Skhsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skhsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SkhscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Skhsc400ApplicationJSONObject *Skhsc400ApplicationJSON
	// Unauthorized access
	Skhsc401ApplicationJSONObject *Skhsc401ApplicationJSON
	// No record found
	Skhsc404ApplicationJSONObject *Skhsc404ApplicationJSON
	// Internal server error
	Skhsc500ApplicationJSONObject *Skhsc500ApplicationJSON
	// Bad gateway
	Skhsc502ApplicationJSONObject *Skhsc502ApplicationJSON
	// Service unavailable
	Skhsc503ApplicationJSONObject *Skhsc503ApplicationJSON
	// Gateway timeout
	Skhsc504ApplicationJSONObject *Skhsc504ApplicationJSON
}
