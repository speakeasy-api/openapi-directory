"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Project:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def assign_cm(self, request: operations.AssignCMRequest) -> operations.AssignCMResponse:
        r"""Assign a CM to the project"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssignCMRequest, base_url, '/projects/{id}/assign-cm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cm", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignCMResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def cancel_project(self, request: operations.CancelProjectRequest) -> operations.CancelProjectResponse:
        r"""Cancel your translation project
        If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelProjectRequest, base_url, '/projects/{id}/cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_project_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_project_json(self, request: shared.NewProject) -> operations.CreateProjectJSONResponse:
        r"""Create a new project
        Create a new translation project. Projects are not launched (you are not charged) until you `/launch` the created project.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out
        elif http_res.status_code in [400, 405, 406, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_project_multipart(self, request: shared.NewProject1) -> operations.CreateProjectMultipartResponse:
        r"""Create a new project
        Create a new translation project. Projects are not launched (you are not charged) until you `/launch` the created project.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out
        elif http_res.status_code in [400, 405, 406, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_project(self, request: operations.DeleteProjectRequest) -> operations.DeleteProjectResponse:
        r"""Delete your translation project
        If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProjectRequest, base_url, '/projects/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def deliver_project(self, request: operations.DeliverProjectRequest) -> operations.DeliverProjectResponse:
        r"""Deliver project
        Deliver project to the owner of the project. You can also download your translations in `/package` and `/download` endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeliverProjectRequest, base_url, '/projects/{id}/deliver', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeliverProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download(self, request: operations.DownloadRequest) -> operations.DownloadResponse:
        r"""Download your translated project
        Download the latest translation package. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadRequest, base_url, '/projects/{id}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.download_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_html_invoice(self, request: operations.DownloadHTMLInvoiceRequest) -> operations.DownloadHTMLInvoiceResponse:
        r"""Download project invoice (HTML)
        Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadHTMLInvoiceRequest, base_url, '/projects/{id}/invoice.html', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadHTMLInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/html'):
                res.download_html_invoice_200_text_html_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_language(self, request: operations.DownloadLanguageRequest) -> operations.DownloadLanguageResponse:
        r"""Download your translated project language
        Download the latest translation package for your target language. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadLanguageRequest, base_url, '/projects/{id}/download/{language}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.download_language_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_pdf_invoice(self, request: operations.DownloadPdfInvoiceRequest) -> operations.DownloadPdfInvoiceResponse:
        r"""Download project invoice (PDF)
        Download your project invoice as PDF. Your invoice may be in \"unpaid\" status, in which case youn can see the payment instructions in the PDF file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadPdfInvoiceRequest, base_url, '/projects/{id}/invoice.pdf', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadPdfInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/pdf'):
                res.download_pdf_invoice_200_application_pdf_binary_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_invoice(self, request: operations.GetInvoiceRequest) -> operations.GetInvoiceResponse:
        r"""View project invoice
        View your invoice details for your translation project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInvoiceRequest, base_url, '/projects/{id}/invoice', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Invoice])
                res.invoice = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_progress(self, request: operations.GetProgressRequest) -> operations.GetProgressResponse:
        r"""View progress of a project
        Monitor the translation progress of an already launched project in real-time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgressRequest, base_url, '/projects/{id}/progress', request)
        
        query_params = utils.get_query_params(operations.GetProgressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Progress])
                res.progress = out
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project(self, request: operations.GetProjectRequest) -> operations.GetProjectResponse:
        r"""View a translation project
        View the details of a translation project in your account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectRequest, base_url, '/projects/{id}', request)
        
        query_params = utils.get_query_params(operations.GetProjectRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project_vendors(self, request: operations.GetProjectVendorsRequest) -> operations.GetProjectVendorsResponse:
        r"""Get a list of vendors.
        Get a list of vendors.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectVendorsRequest, base_url, '/projects/{projectId}/vendors', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectVendorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_projects(self, request: operations.GetProjectsRequest) -> operations.GetProjectsResponse:
        r"""View your translation projects
        View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        query_params = utils.get_query_params(operations.GetProjectsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectList])
                res.project_list = out

        return res

    def get_quote_id_from_internal_id(self, request: operations.GetQuoteIDFromInternalIDRequest) -> operations.GetQuoteIDFromInternalIDResponse:
        r"""Get Quote Id
        Get Quote Id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetQuoteIDFromInternalIDRequest, base_url, '/projects/from-internal-id/{projectId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteIDFromInternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectID])
                res.project_id = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_vendor_projects(self, request: operations.GetVendorProjectsRequest) -> operations.GetVendorProjectsResponse:
        r"""List projects as a vendor
        Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects/vendor'
        
        query_params = utils.get_query_params(operations.GetVendorProjectsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVendorProjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectList])
                res.project_list = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_vendor_projects_by_user_id(self, request: operations.GetVendorProjectsByUserIDRequest) -> operations.GetVendorProjectsByUserIDResponse:
        r"""Get a list of user/vendor projects
        Get a list of user/vendor projects
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVendorProjectsByUserIDRequest, base_url, '/{userId}/projects/vendor', request)
        
        query_params = utils.get_query_params(operations.GetVendorProjectsByUserIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVendorProjectsByUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectList])
                res.project_list = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def launch_project(self, request: operations.LaunchProjectRequest) -> operations.LaunchProjectResponse:
        r"""Launch your translation project
        Launch your translation project so MotaWord can actually start working on your translation.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.LaunchProjectRequest, base_url, '/projects/{id}/launch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_payment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LaunchProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectLaunchResponse])
                res.project_launch_response = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def package(self, request: operations.PackageRequest) -> operations.PackageResponse:
        r"""Package your translated project
        Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageRequest, base_url, '/projects/{id}/package', request)
        
        query_params = utils.get_query_params(operations.PackageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.package_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def package_language(self, request: operations.PackageLanguageRequest) -> operations.PackageLanguageResponse:
        r"""Package your translated project language
        Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageLanguageRequest, base_url, '/projects/{id}/package/{language}', request)
        
        query_params = utils.get_query_params(operations.PackageLanguageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Package])
                res.package = out
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.package_language_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def recreate_project(self, request: operations.RecreateProjectRequest) -> operations.RecreateProjectResponse:
        r"""Recreate your translation project from scratch. This is a risky action, you will lose current translations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RecreateProjectRequest, base_url, '/projects/{id}/recreate', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RecreateProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def send_quote_email(self, request: operations.SendQuoteEmailRequest) -> operations.SendQuoteEmailResponse:
        r"""Send a quote email
        Send a quote email
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendQuoteEmailRequest, base_url, '/projects/{id}/email-quote', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendQuoteEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def submit_project_reports(self, request: operations.SubmitProjectReportsRequest) -> operations.SubmitProjectReportsResponse:
        r"""Submit feedback report for a project"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitProjectReportsRequest, base_url, '/projects/{id}/reports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report_content", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitProjectReportsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def track_package(self, request: operations.TrackPackageRequest) -> operations.TrackPackageResponse:
        r"""Track translation packaging status
        Track the packaging status of your translations, by using the `key` from packaging request. Once packaging is completed, you can download your translations via `/download` endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrackPackageRequest, base_url, '/projects/{id}/package/check', request)
        
        query_params = utils.get_query_params(operations.TrackPackageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackPackageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PackageStatus])
                res.package_status = out
        elif http_res.status_code in [402, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def trigger_callback(self, request: operations.TriggerCallbackRequest) -> operations.TriggerCallbackResponse:
        r"""Trigger a call to your callback URL related to this project.
        Trigger a call to your callback URL related to this project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TriggerCallbackRequest, base_url, '/projects/{id}/callback/{actionType}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TriggerCallbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CallbackResult])
                res.callback_result = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_project(self, request: operations.UpdateProjectRequest) -> operations.UpdateProjectResponse:
        r"""Update project info and settings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProjectRequest, base_url, '/projects/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out
        elif http_res.status_code in [404, 406]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    