"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum(str, Enum):
    r"""for space type 'company' enums allowed are  'EGM','CGM','OGM','ConstituentAssembly','SolePartner','OtherEvent','Office','ExecutiveCommittee','Consulting','Board','PartnersMeeting' and for space type 'association' enums allowed are 'EGM','CGM','OGM','Other','Office','ExecutiveCommittee'"""
    EGM = 'EGM'
    CGM = 'CGM'
    OGM = 'OGM'
    CONSTITUENT_ASSEMBLY = 'ConstituentAssembly'
    SOLE_PARTNER = 'SolePartner'
    OTHER_EVENT = 'OtherEvent'
    OTHER = 'Other'
    OFFICE = 'Office'
    EXECUTIVE_COMMITTEE = 'ExecutiveCommittee'
    CONSULTING = 'Consulting'
    BOARD = 'Board'
    PARTNERS_MEETING = 'PartnersMeeting'

class PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'
    PUBLIC = 'public'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBody:
    r"""Collective decision to modify (except name, class and archivaldate)"""
    
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('About'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    dividend_distributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DividendDistributions'), 'exclude': lambda f: f is None }})  
    dividend_distributions_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DividendDistributionsDate'), 'exclude': lambda f: f is None }})  
    event: Optional[PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Event'), 'exclude': lambda f: f is None }})
    r"""for space type 'company' enums allowed are  'EGM','CGM','OGM','ConstituentAssembly','SolePartner','OtherEvent','Office','ExecutiveCommittee','Consulting','Board','PartnersMeeting' and for space type 'association' enums allowed are 'EGM','CGM','OGM','Other','Office','ExecutiveCommittee'"""  
    home: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Home'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    level: Optional[PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    request_body: PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Collective decision to modify (except name, class and archivaldate)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDCollectiveDecisionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    