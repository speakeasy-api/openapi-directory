<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Services 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create or update multiple producer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverrides(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerQuotaMetrics:importProducerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v1Beta1ImportProducerOverridesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a summary of quota information for a specific quota limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsLimitsGet(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Beta1ConsumerQuotaLimit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Beta1ConsumerQuotaLimit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present ("upsert" semantics), use ImportProducerOverrides instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/producerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v1Beta1QuotaOverride", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a producer override.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all producer overrides on this limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/producerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Beta1ListProducerOverridesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Beta1ListProducerOverridesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a producer override.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v1Beta1QuotaOverride", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a summary of all quota information about this consumer that is visible to the service producer, for each quota metric defined by the service. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListResponse
     */
	public function serviceconsumermanagementServicesConsumerQuotaMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerQuotaMetrics', \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceconsumermanagementServicesConsumerQuotaMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Beta1ListConsumerQuotaMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Beta1ListConsumerQuotaMetricsResponse', 'json');
            }
        }

        return $response;
    }
}