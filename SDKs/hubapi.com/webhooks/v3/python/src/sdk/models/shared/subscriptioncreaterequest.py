"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SubscriptionCreateRequestEventTypeEnum(str, Enum):
    r"""Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`."""
    CONTACT_PROPERTY_CHANGE = 'contact.propertyChange'
    COMPANY_PROPERTY_CHANGE = 'company.propertyChange'
    DEAL_PROPERTY_CHANGE = 'deal.propertyChange'
    TICKET_PROPERTY_CHANGE = 'ticket.propertyChange'
    PRODUCT_PROPERTY_CHANGE = 'product.propertyChange'
    LINE_ITEM_PROPERTY_CHANGE = 'line_item.propertyChange'
    CONTACT_CREATION = 'contact.creation'
    CONTACT_DELETION = 'contact.deletion'
    CONTACT_PRIVACY_DELETION = 'contact.privacyDeletion'
    COMPANY_CREATION = 'company.creation'
    COMPANY_DELETION = 'company.deletion'
    DEAL_CREATION = 'deal.creation'
    DEAL_DELETION = 'deal.deletion'
    TICKET_CREATION = 'ticket.creation'
    TICKET_DELETION = 'ticket.deletion'
    PRODUCT_CREATION = 'product.creation'
    PRODUCT_DELETION = 'product.deletion'
    LINE_ITEM_CREATION = 'line_item.creation'
    LINE_ITEM_DELETION = 'line_item.deletion'
    CONVERSATION_CREATION = 'conversation.creation'
    CONVERSATION_DELETION = 'conversation.deletion'
    CONVERSATION_NEW_MESSAGE = 'conversation.newMessage'
    CONVERSATION_PRIVACY_DELETION = 'conversation.privacyDeletion'
    CONVERSATION_PROPERTY_CHANGE = 'conversation.propertyChange'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionCreateRequest:
    r"""New webhook settings for an app."""
    
    event_type: SubscriptionCreateRequestEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType') }})
    r"""Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Determines if the subscription is active or paused. Defaults to false."""  
    property_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyName'), 'exclude': lambda f: f is None }})
    r"""The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`."""  
    