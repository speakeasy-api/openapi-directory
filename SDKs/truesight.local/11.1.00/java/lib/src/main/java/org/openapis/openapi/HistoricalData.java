/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

/**
 * API operations to get historical data.
 */
public class HistoricalData {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public HistoricalData(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Gets historical data for a specific group, application or service.
     * Gets the historical data for a specific group, application or service, for a given period.&lt;br&gt;&lt;br&gt;If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:&lt;br&gt;- use the &lt;b&gt;hardware/groups&lt;/b&gt; service in the &lt;b&gt;Groups&lt;/b&gt; section to get all available group IDs.&lt;br&gt;- use the &lt;b&gt;hardware/applications&lt;/b&gt; service in the &lt;b&gt;Applications&lt;/b&gt; section to get all available application IDs.&lt;br&gt;- use the &lt;b&gt;hardware/services&lt;/b&gt; service in the &lt;b&gt;Services&lt;/b&gt; section to get all available service IDs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: At most, one parent ID is taken into account according to this order of precedence:&lt;ol&gt;&lt;li&gt;group ID&lt;/li&gt;&lt;li&gt;application ID&lt;/li&gt;&lt;li&gt;service ID&lt;/li&gt;&lt;/ol&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHistoryResponse getHistory(org.openapis.openapi.models.operations.GetHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hardware/history");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHistoryResponse res = new org.openapis.openapi.models.operations.GetHistoryResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}