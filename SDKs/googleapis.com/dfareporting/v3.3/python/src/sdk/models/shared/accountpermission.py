"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AccountPermissionAccountProfilesEnum(str, Enum):
    ACCOUNT_PROFILE_BASIC = 'ACCOUNT_PROFILE_BASIC'
    ACCOUNT_PROFILE_STANDARD = 'ACCOUNT_PROFILE_STANDARD'

class AccountPermissionLevelEnum(str, Enum):
    r"""Administrative level required to enable this account permission."""
    USER = 'USER'
    ADMINISTRATOR = 'ADMINISTRATOR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountPermission:
    r"""AccountPermissions contains information about a particular account permission. Some features of Campaign Manager require an account permission to be present in the account."""
    
    account_profiles: Optional[list[AccountPermissionAccountProfilesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountProfiles'), 'exclude': lambda f: f is None }})
    r"""Account profiles associated with this account permission. Possible values are: - \\"ACCOUNT_PROFILE_BASIC\\" - \\"ACCOUNT_PROFILE_STANDARD\\" """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this account permission."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#accountPermission\\"."""  
    level: Optional[AccountPermissionLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Administrative level required to enable this account permission."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this account permission."""  
    permission_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionGroupId'), 'exclude': lambda f: f is None }})
    r"""Permission group of this account permission."""  
    