/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateTaskReservationServerList = [
  "https://taskrouter.twilio.com",
] as const;

export class UpdateTaskReservationSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum UpdateTaskReservationUpdateTaskReservationRequestConferenceRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum UpdateTaskReservationUpdateTaskReservationRequestConferenceStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum UpdateTaskReservationUpdateTaskReservationRequestRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 */
export enum UpdateTaskReservationUpdateTaskReservationRequestStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
 */
export enum UpdateTaskReservationUpdateTaskReservationRequestWaitMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class UpdateTaskReservationUpdateTaskReservationRequest extends SpeakeasyBase {
  /**
   * Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Beep" })
  beep?: string;

  /**
   * Whether to play a notification beep when the customer joins.
   */
  @SpeakeasyMetadata({ data: "form, name=BeepOnCustomerEntrance" })
  beepOnCustomerEntrance?: boolean;

  /**
   * Whether to accept a reservation when executing a Call instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=CallAccept" })
  callAccept?: boolean;

  /**
   * The Caller ID of the outbound call when executing a Call instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=CallFrom" })
  callFrom?: string;

  /**
   * Whether to record both legs of a call when executing a Call instruction or which leg to record.
   */
  @SpeakeasyMetadata({ data: "form, name=CallRecord" })
  callRecord?: string;

  /**
   * The URL to call  for the completed call event when executing a Call instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=CallStatusCallbackUrl" })
  callStatusCallbackUrl?: string;

  /**
   * Timeout for call when executing a Call instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=CallTimeout" })
  callTimeout?: number;

  /**
   * The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
   */
  @SpeakeasyMetadata({ data: "form, name=CallTo" })
  callTo?: string;

  /**
   * TwiML URI executed on answering the worker's leg as a result of the Call instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=CallUrl" })
  callUrl?: string;

  /**
   * Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceRecord" })
  conferenceRecord?: string;

  /**
   * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceRecordingStatusCallback" })
  conferenceRecordingStatusCallback?: string;

  /**
   * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({
    data: "form, name=ConferenceRecordingStatusCallbackMethod",
  })
  conferenceRecordingStatusCallbackMethod?: UpdateTaskReservationUpdateTaskReservationRequestConferenceRecordingStatusCallbackMethodEnum;

  /**
   * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallback" })
  conferenceStatusCallback?: string;

  /**
   * The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallbackEvent" })
  conferenceStatusCallbackEvent?: shared.TaskReservationEnumConferenceEventEnum[];

  /**
   * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallbackMethod" })
  conferenceStatusCallbackMethod?: UpdateTaskReservationUpdateTaskReservationRequestConferenceStatusCallbackMethodEnum;

  /**
   * How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceTrim" })
  conferenceTrim?: string;

  /**
   * The Caller ID of the call to the worker when executing a Dequeue instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueFrom" })
  dequeueFrom?: string;

  /**
   * The SID of the Activity resource to start after executing a Dequeue instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeuePostWorkActivitySid" })
  dequeuePostWorkActivitySid?: string;

  /**
   * Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueRecord" })
  dequeueRecord?: string;

  /**
   * The Call progress events sent via webhooks as a result of a Dequeue instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueStatusCallbackEvent" })
  dequeueStatusCallbackEvent?: string[];

  /**
   * The Callback URL for completed call event when executing a Dequeue instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueStatusCallbackUrl" })
  dequeueStatusCallbackUrl?: string;

  /**
   * Timeout for call when executing a Dequeue instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueTimeout" })
  dequeueTimeout?: number;

  /**
   * The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
   */
  @SpeakeasyMetadata({ data: "form, name=DequeueTo" })
  dequeueTo?: string;

  /**
   * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=EarlyMedia" })
  earlyMedia?: boolean;

  /**
   * Whether to end the conference when the customer leaves.
   */
  @SpeakeasyMetadata({ data: "form, name=EndConferenceOnCustomerExit" })
  endConferenceOnCustomerExit?: boolean;

  /**
   * Whether to end the conference when the agent leaves.
   */
  @SpeakeasyMetadata({ data: "form, name=EndConferenceOnExit" })
  endConferenceOnExit?: boolean;

  /**
   * The Caller ID of the call to the worker when executing a Conference instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=From" })
  from?: string;

  /**
   * The assignment instruction for reservation.
   */
  @SpeakeasyMetadata({ data: "form, name=Instruction" })
  instruction?: string;

  /**
   * The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
   */
  @SpeakeasyMetadata({ data: "form, name=MaxParticipants" })
  maxParticipants?: number;

  /**
   * Whether the agent is muted in the conference. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Muted" })
  muted?: boolean;

  /**
   * The new worker activity SID after executing a Conference instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=PostWorkActivitySid" })
  postWorkActivitySid?: string;

  /**
   * Whether to record the participant and their conferences, including the time between conferences. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Record" })
  record?: boolean;

  /**
   * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingChannels" })
  recordingChannels?: string;

  /**
   * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallback" })
  recordingStatusCallback?: string;

  /**
   * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackMethod" })
  recordingStatusCallbackMethod?: UpdateTaskReservationUpdateTaskReservationRequestRecordingStatusCallbackMethodEnum;

  /**
   * Whether the reservation should be accepted when executing a Redirect instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=RedirectAccept" })
  redirectAccept?: boolean;

  /**
   * The Call SID of the call parked in the queue when executing a Redirect instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=RedirectCallSid" })
  redirectCallSid?: string;

  /**
   * TwiML URI to redirect the call to when executing the Redirect instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=RedirectUrl" })
  redirectUrl?: string;

  /**
   * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
   */
  @SpeakeasyMetadata({ data: "form, name=Region" })
  region?: string;

  @SpeakeasyMetadata({ data: "form, name=ReservationStatus" })
  reservationStatus?: shared.TaskReservationEnumStatusEnum;

  /**
   * The SIP password for authentication.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthPassword" })
  sipAuthPassword?: string;

  /**
   * The SIP username used for authentication.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthUsername" })
  sipAuthUsername?: string;

  /**
   * Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
   */
  @SpeakeasyMetadata({ data: "form, name=StartConferenceOnEnter" })
  startConferenceOnEnter?: boolean;

  /**
   * The URL we should call using the `status_callback_method` to send status information to your application.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallback" })
  statusCallback?: string;

  /**
   * The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackEvent" })
  statusCallbackEvent?: shared.TaskReservationEnumCallStatusEnum[];

  /**
   * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackMethod" })
  statusCallbackMethod?: UpdateTaskReservationUpdateTaskReservationRequestStatusCallbackMethodEnum;

  /**
   * The Supervisor SID/URI when executing the Supervise instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=Supervisor" })
  supervisor?: string;

  @SpeakeasyMetadata({ data: "form, name=SupervisorMode" })
  supervisorMode?: shared.TaskReservationEnumSupervisorModeEnum;

  /**
   * Timeout for call when executing a Conference instruction.
   */
  @SpeakeasyMetadata({ data: "form, name=Timeout" })
  timeout?: number;

  /**
   * The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
   */
  @SpeakeasyMetadata({ data: "form, name=To" })
  to?: string;

  /**
   * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
   */
  @SpeakeasyMetadata({ data: "form, name=WaitMethod" })
  waitMethod?: UpdateTaskReservationUpdateTaskReservationRequestWaitMethodEnum;

  /**
   * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
   */
  @SpeakeasyMetadata({ data: "form, name=WaitUrl" })
  waitUrl?: string;

  /**
   * The new worker activity SID if rejecting a reservation.
   */
  @SpeakeasyMetadata({ data: "form, name=WorkerActivitySid" })
  workerActivitySid?: string;
}

export class UpdateTaskReservationRequest extends SpeakeasyBase {
  /**
   * The If-Match HTTP request header
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Match",
  })
  ifMatch?: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateTaskReservationUpdateTaskReservationRequest;

  /**
   * The SID of the TaskReservation resource to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;

  /**
   * The SID of the reserved Task resource with the TaskReservation resources to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=TaskSid",
  })
  taskSid: string;

  /**
   * The SID of the Workspace with the TaskReservation resources to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class UpdateTaskReservationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  taskrouterV1WorkspaceTaskTaskReservation?: shared.TaskrouterV1WorkspaceTaskTaskReservation;
}
