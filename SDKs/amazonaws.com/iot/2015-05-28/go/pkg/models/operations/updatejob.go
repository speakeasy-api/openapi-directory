// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateJobRequestBodyAbortConfig - The criteria that determine when and how a job abort takes place.
type UpdateJobRequestBodyAbortConfig struct {
	CriteriaList []shared.AbortCriteria `json:"criteriaList,omitempty"`
}

// UpdateJobRequestBodyJobExecutionsRetryConfig - The configuration that determines how many retries are allowed for each failure type for a job.
type UpdateJobRequestBodyJobExecutionsRetryConfig struct {
	CriteriaList []shared.RetryCriteria `json:"criteriaList,omitempty"`
}

// UpdateJobRequestBodyJobExecutionsRolloutConfig - Allows you to create a staged rollout of a job.
type UpdateJobRequestBodyJobExecutionsRolloutConfig struct {
	ExponentialRate  *shared.ExponentialRolloutRate `json:"exponentialRate,omitempty"`
	MaximumPerMinute *int64                         `json:"maximumPerMinute,omitempty"`
}

// UpdateJobRequestBodyPresignedURLConfig - Configuration for pre-signed S3 URLs.
type UpdateJobRequestBodyPresignedURLConfig struct {
	ExpiresInSec *int64  `json:"expiresInSec,omitempty"`
	RoleArn      *string `json:"roleArn,omitempty"`
}

// UpdateJobRequestBodyTimeoutConfig - Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
type UpdateJobRequestBodyTimeoutConfig struct {
	InProgressTimeoutInMinutes *int64 `json:"inProgressTimeoutInMinutes,omitempty"`
}

type UpdateJobRequestBody struct {
	// The criteria that determine when and how a job abort takes place.
	AbortConfig *UpdateJobRequestBodyAbortConfig `json:"abortConfig,omitempty"`
	// A short text description of the job.
	Description *string `json:"description,omitempty"`
	// The configuration that determines how many retries are allowed for each failure type for a job.
	JobExecutionsRetryConfig *UpdateJobRequestBodyJobExecutionsRetryConfig `json:"jobExecutionsRetryConfig,omitempty"`
	// Allows you to create a staged rollout of a job.
	JobExecutionsRolloutConfig *UpdateJobRequestBodyJobExecutionsRolloutConfig `json:"jobExecutionsRolloutConfig,omitempty"`
	// Configuration for pre-signed S3 URLs.
	PresignedURLConfig *UpdateJobRequestBodyPresignedURLConfig `json:"presignedUrlConfig,omitempty"`
	// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
	TimeoutConfig *UpdateJobRequestBodyTimeoutConfig `json:"timeoutConfig,omitempty"`
}

type UpdateJobRequest struct {
	RequestBody       UpdateJobRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID of the job to be updated.
	JobID string `pathParam:"style=simple,explode=false,name=jobId"`
	// <p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>
	NamespaceID *string `queryParam:"style=form,explode=true,name=namespaceId"`
}

type UpdateJobResponse struct {
	ContentType string
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
