/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class User {
    /**
     * Whether the user active in the IdP.
     */
    @JsonProperty("active")
    public Boolean active;

    public User withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * A human-readable name for the user.
     */
    @JsonProperty("displayName")
    public String displayName;

    public User withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The emails for the user.
     */
    @JsonProperty("emails")
    public UserEmails[] emails;

    public User withEmails(UserEmails[] emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * A unique identifier for the resource as defined by the provisioning client.
     */
    @JsonProperty("externalId")
    public String externalId;

    public User withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public UserName name;

    public User withName(UserName name) {
        this.name = name;
        return this;
    }
    
    /**
     * The roles assigned to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    public UserRole[] roles;

    public User withRoles(UserRole[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * The URIs that are used to indicate the namespaces of the SCIM schemas.
     */
    @JsonProperty("schemas")
    public UserSchemasEnum[] schemas;

    public User withSchemas(UserSchemasEnum[] schemas) {
        this.schemas = schemas;
        return this;
    }
    
    /**
     * The username for the user.
     */
    @JsonProperty("userName")
    public String userName;

    public User withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    public User(@JsonProperty("active") Boolean active, @JsonProperty("displayName") String displayName, @JsonProperty("emails") UserEmails[] emails, @JsonProperty("externalId") String externalId, @JsonProperty("schemas") UserSchemasEnum[] schemas, @JsonProperty("userName") String userName) {
        this.active = active;
        this.displayName = displayName;
        this.emails = emails;
        this.externalId = externalId;
        this.schemas = schemas;
        this.userName = userName;
  }
}
