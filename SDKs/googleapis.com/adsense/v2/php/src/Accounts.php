<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an ad unit. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product. Note that ad units can only be created for ad clients with an "AFC" product code. For more info see the [AdClient resource](/adsense/management/reference/rest/v2/accounts.adclients). For now, this method can only be used to create `DISPLAY` ad units. See: https://support.google.com/adsense/answer/9183566
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateResponse
     */
	public function adsenseAccountsAdclientsAdunitsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adUnitInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeResponse
     */
	public function adsenseAccountsAdclientsAdunitsGetAdcode(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/adcode', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsGetAdcodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnitAdCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnitAdCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all ad units under a specified account and ad client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListResponse
     */
	public function adsenseAccountsAdclientsAdunitsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdUnitsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdUnitsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the custom channels available for an ad unit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsResponse
     */
	public function adsenseAccountsAdclientsAdunitsListLinkedCustomChannels(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}:listLinkedCustomChannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsAdunitsListLinkedCustomChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLinkedCustomChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLinkedCustomChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateResponse
     */
	public function adsenseAccountsAdclientsCustomchannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customChannelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteResponse
     */
	public function adsenseAccountsAdclientsCustomchannelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the custom channels available in an ad client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListResponse
     */
	public function adsenseAccountsAdclientsCustomchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the ad units available for a custom channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsResponse
     */
	public function adsenseAccountsAdclientsCustomchannelsListLinkedAdUnits(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}:listLinkedAdUnits', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsListLinkedAdUnitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLinkedAdUnitsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLinkedAdUnitsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchResponse
     */
	public function adsenseAccountsAdclientsCustomchannelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customChannelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsCustomchannelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the ad clients available in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse
     */
	public function adsenseAccountsAdclientsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/adclients', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdClientsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdClientsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists active url channels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListResponse
     */
	public function adsenseAccountsAdclientsUrlchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/urlchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsUrlchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUrlChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUrlChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the alerts available in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse
     */
	public function adsenseAccountsAlertsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/alerts', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAlertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAlertsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the ad blocking recovery tag of an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagResponse
     */
	public function adsenseAccountsGetAdBlockingRecoveryTag(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/adBlockingRecoveryTag', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetAdBlockingRecoveryTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adBlockingRecoveryTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdBlockingRecoveryTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all accounts available to this user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse
     */
	public function adsenseAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all accounts directly managed by the given AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsResponse
     */
	public function adsenseAccountsListChildAccounts(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}:listChildAccounts', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListChildAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChildAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChildAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the payments available for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse
     */
	public function adsenseAccountsPaymentsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/payments', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPaymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPaymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates an ad hoc report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse
     */
	public function adsenseAccountsReportsGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{account}/reports:generate', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a csv formatted ad hoc report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvResponse
     */
	public function adsenseAccountsReportsGenerateCsv(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{account}/reports:generateCsv', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateCsvResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the saved report from the given resource name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedResponse
     */
	public function adsenseAccountsReportsGetSaved(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/saved', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGetSavedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a saved report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse
     */
	public function adsenseAccountsReportsSavedGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/saved:generate', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a csv formatted saved report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvResponse
     */
	public function adsenseAccountsReportsSavedGenerateCsv(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/saved:generateCsv', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateCsvResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists saved reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse
     */
	public function adsenseAccountsReportsSavedList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/reports/saved', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSavedReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSavedReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about the selected site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetResponse
     */
	public function adsenseAccountsSitesGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the sites available in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListResponse
     */
	public function adsenseAccountsSitesList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/sites', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSitesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSitesResponse', 'json');
            }
        }

        return $response;
    }
}