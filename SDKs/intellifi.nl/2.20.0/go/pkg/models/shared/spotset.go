// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type SpotSetType string

const (
	SpotSetTypeSpotSetTypeAny        SpotSetType = "SpotSetTypeAny"
	SpotSetTypeSpotSetTypeAreacode   SpotSetType = "SpotSetTypeAreacode"
	SpotSetTypeSpotSetTypeCodelength SpotSetType = "SpotSetTypeCodelength"
	SpotSetTypeSpotSetTypeCodemask   SpotSetType = "SpotSetTypeCodemask"
	SpotSetTypeSpotSetTypeCoderange  SpotSetType = "SpotSetTypeCoderange"
	SpotSetTypeSpotSetTypeExtended   SpotSetType = "SpotSetTypeExtended"
	SpotSetTypeSpotSetTypeList       SpotSetType = "SpotSetTypeList"
	SpotSetTypeSpotSetTypeProtocol   SpotSetType = "SpotSetTypeProtocol"
	SpotSetTypeSpotSetTypeTechnology SpotSetType = "SpotSetTypeTechnology"
	SpotSetTypeSpotSetTypeType       SpotSetType = "SpotSetTypeType"
)

type SpotSet struct {
	SpotSetTypeAny        *SpotSetTypeAny
	SpotSetTypeAreacode   *SpotSetTypeAreacode
	SpotSetTypeCodelength *SpotSetTypeCodelength
	SpotSetTypeCodemask   *SpotSetTypeCodemask
	SpotSetTypeCoderange  *SpotSetTypeCoderange
	SpotSetTypeExtended   *SpotSetTypeExtended
	SpotSetTypeList       *SpotSetTypeList
	SpotSetTypeProtocol   *SpotSetTypeProtocol
	SpotSetTypeTechnology *SpotSetTypeTechnology
	SpotSetTypeType       *SpotSetTypeType

	Type SpotSetType
}

func CreateSpotSetSpotSetTypeAny(spotSetTypeAny SpotSetTypeAny) SpotSet {
	typ := SpotSetTypeSpotSetTypeAny

	return SpotSet{
		SpotSetTypeAny: &spotSetTypeAny,
		Type:           typ,
	}
}

func CreateSpotSetSpotSetTypeAreacode(spotSetTypeAreacode SpotSetTypeAreacode) SpotSet {
	typ := SpotSetTypeSpotSetTypeAreacode

	return SpotSet{
		SpotSetTypeAreacode: &spotSetTypeAreacode,
		Type:                typ,
	}
}

func CreateSpotSetSpotSetTypeCodelength(spotSetTypeCodelength SpotSetTypeCodelength) SpotSet {
	typ := SpotSetTypeSpotSetTypeCodelength

	return SpotSet{
		SpotSetTypeCodelength: &spotSetTypeCodelength,
		Type:                  typ,
	}
}

func CreateSpotSetSpotSetTypeCodemask(spotSetTypeCodemask SpotSetTypeCodemask) SpotSet {
	typ := SpotSetTypeSpotSetTypeCodemask

	return SpotSet{
		SpotSetTypeCodemask: &spotSetTypeCodemask,
		Type:                typ,
	}
}

func CreateSpotSetSpotSetTypeCoderange(spotSetTypeCoderange SpotSetTypeCoderange) SpotSet {
	typ := SpotSetTypeSpotSetTypeCoderange

	return SpotSet{
		SpotSetTypeCoderange: &spotSetTypeCoderange,
		Type:                 typ,
	}
}

func CreateSpotSetSpotSetTypeExtended(spotSetTypeExtended SpotSetTypeExtended) SpotSet {
	typ := SpotSetTypeSpotSetTypeExtended

	return SpotSet{
		SpotSetTypeExtended: &spotSetTypeExtended,
		Type:                typ,
	}
}

func CreateSpotSetSpotSetTypeList(spotSetTypeList SpotSetTypeList) SpotSet {
	typ := SpotSetTypeSpotSetTypeList

	return SpotSet{
		SpotSetTypeList: &spotSetTypeList,
		Type:            typ,
	}
}

func CreateSpotSetSpotSetTypeProtocol(spotSetTypeProtocol SpotSetTypeProtocol) SpotSet {
	typ := SpotSetTypeSpotSetTypeProtocol

	return SpotSet{
		SpotSetTypeProtocol: &spotSetTypeProtocol,
		Type:                typ,
	}
}

func CreateSpotSetSpotSetTypeTechnology(spotSetTypeTechnology SpotSetTypeTechnology) SpotSet {
	typ := SpotSetTypeSpotSetTypeTechnology

	return SpotSet{
		SpotSetTypeTechnology: &spotSetTypeTechnology,
		Type:                  typ,
	}
}

func CreateSpotSetSpotSetTypeType(spotSetTypeType SpotSetTypeType) SpotSet {
	typ := SpotSetTypeSpotSetTypeType

	return SpotSet{
		SpotSetTypeType: &spotSetTypeType,
		Type:            typ,
	}
}

func (u *SpotSet) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	spotSetTypeAny := new(SpotSetTypeAny)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeAny); err == nil {
		u.SpotSetTypeAny = spotSetTypeAny
		u.Type = SpotSetTypeSpotSetTypeAny
		return nil
	}

	spotSetTypeAreacode := new(SpotSetTypeAreacode)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeAreacode); err == nil {
		u.SpotSetTypeAreacode = spotSetTypeAreacode
		u.Type = SpotSetTypeSpotSetTypeAreacode
		return nil
	}

	spotSetTypeCodelength := new(SpotSetTypeCodelength)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeCodelength); err == nil {
		u.SpotSetTypeCodelength = spotSetTypeCodelength
		u.Type = SpotSetTypeSpotSetTypeCodelength
		return nil
	}

	spotSetTypeCodemask := new(SpotSetTypeCodemask)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeCodemask); err == nil {
		u.SpotSetTypeCodemask = spotSetTypeCodemask
		u.Type = SpotSetTypeSpotSetTypeCodemask
		return nil
	}

	spotSetTypeCoderange := new(SpotSetTypeCoderange)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeCoderange); err == nil {
		u.SpotSetTypeCoderange = spotSetTypeCoderange
		u.Type = SpotSetTypeSpotSetTypeCoderange
		return nil
	}

	spotSetTypeExtended := new(SpotSetTypeExtended)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeExtended); err == nil {
		u.SpotSetTypeExtended = spotSetTypeExtended
		u.Type = SpotSetTypeSpotSetTypeExtended
		return nil
	}

	spotSetTypeList := new(SpotSetTypeList)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeList); err == nil {
		u.SpotSetTypeList = spotSetTypeList
		u.Type = SpotSetTypeSpotSetTypeList
		return nil
	}

	spotSetTypeProtocol := new(SpotSetTypeProtocol)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeProtocol); err == nil {
		u.SpotSetTypeProtocol = spotSetTypeProtocol
		u.Type = SpotSetTypeSpotSetTypeProtocol
		return nil
	}

	spotSetTypeTechnology := new(SpotSetTypeTechnology)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeTechnology); err == nil {
		u.SpotSetTypeTechnology = spotSetTypeTechnology
		u.Type = SpotSetTypeSpotSetTypeTechnology
		return nil
	}

	spotSetTypeType := new(SpotSetTypeType)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&spotSetTypeType); err == nil {
		u.SpotSetTypeType = spotSetTypeType
		u.Type = SpotSetTypeSpotSetTypeType
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SpotSet) MarshalJSON() ([]byte, error) {
	if u.SpotSetTypeAny != nil {
		return json.Marshal(u.SpotSetTypeAny)
	}

	if u.SpotSetTypeAreacode != nil {
		return json.Marshal(u.SpotSetTypeAreacode)
	}

	if u.SpotSetTypeCodelength != nil {
		return json.Marshal(u.SpotSetTypeCodelength)
	}

	if u.SpotSetTypeCodemask != nil {
		return json.Marshal(u.SpotSetTypeCodemask)
	}

	if u.SpotSetTypeCoderange != nil {
		return json.Marshal(u.SpotSetTypeCoderange)
	}

	if u.SpotSetTypeExtended != nil {
		return json.Marshal(u.SpotSetTypeExtended)
	}

	if u.SpotSetTypeList != nil {
		return json.Marshal(u.SpotSetTypeList)
	}

	if u.SpotSetTypeProtocol != nil {
		return json.Marshal(u.SpotSetTypeProtocol)
	}

	if u.SpotSetTypeTechnology != nil {
		return json.Marshal(u.SpotSetTypeTechnology)
	}

	if u.SpotSetTypeType != nil {
		return json.Marshal(u.SpotSetTypeType)
	}

	return nil, nil
}
