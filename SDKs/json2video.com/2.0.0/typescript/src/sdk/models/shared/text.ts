/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Allows to define a color (or a range of colors) that will be converted to transparent
 */
export class TextChromaKey extends SpeakeasyBase {
  /**
   * Set the color for which alpha will be set to 0 (full transparency)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color: string;

  /**
   * Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tolerance" })
  tolerance?: number;
}

/**
 * Crops the element
 */
export class TextCrop extends SpeakeasyBase {
  /**
   * Sets the height of the croping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height: number;

  /**
   * Sets the width of the croping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width: number;

  /**
   * Sets the left point of croping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "x" })
  x?: number;

  /**
   * Sets the top point of croping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "y" })
  y?: number;
}

/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 */
export enum TextPanEnum {
  Left = "left",
  Top = "top",
  Right = "right",
  Bottom = "bottom",
  TopLeft = "top-left",
  TopRight = "top-right",
  BottomLeft = "bottom-left",
  BottomRight = "bottom-right",
}

/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 */
export enum TextPositionEnum {
  TopLeft = "top-left",
  TopRight = "top-right",
  BottomRight = "bottom-right",
  BottomLeft = "bottom-left",
  CenterCenter = "center-center",
  Custom = "custom",
}

export class TextRotate extends SpeakeasyBase {
  /**
   * Sets the angle of rotation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "angle" })
  angle: number;

  /**
   * Sets the time it takes to rotate the provided angle. A zero value means no movement
   */
  @SpeakeasyMetadata()
  @Expose({ name: "speed" })
  speed?: number;
}

export class TextScale extends SpeakeasyBase {
  /**
   * Sets the height for scaling the element
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * Sets the width for scaling the element
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

export enum TextTypeEnum {
  Text = "text",
}

/**
 * Creates a text element of a given style
 */
export class Text extends SpeakeasyBase {
  /**
   * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cache" })
  cache?: boolean;

  /**
   * Allows to define a color (or a range of colors) that will be converted to transparent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chroma-key" })
  @Type(() => TextChromaKey)
  chromaKey?: TextChromaKey;

  /**
   * Used for adding your comments
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * Crops the element
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crop" })
  @Type(() => TextCrop)
  crop?: TextCrop;

  /**
   * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * Element's time span added after the playback.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extra-time" })
  extraTime?: number;

  /**
   * Adds a fade in effect to the element. Value in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fade-in" })
  fadeIn?: number;

  /**
   * Adds a fade out effect to the element. Value in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fade-out" })
  fadeOut?: number;

  /**
   * Desired text element height, but can be overriden by the style defaults. A value of <code>-1</code> means inherits scenes or movie height
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pan" })
  pan?: TextPanEnum;

  /**
   * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position?: TextPositionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "rotate" })
  @Type(() => TextRotate)
  rotate?: TextRotate;

  @SpeakeasyMetadata()
  @Expose({ name: "scale" })
  @Type(() => TextScale)
  scale?: TextScale;

  /**
   * Text formatting settings. In general, these are CSS properties such as <code>font-size</code>, <code>colour</code> or <code>font-weight</code>. See the styles to confirm which properties are available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  settings?: Record<string, any>;

  /**
   * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  start?: number;

  /**
   * Style of the text element. Check all available text style at <a href='https://json2video.com/docs/resources/text/'>https://json2video.com/resources/text/</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "style" })
  style?: string;

  /**
   * Text to be printed. The text string does not accept HTML formatting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: TextTypeEnum;

  /**
   * Desired text element width, but can be overriden by the style defaults. A value of <code>-1</code> means inherits scenes or movie width
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;

  /**
   * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
   */
  @SpeakeasyMetadata()
  @Expose({ name: "x" })
  x?: number;

  /**
   * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
   */
  @SpeakeasyMetadata()
  @Expose({ name: "y" })
  y?: number;

  /**
   * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
   */
  @SpeakeasyMetadata()
  @Expose({ name: "z-index" })
  zIndex?: number;

  /**
   * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zoom" })
  zoom?: number;
}
