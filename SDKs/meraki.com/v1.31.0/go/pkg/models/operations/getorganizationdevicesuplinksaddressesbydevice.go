// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum - An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
type GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum string

const (
	GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnumWithAllTags GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum = "withAllTags"
	GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnumWithAnyTags GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum = "withAnyTags"
)

func (e *GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum: %s", s)
	}
}

type GetOrganizationDevicesUplinksAddressesByDeviceRequest struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
	NetworkIds     []string `queryParam:"style=form,explode=false,name=networkIds"`
	OrganizationID string   `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
	ProductTypes []string `queryParam:"style=form,explode=false,name=productTypes"`
	// Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
	TagsFilterType *GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONNetwork - Network info.
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONNetwork struct {
	// ID for the network containing the device.
	ID *string `json:"id,omitempty"`
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum - Device product type.
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum string

const (
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumAppliance       GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "appliance"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumCamera          GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "camera"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumCellularGateway GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "cellularGateway"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumSensor          GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "sensor"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumSwitch          GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "switch"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumSystemsManager  GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "systemsManager"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnumWireless        GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum = "wireless"
)

func (e *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum: %s", s)
	}
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum - Indicates how the device uplink address is assigned. Available options are: static, dynamic.
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum string

const (
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnumDynamic GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum = "dynamic"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnumStatic  GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum = "static"
)

func (e *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum: %s", s)
	}
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum - Type of address for the device uplink. Available options are: ipv4, ipv6.
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum string

const (
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnumIpv4 GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum = "ipv4"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnumIpv6 GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum = "ipv6"
)

func (e *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum: %s", s)
	}
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesPublic - Public interface information.
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesPublic struct {
	// The device uplink public IP address.
	Address *string `json:"address,omitempty"`
}

type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddresses struct {
	// Device uplink address.
	Address *string `json:"address,omitempty"`
	// Indicates how the device uplink address is assigned. Available options are: static, dynamic.
	AssignmentMode *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Device uplink gateway address.
	Gateway *string `json:"gateway,omitempty"`
	// Type of address for the device uplink. Available options are: ipv4, ipv6.
	Protocol *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum `json:"protocol,omitempty"`
	// Public interface information.
	Public *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesPublic `json:"public,omitempty"`
}

// GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum - Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum string

const (
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnumCellular GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum = "cellular"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnumMan1     GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum = "man1"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnumMan2     GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum = "man2"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnumWan1     GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum = "wan1"
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnumWan2     GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum = "wan2"
)

func (e *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cellular":
		fallthrough
	case "man1":
		fallthrough
	case "man2":
		fallthrough
	case "wan1":
		fallthrough
	case "wan2":
		*e = GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum: %s", s)
	}
}

type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinks struct {
	// Available addresses for the interface.
	Addresses []GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddresses `json:"addresses,omitempty"`
	// Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
	Interface *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum `json:"interface,omitempty"`
}

type GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON struct {
	// The device MAC address.
	Mac *string `json:"mac,omitempty"`
	// The device name.
	Name *string `json:"name,omitempty"`
	// Network info.
	Network *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONNetwork `json:"network,omitempty"`
	// Device product type.
	ProductType *GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum `json:"productType,omitempty"`
	// The device serial number.
	Serial *string `json:"serial,omitempty"`
	// List of custom tags for the device.
	Tags []string `json:"tags,omitempty"`
	// List of device uplink addresses information.
	Uplinks []GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinks `json:"uplinks,omitempty"`
}

type GetOrganizationDevicesUplinksAddressesByDeviceResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONObjects []GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON
}
