// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetVideoLicenseListSecurity struct {
	CustomerAccessCode string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetVideoLicenseListDownloadAvailabilityEnum - Filter licenses by download availability
type GetVideoLicenseListDownloadAvailabilityEnum string

const (
	GetVideoLicenseListDownloadAvailabilityEnumAll             GetVideoLicenseListDownloadAvailabilityEnum = "all"
	GetVideoLicenseListDownloadAvailabilityEnumDownloadable    GetVideoLicenseListDownloadAvailabilityEnum = "downloadable"
	GetVideoLicenseListDownloadAvailabilityEnumNonDownloadable GetVideoLicenseListDownloadAvailabilityEnum = "non_downloadable"
)

func (e *GetVideoLicenseListDownloadAvailabilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "downloadable":
		fallthrough
	case "non_downloadable":
		*e = GetVideoLicenseListDownloadAvailabilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVideoLicenseListDownloadAvailabilityEnum: %s", s)
	}
}

// GetVideoLicenseListSortEnum - Sort by oldest or newest videos first
type GetVideoLicenseListSortEnum string

const (
	GetVideoLicenseListSortEnumNewest GetVideoLicenseListSortEnum = "newest"
	GetVideoLicenseListSortEnumOldest GetVideoLicenseListSortEnum = "oldest"
)

func (e *GetVideoLicenseListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "oldest":
		*e = GetVideoLicenseListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVideoLicenseListSortEnum: %s", s)
	}
}

type GetVideoLicenseListRequest struct {
	// Filter licenses by download availability
	DownloadAvailability *GetVideoLicenseListDownloadAvailabilityEnum `queryParam:"style=form,explode=true,name=download_availability"`
	// Show licenses created before the specified date
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
	// Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
	License *string `queryParam:"style=form,explode=true,name=license"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Sort by oldest or newest videos first
	Sort *GetVideoLicenseListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show licenses created on or after the specified date
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// Set to true to see license history for all members of your team.
	TeamHistory *bool `queryParam:"style=form,explode=true,name=team_history"`
	// Filter licenses by username of licensee
	Username *string `queryParam:"style=form,explode=true,name=username"`
	// Show licenses for the specified video ID
	VideoID *string `queryParam:"style=form,explode=true,name=video_id"`
}

type GetVideoLicenseListResponse struct {
	ContentType string
	// OK
	DownloadHistoryDataList *shared.DownloadHistoryDataList
	StatusCode              int
	RawResponse             *http.Response
}
