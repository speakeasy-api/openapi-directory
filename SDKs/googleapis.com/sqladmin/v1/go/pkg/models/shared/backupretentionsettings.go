// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BackupRetentionSettingsRetentionUnitEnum - The unit that 'retained_backups' represents.
type BackupRetentionSettingsRetentionUnitEnum string

const (
	BackupRetentionSettingsRetentionUnitEnumRetentionUnitUnspecified BackupRetentionSettingsRetentionUnitEnum = "RETENTION_UNIT_UNSPECIFIED"
	BackupRetentionSettingsRetentionUnitEnumCount                    BackupRetentionSettingsRetentionUnitEnum = "COUNT"
)

func (e *BackupRetentionSettingsRetentionUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RETENTION_UNIT_UNSPECIFIED":
		fallthrough
	case "COUNT":
		*e = BackupRetentionSettingsRetentionUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackupRetentionSettingsRetentionUnitEnum: %s", s)
	}
}

// BackupRetentionSettings - We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettings struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups *int `json:"retainedBackups,omitempty"`
	// The unit that 'retained_backups' represents.
	RetentionUnit *BackupRetentionSettingsRetentionUnitEnum `json:"retentionUnit,omitempty"`
}
