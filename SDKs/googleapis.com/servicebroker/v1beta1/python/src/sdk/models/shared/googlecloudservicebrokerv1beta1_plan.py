"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from typing import Any, Optional


@dataclasses.dataclass
class GoogleCloudServicebrokerV1beta1Plan:
    r"""Plan message describes a Service Plan."""
    
    bindable: Optional[bool] = dataclasses.field(default=None)
    r"""Specifies whether instances of the service can be bound to applications.
    If not specified, `Service.bindable` will be presumed.
    """  
    description: Optional[str] = dataclasses.field(default=None)
    r"""Textual description of the plan. Optional."""  
    free: Optional[bool] = dataclasses.field(default=None)
    r"""Whether the service is free."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""ID is a globally unique identifier used to uniquely identify the plan.
    User must make no presumption about the format of this field.
    """  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""A list of metadata for a service offering.
    Metadata is an arbitrary JSON object.
    """  
    name: Optional[str] = dataclasses.field(default=None)
    r"""User friendly name of the plan.
    The name must be globally unique within GCP project.
    Note, which is different from (\"This must be globally unique within a
    platform marketplace\").
    """  
    schemas: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Schema definitions for service instances and bindings for the plan."""  
    