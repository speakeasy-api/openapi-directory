/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Player - A Player resource.
 */
public class Player {
    /**
     * The base URL for the image that represents the player.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatarImageUrl")
    public String avatarImageUrl;
    public Player withAvatarImageUrl(String avatarImageUrl) {
        this.avatarImageUrl = avatarImageUrl;
        return this;
    }
    
    /**
     * The url to the landscape mode player banner image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerUrlLandscape")
    public String bannerUrlLandscape;
    public Player withBannerUrlLandscape(String bannerUrlLandscape) {
        this.bannerUrlLandscape = bannerUrlLandscape;
        return this;
    }
    
    /**
     * The url to the portrait mode player banner image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bannerUrlPortrait")
    public String bannerUrlPortrait;
    public Player withBannerUrlPortrait(String bannerUrlPortrait) {
        this.bannerUrlPortrait = bannerUrlPortrait;
        return this;
    }
    
    /**
     * The name to display for the player.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Player withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * 1P/3P metadata about the player's experience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experienceInfo")
    public PlayerExperienceInfo experienceInfo;
    public Player withExperienceInfo(PlayerExperienceInfo experienceInfo) {
        this.experienceInfo = experienceInfo;
        return this;
    }
    
    /**
     * The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendStatus")
    public PlayerFriendStatusEnum friendStatus;
    public Player withFriendStatus(PlayerFriendStatusEnum friendStatus) {
        this.friendStatus = friendStatus;
        return this;
    }
    
    /**
     * Per-application unique player identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gamePlayerId")
    public String gamePlayerId;
    public Player withGamePlayerId(String gamePlayerId) {
        this.gamePlayerId = gamePlayerId;
        return this;
    }
    
    /**
     * Uniquely identifies the type of this resource. Value is always the fixed string `games#player`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Player withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A representation of the individual components of the name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public PlayerName name;
    public Player withName(PlayerName name) {
        this.name = name;
        return this;
    }
    
    /**
     * The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalPlayerId")
    public String originalPlayerId;
    public Player withOriginalPlayerId(String originalPlayerId) {
        this.originalPlayerId = originalPlayerId;
        return this;
    }
    
    /**
     * The ID of the player.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playerId")
    public String playerId;
    public Player withPlayerId(String playerId) {
        this.playerId = playerId;
        return this;
    }
    
    /**
     * Profile settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileSettings")
    public ProfileSettings profileSettings;
    public Player withProfileSettings(ProfileSettings profileSettings) {
        this.profileSettings = profileSettings;
        return this;
    }
    
    /**
     * The player's title rewarded for their game activities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Player withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
