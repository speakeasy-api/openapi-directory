/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists information about the supported locations for this service.
   */
  artifactregistryProjectsLocationsList(
    req: operations.ArtifactregistryProjectsLocationsListRequest,
    security: operations.ArtifactregistryProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArtifactregistryProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ArtifactregistryProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsListResponse =
        new operations.ArtifactregistryProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
   */
  artifactregistryProjectsLocationsRepositoriesAptArtifactsImport(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/aptArtifacts:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "importAptArtifactsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
   */
  artifactregistryProjectsLocationsRepositoriesAptArtifactsUpload(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/aptArtifacts:create",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uploadAptArtifactMediaResponse = utils.objectToClass(
              httpRes?.data,
              shared.UploadAptArtifactMediaResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
   */
  artifactregistryProjectsLocationsRepositoriesCreate(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesCreateRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/repositories",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "repositoryInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesCreateResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists files.
   */
  artifactregistryProjectsLocationsRepositoriesFilesList(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesFilesListRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesFilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesFilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesFilesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/files",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesFilesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesFilesListResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesFilesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFilesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the IAM policy for a given resource.
   */
  artifactregistryProjectsLocationsRepositoriesGetIamPolicy(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists repositories.
   */
  artifactregistryProjectsLocationsRepositoriesList(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesListRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/repositories",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesListResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRepositoriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRepositoriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists packages.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesList(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/packages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPackagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPackagesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a tag.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesTagsCreate(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "tag",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists tags.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesTagsList(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/tags",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTagsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTagsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a tag.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesTagsPatch(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "tag",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a version and all of its content. The returned operation will complete once the version has been deleted.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesVersionsDelete(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a version
   */
  artifactregistryProjectsLocationsRepositoriesPackagesVersionsGet(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists versions.
   */
  artifactregistryProjectsLocationsRepositoriesPackagesVersionsList(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/versions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the IAM policy for a given resource.
   */
  artifactregistryProjectsLocationsRepositoriesSetIamPolicy(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Tests if the caller has a list of permissions on a resource.
   */
  artifactregistryProjectsLocationsRepositoriesTestIamPermissions(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
   */
  artifactregistryProjectsLocationsRepositoriesYumArtifactsImport(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/yumArtifacts:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "importYumArtifactsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
   */
  artifactregistryProjectsLocationsRepositoriesYumArtifactsUpload(
    req: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest,
    security: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta2/{parent}/yumArtifacts:create",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse =
        new operations.ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uploadYumArtifactMediaResponse = utils.objectToClass(
              httpRes?.data,
              shared.UploadYumArtifactMediaResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
