/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class RecordingDeleteOneSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently.
 */
export enum RecordingDeleteOneActionEnum {
  Trash = "trash",
  Delete = "delete",
}

export class RecordingDeleteOneRequest extends SpeakeasyBase {
  /**
   * The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=action",
  })
  action?: RecordingDeleteOneActionEnum;

  /**
   * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * @remarks
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: string;

  /**
   * The recording ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=recordingId",
  })
  recordingId: string;
}

export class RecordingDeleteOneResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
