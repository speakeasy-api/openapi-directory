<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Event 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
     */
	public function getDistrictEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of event keys for events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
     */
	public function getDistrictEventsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictEventsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
     */
	public function getDistrictEventsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets an Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventResponse
     */
	public function getEvent(
        \OpenAPI\OpenAPI\Models\Operations\GetEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}', \OpenAPI\OpenAPI\Models\Operations\GetEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Elimination Alliances for the given Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesResponse
     */
	public function getEventAlliances(
        \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/alliances', \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventAlliancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eliminationAlliances = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EliminationAlliance>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of awards from the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsResponse
     */
	public function getEventAwards(
        \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/awards', \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventAwardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->awards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Award>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of team rankings for the Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse
     */
	public function getEventDistrictPoints(
        \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/district_points', \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventDistrictPoints = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventDistrictPoints', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a set of Event-specific insights for the given Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsResponse
     */
	public function getEventInsights(
        \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/insights', \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventInsightsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventInsights = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventInsights', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
     * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
     * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse
     */
	public function getEventMatchTimeseries(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/timeseries', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventMatchTimeseries200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse
     */
	public function getEventMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse
     */
	public function getEventMatchesKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventMatchesKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse
     */
	public function getEventMatchesSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matchSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsResponse
     */
	public function getEventOPRs(
        \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/oprs', \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventOPRsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventOPRs = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventOPRs', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsResponse
     */
	public function getEventPredictions(
        \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/predictions', \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventPredictionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventPredictions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of team rankings for the Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsResponse
     */
	public function getEventRankings(
        \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/rankings', \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventRankingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventRanking = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventRanking', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleResponse
     */
	public function getEventSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
     */
	public function getEventTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` keys that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
     */
	public function getEventTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
     */
	public function getEventTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
     */
	public function getEventTeamsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/statuses', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of events in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse
     */
	public function getEventsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of event keys in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse
     */
	public function getEventsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse
     */
	public function getEventsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of awards the given team won at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse
     */
	public function getTeamEventAwards(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/awards', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->awards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Award>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
     */
	public function getTeamEventMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
     */
	public function getTeamEventMatchesKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventMatchesKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
     */
	public function getTeamEventMatchesSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets the competition rank and status of the team at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse
     */
	public function getTeamEventStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/status', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamEventStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamEventStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse
     */
	public function getTeamEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse
     */
	public function getTeamEventsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse
     */
	public function getTeamEventsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse
     */
	public function getTeamEventsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of the event keys for all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse
     */
	public function getTeamEventsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse
     */
	public function getTeamEventsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
     */
	public function getTeamEventsStatusesByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/statuses', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsStatusesByYear200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}