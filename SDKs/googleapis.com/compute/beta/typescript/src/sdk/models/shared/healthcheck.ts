/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GRPCHealthCheck } from "./grpchealthcheck";
import { HealthCheckLogConfig } from "./healthchecklogconfig";
import { Http2HealthCheck } from "./http2healthcheck";
import { HTTPHealthCheck } from "./httphealthcheck";
import { HTTPSHealthCheck } from "./httpshealthcheck";
import { SSLHealthCheck } from "./sslhealthcheck";
import { TCPHealthCheck } from "./tcphealthcheck";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
 */
export enum HealthCheckTypeEnum {
  Grpc = "GRPC",
  Http = "HTTP",
  Http2 = "HTTP2",
  Https = "HTTPS",
  Invalid = "INVALID",
  Ssl = "SSL",
  Tcp = "TCP",
}

/**
 * Represents a Health Check resource. Google Compute Engine has two Health Check resources: * [Global](/compute/docs/reference/rest/beta/healthChecks) * [Regional](/compute/docs/reference/rest/beta/regionHealthChecks) Internal HTTP(S) load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Traffic Director must use global health checks (`compute.v1.HealthChecks`). Internal TCP/UDP load balancers can use either regional or global health checks (`compute.v1.regionHealthChecks` or `compute.v1.HealthChecks`). External HTTP(S), TCP proxy, and SSL proxy load balancers as well as managed instance group auto-healing must use global health checks (`compute.v1.HealthChecks`). Backend service-based network load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Target pool-based network load balancers must use legacy HTTP health checks (`compute.v1.httpHealthChecks`). For more information, see Health checks overview.
 */
export class HealthCheck extends SpeakeasyBase {
  /**
   * How often (in seconds) to send a health check. The default value is 5 seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkIntervalSec" })
  checkIntervalSec?: number;

  /**
   * [Output Only] Creation timestamp in 3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "grpcHealthCheck" })
  @Type(() => GRPCHealthCheck)
  grpcHealthCheck?: GRPCHealthCheck;

  /**
   * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "healthyThreshold" })
  healthyThreshold?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "http2HealthCheck" })
  @Type(() => Http2HealthCheck)
  http2HealthCheck?: Http2HealthCheck;

  @SpeakeasyMetadata()
  @Expose({ name: "httpHealthCheck" })
  @Type(() => HTTPHealthCheck)
  httpHealthCheck?: HTTPHealthCheck;

  @SpeakeasyMetadata()
  @Expose({ name: "httpsHealthCheck" })
  @Type(() => HTTPSHealthCheck)
  httpsHealthCheck?: HTTPSHealthCheck;

  /**
   * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logConfig" })
  @Type(() => HealthCheckLogConfig)
  logConfig?: HealthCheckLogConfig;

  /**
   * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * [Output Only] Region where the health check resides. Not applicable to global health checks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * [Output Only] Server-defined URL for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sslHealthCheck" })
  @Type(() => SSLHealthCheck)
  sslHealthCheck?: SSLHealthCheck;

  @SpeakeasyMetadata()
  @Expose({ name: "tcpHealthCheck" })
  @Type(() => TCPHealthCheck)
  tcpHealthCheck?: TCPHealthCheck;

  /**
   * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeoutSec" })
  timeoutSec?: number;

  /**
   * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: HealthCheckTypeEnum;

  /**
   * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unhealthyThreshold" })
  unhealthyThreshold?: number;
}
