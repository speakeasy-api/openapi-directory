// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum string

const (
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumContract         PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "contract"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumEngagementLetter PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "engagement-letter"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumAmendment        PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "amendment"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumPurchaseOrder    PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "purchase-order"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumDeliveryOrder    PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "delivery-order"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumQuotation        PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "quotation"
	PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnumOther            PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum = "other"
)

func (e *PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contract":
		fallthrough
	case "engagement-letter":
		fallthrough
	case "amendment":
		fallthrough
	case "purchase-order":
		fallthrough
	case "delivery-order":
		fallthrough
	case "quotation":
		fallthrough
	case "other":
		*e = PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum: %s", s)
	}
}

// PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBody - A contractual document to modify
type PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBody struct {
	Amount      *string                                                                             `json:"Amount,omitempty"`
	Designation *string                                                                             `json:"Designation,omitempty"`
	Reference   *string                                                                             `json:"Reference,omitempty"`
	StartDate   *string                                                                             `json:"StartDate,omitempty"`
	Type        *PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBodyTypeEnum `json:"Type,omitempty"`
}

type PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequest struct {
	// A contractual document to modify
	RequestBody *PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequestBody `request:"mediaType=application/json"`
	// Id of the document
	DocumentID string `pathParam:"style=simple,explode=false,name=documentId"`
	// Id of the folder
	FolderID string `pathParam:"style=simple,explode=false,name=folderId"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
