// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TeamsAddAppSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type TeamsAddAppPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The team's name
	TeamName string `pathParam:"style=simple,explode=false,name=team_name"`
}

// TeamsAddAppRequestBody - The name of the app to be added to the team. The app has to be owned by the organization.
type TeamsAddAppRequestBody struct {
	// The name of the app to be added to the distribution group
	Name string `json:"name"`
}

type TeamsAddAppRequest struct {
	PathParams TeamsAddAppPathParams
	// The name of the app to be added to the team. The app has to be owned by the organization.
	Request  TeamsAddAppRequestBody `request:"mediaType=application/json"`
	Security TeamsAddAppSecurity
}

type TeamsAddAppDefaultApplicationJSONErrorCodeEnum string

const (
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumBadRequest          TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumConflict            TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "Conflict"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumNotAcceptable       TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumNotFound            TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "NotFound"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumInternalServerError TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumUnauthorized        TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	TeamsAddAppDefaultApplicationJSONErrorCodeEnumTooManyRequests     TeamsAddAppDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *TeamsAddAppDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = TeamsAddAppDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddAppDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type TeamsAddAppDefaultApplicationJSONError struct {
	Code    TeamsAddAppDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                         `json:"message"`
}

// TeamsAddAppDefaultApplicationJSON - Error
type TeamsAddAppDefaultApplicationJSON struct {
	Error TeamsAddAppDefaultApplicationJSONError `json:"error"`
}

type TeamsAddApp201ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type TeamsAddApp201ApplicationJSONMemberPermissionsEnum string

const (
	TeamsAddApp201ApplicationJSONMemberPermissionsEnumManager   TeamsAddApp201ApplicationJSONMemberPermissionsEnum = "manager"
	TeamsAddApp201ApplicationJSONMemberPermissionsEnumDeveloper TeamsAddApp201ApplicationJSONMemberPermissionsEnum = "developer"
	TeamsAddApp201ApplicationJSONMemberPermissionsEnumViewer    TeamsAddApp201ApplicationJSONMemberPermissionsEnum = "viewer"
	TeamsAddApp201ApplicationJSONMemberPermissionsEnumTester    TeamsAddApp201ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e *TeamsAddApp201ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = TeamsAddApp201ApplicationJSONMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONMemberPermissionsEnum: %s", s)
	}
}

// TeamsAddApp201ApplicationJSONOriginEnum - The creation origin of this app
type TeamsAddApp201ApplicationJSONOriginEnum string

const (
	TeamsAddApp201ApplicationJSONOriginEnumAppcenter TeamsAddApp201ApplicationJSONOriginEnum = "appcenter"
	TeamsAddApp201ApplicationJSONOriginEnumHockeyapp TeamsAddApp201ApplicationJSONOriginEnum = "hockeyapp"
	TeamsAddApp201ApplicationJSONOriginEnumCodepush  TeamsAddApp201ApplicationJSONOriginEnum = "codepush"
)

func (e *TeamsAddApp201ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = TeamsAddApp201ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONOriginEnum: %s", s)
	}
}

// TeamsAddApp201ApplicationJSONOsEnum - The OS the app will be running on
type TeamsAddApp201ApplicationJSONOsEnum string

const (
	TeamsAddApp201ApplicationJSONOsEnumAndroid TeamsAddApp201ApplicationJSONOsEnum = "Android"
	TeamsAddApp201ApplicationJSONOsEnumIOs     TeamsAddApp201ApplicationJSONOsEnum = "iOS"
	TeamsAddApp201ApplicationJSONOsEnumMacOs   TeamsAddApp201ApplicationJSONOsEnum = "macOS"
	TeamsAddApp201ApplicationJSONOsEnumTizen   TeamsAddApp201ApplicationJSONOsEnum = "Tizen"
	TeamsAddApp201ApplicationJSONOsEnumTvOs    TeamsAddApp201ApplicationJSONOsEnum = "tvOS"
	TeamsAddApp201ApplicationJSONOsEnumWindows TeamsAddApp201ApplicationJSONOsEnum = "Windows"
	TeamsAddApp201ApplicationJSONOsEnumLinux   TeamsAddApp201ApplicationJSONOsEnum = "Linux"
	TeamsAddApp201ApplicationJSONOsEnumCustom  TeamsAddApp201ApplicationJSONOsEnum = "Custom"
)

func (e *TeamsAddApp201ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = TeamsAddApp201ApplicationJSONOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONOsEnum: %s", s)
	}
}

// TeamsAddApp201ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type TeamsAddApp201ApplicationJSONOwnerTypeEnum string

const (
	TeamsAddApp201ApplicationJSONOwnerTypeEnumOrg  TeamsAddApp201ApplicationJSONOwnerTypeEnum = "org"
	TeamsAddApp201ApplicationJSONOwnerTypeEnumUser TeamsAddApp201ApplicationJSONOwnerTypeEnum = "user"
)

func (e *TeamsAddApp201ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = TeamsAddApp201ApplicationJSONOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONOwnerTypeEnum: %s", s)
	}
}

// TeamsAddApp201ApplicationJSONOwner - The information about the app's owner
type TeamsAddApp201ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type TeamsAddApp201ApplicationJSONOwnerTypeEnum `json:"type"`
}

// TeamsAddApp201ApplicationJSONPlatformEnum - The platform of the app
type TeamsAddApp201ApplicationJSONPlatformEnum string

const (
	TeamsAddApp201ApplicationJSONPlatformEnumJava            TeamsAddApp201ApplicationJSONPlatformEnum = "Java"
	TeamsAddApp201ApplicationJSONPlatformEnumObjectiveCSwift TeamsAddApp201ApplicationJSONPlatformEnum = "Objective-C-Swift"
	TeamsAddApp201ApplicationJSONPlatformEnumUwp             TeamsAddApp201ApplicationJSONPlatformEnum = "UWP"
	TeamsAddApp201ApplicationJSONPlatformEnumCordova         TeamsAddApp201ApplicationJSONPlatformEnum = "Cordova"
	TeamsAddApp201ApplicationJSONPlatformEnumReactNative     TeamsAddApp201ApplicationJSONPlatformEnum = "React-Native"
	TeamsAddApp201ApplicationJSONPlatformEnumUnity           TeamsAddApp201ApplicationJSONPlatformEnum = "Unity"
	TeamsAddApp201ApplicationJSONPlatformEnumElectron        TeamsAddApp201ApplicationJSONPlatformEnum = "Electron"
	TeamsAddApp201ApplicationJSONPlatformEnumXamarin         TeamsAddApp201ApplicationJSONPlatformEnum = "Xamarin"
	TeamsAddApp201ApplicationJSONPlatformEnumWpf             TeamsAddApp201ApplicationJSONPlatformEnum = "WPF"
	TeamsAddApp201ApplicationJSONPlatformEnumWinForms        TeamsAddApp201ApplicationJSONPlatformEnum = "WinForms"
	TeamsAddApp201ApplicationJSONPlatformEnumUnknown         TeamsAddApp201ApplicationJSONPlatformEnum = "Unknown"
	TeamsAddApp201ApplicationJSONPlatformEnumCustom          TeamsAddApp201ApplicationJSONPlatformEnum = "Custom"
)

func (e *TeamsAddApp201ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = TeamsAddApp201ApplicationJSONPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONPlatformEnum: %s", s)
	}
}

type TeamsAddApp201ApplicationJSONTeamPermissionsEnum string

const (
	TeamsAddApp201ApplicationJSONTeamPermissionsEnumManager   TeamsAddApp201ApplicationJSONTeamPermissionsEnum = "manager"
	TeamsAddApp201ApplicationJSONTeamPermissionsEnumDeveloper TeamsAddApp201ApplicationJSONTeamPermissionsEnum = "developer"
	TeamsAddApp201ApplicationJSONTeamPermissionsEnumViewer    TeamsAddApp201ApplicationJSONTeamPermissionsEnum = "viewer"
)

func (e *TeamsAddApp201ApplicationJSONTeamPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = TeamsAddApp201ApplicationJSONTeamPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddApp201ApplicationJSONTeamPermissionsEnum: %s", s)
	}
}

// TeamsAddApp201ApplicationJSON - Success
type TeamsAddApp201ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                          `json:"app_secret"`
	AzureSubscription *TeamsAddApp201ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []TeamsAddApp201ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin TeamsAddApp201ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os TeamsAddApp201ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner TeamsAddApp201ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform TeamsAddApp201ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The permissions the team has for the app
	TeamPermissions []TeamsAddApp201ApplicationJSONTeamPermissionsEnum `json:"team_permissions,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type TeamsAddAppResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TeamsAddApp201ApplicationJSONObject *TeamsAddApp201ApplicationJSON
	// Error
	TeamsAddAppDefaultApplicationJSONObject *TeamsAddAppDefaultApplicationJSON
}
