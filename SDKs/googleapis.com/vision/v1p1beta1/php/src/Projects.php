<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateResponse
     */
	public function visionProjectsLocationsFilesAnnotate(
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/files:annotate', \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudVisionV1p1beta1BatchAnnotateFilesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAnnotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudVisionV1p1beta1BatchAnnotateFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateResponse
     */
	public function visionProjectsLocationsFilesAsyncBatchAnnotate(
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/files:asyncBatchAnnotate', \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsFilesAsyncBatchAnnotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run image detection and annotation for a batch of images.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateResponse
     */
	public function visionProjectsLocationsImagesAnnotate(
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/images:annotate', \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudVisionV1p1beta1BatchAnnotateImagesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAnnotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudVisionV1p1beta1BatchAnnotateImagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateResponse
     */
	public function visionProjectsLocationsImagesAsyncBatchAnnotate(
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/images:asyncBatchAnnotate', \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VisionProjectsLocationsImagesAsyncBatchAnnotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}