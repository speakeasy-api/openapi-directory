// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETSSHPublicKeyActionEnum
type GETGETSSHPublicKeyActionEnum string

const (
	GETGETSSHPublicKeyActionEnumGetSSHPublicKey GETGETSSHPublicKeyActionEnum = "GetSSHPublicKey"
)

func (e GETGETSSHPublicKeyActionEnum) ToPointer() *GETGETSSHPublicKeyActionEnum {
	return &e
}

func (e *GETGETSSHPublicKeyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetSSHPublicKey":
		*e = GETGETSSHPublicKeyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETSSHPublicKeyActionEnum: %v", v)
	}
}

// GETGETSSHPublicKeyEncodingEnum - Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
type GETGETSSHPublicKeyEncodingEnum string

const (
	GETGETSSHPublicKeyEncodingEnumSSH GETGETSSHPublicKeyEncodingEnum = "SSH"
	GETGETSSHPublicKeyEncodingEnumPem GETGETSSHPublicKeyEncodingEnum = "PEM"
)

func (e GETGETSSHPublicKeyEncodingEnum) ToPointer() *GETGETSSHPublicKeyEncodingEnum {
	return &e
}

func (e *GETGETSSHPublicKeyEncodingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH":
		fallthrough
	case "PEM":
		*e = GETGETSSHPublicKeyEncodingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETSSHPublicKeyEncodingEnum: %v", v)
	}
}

// GETGETSSHPublicKeyVersionEnum
type GETGETSSHPublicKeyVersionEnum string

const (
	GETGETSSHPublicKeyVersionEnumTwoThousandAndTen0508 GETGETSSHPublicKeyVersionEnum = "2010-05-08"
)

func (e GETGETSSHPublicKeyVersionEnum) ToPointer() *GETGETSSHPublicKeyVersionEnum {
	return &e
}

func (e *GETGETSSHPublicKeyVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETGETSSHPublicKeyVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETSSHPublicKeyVersionEnum: %v", v)
	}
}

type GETGETSSHPublicKeyRequest struct {
	Action GETGETSSHPublicKeyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
	Encoding GETGETSSHPublicKeyEncodingEnum `queryParam:"style=form,explode=true,name=Encoding"`
	// <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
	SSHPublicKeyID string `queryParam:"style=form,explode=true,name=SSHPublicKeyId"`
	// <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          string                        `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETGETSSHPublicKeyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETSSHPublicKeyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
