// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesSpaceIDPersonsMemberIDFoldersIDRequest struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// memberId of the person
	MemberID string `pathParam:"style=simple,explode=false,name=memberId"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum string

const (
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnumConfidential GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum = "confidential"
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnumRegular      GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum = "regular"
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnumPublic       GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum = "public"
)

func (e GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum) ToPointer() *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum {
	return &e
}

func (e *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum: %v", v)
	}
}

type GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum string

const (
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnumWrite GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum = "write"
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnumRead  GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum = "read"
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnumNone  GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum = "none"
)

func (e GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum) ToPointer() *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum {
	return &e
}

func (e *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "write":
		fallthrough
	case "read":
		fallthrough
	case "none":
		*e = GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum: %v", v)
	}
}

// GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSON - An access to a folder
type GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSON struct {
	About            *string                                                              `json:"About,omitempty"`
	ArchivalDate     *string                                                              `json:"ArchivalDate,omitempty"`
	Class            *string                                                              `json:"Class,omitempty"`
	Home             *bool                                                                `json:"Home,omitempty"`
	ID               *string                                                              `json:"Id,omitempty"`
	Keywords         []string                                                             `json:"Keywords,omitempty"`
	Level            *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONLevelEnum `json:"Level,omitempty"`
	ModificationDate *string                                                              `json:"ModificationDate,omitempty"`
	Name             *string                                                              `json:"Name,omitempty"`
	Parent           *string                                                              `json:"Parent,omitempty"`
	Right            *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONRightEnum `json:"Right,omitempty"`
}

type GetSpacesSpaceIDPersonsMemberIDFoldersIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An access to a folder
	GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSONObject *GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSON
}
