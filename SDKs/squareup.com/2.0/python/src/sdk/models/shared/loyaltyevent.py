"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import loyaltyeventaccumulatepoints as shared_loyaltyeventaccumulatepoints
from ..shared import loyaltyeventadjustpoints as shared_loyaltyeventadjustpoints
from ..shared import loyaltyeventcreatereward as shared_loyaltyeventcreatereward
from ..shared import loyaltyeventdeletereward as shared_loyaltyeventdeletereward
from ..shared import loyaltyeventexpirepoints as shared_loyaltyeventexpirepoints
from ..shared import loyaltyeventother as shared_loyaltyeventother
from ..shared import loyaltyeventredeemreward as shared_loyaltyeventredeemreward
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoyaltyEvent:
    r"""Provides information about a loyalty event.
    For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
    """
    
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The timestamp when the event was created, in RFC 3339 format."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The Square-assigned ID of the loyalty event."""  
    loyalty_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loyalty_account_id') }})
    r"""The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred."""  
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Defines whether the event was generated by the Square Point of Sale."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the loyalty event."""  
    accumulate_points: Optional[shared_loyaltyeventaccumulatepoints.LoyaltyEventAccumulatePoints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accumulate_points'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `ACCUMULATE_POINTS`."""  
    adjust_points: Optional[shared_loyaltyeventadjustpoints.LoyaltyEventAdjustPoints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjust_points'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `ADJUST_POINTS`."""  
    create_reward: Optional[shared_loyaltyeventcreatereward.LoyaltyEventCreateReward] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create_reward'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `CREATE_REWARD`."""  
    delete_reward: Optional[shared_loyaltyeventdeletereward.LoyaltyEventDeleteReward] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_reward'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `DELETE_REWARD`."""  
    expire_points: Optional[shared_loyaltyeventexpirepoints.LoyaltyEventExpirePoints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expire_points'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `EXPIRE_POINTS`."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred."""  
    other_event: Optional[shared_loyaltyeventother.LoyaltyEventOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_event'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `OTHER`."""  
    redeem_reward: Optional[shared_loyaltyeventredeemreward.LoyaltyEventRedeemReward] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redeem_reward'), 'exclude': lambda f: f is None }})
    r"""Provides metadata when the event `type` is `REDEEM_REWARD`."""  
    