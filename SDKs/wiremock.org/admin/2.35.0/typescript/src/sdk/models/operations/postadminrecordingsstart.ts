/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class PostAdminRecordingsStartRequestBodyCaptureHeaders extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "caseInsensitive" })
  caseInsensitive?: boolean;
}

/**
 * Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
 */
export class PostAdminRecordingsStartRequestBodyExtractBodyCriteria extends SpeakeasyBase {
  /**
   * Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "binarySizeThreshold" })
  binarySizeThreshold?: string;

  /**
   * Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "textSizeThreshold" })
  textSizeThreshold?: string;
}

/**
 * Pre-emptive basic auth credentials to match against
 */
export class PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password: string;

  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username: string;
}

export class PostAdminRecordingsStartRequestBodyFilters extends SpeakeasyBase {
  /**
   * Pre-emptive basic auth credentials to match against
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basicAuthCredentials" })
  @Type(() => PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials)
  basicAuthCredentials?: PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials;

  /**
   * Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bodyPatterns" })
  bodyPatterns?: Record<string, any>[];

  /**
   * Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cookies" })
  cookies?: Record<string, any>;

  /**
   * Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headers" })
  headers?: Record<string, any>;

  /**
   * The HTTP request method e.g. GET
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: string;

  /**
   * Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryParameters" })
  queryParameters?: Record<string, any>;

  /**
   * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPath" })
  urlPath?: string;

  /**
   * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPathPattern" })
  urlPathPattern?: string;

  /**
   * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPattern" })
  urlPattern?: string;
}

export enum PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum {
  EqualToXml = "equalToXml",
}

/**
 * Always match request bodies using equalToXml
 */
export class PostAdminRecordingsStartRequestBodyRequestBodyPattern4 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum;
}

export enum PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum {
  EqualToJson = "equalToJson",
}

/**
 * Always match request bodies using equalToJson
 */
export class PostAdminRecordingsStartRequestBodyRequestBodyPattern3 extends SpeakeasyBase {
  /**
   * Ignore order of array elements
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreArrayOrder" })
  ignoreArrayOrder?: boolean;

  /**
   * Ignore extra elements in objects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreExtraElements" })
  ignoreExtraElements?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum;
}

export enum PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum {
  EqualTo = "equalTo",
}

/**
 * Always match request bodies using equalTo
 */
export class PostAdminRecordingsStartRequestBodyRequestBodyPattern2 extends SpeakeasyBase {
  /**
   * Match body using case-insensitive string comparison
   */
  @SpeakeasyMetadata()
  @Expose({ name: "caseInsensitive" })
  caseInsensitive?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum;
}

export enum PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum {
  Auto = "auto",
}

/**
 * Automatically determine matcher based on content type (the default)
 */
export class PostAdminRecordingsStartRequestBodyRequestBodyPattern1 extends SpeakeasyBase {
  /**
   * If equalTo is used, match body use case-insensitive string comparison
   */
  @SpeakeasyMetadata()
  @Expose({ name: "caseInsensitive" })
  caseInsensitive?: boolean;

  /**
   * If equalToJson is used, ignore order of array elements
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreArrayOrder" })
  ignoreArrayOrder?: boolean;

  /**
   * If equalToJson is used, matcher ignores extra elements in objects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreExtraElements" })
  ignoreExtraElements?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum;
}

export class PostAdminRecordingsStartRequestBody extends SpeakeasyBase {
  /**
   * Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is "caseInsensitive", which defaults to false
   */
  @SpeakeasyMetadata({
    elemType: PostAdminRecordingsStartRequestBodyCaptureHeaders,
  })
  @Expose({ name: "captureHeaders" })
  @Transform(
    ({ value }) => {
      const obj: Record<
        string,
        PostAdminRecordingsStartRequestBodyCaptureHeaders
      > = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          PostAdminRecordingsStartRequestBodyCaptureHeaders
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  captureHeaders?: Record<
    string,
    PostAdminRecordingsStartRequestBodyCaptureHeaders
  >;

  /**
   * Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extractBodyCriteria" })
  @Type(() => PostAdminRecordingsStartRequestBodyExtractBodyCriteria)
  extractBodyCriteria?: PostAdminRecordingsStartRequestBodyExtractBodyCriteria;

  @SpeakeasyMetadata()
  @Expose({ name: "filters" })
  @Type(() => PostAdminRecordingsStartRequestBodyFilters)
  filters?: PostAdminRecordingsStartRequestBodyFilters;

  /**
   * Whether to save stub mappings to the file system or just return them
   */
  @SpeakeasyMetadata()
  @Expose({ name: "persist" })
  persist?: boolean;

  /**
   * When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repeatsAsScenarios" })
  repeatsAsScenarios?: boolean;

  /**
   * Control the request body matcher used in generated stub mappings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestBodyPattern" })
  requestBodyPattern?: any;

  /**
   * Target URL when using the record and playback API
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetBaseUrl" })
  targetBaseUrl?: string;

  /**
   * List of names of stub mappings transformers to apply to generated stubs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transformerParameters" })
  transformerParameters?: Record<string, any>;

  /**
   * Parameters to pass to stub mapping transformers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transformers" })
  transformers?: string[];
}

export class PostAdminRecordingsStartResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
