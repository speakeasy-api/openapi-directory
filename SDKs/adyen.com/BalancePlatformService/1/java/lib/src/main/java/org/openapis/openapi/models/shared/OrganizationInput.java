/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OrganizationInput {
    /**
     * Your description for the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public OrganizationInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The organization's trading name, if different from the registered legal name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doingBusinessAs")
    public String doingBusinessAs;
    public OrganizationInput withDoingBusinessAs(String doingBusinessAs) {
        this.doingBusinessAs = doingBusinessAs;
        return this;
    }
    
    /**
     * The email address of the legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public OrganizationInput withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The organization's legal name.
     */
    @JsonProperty("legalName")
    public String legalName;
    public OrganizationInput withLegalName(String legalName) {
        this.legalName = legalName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public PhoneNumber2 phone;
    public OrganizationInput withPhone(PhoneNumber2 phone) {
        this.phone = phone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("principalPlaceOfBusiness")
    public Address3 principalPlaceOfBusiness;
    public OrganizationInput withPrincipalPlaceOfBusiness(Address3 principalPlaceOfBusiness) {
        this.principalPlaceOfBusiness = principalPlaceOfBusiness;
        return this;
    }
    
    @JsonProperty("registeredAddress")
    public Address3 registeredAddress;
    public OrganizationInput withRegisteredAddress(Address3 registeredAddress) {
        this.registeredAddress = registeredAddress;
        return this;
    }
    
    /**
     * The organization's registration number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    public String registrationNumber;
    public OrganizationInput withRegistrationNumber(String registrationNumber) {
        this.registrationNumber = registrationNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockData")
    public StockData stockData;
    public OrganizationInput withStockData(StockData stockData) {
        this.stockData = stockData;
        return this;
    }
    
    /**
     * Indicates whether the legal entity is exempt from tax. When **true**, the `taxIdAbsenceReason` must be provided.
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxExempt")
    public Boolean taxExempt;
    public OrganizationInput withTaxExempt(Boolean taxExempt) {
        this.taxExempt = taxExempt;
        return this;
    }
    
    /**
     * The organization's tax identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxId")
    public String taxId;
    public OrganizationInput withTaxId(String taxId) {
        this.taxId = taxId;
        return this;
    }
    
    /**
     * The reason the organization has not provided a tax identifier.
     * 
     * Possible values: **industryExemption**, **belowTaxThreshold**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxIdAbsenceReason")
    public OrganizationTaxIdAbsenceReasonEnum taxIdAbsenceReason;
    public OrganizationInput withTaxIdAbsenceReason(OrganizationTaxIdAbsenceReasonEnum taxIdAbsenceReason) {
        this.taxIdAbsenceReason = taxIdAbsenceReason;
        return this;
    }
    
    /**
     * Type of organization. 
     * 
     * Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public OrganizationTypeEnum type;
    public OrganizationInput withType(OrganizationTypeEnum type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webData")
    public WebDataInput webData;
    public OrganizationInput withWebData(WebDataInput webData) {
        this.webData = webData;
        return this;
    }
    
}
