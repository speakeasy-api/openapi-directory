"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import video as shared_video
from enum import Enum
from typing import Optional

class GetAlbumVideosAlt1DirectionEnum(str, Enum):
    r"""The sort direction of the results."""
    ASC = 'asc'
    DESC = 'desc'

class GetAlbumVideosAlt1FilterEnum(str, Enum):
    r"""The attribute by which to filter the results."""
    EMBEDDABLE = 'embeddable'

class GetAlbumVideosAlt1SortEnum(str, Enum):
    r"""The way to sort the results."""
    ALPHABETICAL = 'alphabetical'
    COMMENTS = 'comments'
    DATE = 'date'
    DEFAULT = 'default'
    DURATION = 'duration'
    LIKES = 'likes'
    MANUAL = 'manual'
    MODIFIED_TIME = 'modified_time'
    PLAYS = 'plays'


@dataclasses.dataclass
class GetAlbumVideosAlt1Request:
    
    album_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'album_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the album."""  
    containing_uri: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'containing_uri', 'style': 'form', 'explode': True }})
    r"""The page containing the video URI."""  
    direction: Optional[GetAlbumVideosAlt1DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The sort direction of the results."""  
    filter: Optional[GetAlbumVideosAlt1FilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""The attribute by which to filter the results."""  
    filter_embeddable: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_embeddable', 'style': 'form', 'explode': True }})
    r"""Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."""  
    page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page number of the results to show."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'password', 'style': 'form', 'explode': True }})
    r"""The password of the album."""  
    per_page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of items to show on each page of results, up to a maximum of 100."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""The search query to use to filter the results."""  
    sort: Optional[GetAlbumVideosAlt1SortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The way to sort the results."""  
    weak_search: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'weak_search', 'style': 'form', 'explode': True }})
    r"""Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name."""  
    

@dataclasses.dataclass
class GetAlbumVideosAlt1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""No such album exists."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    videos: Optional[list[shared_video.Video]] = dataclasses.field(default=None)
    r"""The videos were returned."""  
    