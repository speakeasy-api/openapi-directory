"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var activity_1 = require("./activity");
var apps_1 = require("./apps");
var checks_1 = require("./checks");
var codesofconduct_1 = require("./codesofconduct");
var emojis_1 = require("./emojis");
var enterpriseadmin_1 = require("./enterpriseadmin");
var gists_1 = require("./gists");
var git_1 = require("./git");
var gitignore_1 = require("./gitignore");
var issues_1 = require("./issues");
var licenses_1 = require("./licenses");
var markdown_1 = require("./markdown");
var meta_1 = require("./meta");
var oauthauthorizations_1 = require("./oauthauthorizations");
var orgs_1 = require("./orgs");
var projects_1 = require("./projects");
var pulls_1 = require("./pulls");
var ratelimit_1 = require("./ratelimit");
var reactions_1 = require("./reactions");
var repos_1 = require("./repos");
var search_1 = require("./search");
var teams_1 = require("./teams");
var users_1 = require("./users");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://{protocol}://{hostname}/api/v3"];
/**
 * GitHub's v3 REST API.
 *
 * @see {@link https://docs.github.com/enterprise-server@2.20/rest/} - GitHub Enterprise Developer Docs
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.activity = new activity_1.Activity(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.apps = new apps_1.Apps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.checks = new checks_1.Checks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.codesOfConduct = new codesofconduct_1.CodesOfConduct(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.emojis = new emojis_1.Emojis(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.enterpriseAdmin = new enterpriseadmin_1.EnterpriseAdmin(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.gists = new gists_1.Gists(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.git = new git_1.Git(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.gitignore = new gitignore_1.Gitignore(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.issues = new issues_1.Issues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenses = new licenses_1.Licenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.markdown = new markdown_1.Markdown(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.meta = new meta_1.Meta(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oauthAuthorizations = new oauthauthorizations_1.OauthAuthorizations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.orgs = new orgs_1.Orgs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.projects = new projects_1.Projects(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pulls = new pulls_1.Pulls(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rateLimit = new ratelimit_1.RateLimit(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.reactions = new reactions_1.Reactions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.repos = new repos_1.Repos(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.search = new search_1.Search(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.teams = new teams_1.Teams(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
