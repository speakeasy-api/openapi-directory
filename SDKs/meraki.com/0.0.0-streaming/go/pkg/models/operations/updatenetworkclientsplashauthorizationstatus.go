// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type UpdateNetworkClientSplashAuthorizationStatusPathParams struct {
	ClientID  string `pathParam:"style=simple,explode=false,name=clientId"`
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0 - Splash authorization for SSID 0
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1 - Splash authorization for SSID 1
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10 - Splash authorization for SSID 10
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11 - Splash authorization for SSID 11
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12 - Splash authorization for SSID 12
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13 - Splash authorization for SSID 13
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14 - Splash authorization for SSID 14
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2 - Splash authorization for SSID 2
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3 - Splash authorization for SSID 3
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4 - Splash authorization for SSID 4
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5 - Splash authorization for SSID 5
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6 - Splash authorization for SSID 6
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7 - Splash authorization for SSID 7
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8 - Splash authorization for SSID 8
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9 - Splash authorization for SSID 9
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9 struct {
	// New authorization status for the SSID (true, false).
	IsAuthorized *bool `json:"isAuthorized,omitempty"`
}

// UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids - The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
type UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids struct {
	// Splash authorization for SSID 0
	Zero *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0 `json:"0,omitempty"`
	// Splash authorization for SSID 1
	One *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1 `json:"1,omitempty"`
	// Splash authorization for SSID 10
	Ten *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10 `json:"10,omitempty"`
	// Splash authorization for SSID 11
	Eleven *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11 `json:"11,omitempty"`
	// Splash authorization for SSID 12
	Twelve *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12 `json:"12,omitempty"`
	// Splash authorization for SSID 13
	Thirteen *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13 `json:"13,omitempty"`
	// Splash authorization for SSID 14
	Fourteen *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14 `json:"14,omitempty"`
	// Splash authorization for SSID 2
	Two *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2 `json:"2,omitempty"`
	// Splash authorization for SSID 3
	Three *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3 `json:"3,omitempty"`
	// Splash authorization for SSID 4
	Four *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4 `json:"4,omitempty"`
	// Splash authorization for SSID 5
	Five *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5 `json:"5,omitempty"`
	// Splash authorization for SSID 6
	Six *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6 `json:"6,omitempty"`
	// Splash authorization for SSID 7
	Seven *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7 `json:"7,omitempty"`
	// Splash authorization for SSID 8
	Eight *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8 `json:"8,omitempty"`
	// Splash authorization for SSID 9
	Nine *UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9 `json:"9,omitempty"`
}

type UpdateNetworkClientSplashAuthorizationStatusRequestBody struct {
	// The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
	Ssids UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids `json:"ssids"`
}

type UpdateNetworkClientSplashAuthorizationStatusRequest struct {
	PathParams UpdateNetworkClientSplashAuthorizationStatusPathParams
	Request    UpdateNetworkClientSplashAuthorizationStatusRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkClientSplashAuthorizationStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkClientSplashAuthorizationStatus200ApplicationJSONObject map[string]interface{}
}
