// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetAdminMappingsQueryParams struct {
	// The maximum number of results to return
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// The start index of the results to return
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
}

type GetAdminMappingsRequest struct {
	QueryParams GetAdminMappingsQueryParams
}

// GetAdminMappings200ApplicationJSONMappingsRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type GetAdminMappings200ApplicationJSONMappingsRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type GetAdminMappings200ApplicationJSONMappingsRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *GetAdminMappings200ApplicationJSONMappingsRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum string

const (
	GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnumConnectionResetByPeer  GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnumEmptyResponse          GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum = "EMPTY_RESPONSE"
	GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnumMalformedResponseChunk GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnumRandomDataThenClose    GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum: %s", s)
	}
}

type GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum string

const (
	GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnumUniform GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum = "uniform"
)

func (e *GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum: %s", s)
	}
}

// GetAdminMappings200ApplicationJSONMappingsResponseUniform - Uniformly distributed random response delay.
type GetAdminMappings200ApplicationJSONMappingsResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *GetAdminMappings200ApplicationJSONMappingsResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                           `json:"transformers,omitempty"`
	Type         *GetAdminMappings200ApplicationJSONMappingsResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                                             `json:"upper,omitempty"`
}

// GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum string

const (
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnumConnectionResetByPeer  GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnumEmptyResponse          GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnumMalformedResponseChunk GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnumRandomDataThenClose    GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum: %s", s)
	}
}

type GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum string

const (
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnumLognormal GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum = "lognormal"
)

func (e *GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum: %s", s)
	}
}

// GetAdminMappings200ApplicationJSONMappingsResponseLogNormal - Log normal randomly distributed response delay.
type GetAdminMappings200ApplicationJSONMappingsResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *GetAdminMappings200ApplicationJSONMappingsResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                             `json:"transformers,omitempty"`
	Type         *GetAdminMappings200ApplicationJSONMappingsResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type GetAdminMappings200ApplicationJSONMappingsResponseType string

const (
	GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseLogNormal GetAdminMappings200ApplicationJSONMappingsResponseType = "get_/__admin/mappings_200ApplicationJSON_mappings_response_Log normal"
	GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseUniform   GetAdminMappings200ApplicationJSONMappingsResponseType = "get_/__admin/mappings_200ApplicationJSON_mappings_response_Uniform"
)

type GetAdminMappings200ApplicationJSONMappingsResponse struct {
	GetAdminMappings200ApplicationJSONMappingsResponseLogNormal *GetAdminMappings200ApplicationJSONMappingsResponseLogNormal
	GetAdminMappings200ApplicationJSONMappingsResponseUniform   *GetAdminMappings200ApplicationJSONMappingsResponseUniform

	Type GetAdminMappings200ApplicationJSONMappingsResponseType
}

func CreateGetAdminMappings200ApplicationJSONMappingsResponseGetAdminMappings200ApplicationJSONMappingsResponseLogNormal(getAdminMappings200ApplicationJSONMappingsResponseLogNormal GetAdminMappings200ApplicationJSONMappingsResponseLogNormal) GetAdminMappings200ApplicationJSONMappingsResponse {
	typ := GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseLogNormal

	return GetAdminMappings200ApplicationJSONMappingsResponse{
		GetAdminMappings200ApplicationJSONMappingsResponseLogNormal: &getAdminMappings200ApplicationJSONMappingsResponseLogNormal,
		Type: typ,
	}
}

func CreateGetAdminMappings200ApplicationJSONMappingsResponseGetAdminMappings200ApplicationJSONMappingsResponseUniform(getAdminMappings200ApplicationJSONMappingsResponseUniform GetAdminMappings200ApplicationJSONMappingsResponseUniform) GetAdminMappings200ApplicationJSONMappingsResponse {
	typ := GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseUniform

	return GetAdminMappings200ApplicationJSONMappingsResponse{
		GetAdminMappings200ApplicationJSONMappingsResponseUniform: &getAdminMappings200ApplicationJSONMappingsResponseUniform,
		Type: typ,
	}
}

func (u *GetAdminMappings200ApplicationJSONMappingsResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getAdminMappings200ApplicationJSONMappingsResponseLogNormal := new(GetAdminMappings200ApplicationJSONMappingsResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getAdminMappings200ApplicationJSONMappingsResponseLogNormal); err == nil {
		u.GetAdminMappings200ApplicationJSONMappingsResponseLogNormal = getAdminMappings200ApplicationJSONMappingsResponseLogNormal
		u.Type = GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseLogNormal
		return nil
	}

	getAdminMappings200ApplicationJSONMappingsResponseUniform := new(GetAdminMappings200ApplicationJSONMappingsResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getAdminMappings200ApplicationJSONMappingsResponseUniform); err == nil {
		u.GetAdminMappings200ApplicationJSONMappingsResponseUniform = getAdminMappings200ApplicationJSONMappingsResponseUniform
		u.Type = GetAdminMappings200ApplicationJSONMappingsResponseTypeGetAdminMappings200ApplicationJSONMappingsResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAdminMappings200ApplicationJSONMappingsResponse) MarshalJSON() ([]byte, error) {
	if u.GetAdminMappings200ApplicationJSONMappingsResponseLogNormal != nil {
		return json.Marshal(u.GetAdminMappings200ApplicationJSONMappingsResponseLogNormal)
	}

	if u.GetAdminMappings200ApplicationJSONMappingsResponseUniform != nil {
		return json.Marshal(u.GetAdminMappings200ApplicationJSONMappingsResponseUniform)
	}

	return nil, nil
}

type GetAdminMappings200ApplicationJSONMappings struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                             `json:"priority,omitempty"`
	Request  *GetAdminMappings200ApplicationJSONMappingsRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                             `json:"requiredScenarioState,omitempty"`
	Response              *GetAdminMappings200ApplicationJSONMappingsResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type GetAdminMappings200ApplicationJSONMeta struct {
	Total int64 `json:"total"`
}

// GetAdminMappings200ApplicationJSON - All stub mappings
type GetAdminMappings200ApplicationJSON struct {
	Mappings []GetAdminMappings200ApplicationJSONMappings `json:"mappings,omitempty"`
	Meta     *GetAdminMappings200ApplicationJSONMeta      `json:"meta,omitempty"`
}

type GetAdminMappingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// All stub mappings
	GetAdminMappings200ApplicationJSONObject *GetAdminMappings200ApplicationJSON
}
