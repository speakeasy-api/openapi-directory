// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CvipcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CvipcRequestBodyCertificateParameters struct {
	// Policy No
	Udf1 string `json:"UDF1"`
	// Verification Value
	Udf2 string `json:"UDF2"`
}

// CvipcRequestBodyFormatEnum - The format of the certificate in response.
type CvipcRequestBodyFormatEnum string

const (
	CvipcRequestBodyFormatEnumPdf CvipcRequestBodyFormatEnum = "pdf"
)

func (e CvipcRequestBodyFormatEnum) ToPointer() *CvipcRequestBodyFormatEnum {
	return &e
}

func (e *CvipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CvipcRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CvipcRequestBodyFormatEnum: %v", v)
	}
}

// CvipcRequestBody - Request format
type CvipcRequestBody struct {
	CertificateParameters *CvipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CvipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cvipc504ApplicationJSONErrorEnum string

const (
	Cvipc504ApplicationJSONErrorEnumGatewayTimeout Cvipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Cvipc504ApplicationJSONErrorEnum) ToPointer() *Cvipc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Cvipc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc504ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cvipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Cvipc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Cvipc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc504ApplicationJSON - Gateway timeout
type Cvipc504ApplicationJSON struct {
	Error            *Cvipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc503ApplicationJSONErrorEnum string

const (
	Cvipc503ApplicationJSONErrorEnumServiceUnavailable Cvipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Cvipc503ApplicationJSONErrorEnum) ToPointer() *Cvipc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Cvipc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc503ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cvipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Cvipc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Cvipc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc503ApplicationJSON - Service unavailable
type Cvipc503ApplicationJSON struct {
	Error            *Cvipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc502ApplicationJSONErrorEnum string

const (
	Cvipc502ApplicationJSONErrorEnumBadGatewy Cvipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Cvipc502ApplicationJSONErrorEnum) ToPointer() *Cvipc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Cvipc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc502ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cvipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Cvipc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Cvipc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc502ApplicationJSON - Bad gateway
type Cvipc502ApplicationJSON struct {
	Error            *Cvipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc500ApplicationJSONErrorEnum string

const (
	Cvipc500ApplicationJSONErrorEnumInternalServerError Cvipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Cvipc500ApplicationJSONErrorEnum) ToPointer() *Cvipc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Cvipc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc500ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc500ApplicationJSONErrorDescriptionEnumInternalServerError Cvipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Cvipc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Cvipc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc500ApplicationJSON - Internal server error
type Cvipc500ApplicationJSON struct {
	Error            *Cvipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc404ApplicationJSONErrorEnum string

const (
	Cvipc404ApplicationJSONErrorEnumRecordNotFound Cvipc404ApplicationJSONErrorEnum = "record_not_found"
	Cvipc404ApplicationJSONErrorEnumURLNotFound    Cvipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Cvipc404ApplicationJSONErrorEnum) ToPointer() *Cvipc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cvipc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc404ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cvipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cvipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cvipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Cvipc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cvipc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc404ApplicationJSON - No record found
type Cvipc404ApplicationJSON struct {
	Error            *Cvipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc401ApplicationJSONErrorEnum string

const (
	Cvipc401ApplicationJSONErrorEnumInvalidAuthentication Cvipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Cvipc401ApplicationJSONErrorEnumInvalidAuthorization  Cvipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Cvipc401ApplicationJSONErrorEnum) ToPointer() *Cvipc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cvipc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc401ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cvipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cvipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cvipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Cvipc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cvipc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc401ApplicationJSON - Unauthorized access
type Cvipc401ApplicationJSON struct {
	Error            *Cvipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvipc400ApplicationJSONErrorEnum string

const (
	Cvipc400ApplicationJSONErrorEnumMissingParameter Cvipc400ApplicationJSONErrorEnum = "missing_parameter"
	Cvipc400ApplicationJSONErrorEnumInvalidParameter Cvipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Cvipc400ApplicationJSONErrorEnumInvalidFormat    Cvipc400ApplicationJSONErrorEnum = "invalid_format"
	Cvipc400ApplicationJSONErrorEnumInvalidTxnid     Cvipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Cvipc400ApplicationJSONErrorEnumInvalidConsentid Cvipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Cvipc400ApplicationJSONErrorEnum) ToPointer() *Cvipc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Cvipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cvipc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Cvipc400ApplicationJSONErrorDescriptionEnum string

const (
	Cvipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cvipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cvipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Cvipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cvipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cvipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cvipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cvipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cvipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cvipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Cvipc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Cvipc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cvipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cvipc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvipc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cvipc400ApplicationJSON - Bad request
type Cvipc400ApplicationJSON struct {
	Error            *Cvipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CvipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cvipc400ApplicationJSONObject *Cvipc400ApplicationJSON
	// Unauthorized access
	Cvipc401ApplicationJSONObject *Cvipc401ApplicationJSON
	// No record found
	Cvipc404ApplicationJSONObject *Cvipc404ApplicationJSON
	// Internal server error
	Cvipc500ApplicationJSONObject *Cvipc500ApplicationJSON
	// Bad gateway
	Cvipc502ApplicationJSONObject *Cvipc502ApplicationJSON
	// Service unavailable
	Cvipc503ApplicationJSONObject *Cvipc503ApplicationJSON
	// Gateway timeout
	Cvipc504ApplicationJSONObject *Cvipc504ApplicationJSON
}
