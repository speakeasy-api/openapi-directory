<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetSchedulesScheduleERequest
{
    /**
     * 
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     * 
     * @var string $apiKey
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=api_key')]
    public string $apiKey;
    
    /**
     * 
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * First character indicates office - [P]residential, [H]ouse, [S]enate].
     * Second character is the last digit of the two-year period the ID was created.
     * Third and fourth is the candidate state. Presidential IDs don't have state.
     * Fifth and sixth is the district when the candidate first ran. This does not change if the
     * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
     * The rest is sequence.
     * 
     * 
     * @var ?array<string> $candidateId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_id')]
    public ?array $candidateId = null;
    
    /**
     * Federal office candidate runs for: H, S or P
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\GetSchedulesScheduleECandidateOfficeEnum> $candidateOffice
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_office')]
    public ?array $candidateOffice = null;
    
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * 
     * @var ?array<string> $candidateOfficeDistrict
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_office_district')]
    public ?array $candidateOfficeDistrict = null;
    
    /**
     * US state or territory
     * 
     * @var ?array<string> $candidateOfficeState
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_office_state')]
    public ?array $candidateOfficeState = null;
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * 
     * @var ?array<string> $candidateParty
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_party')]
    public ?array $candidateParty = null;
    
    /**
     * 
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     * 
     * @var ?array<string> $committeeId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=committee_id')]
    public ?array $committeeId = null;
    
    /**
     * 
     * Filter records to only those that were applicable to a given
     * two-year period.The cycle begins with an odd year and is named
     * for its ending, even year.
     * 
     * 
     * @var ?array<int> $cycle
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=cycle')]
    public ?array $cycle = null;
    
    /**
     * The form where the underlying data comes from, for example, Form 1 would appear as F1:
     * 
     *     - F1   Statement of Organization
     *     - F1M  Notification of Multicandidate Status
     *     - F2   Statement of Candidacy
     *     - F3   Report of Receipts and Disbursements for an Authorized Committee
     *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
     *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
     *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
     *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
     *     - F5   Report of Independent Expenditures Made and Contributions Received
     *     - F6   48 Hour Notice of Contributions/Loans Received
     *     - F7   Report of Communication Costs by Corporations and Membership Organizations
     *     - F8   Debt Settlement Plan
     *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
     *     - F13  Report of Donations Accepted for Inaugural Committee
     *     - F99  Miscellaneous Text
     *     - FRQ  Request for Additional Information
     * 
     * 
     * @var ?array<string> $filingForm
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filing_form')]
    public ?array $filingForm = null;
    
    /**
     * 
     * An unique identifier for each page where the electronic or paper filing is reported.
     * 
     * 
     * @var ?array<string> $imageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=image_number')]
    public ?array $imageNumber = null;
    
    /**
     * 
     * Record filed as 24- or 48-hour notice.
     * 
     * 
     * @var ?array<bool> $isNotice
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=is_notice')]
    public ?array $isNotice = null;
    
    /**
     * 
     * When sorting by `expenditure_amount`,
     * this is populated with the `expenditure_amount` of the last result.
     * However, you will need to pass the index of that last result to
     * `last_index` to get the next page.
     * 
     * 
     * @var ?float $lastExpenditureAmount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=last_expenditure_amount')]
    public ?float $lastExpenditureAmount = null;
    
    /**
     * 
     * When sorting by `expenditure_date`,
     * this is populated with the `expenditure_date` of the last result.
     * However, you will need to pass the index of that last result to
     * `last_index` to get the next page.
     * 
     * 
     * @var ?\DateTime $lastExpenditureDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=last_expenditure_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $lastExpenditureDate = null;
    
    /**
     * Index of last result from previous page
     * 
     * @var ?int $lastIndex
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=last_index')]
    public ?int $lastIndex = null;
    
    /**
     * 
     * When sorting by `office_total_ytd`,
     * this is populated with the `office_total_ytd` of the last result.
     * However, you will need to pass the index of that last result to
     * `last_index` to get the next page.'
     * 
     * 
     * @var ?float $lastOfficeTotalYtd
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=last_office_total_ytd')]
    public ?float $lastOfficeTotalYtd = null;
    
    /**
     * 
     * When sorting by `support_oppose_indicator`,
     * this is populated with the `support_oppose_indicator` of the last result.
     * However, you will need to pass the index of that last result to `last_index`
     * to get the next page.'
     * 
     * 
     * @var ?string $lastSupportOpposeIndicator
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=last_support_oppose_indicator')]
    public ?string $lastSupportOpposeIndicator = null;
    
    /**
     * Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * 
     * @var ?string $lineNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=line_number')]
    public ?string $lineNumber = null;
    
    /**
     * Filter for all amounts less than a value.
     * 
     * @var ?string $maxAmount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_amount')]
    public ?string $maxAmount = null;
    
    /**
     * Maximum date
     * 
     * @var ?\DateTime $maxDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $maxDate = null;
    
    /**
     * Selects all items distributed by this committee before this date
     * 
     * @var ?\DateTime $maxDisseminationDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_dissemination_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $maxDisseminationDate = null;
    
    /**
     * 
     * Selects all filings received before this date
     * 
     * 
     * @var ?\DateTime $maxFilingDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_filing_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $maxFilingDate = null;
    
    /**
     * Maxium image number of the page where the schedule item is reported
     * 
     * @var ?string $maxImageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_image_number')]
    public ?string $maxImageNumber = null;
    
    /**
     * Filter for all amounts greater than a value.
     * 
     * @var ?string $minAmount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_amount')]
    public ?string $minAmount = null;
    
    /**
     * Minimum date
     * 
     * @var ?\DateTime $minDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $minDate = null;
    
    /**
     * Selects all items distributed by this committee after this date
     * 
     * @var ?\DateTime $minDisseminationDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_dissemination_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $minDisseminationDate = null;
    
    /**
     * 
     * Selects all filings received after this date
     * 
     * 
     * @var ?\DateTime $minFilingDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_filing_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $minFilingDate = null;
    
    /**
     * Minium image number of the page where the schedule item is reported
     * 
     * @var ?string $minImageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_image_number')]
    public ?string $minImageNumber = null;
    
    /**
     * 
     * The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
     * 
     * 
     * @var ?bool $mostRecent
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=most_recent')]
    public ?bool $mostRecent = null;
    
    /**
     * 
     * Name of the entity that received the payment.
     * 
     * 
     * @var ?array<string> $payeeName
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payee_name')]
    public ?array $payeeName = null;
    
    /**
     * The number of results returned per page. Defaults to 20.
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * 
     * Keyword search for spender name or ID
     * 
     * 
     * @var ?array<string> $qSpender
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=q_spender')]
    public ?array $qSpender = null;
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     * 
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * Hide null values on sorted column(s).
     * 
     * @var ?bool $sortHideNull
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_hide_null')]
    public ?bool $sortHideNull = null;
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     * 
     * @var ?bool $sortNullOnly
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_null_only')]
    public ?bool $sortNullOnly = null;
    
    /**
     * Toggle that sorts null values last
     * 
     * @var ?bool $sortNullsLast
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_nulls_last')]
    public ?bool $sortNullsLast = null;
    
    /**
     * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\GetSchedulesScheduleESupportOpposeIndicatorEnum> $supportOpposeIndicator
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=support_oppose_indicator')]
    public ?array $supportOpposeIndicator = null;
    
	public function __construct()
	{
		$this->apiKey = "";
		$this->candidateId = null;
		$this->candidateOffice = null;
		$this->candidateOfficeDistrict = null;
		$this->candidateOfficeState = null;
		$this->candidateParty = null;
		$this->committeeId = null;
		$this->cycle = null;
		$this->filingForm = null;
		$this->imageNumber = null;
		$this->isNotice = null;
		$this->lastExpenditureAmount = null;
		$this->lastExpenditureDate = null;
		$this->lastIndex = null;
		$this->lastOfficeTotalYtd = null;
		$this->lastSupportOpposeIndicator = null;
		$this->lineNumber = null;
		$this->maxAmount = null;
		$this->maxDate = null;
		$this->maxDisseminationDate = null;
		$this->maxFilingDate = null;
		$this->maxImageNumber = null;
		$this->minAmount = null;
		$this->minDate = null;
		$this->minDisseminationDate = null;
		$this->minFilingDate = null;
		$this->minImageNumber = null;
		$this->mostRecent = null;
		$this->payeeName = null;
		$this->perPage = null;
		$this->qSpender = null;
		$this->sort = null;
		$this->sortHideNull = null;
		$this->sortNullOnly = null;
		$this->sortNullsLast = null;
		$this->supportOpposeIndicator = null;
	}
}
