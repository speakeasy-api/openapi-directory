"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nullable_team_simple as shared_nullable_team_simple
from ..shared import organization_full as shared_organization_full
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TeamFullPrivacyEnum(str, Enum):
    r"""The level of privacy this team should have"""
    CLOSED = 'closed'
    SECRET = 'secret'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamFull:
    r"""Groups of organization members that gives permissions on specified repositories."""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the team"""  
    members_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_count') }})  
    members_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_url') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the team"""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    organization: shared_organization_full.OrganizationFull = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization') }})
    r"""Organization Full"""  
    permission: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})
    r"""Permission that the team will have for its repositories"""  
    repos_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_count') }})  
    repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories_url') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL for the team"""  
    ldap_dn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_dn'), 'exclude': lambda f: f is None }})
    r"""Distinguished Name (DN) that team maps to within LDAP environment"""  
    parent: Optional[shared_nullable_team_simple.NullableTeamSimple] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent'), 'exclude': lambda f: f is None }})
    r"""Groups of organization members that gives permissions on specified repositories."""  
    privacy: Optional[TeamFullPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The level of privacy this team should have"""  
    