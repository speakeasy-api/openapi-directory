/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PayableIssueV3 } from "./payableissuev3";
import { Expose, Transform, Type } from "class-transformer";

export class PayeePayorRefV3 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "invitationStatus" })
  invitationStatus?: string;

  /**
   * The timestamp when the invitation status is updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invitationStatusTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invitationStatusTimestamp?: Date;

  /**
   * Indicates any conditions which prevent the payee from being payable for this payor
   */
  @SpeakeasyMetadata({ elemType: PayableIssueV3 })
  @Expose({ name: "payableIssues" })
  @Type(() => PayableIssueV3)
  payableIssues?: PayableIssueV3[];

  /**
   * Indicates if the payee is payable for this payor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payableStatus" })
  payableStatus?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "paymentChannelId" })
  paymentChannelId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payorId" })
  payorId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "remoteId" })
  remoteId?: string;
}
