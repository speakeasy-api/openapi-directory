// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SetUserMFAPreferenceXAmzTargetEnum
type SetUserMFAPreferenceXAmzTargetEnum string

const (
	SetUserMFAPreferenceXAmzTargetEnumAwsCognitoIdentityProviderServiceSetUserMfaPreference SetUserMFAPreferenceXAmzTargetEnum = "AWSCognitoIdentityProviderService.SetUserMFAPreference"
)

func (e *SetUserMFAPreferenceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSCognitoIdentityProviderService.SetUserMFAPreference":
		*e = SetUserMFAPreferenceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SetUserMFAPreferenceXAmzTargetEnum: %s", s)
	}
}

type SetUserMFAPreferenceRequest struct {
	SetUserMFAPreferenceRequest shared.SetUserMFAPreferenceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  SetUserMFAPreferenceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SetUserMFAPreferenceResponse struct {
	ContentType string
	// ForbiddenException
	ForbiddenException interface{}
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// PasswordResetRequiredException
	PasswordResetRequiredException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SetUserMFAPreferenceResponse map[string]interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// UserNotConfirmedException
	UserNotConfirmedException interface{}
	// UserNotFoundException
	UserNotFoundException interface{}
}
