<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Reports all eligible verification options for a location in a specific language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsResponse
     */
	public function mybusinessverificationsLocationsFetchVerificationOptions(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{location}:fetchVerificationOptions', \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fetchVerificationOptionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsFetchVerificationOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchVerificationOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchVerificationOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the VoiceOfMerchant state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateResponse
     */
	public function mybusinessverificationsLocationsGetVoiceOfMerchantState(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/VoiceOfMerchantState', \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsGetVoiceOfMerchantStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceOfMerchantState = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceOfMerchantState', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteResponse
     */
	public function mybusinessverificationsLocationsVerificationsComplete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:complete', \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "completeVerificationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeVerificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteVerificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List verifications of a location, ordered by create time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListResponse
     */
	public function mybusinessverificationsLocationsVerificationsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/verifications', \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerificationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVerificationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVerificationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts the verification process for a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyResponse
     */
	public function mybusinessverificationsLocationsVerify(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:verify', \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "verifyLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessverificationsLocationsVerifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyLocationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyLocationResponse', 'json');
            }
        }

        return $response;
    }
}