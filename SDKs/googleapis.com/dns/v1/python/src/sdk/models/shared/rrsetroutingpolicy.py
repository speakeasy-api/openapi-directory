"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rrsetroutingpolicygeopolicy as shared_rrsetroutingpolicygeopolicy
from ..shared import rrsetroutingpolicyprimarybackuppolicy as shared_rrsetroutingpolicyprimarybackuppolicy
from ..shared import rrsetroutingpolicywrrpolicy as shared_rrsetroutingpolicywrrpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RRSetRoutingPolicy:
    r"""A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection."""
    
    geo: Optional[shared_rrsetroutingpolicygeopolicy.RRSetRoutingPolicyGeoPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo'), 'exclude': lambda f: f is None }})
    r"""Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    primary_backup: Optional[shared_rrsetroutingpolicyprimarybackuppolicy.RRSetRoutingPolicyPrimaryBackupPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryBackup'), 'exclude': lambda f: f is None }})
    r"""Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy."""  
    wrr: Optional[shared_rrsetroutingpolicywrrpolicy.RRSetRoutingPolicyWrrPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrr'), 'exclude': lambda f: f is None }})
    r"""Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion."""  
    