// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PlaylistItemDataType string

const (
	PlaylistItemDataTypeEpisodeSimple PlaylistItemDataType = "EpisodeSimple"
	PlaylistItemDataTypePodcastSimple PlaylistItemDataType = "PodcastSimple"
	PlaylistItemDataTypeCustomAudio   PlaylistItemDataType = "CustomAudio"
	PlaylistItemDataTypeDeletedItem   PlaylistItemDataType = "DeletedItem"
)

type PlaylistItemData struct {
	EpisodeSimple *EpisodeSimple
	PodcastSimple *PodcastSimple
	CustomAudio   *CustomAudio
	DeletedItem   *DeletedItem

	Type PlaylistItemDataType
}

func CreatePlaylistItemDataEpisodeSimple(episodeSimple EpisodeSimple) PlaylistItemData {
	typ := PlaylistItemDataTypeEpisodeSimple

	return PlaylistItemData{
		EpisodeSimple: &episodeSimple,
		Type:          typ,
	}
}

func CreatePlaylistItemDataPodcastSimple(podcastSimple PodcastSimple) PlaylistItemData {
	typ := PlaylistItemDataTypePodcastSimple

	return PlaylistItemData{
		PodcastSimple: &podcastSimple,
		Type:          typ,
	}
}

func CreatePlaylistItemDataCustomAudio(customAudio CustomAudio) PlaylistItemData {
	typ := PlaylistItemDataTypeCustomAudio

	return PlaylistItemData{
		CustomAudio: &customAudio,
		Type:        typ,
	}
}

func CreatePlaylistItemDataDeletedItem(deletedItem DeletedItem) PlaylistItemData {
	typ := PlaylistItemDataTypeDeletedItem

	return PlaylistItemData{
		DeletedItem: &deletedItem,
		Type:        typ,
	}
}

func (u *PlaylistItemData) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	episodeSimple := new(EpisodeSimple)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&episodeSimple); err == nil {
		u.EpisodeSimple = episodeSimple
		u.Type = PlaylistItemDataTypeEpisodeSimple
		return nil
	}

	podcastSimple := new(PodcastSimple)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&podcastSimple); err == nil {
		u.PodcastSimple = podcastSimple
		u.Type = PlaylistItemDataTypePodcastSimple
		return nil
	}

	customAudio := new(CustomAudio)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&customAudio); err == nil {
		u.CustomAudio = customAudio
		u.Type = PlaylistItemDataTypeCustomAudio
		return nil
	}

	deletedItem := new(DeletedItem)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&deletedItem); err == nil {
		u.DeletedItem = deletedItem
		u.Type = PlaylistItemDataTypeDeletedItem
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaylistItemData) MarshalJSON() ([]byte, error) {
	if u.EpisodeSimple != nil {
		return json.Marshal(u.EpisodeSimple)
	}

	if u.PodcastSimple != nil {
		return json.Marshal(u.PodcastSimple)
	}

	if u.CustomAudio != nil {
		return json.Marshal(u.CustomAudio)
	}

	if u.DeletedItem != nil {
		return json.Marshal(u.DeletedItem)
	}

	return nil, nil
}

// PlaylistItemTypeEnum - The type of this playlist item.
// If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**.
// If it's **podcast_list**, then an item can only be **podcast**.
type PlaylistItemTypeEnum string

const (
	PlaylistItemTypeEnumEpisode     PlaylistItemTypeEnum = "episode"
	PlaylistItemTypeEnumCustomAudio PlaylistItemTypeEnum = "custom_audio"
	PlaylistItemTypeEnumPodcast     PlaylistItemTypeEnum = "podcast"
)

func (e PlaylistItemTypeEnum) ToPointer() *PlaylistItemTypeEnum {
	return &e
}

func (e *PlaylistItemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "episode":
		fallthrough
	case "custom_audio":
		fallthrough
	case "podcast":
		*e = PlaylistItemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaylistItemTypeEnum: %v", v)
	}
}

// PlaylistItem - An item in a playlist
type PlaylistItem struct {
	// Timestamp (in milliseconds) when this item is added.
	AddedAtMs *int64            `json:"added_at_ms,omitempty"`
	Data      *PlaylistItemData `json:"data,omitempty"`
	// Playlist item id.
	ID *int64 `json:"id,omitempty"`
	// Notes for this item.
	Notes *string `json:"notes,omitempty"`
	// The type of this playlist item.
	// If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**.
	// If it's **podcast_list**, then an item can only be **podcast**.
	//
	Type *PlaylistItemTypeEnum `json:"type,omitempty"`
}
