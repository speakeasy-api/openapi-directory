// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EditAlbumSecurity struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// EditAlbumRequestBodyLayoutEnum - The type of layout for presenting the album.
type EditAlbumRequestBodyLayoutEnum string

const (
	EditAlbumRequestBodyLayoutEnumGrid   EditAlbumRequestBodyLayoutEnum = "grid"
	EditAlbumRequestBodyLayoutEnumPlayer EditAlbumRequestBodyLayoutEnum = "player"
)

func (e *EditAlbumRequestBodyLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "grid":
		fallthrough
	case "player":
		*e = EditAlbumRequestBodyLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumRequestBodyLayoutEnum: %s", s)
	}
}

// EditAlbumRequestBodyPrivacyEnum - The privacy level of the album.
type EditAlbumRequestBodyPrivacyEnum string

const (
	EditAlbumRequestBodyPrivacyEnumAnybody   EditAlbumRequestBodyPrivacyEnum = "anybody"
	EditAlbumRequestBodyPrivacyEnumEmbedOnly EditAlbumRequestBodyPrivacyEnum = "embed_only"
	EditAlbumRequestBodyPrivacyEnumPassword  EditAlbumRequestBodyPrivacyEnum = "password"
)

func (e *EditAlbumRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "embed_only":
		fallthrough
	case "password":
		*e = EditAlbumRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumRequestBodyPrivacyEnum: %s", s)
	}
}

// EditAlbumRequestBodySortEnum - The default sort order of the album's videos.
type EditAlbumRequestBodySortEnum string

const (
	EditAlbumRequestBodySortEnumAddedFirst   EditAlbumRequestBodySortEnum = "added_first"
	EditAlbumRequestBodySortEnumAddedLast    EditAlbumRequestBodySortEnum = "added_last"
	EditAlbumRequestBodySortEnumAlphabetical EditAlbumRequestBodySortEnum = "alphabetical"
	EditAlbumRequestBodySortEnumArranged     EditAlbumRequestBodySortEnum = "arranged"
	EditAlbumRequestBodySortEnumComments     EditAlbumRequestBodySortEnum = "comments"
	EditAlbumRequestBodySortEnumLikes        EditAlbumRequestBodySortEnum = "likes"
	EditAlbumRequestBodySortEnumNewest       EditAlbumRequestBodySortEnum = "newest"
	EditAlbumRequestBodySortEnumOldest       EditAlbumRequestBodySortEnum = "oldest"
	EditAlbumRequestBodySortEnumPlays        EditAlbumRequestBodySortEnum = "plays"
)

func (e *EditAlbumRequestBodySortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added_first":
		fallthrough
	case "added_last":
		fallthrough
	case "alphabetical":
		fallthrough
	case "arranged":
		fallthrough
	case "comments":
		fallthrough
	case "likes":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "plays":
		*e = EditAlbumRequestBodySortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumRequestBodySortEnum: %s", s)
	}
}

// EditAlbumRequestBodyThemeEnum - The color theme of the album.
type EditAlbumRequestBodyThemeEnum string

const (
	EditAlbumRequestBodyThemeEnumDark     EditAlbumRequestBodyThemeEnum = "dark"
	EditAlbumRequestBodyThemeEnumStandard EditAlbumRequestBodyThemeEnum = "standard"
)

func (e *EditAlbumRequestBodyThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark":
		fallthrough
	case "standard":
		*e = EditAlbumRequestBodyThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumRequestBodyThemeEnum: %s", s)
	}
}

type EditAlbumRequestBody struct {
	// The hexadecimal code for the color of the player buttons.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the album.
	Description *string `json:"description,omitempty"`
	// The custom domain a user has selected for their album.
	Domain *string `json:"domain,omitempty"`
	// Whether to hide Vimeo navigation when displaying the album.
	HideNav *bool `json:"hide_nav,omitempty"`
	// The type of layout for presenting the album.
	Layout *EditAlbumRequestBodyLayoutEnum `json:"layout,omitempty"`
	// The name of the album.
	Name *string `json:"name,omitempty"`
	// The album's password. Required only if **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the album.
	Privacy *EditAlbumRequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// Whether album videos should use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the album's videos.
	Sort *EditAlbumRequestBodySortEnum `json:"sort,omitempty"`
	// The color theme of the album.
	Theme *EditAlbumRequestBodyThemeEnum `json:"theme,omitempty"`
	// The custom Vimeo URL a user has selected for their album.
	URL *string `json:"url,omitempty"`
	// Whether the user has opted in to use a custom domain for their album.
	UseCustomDomain *bool `json:"use_custom_domain,omitempty"`
}

type EditAlbumRequest struct {
	RequestBody *EditAlbumRequestBody `request:"mediaType=application/vnd.vimeo.album+json"`
	// The ID of the album.
	AlbumID float64 `pathParam:"style=simple,explode=false,name=album_id"`
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type EditAlbumResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The album was edited.
	Album *shared.Album
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
