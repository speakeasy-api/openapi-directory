"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createexperimenttemplateactioninput as shared_createexperimenttemplateactioninput
from ..shared import createexperimenttemplateresponse as shared_createexperimenttemplateresponse
from ..shared import createexperimenttemplatestopconditioninput as shared_createexperimenttemplatestopconditioninput
from ..shared import createexperimenttemplatetargetinput as shared_createexperimenttemplatetargetinput
from ..shared import experimenttemplatecloudwatchlogslogconfigurationinput as shared_experimenttemplatecloudwatchlogslogconfigurationinput
from ..shared import experimenttemplates3logconfigurationinput as shared_experimenttemplates3logconfigurationinput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateExperimentTemplateRequestBodyLogConfiguration:
    r"""Specifies the configuration for experiment logging."""
    
    cloud_watch_logs_configuration: Optional[shared_experimenttemplatecloudwatchlogslogconfigurationinput.ExperimentTemplateCloudWatchLogsLogConfigurationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudWatchLogsConfiguration'), 'exclude': lambda f: f is None }})  
    log_schema_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logSchemaVersion'), 'exclude': lambda f: f is None }})  
    s3_configuration: Optional[shared_experimenttemplates3logconfigurationinput.ExperimentTemplateS3LogConfigurationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Configuration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateExperimentTemplateRequestBody:
    
    actions: dict[str, shared_createexperimenttemplateactioninput.CreateExperimentTemplateActionInput] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})
    r"""The actions for the experiment."""  
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description for the experiment template."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf."""  
    stop_conditions: list[shared_createexperimenttemplatestopconditioninput.CreateExperimentTemplateStopConditionInput] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopConditions') }})
    r"""The stop conditions."""  
    log_configuration: Optional[CreateExperimentTemplateRequestBodyLogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logConfiguration'), 'exclude': lambda f: f is None }})
    r"""Specifies the configuration for experiment logging."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags to apply to the experiment template."""  
    targets: Optional[dict[str, shared_createexperimenttemplatetargetinput.CreateExperimentTemplateTargetInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})
    r"""The targets for the experiment."""  
    

@dataclasses.dataclass
class CreateExperimentTemplateRequest:
    
    request_body: CreateExperimentTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateExperimentTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_experiment_template_response: Optional[shared_createexperimenttemplateresponse.CreateExperimentTemplateResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    