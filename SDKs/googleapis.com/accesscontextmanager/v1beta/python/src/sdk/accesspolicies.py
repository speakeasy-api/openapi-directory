"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccessPolicies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def accesscontextmanager_access_policies_access_levels_create(self, request: operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest, security: operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity) -> operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse:
        r"""Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest, base_url, '/v1beta/{parent}/accessLevels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "access_level", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def accesscontextmanager_access_policies_access_levels_list(self, request: operations.AccesscontextmanagerAccessPoliciesAccessLevelsListRequest, security: operations.AccesscontextmanagerAccessPoliciesAccessLevelsListSecurity) -> operations.AccesscontextmanagerAccessPoliciesAccessLevelsListResponse:
        r"""List all Access Levels for an access policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesAccessLevelsListRequest, base_url, '/v1beta/{parent}/accessLevels', request)
        
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesAccessLevelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesAccessLevelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccessLevelsResponse])
                res.list_access_levels_response = out

        return res

    def accesscontextmanager_access_policies_create(self, request: operations.AccesscontextmanagerAccessPoliciesCreateRequest, security: operations.AccesscontextmanagerAccessPoliciesCreateSecurity) -> operations.AccesscontextmanagerAccessPoliciesCreateResponse:
        r"""Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta/accessPolicies'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "access_policy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def accesscontextmanager_access_policies_list(self, request: operations.AccesscontextmanagerAccessPoliciesListRequest, security: operations.AccesscontextmanagerAccessPoliciesListSecurity) -> operations.AccesscontextmanagerAccessPoliciesListResponse:
        r"""List all AccessPolicies under a container."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta/accessPolicies'
        
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccessPoliciesResponse])
                res.list_access_policies_response = out

        return res

    def accesscontextmanager_access_policies_service_perimeters_create(self, request: operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest, security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateSecurity) -> operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse:
        r"""Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest, base_url, '/v1beta/{parent}/servicePerimeters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_perimeter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def accesscontextmanager_access_policies_service_perimeters_delete(self, request: operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest, security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteSecurity) -> operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse:
        r"""Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def accesscontextmanager_access_policies_service_perimeters_list(self, request: operations.AccesscontextmanagerAccessPoliciesServicePerimetersListRequest, security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersListSecurity) -> operations.AccesscontextmanagerAccessPoliciesServicePerimetersListResponse:
        r"""List all Service Perimeters for an access policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesServicePerimetersListRequest, base_url, '/v1beta/{parent}/servicePerimeters', request)
        
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesServicePerimetersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesServicePerimetersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServicePerimetersResponse])
                res.list_service_perimeters_response = out

        return res

    def accesscontextmanager_access_policies_service_perimeters_patch(self, request: operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest, security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchSecurity) -> operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse:
        r"""Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest, base_url, '/v1beta/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_perimeter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    