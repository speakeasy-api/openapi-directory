"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ComputeNodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def compute_node_add_user(self, request: operations.ComputeNodeAddUserRequest) -> operations.ComputeNodeAddUserResponse:
        r"""Adds a user account to the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeAddUserRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/users', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "compute_node_user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ComputeNodeAddUserRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeAddUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_delete_user(self, request: operations.ComputeNodeDeleteUserRequest) -> operations.ComputeNodeDeleteUserResponse:
        r"""Deletes a user account from the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeDeleteUserRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/users/{userName}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeDeleteUserRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeDeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_disable_scheduling(self, request: operations.ComputeNodeDisableSchedulingRequest) -> operations.ComputeNodeDisableSchedulingResponse:
        r"""Disable task scheduling of the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeDisableSchedulingRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/disablescheduling', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "node_disable_scheduling_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComputeNodeDisableSchedulingRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeDisableSchedulingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_enable_scheduling(self, request: operations.ComputeNodeEnableSchedulingRequest) -> operations.ComputeNodeEnableSchedulingResponse:
        r"""Enable task scheduling of the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeEnableSchedulingRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/enablescheduling', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeEnableSchedulingRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeEnableSchedulingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_get(self, request: operations.ComputeNodeGetRequest) -> operations.ComputeNodeGetResponse:
        r"""Gets information about the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeGetRequest, base_url, '/pools/{poolId}/nodes/{nodeId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ComputeNode])
                res.compute_node = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_get_remote_desktop(self, request: operations.ComputeNodeGetRemoteDesktopRequest) -> operations.ComputeNodeGetRemoteDesktopResponse:
        r"""Gets the Remote Desktop Protocol file for the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeGetRemoteDesktopRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/rdp', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeGetRemoteDesktopRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeGetRemoteDesktopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.compute_node_get_remote_desktop_200_application_json_binary_string = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_get_remote_login_settings(self, request: operations.ComputeNodeGetRemoteLoginSettingsRequest) -> operations.ComputeNodeGetRemoteLoginSettingsResponse:
        r"""Gets the settings required for remote login to a compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeGetRemoteLoginSettingsRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/remoteloginsettings', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeGetRemoteLoginSettingsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeGetRemoteLoginSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ComputeNodeGetRemoteLoginSettingsResult])
                res.compute_node_get_remote_login_settings_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_list(self, request: operations.ComputeNodeListRequest) -> operations.ComputeNodeListResponse:
        r"""Lists the compute nodes in the specified pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeListRequest, base_url, '/pools/{poolId}/nodes', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ComputeNodeListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ComputeNodeListResult])
                res.compute_node_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_reboot(self, request: operations.ComputeNodeRebootRequest) -> operations.ComputeNodeRebootResponse:
        r"""Restarts the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeRebootRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/reboot', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "node_reboot_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComputeNodeRebootRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeRebootResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_reimage(self, request: operations.ComputeNodeReimageRequest) -> operations.ComputeNodeReimageResponse:
        r"""Reinstalls the operating system on the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeReimageRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/reimage', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "node_reimage_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComputeNodeReimageRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeReimageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def compute_node_update_user(self, request: operations.ComputeNodeUpdateUserRequest) -> operations.ComputeNodeUpdateUserResponse:
        r"""Updates the password or expiration time of a user account on the specified compute node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComputeNodeUpdateUserRequest, base_url, '/pools/{poolId}/nodes/{nodeId}/users/{userName}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "node_update_user_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ComputeNodeUpdateUserRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComputeNodeUpdateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def pool_remove_nodes(self, request: operations.PoolRemoveNodesRequest) -> operations.PoolRemoveNodesResponse:
        r"""Removes compute nodes from the specified pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PoolRemoveNodesRequest, base_url, '/pools/{poolId}/removenodes', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "node_remove_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PoolRemoveNodesRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PoolRemoveNodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    