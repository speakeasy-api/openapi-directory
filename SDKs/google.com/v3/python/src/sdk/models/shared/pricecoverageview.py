"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from ..shared import pricecoveragebucket as shared_pricecoveragebucket
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PriceCoverageView:
    r"""A price coverage view. Covers the `price_coverage_stats` Scorecard functionality in pre-v3.0 API versions. For more information, refer to Price Coverage for Push and Hint partners."""
    
    calculation_date: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculationDate'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    matched_property_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedPropertyCount'), 'exclude': lambda f: f is None }})
    r"""The total number of properties that have prices for the given itineraries."""  
    price_coverage_binary_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceCoverageBinaryPercent'), 'exclude': lambda f: f is None }})
    r"""The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`."""  
    price_coverage_buckets: Optional[list[shared_pricecoveragebucket.PriceCoverageBucket]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceCoverageBuckets'), 'exclude': lambda f: f is None }})
    r"""Price coverage stats for combinations of advance booking window and length of stay ranges."""  
    price_coverage_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceCoveragePercent'), 'exclude': lambda f: f is None }})
    r"""The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay)."""  
    