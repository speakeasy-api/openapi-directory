"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import betweenfilter as shared_betweenfilter
from ..shared import inlistfilter as shared_inlistfilter
from ..shared import numericfilter as shared_numericfilter
from ..shared import stringfilter as shared_stringfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""An expression to filter dimension or metric values."""
    
    between_filter: Optional[shared_betweenfilter.BetweenFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('betweenFilter'), 'exclude': lambda f: f is None }})
    r"""To express that the result needs to be between two numbers (inclusive)."""  
    field_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldName'), 'exclude': lambda f: f is None }})
    r"""The dimension name or metric name. In most methods, dimensions & metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest's dimensions or metrics."""  
    in_list_filter: Optional[shared_inlistfilter.InListFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inListFilter'), 'exclude': lambda f: f is None }})
    r"""The result needs to be in a list of string values."""  
    numeric_filter: Optional[shared_numericfilter.NumericFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numericFilter'), 'exclude': lambda f: f is None }})
    r"""Filters for numeric or date values."""  
    string_filter: Optional[shared_stringfilter.StringFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringFilter'), 'exclude': lambda f: f is None }})
    r"""The filter for string"""  
    