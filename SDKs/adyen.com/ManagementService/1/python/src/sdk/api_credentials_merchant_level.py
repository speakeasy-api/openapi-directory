"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class APICredentialsMerchantLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_merchants_merchant_id_api_credentials(self, request: operations.GetMerchantsMerchantIDAPICredentialsRequest, security: operations.GetMerchantsMerchantIDAPICredentialsSecurity) -> operations.GetMerchantsMerchantIDAPICredentialsResponse:
        r"""Get a list of API credentials
        Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—API credentials read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDAPICredentialsRequest, base_url, '/merchants/{merchantId}/apiCredentials', request)
        
        query_params = utils.get_query_params(operations.GetMerchantsMerchantIDAPICredentialsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDAPICredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMerchantAPICredentialsResponse])
                res.list_merchant_api_credentials_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_api_credentials_api_credential_id(self, request: operations.GetMerchantsMerchantIDAPICredentialsAPICredentialIDRequest, security: operations.GetMerchantsMerchantIDAPICredentialsAPICredentialIDSecurity) -> operations.GetMerchantsMerchantIDAPICredentialsAPICredentialIDResponse:
        r"""Get an API credential
        Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—API credentials read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDAPICredentialsAPICredentialIDRequest, base_url, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDAPICredentialsAPICredentialIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICredential])
                res.api_credential = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_merchants_merchant_id_api_credentials_api_credential_id(self, request: operations.PatchMerchantsMerchantIDAPICredentialsAPICredentialIDRequest, security: operations.PatchMerchantsMerchantIDAPICredentialsAPICredentialIDSecurity) -> operations.PatchMerchantsMerchantIDAPICredentialsAPICredentialIDResponse:
        r"""Update an API credential
        Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request. 
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—API credentials read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMerchantsMerchantIDAPICredentialsAPICredentialIDRequest, base_url, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_merchant_api_credential_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMerchantsMerchantIDAPICredentialsAPICredentialIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICredential])
                res.api_credential = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_api_credentials(self, request: operations.PostMerchantsMerchantIDAPICredentialsRequest, security: operations.PostMerchantsMerchantIDAPICredentialsSecurity) -> operations.PostMerchantsMerchantIDAPICredentialsResponse:
        r"""Create an API credential
        Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.
        
        The response includes the:
        * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.
        * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.
        * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.
        
        > Make sure you store the API key securely in your system. You won't be able to retrieve it later.
        
        If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—API credentials read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDAPICredentialsRequest, base_url, '/merchants/{merchantId}/apiCredentials', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_merchant_api_credential_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDAPICredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateAPICredentialResponse])
                res.create_api_credential_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    