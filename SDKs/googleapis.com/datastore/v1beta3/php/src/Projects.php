<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse
     */
	public function datastoreProjectsAllocateIds(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:allocateIds', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "allocateIdsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allocateIdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllocateIdsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins a new transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse
     */
	public function datastoreProjectsBeginTransaction(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:beginTransaction', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "beginTransactionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beginTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeginTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse
     */
	public function datastoreProjectsCommit(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:commit', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up entities by key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse
     */
	public function datastoreProjectsLookup(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:lookup', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "lookupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse
     */
	public function datastoreProjectsReserveIds(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:reserveIds', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reserveIdsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reserveIdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rolls back a transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse
     */
	public function datastoreProjectsRollback(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:rollback', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rollbackResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs an aggregation query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse
     */
	public function datastoreProjectsRunAggregationQuery(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:runAggregationQuery', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runAggregationQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runAggregationQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunAggregationQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Queries for entities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse
     */
	public function datastoreProjectsRunQuery(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/projects/{projectId}:runQuery', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunQueryResponse', 'json');
            }
        }

        return $response;
    }
}