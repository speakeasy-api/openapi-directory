"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetNetworksRequest:
    
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter networks by labels. The response will only contain networks with a matching label selector pattern."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter networks by their name. The response will only contain the networks matching the specified name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONMeta:
    
    pagination: GetNetworks200ApplicationJSONMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONNetworksProtection:
    r"""Protection configuration for the Network"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Network from being deleted"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONNetworksRoutes:
    
    destination: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination') }})
    r"""Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918."""  
    gateway: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway') }})
    r"""Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers."""  
    
class GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum(str, Enum):
    r"""Type of Subnetwork"""
    CLOUD = 'cloud'
    SERVER = 'server'
    VSWITCH = 'vswitch'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONNetworksSubnets:
    
    gateway: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway') }})
    r"""Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range."""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of Network zone. The Location object contains the `network_zone` property each Location belongs to."""  
    type: GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of Subnetwork"""  
    ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range'), 'exclude': lambda f: f is None }})
    r"""Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSONNetworks:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Network was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Network"""  
    ip_range: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range') }})
    r"""IPv4 prefix of the whole Network"""  
    labels: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Network"""  
    protection: GetNetworks200ApplicationJSONNetworksProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Network"""  
    routes: list[GetNetworks200ApplicationJSONNetworksRoutes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes') }})
    r"""Array of routes set in this Network"""  
    servers: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servers') }})
    r"""Array of IDs of Servers attached to this Network"""  
    subnets: list[GetNetworks200ApplicationJSONNetworksSubnets] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets') }})
    r"""Array subnets allocated in this Network"""  
    load_balancers: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_balancers'), 'exclude': lambda f: f is None }})
    r"""Array of IDs of Load Balancers attached to this Network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworks200ApplicationJSON:
    r"""The `networks` key contains a list of networks"""
    
    networks: list[GetNetworks200ApplicationJSONNetworks] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks') }})  
    meta: Optional[GetNetworks200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetNetworksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_networks_200_application_json_object: Optional[GetNetworks200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `networks` key contains a list of networks"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    