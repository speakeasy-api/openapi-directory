<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Namespaces 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List authorized domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListResponse
     */
	public function runNamespacesAuthorizeddomainsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/domains.cloudrun.com/v1/{parent}/authorizeddomains', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesAuthorizeddomainsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizedDomainsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAuthorizedDomainsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListResponse
     */
	public function runNamespacesConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{parent}/configurations', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConfigurationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConfigurationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new domain mapping.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateResponse
     */
	public function runNamespacesDomainmappingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/domains.cloudrun.com/v1/{parent}/domainmappings', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domainMapping", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DomainMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a domain mapping.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteResponse
     */
	public function runNamespacesDomainmappingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/domains.cloudrun.com/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about a domain mapping.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetResponse
     */
	public function runNamespacesDomainmappingsGet(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/domains.cloudrun.com/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DomainMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all domain mappings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListResponse
     */
	public function runNamespacesDomainmappingsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/domains.cloudrun.com/v1/{parent}/domainmappings', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesDomainmappingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDomainMappingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDomainMappingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel an execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelResponse
     */
	public function runNamespacesExecutionsCancel(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->execution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Execution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List executions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListResponse
     */
	public function runNamespacesExecutionsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesExecutionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateResponse
     */
	public function runNamespacesJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "job", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteResponse
     */
	public function runNamespacesJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListResponse
     */
	public function runNamespacesJobsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace a job. Only the spec and metadata labels and annotations are modifiable. After the Replace request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobResponse
     */
	public function runNamespacesJobsReplaceJob(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "job", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsReplaceJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trigger creation of a new execution of this job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunResponse
     */
	public function runNamespacesJobsRun(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesJobsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->execution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Execution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List revisions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListResponse
     */
	public function runNamespacesRevisionsList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{parent}/revisions', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRevisionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List routes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListResponse
     */
	public function runNamespacesRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{parent}/routes', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateResponse
     */
	public function runNamespacesServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteResponse
     */
	public function runNamespacesServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetResponse
     */
	public function runNamespacesServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists services for the given project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListResponse
     */
	public function runNamespacesServicesList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceResponse
     */
	public function runNamespacesServicesReplaceService(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/serving.knative.dev/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesServicesReplaceServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about a task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetResponse
     */
	public function runNamespacesTasksGet(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List tasks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListResponse
     */
	public function runNamespacesTasksList(
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/run.googleapis.com/v1/{parent}/tasks', \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunNamespacesTasksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTasksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTasksResponse', 'json');
            }
        }

        return $response;
    }
}