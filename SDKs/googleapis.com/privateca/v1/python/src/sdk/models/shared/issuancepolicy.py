"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allowedkeytype as shared_allowedkeytype
from ..shared import certificateextensionconstraints as shared_certificateextensionconstraints
from ..shared import certificateidentityconstraints as shared_certificateidentityconstraints
from ..shared import issuancemodes as shared_issuancemodes
from ..shared import x509parameters as shared_x509parameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IssuancePolicy:
    r"""Defines controls over all certificate issuance within a CaPool."""
    
    allowed_issuance_modes: Optional[shared_issuancemodes.IssuanceModes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIssuanceModes'), 'exclude': lambda f: f is None }})
    r"""IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool."""  
    allowed_key_types: Optional[list[shared_allowedkeytype.AllowedKeyType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedKeyTypes'), 'exclude': lambda f: f is None }})
    r"""Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used."""  
    baseline_values: Optional[shared_x509parameters.X509Parameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baselineValues'), 'exclude': lambda f: f is None }})
    r"""An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions."""  
    identity_constraints: Optional[shared_certificateidentityconstraints.CertificateIdentityConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityConstraints'), 'exclude': lambda f: f is None }})
    r"""Describes constraints on a Certificate's Subject and SubjectAltNames."""  
    maximum_lifetime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumLifetime'), 'exclude': lambda f: f is None }})
    r"""Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it."""  
    passthrough_extensions: Optional[shared_certificateextensionconstraints.CertificateExtensionConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passthroughExtensions'), 'exclude': lambda f: f is None }})
    r"""Describes a set of X.509 extensions that may be part of some certificate issuance controls."""  
    