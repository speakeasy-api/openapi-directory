// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum - Co-term licensing only: either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. Does not apply to organizations using per-device licensing model.
type ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum string

const (
	ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnumAddDevices ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum = "addDevices"
	ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnumRenew      ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum = "renew"
)

func (e ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum) ToPointer() *ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum {
	return &e
}

func (e *ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "addDevices":
		fallthrough
	case "renew":
		*e = ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum: %v", v)
	}
}

type ClaimIntoOrganizationInventoryRequestBodyLicenses struct {
	// The key of the license
	Key string `json:"key"`
	// Co-term licensing only: either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. Does not apply to organizations using per-device licensing model.
	Mode *ClaimIntoOrganizationInventoryRequestBodyLicensesModeEnum `json:"mode,omitempty"`
}

type ClaimIntoOrganizationInventoryRequestBody struct {
	// The licenses that should be claimed
	Licenses []ClaimIntoOrganizationInventoryRequestBodyLicenses `json:"licenses,omitempty"`
	// The numbers of the orders that should be claimed
	Orders []string `json:"orders,omitempty"`
	// The serials of the devices that should be claimed
	Serials []string `json:"serials,omitempty"`
}

type ClaimIntoOrganizationInventoryRequest struct {
	RequestBody    *ClaimIntoOrganizationInventoryRequestBody `request:"mediaType=application/json"`
	OrganizationID string                                     `pathParam:"style=simple,explode=false,name=organizationId"`
}

type ClaimIntoOrganizationInventoryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	ClaimIntoOrganizationInventory200ApplicationJSONObject map[string]interface{}
}
