// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BatchResponseSubscriptionResponseStatusEnum string

const (
	BatchResponseSubscriptionResponseStatusEnumPending    BatchResponseSubscriptionResponseStatusEnum = "PENDING"
	BatchResponseSubscriptionResponseStatusEnumProcessing BatchResponseSubscriptionResponseStatusEnum = "PROCESSING"
	BatchResponseSubscriptionResponseStatusEnumCanceled   BatchResponseSubscriptionResponseStatusEnum = "CANCELED"
	BatchResponseSubscriptionResponseStatusEnumComplete   BatchResponseSubscriptionResponseStatusEnum = "COMPLETE"
)

func (e BatchResponseSubscriptionResponseStatusEnum) ToPointer() *BatchResponseSubscriptionResponseStatusEnum {
	return &e
}

func (e *BatchResponseSubscriptionResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETE":
		*e = BatchResponseSubscriptionResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseSubscriptionResponseStatusEnum: %v", v)
	}
}

// BatchResponseSubscriptionResponse - successful operation
type BatchResponseSubscriptionResponse struct {
	CompletedAt time.Time                                   `json:"completedAt"`
	Links       map[string]string                           `json:"links,omitempty"`
	RequestedAt *time.Time                                  `json:"requestedAt,omitempty"`
	Results     []SubscriptionResponse                      `json:"results"`
	StartedAt   time.Time                                   `json:"startedAt"`
	Status      BatchResponseSubscriptionResponseStatusEnum `json:"status"`
}
