"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Translate:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_languages(self) -> operations.GetLanguagesResponse:
        r"""Retrieve list of supported languages"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/languages'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLanguagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_detect(self, request: str) -> operations.PostDetectResponse:
        r"""Detect the language of a single text"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/detect'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDetectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 403, 429, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_translate(self, request: str) -> operations.PostTranslateResponse:
        r"""Translate text from a language to another"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/translate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTranslateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 403, 429, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_translate_file(self, request: str) -> operations.PostTranslateFileResponse:
        r"""Translate file from a language to another"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/translate_file'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTranslateFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 403, 429, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    