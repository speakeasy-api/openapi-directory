// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposSetTeamAccessRestrictionsRequestBody1 struct {
	// The slug values for teams
	Teams []string `json:"teams"`
}

type ReposSetTeamAccessRestrictionsRequestBodyType string

const (
	ReposSetTeamAccessRestrictionsRequestBodyTypeReposSetTeamAccessRestrictionsRequestBody1 ReposSetTeamAccessRestrictionsRequestBodyType = "repos/set-team-access-restrictions_requestBody_1"
	ReposSetTeamAccessRestrictionsRequestBodyTypeArrayOfstr                                 ReposSetTeamAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposSetTeamAccessRestrictionsRequestBody struct {
	ReposSetTeamAccessRestrictionsRequestBody1 *ReposSetTeamAccessRestrictionsRequestBody1
	ArrayOfstr                                 []string

	Type ReposSetTeamAccessRestrictionsRequestBodyType
}

func CreateReposSetTeamAccessRestrictionsRequestBodyReposSetTeamAccessRestrictionsRequestBody1(reposSetTeamAccessRestrictionsRequestBody1 ReposSetTeamAccessRestrictionsRequestBody1) ReposSetTeamAccessRestrictionsRequestBody {
	typ := ReposSetTeamAccessRestrictionsRequestBodyTypeReposSetTeamAccessRestrictionsRequestBody1

	return ReposSetTeamAccessRestrictionsRequestBody{
		ReposSetTeamAccessRestrictionsRequestBody1: &reposSetTeamAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposSetTeamAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposSetTeamAccessRestrictionsRequestBody {
	typ := ReposSetTeamAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposSetTeamAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposSetTeamAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposSetTeamAccessRestrictionsRequestBody1 := new(ReposSetTeamAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposSetTeamAccessRestrictionsRequestBody1); err == nil {
		u.ReposSetTeamAccessRestrictionsRequestBody1 = reposSetTeamAccessRestrictionsRequestBody1
		u.Type = ReposSetTeamAccessRestrictionsRequestBodyTypeReposSetTeamAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposSetTeamAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposSetTeamAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposSetTeamAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposSetTeamAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposSetTeamAccessRestrictionsRequest struct {
	RequestBody *ReposSetTeamAccessRestrictionsRequestBody `request:"mediaType=application/json"`
	// The name of the branch.
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposSetTeamAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Teams []shared.Team
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
