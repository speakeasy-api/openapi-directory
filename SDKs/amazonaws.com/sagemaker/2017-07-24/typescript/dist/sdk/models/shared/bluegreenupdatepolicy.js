"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlueGreenUpdatePolicy = void 0;
var utils_1 = require("../../../internal/utils");
var trafficroutingconfig_1 = require("./trafficroutingconfig");
var class_transformer_1 = require("class-transformer");
/**
 * Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
 */
var BlueGreenUpdatePolicy = /** @class */ (function (_super) {
    __extends(BlueGreenUpdatePolicy, _super);
    function BlueGreenUpdatePolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MaximumExecutionTimeoutInSeconds" }),
        __metadata("design:type", Number)
    ], BlueGreenUpdatePolicy.prototype, "maximumExecutionTimeoutInSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TerminationWaitInSeconds" }),
        __metadata("design:type", Number)
    ], BlueGreenUpdatePolicy.prototype, "terminationWaitInSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TrafficRoutingConfiguration" }),
        (0, class_transformer_1.Type)(function () { return trafficroutingconfig_1.TrafficRoutingConfig; }),
        __metadata("design:type", trafficroutingconfig_1.TrafficRoutingConfig)
    ], BlueGreenUpdatePolicy.prototype, "trafficRoutingConfiguration", void 0);
    return BlueGreenUpdatePolicy;
}(utils_1.SpeakeasyBase));
exports.BlueGreenUpdatePolicy = BlueGreenUpdatePolicy;
