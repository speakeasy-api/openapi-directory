// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DiagnosticLevelEnum - Level to record this diagnostic.
type DiagnosticLevelEnum string

const (
	DiagnosticLevelEnumUnknown     DiagnosticLevelEnum = "UNKNOWN"
	DiagnosticLevelEnumInformation DiagnosticLevelEnum = "INFORMATION"
	DiagnosticLevelEnumWarning     DiagnosticLevelEnum = "WARNING"
	DiagnosticLevelEnumError       DiagnosticLevelEnum = "ERROR"
)

func (e DiagnosticLevelEnum) ToPointer() *DiagnosticLevelEnum {
	return &e
}

func (e *DiagnosticLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "INFORMATION":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = DiagnosticLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiagnosticLevelEnum: %v", v)
	}
}

type Diagnostic struct {
	// JsonPath expression on the resource that if non empty, indicates that this field needs to be extracted as a diagnostic.
	Field *string `json:"field,omitempty"`
	// Level to record this diagnostic.
	Level *DiagnosticLevelEnum `json:"level,omitempty"`
}
