"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Card:
    r"""Represents the payment details of a card to be used for payments. These
    details are determined by the payment token generated by Web Payments SDK.
    """
    
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    bin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
    returns this field.
    """  
    card_brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_brand'), 'exclude': lambda f: f is None }})
    r"""The card's brand."""  
    card_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_type'), 'exclude': lambda f: f is None }})
    r"""The type of the card.
    The Card object includes this field only in response to Payments API calls.
    """  
    cardholder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardholder_name'), 'exclude': lambda f: f is None }})
    r"""The name of the cardholder."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The ID of a customer created using the Customers API to be associated with the card."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a card can be used for payments."""  
    exp_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_month'), 'exclude': lambda f: f is None }})
    r"""The expiration month of the associated card as an integer between 1 and 12."""  
    exp_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_year'), 'exclude': lambda f: f is None }})
    r"""The four-digit year of the card's expiration date."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""__Not currently set.__ Intended as a Square-assigned identifier, based
    on the card number, to identify the card across multiple locations within a
    single application.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique ID for this card. Generated by Square."""  
    last_4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_4'), 'exclude': lambda f: f is None }})
    r"""The last 4 digits of the card number."""  
    prepaid_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaid_type'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the Card is prepaid or not.
    The Card object includes this field only in response to Payments API calls.
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional user-defined reference ID that associates this card with
    another entity in an external system. For example, a customer ID from an
    external customer management system.
    """  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Current version number of the card. Increments with each card update. Requests to update an
    existing Card object will be rejected unless the version in the request matches the current
    version for the Card.
    """  
    