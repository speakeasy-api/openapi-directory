/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * CreatePaymentType - Container for custom fields of a Payment object.
 * 
 */
public class CreatePaymentType {
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public CreatePaymentType withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public CreatePaymentType withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public CreatePaymentType withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     * Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public CreatePaymentType withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Transaction__NS")
    public String transactionNS;
    public CreatePaymentType withTransactionNS(String transactionNS) {
        this.transactionNS = transactionNS;
        return this;
    }
    
    /**
     * The ID of the customer account that the payment is created for.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public CreatePaymentType withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The total amount of the payment.
     * 
     */
    @JsonProperty("amount")
    public Double amount;
    public CreatePaymentType withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.
     * 
     * When capturing the authorized funds after authorization enablement, `authTransactionId` must be used together with `gatewayOrderId`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTransactionId")
    public String authTransactionId;
    public CreatePaymentType withAuthTransactionId(String authTransactionId) {
        this.authTransactionId = authTransactionId;
        return this;
    }
    
    /**
     * Additional information related to the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public CreatePaymentType withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
     * 
     * When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
     * 
     */
    @JsonProperty("currency")
    public String currency;
    public CreatePaymentType withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Container for debit memos. The maximum number of debit memos is 1,000.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debitMemos")
    public PaymentDebitMemoApplicationCreateRequestType[] debitMemos;
    public CreatePaymentType withDebitMemos(PaymentDebitMemoApplicationCreateRequestType[] debitMemos) {
        this.debitMemos = debitMemos;
        return this;
    }
    
    /**
     * The date when the payment takes effect, in `yyyy-mm-dd` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("effectiveDate")
    public LocalDate effectiveDate;
    public CreatePaymentType withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * Container for the finance information related to the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public CreatePaymentTypeFinanceInformation financeInformation;
    public CreatePaymentType withFinanceInformation(CreatePaymentTypeFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method. 
     * 
     * - When creating electronic payments, this field is required. 
     * - When creating external payments, this field is optional.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayId")
    public String gatewayId;
    public CreatePaymentType withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }
    
    /**
     * The field used to pass gateway-specific parameters and parameter values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayOptions")
    public CreatePaymentTypeGatewayOptions gatewayOptions;
    public CreatePaymentType withGatewayOptions(CreatePaymentTypeGatewayOptions gatewayOptions) {
        this.gatewayOptions = gatewayOptions;
        return this;
    }
    
    /**
     * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
     * 
     * Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.
     * 
     * When capturing the authorized funds after authorization enablement, `gatewayOrderId` must be used together with `authTransactionId`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayOrderId")
    public String gatewayOrderId;
    public CreatePaymentType withGatewayOrderId(String gatewayOrderId) {
        this.gatewayOrderId = gatewayOrderId;
        return this;
    }
    
    /**
     * Container for invoices. The maximum number of invoices is 1,000.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoices")
    public PaymentInvoiceApplicationCreateRequestType[] invoices;
    public CreatePaymentType withInvoices(PaymentInvoiceApplicationCreateRequestType[] invoices) {
        this.invoices = invoices;
        return this;
    }
    
    /**
     * Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
     *   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
     *   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
     *   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitTransactionSource")
    public CreatePaymentTypeMitTransactionSourceEnum mitTransactionSource;
    public CreatePaymentType withMitTransactionSource(CreatePaymentTypeMitTransactionSourceEnum mitTransactionSource) {
        this.mitTransactionSource = mitTransactionSource;
        return this;
    }
    
    /**
     * The unique ID of the payment method that the customer used to make the payment. 
     * 
     * If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodId")
    public String paymentMethodId;
    public CreatePaymentType withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public String referenceId;
    public CreatePaymentType withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptor")
    public String softDescriptor;
    public CreatePaymentType withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptorPhone")
    public String softDescriptorPhone;
    public CreatePaymentType withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * This field is only available if support for standalone payments is enabled.
     * 
     * Specify `true` to create a standalone payment that will be processed in Zuora through Zuora gateway integration but will be settled outside of Zuora.
     * 
     * When `standalone` is set to `true`:
     *   - `accountId`, `amount`, `currency`, and `type` are required. 
     *   - `type` must be `Electronic`.
     *   - `currency` of the payment can be different from the payment currency in the customer account settings.
     *   - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.
     *   - No settlement data will be created.
     *   - Either the applied amount or the unapplied amount of the payment is zero.
     *   - The standalone payment cannot be applied, unapplied, or transferred.
     * 
     * Specify `false` to create an ordinary payment that will be created, processed, and settled in Zuora. The `currency` of an ordinary payment must be the same as the currency in the customer account settings.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standalone")
    public Boolean standalone;
    public CreatePaymentType withStandalone(Boolean standalone) {
        this.standalone = standalone;
        return this;
    }
    
    /**
     * The type of the payment.
     * 
     */
    @JsonProperty("type")
    public CreatePaymentTypeTypeEnum type;
    public CreatePaymentType withType(CreatePaymentTypeTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
