// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeApplicationVersionsActionEnum
type GETDescribeApplicationVersionsActionEnum string

const (
	GETDescribeApplicationVersionsActionEnumDescribeApplicationVersions GETDescribeApplicationVersionsActionEnum = "DescribeApplicationVersions"
)

func (e GETDescribeApplicationVersionsActionEnum) ToPointer() *GETDescribeApplicationVersionsActionEnum {
	return &e
}

func (e *GETDescribeApplicationVersionsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeApplicationVersions":
		*e = GETDescribeApplicationVersionsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeApplicationVersionsActionEnum: %v", v)
	}
}

// GETDescribeApplicationVersionsVersionEnum
type GETDescribeApplicationVersionsVersionEnum string

const (
	GETDescribeApplicationVersionsVersionEnumTwoThousandAndTen1201 GETDescribeApplicationVersionsVersionEnum = "2010-12-01"
)

func (e GETDescribeApplicationVersionsVersionEnum) ToPointer() *GETDescribeApplicationVersionsVersionEnum {
	return &e
}

func (e *GETDescribeApplicationVersionsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-12-01":
		*e = GETDescribeApplicationVersionsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeApplicationVersionsVersionEnum: %v", v)
	}
}

type GETDescribeApplicationVersionsRequest struct {
	Action GETDescribeApplicationVersionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Specify an application name to show only application versions for that application.
	ApplicationName *string `queryParam:"style=form,explode=true,name=ApplicationName"`
	// <p>For a paginated request. Specify a maximum number of application versions to include in each response.</p> <p>If no <code>MaxRecords</code> is specified, all available application versions are retrieved in a single response.</p>
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
	NextToken *string                                   `queryParam:"style=form,explode=true,name=NextToken"`
	Version   GETDescribeApplicationVersionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// Specify a version label to show a specific application version.
	VersionLabels     []string `queryParam:"style=form,explode=true,name=VersionLabels"`
	XAmzAlgorithm     *string  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeApplicationVersionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
