// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FacetsBreadcrumb struct {
	// Query link.
	Href *string `json:"href,omitempty"`
	// Human-readable format of the facet key.
	Name *string `json:"name,omitempty"`
}

// FacetsFacetsTypeEnum - Facet type
//   - `TEXT` - The value is a simple text.
//   - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query.
type FacetsFacetsTypeEnum string

const (
	FacetsFacetsTypeEnumText       FacetsFacetsTypeEnum = "TEXT"
	FacetsFacetsTypeEnumPricerange FacetsFacetsTypeEnum = "PRICERANGE"
)

func (e FacetsFacetsTypeEnum) ToPointer() *FacetsFacetsTypeEnum {
	return &e
}

func (e *FacetsFacetsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		fallthrough
	case "PRICERANGE":
		*e = FacetsFacetsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FacetsFacetsTypeEnum: %v", v)
	}
}

type FacetsFacetsValues struct {
	// Value id
	ID *string `json:"id,omitempty"`
	// Facet key.
	Key *string `json:"key,omitempty"`
	// Human-readable format of the facet value
	Name *string `json:"name,omitempty"`
	// Number of resulting products.
	Quantity *float64 `json:"quantity,omitempty"`
	// Whether the value is selected (`true`) or not (`false`).
	Selected *bool `json:"selected,omitempty"`
	// Facet value.
	Value *string `json:"value,omitempty"`
}

type FacetsFacets struct {
	// Whether the client-side should hide the facet (`true`) or not (`false`)
	Hidden *bool `json:"hidden,omitempty"`
	// Human-readable format of the facet key.
	Name *string `json:"name,omitempty"`
	// Number of possible values.
	Quantity *float64 `json:"quantity,omitempty"`
	// Facet type
	//  - `TEXT` - The value is a simple text.
	//  - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query.
	//
	Type *FacetsFacetsTypeEnum `json:"type,omitempty"`
	// Possible values.
	Values []FacetsFacetsValues `json:"values,omitempty"`
}

type FacetsQueryArgsSelectedFacets struct {
	// facet key.
	Key *string `json:"key,omitempty"`
	// facet value.
	Value *string `json:"value,omitempty"`
}

// FacetsQueryArgs - Term and facets used in the query
type FacetsQueryArgs struct {
	// Search term used in the query.
	Query *string `json:"query,omitempty"`
	// Facets used in the query.
	SelectedFacets []FacetsQueryArgsSelectedFacets `json:"selectedFacets,omitempty"`
}

// Facets - List of facets for the given query.
type Facets struct {
	// Generated breadcrumb for the given query.
	Breadcrumb []FacetsBreadcrumb `json:"breadcrumb,omitempty"`
	// List of facets
	Facets []FacetsFacets `json:"facets,omitempty"`
	// Term and facets used in the query
	QueryArgs *FacetsQueryArgs `json:"queryArgs,omitempty"`
	// Indicates whether there was sampling in the aggregation of facets or not. In search results that have many products, only the first 30000 will be aggregated to avoid performance issues.
	Sampling *bool `json:"sampling,omitempty"`
}
