// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PscerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// PscerRequestBodyFormatEnum - The format of the certificate in response.
type PscerRequestBodyFormatEnum string

const (
	PscerRequestBodyFormatEnumPdf PscerRequestBodyFormatEnum = "pdf"
)

func (e PscerRequestBodyFormatEnum) ToPointer() *PscerRequestBodyFormatEnum {
	return &e
}

func (e *PscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PscerRequestBodyFormatEnum: %v", v)
	}
}

// PscerRequestBody - Request format
type PscerRequestBody struct {
	CertificateParameters *PscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pscer504ApplicationJSONErrorEnum string

const (
	Pscer504ApplicationJSONErrorEnumGatewayTimeout Pscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Pscer504ApplicationJSONErrorEnum) ToPointer() *Pscer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Pscer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer504ApplicationJSONErrorDescriptionEnum string

const (
	Pscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Pscer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Pscer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer504ApplicationJSON - Gateway timeout
type Pscer504ApplicationJSON struct {
	Error            *Pscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer503ApplicationJSONErrorEnum string

const (
	Pscer503ApplicationJSONErrorEnumServiceUnavailable Pscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Pscer503ApplicationJSONErrorEnum) ToPointer() *Pscer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Pscer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer503ApplicationJSONErrorDescriptionEnum string

const (
	Pscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Pscer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Pscer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer503ApplicationJSON - Service unavailable
type Pscer503ApplicationJSON struct {
	Error            *Pscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer502ApplicationJSONErrorEnum string

const (
	Pscer502ApplicationJSONErrorEnumBadGatewy Pscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Pscer502ApplicationJSONErrorEnum) ToPointer() *Pscer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Pscer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer502ApplicationJSONErrorDescriptionEnum string

const (
	Pscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Pscer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Pscer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer502ApplicationJSON - Bad gateway
type Pscer502ApplicationJSON struct {
	Error            *Pscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer500ApplicationJSONErrorEnum string

const (
	Pscer500ApplicationJSONErrorEnumInternalServerError Pscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Pscer500ApplicationJSONErrorEnum) ToPointer() *Pscer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Pscer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer500ApplicationJSONErrorDescriptionEnum string

const (
	Pscer500ApplicationJSONErrorDescriptionEnumInternalServerError Pscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Pscer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Pscer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer500ApplicationJSON - Internal server error
type Pscer500ApplicationJSON struct {
	Error            *Pscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer404ApplicationJSONErrorEnum string

const (
	Pscer404ApplicationJSONErrorEnumRecordNotFound Pscer404ApplicationJSONErrorEnum = "record_not_found"
	Pscer404ApplicationJSONErrorEnumURLNotFound    Pscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Pscer404ApplicationJSONErrorEnum) ToPointer() *Pscer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pscer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer404ApplicationJSONErrorDescriptionEnum string

const (
	Pscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Pscer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pscer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer404ApplicationJSON - No record found
type Pscer404ApplicationJSON struct {
	Error            *Pscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer401ApplicationJSONErrorEnum string

const (
	Pscer401ApplicationJSONErrorEnumInvalidAuthentication Pscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Pscer401ApplicationJSONErrorEnumInvalidAuthorization  Pscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Pscer401ApplicationJSONErrorEnum) ToPointer() *Pscer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pscer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer401ApplicationJSONErrorDescriptionEnum string

const (
	Pscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Pscer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pscer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer401ApplicationJSON - Unauthorized access
type Pscer401ApplicationJSON struct {
	Error            *Pscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pscer400ApplicationJSONErrorEnum string

const (
	Pscer400ApplicationJSONErrorEnumMissingParameter Pscer400ApplicationJSONErrorEnum = "missing_parameter"
	Pscer400ApplicationJSONErrorEnumInvalidParameter Pscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Pscer400ApplicationJSONErrorEnumInvalidFormat    Pscer400ApplicationJSONErrorEnum = "invalid_format"
	Pscer400ApplicationJSONErrorEnumInvalidTxnid     Pscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Pscer400ApplicationJSONErrorEnumInvalidConsentid Pscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Pscer400ApplicationJSONErrorEnum) ToPointer() *Pscer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Pscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pscer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Pscer400ApplicationJSONErrorDescriptionEnum string

const (
	Pscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Pscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Pscer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Pscer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pscer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pscer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pscer400ApplicationJSON - Bad request
type Pscer400ApplicationJSON struct {
	Error            *Pscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pscer400ApplicationJSONObject *Pscer400ApplicationJSON
	// Unauthorized access
	Pscer401ApplicationJSONObject *Pscer401ApplicationJSON
	// No record found
	Pscer404ApplicationJSONObject *Pscer404ApplicationJSON
	// Internal server error
	Pscer500ApplicationJSONObject *Pscer500ApplicationJSON
	// Bad gateway
	Pscer502ApplicationJSONObject *Pscer502ApplicationJSON
	// Service unavailable
	Pscer503ApplicationJSONObject *Pscer503ApplicationJSON
	// Gateway timeout
	Pscer504ApplicationJSONObject *Pscer504ApplicationJSON
}
