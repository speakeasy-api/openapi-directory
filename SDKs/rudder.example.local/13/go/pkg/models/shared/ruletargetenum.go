// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RuleTargetEnum - Node and special groups targeted by that rule
type RuleTargetEnum string

const (
	RuleTargetEnumSpecialAll                       RuleTargetEnum = "special:all"
	RuleTargetEnumSpecialAllExceptPolicyServers    RuleTargetEnum = "special:all_exceptPolicyServers"
	RuleTargetEnumSpecialAllServersWithRole        RuleTargetEnum = "special:all_servers_with_role"
	RuleTargetEnumSpecialAllNodesWithoutRole       RuleTargetEnum = "special:all_nodes_without_role"
	RuleTargetEnumPolicyServerDollarPolicyServerID RuleTargetEnum = "policyServer:${policyServerId}"
	RuleTargetEnumGroupDollarNodeGroupID           RuleTargetEnum = "group:${nodeGroupId}"
)

func (e *RuleTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "special:all":
		fallthrough
	case "special:all_exceptPolicyServers":
		fallthrough
	case "special:all_servers_with_role":
		fallthrough
	case "special:all_nodes_without_role":
		fallthrough
	case "policyServer:${policyServerId}":
		fallthrough
	case "group:${nodeGroupId}":
		*e = RuleTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleTargetEnum: %s", s)
	}
}
