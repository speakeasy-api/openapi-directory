// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// SongAPIGetListArtistParticipationStatusEnum - Filter by artist participation status. Only valid if artistId is specified.
//
//	Everything (default): Show all songs by that artist (no filter).
//	OnlyMainAlbums: Show only main songs by that artist.
//	OnlyCollaborations: Show only collaborations by that artist.
type SongAPIGetListArtistParticipationStatusEnum string

const (
	SongAPIGetListArtistParticipationStatusEnumEverything         SongAPIGetListArtistParticipationStatusEnum = "Everything"
	SongAPIGetListArtistParticipationStatusEnumOnlyMainAlbums     SongAPIGetListArtistParticipationStatusEnum = "OnlyMainAlbums"
	SongAPIGetListArtistParticipationStatusEnumOnlyCollaborations SongAPIGetListArtistParticipationStatusEnum = "OnlyCollaborations"
)

func (e *SongAPIGetListArtistParticipationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Everything":
		fallthrough
	case "OnlyMainAlbums":
		fallthrough
	case "OnlyCollaborations":
		*e = SongAPIGetListArtistParticipationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListArtistParticipationStatusEnum: %s", s)
	}
}

// SongAPIGetListFieldsEnum - List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
type SongAPIGetListFieldsEnum string

const (
	SongAPIGetListFieldsEnumNone            SongAPIGetListFieldsEnum = "None"
	SongAPIGetListFieldsEnumAdditionalNames SongAPIGetListFieldsEnum = "AdditionalNames"
	SongAPIGetListFieldsEnumAlbums          SongAPIGetListFieldsEnum = "Albums"
	SongAPIGetListFieldsEnumArtists         SongAPIGetListFieldsEnum = "Artists"
	SongAPIGetListFieldsEnumLyrics          SongAPIGetListFieldsEnum = "Lyrics"
	SongAPIGetListFieldsEnumMainPicture     SongAPIGetListFieldsEnum = "MainPicture"
	SongAPIGetListFieldsEnumNames           SongAPIGetListFieldsEnum = "Names"
	SongAPIGetListFieldsEnumPVs             SongAPIGetListFieldsEnum = "PVs"
	SongAPIGetListFieldsEnumReleaseEvent    SongAPIGetListFieldsEnum = "ReleaseEvent"
	SongAPIGetListFieldsEnumTags            SongAPIGetListFieldsEnum = "Tags"
	SongAPIGetListFieldsEnumThumbURL        SongAPIGetListFieldsEnum = "ThumbUrl"
	SongAPIGetListFieldsEnumWebLinks        SongAPIGetListFieldsEnum = "WebLinks"
)

func (e *SongAPIGetListFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Albums":
		fallthrough
	case "Artists":
		fallthrough
	case "Lyrics":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "ThumbUrl":
		fallthrough
	case "WebLinks":
		*e = SongAPIGetListFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListFieldsEnum: %s", s)
	}
}

// SongAPIGetListLangEnum - Content language preference (optional).
type SongAPIGetListLangEnum string

const (
	SongAPIGetListLangEnumDefault  SongAPIGetListLangEnum = "Default"
	SongAPIGetListLangEnumJapanese SongAPIGetListLangEnum = "Japanese"
	SongAPIGetListLangEnumRomaji   SongAPIGetListLangEnum = "Romaji"
	SongAPIGetListLangEnumEnglish  SongAPIGetListLangEnum = "English"
)

func (e *SongAPIGetListLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = SongAPIGetListLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListLangEnum: %s", s)
	}
}

// SongAPIGetListNameMatchModeEnum - Match mode for song name (optional, defaults to Exact).
type SongAPIGetListNameMatchModeEnum string

const (
	SongAPIGetListNameMatchModeEnumAuto       SongAPIGetListNameMatchModeEnum = "Auto"
	SongAPIGetListNameMatchModeEnumPartial    SongAPIGetListNameMatchModeEnum = "Partial"
	SongAPIGetListNameMatchModeEnumStartsWith SongAPIGetListNameMatchModeEnum = "StartsWith"
	SongAPIGetListNameMatchModeEnumExact      SongAPIGetListNameMatchModeEnum = "Exact"
	SongAPIGetListNameMatchModeEnumWords      SongAPIGetListNameMatchModeEnum = "Words"
)

func (e *SongAPIGetListNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = SongAPIGetListNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListNameMatchModeEnum: %s", s)
	}
}

// SongAPIGetListPvServicesEnum - Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
type SongAPIGetListPvServicesEnum string

const (
	SongAPIGetListPvServicesEnumNothing       SongAPIGetListPvServicesEnum = "Nothing"
	SongAPIGetListPvServicesEnumNicoNicoDouga SongAPIGetListPvServicesEnum = "NicoNicoDouga"
	SongAPIGetListPvServicesEnumYoutube       SongAPIGetListPvServicesEnum = "Youtube"
	SongAPIGetListPvServicesEnumSoundCloud    SongAPIGetListPvServicesEnum = "SoundCloud"
	SongAPIGetListPvServicesEnumVimeo         SongAPIGetListPvServicesEnum = "Vimeo"
	SongAPIGetListPvServicesEnumPiapro        SongAPIGetListPvServicesEnum = "Piapro"
	SongAPIGetListPvServicesEnumBilibili      SongAPIGetListPvServicesEnum = "Bilibili"
	SongAPIGetListPvServicesEnumFile          SongAPIGetListPvServicesEnum = "File"
	SongAPIGetListPvServicesEnumLocalFile     SongAPIGetListPvServicesEnum = "LocalFile"
	SongAPIGetListPvServicesEnumCreofuga      SongAPIGetListPvServicesEnum = "Creofuga"
	SongAPIGetListPvServicesEnumBandcamp      SongAPIGetListPvServicesEnum = "Bandcamp"
)

func (e *SongAPIGetListPvServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = SongAPIGetListPvServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListPvServicesEnum: %s", s)
	}
}

// SongAPIGetListSortEnum - Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.
type SongAPIGetListSortEnum string

const (
	SongAPIGetListSortEnumNone           SongAPIGetListSortEnum = "None"
	SongAPIGetListSortEnumName           SongAPIGetListSortEnum = "Name"
	SongAPIGetListSortEnumAdditionDate   SongAPIGetListSortEnum = "AdditionDate"
	SongAPIGetListSortEnumPublishDate    SongAPIGetListSortEnum = "PublishDate"
	SongAPIGetListSortEnumFavoritedTimes SongAPIGetListSortEnum = "FavoritedTimes"
	SongAPIGetListSortEnumRatingScore    SongAPIGetListSortEnum = "RatingScore"
	SongAPIGetListSortEnumTagUsageCount  SongAPIGetListSortEnum = "TagUsageCount"
)

func (e *SongAPIGetListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "PublishDate":
		fallthrough
	case "FavoritedTimes":
		fallthrough
	case "RatingScore":
		fallthrough
	case "TagUsageCount":
		*e = SongAPIGetListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListSortEnum: %s", s)
	}
}

// SongAPIGetListStatusEnum - Filter by entry status (optional).
type SongAPIGetListStatusEnum string

const (
	SongAPIGetListStatusEnumDraft    SongAPIGetListStatusEnum = "Draft"
	SongAPIGetListStatusEnumFinished SongAPIGetListStatusEnum = "Finished"
	SongAPIGetListStatusEnumApproved SongAPIGetListStatusEnum = "Approved"
	SongAPIGetListStatusEnumLocked   SongAPIGetListStatusEnum = "Locked"
)

func (e *SongAPIGetListStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = SongAPIGetListStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongAPIGetListStatusEnum: %s", s)
	}
}

type SongAPIGetListQueryParams struct {
	// List of advanced filters (optional).
	AdvancedFilters []interface{} `queryParam:"style=form,explode=true,name=advancedFilters"`
	// Filter by songs published after this date (inclusive).
	AfterDate *time.Time `queryParam:"style=form,explode=true,name=afterDate"`
	// Filter by artist Id.
	ArtistID []int `queryParam:"style=form,explode=true,name=artistId"`
	// Filter by artist participation status. Only valid if artistId is specified.
	//             Everything (default): Show all songs by that artist (no filter).
	//             OnlyMainAlbums: Show only main songs by that artist.
	//             OnlyCollaborations: Show only collaborations by that artist.
	ArtistParticipationStatus *SongAPIGetListArtistParticipationStatusEnum `queryParam:"style=form,explode=true,name=artistParticipationStatus"`
	// Filter by songs published before this date (exclusive).
	BeforeDate *time.Time `queryParam:"style=form,explode=true,name=beforeDate"`
	// Include child tags, if the tags being filtered by have any.
	ChildTags *bool `queryParam:"style=form,explode=true,name=childTags"`
	// Include child voicebanks, if the artist being filtered by has any.
	ChildVoicebanks *bool `queryParam:"style=form,explode=true,name=childVoicebanks"`
	// List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
	Fields *SongAPIGetListFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Include members of groups. This applies if {artistId} is a group.
	IncludeMembers *bool `queryParam:"style=form,explode=true,name=includeMembers"`
	// Content language preference (optional).
	Lang *SongAPIGetListLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Minimum rating score. Optional.
	MinScore *int `queryParam:"style=form,explode=true,name=minScore"`
	// Match mode for song name (optional, defaults to Exact).
	NameMatchMode *SongAPIGetListNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Whether to only include songs with at least one PV.
	OnlyWithPvs *bool `queryParam:"style=form,explode=true,name=onlyWithPvs"`
	// Filter by parent song. By default there is no filtering.
	ParentSongID *int `queryParam:"style=form,explode=true,name=parentSongId"`
	// Whether the search should prefer accurate matches.
	//             If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
	//             Requires a text query. Does not support pagination.
	//             This is mostly useful for autocomplete boxes.
	PreferAccurateMatches *bool `queryParam:"style=form,explode=true,name=preferAccurateMatches"`
	// Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
	PvServices *SongAPIGetListPvServicesEnum `queryParam:"style=form,explode=true,name=pvServices"`
	// Song name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter by release event. By default there is no filtering.
	ReleaseEventID *int `queryParam:"style=form,explode=true,name=releaseEventId"`
	// Allow only entries that have been created at most this many hours ago. By default there is no filtering.
	Since *int `queryParam:"style=form,explode=true,name=since"`
	// Filtered song types (optional).
	//             Possible values are Original, Remaster, Remix, Cover, Instrumental, Mashup, MusicPV, DramaPV, Other.
	SongTypes *string `queryParam:"style=form,explode=true,name=songTypes"`
	// Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.
	Sort *SongAPIGetListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by entry status (optional).
	Status *SongAPIGetListStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Filter by one or more tag Ids (optional).
	TagID []int `queryParam:"style=form,explode=true,name=tagId"`
	// Filter by one or more tag names (optional).
	TagName []string `queryParam:"style=form,explode=true,name=tagName"`
	// When searching by song type, search by associated tag as well, and vice versa.
	UnifyTypesAndTags *bool `queryParam:"style=form,explode=true,name=unifyTypesAndTags"`
	// Filter by user's rated songs. By default there is no filtering.
	UserCollectionID *int `queryParam:"style=form,explode=true,name=userCollectionId"`
}

type SongAPIGetListRequest struct {
	QueryParams SongAPIGetListQueryParams
}

type SongAPIGetListResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultSongForAPIContract *shared.PartialFindResultSongForAPIContract
	StatusCode                          int
	RawResponse                         *http.Response
}
