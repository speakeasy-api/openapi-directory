"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecaptchaenterprisev1transactiondata as shared_googlecloudrecaptchaenterprisev1transactiondata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1Event:
    r"""The event being assessed."""
    
    expected_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedAction'), 'exclude': lambda f: f is None }})
    r"""Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise."""  
    express: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('express'), 'exclude': lambda f: f is None }})
    r"""Optional. Flag for a reCAPTCHA express request for an assessment without a token. If enabled, `site_key` must reference a SCORE key with WAF feature set to EXPRESS."""  
    firewall_policy_evaluation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewallPolicyEvaluation'), 'exclude': lambda f: f is None }})
    r"""Optional. Flag for enabling firewall policy config assessment. If this flag is enabled, the firewall policy will be evaluated and a suggested firewall action will be returned in the response."""  
    hashed_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashedAccountId'), 'exclude': lambda f: f is None }})
    r"""Optional. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret."""  
    headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Optional. HTTP header information about the request."""  
    ja3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ja3'), 'exclude': lambda f: f is None }})
    r"""Optional. Optional JA3 fingerprint for SSL clients."""  
    requested_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The URI resource the user requested that triggered an assessment."""  
    site_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteKey'), 'exclude': lambda f: f is None }})
    r"""Optional. The site key that was used to invoke reCAPTCHA Enterprise on your site and generate the token."""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""Optional. The user response token provided by the reCAPTCHA Enterprise client-side integration on your site."""  
    transaction_data: Optional[shared_googlecloudrecaptchaenterprisev1transactiondata.GoogleCloudRecaptchaenterpriseV1TransactionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionData'), 'exclude': lambda f: f is None }})
    r"""Transaction data associated with a payment protected by reCAPTCHA Enterprise. All fields are optional."""  
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAgent'), 'exclude': lambda f: f is None }})
    r"""Optional. The user agent present in the request from the user's device related to this event."""  
    user_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userIpAddress'), 'exclude': lambda f: f is None }})
    r"""Optional. The IP address in the request from the user's device related to this event."""  
    waf_token_assessment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wafTokenAssessment'), 'exclude': lambda f: f is None }})
    r"""Optional. Flag for running WAF token assessment. If enabled, the token must be specified, and have been created by a WAF-enabled key."""  
    