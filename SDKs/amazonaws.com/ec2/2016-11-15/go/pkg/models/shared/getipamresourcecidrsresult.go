// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum - The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum string

const (
	GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnumCompliant    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = "compliant"
	GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnumNoncompliant GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = "noncompliant"
	GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnumUnmanaged    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = "unmanaged"
	GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnumIgnored      GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = "ignored"
)

func (e *GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "compliant":
		fallthrough
	case "noncompliant":
		fallthrough
	case "unmanaged":
		fallthrough
	case "ignored":
		*e = GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum: %s", s)
	}
}

// GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum - The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum string

const (
	GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnumManaged   GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = "managed"
	GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnumUnmanaged GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = "unmanaged"
	GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnumIgnored   GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = "ignored"
)

func (e *GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "managed":
		fallthrough
	case "unmanaged":
		fallthrough
	case "ignored":
		*e = GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum: %s", s)
	}
}

// GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum - The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum string

const (
	GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnumOverlapping    GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = "overlapping"
	GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnumNonoverlapping GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = "nonoverlapping"
	GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnumIgnored        GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = "ignored"
)

func (e *GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "overlapping":
		fallthrough
	case "nonoverlapping":
		fallthrough
	case "ignored":
		*e = GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum: %s", s)
	}
}

// GetIpamResourceCidrsResultIpamResourceCidrsResourceTags - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
type GetIpamResourceCidrsResultIpamResourceCidrsResourceTags struct {
	Key   *string
	Value *string
}

// GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum - The type of IPAM resource.
type GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum string

const (
	GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnumVpc            GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = "vpc"
	GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnumSubnet         GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = "subnet"
	GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnumEip            GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = "eip"
	GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnumPublicIpv4Pool GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = "public-ipv4-pool"
	GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnumIpv6Pool       GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = "ipv6-pool"
)

func (e *GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "vpc":
		fallthrough
	case "subnet":
		fallthrough
	case "eip":
		fallthrough
	case "public-ipv4-pool":
		fallthrough
	case "ipv6-pool":
		*e = GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum: %s", s)
	}
}

// GetIpamResourceCidrsResultIpamResourceCidrs - The CIDR for an IPAM resource.
type GetIpamResourceCidrsResultIpamResourceCidrs struct {
	ComplianceStatus *GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum
	IPUsage          *float64
	IpamID           *string
	IpamPoolID       *string
	IpamScopeID      *string
	ManagementState  *GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum
	OverlapStatus    *GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum
	ResourceCidr     *string
	ResourceID       *string
	ResourceName     *string
	ResourceOwnerID  *string
	ResourceRegion   *string
	ResourceTags     []GetIpamResourceCidrsResultIpamResourceCidrsResourceTags
	ResourceType     *GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum
	VpcID            *string
}

// GetIpamResourceCidrsResult - Success
type GetIpamResourceCidrsResult struct {
	IpamResourceCidrs []GetIpamResourceCidrsResultIpamResourceCidrs
	NextToken         *string
}
