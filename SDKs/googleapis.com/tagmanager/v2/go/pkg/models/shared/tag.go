// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TagTagFiringOptionEnum - Option to fire this tag.
type TagTagFiringOptionEnum string

const (
	TagTagFiringOptionEnumTagFiringOptionUnspecified TagTagFiringOptionEnum = "tagFiringOptionUnspecified"
	TagTagFiringOptionEnumUnlimited                  TagTagFiringOptionEnum = "unlimited"
	TagTagFiringOptionEnumOncePerEvent               TagTagFiringOptionEnum = "oncePerEvent"
	TagTagFiringOptionEnumOncePerLoad                TagTagFiringOptionEnum = "oncePerLoad"
)

func (e TagTagFiringOptionEnum) ToPointer() *TagTagFiringOptionEnum {
	return &e
}

func (e *TagTagFiringOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tagFiringOptionUnspecified":
		fallthrough
	case "unlimited":
		fallthrough
	case "oncePerEvent":
		fallthrough
	case "oncePerLoad":
		*e = TagTagFiringOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagTagFiringOptionEnum: %v", v)
	}
}

// Tag - Represents a Google Tag Manager Tag.
type Tag struct {
	// GTM Account ID.
	AccountID *string `json:"accountId,omitempty"`
	// Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	BlockingRuleID []string `json:"blockingRuleId,omitempty"`
	// Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	BlockingTriggerID []string           `json:"blockingTriggerId,omitempty"`
	ConsentSettings   *TagConsentSetting `json:"consentSettings,omitempty"`
	// GTM Container ID.
	ContainerID *string `json:"containerId,omitempty"`
	// The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	FiringRuleID []string `json:"firingRuleId,omitempty"`
	// Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	FiringTriggerID []string `json:"firingTriggerId,omitempty"`
	// If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	LiveOnly *bool `json:"liveOnly,omitempty"`
	// Represents a Google Tag Manager Parameter.
	MonitoringMetadata *Parameter `json:"monitoringMetadata,omitempty"`
	// If non-empty, then the tag display name will be included in the monitoring metadata map using the key specified. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	MonitoringMetadataTagNameKey *string `json:"monitoringMetadataTagNameKey,omitempty"`
	// Tag display name. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	Name *string `json:"name,omitempty"`
	// User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	Notes *string `json:"notes,omitempty"`
	// The tag's parameters. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	Parameter []Parameter `json:"parameter,omitempty"`
	// Parent folder id.
	ParentFolderID *string `json:"parentFolderId,omitempty"`
	// GTM Tag's API relative path.
	Path *string `json:"path,omitempty"`
	// Indicates whether the tag is paused, which prevents the tag from firing. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	Paused *bool `json:"paused,omitempty"`
	// Represents a Google Tag Manager Parameter.
	Priority *Parameter `json:"priority,omitempty"`
	// The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	ScheduleEndMs *string `json:"scheduleEndMs,omitempty"`
	// The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	ScheduleStartMs *string `json:"scheduleStartMs,omitempty"`
	// The list of setup tags. Currently we only allow one.
	SetupTag []SetupTag `json:"setupTag,omitempty"`
	// Option to fire this tag.
	TagFiringOption *TagTagFiringOptionEnum `json:"tagFiringOption,omitempty"`
	// The Tag ID uniquely identifies the GTM Tag.
	TagID *string `json:"tagId,omitempty"`
	// Auto generated link to the tag manager UI
	TagManagerURL *string `json:"tagManagerUrl,omitempty"`
	// The list of teardown tags. Currently we only allow one.
	TeardownTag []TeardownTag `json:"teardownTag,omitempty"`
	// GTM Tag Type. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
	Type *string `json:"type,omitempty"`
	// GTM Workspace ID.
	WorkspaceID *string `json:"workspaceId,omitempty"`
}
