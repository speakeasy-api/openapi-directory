// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SvcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type SvcerRequestBodyCertificateParameters struct {
	// Date of Birth
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Roll No.
	Roll string `json:"ROLL"`
	// Year of Passing
	Yop string `json:"YOP"`
}

// SvcerRequestBodyFormatEnum - The format of the certificate in response.
type SvcerRequestBodyFormatEnum string

const (
	SvcerRequestBodyFormatEnumPdf SvcerRequestBodyFormatEnum = "pdf"
)

func (e *SvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SvcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SvcerRequestBodyFormatEnum: %s", s)
	}
}

// SvcerRequestBody - Request format
type SvcerRequestBody struct {
	CertificateParameters *SvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type SvcerRequest struct {
	// Request format
	Request  *SvcerRequestBody `request:"mediaType=application/json"`
	Security SvcerSecurity
}

type Svcer504ApplicationJSONErrorEnum string

const (
	Svcer504ApplicationJSONErrorEnumGatewayTimeout Svcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Svcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Svcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer504ApplicationJSONErrorDescriptionEnum string

const (
	Svcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Svcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Svcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Svcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer504ApplicationJSON - Gateway timeout
type Svcer504ApplicationJSON struct {
	Error            *Svcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer503ApplicationJSONErrorEnum string

const (
	Svcer503ApplicationJSONErrorEnumServiceUnavailable Svcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Svcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Svcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer503ApplicationJSONErrorDescriptionEnum string

const (
	Svcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Svcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Svcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Svcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer503ApplicationJSON - Service unavailable
type Svcer503ApplicationJSON struct {
	Error            *Svcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer502ApplicationJSONErrorEnum string

const (
	Svcer502ApplicationJSONErrorEnumBadGatewy Svcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Svcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Svcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer502ApplicationJSONErrorDescriptionEnum string

const (
	Svcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Svcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Svcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Svcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer502ApplicationJSON - Bad gateway
type Svcer502ApplicationJSON struct {
	Error            *Svcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer500ApplicationJSONErrorEnum string

const (
	Svcer500ApplicationJSONErrorEnumInternalServerError Svcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Svcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Svcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer500ApplicationJSONErrorDescriptionEnum string

const (
	Svcer500ApplicationJSONErrorDescriptionEnumInternalServerError Svcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Svcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Svcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer500ApplicationJSON - Internal server error
type Svcer500ApplicationJSON struct {
	Error            *Svcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer404ApplicationJSONErrorEnum string

const (
	Svcer404ApplicationJSONErrorEnumRecordNotFound Svcer404ApplicationJSONErrorEnum = "record_not_found"
	Svcer404ApplicationJSONErrorEnumURLNotFound    Svcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Svcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Svcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer404ApplicationJSONErrorDescriptionEnum string

const (
	Svcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Svcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Svcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Svcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Svcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Svcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer404ApplicationJSON - No record found
type Svcer404ApplicationJSON struct {
	Error            *Svcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer401ApplicationJSONErrorEnum string

const (
	Svcer401ApplicationJSONErrorEnumInvalidAuthentication Svcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Svcer401ApplicationJSONErrorEnumInvalidAuthorization  Svcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Svcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Svcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer401ApplicationJSONErrorDescriptionEnum string

const (
	Svcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Svcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Svcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Svcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Svcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Svcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer401ApplicationJSON - Unauthorized access
type Svcer401ApplicationJSON struct {
	Error            *Svcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Svcer400ApplicationJSONErrorEnum string

const (
	Svcer400ApplicationJSONErrorEnumMissingParameter Svcer400ApplicationJSONErrorEnum = "missing_parameter"
	Svcer400ApplicationJSONErrorEnumInvalidParameter Svcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Svcer400ApplicationJSONErrorEnumInvalidFormat    Svcer400ApplicationJSONErrorEnum = "invalid_format"
	Svcer400ApplicationJSONErrorEnumInvalidTxnid     Svcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Svcer400ApplicationJSONErrorEnumInvalidConsentid Svcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Svcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Svcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Svcer400ApplicationJSONErrorDescriptionEnum string

const (
	Svcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Svcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Svcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Svcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Svcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Svcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Svcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Svcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Svcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Svcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Svcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Svcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Svcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Svcer400ApplicationJSON - Bad request
type Svcer400ApplicationJSON struct {
	Error            *Svcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Svcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SvcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Svcer400ApplicationJSONObject *Svcer400ApplicationJSON
	// Unauthorized access
	Svcer401ApplicationJSONObject *Svcer401ApplicationJSON
	// No record found
	Svcer404ApplicationJSONObject *Svcer404ApplicationJSON
	// Internal server error
	Svcer500ApplicationJSONObject *Svcer500ApplicationJSON
	// Bad gateway
	Svcer502ApplicationJSONObject *Svcer502ApplicationJSON
	// Service unavailable
	Svcer503ApplicationJSONObject *Svcer503ApplicationJSON
	// Gateway timeout
	Svcer504ApplicationJSONObject *Svcer504ApplicationJSON
}
