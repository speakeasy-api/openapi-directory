// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserAPIGetSongRatingPathParams struct {
	// User whose rating is to be checked.
	ID int `pathParam:"style=simple,explode=false,name=id"`
	// ID of the song whose rating is to be checked.
	SongID int `pathParam:"style=simple,explode=false,name=songId"`
}

type UserAPIGetSongRatingRequest struct {
	PathParams UserAPIGetSongRatingPathParams
}

// UserAPIGetSongRating200TextJSONEnum - OK
type UserAPIGetSongRating200TextJSONEnum string

const (
	UserAPIGetSongRating200TextJSONEnumNothing  UserAPIGetSongRating200TextJSONEnum = "Nothing"
	UserAPIGetSongRating200TextJSONEnumDislike  UserAPIGetSongRating200TextJSONEnum = "Dislike"
	UserAPIGetSongRating200TextJSONEnumLike     UserAPIGetSongRating200TextJSONEnum = "Like"
	UserAPIGetSongRating200TextJSONEnumFavorite UserAPIGetSongRating200TextJSONEnum = "Favorite"
)

func (e *UserAPIGetSongRating200TextJSONEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Dislike":
		fallthrough
	case "Like":
		fallthrough
	case "Favorite":
		*e = UserAPIGetSongRating200TextJSONEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetSongRating200TextJSONEnum: %s", s)
	}
}

// UserAPIGetSongRating200ApplicationJsonpEnum - OK
type UserAPIGetSongRating200ApplicationJsonpEnum string

const (
	UserAPIGetSongRating200ApplicationJsonpEnumNothing  UserAPIGetSongRating200ApplicationJsonpEnum = "Nothing"
	UserAPIGetSongRating200ApplicationJsonpEnumDislike  UserAPIGetSongRating200ApplicationJsonpEnum = "Dislike"
	UserAPIGetSongRating200ApplicationJsonpEnumLike     UserAPIGetSongRating200ApplicationJsonpEnum = "Like"
	UserAPIGetSongRating200ApplicationJsonpEnumFavorite UserAPIGetSongRating200ApplicationJsonpEnum = "Favorite"
)

func (e *UserAPIGetSongRating200ApplicationJsonpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Dislike":
		fallthrough
	case "Like":
		fallthrough
	case "Favorite":
		*e = UserAPIGetSongRating200ApplicationJsonpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetSongRating200ApplicationJsonpEnum: %s", s)
	}
}

// UserAPIGetSongRating200ApplicationJSONEnum - OK
type UserAPIGetSongRating200ApplicationJSONEnum string

const (
	UserAPIGetSongRating200ApplicationJSONEnumNothing  UserAPIGetSongRating200ApplicationJSONEnum = "Nothing"
	UserAPIGetSongRating200ApplicationJSONEnumDislike  UserAPIGetSongRating200ApplicationJSONEnum = "Dislike"
	UserAPIGetSongRating200ApplicationJSONEnumLike     UserAPIGetSongRating200ApplicationJSONEnum = "Like"
	UserAPIGetSongRating200ApplicationJSONEnumFavorite UserAPIGetSongRating200ApplicationJSONEnum = "Favorite"
)

func (e *UserAPIGetSongRating200ApplicationJSONEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Dislike":
		fallthrough
	case "Like":
		fallthrough
	case "Favorite":
		*e = UserAPIGetSongRating200ApplicationJSONEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetSongRating200ApplicationJSONEnum: %s", s)
	}
}

// UserAPIGetSongRating200ApplicationJavascriptEnum - OK
type UserAPIGetSongRating200ApplicationJavascriptEnum string

const (
	UserAPIGetSongRating200ApplicationJavascriptEnumNothing  UserAPIGetSongRating200ApplicationJavascriptEnum = "Nothing"
	UserAPIGetSongRating200ApplicationJavascriptEnumDislike  UserAPIGetSongRating200ApplicationJavascriptEnum = "Dislike"
	UserAPIGetSongRating200ApplicationJavascriptEnumLike     UserAPIGetSongRating200ApplicationJavascriptEnum = "Like"
	UserAPIGetSongRating200ApplicationJavascriptEnumFavorite UserAPIGetSongRating200ApplicationJavascriptEnum = "Favorite"
)

func (e *UserAPIGetSongRating200ApplicationJavascriptEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Dislike":
		fallthrough
	case "Like":
		fallthrough
	case "Favorite":
		*e = UserAPIGetSongRating200ApplicationJavascriptEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetSongRating200ApplicationJavascriptEnum: %s", s)
	}
}

type UserAPIGetSongRatingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	UserAPIGetSongRating200ApplicationJSONStringEnum *UserAPIGetSongRating200ApplicationJSONEnum
	// OK
	UserAPIGetSongRating200ApplicationJsonpStringEnum *UserAPIGetSongRating200ApplicationJsonpEnum
	// OK
	UserAPIGetSongRating200TextJSONStringEnum *UserAPIGetSongRating200TextJSONEnum
}
