// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AchievementDefinitionAchievementTypeEnum - The type of the achievement.
type AchievementDefinitionAchievementTypeEnum string

const (
	AchievementDefinitionAchievementTypeEnumAchievementTypeUnspecified AchievementDefinitionAchievementTypeEnum = "ACHIEVEMENT_TYPE_UNSPECIFIED"
	AchievementDefinitionAchievementTypeEnumStandard                   AchievementDefinitionAchievementTypeEnum = "STANDARD"
	AchievementDefinitionAchievementTypeEnumIncremental                AchievementDefinitionAchievementTypeEnum = "INCREMENTAL"
)

func (e *AchievementDefinitionAchievementTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACHIEVEMENT_TYPE_UNSPECIFIED":
		fallthrough
	case "STANDARD":
		fallthrough
	case "INCREMENTAL":
		*e = AchievementDefinitionAchievementTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AchievementDefinitionAchievementTypeEnum: %s", s)
	}
}

// AchievementDefinitionInitialStateEnum - The initial state of the achievement.
type AchievementDefinitionInitialStateEnum string

const (
	AchievementDefinitionInitialStateEnumInitialAchievementStateUnspecified AchievementDefinitionInitialStateEnum = "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED"
	AchievementDefinitionInitialStateEnumHidden                             AchievementDefinitionInitialStateEnum = "HIDDEN"
	AchievementDefinitionInitialStateEnumRevealed                           AchievementDefinitionInitialStateEnum = "REVEALED"
	AchievementDefinitionInitialStateEnumUnlocked                           AchievementDefinitionInitialStateEnum = "UNLOCKED"
)

func (e *AchievementDefinitionInitialStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "HIDDEN":
		fallthrough
	case "REVEALED":
		fallthrough
	case "UNLOCKED":
		*e = AchievementDefinitionInitialStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AchievementDefinitionInitialStateEnum: %s", s)
	}
}

// AchievementDefinition - An achievement definition object.
type AchievementDefinition struct {
	// The type of the achievement.
	AchievementType *AchievementDefinitionAchievementTypeEnum `json:"achievementType,omitempty"`
	// The description of the achievement.
	Description *string `json:"description,omitempty"`
	// Experience points which will be earned when unlocking this achievement.
	ExperiencePoints *string `json:"experiencePoints,omitempty"`
	// The total steps for an incremental achievement as a string.
	FormattedTotalSteps *string `json:"formattedTotalSteps,omitempty"`
	// The ID of the achievement.
	ID *string `json:"id,omitempty"`
	// The initial state of the achievement.
	InitialState *AchievementDefinitionInitialStateEnum `json:"initialState,omitempty"`
	// Indicates whether the revealed icon image being returned is a default image, or is provided by the game.
	IsRevealedIconURLDefault *bool `json:"isRevealedIconUrlDefault,omitempty"`
	// Indicates whether the unlocked icon image being returned is a default image, or is game-provided.
	IsUnlockedIconURLDefault *bool `json:"isUnlockedIconUrlDefault,omitempty"`
	// Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.
	Kind *string `json:"kind,omitempty"`
	// The name of the achievement.
	Name *string `json:"name,omitempty"`
	// The image URL for the revealed achievement icon.
	RevealedIconURL *string `json:"revealedIconUrl,omitempty"`
	// The total steps for an incremental achievement.
	TotalSteps *int `json:"totalSteps,omitempty"`
	// The image URL for the unlocked achievement icon.
	UnlockedIconURL *string `json:"unlockedIconUrl,omitempty"`
}
