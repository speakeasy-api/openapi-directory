// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientAuthNotificationAuthStatusEnum string

const (
	PatientAuthNotificationAuthStatusEnumGranted PatientAuthNotificationAuthStatusEnum = "GRANTED"
	PatientAuthNotificationAuthStatusEnumDenied  PatientAuthNotificationAuthStatusEnum = "DENIED"
)

func (e *PatientAuthNotificationAuthStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GRANTED":
		fallthrough
	case "DENIED":
		*e = PatientAuthNotificationAuthStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientAuthNotificationAuthStatusEnum: %s", s)
	}
}

// PatientAuthNotificationAuth - depending on the purpose of auth, as specified in /auth/init, the response may include the following
//  1. LINK - only returns **accessToken**
//  2. KYC - only returns **patient**
//  3. KYC_AND_LINK - returns both **accessToken** and **patient**
type PatientAuthNotificationAuth struct {
	// access token for initialization of subsequent action.
	AccessToken *string                               `json:"accessToken,omitempty"`
	Patient     *PatientDemographicResponse           `json:"patient,omitempty"`
	Status      PatientAuthNotificationAuthStatusEnum `json:"status"`
	// transaction id for auth session
	TransactionID string               `json:"transactionId"`
	Validity      *AccessTokenValidity `json:"validity,omitempty"`
}

type PatientAuthNotification struct {
	// depending on the purpose of auth, as specified in /auth/init, the response may include the following
	//   1. LINK - only returns **accessToken**
	//   2. KYC - only returns **patient**
	//   3. KYC_AND_LINK - returns both **accessToken** and **patient**
	//
	Auth *PatientAuthNotificationAuth `json:"auth,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string `json:"requestId"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
