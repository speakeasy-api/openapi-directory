// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListNotebookExecutionsQueryParams struct {
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
}

// ListNotebookExecutionsXAmzTargetEnum
type ListNotebookExecutionsXAmzTargetEnum string

const (
	ListNotebookExecutionsXAmzTargetEnumElasticMapReduceListNotebookExecutions ListNotebookExecutionsXAmzTargetEnum = "ElasticMapReduce.ListNotebookExecutions"
)

func (e *ListNotebookExecutionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ElasticMapReduce.ListNotebookExecutions":
		*e = ListNotebookExecutionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListNotebookExecutionsXAmzTargetEnum: %s", s)
	}
}

type ListNotebookExecutionsHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListNotebookExecutionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListNotebookExecutionsRequest struct {
	QueryParams ListNotebookExecutionsQueryParams
	Headers     ListNotebookExecutionsHeaders
	Request     shared.ListNotebookExecutionsInput `request:"mediaType=application/json"`
}

type ListNotebookExecutionsResponse struct {
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListNotebookExecutionsOutput *shared.ListNotebookExecutionsOutput
	StatusCode                   int
	RawResponse                  *http.Response
}
