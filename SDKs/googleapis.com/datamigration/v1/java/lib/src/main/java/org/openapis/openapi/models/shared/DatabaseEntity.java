/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DatabaseEntity - The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
 */
public class DatabaseEntity {
    /**
     * Function's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseFunction")
    public FunctionEntity databaseFunction;

    public DatabaseEntity withDatabaseFunction(FunctionEntity databaseFunction) {
        this.databaseFunction = databaseFunction;
        return this;
    }
    
    /**
     * Package's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databasePackage")
    public PackageEntity databasePackage;

    public DatabaseEntity withDatabasePackage(PackageEntity databasePackage) {
        this.databasePackage = databasePackage;
        return this;
    }
    
    /**
     * The type of the database entity (table, view, index, ...).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityType")
    public DatabaseEntityEntityTypeEnum entityType;

    public DatabaseEntity withEntityType(DatabaseEntityEntityTypeEnum entityType) {
        this.entityType = entityType;
        return this;
    }
    
    /**
     * Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mappings")
    public EntityMapping[] mappings;

    public DatabaseEntity withMappings(EntityMapping[] mappings) {
        this.mappings = mappings;
        return this;
    }
    
    /**
     * The full name of the parent entity (e.g. schema name).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentEntity")
    public String parentEntity;

    public DatabaseEntity withParentEntity(String parentEntity) {
        this.parentEntity = parentEntity;
        return this;
    }
    
    /**
     * Schema typically has no parent entity, but can have a parent entity DatabaseInstance (for database engines which support it). For some database engines, the terms schema and user can be used interchangeably when they refer to a namespace or a collection of other database entities. Can store additional information which is schema specific.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public SchemaEntity schema;

    public DatabaseEntity withSchema(SchemaEntity schema) {
        this.schema = schema;
        return this;
    }
    
    /**
     * Sequence's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    public SequenceEntity sequence;

    public DatabaseEntity withSequence(SequenceEntity sequence) {
        this.sequence = sequence;
        return this;
    }
    
    /**
     * The short name (e.g. table name) of the entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortName")
    public String shortName;

    public DatabaseEntity withShortName(String shortName) {
        this.shortName = shortName;
        return this;
    }
    
    /**
     * Stored procedure's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storedProcedure")
    public StoredProcedureEntity storedProcedure;

    public DatabaseEntity withStoredProcedure(StoredProcedureEntity storedProcedure) {
        this.storedProcedure = storedProcedure;
        return this;
    }
    
    /**
     * Synonym's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synonym")
    public SynonymEntity synonym;

    public DatabaseEntity withSynonym(SynonymEntity synonym) {
        this.synonym = synonym;
        return this;
    }
    
    /**
     * Table's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    public TableEntity table;

    public DatabaseEntity withTable(TableEntity table) {
        this.table = table;
        return this;
    }
    
    /**
     * The type of tree the entity belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tree")
    public DatabaseEntityTreeEnum tree;

    public DatabaseEntity withTree(DatabaseEntityTreeEnum tree) {
        this.tree = tree;
        return this;
    }
    
    /**
     * View's parent is a schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public ViewEntity view;

    public DatabaseEntity withView(ViewEntity view) {
        this.view = view;
        return this;
    }
    
    public DatabaseEntity(){}
}
