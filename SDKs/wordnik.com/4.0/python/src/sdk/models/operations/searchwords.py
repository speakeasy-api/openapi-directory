"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class SearchWordsRequest:
    
    query: str = dataclasses.field(metadata={'path_param': { 'field_name': 'query', 'style': 'simple', 'explode': False }})
    r"""Search query"""  
    allow_regex: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'allowRegex', 'style': 'form', 'explode': True }})
    r"""Search term is a Regular Expression"""  
    case_sensitive: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'caseSensitive', 'style': 'form', 'explode': True }})
    r"""Search case sensitive"""  
    exclude_part_of_speech: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludePartOfSpeech', 'style': 'form', 'explode': True }})
    r"""Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)"""  
    include_part_of_speech: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includePartOfSpeech', 'style': 'form', 'explode': True }})
    r"""Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    max_corpus_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxCorpusCount', 'style': 'form', 'explode': True }})
    r"""Maximum corpus frequency for terms"""  
    max_dictionary_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxDictionaryCount', 'style': 'form', 'explode': True }})
    r"""Maximum dictionary definition count"""  
    max_length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxLength', 'style': 'form', 'explode': True }})
    r"""Maximum word length"""  
    min_corpus_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minCorpusCount', 'style': 'form', 'explode': True }})
    r"""Minimum corpus frequency for terms"""  
    min_dictionary_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minDictionaryCount', 'style': 'form', 'explode': True }})
    r"""Minimum number of dictionary entries for words returned"""  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minLength', 'style': 'form', 'explode': True }})
    r"""Minimum word length"""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""Results to skip"""  
    

@dataclasses.dataclass
class SearchWordsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    