<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Committee 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * This endpoint is useful for finding detailed information about a particular committee or
     * filer. Use the `committee_id` to find the most recent information about the committee.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesResponse
     */
	public function getCandidateCandidateIdCommittees(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/committees/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeDetailPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeDetailPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Explore a filer's characteristics over time. This can be particularly useful if the
     * committees change treasurers, designation, or `committee_type`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryResponse
     */
	public function getCandidateCandidateIdCommitteesHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/committees/history/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeHistoryProfilePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeHistoryProfilePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Explore a filer's characteristics over time. This can be particularly useful if the
     * committees change treasurers, designation, or `committee_type`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleResponse
     */
	public function getCandidateCandidateIdCommitteesHistoryCycle(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/committees/history/{cycle}/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdCommitteesHistoryCycleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeHistoryProfilePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeHistoryProfilePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint is useful for finding detailed information about a particular committee or
     * filer. Use the `committee_id` to find the most recent information about the committee.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdResponse
     */
	public function getCommitteeCommitteeId(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeDetailPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeDetailPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Explore a filer's characteristics over time. This can be particularly useful if the
     * committees change treasurers, designation, or `committee_type`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryResponse
     */
	public function getCommitteeCommitteeIdHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/history/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeHistoryProfilePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeHistoryProfilePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Explore a filer's characteristics over time. This can be particularly useful if the
     * committees change treasurers, designation, or `committee_type`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleResponse
     */
	public function getCommitteeCommitteeIdHistoryCycle(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/history/{cycle}/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdHistoryCycleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeHistoryProfilePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeHistoryProfilePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Fetch basic information about committees and filers. Use parameters to filter for
     * particular characteristics.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteesResponse
     */
	public function getCommittees(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committees/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteePage', 'json');
            }
        }

        return $response;
    }
}