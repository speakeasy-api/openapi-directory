<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Combines Containers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineResponse
     */
	public function tagmanagerAccountsContainersCombine(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:combine', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCombineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse
     */
	public function tagmanagerAccountsContainersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/containers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "container", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a Destination to this Container and removes it from the Container to which it is currently linked.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkResponse
     */
	public function tagmanagerAccountsContainersDestinationsLink(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/destinations:link', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->destination = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Destination', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Destinations linked to a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListResponse
     */
	public function tagmanagerAccountsContainersDestinationsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/destinations', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDestinationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDestinationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDestinationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Environments of a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Re-generates the authorization code for a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsReauthorize(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:reauthorize', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsReauthorizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Containers that belongs to a GTM Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse
     */
	public function tagmanagerAccountsContainersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/containers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContainersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContainersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up a Container by destination ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupResponse
     */
	public function tagmanagerAccountsContainersLookup(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/accounts/containers:lookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move Tag ID out of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdResponse
     */
	public function tagmanagerAccountsContainersMoveTagId(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:move_tag_id', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveTagIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the tagging snippet for a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetResponse
     */
	public function tagmanagerAccountsContainersSnippet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:snippet', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersSnippetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContainerSnippetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetContainerSnippetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest container version header
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestResponse
     */
	public function tagmanagerAccountsContainersVersionHeadersLatest(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/version_headers:latest', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersionHeader = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersionHeader', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Container Versions of a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListResponse
     */
	public function tagmanagerAccountsContainersVersionHeadersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/version_headers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionHeadersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContainerVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContainerVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the live (i.e. published) container version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveResponse
     */
	public function tagmanagerAccountsContainersVersionsLive(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/versions:live', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsLiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Publishes a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse
     */
	public function tagmanagerAccountsContainersVersionsPublish(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:publish', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publishContainerVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublishContainerVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the latest version used for synchronization of workspaces when detecting conflicts and errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestResponse
     */
	public function tagmanagerAccountsContainersVersionsSetLatest(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:set_latest', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsSetLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeletes a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse
     */
	public function tagmanagerAccountsContainersVersionsUndelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:undelete', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates one or more GTM Built-In Variables.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesBuiltInVariablesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/built_in_variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBuiltInVariableResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateBuiltInVariableResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the enabled Built-In Variables of a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesBuiltInVariablesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/built_in_variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnabledBuiltInVariablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnabledBuiltInVariablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverts changes to a GTM Built-In Variables in a GTM Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse
     */
	public function tagmanagerAccountsContainersWorkspacesBuiltInVariablesRevert(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}/built_in_variables:revert', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->revertBuiltInVariableResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RevertBuiltInVariableResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesClientsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/clients', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "client", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Clients of a GTM container workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesClientsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/clients', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesClientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClientsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/workspaces', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workspace", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workspace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionResponse
     */
	public function tagmanagerAccountsContainersWorkspacesCreateVersion(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:create_version', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createContainerVersionRequestVersionOptions", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesCreateVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createContainerVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateContainerVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesFoldersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/folders', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all entities in a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse
     */
	public function tagmanagerAccountsContainersWorkspacesFoldersEntities(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:entities', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folderEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FolderEntities', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Folders of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesFoldersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/folders', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFoldersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFoldersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves entities to a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse
     */
	public function tagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolder(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:move_entities_to_folder', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Finds conflicting and modified entities in the workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusResponse
     */
	public function tagmanagerAccountsContainersWorkspacesGetStatus(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}/status', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWorkspaceStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetWorkspaceStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Google tag config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesGtagConfigCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/gtag_config', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "gtagConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gtagConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GtagConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Google tag configs in a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesGtagConfigList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/gtag_config', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesGtagConfigListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGtagConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGtagConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Workspaces that belong to a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/workspaces', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkspacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkspacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Quick previews a workspace by creating a fake container version from all entities in the provided workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewResponse
     */
	public function tagmanagerAccountsContainersWorkspacesQuickPreview(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:quick_preview', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesQuickPreviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quickPreviewResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuickPreviewResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictResponse
     */
	public function tagmanagerAccountsContainersWorkspacesResolveConflict(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:resolve_conflict', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entity", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesResolveConflictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncResponse
     */
	public function tagmanagerAccountsContainersWorkspacesSync(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:sync', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncWorkspaceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncWorkspaceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Tags of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTagsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Custom Template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/templates', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customTemplate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Templates of a GTM container workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/templates', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTemplatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTemplatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTriggersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/triggers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "trigger", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Triggers of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesTriggersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/triggers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesTriggersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTriggersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTriggersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesVariablesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variable", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Variables of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesVariablesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesVariablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVariablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVariablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateResponse
     */
	public function tagmanagerAccountsContainersWorkspacesZonesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/zones', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zone", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Zone', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Zones of a GTM container workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListResponse
     */
	public function tagmanagerAccountsContainersWorkspacesZonesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/zones', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listZonesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListZonesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverts changes to a GTM Zone in a GTM Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertResponse
     */
	public function tagmanagerAccountsContainersWorkspacesZonesRevert(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}:revert', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersWorkspacesZonesRevertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->revertZoneResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RevertZoneResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Accounts that a user has access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse
     */
	public function tagmanagerAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user's Account & Container access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateResponse
     */
	public function tagmanagerAccountsUserPermissionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/user_permissions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userPermission", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from the account, revoking access to it and all of its containers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteResponse
     */
	public function tagmanagerAccountsUserPermissionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a user's Account & Container access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetResponse
     */
	public function tagmanagerAccountsUserPermissionsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all users that have access to the account along with Account and Container user access granted to each of them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListResponse
     */
	public function tagmanagerAccountsUserPermissionsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{parent}/user_permissions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUserPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a user's Account & Container access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateResponse
     */
	public function tagmanagerAccountsUserPermissionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v2/{path}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userPermission", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUserPermissionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPermission', 'json');
            }
        }

        return $response;
    }
}