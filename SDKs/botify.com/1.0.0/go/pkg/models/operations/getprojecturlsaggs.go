// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetProjectUrlsAggsAreaEnum - Analysis context to execute the queries
type GetProjectUrlsAggsAreaEnum string

const (
	GetProjectUrlsAggsAreaEnumCurrent     GetProjectUrlsAggsAreaEnum = "current"
	GetProjectUrlsAggsAreaEnumDisappeared GetProjectUrlsAggsAreaEnum = "disappeared"
	GetProjectUrlsAggsAreaEnumNew         GetProjectUrlsAggsAreaEnum = "new"
)

func (e GetProjectUrlsAggsAreaEnum) ToPointer() *GetProjectUrlsAggsAreaEnum {
	return &e
}

func (e *GetProjectUrlsAggsAreaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "disappeared":
		fallthrough
	case "new":
		*e = GetProjectUrlsAggsAreaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectUrlsAggsAreaEnum: %v", v)
	}
}

type GetProjectUrlsAggsRequest struct {
	RequestBody []shared.UrlsAggsQuery `request:"mediaType=application/json"`
	// Analysis context to execute the queries
	Area *GetProjectUrlsAggsAreaEnum `queryParam:"style=form,explode=true,name=area"`
	// Last analysis on the trend
	LastAnalysisSlug *string `queryParam:"style=form,explode=true,name=last_analysis_slug"`
	// Max number of analysis to return
	NbAnalyses *int `queryParam:"style=form,explode=true,name=nb_analyses"`
	// Project's identifier
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project_slug"`
	// User's identifier
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type GetProjectUrlsAggsResponse struct {
	ContentType string
	// Successful operation
	Default map[string]interface{}
	// error payload
	DefaultPayload *shared.DefaultPayload
	StatusCode     int
	RawResponse    *http.Response
}
