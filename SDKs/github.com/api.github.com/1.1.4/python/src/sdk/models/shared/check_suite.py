"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import minimal_repository as shared_minimal_repository
from ..shared import nullable_integration as shared_nullable_integration
from ..shared import pull_request_minimal as shared_pull_request_minimal
from ..shared import simple_commit as shared_simple_commit
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CheckSuiteConclusionEnum(str, Enum):
    SUCCESS = 'success'
    FAILURE = 'failure'
    NEUTRAL = 'neutral'
    CANCELLED = 'cancelled'
    SKIPPED = 'skipped'
    TIMED_OUT = 'timed_out'
    ACTION_REQUIRED = 'action_required'
    STARTUP_FAILURE = 'startup_failure'
    STALE = 'stale'
    NULL = 'null'

class CheckSuiteStatusEnum(str, Enum):
    QUEUED = 'queued'
    IN_PROGRESS = 'in_progress'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckSuite:
    r"""A suite of checks performed on the code of a given code change"""
    
    after: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('after') }})  
    app: shared_nullable_integration.NullableIntegration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app') }})
    r"""GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub."""  
    before: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('before') }})  
    check_runs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_runs_url') }})  
    conclusion: CheckSuiteConclusionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conclusion') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    head_branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_branch') }})  
    head_commit: shared_simple_commit.SimpleCommit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_commit') }})
    r"""A commit."""  
    head_sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_sha') }})
    r"""The SHA of the head commit that is being checked."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    latest_check_runs_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latest_check_runs_count') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    pull_requests: list[shared_pull_request_minimal.PullRequestMinimal] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_requests') }})  
    repository: shared_minimal_repository.MinimalRepository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""Minimal Repository"""  
    status: CheckSuiteStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    rerequestable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rerequestable'), 'exclude': lambda f: f is None }})  
    runs_rerequestable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runs_rerequestable'), 'exclude': lambda f: f is None }})  
    