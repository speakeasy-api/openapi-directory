"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class AuthConfig:
    r"""Everything about Otoroshi global auth. module config"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_global_auth_module(self, request: Any, security: operations.CreateGlobalAuthModuleSecurity) -> operations.CreateGlobalAuthModuleResponse:
        r"""Create one global auth. module config
        Create one global auth. module config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/auths'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGlobalAuthModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.create_global_auth_module_200_application_json_one_of = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_global_auth_module(self, request: operations.DeleteGlobalAuthModuleRequest, security: operations.DeleteGlobalAuthModuleSecurity) -> operations.DeleteGlobalAuthModuleResponse:
        r"""Delete one global auth. module config
        Delete one global auth. module config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGlobalAuthModuleRequest, base_url, '/api/auths/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGlobalAuthModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_all_global_auth_modules(self) -> operations.FindAllGlobalAuthModulesResponse:
        r"""Get all global auth. module configs
        Get all global auth. module configs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/auths'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllGlobalAuthModulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.find_all_global_auth_modules_200_application_json_oneoves = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_global_auth_module_by_id(self, request: operations.FindGlobalAuthModuleByIDRequest, security: operations.FindGlobalAuthModuleByIDSecurity) -> operations.FindGlobalAuthModuleByIDResponse:
        r"""Get one global auth. module configs
        Get one global auth. module configs
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindGlobalAuthModuleByIDRequest, base_url, '/api/auths/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindGlobalAuthModuleByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.find_global_auth_module_by_id_200_application_json_one_of = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_global_auth_module(self, request: operations.PatchGlobalAuthModuleRequest, security: operations.PatchGlobalAuthModuleSecurity) -> operations.PatchGlobalAuthModuleResponse:
        r"""Update one global auth. module config
        Update one global auth. module config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchGlobalAuthModuleRequest, base_url, '/api/auths/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchGlobalAuthModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.patch_global_auth_module_200_application_json_one_of = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_global_auth_module(self, request: operations.UpdateGlobalAuthModuleRequest, security: operations.UpdateGlobalAuthModuleSecurity) -> operations.UpdateGlobalAuthModuleResponse:
        r"""Update one global auth. module config
        Update one global auth. module config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGlobalAuthModuleRequest, base_url, '/api/auths/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalAuthModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.update_global_auth_module_200_application_json_one_of = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    