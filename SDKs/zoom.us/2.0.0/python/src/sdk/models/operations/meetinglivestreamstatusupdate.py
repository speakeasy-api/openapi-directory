"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MeetingLiveStreamStatusUpdateSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class MeetingLiveStreamStatusUpdateApplicationJSONActionEnum(str, Enum):
    r"""Update the status of a livestream.
    
    The value can be one of the following:<br>
    `start`: Start a live stream. <br>
    `stop`: Stop an ongoing live stream.
    """
    START = 'start'
    STOP = 'stop'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingLiveStreamStatusUpdateApplicationJSONSettings:
    r"""Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream."""
    
    active_speaker_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_speaker_name'), 'exclude': lambda f: f is None }})
    r"""Display the name of the active speaker during a live stream."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name of the live stream."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingLiveStreamStatusUpdateApplicationJSON:
    r"""Meeting live stream status."""
    
    action: Optional[MeetingLiveStreamStatusUpdateApplicationJSONActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Update the status of a livestream.
    
    The value can be one of the following:<br>
    `start`: Start a live stream. <br>
    `stop`: Stop an ongoing live stream.
    """  
    settings: Optional[MeetingLiveStreamStatusUpdateApplicationJSONSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    r"""Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream."""  
    

@dataclasses.dataclass
class MeetingLiveStreamStatusUpdateRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    request_body: MeetingLiveStreamStatusUpdateApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Meeting"""  
    

@dataclasses.dataclass
class MeetingLiveStreamStatusUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    