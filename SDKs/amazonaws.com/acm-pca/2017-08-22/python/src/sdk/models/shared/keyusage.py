"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KeyUsage:
    r"""Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false."""
    
    crl_sign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CRLSign'), 'exclude': lambda f: f is None }})  
    data_encipherment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataEncipherment'), 'exclude': lambda f: f is None }})  
    decipher_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DecipherOnly'), 'exclude': lambda f: f is None }})  
    digital_signature: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalSignature'), 'exclude': lambda f: f is None }})  
    encipher_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncipherOnly'), 'exclude': lambda f: f is None }})  
    key_agreement: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyAgreement'), 'exclude': lambda f: f is None }})  
    key_cert_sign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyCertSign'), 'exclude': lambda f: f is None }})  
    key_encipherment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyEncipherment'), 'exclude': lambda f: f is None }})  
    non_repudiation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonRepudiation'), 'exclude': lambda f: f is None }})  
    