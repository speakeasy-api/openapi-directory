/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Person - Successful response
 */
public class Person {
    /**
     * A short biography for this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aboutMe")
    public String aboutMe;
    public Person withAboutMe(String aboutMe) {
        this.aboutMe = aboutMe;
        return this;
    }
    
    /**
     * The age range of the person. Valid ranges are 17 or younger, 18 to 20, and 21 or older. Age is determined from the user's birthday using Western age reckoning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ageRange")
    public PersonAgeRange ageRange;
    public Person withAgeRange(PersonAgeRange ageRange) {
        this.ageRange = ageRange;
        return this;
    }
    
    /**
     * The person's date of birth, represented as YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    public String birthday;
    public Person withBirthday(String birthday) {
        this.birthday = birthday;
        return this;
    }
    
    /**
     * The "bragging rights" line of this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("braggingRights")
    public String braggingRights;
    public Person withBraggingRights(String braggingRights) {
        this.braggingRights = braggingRights;
        return this;
    }
    
    /**
     * For followers who are visible, the number of people who have added this person or page to a circle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("circledByCount")
    public Integer circledByCount;
    public Person withCircledByCount(Integer circledByCount) {
        this.circledByCount = circledByCount;
        return this;
    }
    
    /**
     * The cover photo content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover")
    public PersonCover cover;
    public Person withCover(PersonCover cover) {
        this.cover = cover;
        return this;
    }
    
    /**
     * (this field is not currently used)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentLocation")
    public String currentLocation;
    public Person withCurrentLocation(String currentLocation) {
        this.currentLocation = currentLocation;
        return this;
    }
    
    /**
     * The name of this person, which is suitable for display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Person withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;
    public Person withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    public PersonEmails[] emails;
    public Person withEmails(PersonEmails[] emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * ETag of this response for caching purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Person withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The person's gender. Possible values include, but are not limited to, the following values:  
     * - "male" - Male gender. 
     * - "female" - Female gender. 
     * - "other" - Other.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    public String gender;
    public Person withGender(String gender) {
        this.gender = gender;
        return this;
    }
    
    /**
     * The ID of this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Person withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The representation of the person's profile photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public PersonImage image;
    public Person withImage(PersonImage image) {
        this.image = image;
        return this;
    }
    
    /**
     * Whether this user has signed up for Google+.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPlusUser")
    public Boolean isPlusUser;
    public Person withIsPlusUser(Boolean isPlusUser) {
        this.isPlusUser = isPlusUser;
        return this;
    }
    
    /**
     * Identifies this resource as a person. Value: "plus#person".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Person withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The user's preferred language for rendering.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public Person withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * An object representation of the individual components of a person's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public PersonName name;
    public Person withName(PersonName name) {
        this.name = name;
        return this;
    }
    
    /**
     * The nickname of this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    public String nickname;
    public Person withNickname(String nickname) {
        this.nickname = nickname;
        return this;
    }
    
    /**
     * Type of person within Google+. Possible values include, but are not limited to, the following values:  
     * - "person" - represents an actual person. 
     * - "page" - represents a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    public String objectType;
    public Person withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * The occupation of this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("occupation")
    public String occupation;
    public Person withOccupation(String occupation) {
        this.occupation = occupation;
        return this;
    }
    
    /**
     * A list of current or past organizations with which this person is associated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizations")
    public PersonOrganizations[] organizations;
    public Person withOrganizations(PersonOrganizations[] organizations) {
        this.organizations = organizations;
        return this;
    }
    
    /**
     * A list of places where this person has lived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placesLived")
    public PersonPlacesLived[] placesLived;
    public Person withPlacesLived(PersonPlacesLived[] placesLived) {
        this.placesLived = placesLived;
        return this;
    }
    
    /**
     * If a Google+ Page, the number of people who have +1'd this page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plusOneCount")
    public Integer plusOneCount;
    public Person withPlusOneCount(Integer plusOneCount) {
        this.plusOneCount = plusOneCount;
        return this;
    }
    
    /**
     * The person's relationship status. Possible values include, but are not limited to, the following values:  
     * - "single" - Person is single. 
     * - "in_a_relationship" - Person is in a relationship. 
     * - "engaged" - Person is engaged. 
     * - "married" - Person is married. 
     * - "its_complicated" - The relationship is complicated. 
     * - "open_relationship" - Person is in an open relationship. 
     * - "widowed" - Person is widowed. 
     * - "in_domestic_partnership" - Person is in a domestic partnership. 
     * - "in_civil_union" - Person is in a civil union.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationshipStatus")
    public String relationshipStatus;
    public Person withRelationshipStatus(String relationshipStatus) {
        this.relationshipStatus = relationshipStatus;
        return this;
    }
    
    /**
     * The person's skills.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skills")
    public String skills;
    public Person withSkills(String skills) {
        this.skills = skills;
        return this;
    }
    
    /**
     * The brief description (tagline) of this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    public String tagline;
    public Person withTagline(String tagline) {
        this.tagline = tagline;
        return this;
    }
    
    /**
     * The URL of this person's profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public Person withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * A list of URLs for this person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urls")
    public PersonUrls[] urls;
    public Person withUrls(PersonUrls[] urls) {
        this.urls = urls;
        return this;
    }
    
    /**
     * Whether the person or Google+ Page has been verified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    public Boolean verified;
    public Person withVerified(Boolean verified) {
        this.verified = verified;
        return this;
    }
    
}
