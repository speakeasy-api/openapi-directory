/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The frequency with which the source data will be analyzed for anomalies.
 */
export enum CreateMetricSetRequestBodyMetricSetFrequencyEnum {
  P1D = "P1D",
  Pt1H = "PT1H",
  Pt10M = "PT10M",
  Pt5M = "PT5M",
}

/**
 * Contains information about source data used to generate metrics.
 */
export class CreateMetricSetRequestBodyMetricSource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AppFlowConfig" })
  @Type(() => shared.AppFlowConfig)
  appFlowConfig?: shared.AppFlowConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "AthenaSourceConfig" })
  @Type(() => shared.AthenaSourceConfig)
  athenaSourceConfig?: shared.AthenaSourceConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchConfig" })
  @Type(() => shared.CloudWatchConfig)
  cloudWatchConfig?: shared.CloudWatchConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "RDSSourceConfig" })
  @Type(() => shared.RDSSourceConfig)
  rdsSourceConfig?: shared.RDSSourceConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftSourceConfig" })
  @Type(() => shared.RedshiftSourceConfig)
  redshiftSourceConfig?: shared.RedshiftSourceConfig;

  /**
   * Contains information about the configuration of the S3 bucket that contains source files.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3SourceConfig" })
  @Type(() => shared.S3SourceConfig)
  s3SourceConfig?: shared.S3SourceConfig;
}

/**
 * Contains information about the column used to track time in a source data file.
 */
export class CreateMetricSetRequestBodyTimestampColumn extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ColumnFormat" })
  columnFormat?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ColumnName" })
  columnName?: string;
}

export class CreateMetricSetRequestBody extends SpeakeasyBase {
  /**
   * The ARN of the anomaly detector that will use the dataset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnomalyDetectorArn" })
  anomalyDetectorArn: string;

  /**
   * A list of filters that specify which data is kept for anomaly detection.
   */
  @SpeakeasyMetadata({ elemType: shared.MetricSetDimensionFilter })
  @Expose({ name: "DimensionFilterList" })
  @Type(() => shared.MetricSetDimensionFilter)
  dimensionFilterList?: shared.MetricSetDimensionFilter[];

  /**
   * A list of the fields you want to treat as dimensions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DimensionList" })
  dimensionList?: string[];

  /**
   * A list of metrics that the dataset will contain.
   */
  @SpeakeasyMetadata({ elemType: shared.Metric })
  @Expose({ name: "MetricList" })
  @Type(() => shared.Metric)
  metricList: shared.Metric[];

  /**
   * A description of the dataset you are creating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetricSetDescription" })
  metricSetDescription?: string;

  /**
   * The frequency with which the source data will be analyzed for anomalies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetricSetFrequency" })
  metricSetFrequency?: CreateMetricSetRequestBodyMetricSetFrequencyEnum;

  /**
   * The name of the dataset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetricSetName" })
  metricSetName: string;

  /**
   * Contains information about source data used to generate metrics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetricSource" })
  @Type(() => CreateMetricSetRequestBodyMetricSource)
  metricSource: CreateMetricSetRequestBodyMetricSource;

  /**
   * After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Offset" })
  offset?: number;

  /**
   * A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   * Contains information about the column used to track time in a source data file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TimestampColumn" })
  @Type(() => CreateMetricSetRequestBodyTimestampColumn)
  timestampColumn?: CreateMetricSetRequestBodyTimestampColumn;

  /**
   * The time zone in which your source data was recorded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Timezone" })
  timezone?: string;
}

export class CreateMetricSetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateMetricSetRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateMetricSetResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createMetricSetResponse?: shared.CreateMetricSetResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
