// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetDiscoveryV2VenuesIncludeLicensedContentEnum - Yes if you want to display licensed content
type GetDiscoveryV2VenuesIncludeLicensedContentEnum string

const (
	GetDiscoveryV2VenuesIncludeLicensedContentEnumYes GetDiscoveryV2VenuesIncludeLicensedContentEnum = "yes"
	GetDiscoveryV2VenuesIncludeLicensedContentEnumNo  GetDiscoveryV2VenuesIncludeLicensedContentEnum = " no"
)

func (e GetDiscoveryV2VenuesIncludeLicensedContentEnum) ToPointer() *GetDiscoveryV2VenuesIncludeLicensedContentEnum {
	return &e
}

func (e *GetDiscoveryV2VenuesIncludeLicensedContentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2VenuesIncludeLicensedContentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2VenuesIncludeLicensedContentEnum: %v", v)
	}
}

// GetDiscoveryV2VenuesIncludeSpellcheckEnum - yes, to include spell check suggestions in the response.
type GetDiscoveryV2VenuesIncludeSpellcheckEnum string

const (
	GetDiscoveryV2VenuesIncludeSpellcheckEnumYes GetDiscoveryV2VenuesIncludeSpellcheckEnum = "yes"
	GetDiscoveryV2VenuesIncludeSpellcheckEnumNo  GetDiscoveryV2VenuesIncludeSpellcheckEnum = " no"
)

func (e GetDiscoveryV2VenuesIncludeSpellcheckEnum) ToPointer() *GetDiscoveryV2VenuesIncludeSpellcheckEnum {
	return &e
}

func (e *GetDiscoveryV2VenuesIncludeSpellcheckEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2VenuesIncludeSpellcheckEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2VenuesIncludeSpellcheckEnum: %v", v)
	}
}

// GetDiscoveryV2VenuesIncludeTestEnum - True if you want to have entities flag as test in the response. Only, if you only wanted test entities
type GetDiscoveryV2VenuesIncludeTestEnum string

const (
	GetDiscoveryV2VenuesIncludeTestEnumYes  GetDiscoveryV2VenuesIncludeTestEnum = "yes"
	GetDiscoveryV2VenuesIncludeTestEnumNo   GetDiscoveryV2VenuesIncludeTestEnum = " no"
	GetDiscoveryV2VenuesIncludeTestEnumOnly GetDiscoveryV2VenuesIncludeTestEnum = " only"
)

func (e GetDiscoveryV2VenuesIncludeTestEnum) ToPointer() *GetDiscoveryV2VenuesIncludeTestEnum {
	return &e
}

func (e *GetDiscoveryV2VenuesIncludeTestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2VenuesIncludeTestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2VenuesIncludeTestEnum: %v", v)
	}
}

// GetDiscoveryV2VenuesSourceEnum - Filter entities by its source name
type GetDiscoveryV2VenuesSourceEnum string

const (
	GetDiscoveryV2VenuesSourceEnumTicketmaster GetDiscoveryV2VenuesSourceEnum = "ticketmaster"
	GetDiscoveryV2VenuesSourceEnumUniverse     GetDiscoveryV2VenuesSourceEnum = " universe"
	GetDiscoveryV2VenuesSourceEnumFrontgate    GetDiscoveryV2VenuesSourceEnum = " frontgate"
	GetDiscoveryV2VenuesSourceEnumTmr          GetDiscoveryV2VenuesSourceEnum = " tmr"
)

func (e GetDiscoveryV2VenuesSourceEnum) ToPointer() *GetDiscoveryV2VenuesSourceEnum {
	return &e
}

func (e *GetDiscoveryV2VenuesSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ticketmaster":
		fallthrough
	case " universe":
		fallthrough
	case " frontgate":
		fallthrough
	case " tmr":
		*e = GetDiscoveryV2VenuesSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2VenuesSourceEnum: %v", v)
	}
}

// GetDiscoveryV2VenuesUnitEnum - Unit of the radius
type GetDiscoveryV2VenuesUnitEnum string

const (
	GetDiscoveryV2VenuesUnitEnumMiles GetDiscoveryV2VenuesUnitEnum = "miles"
	GetDiscoveryV2VenuesUnitEnumKm    GetDiscoveryV2VenuesUnitEnum = "km"
)

func (e GetDiscoveryV2VenuesUnitEnum) ToPointer() *GetDiscoveryV2VenuesUnitEnum {
	return &e
}

func (e *GetDiscoveryV2VenuesUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "miles":
		fallthrough
	case "km":
		*e = GetDiscoveryV2VenuesUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2VenuesUnitEnum: %v", v)
	}
}

type GetDiscoveryV2VenuesRequest struct {
	// Filter venues by country code
	CountryCode *string `queryParam:"style=form,explode=true,name=countryCode"`
	// filter events by geoHash
	GeoPoint *string `queryParam:"style=form,explode=true,name=geoPoint"`
	// Filter entities by its id
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Yes if you want to display licensed content
	IncludeLicensedContent *GetDiscoveryV2VenuesIncludeLicensedContentEnum `queryParam:"style=form,explode=true,name=includeLicensedContent"`
	// yes, to include spell check suggestions in the response.
	IncludeSpellcheck *GetDiscoveryV2VenuesIncludeSpellcheckEnum `queryParam:"style=form,explode=true,name=includeSpellcheck"`
	// True if you want to have entities flag as test in the response. Only, if you only wanted test entities
	IncludeTest *GetDiscoveryV2VenuesIncludeTestEnum `queryParam:"style=form,explode=true,name=includeTest"`
	// Keyword to search on
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
	Latlong *string `queryParam:"style=form,explode=true,name=latlong"`
	// The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Page number
	Page *string `queryParam:"style=form,explode=true,name=page"`
	// Radius of the area in which we want to search for events.
	Radius *string `queryParam:"style=form,explode=true,name=radius"`
	// Page size of the response
	Size *string `queryParam:"style=form,explode=true,name=size"`
	// Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Filter entities by its source name
	Source *GetDiscoveryV2VenuesSourceEnum `queryParam:"style=form,explode=true,name=source"`
	// Filter venues by state / province code
	StateCode *string `queryParam:"style=form,explode=true,name=stateCode"`
	// Unit of the radius
	Unit *GetDiscoveryV2VenuesUnitEnum `queryParam:"style=form,explode=true,name=unit"`
}

type GetDiscoveryV2VenuesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
