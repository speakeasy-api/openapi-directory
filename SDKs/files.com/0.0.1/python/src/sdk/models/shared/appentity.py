"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class AppEntityAppTypeEnum(str, Enum):
    r"""The type of the App"""
    SDK = 'sdk'
    SSO = 'sso'
    REMOTE_SERVER = 'remote_server'
    FOLDER_BEHAVIOR = 'folder_behavior'
    CLIENT_APP = 'client_app'
    APP_INTEGRATION = 'app_integration'

class AppEntityFolderBehaviorTypeEnum(str, Enum):
    r"""Associated Folder Behavior type, if any"""
    WEBHOOK = 'webhook'
    FILE_EXPIRATION = 'file_expiration'
    AUTO_ENCRYPT = 'auto_encrypt'
    LOCK_SUBFOLDERS = 'lock_subfolders'
    STORAGE_REGION = 'storage_region'
    SERVE_PUBLICLY = 'serve_publicly'
    CREATE_USER_FOLDERS = 'create_user_folders'
    REMOTE_SERVER_SYNC = 'remote_server_sync'
    INBOX = 'inbox'
    APPEND_TIMESTAMP = 'append_timestamp'
    LIMIT_FILE_EXTENSIONS = 'limit_file_extensions'
    LIMIT_FILE_REGEX = 'limit_file_regex'
    AMAZON_SNS = 'amazon_sns'
    WATERMARK = 'watermark'
    REMOTE_SERVER_MOUNT = 'remote_server_mount'
    SLACK_WEBHOOK = 'slack_webhook'
    AUTO_DECRYPT = 'auto_decrypt'
    OVERRIDE_UPLOAD_FILENAME = 'override_upload_filename'

class AppEntityRemoteServerTypeEnum(str, Enum):
    r"""Associated Remote Server type, if any"""
    FTP = 'ftp'
    SFTP = 'sftp'
    S3 = 's3'
    GOOGLE_CLOUD_STORAGE = 'google_cloud_storage'
    WEBDAV = 'webdav'
    WASABI = 'wasabi'
    BACKBLAZE_B2 = 'backblaze_b2'
    ONE_DRIVE = 'one_drive'
    RACKSPACE = 'rackspace'
    BOX = 'box'
    DROPBOX = 'dropbox'
    GOOGLE_DRIVE = 'google_drive'
    AZURE = 'azure'
    SHAREPOINT = 'sharepoint'
    S3_COMPATIBLE = 's3_compatible'
    AZURE_FILES = 'azure_files'
    FILES_AGENT = 'files_agent'
    FILEBASE = 'filebase'

class AppEntitySsoStrategyTypeEnum(str, Enum):
    r"""Associated SSO Strategy type, if any"""
    GOOGLE = 'google'
    AUTH0 = 'auth0'
    OKTA = 'okta'
    ATLASSIAN = 'atlassian'
    AZURE = 'azure'
    BOX = 'box'
    DROPBOX = 'dropbox'
    SLACK = 'slack'
    UNUSED_UBUNTU = '_unused_ubuntu'
    ONELOGIN = 'onelogin'
    SAML = 'saml'
    IDAPTIVE = 'idaptive'
    LDAP = 'ldap'
    SCIM = 'scim'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppEntity:
    r"""List Apps"""
    
    app_type: Optional[AppEntityAppTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_type'), 'exclude': lambda f: f is None }})
    r"""The type of the App"""  
    documentation_links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_links'), 'exclude': lambda f: f is None }})
    r"""Collection of named links to documentation"""  
    extended_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extended_description'), 'exclude': lambda f: f is None }})
    r"""Long form description of the App"""  
    external_homepage_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_homepage_url'), 'exclude': lambda f: f is None }})
    r"""Link to external homepage"""  
    featured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured'), 'exclude': lambda f: f is None }})
    r"""Is featured on the App listing?"""  
    folder_behavior_type: Optional[AppEntityFolderBehaviorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder_behavior_type'), 'exclude': lambda f: f is None }})
    r"""Associated Folder Behavior type, if any"""  
    icon_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon_url'), 'exclude': lambda f: f is None }})
    r"""App icon"""  
    logo_thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_thumbnail_url'), 'exclude': lambda f: f is None }})
    r"""Logo thumbnail for the App"""  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_url'), 'exclude': lambda f: f is None }})
    r"""Full size logo for the App"""  
    marketing_youtube_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketing_youtube_url'), 'exclude': lambda f: f is None }})
    r"""Marketing video page"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the App"""  
    remote_server_type: Optional[AppEntityRemoteServerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_server_type'), 'exclude': lambda f: f is None }})
    r"""Associated Remote Server type, if any"""  
    screenshot_list_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenshot_list_urls'), 'exclude': lambda f: f is None }})
    r"""Screenshots of the App"""  
    short_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_description'), 'exclude': lambda f: f is None }})
    r"""Short description of the App"""  
    sso_strategy_type: Optional[AppEntitySsoStrategyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sso_strategy_type'), 'exclude': lambda f: f is None }})
    r"""Associated SSO Strategy type, if any"""  
    tutorial_youtube_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tutorial_youtube_url'), 'exclude': lambda f: f is None }})
    r"""Tutorial video page"""  
    