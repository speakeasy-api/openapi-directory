"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_matchedstop as shared_tfl_api_presentation_entities_matchedstop
from ..shared import tfl_api_presentation_entities_timetable as shared_tfl_api_presentation_entities_timetable
from ..shared import tfl_api_presentation_entities_timetables_disambiguation as shared_tfl_api_presentation_entities_timetables_disambiguation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesTimetableResponse:
    r"""OK"""
    
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})  
    disambiguation: Optional[shared_tfl_api_presentation_entities_timetables_disambiguation.TflAPIPresentationEntitiesTimetablesDisambiguation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disambiguation'), 'exclude': lambda f: f is None }})  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})  
    line_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineName'), 'exclude': lambda f: f is None }})  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdfUrl'), 'exclude': lambda f: f is None }})  
    stations: Optional[list[shared_tfl_api_presentation_entities_matchedstop.TflAPIPresentationEntitiesMatchedStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stations'), 'exclude': lambda f: f is None }})  
    status_error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusErrorMessage'), 'exclude': lambda f: f is None }})  
    stops: Optional[list[shared_tfl_api_presentation_entities_matchedstop.TflAPIPresentationEntitiesMatchedStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stops'), 'exclude': lambda f: f is None }})  
    timetable: Optional[shared_tfl_api_presentation_entities_timetable.TflAPIPresentationEntitiesTimetable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timetable'), 'exclude': lambda f: f is None }})  
    