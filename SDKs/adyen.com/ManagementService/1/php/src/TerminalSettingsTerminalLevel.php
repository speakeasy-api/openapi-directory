<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TerminalSettingsTerminalLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the terminal logo
     * 
     * Returns the logo that is configured for the payment terminal identified in the path.
     * The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal settings read
     * * Management API—Terminal settings read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosResponse
     */
	public function getTerminalsTerminalIdTerminalLogos(
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/terminals/{terminalId}/terminalLogos', \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalLogosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->logo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Logo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get terminal settings
     * 
     * Returns the settings that are configured for the payment terminal identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal settings read
     * * Management API—Terminal settings read and write
     * 
     * For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:
     * * Management API—Terminal settings Advanced read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsResponse
     */
	public function getTerminalsTerminalIdTerminalSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/terminals/{terminalId}/terminalSettings', \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTerminalsTerminalIdTerminalSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalSettings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the logo
     * 
     * Updates the logo for the payment terminal identified in the path.
     * 
     * * To change the logo, specify the image file as a Base64-encoded string.
     * * To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal settings read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosResponse
     */
	public function patchTerminalsTerminalIdTerminalLogos(
        \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/terminals/{terminalId}/terminalLogos', \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "logo", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalLogosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->logo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Logo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update terminal settings
     * 
     * Updates the settings that are configured for the payment terminal identified in the path.
     * 
     * * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.
     * * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.
     * * Objects that are not included in the request are not updated.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal settings read and write
     * 
     * For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:
     * * Management API—Terminal settings Advanced read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsResponse
     */
	public function patchTerminalsTerminalIdTerminalSettings(
        \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/terminals/{terminalId}/terminalSettings', \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "terminalSettings", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTerminalsTerminalIdTerminalSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalSettings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}