/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Channel - A `Channel` represents a stream of releases for a site. All sites have a default `live` channel that serves content to the Firebase-provided subdomains and any connected custom domains.
 */
public class Channel {
    /**
     * Output only. The time at which the channel was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Channel withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;

    public Channel withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * Text labels used for extra metadata and/or filtering.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Channel withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Channel withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("release")
    public Release release;

    public Channel withRelease(Release release) {
        this.release = release;
        return this;
    }
    
    /**
     * The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retainedReleaseCount")
    public Integer retainedReleaseCount;

    public Channel withRetainedReleaseCount(Integer retainedReleaseCount) {
        this.retainedReleaseCount = retainedReleaseCount;
        return this;
    }
    
    /**
     * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    public String ttl;

    public Channel withTtl(String ttl) {
        this.ttl = ttl;
        return this;
    }
    
    /**
     * Output only. The time at which the channel was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Channel withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Channel withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public Channel(){}
}
