"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import offset as shared_offset
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TitleAssetPositionEnum(str, Enum):
    r"""Place the title in one of nine predefined positions of the viewport. <ul>
      <li>`top` - top (center)</li>
      <li>`topRight` - top right</li>
      <li>`right` - right (center)</li>
      <li>`bottomRight` - bottom right</li>
      <li>`bottom` - bottom (center)</li>
      <li>`bottomLeft` - bottom left</li>
      <li>`left` - left (center)</li>
      <li>`topLeft` - top left</li>
      <li>`center` - center</li>
    </ul>
    """
    TOP = 'top'
    TOP_RIGHT = 'topRight'
    RIGHT = 'right'
    BOTTOM_RIGHT = 'bottomRight'
    BOTTOM = 'bottom'
    BOTTOM_LEFT = 'bottomLeft'
    LEFT = 'left'
    TOP_LEFT = 'topLeft'
    CENTER = 'center'

class TitleAssetSizeEnum(str, Enum):
    r"""Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>
      <li>`xx-small`</li>
      <li>`x-small`</li>
      <li>`small`</li>
      <li>`medium`</li>
      <li>`large`</li>
      <li>`x-large`</li>
      <li>`xx-large`</li>
    </ul>
    """
    XX_SMALL = 'xx-small'
    X_SMALL = 'x-small'
    SMALL = 'small'
    MEDIUM = 'medium'
    LARGE = 'large'
    X_LARGE = 'x-large'
    XX_LARGE = 'xx-large'

class TitleAssetStyleEnum(str, Enum):
    r"""Uses a preset to apply font properties and styling to the title. <ul>
      <li>`minimal`</li>
      <li>`blockbuster`</li>
      <li>`vogue`</li>
      <li>`sketchy`</li>
      <li>`skinny`</li>
      <li>`chunk`</li>
      <li>`chunkLight`</li>
      <li>`marker`</li>
      <li>`future`</li>
      <li>`subtitle`</li>
    </ul>
    """
    MINIMAL = 'minimal'
    BLOCKBUSTER = 'blockbuster'
    VOGUE = 'vogue'
    SKETCHY = 'sketchy'
    SKINNY = 'skinny'
    CHUNK = 'chunk'
    CHUNK_LIGHT = 'chunkLight'
    MARKER = 'marker'
    FUTURE = 'future'
    SUBTITLE = 'subtitle'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TitleAsset:
    r"""The TitleAsset clip type lets you create video titles from a text string and apply styling and positioning."""
    
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The title text string - i.e. \\"My Title\\"."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of asset - set to `title` for titles."""  
    background: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('background'), 'exclude': lambda f: f is None }})
    r"""Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background."""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency."""  
    offset: Optional[shared_offset.Offset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Offsets the position of an asset horizontally or vertically by a relative distance."""  
    position: Optional[TitleAssetPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Place the title in one of nine predefined positions of the viewport. <ul>
      <li>`top` - top (center)</li>
      <li>`topRight` - top right</li>
      <li>`right` - right (center)</li>
      <li>`bottomRight` - bottom right</li>
      <li>`bottom` - bottom (center)</li>
      <li>`bottomLeft` - bottom left</li>
      <li>`left` - left (center)</li>
      <li>`topLeft` - top left</li>
      <li>`center` - center</li>
    </ul>
    """  
    size: Optional[TitleAssetSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>
      <li>`xx-small`</li>
      <li>`x-small`</li>
      <li>`small`</li>
      <li>`medium`</li>
      <li>`large`</li>
      <li>`x-large`</li>
      <li>`xx-large`</li>
    </ul>
    """  
    style: Optional[TitleAssetStyleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('style'), 'exclude': lambda f: f is None }})
    r"""Uses a preset to apply font properties and styling to the title. <ul>
      <li>`minimal`</li>
      <li>`blockbuster`</li>
      <li>`vogue`</li>
      <li>`sketchy`</li>
      <li>`skinny`</li>
      <li>`chunk`</li>
      <li>`chunkLight`</li>
      <li>`marker`</li>
      <li>`future`</li>
      <li>`subtitle`</li>
    </ul>
    """  
    