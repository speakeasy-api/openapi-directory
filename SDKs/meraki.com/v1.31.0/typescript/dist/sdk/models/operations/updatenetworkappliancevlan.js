"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkApplianceVlanResponse = exports.UpdateNetworkApplianceVlan200ApplicationJSON = exports.UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges = exports.UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6 = exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = exports.UpdateNetworkApplianceVlanRequest = exports.UpdateNetworkApplianceVlanRequestBody = exports.UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyReservedIpRanges = exports.UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp = exports.UpdateNetworkApplianceVlanRequestBodyIpv6 = exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments = exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin = exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpOptions = exports.UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
 */
var UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum;
(function (UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum) {
    UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum["DoNotRespondToDHCPRequests"] = "Do not respond to DHCP requests";
    UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum["RelayDHCPToAnotherServer"] = "Relay DHCP to another server";
    UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum["RunADHCPServer"] = "Run a DHCP server";
})(UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum || (exports.UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = {}));
/**
 * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
 */
var UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum;
(function (UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum) {
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["OneDay"] = "1 day";
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["OneHour"] = "1 hour";
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["OneWeek"] = "1 week";
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["TwelveHours"] = "12 hours";
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["ThirtyMinutes"] = "30 minutes";
    UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum["FourHours"] = "4 hours";
})(UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum || (exports.UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = {}));
/**
 * The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
 */
var UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum;
(function (UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum) {
    UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum["Hex"] = "hex";
    UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum["Integer"] = "integer";
    UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum["Ip"] = "ip";
    UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum["Text"] = "text";
})(UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum || (exports.UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = {}));
var UpdateNetworkApplianceVlanRequestBodyDhcpOptions = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyDhcpOptions, _super);
    function UpdateNetworkApplianceVlanRequestBodyDhcpOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyDhcpOptions.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyDhcpOptions.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyDhcpOptions.prototype, "value", void 0);
    return UpdateNetworkApplianceVlanRequestBodyDhcpOptions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyDhcpOptions = UpdateNetworkApplianceVlanRequestBodyDhcpOptions;
/**
 * Type of the origin
 */
var UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum;
(function (UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum) {
    UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum["Independent"] = "independent";
    UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum["Internet"] = "internet";
})(UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum || (exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = {}));
/**
 * The origin of the prefix
 */
var UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin, _super);
    function UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interfaces" }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin.prototype, "interfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin.prototype, "type", void 0);
    return UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin = UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin;
var UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments, _super);
    function UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autonomous" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments.prototype, "autonomous", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "origin" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin; }),
        __metadata("design:type", UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments.prototype, "origin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticApplianceIp6" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments.prototype, "staticApplianceIp6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticPrefix" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments.prototype, "staticPrefix", void 0);
    return UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments = UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments;
/**
 * IPv6 configuration on the VLAN
 */
var UpdateNetworkApplianceVlanRequestBodyIpv6 = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyIpv6, _super);
    function UpdateNetworkApplianceVlanRequestBodyIpv6() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments,
        }),
        (0, class_transformer_1.Expose)({ name: "prefixAssignments" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlanRequestBodyIpv6.prototype, "prefixAssignments", void 0);
    return UpdateNetworkApplianceVlanRequestBodyIpv6;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyIpv6 = UpdateNetworkApplianceVlanRequestBodyIpv6;
/**
 * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
var UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp, _super);
    function UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp.prototype, "enabled", void 0);
    return UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp = UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp;
var UpdateNetworkApplianceVlanRequestBodyReservedIpRanges = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBodyReservedIpRanges, _super);
    function UpdateNetworkApplianceVlanRequestBodyReservedIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyReservedIpRanges.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyReservedIpRanges.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBodyReservedIpRanges.prototype, "start", void 0);
    return UpdateNetworkApplianceVlanRequestBodyReservedIpRanges;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBodyReservedIpRanges = UpdateNetworkApplianceVlanRequestBodyReservedIpRanges;
/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 */
var UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum;
(function (UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum) {
    UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum["Same"] = "same";
    UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum["Unique"] = "unique";
})(UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum = exports.UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum || (exports.UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum = {}));
var UpdateNetworkApplianceVlanRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequestBody, _super);
    function UpdateNetworkApplianceVlanRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "applianceIp" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "applianceIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cidr" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootFilename" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpBootFilename", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootNextServer" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpBootNextServer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootOptionsEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpBootOptionsEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpHandling" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpHandling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpLeaseTime" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpLeaseTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlanRequestBodyDhcpOptions,
        }),
        (0, class_transformer_1.Expose)({ name: "dhcpOptions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyDhcpOptions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpRelayServerIps" }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dhcpRelayServerIps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsNameservers" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "dnsNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fixedIpAssignments" }),
        __metadata("design:type", Object)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "fixedIpAssignments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "groupPolicyId" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "groupPolicyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyIpv6; }),
        __metadata("design:type", UpdateNetworkApplianceVlanRequestBodyIpv6)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "ipv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandatoryDhcp" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp; }),
        __metadata("design:type", UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "mandatoryDhcp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mask" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "mask", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlanRequestBodyReservedIpRanges,
        }),
        (0, class_transformer_1.Expose)({ name: "reservedIpRanges" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlanRequestBodyReservedIpRanges; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "reservedIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "subnet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "templateVlanType" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "templateVlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnNatSubnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequestBody.prototype, "vpnNatSubnet", void 0);
    return UpdateNetworkApplianceVlanRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequestBody = UpdateNetworkApplianceVlanRequestBody;
var UpdateNetworkApplianceVlanRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanRequest, _super);
    function UpdateNetworkApplianceVlanRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkApplianceVlanRequestBody)
    ], UpdateNetworkApplianceVlanRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=vlanId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanRequest.prototype, "vlanId", void 0);
    return UpdateNetworkApplianceVlanRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanRequest = UpdateNetworkApplianceVlanRequest;
/**
 * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
 */
var UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum;
(function (UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum) {
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["DoNotRespondToDHCPRequests"] = "Do not respond to DHCP requests";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["RelayDHCPToAnotherServer"] = "Relay DHCP to another server";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["RunADHCPServer"] = "Run a DHCP server";
})(UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum || (exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = {}));
/**
 * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
 */
var UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum;
(function (UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum) {
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneDay"] = "1 day";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneHour"] = "1 hour";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneWeek"] = "1 week";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["TwelveHours"] = "12 hours";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["ThirtyMinutes"] = "30 minutes";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["FourHours"] = "4 hours";
})(UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum || (exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = {}));
/**
 * The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
 */
var UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum;
(function (UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum) {
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Hex"] = "hex";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Integer"] = "integer";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Ip"] = "ip";
    UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Text"] = "text";
})(UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum || (exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = {}));
var UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "value", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions = UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions;
/**
 * Type of the origin
 */
var UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum;
(function (UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) {
    UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum["Independent"] = "independent";
    UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum["Internet"] = "internet";
})(UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum || (exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = {}));
/**
 * The origin of the prefix
 */
var UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interfaces" }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin.prototype, "interfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin.prototype, "type", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin;
var UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autonomous" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "autonomous", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "origin" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin;
        }),
        __metadata("design:type", UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "origin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticApplianceIp6" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "staticApplianceIp6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticPrefix" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "staticPrefix", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments;
/**
 * IPv6 configuration on the VLAN
 */
var UpdateNetworkApplianceVlan200ApplicationJSONIpv6 = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONIpv6, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONIpv6() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments,
        }),
        (0, class_transformer_1.Expose)({ name: "prefixAssignments" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlan200ApplicationJSONIpv6.prototype, "prefixAssignments", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONIpv6;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONIpv6 = UpdateNetworkApplianceVlan200ApplicationJSONIpv6;
/**
 * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
var UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp.prototype, "enabled", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp;
var UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "start", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges = UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges;
/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 */
var UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum;
(function (UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum) {
    UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum["Same"] = "same";
    UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum["Unique"] = "unique";
})(UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = exports.UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum || (exports.UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = {}));
/**
 * Successful operation
 */
var UpdateNetworkApplianceVlan200ApplicationJSON = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlan200ApplicationJSON, _super);
    function UpdateNetworkApplianceVlan200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "applianceIp" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "applianceIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cidr" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootFilename" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootFilename", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootNextServer" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootNextServer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootOptionsEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootOptionsEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpHandling" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpHandling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpLeaseTime" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpLeaseTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions,
        }),
        (0, class_transformer_1.Expose)({ name: "dhcpOptions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpRelayServerIps" }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpRelayServerIps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsNameservers" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "dnsNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fixedIpAssignments" }),
        __metadata("design:type", Object)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "fixedIpAssignments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "groupPolicyId" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "groupPolicyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interfaceId" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "interfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlan200ApplicationJSONIpv6; }),
        __metadata("design:type", UpdateNetworkApplianceVlan200ApplicationJSONIpv6)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "ipv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandatoryDhcp" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp; }),
        __metadata("design:type", UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "mandatoryDhcp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mask" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "mask", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges,
        }),
        (0, class_transformer_1.Expose)({ name: "reservedIpRanges" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceVlan200ApplicationJSONReservedIpRanges; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "reservedIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "subnet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "templateVlanType" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "templateVlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnNatSubnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlan200ApplicationJSON.prototype, "vpnNatSubnet", void 0);
    return UpdateNetworkApplianceVlan200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlan200ApplicationJSON = UpdateNetworkApplianceVlan200ApplicationJSON;
var UpdateNetworkApplianceVlanResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceVlanResponse, _super);
    function UpdateNetworkApplianceVlanResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceVlanResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceVlanResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkApplianceVlanResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", UpdateNetworkApplianceVlan200ApplicationJSON)
    ], UpdateNetworkApplianceVlanResponse.prototype, "updateNetworkApplianceVlan200ApplicationJSONObject", void 0);
    return UpdateNetworkApplianceVlanResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceVlanResponse = UpdateNetworkApplianceVlanResponse;
