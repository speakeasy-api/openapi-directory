"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import playerscore as shared_playerscore
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PlayerScoreResponseBeatenScoreTimeSpansEnum(str, Enum):
    SCORE_TIME_SPAN_UNSPECIFIED = 'SCORE_TIME_SPAN_UNSPECIFIED'
    ALL_TIME = 'ALL_TIME'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayerScoreResponse:
    r"""A list of leaderboard entry resources."""
    
    beaten_score_time_spans: Optional[list[PlayerScoreResponseBeatenScoreTimeSpansEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beatenScoreTimeSpans'), 'exclude': lambda f: f is None }})
    r"""The time spans where the submitted score is better than the existing score for that time span."""  
    formatted_score: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedScore'), 'exclude': lambda f: f is None }})
    r"""The formatted value of the submitted score."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`."""  
    leaderboard_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaderboardId'), 'exclude': lambda f: f is None }})
    r"""The leaderboard ID that this score was submitted to."""  
    score_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreTag'), 'exclude': lambda f: f is None }})
    r"""Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."""  
    unbeaten_scores: Optional[list[shared_playerscore.PlayerScore]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unbeatenScores'), 'exclude': lambda f: f is None }})
    r"""The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans."""  
    