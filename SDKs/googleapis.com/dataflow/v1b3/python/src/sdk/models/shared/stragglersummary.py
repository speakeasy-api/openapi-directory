"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import straggler as shared_straggler
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StragglerSummary:
    r"""Summarized straggler identification details."""
    
    recent_stragglers: Optional[list[shared_straggler.Straggler]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recentStragglers'), 'exclude': lambda f: f is None }})
    r"""The most recent stragglers."""  
    straggler_cause_count: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stragglerCauseCount'), 'exclude': lambda f: f is None }})
    r"""Aggregated counts of straggler causes, keyed by the string representation of the StragglerCause enum."""  
    total_straggler_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalStragglerCount'), 'exclude': lambda f: f is None }})
    r"""The total count of stragglers."""  
    