"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import build as shared_build
from ..shared import listingfinance as shared_listingfinance
from ..shared import listinglease as shared_listinglease
from ..shared import listingnestextraattributes as shared_listingnestextraattributes
from ..shared import listingnestmedia as shared_listingnestmedia
from ..shared import nestdealer as shared_nestdealer
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Listing:
    r"""Represents a full list of attributes available with Marketcheck for a car"""
    
    base_ext_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_ext_color'), 'exclude': lambda f: f is None }})
    r"""Base exterior color of the car"""  
    base_int_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_int_color'), 'exclude': lambda f: f is None }})
    r"""Base interior color of the car"""  
    build: Optional[shared_build.Build] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Describes the Car specification"""  
    carfax_1_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_1_owner'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether listing is carfax_1_owner"""  
    carfax_clean_title: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_clean_title'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether listing is carfax_clean_title"""  
    data_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_source'), 'exclude': lambda f: f is None }})
    r"""Data source of the listing"""  
    dealer: Optional[shared_nestdealer.NestDealer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealer'), 'exclude': lambda f: f is None }})  
    dom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car"""  
    dom_180: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom_180'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car"""  
    dom_active: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom_active'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car"""  
    exterior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exterior_color'), 'exclude': lambda f: f is None }})
    r"""Exterior color of the car"""  
    extra: Optional[shared_listingnestextraattributes.ListingNestExtraAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra'), 'exclude': lambda f: f is None }})  
    financing_options: Optional[list[shared_listingfinance.ListingFinance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financing_options'), 'exclude': lambda f: f is None }})
    r"""Array of all finance offers for this listing"""  
    first_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped timestamp"""  
    first_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped date"""  
    first_seen_at_mc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_mc'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped at MC timestamp"""  
    first_seen_at_mc_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_mc_date'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped at MC date"""  
    first_seen_at_source: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_source'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at source relisted timestamp"""  
    first_seen_at_source_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_source_date'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at source relisted date"""  
    heading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heading'), 'exclude': lambda f: f is None }})
    r"""Listing title as displayed on the source website"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier representing a specific listing from the Marketcheck database"""  
    interior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interior_color'), 'exclude': lambda f: f is None }})
    r"""Interior color of the car"""  
    inventory_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory_type'), 'exclude': lambda f: f is None }})
    r"""Inventory type of car"""  
    is_certified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_certified'), 'exclude': lambda f: f is None }})
    r"""Certified car"""  
    last_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) timestamp"""  
    last_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) date"""  
    leasing_options: Optional[list[shared_listinglease.ListingLease]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leasing_options'), 'exclude': lambda f: f is None }})
    r"""Array of all finance offers for this listing"""  
    media: Optional[shared_listingnestmedia.ListingNestMedia] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})  
    miles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miles'), 'exclude': lambda f: f is None }})
    r"""Odometer reading / reported miles usage for the car"""  
    msrp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msrp'), 'exclude': lambda f: f is None }})
    r"""MSRP for the car"""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Asking price for the car"""  
    price_change_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_change_percent'), 'exclude': lambda f: f is None }})
    r"""Percentage difference between the cars's current price and ref_price i.e. last reported price"""  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})
    r"""Relative rank of the listing determined by ranking service"""  
    ref_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_miles'), 'exclude': lambda f: f is None }})
    r"""Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date"""  
    ref_miles_dt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_miles_dt'), 'exclude': lambda f: f is None }})
    r"""The date at which the last miles was reported online. This is earlier to last_seen_date"""  
    ref_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_price'), 'exclude': lambda f: f is None }})
    r"""Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date"""  
    ref_price_dt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_price_dt'), 'exclude': lambda f: f is None }})
    r"""The date at which the last price was reported online. This is earlier to last_seen_date"""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Score of the ranked listing as per the ranking criteria determined by ranking service"""  
    scraped_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date timestamp"""  
    scraped_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date"""  
    seller_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_type'), 'exclude': lambda f: f is None }})
    r"""Seller type for the car"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source domain of the listing"""  
    stock_no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stock_no'), 'exclude': lambda f: f is None }})
    r"""Stock number of car in dealers inventory"""  
    vdp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vdp_url'), 'exclude': lambda f: f is None }})
    r"""Vehicle Details Page url of the specific car"""  
    vehicle_registration_mark: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_registration_mark'), 'exclude': lambda f: f is None }})
    r"""Vehicle Registration Mark of the car"""  
    vin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    r"""VIN for the car"""  
    