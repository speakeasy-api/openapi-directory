"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import cddriveitem as shared_cddriveitem
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAPIV2CddriveFoldersFolderIDItemsSecurity:
    
    cd_oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetAPIV2CddriveFoldersFolderIDItemsRequest:
    
    folder_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'folder-id', 'style': 'simple', 'explode': False }})
    r"""The ID of the folder to get. Folder ID 0 represents the uppermost CD drive folder."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of items to return in the response."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The offset into the items to begin the response."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPIV2CddriveFoldersFolderIDItems200ApplicationJSON:
    r"""The folder information."""
    
    entries: Optional[list[shared_cddriveitem.CDDriveItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entries'), 'exclude': lambda f: f is None }})
    r"""The item instances."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The maximum number of items to return."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""The start offset into the items."""  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""The total number of entries available."""  
    

@dataclasses.dataclass
class GetAPIV2CddriveFoldersFolderIDItemsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_api_v2_cddrive_folders_folder_id_items_200_application_json_object: Optional[GetAPIV2CddriveFoldersFolderIDItems200ApplicationJSON] = dataclasses.field(default=None)
    r"""The folder information."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    