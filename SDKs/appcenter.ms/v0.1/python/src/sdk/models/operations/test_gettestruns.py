"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestGetTestRunsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class TestGetTestRunsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestRunsTestRunTestRunStatistics:
    r"""Summary single test run on Xamarin Test Cloud"""
    
    devices: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices'), 'exclude': lambda f: f is None }})
    r"""Number of devices running the test"""  
    devices_failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicesFailed'), 'exclude': lambda f: f is None }})
    r"""Number of failed devices"""  
    devices_finished: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicesFinished'), 'exclude': lambda f: f is None }})
    r"""Number of finished devices"""  
    failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})
    r"""Number of failed tests"""  
    passed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passed'), 'exclude': lambda f: f is None }})
    r"""Number of passed tests"""  
    peak_memory: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peakMemory'), 'exclude': lambda f: f is None }})
    r"""The max amount of MB used during the test run"""  
    skipped: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})
    r"""Number of skipped tests"""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Number of tests in total"""  
    total_device_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalDeviceMinutes'), 'exclude': lambda f: f is None }})
    r"""The number of minutes of device time the test has been runnign"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestRunsTestRun:
    r"""Summary single test run on Xamarin Test Cloud"""
    
    app_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appVersion'), 'exclude': lambda f: f is None }})
    r"""The compiled version of the app binary"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date and time the test was uploaded"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Human readable explanation of the current test status"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique id of the test upload"""  
    platform: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""The device platform targeted by the test. Possible values are 'ios' or 'android'"""  
    result_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultStatus'), 'exclude': lambda f: f is None }})
    r"""The passed/failed state"""  
    run_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runStatus'), 'exclude': lambda f: f is None }})
    r"""The current status of the test run, in relation to the various phases"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Use runStatus instead."""  
    stats: Optional[TestGetTestRunsTestRunTestRunStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats'), 'exclude': lambda f: f is None }})
    r"""Summary single test run on Xamarin Test Cloud"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Use resultStatus instead."""  
    test_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testSeries'), 'exclude': lambda f: f is None }})
    r"""The name of the test series with which this test upload is associated"""  
    test_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testType'), 'exclude': lambda f: f is None }})
    r"""The name of the test framework used to run this test"""  
    

@dataclasses.dataclass
class TestGetTestRunsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_runs: Optional[list[TestGetTestRunsTestRun]] = dataclasses.field(default=None)
    r"""OK"""  
    