"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListSettingTemplatesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListSettingTemplatesRequest:
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Number of records returns within a single API call."""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the site. This field is required only if multiple sites have been enabled.  of the site. Required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details. If this is not provided, the response lists the account level setting templates."""  
    
class ListSettingTemplates200ApplicationXMLTemplatesTypeEnum(str, Enum):
    r"""Template type.<br>
    The value of this field can be one of the following:<br>
    * `user`<br>
    * `group`<br>
    * `autReceptionist`<br>
    * `commonArea`<br>
    * `zr`<br>
    * `interop`<br>
    """
    USER = 'user'
    GROUP = 'group'
    AUT_RECEPTIONIST = 'autReceptionist'
    COMMON_AREA = 'commonArea'
    ZR = 'zr'
    INTEROP = 'interop'


@dataclasses.dataclass
class ListSettingTemplates200ApplicationXMLTemplates:
    
    description: Optional[str] = dataclasses.field(default=None)
    r"""Template description."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the template."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Template name."""  
    type: Optional[ListSettingTemplates200ApplicationXMLTemplatesTypeEnum] = dataclasses.field(default=None)
    r"""Template type.<br>
    The value of this field can be one of the following:<br>
    * `user`<br>
    * `group`<br>
    * `autReceptionist`<br>
    * `commonArea`<br>
    * `zr`<br>
    * `interop`<br>
    """  
    

@dataclasses.dataclass
class ListSettingTemplates200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    OK
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes"""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call. The default is **30** and the maximum is **300**."""  
    templates: Optional[list[ListSettingTemplates200ApplicationXMLTemplates]] = dataclasses.field(default=None)  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records returned."""  
    
class ListSettingTemplates200ApplicationJSONTemplatesTypeEnum(str, Enum):
    r"""Template type.<br>
    The value of this field can be one of the following:<br>
    * `user`<br>
    * `group`<br>
    * `autReceptionist`<br>
    * `commonArea`<br>
    * `zr`<br>
    * `interop`<br>
    """
    USER = 'user'
    GROUP = 'group'
    AUT_RECEPTIONIST = 'autReceptionist'
    COMMON_AREA = 'commonArea'
    ZR = 'zr'
    INTEROP = 'interop'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListSettingTemplates200ApplicationJSONTemplates:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Template description."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the template."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Template name."""  
    type: Optional[ListSettingTemplates200ApplicationJSONTemplatesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Template type.<br>
    The value of this field can be one of the following:<br>
    * `user`<br>
    * `group`<br>
    * `autReceptionist`<br>
    * `commonArea`<br>
    * `zr`<br>
    * `interop`<br>
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListSettingTemplates200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    OK
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call. The default is **30** and the maximum is **300**."""  
    templates: Optional[list[ListSettingTemplates200ApplicationJSONTemplates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templates'), 'exclude': lambda f: f is None }})  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned."""  
    

@dataclasses.dataclass
class ListSettingTemplatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_setting_templates_200_application_json_object: Optional[ListSettingTemplates200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    OK
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    