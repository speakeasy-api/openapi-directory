"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AnalyticsTestAudienceSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class AnalyticsTestAudienceRequestBodyCustomPropertiesEnum(str, Enum):
    STRING = 'string'
    NUMBER = 'number'
    BOOLEAN = 'boolean'
    DATE_TIME = 'date_time'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsTestAudienceRequestBody:
    r"""Audience definition."""
    
    definition: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition') }})
    r"""Audience definition in OData format."""  
    custom_properties: Optional[dict[str, AnalyticsTestAudienceRequestBodyCustomPropertiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_properties'), 'exclude': lambda f: f is None }})
    r"""Custom properties used in the definition."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Audience description."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AnalyticsTestAudienceRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: AnalyticsTestAudienceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Audience definition"""  
    
class AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsTestAudienceDefaultApplicationJSONError:
    
    code: AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsTestAudienceDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: AnalyticsTestAudienceDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum(str, Enum):
    STRING = 'string'
    NUMBER = 'number'
    BOOLEAN = 'boolean'
    DATE_TIME = 'date_time'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsTestAudience200ApplicationJSON:
    r"""Audience test result."""
    
    custom_properties: Optional[dict[str, AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_properties'), 'exclude': lambda f: f is None }})
    r"""Custom properties used in the definition."""  
    definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""Audience definition in OData format."""  
    estimated_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_count'), 'exclude': lambda f: f is None }})
    r"""Estimated audience size."""  
    estimated_total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_total_count'), 'exclude': lambda f: f is None }})
    r"""Estimated total audience size."""  
    

@dataclasses.dataclass
class AnalyticsTestAudienceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_test_audience_200_application_json_object: Optional[AnalyticsTestAudience200ApplicationJSON] = dataclasses.field(default=None)
    r"""Tests audience definition."""  
    analytics_test_audience_default_application_json_object: Optional[AnalyticsTestAudienceDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    