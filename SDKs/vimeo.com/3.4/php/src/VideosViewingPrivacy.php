<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VideosViewingPrivacy 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Permit a specific user to view a private video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserResponse
     */
	public function addVideoPrivacyUser(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/privacy/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permit a list of users to view a private video
     * 
     * The body of this request should follow our
     * [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
     * a single `URI` field, and the value of this field must be the URI of the user who can view this video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersResponse
     */
	public function addVideoPrivacyUsers(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/privacy/users', \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permit a list of users to view a private video
     * 
     * The body of this request should follow our
     * [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
     * a single `URI` field, and the value of this field must be the URI of the user who can view this video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Response
     */
	public function addVideoPrivacyUsersAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/privacy/users', \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoPrivacyUsersAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restrict a user from viewing a private video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserResponse
     */
	public function deleteVideoPrivacyUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/privacy/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoPrivacyUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users who can view a user's private videos by default
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersResponse
     */
	public function getVideoPrivacyUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/privacy/users', \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users who can view a user's private videos by default
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Response
     */
	public function getVideoPrivacyUsersAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/privacy/users', \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoPrivacyUsersAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}