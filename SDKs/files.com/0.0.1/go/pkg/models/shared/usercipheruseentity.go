// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// UserCipherUseEntityInterfaceEnum - The interface accessed
type UserCipherUseEntityInterfaceEnum string

const (
	UserCipherUseEntityInterfaceEnumWeb     UserCipherUseEntityInterfaceEnum = "web"
	UserCipherUseEntityInterfaceEnumFtp     UserCipherUseEntityInterfaceEnum = "ftp"
	UserCipherUseEntityInterfaceEnumSftp    UserCipherUseEntityInterfaceEnum = "sftp"
	UserCipherUseEntityInterfaceEnumDav     UserCipherUseEntityInterfaceEnum = "dav"
	UserCipherUseEntityInterfaceEnumDesktop UserCipherUseEntityInterfaceEnum = "desktop"
	UserCipherUseEntityInterfaceEnumRestapi UserCipherUseEntityInterfaceEnum = "restapi"
	UserCipherUseEntityInterfaceEnumRobot   UserCipherUseEntityInterfaceEnum = "robot"
	UserCipherUseEntityInterfaceEnumJsapi   UserCipherUseEntityInterfaceEnum = "jsapi"
)

func (e *UserCipherUseEntityInterfaceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "web":
		fallthrough
	case "ftp":
		fallthrough
	case "sftp":
		fallthrough
	case "dav":
		fallthrough
	case "desktop":
		fallthrough
	case "restapi":
		fallthrough
	case "robot":
		fallthrough
	case "jsapi":
		*e = UserCipherUseEntityInterfaceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserCipherUseEntityInterfaceEnum: %s", s)
	}
}

// UserCipherUseEntity - List User Cipher Uses
type UserCipherUseEntity struct {
	// The earliest recorded use of this combination of interface and protocol and cipher (for this user)
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UserCipherUse ID
	ID *int `json:"id,omitempty"`
	// The interface accessed
	Interface *UserCipherUseEntityInterfaceEnum `json:"interface,omitempty"`
	// The protocol and cipher employed
	ProtocolCipher *string `json:"protocol_cipher,omitempty"`
	// The most recent use of this combination of interface and protocol and cipher (for this user)
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// ID of the user who performed this access
	UserID *int `json:"user_id,omitempty"`
}
