/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Auth0Config } from "./auth0config";
import { CleverSettings } from "./cleversettings";
import { ElasticConfig } from "./elasticconfig";
import { IpFiltering } from "./ipfiltering";
import { MailerSettings } from "./mailersettings";
import { Webhook } from "./webhook";
import { Expose, Type } from "class-transformer";

/**
 * The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
 */
export class GlobalConfig extends SpeakeasyBase {
  /**
   * Email addresses that will receive all Otoroshi alert events
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alertsEmails" })
  alertsEmails: string[];

  /**
   * Webhook that will receive all Otoroshi alert events
   */
  @SpeakeasyMetadata({ elemType: Webhook })
  @Expose({ name: "alertsWebhooks" })
  @Type(() => Webhook)
  alertsWebhooks: Webhook[];

  /**
   * Webhook that will receive all internal Otoroshi events
   */
  @SpeakeasyMetadata({ elemType: Webhook })
  @Expose({ name: "analyticsWebhooks" })
  @Type(() => Webhook)
  analyticsWebhooks: Webhook[];

  /**
   * If enabled, Admin API won't be able to write/update/delete entities
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiReadOnly" })
  apiReadOnly: boolean;

  /**
   * If not defined, every new service descriptor will be added to the default group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoLinkToDefaultGroup" })
  autoLinkToDefaultGroup: boolean;

  /**
   * Configuration for Auth0 domain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backofficeAuth0Config" })
  @Type(() => Auth0Config)
  backofficeAuth0Config?: Auth0Config;

  /**
   * Configuration for CleverCloud client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cleverSettings" })
  @Type(() => CleverSettings)
  cleverSettings?: CleverSettings;

  /**
   * The configuration for elastic access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "elasticReadsConfig" })
  @Type(() => ElasticConfig)
  elasticReadsConfig?: ElasticConfig;

  /**
   * Configs. for Elastic writes
   */
  @SpeakeasyMetadata({ elemType: ElasticConfig })
  @Expose({ name: "elasticWritesConfigs" })
  @Type(() => ElasticConfig)
  elasticWritesConfigs?: ElasticConfig[];

  /**
   * IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endlessIpAddresses" })
  endlessIpAddresses: string[];

  /**
   * The filtering configuration block for a service of globally.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipFiltering" })
  @Type(() => IpFiltering)
  ipFiltering: IpFiltering;

  /**
   * If enabled, Otoroshi will reject new request if too much at the same time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limitConcurrentRequests" })
  limitConcurrentRequests: boolean;

  /**
   * Possibles lines for Otoroshi
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lines" })
  lines?: string[];

  /**
   * Configuration for mailgun api client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mailerSettings" })
  @Type(() => MailerSettings)
  mailerSettings?: MailerSettings;

  /**
   * The number of authorized request processed at the same time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxConcurrentRequests" })
  maxConcurrentRequests: number;

  /**
   * The max size in bytes of an HTTP 1.0 response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxHttp10ResponseSize" })
  maxHttp10ResponseSize?: number;

  /**
   * Number of events kept locally
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxLogsSize" })
  maxLogsSize?: number;

  /**
   * Use middle finger emoji as a response character for endless HTTP responses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middleFingers" })
  middleFingers?: boolean;

  /**
   * Authorized number of calls per second globally per IP address, measured on 10 seconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "perIpThrottlingQuota" })
  perIpThrottlingQuota: number;

  /**
   * Configuration for Auth0 domain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateAppsAuth0Config" })
  @Type(() => Auth0Config)
  privateAppsAuth0Config?: Auth0Config;

  /**
   * HTTP will be streamed only. Doesn't work with old browsers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamEntityOnly" })
  streamEntityOnly: boolean;

  /**
   * Authorized number of calls per second globally, measured on 10 seconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "throttlingQuota" })
  throttlingQuota: number;

  /**
   * If enabled, login to backoffice through Auth0 will be disabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "u2fLoginOnly" })
  u2fLoginOnly: boolean;

  /**
   * If enabled, services will be authorized to use circuit breakers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useCircuitBreakers" })
  useCircuitBreakers: boolean;
}
