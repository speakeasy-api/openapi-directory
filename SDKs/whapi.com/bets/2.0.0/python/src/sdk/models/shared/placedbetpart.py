"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import priceformatted as shared_priceformatted
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlacedBetPart:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Human-friendly description of the bet"""  
    event_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventDescription') }})
    r"""The description of the event"""  
    event_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId') }})
    r"""Unique identifier of the event"""  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The number of the bet"""  
    price_den: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDen') }})
    r"""When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2"""  
    price_num: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceNum') }})
    r"""When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2"""  
    price_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceType') }})
    r"""The price type chosen when the bet was placed. For example: L (Win)"""  
    result: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result') }})
    r"""The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available"""  
    start_date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateTime') }})
    r"""Time the event will start. For example: 2013-01-30 11:01:01"""  
    each_way_den: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eachWayDen'), 'exclude': lambda f: f is None }})
    r"""When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2"""  
    each_way_num: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eachWayNum'), 'exclude': lambda f: f is None }})
    r"""When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2"""  
    each_way_places: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eachWayPlaces'), 'exclude': lambda f: f is None }})
    r"""The Each-way places available for the bet"""  
    event_market_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventMarketDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the market within an event"""  
    event_type_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTypeDescription'), 'exclude': lambda f: f is None }})
    r"""The description of type of the event"""  
    handicap: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handicap'), 'exclude': lambda f: f is None }})
    r"""Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)"""  
    price_formatted: Optional[shared_priceformatted.PriceFormatted] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormatted'), 'exclude': lambda f: f is None }})  
    rule4_deductions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rule4Deductions'), 'exclude': lambda f: f is None }})
    r"""The official scale of deductions that apply when a runner is withdrawn"""  
    selection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the selection"""  
    