"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Thermostat:
    r"""Thermostat specific methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def createnewschedule(self, request: operations.CreatenewscheduleRequest, security: operations.CreatenewscheduleSecurity) -> operations.CreatenewscheduleResponse:
        r"""The method createnewschedule creates a new schedule stored in the backup list."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createnewschedule'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreatenewscheduleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatenewscheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NANewScheduleResponse])
                res.na_new_schedule_response = out

        return res

    def getmeasure(self, request: operations.GetmeasureRequest, security: operations.GetmeasureSecurity) -> operations.GetmeasureResponse:
        r"""The method getmeasure returns the measurements of a device or a module."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getmeasure'
        
        query_params = utils.get_query_params(operations.GetmeasureRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetmeasureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAMeasureResponse])
                res.na_measure_response = out

        return res

    def getthermostatsdata(self, request: operations.GetthermostatsdataRequest, security: operations.GetthermostatsdataSecurity) -> operations.GetthermostatsdataResponse:
        r"""The method getthermostatsdata returns information about user's thermostats such as their last measurements."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getthermostatsdata'
        
        query_params = utils.get_query_params(operations.GetthermostatsdataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetthermostatsdataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAThermostatDataResponse])
                res.na_thermostat_data_response = out

        return res

    def setthermpoint(self, request: operations.SetthermpointRequest, security: operations.SetthermpointSecurity) -> operations.SetthermpointResponse:
        r"""The method setthermpoint changes the Thermostat manual temperature setpoint."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setthermpoint'
        
        query_params = utils.get_query_params(operations.SetthermpointRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetthermpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAOkResponse])
                res.na_ok_response = out

        return res

    def switchschedule(self, request: operations.SwitchscheduleRequest, security: operations.SwitchscheduleSecurity) -> operations.SwitchscheduleResponse:
        r"""The method switchschedule switches the Thermostat's schedule to another existing schedule."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/switchschedule'
        
        query_params = utils.get_query_params(operations.SwitchscheduleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SwitchscheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAOkResponse])
                res.na_ok_response = out

        return res

    def syncschedule(self, request: operations.SyncscheduleRequest, security: operations.SyncscheduleSecurity) -> operations.SyncscheduleResponse:
        r"""The method syncschedule changes the Thermostat weekly schedule."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/syncschedule'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SyncscheduleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SyncscheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAOkResponse])
                res.na_ok_response = out

        return res

    