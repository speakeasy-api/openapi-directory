/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * FilesetDetail - Details of the new fileset.
 */
public class FilesetDetail {
    /**
     * Include or exclude hidden folders inside locally-mounted remote file systems from backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowBackupHiddenFoldersInNetworkMounts")
    public Boolean allowBackupHiddenFoldersInNetworkMounts;

    public FilesetDetail withAllowBackupHiddenFoldersInNetworkMounts(Boolean allowBackupHiddenFoldersInNetworkMounts) {
        this.allowBackupHiddenFoldersInNetworkMounts = allowBackupHiddenFoldersInNetworkMounts;
        return this;
    }
    
    /**
     * Include or exclude locally-mounted remote file systems from backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowBackupNetworkMounts")
    public Boolean allowBackupNetworkMounts;

    public FilesetDetail withAllowBackupNetworkMounts(Boolean allowBackupNetworkMounts) {
        this.allowBackupNetworkMounts = allowBackupNetworkMounts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archiveStorage")
    public Long archiveStorage;

    public FilesetDetail withArchiveStorage(Long archiveStorage) {
        this.archiveStorage = archiveStorage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archivedSnapshotCount")
    public Integer archivedSnapshotCount;

    public FilesetDetail withArchivedSnapshotCount(Integer archivedSnapshotCount) {
        this.archivedSnapshotCount = archivedSnapshotCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arraySpec")
    public FilesetArraySpec arraySpec;

    public FilesetDetail withArraySpec(FilesetArraySpec arraySpec) {
        this.arraySpec = arraySpec;
        return this;
    }
    
    /**
     * Action taken if script fails. Options are "abort", "continue".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupScriptErrorHandling")
    public String backupScriptErrorHandling;

    public FilesetDetail withBackupScriptErrorHandling(String backupScriptErrorHandling) {
        this.backupScriptErrorHandling = backupScriptErrorHandling;
        return this;
    }
    
    /**
     * Number of seconds after which the script is killed if it has not completed execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupScriptTimeout")
    public Long backupScriptTimeout;

    public FilesetDetail withBackupScriptTimeout(Long backupScriptTimeout) {
        this.backupScriptTimeout = backupScriptTimeout;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public FilesetDetail withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public FilesetDetail withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public FilesetDetail withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * The ID of the effective SLA Domain for this fileset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public FilesetDetail withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the effective SLA Domain for this fileset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public FilesetDetail withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public FilesetDetail withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableHardlinkSupport")
    public Boolean enableHardlinkSupport;

    public FilesetDetail withEnableHardlinkSupport(Boolean enableHardlinkSupport) {
        this.enableHardlinkSupport = enableHardlinkSupport;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSymlinkResolution")
    public Boolean enableSymlinkResolution;

    public FilesetDetail withEnableSymlinkResolution(Boolean enableSymlinkResolution) {
        this.enableSymlinkResolution = enableSymlinkResolution;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exceptions")
    public String[] exceptions;

    public FilesetDetail withExceptions(String[] exceptions) {
        this.exceptions = exceptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludes")
    public String[] excludes;

    public FilesetDetail withExcludes(String[] excludes) {
        this.excludes = excludes;
        return this;
    }
    
    /**
     * ID of the failover cluster app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failoverClusterAppId")
    public String failoverClusterAppId;

    public FilesetDetail withFailoverClusterAppId(String failoverClusterAppId) {
        this.failoverClusterAppId = failoverClusterAppId;
        return this;
    }
    
    /**
     * The name of the failover cluster app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failoverClusterAppName")
    public String failoverClusterAppName;

    public FilesetDetail withFailoverClusterAppName(String failoverClusterAppName) {
        this.failoverClusterAppName = failoverClusterAppName;
        return this;
    }
    
    /**
     * Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceFull")
    public Boolean forceFull;

    public FilesetDetail withForceFull(Boolean forceFull) {
        this.forceFull = forceFull;
        return this;
    }
    
    /**
     * Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceFullPartitionIds")
    public Integer[] forceFullPartitionIds;

    public FilesetDetail withForceFullPartitionIds(Integer[] forceFullPartitionIds) {
        this.forceFullPartitionIds = forceFullPartitionIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostId")
    public String hostId;

    public FilesetDetail withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    @JsonProperty("hostName")
    public String hostName;

    public FilesetDetail withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public FilesetDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("includes")
    public String[] includes;

    public FilesetDetail withIncludes(String[] includes) {
        this.includes = includes;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public FilesetDetail withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public FilesetDetail withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPassthrough")
    public Boolean isPassthrough;

    public FilesetDetail withIsPassthrough(Boolean isPassthrough) {
        this.isPassthrough = isPassthrough;
        return this;
    }
    
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public FilesetDetail withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localStorage")
    public Long localStorage;

    public FilesetDetail withLocalStorage(Long localStorage) {
        this.localStorage = localStorage;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public FilesetDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatingSystemType")
    public String operatingSystemType;

    public FilesetDetail withOperatingSystemType(String operatingSystemType) {
        this.operatingSystemType = operatingSystemType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public FilesetDetail withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    /**
     * Script to run after backup of this Fileset ends.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postBackupScript")
    public String postBackupScript;

    public FilesetDetail withPostBackupScript(String postBackupScript) {
        this.postBackupScript = postBackupScript;
        return this;
    }
    
    /**
     * Script to run before backup of this Fileset starts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preBackupScript")
    public String preBackupScript;

    public FilesetDetail withPreBackupScript(String preBackupScript) {
        this.preBackupScript = preBackupScript;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public FilesetDetail withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("protectionDate")
    public OffsetDateTime protectionDate;

    public FilesetDetail withProtectionDate(OffsetDateTime protectionDate) {
        this.protectionDate = protectionDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shareId")
    public String shareId;

    public FilesetDetail withShareId(String shareId) {
        this.shareId = shareId;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public FilesetDetail withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapMirrorLabelForFullBackup")
    public String snapMirrorLabelForFullBackup;

    public FilesetDetail withSnapMirrorLabelForFullBackup(String snapMirrorLabelForFullBackup) {
        this.snapMirrorLabelForFullBackup = snapMirrorLabelForFullBackup;
        return this;
    }
    
    /**
     * Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapMirrorLabelForIncrementalBackup")
    public String snapMirrorLabelForIncrementalBackup;

    public FilesetDetail withSnapMirrorLabelForIncrementalBackup(String snapMirrorLabelForIncrementalBackup) {
        this.snapMirrorLabelForIncrementalBackup = snapMirrorLabelForIncrementalBackup;
        return this;
    }
    
    @JsonProperty("snapshotCount")
    public Integer snapshotCount;

    public FilesetDetail withSnapshotCount(Integer snapshotCount) {
        this.snapshotCount = snapshotCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshots")
    public FilesetSnapshotSummary[] snapshots;

    public FilesetDetail withSnapshots(FilesetSnapshotSummary[] snapshots) {
        this.snapshots = snapshots;
        return this;
    }
    
    @JsonProperty("templateId")
    public String templateId;

    public FilesetDetail withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    @JsonProperty("templateName")
    public String templateName;

    public FilesetDetail withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }
    
    /**
     * Use VSS during Windows backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useWindowsVss")
    public Boolean useWindowsVss;

    public FilesetDetail withUseWindowsVss(Boolean useWindowsVss) {
        this.useWindowsVss = useWindowsVss;
        return this;
    }
    
    public FilesetDetail(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("hostName") String hostName, @JsonProperty("id") String id, @JsonProperty("includes") String[] includes, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("name") String name, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("snapshotCount") Integer snapshotCount, @JsonProperty("templateId") String templateId, @JsonProperty("templateName") String templateName) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.hostName = hostName;
        this.id = id;
        this.includes = includes;
        this.isRelic = isRelic;
        this.name = name;
        this.primaryClusterId = primaryClusterId;
        this.snapshotCount = snapshotCount;
        this.templateId = templateId;
        this.templateName = templateName;
  }
}
