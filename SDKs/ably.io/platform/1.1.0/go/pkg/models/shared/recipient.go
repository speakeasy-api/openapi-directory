// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecipientTransportTypeEnum - Defines which push platform is being used.
type RecipientTransportTypeEnum string

const (
	RecipientTransportTypeEnumApns RecipientTransportTypeEnum = "apns"
	RecipientTransportTypeEnumFcm  RecipientTransportTypeEnum = "fcm"
	RecipientTransportTypeEnumGcm  RecipientTransportTypeEnum = "gcm"
)

func (e *RecipientTransportTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "apns":
		fallthrough
	case "fcm":
		fallthrough
	case "gcm":
		*e = RecipientTransportTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientTransportTypeEnum: %s", s)
	}
}

// RecipientOutput - Push recipient details for a device.
type RecipientOutput struct {
	// when using APNs, specifies the required device token.
	DeviceToken *string `json:"deviceToken,omitempty"`
	// when using GCM or FCM, specifies the required registration token.
	RegistrationToken *string `json:"registrationToken,omitempty"`
	// Defines which push platform is being used.
	TransportType *RecipientTransportTypeEnum `json:"transportType,omitempty"`
}

// Recipient - Push recipient details for a device.
type Recipient struct {
	// Client ID of recipient
	ClientID *string `json:"clientId,omitempty"`
	// Client ID of recipient
	DeviceID *string `json:"deviceId,omitempty"`
	// when using APNs, specifies the required device token.
	DeviceToken *string `json:"deviceToken,omitempty"`
	// when using GCM or FCM, specifies the required registration token.
	RegistrationToken *string `json:"registrationToken,omitempty"`
	// Defines which push platform is being used.
	TransportType *RecipientTransportTypeEnum `json:"transportType,omitempty"`
}
