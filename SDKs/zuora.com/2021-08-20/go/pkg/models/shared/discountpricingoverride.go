// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DiscountPricingOverrideApplyDiscountToEnum - Specifies which type of charge the discount charge applies to.
type DiscountPricingOverrideApplyDiscountToEnum string

const (
	DiscountPricingOverrideApplyDiscountToEnumOnetime               DiscountPricingOverrideApplyDiscountToEnum = "ONETIME"
	DiscountPricingOverrideApplyDiscountToEnumRecurring             DiscountPricingOverrideApplyDiscountToEnum = "RECURRING"
	DiscountPricingOverrideApplyDiscountToEnumUsage                 DiscountPricingOverrideApplyDiscountToEnum = "USAGE"
	DiscountPricingOverrideApplyDiscountToEnumOnetimerecurring      DiscountPricingOverrideApplyDiscountToEnum = "ONETIMERECURRING"
	DiscountPricingOverrideApplyDiscountToEnumOnetimeusage          DiscountPricingOverrideApplyDiscountToEnum = "ONETIMEUSAGE"
	DiscountPricingOverrideApplyDiscountToEnumRecurringusage        DiscountPricingOverrideApplyDiscountToEnum = "RECURRINGUSAGE"
	DiscountPricingOverrideApplyDiscountToEnumOnetimerecurringusage DiscountPricingOverrideApplyDiscountToEnum = "ONETIMERECURRINGUSAGE"
)

func (e *DiscountPricingOverrideApplyDiscountToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ONETIME":
		fallthrough
	case "RECURRING":
		fallthrough
	case "USAGE":
		fallthrough
	case "ONETIMERECURRING":
		fallthrough
	case "ONETIMEUSAGE":
		fallthrough
	case "RECURRINGUSAGE":
		fallthrough
	case "ONETIMERECURRINGUSAGE":
		*e = DiscountPricingOverrideApplyDiscountToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingOverrideApplyDiscountToEnum: %s", s)
	}
}

// DiscountPricingOverrideDiscountLevelEnum - Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
type DiscountPricingOverrideDiscountLevelEnum string

const (
	DiscountPricingOverrideDiscountLevelEnumRateplan     DiscountPricingOverrideDiscountLevelEnum = "rateplan"
	DiscountPricingOverrideDiscountLevelEnumSubscription DiscountPricingOverrideDiscountLevelEnum = "subscription"
	DiscountPricingOverrideDiscountLevelEnumAccount      DiscountPricingOverrideDiscountLevelEnum = "account"
)

func (e *DiscountPricingOverrideDiscountLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rateplan":
		fallthrough
	case "subscription":
		fallthrough
	case "account":
		*e = DiscountPricingOverrideDiscountLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingOverrideDiscountLevelEnum: %s", s)
	}
}

// DiscountPricingOverridePriceChangeOptionEnum - Specifies how Zuora changes the price of the charge each time the subscription renews.
type DiscountPricingOverridePriceChangeOptionEnum string

const (
	DiscountPricingOverridePriceChangeOptionEnumNoChange                       DiscountPricingOverridePriceChangeOptionEnum = "NoChange"
	DiscountPricingOverridePriceChangeOptionEnumUseLatestProductCatalogPricing DiscountPricingOverridePriceChangeOptionEnum = "UseLatestProductCatalogPricing"
)

func (e *DiscountPricingOverridePriceChangeOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoChange":
		fallthrough
	case "UseLatestProductCatalogPricing":
		*e = DiscountPricingOverridePriceChangeOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscountPricingOverridePriceChangeOptionEnum: %s", s)
	}
}

// DiscountPricingOverride - Pricing information about a discount charge.
type DiscountPricingOverride struct {
	// Specifies which type of charge the discount charge applies to.
	//
	ApplyDiscountTo *DiscountPricingOverrideApplyDiscountToEnum `json:"applyDiscountTo,omitempty"`
	// Only applicable if the discount charge is a fixed-amount discount.
	//
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
	//
	DiscountLevel *DiscountPricingOverrideDiscountLevelEnum `json:"discountLevel,omitempty"`
	// Only applicable if the discount charge is a percentage discount.
	//
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Specifies how Zuora changes the price of the charge each time the subscription renews.
	//
	PriceChangeOption *DiscountPricingOverridePriceChangeOptionEnum `json:"priceChangeOption,omitempty"`
}
