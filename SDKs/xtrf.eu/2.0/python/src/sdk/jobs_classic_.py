"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class JobsClassic:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def assign_file_to_job_output(self, request: operations.AssignFileToJobOutputRequest) -> operations.AssignFileToJobOutputResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssignFileToJobOutputRequest, base_url, '/jobs/{jobId}/files/output', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_file_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignFileToJobOutputResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def assign_vendor(self, request: operations.AssignVendorRequest) -> operations.AssignVendorResponse:
        r"""Assigns vendor to a job in a project.
        Assigns vendor to a job in a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssignVendorRequest, base_url, '/jobs/{jobId}/vendor', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "assign_vendor_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignVendorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_status(self, request: operations.ChangeStatusRequest) -> operations.ChangeStatusResponse:
        r"""Changes job status if possible (400 Bad Request is returned otherwise).
        Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeStatusRequest, base_url, '/jobs/{jobId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_status_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_job_details(self, request: operations.GetJobDetailsRequest) -> operations.GetJobDetailsResponse:
        r"""Returns job details by jobId.
        Returns job details by jobId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJobDetailsRequest, base_url, '/jobs/{jobId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobDto])
                res.job_dto = out

        return res

    def get_job_files(self, request: operations.GetJobFilesRequest) -> operations.GetJobFilesResponse:
        r"""Returns list of input and output files of a job.
        Returns list of input and output files of a job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJobFilesRequest, base_url, '/jobs/{jobId}/files', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobFilesDto1])
                res.job_files_dto = out

        return res

    def get_job_files_1(self, request: operations.GetJobFiles1Request) -> operations.GetJobFiles1Response:
        r"""Returns file metadata.
        Returns file metadata.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJobFiles1Request, base_url, '/jobs/{jobId}/files/{fileId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobFiles1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileMetadataDTO])
                res.file_metadata_dto = out

        return res

    def update_dates(self, request: operations.UpdateDatesRequest) -> operations.UpdateDatesResponse:
        r"""Updates dates of a given job.
        Updates dates of a given job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDatesRequest, base_url, '/jobs/{jobId}/dates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_dates_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_instructions(self, request: operations.UpdateInstructionsRequest) -> operations.UpdateInstructionsResponse:
        r"""Updates instructions for a job.
        Updates instructions for a job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInstructionsRequest, base_url, '/jobs/{jobId}/instructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instructions_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInstructionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    