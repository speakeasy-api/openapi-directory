/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StartDates - Event's Start Dates
 */
public class StartDates {
    /**
     * Boolean flag to indicate whether or not the start date is TBA
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateTBA")
    public Boolean dateTBA;
    public StartDates withDateTBA(Boolean dateTBA) {
        this.dateTBA = dateTBA;
        return this;
    }
    
    /**
     * Boolean flag to indicate whether or not the start date is TBD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateTBD")
    public Boolean dateTBD;
    public StartDates withDateTBD(Boolean dateTBD) {
        this.dateTBD = dateTBD;
        return this;
    }
    
    /**
     * The event start datetime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateTime")
    public OffsetDateTime dateTime;
    public StartDates withDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }
    
    /**
     * The event start date in local date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("localDate")
    public LocalDate localDate;
    public StartDates withLocalDate(LocalDate localDate) {
        this.localDate = localDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localTime")
    public LocalTime localTime;
    public StartDates withLocalTime(LocalTime localTime) {
        this.localTime = localTime;
        return this;
    }
    
    /**
     * Boolean flag to indicate whether or not the event has no specific time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noSpecificTime")
    public Boolean noSpecificTime;
    public StartDates withNoSpecificTime(Boolean noSpecificTime) {
        this.noSpecificTime = noSpecificTime;
        return this;
    }
    
    /**
     * Boolean flag to indicate whether or not the start time is TBA
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeTBA")
    public Boolean timeTBA;
    public StartDates withTimeTBA(Boolean timeTBA) {
        this.timeTBA = timeTBA;
        return this;
    }
    
}
