/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetTransactionListQueryParams {
    /**
     * Permitted codes are 
     *   * "information",
     *   * "booked",
     *   * "pending", and 
     *   * "both"
     * "booked" shall be supported by the ASPSP.
     * To support the "pending" and "both" feature is optional for the ASPSP,
     * Error code if not supported in the online banking frontend
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bookingStatus")
    public org.openapis.openapi.models.shared.BookingStatusEnum bookingStatus;
    public GetTransactionListQueryParams withBookingStatus(org.openapis.openapi.models.shared.BookingStatusEnum bookingStatus) {
        this.bookingStatus = bookingStatus;
        return this;
    }
    
    /**
     * Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required
     * and if bookingStatus does not equal "information".
     * 
     * For booked transactions, the relevant date is the booking date. 
     * 
     * For pending transactions, the relevant date is the entry date, which may not be transparent 
     * neither in this API nor other channels of the ASPSP.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateFrom")
    public LocalDate dateFrom;
    public GetTransactionListQueryParams withDateFrom(LocalDate dateFrom) {
        this.dateFrom = dateFrom;
        return this;
    }
    
    /**
     * End date (inclusive the data dateTo) of the transaction list, default is "now" if not given.
     * 
     * Might be ignored if a delta function is used.
     * 
     * For booked transactions, the relevant date is the booking date.
     * 
     * For pending transactions, the relevant date is the entry date, which may not be transparent
     * neither in this API nor other channels of the ASPSP.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateTo")
    public LocalDate dateTo;
    public GetTransactionListQueryParams withDateTo(LocalDate dateTo) {
        this.dateTo = dateTo;
        return this;
    }
    
    /**
     * This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.
     * This delta indicator might be rejected by the ASPSP if this function is not supported.
     * Optional if supported by API provider
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=deltaList")
    public Boolean deltaList;
    public GetTransactionListQueryParams withDeltaList(Boolean deltaList) {
        this.deltaList = deltaList;
        return this;
    }
    
    /**
     * This data attribute is indicating that the AISP is in favour to get all transactions after
     * the transaction with identification entryReferenceFrom alternatively to the above defined period.
     * This is a implementation of a delta access.
     * If this data element is contained, the entries "dateFrom" and "dateTo" might be ignored by the ASPSP
     * if a delta report is supported.
     * 
     * Optional if supported by API provider.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=entryReferenceFrom")
    public String entryReferenceFrom;
    public GetTransactionListQueryParams withEntryReferenceFrom(String entryReferenceFrom) {
        this.entryReferenceFrom = entryReferenceFrom;
        return this;
    }
    
    /**
     * If contained, this function reads the list of accessible payment accounts including the booking balance,
     * if granted by the PSU in the related consent and available by the ASPSP.
     * This parameter might be ignored by the ASPSP.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=withBalance")
    public Boolean withBalance;
    public GetTransactionListQueryParams withWithBalance(Boolean withBalance) {
        this.withBalance = withBalance;
        return this;
    }
    
}
