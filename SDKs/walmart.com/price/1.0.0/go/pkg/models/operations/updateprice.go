// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum string

const (
	UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnumUsd UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum = "USD"
	UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnumCad UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum = "CAD"
)

func (e *UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		fallthrough
	case "CAD":
		*e = UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum: %s", s)
	}
}

// UpdatePriceRequestBodyPricingComparisonPrice - This is applicable only for promotions
type UpdatePriceRequestBodyPricingComparisonPrice struct {
	Amount   *float64                                                  `json:"amount,omitempty"`
	Currency *UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum `json:"currency,omitempty"`
}

// UpdatePriceRequestBodyPricingComparisonPriceTypeEnum - This is applicable only for promotions
type UpdatePriceRequestBodyPricingComparisonPriceTypeEnum string

const (
	UpdatePriceRequestBodyPricingComparisonPriceTypeEnumBase UpdatePriceRequestBodyPricingComparisonPriceTypeEnum = "BASE"
)

func (e *UpdatePriceRequestBodyPricingComparisonPriceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BASE":
		*e = UpdatePriceRequestBodyPricingComparisonPriceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingComparisonPriceTypeEnum: %s", s)
	}
}

type UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum string

const (
	UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnumUsd UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum = "USD"
	UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnumCad UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum = "CAD"
)

func (e *UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		fallthrough
	case "CAD":
		*e = UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum: %s", s)
	}
}

type UpdatePriceRequestBodyPricingCurrentPrice struct {
	Amount   *float64                                               `json:"amount,omitempty"`
	Currency *UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum `json:"currency,omitempty"`
}

// UpdatePriceRequestBodyPricingCurrentPriceTypeEnum - This is applicable only for both promotions and price
type UpdatePriceRequestBodyPricingCurrentPriceTypeEnum string

const (
	UpdatePriceRequestBodyPricingCurrentPriceTypeEnumBase      UpdatePriceRequestBodyPricingCurrentPriceTypeEnum = "BASE"
	UpdatePriceRequestBodyPricingCurrentPriceTypeEnumReduced   UpdatePriceRequestBodyPricingCurrentPriceTypeEnum = "REDUCED"
	UpdatePriceRequestBodyPricingCurrentPriceTypeEnumClearance UpdatePriceRequestBodyPricingCurrentPriceTypeEnum = "CLEARANCE"
)

func (e *UpdatePriceRequestBodyPricingCurrentPriceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BASE":
		fallthrough
	case "REDUCED":
		fallthrough
	case "CLEARANCE":
		*e = UpdatePriceRequestBodyPricingCurrentPriceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingCurrentPriceTypeEnum: %s", s)
	}
}

// UpdatePriceRequestBodyPricingPriceDisplayCodesEnum - Represent promo placement. This is applicable only for promotions
type UpdatePriceRequestBodyPricingPriceDisplayCodesEnum string

const (
	UpdatePriceRequestBodyPricingPriceDisplayCodesEnumCart     UpdatePriceRequestBodyPricingPriceDisplayCodesEnum = "CART"
	UpdatePriceRequestBodyPricingPriceDisplayCodesEnumCheckout UpdatePriceRequestBodyPricingPriceDisplayCodesEnum = "CHECKOUT"
)

func (e *UpdatePriceRequestBodyPricingPriceDisplayCodesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CART":
		fallthrough
	case "CHECKOUT":
		*e = UpdatePriceRequestBodyPricingPriceDisplayCodesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingPriceDisplayCodesEnum: %s", s)
	}
}

// UpdatePriceRequestBodyPricingProcessModeEnum - This is applicable only for promotions
type UpdatePriceRequestBodyPricingProcessModeEnum string

const (
	UpdatePriceRequestBodyPricingProcessModeEnumUpsert UpdatePriceRequestBodyPricingProcessModeEnum = "UPSERT"
	UpdatePriceRequestBodyPricingProcessModeEnumDelete UpdatePriceRequestBodyPricingProcessModeEnum = "DELETE"
)

func (e *UpdatePriceRequestBodyPricingProcessModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UPSERT":
		fallthrough
	case "DELETE":
		*e = UpdatePriceRequestBodyPricingProcessModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyPricingProcessModeEnum: %s", s)
	}
}

type UpdatePriceRequestBodyPricing struct {
	// This is applicable only for promotions
	ComparisonPrice *UpdatePriceRequestBodyPricingComparisonPrice `json:"comparisonPrice,omitempty"`
	// This is applicable only for promotions
	ComparisonPriceType *UpdatePriceRequestBodyPricingComparisonPriceTypeEnum `json:"comparisonPriceType,omitempty"`
	CurrentPrice        UpdatePriceRequestBodyPricingCurrentPrice             `json:"currentPrice"`
	// This is applicable only for both promotions and price
	CurrentPriceType UpdatePriceRequestBodyPricingCurrentPriceTypeEnum `json:"currentPriceType"`
	// This is applicable only for promotions
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
	// This is applicable only for promotions
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	// Represent promo placement. This is applicable only for promotions
	PriceDisplayCodes *UpdatePriceRequestBodyPricingPriceDisplayCodesEnum `json:"priceDisplayCodes,omitempty"`
	// This is applicable only for promotions
	ProcessMode *UpdatePriceRequestBodyPricingProcessModeEnum `json:"processMode,omitempty"`
	// This is applicable only for promotions
	PromoID *string `json:"promoId,omitempty"`
}

// UpdatePriceRequestBodyReplaceAllEnum - This is applicable only for promotions
type UpdatePriceRequestBodyReplaceAllEnum string

const (
	UpdatePriceRequestBodyReplaceAllEnumTrue  UpdatePriceRequestBodyReplaceAllEnum = "true"
	UpdatePriceRequestBodyReplaceAllEnumFalse UpdatePriceRequestBodyReplaceAllEnum = "false"
)

func (e *UpdatePriceRequestBodyReplaceAllEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = UpdatePriceRequestBodyReplaceAllEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePriceRequestBodyReplaceAllEnum: %s", s)
	}
}

// UpdatePriceRequestBody - The request body consists of a Feed file attached to the request.
type UpdatePriceRequestBody struct {
	Definitions map[string]interface{} `json:"definitions,omitempty"`
	// This is applicable only for promotions
	OfferID *string                         `json:"offerId,omitempty"`
	Pricing []UpdatePriceRequestBodyPricing `json:"pricing"`
	// This is applicable only for promotions
	ReplaceAll *UpdatePriceRequestBodyReplaceAllEnum `json:"replaceAll,omitempty"`
	Sku        string                                `json:"sku"`
}

type UpdatePriceRequest struct {
	// The request body consists of a Feed file attached to the request.
	RequestBody UpdatePriceRequestBody `request:"mediaType=application/json"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type UpdatePrice200ApplicationXMLErrorsCategoryEnum string

const (
	UpdatePrice200ApplicationXMLErrorsCategoryEnumApplication UpdatePrice200ApplicationXMLErrorsCategoryEnum = "APPLICATION"
	UpdatePrice200ApplicationXMLErrorsCategoryEnumSystem      UpdatePrice200ApplicationXMLErrorsCategoryEnum = "SYSTEM"
	UpdatePrice200ApplicationXMLErrorsCategoryEnumRequest     UpdatePrice200ApplicationXMLErrorsCategoryEnum = "REQUEST"
	UpdatePrice200ApplicationXMLErrorsCategoryEnumData        UpdatePrice200ApplicationXMLErrorsCategoryEnum = "DATA"
)

func (e *UpdatePrice200ApplicationXMLErrorsCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPLICATION":
		fallthrough
	case "SYSTEM":
		fallthrough
	case "REQUEST":
		fallthrough
	case "DATA":
		*e = UpdatePrice200ApplicationXMLErrorsCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationXMLErrorsCategoryEnum: %s", s)
	}
}

type UpdatePrice200ApplicationXMLErrorsCauses struct {
	Code        *string
	Description *string
	Field       *string
	Type        *string
}

type UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum string

const (
	UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnumInternalDataError UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum = "INTERNAL_DATA_ERROR"
	UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnumExternalDataError UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum = "EXTERNAL_DATA_ERROR"
	UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnumSystemError       UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum = "SYSTEM_ERROR"
)

func (e *UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTERNAL_DATA_ERROR":
		fallthrough
	case "EXTERNAL_DATA_ERROR":
		fallthrough
	case "SYSTEM_ERROR":
		*e = UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum: %s", s)
	}
}

type UpdatePrice200ApplicationXMLErrorsSeverityEnum string

const (
	UpdatePrice200ApplicationXMLErrorsSeverityEnumInfo  UpdatePrice200ApplicationXMLErrorsSeverityEnum = "INFO"
	UpdatePrice200ApplicationXMLErrorsSeverityEnumWarn  UpdatePrice200ApplicationXMLErrorsSeverityEnum = "WARN"
	UpdatePrice200ApplicationXMLErrorsSeverityEnumError UpdatePrice200ApplicationXMLErrorsSeverityEnum = "ERROR"
)

func (e *UpdatePrice200ApplicationXMLErrorsSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INFO":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		*e = UpdatePrice200ApplicationXMLErrorsSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationXMLErrorsSeverityEnum: %s", s)
	}
}

type UpdatePrice200ApplicationXMLErrors struct {
	Category             *UpdatePrice200ApplicationXMLErrorsCategoryEnum
	Causes               []UpdatePrice200ApplicationXMLErrorsCauses
	Code                 string
	Component            *string
	Description          *string
	ErrorIdentifiers     map[string]map[string]interface{}
	Field                *string
	GatewayErrorCategory *UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum
	Info                 *string
	ServiceName          *string
	Severity             *UpdatePrice200ApplicationXMLErrorsSeverityEnum
	Type                 *string
}

// UpdatePrice200ApplicationXML - Successful Operation
type UpdatePrice200ApplicationXML struct {
	Errors []UpdatePrice200ApplicationXMLErrors
	// Marketplace name. Example: Walmart-US
	Mart *string
	// A message of acknowledgement for a price update
	Message *string
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku        *string
	StatusCode *int
}

type UpdatePrice200ApplicationJSONErrorsCategoryEnum string

const (
	UpdatePrice200ApplicationJSONErrorsCategoryEnumApplication UpdatePrice200ApplicationJSONErrorsCategoryEnum = "APPLICATION"
	UpdatePrice200ApplicationJSONErrorsCategoryEnumSystem      UpdatePrice200ApplicationJSONErrorsCategoryEnum = "SYSTEM"
	UpdatePrice200ApplicationJSONErrorsCategoryEnumRequest     UpdatePrice200ApplicationJSONErrorsCategoryEnum = "REQUEST"
	UpdatePrice200ApplicationJSONErrorsCategoryEnumData        UpdatePrice200ApplicationJSONErrorsCategoryEnum = "DATA"
)

func (e *UpdatePrice200ApplicationJSONErrorsCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPLICATION":
		fallthrough
	case "SYSTEM":
		fallthrough
	case "REQUEST":
		fallthrough
	case "DATA":
		*e = UpdatePrice200ApplicationJSONErrorsCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationJSONErrorsCategoryEnum: %s", s)
	}
}

type UpdatePrice200ApplicationJSONErrorsCauses struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Field       *string `json:"field,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum string

const (
	UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnumInternalDataError UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum = "INTERNAL_DATA_ERROR"
	UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnumExternalDataError UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum = "EXTERNAL_DATA_ERROR"
	UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnumSystemError       UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum = "SYSTEM_ERROR"
)

func (e *UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTERNAL_DATA_ERROR":
		fallthrough
	case "EXTERNAL_DATA_ERROR":
		fallthrough
	case "SYSTEM_ERROR":
		*e = UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum: %s", s)
	}
}

type UpdatePrice200ApplicationJSONErrorsSeverityEnum string

const (
	UpdatePrice200ApplicationJSONErrorsSeverityEnumInfo  UpdatePrice200ApplicationJSONErrorsSeverityEnum = "INFO"
	UpdatePrice200ApplicationJSONErrorsSeverityEnumWarn  UpdatePrice200ApplicationJSONErrorsSeverityEnum = "WARN"
	UpdatePrice200ApplicationJSONErrorsSeverityEnumError UpdatePrice200ApplicationJSONErrorsSeverityEnum = "ERROR"
)

func (e *UpdatePrice200ApplicationJSONErrorsSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INFO":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		*e = UpdatePrice200ApplicationJSONErrorsSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePrice200ApplicationJSONErrorsSeverityEnum: %s", s)
	}
}

type UpdatePrice200ApplicationJSONErrors struct {
	Category             *UpdatePrice200ApplicationJSONErrorsCategoryEnum             `json:"category,omitempty"`
	Causes               []UpdatePrice200ApplicationJSONErrorsCauses                  `json:"causes,omitempty"`
	Code                 string                                                       `json:"code"`
	Component            *string                                                      `json:"component,omitempty"`
	Description          *string                                                      `json:"description,omitempty"`
	ErrorIdentifiers     map[string]map[string]interface{}                            `json:"errorIdentifiers,omitempty"`
	Field                *string                                                      `json:"field,omitempty"`
	GatewayErrorCategory *UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum `json:"gatewayErrorCategory,omitempty"`
	Info                 *string                                                      `json:"info,omitempty"`
	ServiceName          *string                                                      `json:"serviceName,omitempty"`
	Severity             *UpdatePrice200ApplicationJSONErrorsSeverityEnum             `json:"severity,omitempty"`
	Type                 *string                                                      `json:"type,omitempty"`
}

// UpdatePrice200ApplicationJSON - Successful Operation
type UpdatePrice200ApplicationJSON struct {
	Errors []UpdatePrice200ApplicationJSONErrors `json:"errors,omitempty"`
	// Marketplace name. Example: Walmart-US
	Mart *string `json:"mart,omitempty"`
	// A message of acknowledgement for a price update
	Message *string `json:"message,omitempty"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku        *string `json:"sku,omitempty"`
	StatusCode *int    `json:"statusCode,omitempty"`
}

type UpdatePriceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdatePrice200ApplicationJSONObject *UpdatePrice200ApplicationJSON
}
