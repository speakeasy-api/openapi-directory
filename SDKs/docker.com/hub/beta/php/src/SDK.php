<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Docker Hub is a service provided by Docker for finding and sharing container
 * 
 * images with your team.
 * 
 * It is the world's largest library and community for container images.
 * 
 * In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),
 * 
 * Docker provides an API that allows you to interact with Docker Hub.
 * 
 * Browse through the Docker Hub API documentation to explore the supported endpoints.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://hub.docker.com/',
		'https://docker.com/{version}',
	];
  	
    /**
     * The Personal Access Token endpoints lets you manage personal access tokens. For more 
     * 
     * information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
     * 
     * You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/) 
     * or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer 
     * token.
     * 
     * ### Scopes
     * 
     * For each scope grouping (in this case "repo"), you only need to define 1 scope as any lower 
     * scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both 
     * `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and* 
     * `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
     * 
     * ***Treat your personal access token like your password and keep it secret. You cannot retrieve 
     * your token after it is generated.***
     * 
     * 
     * @var AccessTokens $$accessTokens
     */
	public AccessTokens $accessTokens;
	
    /**
     * The Audit Logs API endpoints allow you to query audit log events across a
     * 
     * namespace.
     * 
     * For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)
     * 
     * 
     * @var AuditLogs $$auditLogs
     */
	public AuditLogs $auditLogs;
	
    /**
     * Most Docker Hub API endpoints require you to authenticate using your
     * 
     * Docker credentials before using them.
     * 
     * Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending 
     * on your plan (Free, Pro, or Team) and your account's permissions.
     * 
     * To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
     * 
     * 
     * @var Authentication $$authentication
     */
	public Authentication $authentication;
	
    /**
     * The Advanced Image Management API endpoints allow you to manage Docker
     * 
     * images across all repositories.
     * 
     * For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).
     * 
     * 
     * @var Images $$images
     */
	public Images $images;
	
    /**
     * The Org Settings API endpoints allow you to manage your organization's
     * 
     * settings.
     * 
     * 
     * @var OrgSettings $$orgSettings
     */
	public OrgSettings $orgSettings;
	
    /**
     * The repository endpoints allow you to manage your repository's
     * 
     * configuration like description.
     * 
     * 
     * @var Repositories $$repositories
     */
	public Repositories $repositories;
	
    /**
     * SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
     * 
     * For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
     * 
     * 
     * @var Scim $$scim
     */
	public Scim $scim;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->accessTokens = new AccessTokens(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->auditLogs = new AuditLogs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->authentication = new Authentication(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->images = new Images(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->orgSettings = new OrgSettings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->repositories = new Repositories(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->scim = new Scim(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}