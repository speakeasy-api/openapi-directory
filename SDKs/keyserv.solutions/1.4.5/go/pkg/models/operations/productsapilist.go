// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ProductsAPIListRequestBodyType string

const (
	ProductsAPIListRequestBodyTypeAPIKey ProductsAPIListRequestBodyType = "ApiKey"
)

type ProductsAPIListRequestBody struct {
	APIKey *shared.APIKey

	Type ProductsAPIListRequestBodyType
}

func CreateProductsAPIListRequestBodyAPIKey(apiKey shared.APIKey) ProductsAPIListRequestBody {
	typ := ProductsAPIListRequestBodyTypeAPIKey

	return ProductsAPIListRequestBody{
		APIKey: &apiKey,
		Type:   typ,
	}
}

func (u *ProductsAPIListRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	apiKey := new(shared.APIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&apiKey); err == nil {
		u.APIKey = apiKey
		u.Type = ProductsAPIListRequestBodyTypeAPIKey
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPIListRequestBody) MarshalJSON() ([]byte, error) {
	if u.APIKey != nil {
		return json.Marshal(u.APIKey)
	}

	return nil, nil
}

type ProductsAPIListRequest struct {
	RequestBody ProductsAPIListRequestBody `request:"mediaType=application/json"`
	Page        *int                       `queryParam:"style=form,explode=true,name=page"`
}

type ProductsAPIListResponse struct {
	ContentType  string
	ProductViews []shared.ProductView
	StatusCode   int
	RawResponse  *http.Response
}
