/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class PastMeetingDetailsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class PastMeetingDetailsRequest extends SpeakeasyBase {
  /**
   * The meeting UUID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for other API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingUUID",
  })
  meetingUUID: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Meeting details returned.
 */
export class PastMeetingDetails200ApplicationXML extends SpeakeasyBase {
  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  duration?: number;

  /**
   * Meeting end time (GMT).
   */
  @SpeakeasyMetadata()
  endTime?: Date;

  /**
   * Host ID.
   */
  @SpeakeasyMetadata()
  hostId?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  participantsCount?: number;

  /**
   * Meeting start time (GMT).
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  topic?: string;

  /**
   * Sum of meeting minutes from all participants in the meeting.
   */
  @SpeakeasyMetadata()
  totalMinutes?: number;

  /**
   * Meeting type.
   */
  @SpeakeasyMetadata()
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  userName?: string;

  /**
   * Meeting UUID.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Meeting details returned.
 */
export class PastMeetingDetails200ApplicationJSON extends SpeakeasyBase {
  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * Meeting end time (GMT).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Host ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_id" })
  hostId?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_count" })
  participantsCount?: number;

  /**
   * Meeting start time (GMT).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Sum of meeting minutes from all participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_minutes" })
  totalMinutes?: number;

  /**
   * Meeting type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_email" })
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_name" })
  userName?: string;

  /**
   * Meeting UUID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class PastMeetingDetailsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Meeting details returned.
   */
  @SpeakeasyMetadata()
  pastMeetingDetails200ApplicationJSONObject?: PastMeetingDetails200ApplicationJSON;
}
