<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the pubsub notification settings for the account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingResponse
     */
	public function mybusinessnotificationsAccountsGetNotificationSetting(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsGetNotificationSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationSetting = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotificationSetting', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the pubsub notification setting for the account informing Google which topic to send pubsub notifications for. Use the notification_types field within notification_setting to manipulate the events an account wants to subscribe to. An account will only have one notification setting resource, and only one pubsub topic can be set. To delete the setting, update with an empty notification_types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingResponse
     */
	public function mybusinessnotificationsAccountsUpdateNotificationSetting(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "notificationSetting", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessnotificationsAccountsUpdateNotificationSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationSetting = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotificationSetting', 'json');
            }
        }

        return $response;
    }
}