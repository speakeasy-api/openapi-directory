// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AzureSubscriptionListForAppSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AzureSubscriptionListForAppRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum string

const (
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumBadRequest          AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumConflict            AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumNotAcceptable       AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumNotFound            AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumInternalServerError AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumUnauthorized        AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnumTooManyRequests     AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum) ToPointer() *AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AzureSubscriptionListForAppDefaultApplicationJSONError struct {
	Code    AzureSubscriptionListForAppDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                         `json:"message"`
}

// AzureSubscriptionListForAppDefaultApplicationJSON - Error
type AzureSubscriptionListForAppDefaultApplicationJSON struct {
	Error AzureSubscriptionListForAppDefaultApplicationJSONError `json:"error"`
}

type AzureSubscriptionListForApp200ApplicationJSON struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AzureSubscriptionListForAppResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AzureSubscriptionListForApp200ApplicationJSONObjects []AzureSubscriptionListForApp200ApplicationJSON
	// Error
	AzureSubscriptionListForAppDefaultApplicationJSONObject *AzureSubscriptionListForAppDefaultApplicationJSON
}
