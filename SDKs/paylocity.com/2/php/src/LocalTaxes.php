<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LocalTaxes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add new local tax
     * 
     * Sends new employee local tax information directly to Web Pay.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxResponse
     */
	public function addLocalTax(
        \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes', \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "localTax", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddLocalTaxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete local tax by tax code
     * 
     * Delete local tax by tax code
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeResponse
     */
	public function deleteLocalTaxByTaxCode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}', \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteLocalTaxByTaxCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all local taxes
     * 
     * Returns all local taxes for the selected employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesResponse
     */
	public function getAllLocalTaxes(
        \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes', \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllLocalTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localTaxes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LocalTax>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get local taxes by tax code
     * 
     * Returns all local taxes with the provided tax code for the selected employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeResponse
     */
	public function getLocalTaxByTaxCode(
        \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}', \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLocalTaxByTaxCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localTaxes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LocalTax>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
}