"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filings:
    
    additional_bank_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_bank_names'), 'exclude': lambda f: f is None }})
    r"""Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds."""  
    amendment_chain: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_chain'), 'exclude': lambda f: f is None }})
    r"""The first value in the chain is the original filing.  The ordering in the chain reflects the order the
    amendments were filed up to the amendment being inspected.
    """  
    amendment_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator'), 'exclude': lambda f: f is None }})
    r"""The first value in the chain is the original filing.  The ordering in the chain reflects the order the
    amendments were filed up to the amendment being inspected.
    """  
    amendment_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_version'), 'exclude': lambda f: f is None }})
    r"""Amendment version"""  
    bank_depository_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_city'), 'exclude': lambda f: f is None }})
    r"""City of bank or depository as reported on the Form 1"""  
    bank_depository_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_name'), 'exclude': lambda f: f is None }})
    r"""Primary bank or depository in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds."""  
    bank_depository_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_state'), 'exclude': lambda f: f is None }})
    r"""State of bank or depository as reported on the Form 1"""  
    bank_depository_street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_street_1'), 'exclude': lambda f: f is None }})
    r"""Street of bank or depository as reported on their Form 1."""  
    bank_depository_street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_street_2'), 'exclude': lambda f: f is None }})
    r"""Second line of the street of bank or depository as reported on the Form 1"""  
    bank_depository_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_depository_zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of bank or depository as reported on the Form 1"""  
    beginning_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginning_image_number'), 'exclude': lambda f: f is None }})  
    candidate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    candidate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_name'), 'exclude': lambda f: f is None }})
    r"""Name of candidate running for office"""  
    cash_on_hand_beginning_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_beginning_period'), 'exclude': lambda f: f is None }})
    r"""Balance for the committee at the start of the two-year period"""  
    cash_on_hand_end_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_end_period'), 'exclude': lambda f: f is None }})
    r"""Ending cash balance on the most recent filing"""  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    coverage_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Ending date of the reporting period"""  
    coverage_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Beginning date of the reporting period"""  
    csv_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csv_url'), 'exclude': lambda f: f is None }})  
    cycle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle'), 'exclude': lambda f: f is None }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    debts_owed_by_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debts_owed_by_committee'), 'exclude': lambda f: f is None }})
    r"""Debts owed by the committee"""  
    debts_owed_to_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debts_owed_to_committee'), 'exclude': lambda f: f is None }})
    r"""Debts owed to the committee"""  
    document_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_description'), 'exclude': lambda f: f is None }})  
    document_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_type'), 'exclude': lambda f: f is None }})
    r"""The type of document for documents other than reports:
        - 2 24 Hour Contribution Notice
        - 4 48 Hour Contribution Notice
        - A Debt Settlement Statement
        - B Acknowledgment of Receipt of Debt Settlement Statement
        - C RFAI: Debt Settlement First Notice
        - D Commission Debt Settlement Review
        - E Commission Response TO Debt Settlement Request
        - F Administrative Termination
        - G Debt Settlement Plan Amendment
        - H Disavowal Notice
        - I Disavowal Response
        - J Conduit Report
        - K Termination Approval
        - L Repeat Non-Filer Notice
        - M Filing Frequency Change Notice
        - N Paper Amendment to Electronic Report
        - O Acknowledgment of Filing Frequency Change
        - S RFAI: Debt Settlement Second
        - T Miscellaneous Report TO FEC
        - V Repeat Violation Notice (441A OR 441B)
        - P Notice of Paper Filing
        - R F3L Filing Frequency Change Notice
        - Q Acknowledgment of F3L Filing Frequency Change
        - U Unregistered Committee Notice
    """  
    document_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_type_full'), 'exclude': lambda f: f is None }})
    r"""The type of document for documents other than reports:
        - 2 24 Hour Contribution Notice
        - 4 48 Hour Contribution Notice
        - A Debt Settlement Statement
        - B Acknowledgment of Receipt of Debt Settlement Statement
        - C RFAI: Debt Settlement First Notice
        - D Commission Debt Settlement Review
        - E Commission Response TO Debt Settlement Request
        - F Administrative Termination
        - G Debt Settlement Plan Amendment
        - H Disavowal Notice
        - I Disavowal Response
        - J Conduit Report
        - K Termination Approval
        - L Repeat Non-Filer Notice
        - M Filing Frequency Change Notice
        - N Paper Amendment to Electronic Report
        - O Acknowledgment of Filing Frequency Change
        - S RFAI: Debt Settlement Second
        - T Miscellaneous Report TO FEC
        - V Repeat Violation Notice (441A OR 441B)
        - P Notice of Paper Filing
        - R F3L Filing Frequency Change Notice
        - Q Acknowledgment of F3L Filing Frequency Change
        - U Unregistered Committee Notice
    """  
    election_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_year'), 'exclude': lambda f: f is None }})
    r"""Year of election"""  
    ending_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ending_image_number'), 'exclude': lambda f: f is None }})  
    fec_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_file_id'), 'exclude': lambda f: f is None }})  
    fec_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_url'), 'exclude': lambda f: f is None }})  
    file_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_number'), 'exclude': lambda f: f is None }})
    r"""Filing ID number"""  
    form_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_category'), 'exclude': lambda f: f is None }})
    r"""The forms filed are categorized based on the nature of the filing:
        - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
        - NOTICE F5, F24, F6, F9, F10, F11
        - STATEMENT F1, F2
        - OTHER F1M, F8, F99, F12, FRQ
    """  
    form_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_type'), 'exclude': lambda f: f is None }})
    r"""The form where the underlying data comes from, for example, Form 1 would appear as F1:
        - F1   Statement of Organization
        - F1M  Notification of Multicandidate Status
        - F2   Statement of Candidacy
        - F3   Report of Receipts and Disbursements for an Authorized Committee
        - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
        - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
        - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
        - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
        - F5   Report of Independent Expenditures Made and Contributions Received
        - F6   48 Hour Notice of Contributions/Loans Received
        - F7   Report of Communication Costs by Corporations and Membership Organizations
        - F8   Debt Settlement Plan
        - F9   24 Hour Notice of Disbursements for Electioneering Communications
        - F13  Report of Donations Accepted for Inaugural Committee
        - F99  Miscellaneous Text
        - FRQ  Request for Additional Information
    """  
    house_personal_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('house_personal_funds'), 'exclude': lambda f: f is None }})
    r"""House personal funds"""  
    html_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url'), 'exclude': lambda f: f is None }})
    r"""HTML link to the filing."""  
    is_amended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_amended'), 'exclude': lambda f: f is None }})
    r"""False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment."""  
    means_filed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('means_filed'), 'exclude': lambda f: f is None }})
    r"""The method used to file with the FEC, either electronic or on paper."""  
    most_recent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('most_recent'), 'exclude': lambda f: f is None }})
    r"""Report is either new or is the most-recently filed amendment"""  
    most_recent_file_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('most_recent_file_number'), 'exclude': lambda f: f is None }})  
    net_donations: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_donations'), 'exclude': lambda f: f is None }})
    r"""Net donations"""  
    office: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office'), 'exclude': lambda f: f is None }})
    r"""Federal office candidate runs for: H, S or P"""  
    opposition_personal_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opposition_personal_funds'), 'exclude': lambda f: f is None }})
    r"""Opposition personal funds"""  
    pages: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pages'), 'exclude': lambda f: f is None }})
    r"""Number of pages in the document"""  
    party: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf_url'), 'exclude': lambda f: f is None }})
    r"""pdf link to the filing"""  
    previous_file_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_file_number'), 'exclude': lambda f: f is None }})
    r"""Previous filing ID number"""  
    primary_general_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_general_indicator'), 'exclude': lambda f: f is None }})
    r"""Primary general indicator"""  
    receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the FEC received the electronic or paper record"""  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type_full'), 'exclude': lambda f: f is None }})  
    report_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_year'), 'exclude': lambda f: f is None }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    request_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_type'), 'exclude': lambda f: f is None }})
    r"""Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
        - 1 Statement of Organization
        - 2 Report of Receipts and Expenditures (Form 3 and 3X)
        - 3 Second Notice - Reports
        - 4 Request for Additional Information
        - 5 Informational - Reports
        - 6 Second Notice - Statement of Organization
        - 7 Failure to File
        - 8 From Public Disclosure
        - 9 From Multi Candidate Status
    """  
    senate_personal_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senate_personal_funds'), 'exclude': lambda f: f is None }})
    r"""Senate personal funds"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""US state or territory where a candidate runs for office"""  
    sub_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_id'), 'exclude': lambda f: f is None }})  
    total_communication_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_communication_cost'), 'exclude': lambda f: f is None }})
    r"""Total communications cost"""  
    total_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_disbursements'), 'exclude': lambda f: f is None }})
    r"""Total disbursements"""  
    total_independent_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_independent_expenditures'), 'exclude': lambda f: f is None }})
    r"""Total independent expenditures"""  
    total_individual_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_individual_contributions'), 'exclude': lambda f: f is None }})
    r"""Total individual contributions"""  
    total_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_receipts'), 'exclude': lambda f: f is None }})
    r"""Total receipts"""  
    treasurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name'), 'exclude': lambda f: f is None }})
    r"""Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown."""  
    update_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the record was updated"""  
    