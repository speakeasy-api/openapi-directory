"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import moderationresponse as shared_moderationresponse
from ..shared import thresholds as shared_thresholds
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageModerationResult:
    
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    message_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    user_bad_karma: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_bad_karma') }})  
    user_karma: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_karma') }})  
    ai_moderation_response: Optional[shared_moderationresponse.ModerationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ai_moderation_response'), 'exclude': lambda f: f is None }})  
    blocked_word: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked_word'), 'exclude': lambda f: f is None }})  
    blocklist_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklist_name'), 'exclude': lambda f: f is None }})  
    moderated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_by'), 'exclude': lambda f: f is None }})  
    moderation_thresholds: Optional[shared_thresholds.Thresholds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderation_thresholds'), 'exclude': lambda f: f is None }})
    r"""Sets thresholds for AI moderation"""  
    