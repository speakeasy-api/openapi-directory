"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import author_association_enum as shared_author_association_enum
from ..shared import link as shared_link
from ..shared import nullable_milestone as shared_nullable_milestone
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import repository as shared_repository
from ..shared import simple_user as shared_simple_user
from ..shared import team as shared_team
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestSimpleLinks:
    
    comments: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Hypermedia Link"""  
    commits: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits') }})
    r"""Hypermedia Link"""  
    html: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html') }})
    r"""Hypermedia Link"""  
    issue: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue') }})
    r"""Hypermedia Link"""  
    review_comment: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comment') }})
    r"""Hypermedia Link"""  
    review_comments: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comments') }})
    r"""Hypermedia Link"""  
    self_: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""Hypermedia Link"""  
    statuses: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses') }})
    r"""Hypermedia Link"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestSimpleBase:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})  
    repo: shared_repository.Repository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo') }})
    r"""A git repository"""  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Simple User"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestSimpleHead:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})  
    repo: shared_repository.Repository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo') }})
    r"""A git repository"""  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Simple User"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestSimpleLabels:
    
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    node_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullRequestSimple:
    r"""Pull Request Simple"""
    
    links: PullRequestSimpleLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    assignee: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee') }})
    r"""Simple User"""  
    author_association: shared_author_association_enum.AuthorAssociationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_association') }})
    r"""How the author is associated with the repository."""  
    base: PullRequestSimpleBase = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base') }})  
    body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body') }})  
    closed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    diff_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_url') }})  
    head: PullRequestSimpleHead = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issue_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_url') }})  
    labels: list[PullRequestSimpleLabels] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})  
    locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked') }})  
    merge_commit_sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_commit_sha') }})  
    merged_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merged_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    milestone: shared_nullable_milestone.NullableMilestone = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestone') }})
    r"""A collection of related issues and pull requests."""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})  
    patch_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch_url') }})  
    review_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comment_url') }})  
    review_comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_comments_url') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Simple User"""  
    active_lock_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_lock_reason'), 'exclude': lambda f: f is None }})  
    assignees: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees'), 'exclude': lambda f: f is None }})  
    draft: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the pull request is a draft."""  
    requested_reviewers: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_reviewers'), 'exclude': lambda f: f is None }})  
    requested_teams: Optional[list[shared_team.Team]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_teams'), 'exclude': lambda f: f is None }})  
    