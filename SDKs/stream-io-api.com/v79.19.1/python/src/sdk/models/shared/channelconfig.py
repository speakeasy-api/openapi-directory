"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import thresholds as shared_thresholds
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ChannelConfigAutomodEnum(str, Enum):
    DISABLED = 'disabled'
    SIMPLE = 'simple'
    AI = 'AI'

class ChannelConfigAutomodBehaviorEnum(str, Enum):
    FLAG = 'flag'
    BLOCK = 'block'

class ChannelConfigBlocklistBehaviorEnum(str, Enum):
    FLAG = 'flag'
    BLOCK = 'block'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelConfig:
    
    automod: ChannelConfigAutomodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automod') }})  
    automod_behavior: ChannelConfigAutomodBehaviorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automod_behavior') }})  
    commands: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commands') }})
    r"""List of commands that channel supports"""  
    connect_events: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connect_events') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    custom_events: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_events') }})  
    max_message_length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_message_length') }})  
    message_retention: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_retention') }})  
    mutes: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutes') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    push_notifications: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_notifications') }})  
    quotes: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotes') }})  
    reactions: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reactions') }})  
    read_events: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_events') }})  
    reminders: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminders') }})  
    replies: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replies') }})  
    search: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search') }})  
    typing_events: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typing_events') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    uploads: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploads') }})  
    url_enrichment: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_enrichment') }})  
    automod_thresholds: Optional[shared_thresholds.Thresholds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automod_thresholds'), 'exclude': lambda f: f is None }})
    r"""Sets thresholds for AI moderation"""  
    blocklist: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklist'), 'exclude': lambda f: f is None }})  
    blocklist_behavior: Optional[ChannelConfigBlocklistBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklist_behavior'), 'exclude': lambda f: f is None }})  
    