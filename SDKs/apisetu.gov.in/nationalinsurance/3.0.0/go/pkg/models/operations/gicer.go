// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GicerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type GicerRequestBodyCertificateParameters struct {
	// Customer No
	CustomerID string `json:"customer_Id"`
	// Policy Number
	PolicyNumber string `json:"policy_Number"`
	// Policy Start Date
	PolicyStartDate string `json:"policy_StartDate"`
}

// GicerRequestBodyFormatEnum - The format of the certificate in response.
type GicerRequestBodyFormatEnum string

const (
	GicerRequestBodyFormatEnumPdf GicerRequestBodyFormatEnum = "pdf"
)

func (e GicerRequestBodyFormatEnum) ToPointer() *GicerRequestBodyFormatEnum {
	return &e
}

func (e *GicerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = GicerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GicerRequestBodyFormatEnum: %v", v)
	}
}

// GicerRequestBody - Request format
type GicerRequestBody struct {
	CertificateParameters *GicerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format GicerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Gicer504ApplicationJSONErrorEnum string

const (
	Gicer504ApplicationJSONErrorEnumGatewayTimeout Gicer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Gicer504ApplicationJSONErrorEnum) ToPointer() *Gicer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Gicer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer504ApplicationJSONErrorDescriptionEnum string

const (
	Gicer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Gicer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Gicer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Gicer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer504ApplicationJSON - Gateway timeout
type Gicer504ApplicationJSON struct {
	Error            *Gicer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer503ApplicationJSONErrorEnum string

const (
	Gicer503ApplicationJSONErrorEnumServiceUnavailable Gicer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Gicer503ApplicationJSONErrorEnum) ToPointer() *Gicer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Gicer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer503ApplicationJSONErrorDescriptionEnum string

const (
	Gicer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Gicer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Gicer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Gicer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer503ApplicationJSON - Service unavailable
type Gicer503ApplicationJSON struct {
	Error            *Gicer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer502ApplicationJSONErrorEnum string

const (
	Gicer502ApplicationJSONErrorEnumBadGatewy Gicer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Gicer502ApplicationJSONErrorEnum) ToPointer() *Gicer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Gicer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer502ApplicationJSONErrorDescriptionEnum string

const (
	Gicer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Gicer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Gicer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Gicer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer502ApplicationJSON - Bad gateway
type Gicer502ApplicationJSON struct {
	Error            *Gicer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer500ApplicationJSONErrorEnum string

const (
	Gicer500ApplicationJSONErrorEnumInternalServerError Gicer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Gicer500ApplicationJSONErrorEnum) ToPointer() *Gicer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Gicer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer500ApplicationJSONErrorDescriptionEnum string

const (
	Gicer500ApplicationJSONErrorDescriptionEnumInternalServerError Gicer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Gicer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Gicer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer500ApplicationJSON - Internal server error
type Gicer500ApplicationJSON struct {
	Error            *Gicer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer404ApplicationJSONErrorEnum string

const (
	Gicer404ApplicationJSONErrorEnumRecordNotFound Gicer404ApplicationJSONErrorEnum = "record_not_found"
	Gicer404ApplicationJSONErrorEnumURLNotFound    Gicer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Gicer404ApplicationJSONErrorEnum) ToPointer() *Gicer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Gicer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer404ApplicationJSONErrorDescriptionEnum string

const (
	Gicer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Gicer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Gicer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Gicer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Gicer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Gicer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer404ApplicationJSON - No record found
type Gicer404ApplicationJSON struct {
	Error            *Gicer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer401ApplicationJSONErrorEnum string

const (
	Gicer401ApplicationJSONErrorEnumInvalidAuthentication Gicer401ApplicationJSONErrorEnum = "invalid_authentication"
	Gicer401ApplicationJSONErrorEnumInvalidAuthorization  Gicer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Gicer401ApplicationJSONErrorEnum) ToPointer() *Gicer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Gicer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer401ApplicationJSONErrorDescriptionEnum string

const (
	Gicer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Gicer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Gicer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Gicer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Gicer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Gicer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer401ApplicationJSON - Unauthorized access
type Gicer401ApplicationJSON struct {
	Error            *Gicer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Gicer400ApplicationJSONErrorEnum string

const (
	Gicer400ApplicationJSONErrorEnumMissingParameter Gicer400ApplicationJSONErrorEnum = "missing_parameter"
	Gicer400ApplicationJSONErrorEnumInvalidParameter Gicer400ApplicationJSONErrorEnum = "invalid_parameter"
	Gicer400ApplicationJSONErrorEnumInvalidFormat    Gicer400ApplicationJSONErrorEnum = "invalid_format"
	Gicer400ApplicationJSONErrorEnumInvalidTxnid     Gicer400ApplicationJSONErrorEnum = "invalid_txnid"
	Gicer400ApplicationJSONErrorEnumInvalidConsentid Gicer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Gicer400ApplicationJSONErrorEnum) ToPointer() *Gicer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Gicer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Gicer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Gicer400ApplicationJSONErrorDescriptionEnum string

const (
	Gicer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Gicer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Gicer400ApplicationJSONErrorDescriptionEnumBadRequest                              Gicer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Gicer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Gicer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Gicer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Gicer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Gicer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Gicer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Gicer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Gicer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Gicer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Gicer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gicer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Gicer400ApplicationJSON - Bad request
type Gicer400ApplicationJSON struct {
	Error            *Gicer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Gicer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type GicerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Gicer400ApplicationJSONObject *Gicer400ApplicationJSON
	// Unauthorized access
	Gicer401ApplicationJSONObject *Gicer401ApplicationJSON
	// No record found
	Gicer404ApplicationJSONObject *Gicer404ApplicationJSON
	// Internal server error
	Gicer500ApplicationJSONObject *Gicer500ApplicationJSON
	// Bad gateway
	Gicer502ApplicationJSONObject *Gicer502ApplicationJSON
	// Service unavailable
	Gicer503ApplicationJSONObject *Gicer503ApplicationJSON
	// Gateway timeout
	Gicer504ApplicationJSONObject *Gicer504ApplicationJSON
}
