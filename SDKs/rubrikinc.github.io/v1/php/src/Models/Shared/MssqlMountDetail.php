<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MssqlMountDetail - Returns detailed information for a specified Live Mount of a SQL Server database.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MssqlMountDetail
{
    /**
     * The date this mount was created.
     * 
     * @var \DateTime $creationDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('creationDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $creationDate;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
	#[\JMS\Serializer\Annotation\SerializedName('links')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MssqlMountLinks')]
    public MssqlMountLinks $links;
    
    /**
     * ID of the async request object for the mount task.
     * 
     * @var ?string $mountRequestId
     */
	#[\JMS\Serializer\Annotation\SerializedName('mountRequestId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mountRequestId = null;
    
    /**
     * ID for the mounted SQL Server database, once it is available.
     * 
     * @var ?string $mountedDatabaseId
     */
	#[\JMS\Serializer\Annotation\SerializedName('mountedDatabaseId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mountedDatabaseId = null;
    
    /**
     * Name for the mounted SQL Server database.
     * 
     * @var string $mountedDatabaseName
     */
	#[\JMS\Serializer\Annotation\SerializedName('mountedDatabaseName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mountedDatabaseName;
    
    /**
     * ID of the user who created this mount.
     * 
     * @var ?string $ownerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('ownerId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ownerId = null;
    
    /**
     * Name of the user who created this mount.
     * 
     * @var ?string $ownerName
     */
	#[\JMS\Serializer\Annotation\SerializedName('ownerName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ownerName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('sourceDatabaseId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sourceDatabaseId;
    
	#[\JMS\Serializer\Annotation\SerializedName('sourceDatabaseName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sourceDatabaseName;
    
	#[\JMS\Serializer\Annotation\SerializedName('sourceRecoveryPoint')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MssqlRecoveryPoint')]
    public MssqlRecoveryPoint $sourceRecoveryPoint;
    
    /**
     * The status of this mount. The status is **_Available_** when the database is successfully mounted and ready to use.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MssqlMountDetailStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MssqlMountDetailStatusEnum>')]
    public MssqlMountDetailStatusEnum $status;
    
	#[\JMS\Serializer\Annotation\SerializedName('targetInstanceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetInstanceId;
    
	#[\JMS\Serializer\Annotation\SerializedName('targetInstanceName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetInstanceName;
    
    /**
     * Name of the top-level object on which the target instance resides.
     * 
     * @var string $targetRootName
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetRootName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetRootName;
    
    /**
     * ID of the async request object for the delete task.
     * 
     * @var ?string $unmountRequestId
     */
	#[\JMS\Serializer\Annotation\SerializedName('unmountRequestId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $unmountRequestId = null;
    
	public function __construct()
	{
		$this->creationDate = new \DateTime();
		$this->id = "";
		$this->links = new \OpenAPI\OpenAPI\Models\Shared\MssqlMountLinks();
		$this->mountRequestId = null;
		$this->mountedDatabaseId = null;
		$this->mountedDatabaseName = "";
		$this->ownerId = null;
		$this->ownerName = null;
		$this->sourceDatabaseId = "";
		$this->sourceDatabaseName = "";
		$this->sourceRecoveryPoint = new \OpenAPI\OpenAPI\Models\Shared\MssqlRecoveryPoint();
		$this->status = \OpenAPI\OpenAPI\Models\Shared\MssqlMountDetailStatusEnum::AVAILABLE;
		$this->targetInstanceId = "";
		$this->targetInstanceName = "";
		$this->targetRootName = "";
		$this->unmountRequestId = null;
	}
}
