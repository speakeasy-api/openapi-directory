// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateArtifactPathParams struct {
	// The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
	ArtifactID string `pathParam:"style=simple,explode=false,name=artifactId"`
}

// UpdateArtifactXRegistryArtifactTypeEnum - Specifies the type of the artifact being added.  Possible values include:
//
// * Avro (`AVRO`)
// * Protobuf (`PROTOBUF`)
// * Protobuf File Descriptor (`PROTOBUF_FD`)
// * JSON Schema (`JSON`)
// * Kafka Connect (`KCONNECT`)
// * OpenAPI (`OPENAPI`)
// * AsyncAPI (`ASYNCAPI`)
// * GraphQL (`GRAPHQL`)
// * Web Services Description Language (`WSDL`)
// * XML Schema (`XSD`)
type UpdateArtifactXRegistryArtifactTypeEnum string

const (
	UpdateArtifactXRegistryArtifactTypeEnumAvro       UpdateArtifactXRegistryArtifactTypeEnum = "AVRO"
	UpdateArtifactXRegistryArtifactTypeEnumProtobuf   UpdateArtifactXRegistryArtifactTypeEnum = "PROTOBUF"
	UpdateArtifactXRegistryArtifactTypeEnumProtobufFd UpdateArtifactXRegistryArtifactTypeEnum = "PROTOBUF_FD"
	UpdateArtifactXRegistryArtifactTypeEnumJSON       UpdateArtifactXRegistryArtifactTypeEnum = "JSON"
	UpdateArtifactXRegistryArtifactTypeEnumOpenapi    UpdateArtifactXRegistryArtifactTypeEnum = "OPENAPI"
	UpdateArtifactXRegistryArtifactTypeEnumAsyncapi   UpdateArtifactXRegistryArtifactTypeEnum = "ASYNCAPI"
	UpdateArtifactXRegistryArtifactTypeEnumGraphql    UpdateArtifactXRegistryArtifactTypeEnum = "GRAPHQL"
	UpdateArtifactXRegistryArtifactTypeEnumKconnect   UpdateArtifactXRegistryArtifactTypeEnum = "KCONNECT"
	UpdateArtifactXRegistryArtifactTypeEnumWsdl       UpdateArtifactXRegistryArtifactTypeEnum = "WSDL"
	UpdateArtifactXRegistryArtifactTypeEnumXsd        UpdateArtifactXRegistryArtifactTypeEnum = "XSD"
	UpdateArtifactXRegistryArtifactTypeEnumXML        UpdateArtifactXRegistryArtifactTypeEnum = "XML"
)

func (e *UpdateArtifactXRegistryArtifactTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AVRO":
		fallthrough
	case "PROTOBUF":
		fallthrough
	case "PROTOBUF_FD":
		fallthrough
	case "JSON":
		fallthrough
	case "OPENAPI":
		fallthrough
	case "ASYNCAPI":
		fallthrough
	case "GRAPHQL":
		fallthrough
	case "KCONNECT":
		fallthrough
	case "WSDL":
		fallthrough
	case "XSD":
		fallthrough
	case "XML":
		*e = UpdateArtifactXRegistryArtifactTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateArtifactXRegistryArtifactTypeEnum: %s", s)
	}
}

type UpdateArtifactHeaders struct {
	// Specifies the type of the artifact being added.  Possible values include:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *UpdateArtifactXRegistryArtifactTypeEnum `header:"style=simple,explode=false,name=X-Registry-ArtifactType"`
}

type UpdateArtifactRequest struct {
	PathParams UpdateArtifactPathParams
	Headers    UpdateArtifactHeaders
	// The new content of the artifact being updated. This is often, but not always, JSON data
	// representing one of the supported artifact types:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	//
	Request []byte `request:"mediaType=*/*"`
}

type UpdateArtifactResponse struct {
	// When successful, returns the updated artifact metadata.
	ArtifactMetaData *shared.ArtifactMetaData
	ContentType      string
	// Common response for all operations that can return a `404` error.
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
}
