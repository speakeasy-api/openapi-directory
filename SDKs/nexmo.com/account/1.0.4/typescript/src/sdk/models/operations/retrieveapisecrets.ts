/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class RetrieveAPISecretsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class RetrieveAPISecretsRequest extends SpeakeasyBase {
  /**
   * The API key to manage secrets for
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=api_key",
  })
  apiKey: string;
}

/**
 * Credentials are missing or invalid
 */
export class RetrieveAPISecrets401ApplicationJSON extends SpeakeasyBase {
  /**
   * More detail regarding this error, including the expected value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Internal Trace ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  instance?: string;

  /**
   * Description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * URL for further information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * The single `secrets` key returns an array of API secrets
 */
export class RetrieveAPISecrets200ApplicationJSONEmbedded extends SpeakeasyBase {
  /**
   * Array of API secrets
   */
  @SpeakeasyMetadata({ elemType: shared.SecretInfo })
  @Expose({ name: "secrets" })
  @Type(() => shared.SecretInfo)
  secrets?: shared.SecretInfo[];
}

/**
 * The list of your current API secrets
 */
export class RetrieveAPISecrets200ApplicationJSON extends SpeakeasyBase {
  /**
   * The single `secrets` key returns an array of API secrets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_embedded" })
  @Type(() => RetrieveAPISecrets200ApplicationJSONEmbedded)
  embedded?: RetrieveAPISecrets200ApplicationJSONEmbedded;

  /**
   * Links related to this resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => shared.SecretMgmtLinks)
  links?: shared.SecretMgmtLinks;
}

export class RetrieveAPISecretsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Item not found
   */
  @SpeakeasyMetadata()
  errorAPIKeyNotFound?: shared.ErrorAPIKeyNotFound;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The list of your current API secrets
   */
  @SpeakeasyMetadata()
  retrieveAPISecrets200ApplicationJSONObject?: RetrieveAPISecrets200ApplicationJSON;

  /**
   * Credentials are missing or invalid
   */
  @SpeakeasyMetadata()
  retrieveAPISecrets401ApplicationJSONObject?: RetrieveAPISecrets401ApplicationJSON;
}
