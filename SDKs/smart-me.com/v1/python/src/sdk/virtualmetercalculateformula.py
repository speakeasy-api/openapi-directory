"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VirtualMeterCalculateFormula:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def virtual_meter_calculate_formula_get(self, request: operations.VirtualMeterCalculateFormulaGetRequest) -> operations.VirtualMeterCalculateFormulaGetResponse:
        r"""Calculates a virtual meter from a formula. 
                    A meter is coded as ID(\\"METERID\\")
        Calculates a virtual meter from a formula.
                    
                    A meter is coded as ID(\"METERID\")
                    Ariphmetical operators:
                     ()  parentheses;  
                     +   plus (a + b); 
                     -  minus (a - b); 
                     *  multiplycation symbol (a * b); 
                     /  divide symbol (a / b); 
                    Example: (ID(\"63ac09cb-4e5f-4f3e-bd27-ad8c30bdfc0c\") + ID(\"0209555e-9dc4-4e84-a166-a864488b4b12\")) * 2
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/VirtualMeterCalculateFormula'
        
        query_params = utils.get_query_params(operations.VirtualMeterCalculateFormulaGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualMeterCalculateFormulaGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Device])
                res.device = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Device])
                res.device = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    