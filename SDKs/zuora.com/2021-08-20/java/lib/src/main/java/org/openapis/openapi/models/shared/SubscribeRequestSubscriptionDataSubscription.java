/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SubscribeRequestSubscriptionDataSubscription - Container for custom fields of a Subscription object.
 * 
 */
public class SubscribeRequestSubscriptionDataSubscription {
    /**
     *  This field can be updated when `Status` is `Draft`. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public SubscribeRequestSubscriptionDataSubscription withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  A filter option for querying all subscriptions under the same account hierarchy.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a valid account ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AncestorAccountId")
    public String ancestorAccountId;
    public SubscribeRequestSubscriptionDataSubscription withAncestorAccountId(String ancestorAccountId) {
        this.ancestorAccountId = ancestorAccountId;
        return this;
    }
    
    /**
     *  This field can be updated when `Status` is `Draft`. Indicates if the subscription automatically renews at the end of the term. This field is only required if the `TermType` field is set to `TERMED`.
     * 
     * 
     * 
     * **Values**: `true`, `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoRenew")
    public Boolean autoRenew;
    public SubscribeRequestSubscriptionDataSubscription withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }
    
    /**
     *  The date of the amendment that canceled the subscription.
     * 
     * 
     * 
     * **Values**: inherited from `Amendment`.`EffectiveDate` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("CancelledDate")
    public LocalDate cancelledDate;
    public SubscribeRequestSubscriptionDataSubscription withCancelledDate(LocalDate cancelledDate) {
        this.cancelledDate = cancelledDate;
        return this;
    }
    
    /**
     *  The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`.
     * 
     * 
     * This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:
     * 
     * - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.
     * - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ContractAcceptanceDate")
    public LocalDate contractAcceptanceDate;
    public SubscribeRequestSubscriptionDataSubscription withContractAcceptanceDate(LocalDate contractAcceptanceDate) {
        this.contractAcceptanceDate = contractAcceptanceDate;
        return this;
    }
    
    /**
     *  The date when the contract takes effect. This field can be updated when **Status** is `Draft`.
     * 
     * 
     * **Note**: This field is required in the subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field. 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ContractEffectiveDate")
    public LocalDate contractEffectiveDate;
    public SubscribeRequestSubscriptionDataSubscription withContractEffectiveDate(LocalDate contractEffectiveDate) {
        this.contractEffectiveDate = contractEffectiveDate;
        return this;
    }
    
    /**
     * The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CpqBundleJsonId__QT")
    public String cpqBundleJsonIdQT;
    public SubscribeRequestSubscriptionDataSubscription withCpqBundleJsonIdQT(String cpqBundleJsonIdQT) {
        this.cpqBundleJsonIdQT = cpqBundleJsonIdQT;
        return this;
    }
    
    /**
     * The user ID of the person who created the subscription.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public SubscribeRequestSubscriptionDataSubscription withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date the subscription was created. This value is the same as the OriginalCreatedDate value until the subscription is amended.
     * 
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public SubscribeRequestSubscriptionDataSubscription withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  The account ID that created the subscription or the amended subscription.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatorAccountId")
    public String creatorAccountId;
    public SubscribeRequestSubscriptionDataSubscription withCreatorAccountId(String creatorAccountId) {
        this.creatorAccountId = creatorAccountId;
        return this;
    }
    
    /**
     * The account ID that owns the invoices associated with the subscription or the amended subscription.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatorInvoiceOwnerId")
    public String creatorInvoiceOwnerId;
    public SubscribeRequestSubscriptionDataSubscription withCreatorInvoiceOwnerId(String creatorInvoiceOwnerId) {
        this.creatorInvoiceOwnerId = creatorInvoiceOwnerId;
        return this;
    }
    
    /**
     *  The length of the period for the current subscription term. This field is only required If the `TermType` field is set to `TERMED` and its value must be greater than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default is `0`.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentTerm")
    public Integer currentTerm;
    public SubscribeRequestSubscriptionDataSubscription withCurrentTerm(Integer currentTerm) {
        this.currentTerm = currentTerm;
        return this;
    }
    
    /**
     *  The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.
     * 
     * 
     * 
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentTermPeriodType")
    public String currentTermPeriodType;
    public SubscribeRequestSubscriptionDataSubscription withCurrentTermPeriodType(String currentTermPeriodType) {
        this.currentTermPeriodType = currentTermPeriodType;
        return this;
    }
    
    /**
     *  The length of the period for the first subscription term. This field can be updated when Status is `Draft`. If you use the subscribe
     * call, this field is required.
     * 
     * 
     * This field is only required if the `TermType` field is set to `TERMED`.
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: any valid number. The default value is 0. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialTerm")
    public Integer initialTerm;
    public SubscribeRequestSubscriptionDataSubscription withInitialTerm(Integer initialTerm) {
        this.initialTerm = initialTerm;
        return this;
    }
    
    /**
     *  The period type for the first subscription term.
     * 
     * 
     * 
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * 
     * 
     * **Note**:
     * 
     * - This field can be updated when `Status` is `Draft`.
     * - This field is used with the `InitialTerm` field to specify the initial subscription term.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialTermPeriodType")
    public String initialTermPeriodType;
    public SubscribeRequestSubscriptionDataSubscription withInitialTermPeriodType(String initialTermPeriodType) {
        this.initialTermPeriodType = initialTermPeriodType;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public SubscribeRequestSubscriptionDataSubscription withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public SubscribeRequestSubscriptionDataSubscription withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  This field can be updated when `Status` is `Draft`. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceOwnerId")
    public String invoiceOwnerId;
    public SubscribeRequestSubscriptionDataSubscription withInvoiceOwnerId(String invoiceOwnerId) {
        this.invoiceOwnerId = invoiceOwnerId;
        return this;
    }
    
    /**
     *  Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.
     * 
     * 
     * 
     * **Values**: `TRUE`, `FALSE `(default) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsInvoiceSeparate")
    public Boolean isInvoiceSeparate;
    public SubscribeRequestSubscriptionDataSubscription withIsInvoiceSeparate(Boolean isInvoiceSeparate) {
        this.isInvoiceSeparate = isInvoiceSeparate;
        return this;
    }
    
    /**
     *  The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur. You can change this value only when the subscription is in `Draft` status. Once the subscription is activated, you can't change this value, nor can you use this value for a different subscription.
     * 
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: one of the following:
     * 
     * - leave null to automatically generate
     * - a string of 100 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public SubscribeRequestSubscriptionDataSubscription withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  Use this field to record comments about the subscription.
     * 
     * 
     * **Character limit**: 500
     * 
     * 
     * **Values**: a string of 500 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Notes")
    public String notes;
    public SubscribeRequestSubscriptionDataSubscription withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("OpportunityCloseDate__QT")
    public LocalDate opportunityCloseDateQT;
    public SubscribeRequestSubscriptionDataSubscription withOpportunityCloseDateQT(LocalDate opportunityCloseDateQT) {
        this.opportunityCloseDateQT = opportunityCloseDateQT;
        return this;
    }
    
    /**
     * The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpportunityName__QT")
    public String opportunityNameQT;
    public SubscribeRequestSubscriptionDataSubscription withOpportunityNameQT(String opportunityNameQT) {
        this.opportunityNameQT = opportunityNameQT;
        return this;
    }
    
    /**
     *  The date when the subscription was originally created. This value is the same as the CreatedDate value until the subscription is amended.
     * 
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("OriginalCreatedDate")
    public OffsetDateTime originalCreatedDate;
    public SubscribeRequestSubscriptionDataSubscription withOriginalCreatedDate(OffsetDateTime originalCreatedDate) {
        this.originalCreatedDate = originalCreatedDate;
        return this;
    }
    
    /**
     *  The original ID of this subscription.
     * 
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OriginalId")
    public String originalId;
    public SubscribeRequestSubscriptionDataSubscription withOriginalId(String originalId) {
        this.originalId = originalId;
        return this;
    }
    
    /**
     *  The subscription ID immediately prior to the current subscription.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PreviousSubscriptionId")
    public String previousSubscriptionId;
    public SubscribeRequestSubscriptionDataSubscription withPreviousSubscriptionId(String previousSubscriptionId) {
        this.previousSubscriptionId = previousSubscriptionId;
        return this;
    }
    
    /**
     * The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Project__NS")
    public String projectNS;
    public SubscribeRequestSubscriptionDataSubscription withProjectNS(String projectNS) {
        this.projectNS = projectNS;
        return this;
    }
    
    /**
     * The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteBusinessType__QT")
    public String quoteBusinessTypeQT;
    public SubscribeRequestSubscriptionDataSubscription withQuoteBusinessTypeQT(String quoteBusinessTypeQT) {
        this.quoteBusinessTypeQT = quoteBusinessTypeQT;
        return this;
    }
    
    /**
     * The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteNumber__QT")
    public String quoteNumberQT;
    public SubscribeRequestSubscriptionDataSubscription withQuoteNumberQT(String quoteNumberQT) {
        this.quoteNumberQT = quoteNumberQT;
        return this;
    }
    
    /**
     * The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteType__QT")
    public String quoteTypeQT;
    public SubscribeRequestSubscriptionDataSubscription withQuoteTypeQT(String quoteTypeQT) {
        this.quoteTypeQT = quoteTypeQT;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
     * 
     * 
     * This field is only required if the `TermType` field is set to `TERMED`.
     * 
     * 
     * **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalSetting")
    public String renewalSetting;
    public SubscribeRequestSubscriptionDataSubscription withRenewalSetting(String renewalSetting) {
        this.renewalSetting = renewalSetting;
        return this;
    }
    
    /**
     *  The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. If you use the subscribe
     * call, this field is required.
     * 
     * 
     * This field is only required if the `TermType` field is set to `TERMED`.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: one of the following:
     * 
     * - leave null to default to `0`
     * - any number
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTerm")
    public Integer renewalTerm;
    public SubscribeRequestSubscriptionDataSubscription withRenewalTerm(Integer renewalTerm) {
        this.renewalTerm = renewalTerm;
        return this;
    }
    
    /**
     *  The period type for the subscription renewal term.
     * 
     * 
     * 
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * 
     * 
     * **Note**:
     * 
     * - This field is used with the RenewalTerm field to specify the subscription renewal term.
     * - This field can be updated when Status is `Draft`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTermPeriodType")
    public String renewalTermPeriodType;
    public SubscribeRequestSubscriptionDataSubscription withRenewalTermPeriodType(String renewalTermPeriodType) {
        this.renewalTermPeriodType = renewalTermPeriodType;
        return this;
    }
    
    /**
     * The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SalesOrder__NS")
    public String salesOrderNS;
    public SubscribeRequestSubscriptionDataSubscription withSalesOrderNS(String salesOrderNS) {
        this.salesOrderNS = salesOrderNS;
        return this;
    }
    
    /**
     *  The date when the subscription is activated.
     * This field can be updated when **Status** is `Draft`. This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`.
     * If this setting is set to `Yes`:
     * 
     * - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.
     * - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ServiceActivationDate")
    public LocalDate serviceActivationDate;
    public SubscribeRequestSubscriptionDataSubscription withServiceActivationDate(LocalDate serviceActivationDate) {
        this.serviceActivationDate = serviceActivationDate;
        return this;
    }
    
    /**
     *  The status of the subscription.
     * 
     * 
     * **Character limit**: 17
     * 
     * 
     * **Values**: automatically generated
     * 
     * **Possible values**: one of the following:
     * 
     * - `Draft`
     * - `PendingActivation`
     * - `PendingAcceptance`
     * - `Active`
     * - `Cancelled`
     * - `Expired`
     * - `Suspended` (This value is in **Limited Availability**.)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public SubscribeRequestSubscriptionDataSubscription withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     *  The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("SubscriptionEndDate")
    public LocalDate subscriptionEndDate;
    public SubscribeRequestSubscriptionDataSubscription withSubscriptionEndDate(LocalDate subscriptionEndDate) {
        this.subscriptionEndDate = subscriptionEndDate;
        return this;
    }
    
    /**
     *  The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("SubscriptionStartDate")
    public LocalDate subscriptionStartDate;
    public SubscribeRequestSubscriptionDataSubscription withSubscriptionStartDate(LocalDate subscriptionStartDate) {
        this.subscriptionStartDate = subscriptionStartDate;
        return this;
    }
    
    /**
     * Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public SubscribeRequestSubscriptionDataSubscription withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. The date when the subscription term ends. If the subscription is evergreen, the TermEndDate value is null or is the cancelation date, as appropriate.
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TermEndDate")
    public LocalDate termEndDate;
    public SubscribeRequestSubscriptionDataSubscription withTermEndDate(LocalDate termEndDate) {
        this.termEndDate = termEndDate;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date. If you don't specify a value, then Zuora uses ContractEffectiveDate automatically.
     * 
     * 
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TermStartDate")
    public LocalDate termStartDate;
    public SubscribeRequestSubscriptionDataSubscription withTermStartDate(LocalDate termStartDate) {
        this.termStartDate = termStartDate;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. Indicates if a subscription is [termed or evergreen](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions#Termed_and_Evergreen_Subscriptions). A termed subscription has a specific end date and requires manual renewal. An evergreen subscription doesn't have an end date and doesn't need renewal. This field can be updated when the subscription status is Draft.
     * 
     * 
     * **Character limit**: 9
     * 
     * 
     * **Values**: `TERMED`, `EVERGREEN` 
     */
    @JsonProperty("TermType")
    public String termType;
    public SubscribeRequestSubscriptionDataSubscription withTermType(String termType) {
        this.termType = termType;
        return this;
    }
    
    /**
     *  The ID of the user who last updated the subscription.
     * **Character limit:** 32 **Values: **automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public SubscribeRequestSubscriptionDataSubscription withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the subscription was last updated.
     * **Character limit:** 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public SubscribeRequestSubscriptionDataSubscription withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
    /**
     *  The version number of the subscription.
     * 
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Version")
    public Integer version;
    public SubscribeRequestSubscriptionDataSubscription withVersion(Integer version) {
        this.version = version;
        return this;
    }
    
}
