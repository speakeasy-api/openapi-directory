<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.
 * 
 * You can access all information and trigger all actions.
 * The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://circleci.com/api/v1',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Clears the cache for a project.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheResponse
     */
	public function deleteProjectUsernameProjectBuildCache(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/build-cache', \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteProjectUsernameProjectBuildCache200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectBuildCache200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a checkout key.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse
     */
	public function deleteProjectUsernameProjectCheckoutKeyFingerprint(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/checkout-key/{fingerprint}', \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteProjectUsernameProjectCheckoutKeyFingerprint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectCheckoutKeyFingerprint200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the environment variable named ':name'
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameResponse
     */
	public function deleteProjectUsernameProjectEnvvarName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/envvar/{name}', \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteProjectUsernameProjectEnvvarName200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteProjectUsernameProjectEnvvarName200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides information about the signed in user.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
     */
	public function getMe(
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Build summary for each of the last 30 builds for a single git repo.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectResponse
     */
	public function getProjectUsernameProject(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->builds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Build>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists checkout keys.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyResponse
     */
	public function getProjectUsernameProjectCheckoutKey(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/checkout-key', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Key>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a checkout key.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintResponse
     */
	public function getProjectUsernameProjectCheckoutKeyFingerprint(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/checkout-key/{fingerprint}', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectCheckoutKeyFingerprintResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the environment variables for :project
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarResponse
     */
	public function getProjectUsernameProjectEnvvar(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/envvar', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->envvars = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Envvar>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the hidden value of environment variable :name
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameResponse
     */
	public function getProjectUsernameProjectEnvvarName(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/envvar/{name}', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectEnvvarNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->envvar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Envvar', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Full details for a single build. The response includes all of the fields from the build summary.
     * This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumResponse
     */
	public function getProjectUsernameProjectBuildNum(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/{build_num}', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BuildDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the artifacts produced by a given build.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsResponse
     */
	public function getProjectUsernameProjectBuildNumArtifacts(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/{build_num}/artifacts', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumArtifactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifacts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Artifact>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides test metadata for a build
     * Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsResponse
     */
	public function getProjectUsernameProjectBuildNumTests(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/{build_num}/tests', \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUsernameProjectBuildNumTestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tests = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tests', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all the projects you're following on CircleCI, with build information organized by branch.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectsResponse
     */
	public function getProjects(
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Build summary for each of the last 30 recent builds, ordered by build_num.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsResponse
     */
	public function getRecentBuilds(
        \OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/recent-builds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRecentBuildsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->builds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Build>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a new build, returns a summary of the build.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectResponse
     */
	public function postProjectUsernameProject(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BuildSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new checkout key.
     * Only usable with a user API token.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyResponse
     */
	public function postProjectUsernameProjectCheckoutKey(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/checkout-key', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectCheckoutKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new environment variable
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarResponse
     */
	public function postProjectUsernameProjectEnvvar(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/envvar', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectEnvvarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->envvar = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Envvar', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an ssh key used to access external systems that require SSH key-based authentication
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyResponse
     */
	public function postProjectUsernameProjectSshKey(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/ssh-key', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postProjectUsernameProjectSshKeyDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectSshKeyDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a new build, returns a summary of the build.
     * Optional build parameters can be set using an experimental API.
     * 
     * Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchResponse
     */
	public function postProjectUsernameProjectTreeBranch(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/tree/{branch}', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectTreeBranchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->build = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Build', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels the build, returns a summary of the build.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelResponse
     */
	public function postProjectUsernameProjectBuildNumCancel(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/{build_num}/cancel', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->build = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Build', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retries the build, returns a summary of the new build.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryResponse
     */
	public function postProjectUsernameProjectBuildNumRetry(
        \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{username}/{project}/{build_num}/retry', \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProjectUsernameProjectBuildNumRetryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->build = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Build', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds your Heroku API key to CircleCI, takes apikey as form param name.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUserHerokuKeyResponse
     */
	public function postUserHerokuKey(
    ): \OpenAPI\OpenAPI\Models\Operations\PostUserHerokuKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/heroku-key');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUserHerokuKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postUserHerokuKey403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostUserHerokuKey403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}