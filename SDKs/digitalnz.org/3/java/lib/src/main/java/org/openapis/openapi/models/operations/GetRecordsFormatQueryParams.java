/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetRecordsFormatQueryParams {
    /**
     * These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text=&amp;tab=Videos)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[category][]")
    public GetRecordsFormatAndCategoryEnum andCategory;
    public GetRecordsFormatQueryParams withAndCategory(GetRecordsFormatAndCategoryEnum andCategory) {
        this.andCategory = andCategory;
        return this;
    }
    
    /**
     * This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.  
     * Example: `"1900"` `"2000"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[century]")
    public String andCentury;
    public GetRecordsFormatQueryParams withAndCentury(String andCentury) {
        this.andCentury = andCentury;
        return this;
    }
    
    /**
     * Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.  
     * Examples: `"Music 101"` `"Mollusks"` `"Wairarapa Daily Times"`
     *   
     * *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *"&amp;facets=collection"*. 
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[collection][]")
    public String andCollection;
    public GetRecordsFormatQueryParams withAndCollection(String andCollection) {
        this.andCollection = andCollection;
        return this;
    }
    
    /**
     * Allows filtering for records from a particular Content Partner.  
     * Examples: `"Ministry for Culture and Heritage"` `"Trove"` `"V.C. Browne &amp; Son"`
     *   
     * *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *"&amp;facets=content_partner"*.  
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[content_partner][]")
    public String andContentPartner;
    public GetRecordsFormatQueryParams withAndContentPartner(String andContentPartner) {
        this.andContentPartner = andContentPartner;
        return this;
    }
    
    /**
     * Examples: `"Revelle Jackson"` `"Nicholas Chevalier"` `"Rita Angus"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[creator][]")
    public String andCreator;
    public GetRecordsFormatQueryParams withAndCreator(String andCreator) {
        this.andCreator = andCreator;
        return this;
    }
    
    /**
     * This field can be useful for querying and sorting (see the 'sort' param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don't have date metadata available.  
     * Example: `"1970-12-25"`
     * 
     * *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called 'display_date'.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[date]")
    public String andDate;
    public GetRecordsFormatQueryParams withAndDate(String andDate) {
        this.andDate = andDate;
        return this;
    }
    
    /**
     * Examples: `"Conference item"` `"Magazines"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[dc_type][]")
    public String andDcType;
    public GetRecordsFormatQueryParams withAndDcType(String andDcType) {
        this.andDcType = andDcType;
        return this;
    }
    
    /**
     * This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.  
     * Example: `"1850"` `"1990"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[decade]")
    public String andDecade;
    public GetRecordsFormatQueryParams withAndDecade(String andDecade) {
        this.andDecade = andDecade;
        return this;
    }
    
    /**
     * Examples: `"Photolithographs"` `"Glass*"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[format][]")
    public String andFormat;
    public GetRecordsFormatQueryParams withAndFormat(String andFormat) {
        this.andFormat = andFormat;
        return this;
    }
    
    /**
     * Filters results to only those records that have an image available in the *large_thumbnail_url* field.  
     * **Note:** There is an issue with this field where, in order to get results, it needs to be specified with "Y" or not specified at all.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[has_large_thumbnail_url]")
    public GetRecordsFormatAndHasLargeThumbnailUrlEnum andHasLargeThumbnailUrl;
    public GetRecordsFormatQueryParams withAndHasLargeThumbnailUrl(GetRecordsFormatAndHasLargeThumbnailUrlEnum andHasLargeThumbnailUrl) {
        this.andHasLargeThumbnailUrl = andHasLargeThumbnailUrl;
        return this;
    }
    
    /**
     * Filters results to only those records that have latitude and longitude coordinates present in the metadata.
     *   
     * *Tip* - To see the location metadata you'll need to specifically request that field using the *fields* parameter - *"&amp;fields=verbose,locations"*  as it is not part of the default, or verbose field sets.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[has_lat_lng]")
    public GetRecordsFormatAndHasLatLngEnum andHasLatLng;
    public GetRecordsFormatQueryParams withAndHasLatLng(GetRecordsFormatAndHasLatLngEnum andHasLatLng) {
        this.andHasLatLng = andHasLatLng;
        return this;
    }
    
    /**
     * Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[is_commercial_use]")
    public Boolean andIsCommercialUse;
    public GetRecordsFormatQueryParams withAndIsCommercialUse(Boolean andIsCommercialUse) {
        this.andIsCommercialUse = andIsCommercialUse;
        return this;
    }
    
    /**
     * All of the above `and[___][]` filters in this document are also able to be used with the `and[or][___][]` syntax to allow multi-select *OR* queries within one field.  
     * Basic example: 
     * - To filter your results to only those with a category or Audio or Videos:   
     * `&amp;and[or][category][]=Audio&amp;and[or][category][]=Videos` 
     *   
     * In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows  
     * Nested examples: 
     *  - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*  
     *  `&amp;and[or][year][]=2015&amp;and[or][year][]=2014&amp;and[and][or][primary_collection][]=TAPUHI&amp;and[and][or][primary_collection][]=Public+Address`  
     *  - To search for *(category is Images OR Video) AND (subject is cat OR cats)*  
     *  `&amp;and[or][category][]=Images&amp;and[or][category][]=Videos&amp;and[and][or][subject][]=cat&amp;and[and][or][subject][]=cats`  
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[or][{filter_field}][]")
    public String andOrFilterField;
    public GetRecordsFormatQueryParams withAndOrFilterField(String andOrFilterField) {
        this.andOrFilterField = andOrFilterField;
        return this;
    }
    
    /**
     * This field can be used for text-based location search. For a more advanced coordinate-based search, see the "geo_bbox" field below.  
     * Examples: `"Scott Base"` `"Wainuiomata"` `"castle*"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[placename][]")
    public String andPlacename;
    public GetRecordsFormatQueryParams withAndPlacename(String andPlacename) {
        this.andPlacename = andPlacename;
        return this;
    }
    
    /**
     * Allows filtering for records from a particular *primary_collection*.  
     * Examples: `"Puke Ariki"` `"NZHistory"` `"TAPUHI"`  
     *   
     * *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *"&amp;facets=primary_collection"*.   
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[primary_collection][]")
    public String andPrimaryCollection;
    public GetRecordsFormatQueryParams withAndPrimaryCollection(String andPrimaryCollection) {
        this.andPrimaryCollection = andPrimaryCollection;
        return this;
    }
    
    /**
     * Examples: `"Cats"` `"Weddings"` `"climb*"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[subject][]")
    public String andSubject;
    public GetRecordsFormatQueryParams withAndSubject(String andSubject) {
        this.andSubject = andSubject;
        return this;
    }
    
    /**
     * Examples: `"Pukeko"` `"Club"` `"Break*"`"
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[title][]")
    public String andTitle;
    public GetRecordsFormatQueryParams withAndTitle(String andTitle) {
        this.andTitle = andTitle;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[usage][]")
    public GetRecordsFormatAndUsageEnum andUsage;
    public GetRecordsFormatQueryParams withAndUsage(GetRecordsFormatAndUsageEnum andUsage) {
        this.andUsage = andUsage;
        return this;
    }
    
    /**
     * This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax `[{start year} TO {end year}]`.  
     * Example: `"1893"` `"[1982 TO 1987]"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=and[year]")
    public String andYear;
    public GetRecordsFormatQueryParams withAndYear(String andYear) {
        this.andYear = andYear;
        return this;
    }
    
    /**
     * Used in conjunction with *sort* to order the results
     *  - *asc* - Ascending, oldest first.
     *  - *desc* - Descending, newest first.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=direction")
    public GetRecordsFormatDirectionEnum direction;
    public GetRecordsFormatQueryParams withDirection(GetRecordsFormatDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to 'true' will not effect the search results returned but will ignore all search filters (eg. "and[category]=Audio") when calculating the facet counts. 
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude_filters_from_facets")
    public Boolean excludeFiltersFromFacets;
    public GetRecordsFormatQueryParams withExcludeFiltersFromFacets(Boolean excludeFiltersFromFacets) {
        this.excludeFiltersFromFacets = excludeFiltersFromFacets;
        return this;
    }
    
    /**
     * Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=facets")
    public GetRecordsFormatFacetsEnum[] facets;
    public GetRecordsFormatQueryParams withFacets(GetRecordsFormatFacetsEnum[] facets) {
        this.facets = facets;
        return this;
    }
    
    /**
     * This value specifies which page of facet results to return. Allowing pagination through large lists of facet values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=facets_page")
    public Long facetsPage;
    public GetRecordsFormatQueryParams withFacetsPage(Long facetsPage) {
        this.facetsPage = facetsPage;
        return this;
    }
    
    /**
     * The number of facets to return per page of facet results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=facets_per_page")
    public Long facetsPerPage;
    public GetRecordsFormatQueryParams withFacetsPerPage(Long facetsPerPage) {
        this.facetsPerPage = facetsPerPage;
        return this;
    }
    
    /**
     * Comma-separated whitelist of fields to be returned. The syntax *"&amp;fields=verbose"* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *"&amp;fields=id,title,subject,collection,landing_url,locations"*.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=fields")
    public String fields;
    public GetRecordsFormatQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *"&amp;geo_bbox=-41,174,-42,175"*
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=geo_bbox")
    public String geoBbox;
    public GetRecordsFormatQueryParams withGeoBbox(String geoBbox) {
        this.geoBbox = geoBbox;
        return this;
    }
    
    /**
     * Specify which page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetRecordsFormatQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of records to return per page of search results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public GetRecordsFormatQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Used to control the order of the results in conjunction with the *direction* field.
     *   - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.
     *   - *date* - is the date metadata (if present) associated with the record.  
     *     
     * To sort the search results with newest records at the top use: "&amp;sort=syndication_date&amp;direction=desc"
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public GetRecordsFormatSortEnum sort;
    public GetRecordsFormatQueryParams withSort(GetRecordsFormatSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).  
     * A minus sign excludes certain terms, eg. "-horse".  
     * An asterisk (\*) acts as a wildcard, eg. "ted*".  
     * Multiple search terms are combined with an AND by default.  
     * Examples: `"moustache"`, `"Wanganui OR Whanganui"`,  `"-paperspast"`, `"ted*"`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=text")
    public String text;
    public GetRecordsFormatQueryParams withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * All of the above `and[___][]` filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content `&amp;without[primary_collection]=Papers+Past`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=without[{filter_field}]")
    public String withoutFilterField;
    public GetRecordsFormatQueryParams withWithoutFilterField(String withoutFilterField) {
        this.withoutFilterField = withoutFilterField;
        return this;
    }
    
}
