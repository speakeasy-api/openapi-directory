/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContainerDetail - An object that represents the details of a container that's part of a job.
 */
public class ContainerDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    public String[] command;
    public ContainerDetail withCommand(String[] command) {
        this.command = command;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerInstanceArn")
    public String containerInstanceArn;
    public ContainerDetail withContainerInstanceArn(String containerInstanceArn) {
        this.containerInstanceArn = containerInstanceArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public KeyValuePair[] environment;
    public ContainerDetail withEnvironment(KeyValuePair[] environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ephemeralStorage")
    public EphemeralStorage ephemeralStorage;
    public ContainerDetail withEphemeralStorage(EphemeralStorage ephemeralStorage) {
        this.ephemeralStorage = ephemeralStorage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionRoleArn")
    public String executionRoleArn;
    public ContainerDetail withExecutionRoleArn(String executionRoleArn) {
        this.executionRoleArn = executionRoleArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitCode")
    public Long exitCode;
    public ContainerDetail withExitCode(Long exitCode) {
        this.exitCode = exitCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fargatePlatformConfiguration")
    public FargatePlatformConfiguration fargatePlatformConfiguration;
    public ContainerDetail withFargatePlatformConfiguration(FargatePlatformConfiguration fargatePlatformConfiguration) {
        this.fargatePlatformConfiguration = fargatePlatformConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;
    public ContainerDetail withImage(String image) {
        this.image = image;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceType")
    public String instanceType;
    public ContainerDetail withInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobRoleArn")
    public String jobRoleArn;
    public ContainerDetail withJobRoleArn(String jobRoleArn) {
        this.jobRoleArn = jobRoleArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linuxParameters")
    public LinuxParameters linuxParameters;
    public ContainerDetail withLinuxParameters(LinuxParameters linuxParameters) {
        this.linuxParameters = linuxParameters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logConfiguration")
    public LogConfiguration logConfiguration;
    public ContainerDetail withLogConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logStreamName")
    public String logStreamName;
    public ContainerDetail withLogStreamName(String logStreamName) {
        this.logStreamName = logStreamName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory")
    public Long memory;
    public ContainerDetail withMemory(Long memory) {
        this.memory = memory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountPoints")
    public MountPoint[] mountPoints;
    public ContainerDetail withMountPoints(MountPoint[] mountPoints) {
        this.mountPoints = mountPoints;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkConfiguration")
    public NetworkConfiguration networkConfiguration;
    public ContainerDetail withNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkInterfaces")
    public NetworkInterface[] networkInterfaces;
    public ContainerDetail withNetworkInterfaces(NetworkInterface[] networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privileged")
    public Boolean privileged;
    public ContainerDetail withPrivileged(Boolean privileged) {
        this.privileged = privileged;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readonlyRootFilesystem")
    public Boolean readonlyRootFilesystem;
    public ContainerDetail withReadonlyRootFilesystem(Boolean readonlyRootFilesystem) {
        this.readonlyRootFilesystem = readonlyRootFilesystem;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public String reason;
    public ContainerDetail withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ResourceRequirement[] resourceRequirements;
    public ContainerDetail withResourceRequirements(ResourceRequirement[] resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secrets")
    public Secret[] secrets;
    public ContainerDetail withSecrets(Secret[] secrets) {
        this.secrets = secrets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskArn")
    public String taskArn;
    public ContainerDetail withTaskArn(String taskArn) {
        this.taskArn = taskArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ulimits")
    public Ulimit[] ulimits;
    public ContainerDetail withUlimits(Ulimit[] ulimits) {
        this.ulimits = ulimits;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;
    public ContainerDetail withUser(String user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcpus")
    public Long vcpus;
    public ContainerDetail withVcpus(Long vcpus) {
        this.vcpus = vcpus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public Volume[] volumes;
    public ContainerDetail withVolumes(Volume[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
}
