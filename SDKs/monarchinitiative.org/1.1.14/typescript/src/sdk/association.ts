/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Retrieve associations between entities or entity and descriptors
 */
export class Association {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns list of matching associations of a given type
   */
  getAssociationBySubjectAndAssocType(
    req: operations.GetAssociationBySubjectAndAssocTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationBySubjectAndAssocTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationBySubjectAndAssocTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/type/{association_type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationBySubjectAndAssocTypeResponse =
        new operations.GetAssociationBySubjectAndAssocTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of matching associations between a given subject and object category
   */
  getAssociationBySubjectAndObjectCategorySearch(
    req: operations.GetAssociationBySubjectAndObjectCategorySearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationBySubjectAndObjectCategorySearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetAssociationBySubjectAndObjectCategorySearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/find/{subject_category}/{object_category}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationBySubjectAndObjectCategorySearchResponse =
        new operations.GetAssociationBySubjectAndObjectCategorySearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of matching associations for a given subject category
   */
  getAssociationBySubjectCategorySearch(
    req: operations.GetAssociationBySubjectCategorySearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationBySubjectCategorySearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationBySubjectCategorySearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/find/{subject_category}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationBySubjectCategorySearchResponse =
        new operations.GetAssociationBySubjectCategorySearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the association with a given identifier
   *
   * @remarks
   * An association connects, at a minimum, two things, designated subject and object,
   * via some relationship. Associations also include evidence, provenance etc.
   */
  getAssociationObject(
    req: operations.GetAssociationObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/association/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationObjectResponse =
        new operations.GetAssociationObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns associations connecting two entities
   *
   * @remarks
   * Given two entities (e.g. a particular gene and a particular disease), if these two entities
   * are connected (directly or indirectly), then return the association objects describing
   * the connection.
   */
  getAssociationsBetween(
    req: operations.GetAssociationsBetweenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationsBetweenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationsBetweenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/between/{subject}/{object}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationsBetweenResponse =
        new operations.GetAssociationsBetweenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of matching associations starting from a given subject (source)
   */
  getAssociationsFrom(
    req: operations.GetAssociationsFromRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationsFromResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationsFromRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/from/{subject}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationsFromResponse =
        new operations.GetAssociationsFromResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of matching associations pointing to a given object (target)
   */
  getAssociationsTo(
    req: operations.GetAssociationsToRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAssociationsToResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAssociationsToRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/association/to/{object}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAssociationsToResponse =
        new operations.GetAssociationsToResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.associationResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.associationResults = utils.objectToClass(
              httpRes?.data,
              shared.AssociationResults,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
