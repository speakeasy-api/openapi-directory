"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class AuthorizeRealmEnum(str, Enum):
    r"""User type to be authorized (usually 'customer')"""
    CUSTOMER = 'customer'
    CONTRIBUTOR = 'contributor'

class AuthorizeResponseTypeEnum(str, Enum):
    r"""Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'"""
    CODE = 'code'


@dataclasses.dataclass
class AuthorizeRequest:
    
    client_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'client_id', 'style': 'form', 'explode': True }})
    r"""Client ID (Consumer Key) of your application"""  
    redirect_uri: str = dataclasses.field(metadata={'query_param': { 'field_name': 'redirect_uri', 'style': 'form', 'explode': True }})
    r"""The callback URI to send the request to after authorization; must use a host name that is registered with your application"""  
    response_type: AuthorizeResponseTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'response_type', 'style': 'form', 'explode': True }})
    r"""Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'"""  
    state: str = dataclasses.field(metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Unique value used by the calling app to verify the request"""  
    realm: Optional[AuthorizeRealmEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'realm', 'style': 'form', 'explode': True }})
    r"""User type to be authorized (usually 'customer')"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""Space-separated list of scopes to be authorized"""  
    

@dataclasses.dataclass
class AuthorizeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    authorize_response: Optional[str] = dataclasses.field(default=None)
    r"""Redirect user to authenticate with Shutterstock"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    