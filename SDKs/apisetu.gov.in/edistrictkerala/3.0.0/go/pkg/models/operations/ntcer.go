// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NtcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type NtcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// NtcerRequestBodyFormatEnum - The format of the certificate in response.
type NtcerRequestBodyFormatEnum string

const (
	NtcerRequestBodyFormatEnumPdf NtcerRequestBodyFormatEnum = "pdf"
)

func (e *NtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NtcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NtcerRequestBodyFormatEnum: %s", s)
	}
}

// NtcerRequestBody - Request format
type NtcerRequestBody struct {
	CertificateParameters *NtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type NtcerRequest struct {
	// Request format
	Request  *NtcerRequestBody `request:"mediaType=application/json"`
	Security NtcerSecurity
}

type Ntcer504ApplicationJSONErrorEnum string

const (
	Ntcer504ApplicationJSONErrorEnumGatewayTimeout Ntcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ntcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ntcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer504ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ntcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ntcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ntcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer504ApplicationJSON - Gateway timeout
type Ntcer504ApplicationJSON struct {
	Error            *Ntcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer503ApplicationJSONErrorEnum string

const (
	Ntcer503ApplicationJSONErrorEnumServiceUnavailable Ntcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ntcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ntcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer503ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ntcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ntcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ntcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer503ApplicationJSON - Service unavailable
type Ntcer503ApplicationJSON struct {
	Error            *Ntcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer502ApplicationJSONErrorEnum string

const (
	Ntcer502ApplicationJSONErrorEnumBadGatewy Ntcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ntcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ntcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer502ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ntcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ntcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ntcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer502ApplicationJSON - Bad gateway
type Ntcer502ApplicationJSON struct {
	Error            *Ntcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer500ApplicationJSONErrorEnum string

const (
	Ntcer500ApplicationJSONErrorEnumInternalServerError Ntcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ntcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ntcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer500ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer500ApplicationJSONErrorDescriptionEnumInternalServerError Ntcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ntcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ntcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer500ApplicationJSON - Internal server error
type Ntcer500ApplicationJSON struct {
	Error            *Ntcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer404ApplicationJSONErrorEnum string

const (
	Ntcer404ApplicationJSONErrorEnumRecordNotFound Ntcer404ApplicationJSONErrorEnum = "record_not_found"
	Ntcer404ApplicationJSONErrorEnumURLNotFound    Ntcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ntcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ntcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer404ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ntcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ntcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ntcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ntcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ntcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer404ApplicationJSON - No record found
type Ntcer404ApplicationJSON struct {
	Error            *Ntcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer401ApplicationJSONErrorEnum string

const (
	Ntcer401ApplicationJSONErrorEnumInvalidAuthentication Ntcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ntcer401ApplicationJSONErrorEnumInvalidAuthorization  Ntcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ntcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ntcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer401ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ntcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ntcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ntcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ntcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ntcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer401ApplicationJSON - Unauthorized access
type Ntcer401ApplicationJSON struct {
	Error            *Ntcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntcer400ApplicationJSONErrorEnum string

const (
	Ntcer400ApplicationJSONErrorEnumMissingParameter Ntcer400ApplicationJSONErrorEnum = "missing_parameter"
	Ntcer400ApplicationJSONErrorEnumInvalidParameter Ntcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ntcer400ApplicationJSONErrorEnumInvalidFormat    Ntcer400ApplicationJSONErrorEnum = "invalid_format"
	Ntcer400ApplicationJSONErrorEnumInvalidTxnid     Ntcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ntcer400ApplicationJSONErrorEnumInvalidConsentid Ntcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ntcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ntcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntcer400ApplicationJSONErrorDescriptionEnum string

const (
	Ntcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ntcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ntcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ntcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ntcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ntcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ntcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ntcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ntcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ntcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ntcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ntcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntcer400ApplicationJSON - Bad request
type Ntcer400ApplicationJSON struct {
	Error            *Ntcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NtcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ntcer400ApplicationJSONObject *Ntcer400ApplicationJSON
	// Unauthorized access
	Ntcer401ApplicationJSONObject *Ntcer401ApplicationJSON
	// No record found
	Ntcer404ApplicationJSONObject *Ntcer404ApplicationJSON
	// Internal server error
	Ntcer500ApplicationJSONObject *Ntcer500ApplicationJSON
	// Bad gateway
	Ntcer502ApplicationJSONObject *Ntcer502ApplicationJSON
	// Service unavailable
	Ntcer503ApplicationJSONObject *Ntcer503ApplicationJSON
	// Gateway timeout
	Ntcer504ApplicationJSONObject *Ntcer504ApplicationJSON
}
