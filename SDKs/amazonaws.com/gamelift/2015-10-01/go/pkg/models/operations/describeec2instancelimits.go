// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeEc2InstanceLimitsXAmzTargetEnum
type DescribeEc2InstanceLimitsXAmzTargetEnum string

const (
	DescribeEc2InstanceLimitsXAmzTargetEnumGameLiftDescribeEc2InstanceLimits DescribeEc2InstanceLimitsXAmzTargetEnum = "GameLift.DescribeEC2InstanceLimits"
)

func (e *DescribeEc2InstanceLimitsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GameLift.DescribeEC2InstanceLimits":
		*e = DescribeEc2InstanceLimitsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeEc2InstanceLimitsXAmzTargetEnum: %s", s)
	}
}

type DescribeEc2InstanceLimitsRequest struct {
	DescribeEc2InstanceLimitsInput shared.DescribeEc2InstanceLimitsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     DescribeEc2InstanceLimitsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeEc2InstanceLimitsResponse struct {
	ContentType string
	// Success
	DescribeEc2InstanceLimitsOutput *shared.DescribeEc2InstanceLimitsOutput
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
	// UnsupportedRegionException
	UnsupportedRegionException interface{}
}
