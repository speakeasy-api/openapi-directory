// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRetailV2alphaModelDataStateEnum - Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
type GoogleCloudRetailV2alphaModelDataStateEnum string

const (
	GoogleCloudRetailV2alphaModelDataStateEnumDataStateUnspecified GoogleCloudRetailV2alphaModelDataStateEnum = "DATA_STATE_UNSPECIFIED"
	GoogleCloudRetailV2alphaModelDataStateEnumDataOk               GoogleCloudRetailV2alphaModelDataStateEnum = "DATA_OK"
	GoogleCloudRetailV2alphaModelDataStateEnumDataError            GoogleCloudRetailV2alphaModelDataStateEnum = "DATA_ERROR"
)

func (e *GoogleCloudRetailV2alphaModelDataStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_STATE_UNSPECIFIED":
		fallthrough
	case "DATA_OK":
		fallthrough
	case "DATA_ERROR":
		*e = GoogleCloudRetailV2alphaModelDataStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2alphaModelDataStateEnum: %s", s)
	}
}

// GoogleCloudRetailV2alphaModelFilteringOptionEnum - Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
type GoogleCloudRetailV2alphaModelFilteringOptionEnum string

const (
	GoogleCloudRetailV2alphaModelFilteringOptionEnumRecommendationsFilteringOptionUnspecified GoogleCloudRetailV2alphaModelFilteringOptionEnum = "RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED"
	GoogleCloudRetailV2alphaModelFilteringOptionEnumRecommendationsFilteringDisabled          GoogleCloudRetailV2alphaModelFilteringOptionEnum = "RECOMMENDATIONS_FILTERING_DISABLED"
	GoogleCloudRetailV2alphaModelFilteringOptionEnumRecommendationsFilteringEnabled           GoogleCloudRetailV2alphaModelFilteringOptionEnum = "RECOMMENDATIONS_FILTERING_ENABLED"
)

func (e *GoogleCloudRetailV2alphaModelFilteringOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED":
		fallthrough
	case "RECOMMENDATIONS_FILTERING_DISABLED":
		fallthrough
	case "RECOMMENDATIONS_FILTERING_ENABLED":
		*e = GoogleCloudRetailV2alphaModelFilteringOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2alphaModelFilteringOptionEnum: %s", s)
	}
}

// GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum - Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
type GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum string

const (
	GoogleCloudRetailV2alphaModelPeriodicTuningStateEnumPeriodicTuningStateUnspecified GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum = "PERIODIC_TUNING_STATE_UNSPECIFIED"
	GoogleCloudRetailV2alphaModelPeriodicTuningStateEnumPeriodicTuningDisabled         GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum = "PERIODIC_TUNING_DISABLED"
	GoogleCloudRetailV2alphaModelPeriodicTuningStateEnumAllTuningDisabled              GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum = "ALL_TUNING_DISABLED"
	GoogleCloudRetailV2alphaModelPeriodicTuningStateEnumPeriodicTuningEnabled          GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum = "PERIODIC_TUNING_ENABLED"
)

func (e *GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PERIODIC_TUNING_STATE_UNSPECIFIED":
		fallthrough
	case "PERIODIC_TUNING_DISABLED":
		fallthrough
	case "ALL_TUNING_DISABLED":
		fallthrough
	case "PERIODIC_TUNING_ENABLED":
		*e = GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum: %s", s)
	}
}

// GoogleCloudRetailV2alphaModelServingStateEnum - Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.
type GoogleCloudRetailV2alphaModelServingStateEnum string

const (
	GoogleCloudRetailV2alphaModelServingStateEnumServingStateUnspecified GoogleCloudRetailV2alphaModelServingStateEnum = "SERVING_STATE_UNSPECIFIED"
	GoogleCloudRetailV2alphaModelServingStateEnumInactive                GoogleCloudRetailV2alphaModelServingStateEnum = "INACTIVE"
	GoogleCloudRetailV2alphaModelServingStateEnumActive                  GoogleCloudRetailV2alphaModelServingStateEnum = "ACTIVE"
	GoogleCloudRetailV2alphaModelServingStateEnumTuned                   GoogleCloudRetailV2alphaModelServingStateEnum = "TUNED"
)

func (e *GoogleCloudRetailV2alphaModelServingStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERVING_STATE_UNSPECIFIED":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "TUNED":
		*e = GoogleCloudRetailV2alphaModelServingStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2alphaModelServingStateEnum: %s", s)
	}
}

// GoogleCloudRetailV2alphaModelTrainingStateEnum - Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
type GoogleCloudRetailV2alphaModelTrainingStateEnum string

const (
	GoogleCloudRetailV2alphaModelTrainingStateEnumTrainingStateUnspecified GoogleCloudRetailV2alphaModelTrainingStateEnum = "TRAINING_STATE_UNSPECIFIED"
	GoogleCloudRetailV2alphaModelTrainingStateEnumPaused                   GoogleCloudRetailV2alphaModelTrainingStateEnum = "PAUSED"
	GoogleCloudRetailV2alphaModelTrainingStateEnumTraining                 GoogleCloudRetailV2alphaModelTrainingStateEnum = "TRAINING"
)

func (e *GoogleCloudRetailV2alphaModelTrainingStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRAINING_STATE_UNSPECIFIED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "TRAINING":
		*e = GoogleCloudRetailV2alphaModelTrainingStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2alphaModelTrainingStateEnum: %s", s)
	}
}

// GoogleCloudRetailV2alphaModel - Metadata that describes the training and serving parameters of a Model. A Model can be associated with a ServingConfig and then queried through the Predict API.
type GoogleCloudRetailV2alphaModel struct {
	// Output only. Timestamp the Recommendation Model was created at.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
	DataState *GoogleCloudRetailV2alphaModelDataStateEnum `json:"dataState,omitempty"`
	// Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
	FilteringOption *GoogleCloudRetailV2alphaModelFilteringOptionEnum `json:"filteringOption,omitempty"`
	// Output only. The timestamp when the latest successful tune finished.
	LastTuneTime *string `json:"lastTuneTime,omitempty"`
	// Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
	Name *string `json:"name,omitempty"`
	// Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
	OptimizationObjective *string `json:"optimizationObjective,omitempty"`
	// The PageOptimizationConfig for model training. This determines how many panels to optimize for, and which serving configs to consider for each panel. The purpose of this model is to optimize which ServingConfig to show on which panels in way that optimizes the visitors shopping journey.
	PageOptimizationConfig *GoogleCloudRetailV2alphaModelPageOptimizationConfig `json:"pageOptimizationConfig,omitempty"`
	// Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
	PeriodicTuningState *GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum `json:"periodicTuningState,omitempty"`
	// Output only. The list of valid serving configs associated with the PageOptimizationConfig.
	ServingConfigLists []GoogleCloudRetailV2alphaModelServingConfigList `json:"servingConfigLists,omitempty"`
	// Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.
	ServingState *GoogleCloudRetailV2alphaModelServingStateEnum `json:"servingState,omitempty"`
	// Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
	TrainingState *GoogleCloudRetailV2alphaModelTrainingStateEnum `json:"trainingState,omitempty"`
	// Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.
	TuningOperation *string `json:"tuningOperation,omitempty"`
	// Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
	Type *string `json:"type,omitempty"`
	// Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// GoogleCloudRetailV2alphaModelInput - Metadata that describes the training and serving parameters of a Model. A Model can be associated with a ServingConfig and then queried through the Predict API.
type GoogleCloudRetailV2alphaModelInput struct {
	// Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
	FilteringOption *GoogleCloudRetailV2alphaModelFilteringOptionEnum `json:"filteringOption,omitempty"`
	// Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
	Name *string `json:"name,omitempty"`
	// Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
	OptimizationObjective *string `json:"optimizationObjective,omitempty"`
	// The PageOptimizationConfig for model training. This determines how many panels to optimize for, and which serving configs to consider for each panel. The purpose of this model is to optimize which ServingConfig to show on which panels in way that optimizes the visitors shopping journey.
	PageOptimizationConfig *GoogleCloudRetailV2alphaModelPageOptimizationConfig `json:"pageOptimizationConfig,omitempty"`
	// Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
	PeriodicTuningState *GoogleCloudRetailV2alphaModelPeriodicTuningStateEnum `json:"periodicTuningState,omitempty"`
	// Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
	TrainingState *GoogleCloudRetailV2alphaModelTrainingStateEnum `json:"trainingState,omitempty"`
	// Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
	Type *string `json:"type,omitempty"`
}
