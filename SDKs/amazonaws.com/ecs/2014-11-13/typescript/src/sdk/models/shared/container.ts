/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HealthStatusEnum } from "./healthstatusenum";
import { ManagedAgent } from "./managedagent";
import { NetworkBinding } from "./networkbinding";
import { NetworkInterface } from "./networkinterface";
import { Expose, Type } from "class-transformer";

/**
 * A Docker container that's part of a task.
 */
export class Container extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "containerArn" })
  containerArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "cpu" })
  cpu?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exitCode" })
  exitCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "gpuIds" })
  gpuIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "healthStatus" })
  healthStatus?: HealthStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  image?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "imageDigest" })
  imageDigest?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStatus" })
  lastStatus?: string;

  @SpeakeasyMetadata({ elemType: ManagedAgent })
  @Expose({ name: "managedAgents" })
  @Type(() => ManagedAgent)
  managedAgents?: ManagedAgent[];

  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "memoryReservation" })
  memoryReservation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: NetworkBinding })
  @Expose({ name: "networkBindings" })
  @Type(() => NetworkBinding)
  networkBindings?: NetworkBinding[];

  @SpeakeasyMetadata({ elemType: NetworkInterface })
  @Expose({ name: "networkInterfaces" })
  @Type(() => NetworkInterface)
  networkInterfaces?: NetworkInterface[];

  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimeId" })
  runtimeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taskArn" })
  taskArn?: string;
}
