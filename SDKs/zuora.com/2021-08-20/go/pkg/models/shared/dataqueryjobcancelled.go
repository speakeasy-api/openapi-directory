// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DataQueryJobCancelledQueryStatusEnum - Status of the query job.
type DataQueryJobCancelledQueryStatusEnum string

const (
	DataQueryJobCancelledQueryStatusEnumCancelled DataQueryJobCancelledQueryStatusEnum = "cancelled"
)

func (e *DataQueryJobCancelledQueryStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cancelled":
		*e = DataQueryJobCancelledQueryStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataQueryJobCancelledQueryStatusEnum: %s", s)
	}
}

// DataQueryJobCancelled - A cancelled data query job.
type DataQueryJobCancelled struct {
	// The query job creator's Id.
	//
	CreatedBy *string `json:"createdBy,omitempty"`
	// Internal identifier of the query job.
	//
	ID *string `json:"id,omitempty"`
	// The query that was submitted.
	//
	Query *string `json:"query,omitempty"`
	// Status of the query job.
	//
	QueryStatus *DataQueryJobCancelledQueryStatusEnum `json:"queryStatus,omitempty"`
	// The number of times that Zuora will retry the query if Zuora is unable to perform the query.
	//
	RemainingRetries *int64 `json:"remainingRetries,omitempty"`
	// Date and time when the query job was last updated, in ISO 8601 format.
	//
	UpdatedOn *time.Time `json:"updatedOn,omitempty"`
}
