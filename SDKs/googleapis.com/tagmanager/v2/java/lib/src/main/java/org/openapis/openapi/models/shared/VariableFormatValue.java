/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class VariableFormatValue {
    /**
     * The option to convert a string-type variable value to either lowercase or uppercase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caseConversionType")
    public VariableFormatValueCaseConversionTypeEnum caseConversionType;

    public VariableFormatValue withCaseConversionType(VariableFormatValueCaseConversionTypeEnum caseConversionType) {
        this.caseConversionType = caseConversionType;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convertFalseToValue")
    public Parameter convertFalseToValue;

    public VariableFormatValue withConvertFalseToValue(Parameter convertFalseToValue) {
        this.convertFalseToValue = convertFalseToValue;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convertNullToValue")
    public Parameter convertNullToValue;

    public VariableFormatValue withConvertNullToValue(Parameter convertNullToValue) {
        this.convertNullToValue = convertNullToValue;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convertTrueToValue")
    public Parameter convertTrueToValue;

    public VariableFormatValue withConvertTrueToValue(Parameter convertTrueToValue) {
        this.convertTrueToValue = convertTrueToValue;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convertUndefinedToValue")
    public Parameter convertUndefinedToValue;

    public VariableFormatValue withConvertUndefinedToValue(Parameter convertUndefinedToValue) {
        this.convertUndefinedToValue = convertUndefinedToValue;
        return this;
    }
    
    public VariableFormatValue(){}
}
