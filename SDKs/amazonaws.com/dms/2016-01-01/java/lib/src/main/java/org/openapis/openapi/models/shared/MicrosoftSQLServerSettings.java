/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MicrosoftSQLServerSettings - Provides information that defines a Microsoft SQL Server endpoint.
 */
public class MicrosoftSQLServerSettings {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BcpPacketSize")
    public Long bcpPacketSize;

    public MicrosoftSQLServerSettings withBcpPacketSize(Long bcpPacketSize) {
        this.bcpPacketSize = bcpPacketSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ControlTablesFileGroup")
    public String controlTablesFileGroup;

    public MicrosoftSQLServerSettings withControlTablesFileGroup(String controlTablesFileGroup) {
        this.controlTablesFileGroup = controlTablesFileGroup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DatabaseName")
    public String databaseName;

    public MicrosoftSQLServerSettings withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ForceLobLookup")
    public Boolean forceLobLookup;

    public MicrosoftSQLServerSettings withForceLobLookup(Boolean forceLobLookup) {
        this.forceLobLookup = forceLobLookup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Password")
    public String password;

    public MicrosoftSQLServerSettings withPassword(String password) {
        this.password = password;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Port")
    public Long port;

    public MicrosoftSQLServerSettings withPort(Long port) {
        this.port = port;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuerySingleAlwaysOnNode")
    public Boolean querySingleAlwaysOnNode;

    public MicrosoftSQLServerSettings withQuerySingleAlwaysOnNode(Boolean querySingleAlwaysOnNode) {
        this.querySingleAlwaysOnNode = querySingleAlwaysOnNode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReadBackupOnly")
    public Boolean readBackupOnly;

    public MicrosoftSQLServerSettings withReadBackupOnly(Boolean readBackupOnly) {
        this.readBackupOnly = readBackupOnly;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SafeguardPolicy")
    public SafeguardPolicyEnum safeguardPolicy;

    public MicrosoftSQLServerSettings withSafeguardPolicy(SafeguardPolicyEnum safeguardPolicy) {
        this.safeguardPolicy = safeguardPolicy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecretsManagerAccessRoleArn")
    public String secretsManagerAccessRoleArn;

    public MicrosoftSQLServerSettings withSecretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
        this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecretsManagerSecretId")
    public String secretsManagerSecretId;

    public MicrosoftSQLServerSettings withSecretsManagerSecretId(String secretsManagerSecretId) {
        this.secretsManagerSecretId = secretsManagerSecretId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ServerName")
    public String serverName;

    public MicrosoftSQLServerSettings withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TlogAccessMode")
    public TlogAccessModeEnum tlogAccessMode;

    public MicrosoftSQLServerSettings withTlogAccessMode(TlogAccessModeEnum tlogAccessMode) {
        this.tlogAccessMode = tlogAccessMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TrimSpaceInChar")
    public Boolean trimSpaceInChar;

    public MicrosoftSQLServerSettings withTrimSpaceInChar(Boolean trimSpaceInChar) {
        this.trimSpaceInChar = trimSpaceInChar;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseBcpFullLoad")
    public Boolean useBcpFullLoad;

    public MicrosoftSQLServerSettings withUseBcpFullLoad(Boolean useBcpFullLoad) {
        this.useBcpFullLoad = useBcpFullLoad;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseThirdPartyBackupDevice")
    public Boolean useThirdPartyBackupDevice;

    public MicrosoftSQLServerSettings withUseThirdPartyBackupDevice(Boolean useThirdPartyBackupDevice) {
        this.useThirdPartyBackupDevice = useThirdPartyBackupDevice;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Username")
    public String username;

    public MicrosoftSQLServerSettings withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public MicrosoftSQLServerSettings(){}
}
