// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InferenceSchedulerStatusEnum string

const (
	InferenceSchedulerStatusEnumPending  InferenceSchedulerStatusEnum = "PENDING"
	InferenceSchedulerStatusEnumRunning  InferenceSchedulerStatusEnum = "RUNNING"
	InferenceSchedulerStatusEnumStopping InferenceSchedulerStatusEnum = "STOPPING"
	InferenceSchedulerStatusEnumStopped  InferenceSchedulerStatusEnum = "STOPPED"
)

func (e InferenceSchedulerStatusEnum) ToPointer() *InferenceSchedulerStatusEnum {
	return &e
}

func (e *InferenceSchedulerStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STOPPED":
		*e = InferenceSchedulerStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InferenceSchedulerStatusEnum: %v", v)
	}
}
