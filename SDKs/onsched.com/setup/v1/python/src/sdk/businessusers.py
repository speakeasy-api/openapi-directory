"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BusinessUsers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_setup_v1_businessusers_id_(self, request: operations.DeleteSetupV1BusinessusersIDRequest) -> operations.DeleteSetupV1BusinessusersIDResponse:
        r"""Delete User
        <p>Use this endpoint to permanently <b>Delete</b> a Business User. A valid <b>businessUser id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1BusinessusersIDRequest, base_url, '/setup/v1/businessusers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1BusinessusersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_setup_v1_businessusers(self, request: operations.GetSetupV1BusinessusersRequest) -> operations.GetSetupV1BusinessusersResponse:
        r"""List Users
        <p>Use this endpoint to return a <b>List of Business Users and their Roles</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/businessusers'
        
        query_params = utils.get_query_params(operations.GetSetupV1BusinessusersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1BusinessusersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BusinessUserListViewModel])
                res.business_user_list_view_model = out

        return res

    def get_setup_v1_businessusers_permissions(self, request: operations.GetSetupV1BusinessusersPermissionsRequest) -> operations.GetSetupV1BusinessusersPermissionsResponse:
        r"""List User Permissions
        <p>Use this endpoint to return a <b>List of Business User Permissions by Role</b>. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/businessusers/permissions'
        
        query_params = utils.get_query_params(operations.GetSetupV1BusinessusersPermissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1BusinessusersPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BusinessPermissionListViewModel])
                res.business_permission_list_view_model = out

        return res

    def get_setup_v1_businessusers_email_companies(self, request: operations.GetSetupV1BusinessusersEmailCompaniesRequest) -> operations.GetSetupV1BusinessusersEmailCompaniesResponse:
        r"""List User Companies
        <p>Use this endpoint to return a <b>List of Companies</b> associated with the business users email requested. A business user <b>email</b> address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1BusinessusersEmailCompaniesRequest, base_url, '/setup/v1/businessusers/{email}/companies', request)
        
        query_params = utils.get_query_params(operations.GetSetupV1BusinessusersEmailCompaniesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1BusinessusersEmailCompaniesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthorizedCompanyListViewModel])
                res.authorized_company_list_view_model = out

        return res

    def get_setup_v1_businessusers_id_(self, request: operations.GetSetupV1BusinessusersIDRequest) -> operations.GetSetupV1BusinessusersIDResponse:
        r"""Get User
        <p>Use this endpoint to return a <b>Business User</b> object. A valid <b>businessUser id</b> is required. Find businessUser id's using the <i>GET /setup/v1/businessusers</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1BusinessusersIDRequest, base_url, '/setup/v1/businessusers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1BusinessusersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BusinessUserViewModel])
                res.business_user_view_model = out

        return res

    def post_setup_v1_businessusers(self, request: shared.BusinessUserInputModel) -> operations.PostSetupV1BusinessusersResponse:
        r"""Create User
        <p>Use this endpoint to <b>Create</b> a Business User. If not specified, the business location defaults to the primary business location. </p>
        <p>Required fields: <b>Name</b>, <b>Email</b> and <b>Role</b><b>Note:</b> If the businessUser is a bookable resource (bizresource) then a resourceId is required.</p>
        <p>For role, use one of the values listed. <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p>
        <p>The <b>sendRegistrationInvite</b> parameter is available to API consumers for their own use. It provides no added functionality in OnSched.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/businessusers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1BusinessusersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BusinessUserViewModel])
                res.business_user_view_model = out

        return res

    def put_setup_v1_businessusers_id_(self, request: operations.PutSetupV1BusinessusersIDRequest) -> operations.PutSetupV1BusinessusersIDResponse:
        r"""Update User
        <p>Use this endpoint to <b>Update</b> a Business User. A valid <b>businessUser id</b> is required.</p>
        <p>
          <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1BusinessusersIDRequest, base_url, '/setup/v1/businessusers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "business_user_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1BusinessusersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BusinessUserViewModel])
                res.business_user_view_model = out

        return res

    