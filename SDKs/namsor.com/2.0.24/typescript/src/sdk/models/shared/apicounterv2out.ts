/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { APIKeyOut } from "./apikeyout";
import { Expose, Type } from "class-transformer";

/**
 * Detailed usage as reported by the deduplicating API counter.
 */
export class APICounterV2Out extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "apiKey" })
  @Type(() => APIKeyOut)
  apiKey?: APIKeyOut;

  /**
   * The apiService corresponds to the classifier name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiService" })
  apiService?: string;

  /**
   * The create datetime of the counter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDateTime" })
  createdDateTime?: number;

  /**
   * The processing hostAddress.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostAddress" })
  hostAddress?: string;

  /**
   * The flush datetime of the counter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastFlushedDateTime" })
  lastFlushedDateTime?: number;

  /**
   * The last usage datetime of the counter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUsedDateTime" })
  lastUsedDateTime?: number;

  /**
   * Usage of special features, such as Chinese, Japanese.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceFeaturesUsage" })
  serviceFeaturesUsage?: Record<string, number>;

  /**
   * The usage of the counter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalUsage" })
  totalUsage?: number;
}
