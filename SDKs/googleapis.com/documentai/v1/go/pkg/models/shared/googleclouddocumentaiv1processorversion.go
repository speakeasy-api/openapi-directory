// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudDocumentaiV1ProcessorVersionStateEnum - The state of the processor version.
type GoogleCloudDocumentaiV1ProcessorVersionStateEnum string

const (
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumStateUnspecified GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "STATE_UNSPECIFIED"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumDeployed         GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "DEPLOYED"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumDeploying        GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "DEPLOYING"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumUndeployed       GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "UNDEPLOYED"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumUndeploying      GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "UNDEPLOYING"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumCreating         GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "CREATING"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumDeleting         GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "DELETING"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumFailed           GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "FAILED"
	GoogleCloudDocumentaiV1ProcessorVersionStateEnumImporting        GoogleCloudDocumentaiV1ProcessorVersionStateEnum = "IMPORTING"
)

func (e *GoogleCloudDocumentaiV1ProcessorVersionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "DEPLOYED":
		fallthrough
	case "DEPLOYING":
		fallthrough
	case "UNDEPLOYED":
		fallthrough
	case "UNDEPLOYING":
		fallthrough
	case "CREATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "FAILED":
		fallthrough
	case "IMPORTING":
		*e = GoogleCloudDocumentaiV1ProcessorVersionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudDocumentaiV1ProcessorVersionStateEnum: %s", s)
	}
}

// GoogleCloudDocumentaiV1ProcessorVersion - A processor version is an implementation of a processor. Each processor can have multiple versions, pre-trained by Google internally or up-trained by the customer. At a time, a processor can only have one default version version. So the processor's behavior (when processing documents) is defined by a default version
type GoogleCloudDocumentaiV1ProcessorVersion struct {
	// The time the processor version was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Information about the upcoming deprecation of this processor version.
	DeprecationInfo *GoogleCloudDocumentaiV1ProcessorVersionDeprecationInfo `json:"deprecationInfo,omitempty"`
	// The display name of the processor version.
	DisplayName *string `json:"displayName,omitempty"`
	// The schema defines the output of the processed document by a processor.
	DocumentSchema *GoogleCloudDocumentaiV1DocumentSchema `json:"documentSchema,omitempty"`
	// Denotes that this ProcessorVersion is managed by google.
	GoogleManaged *bool `json:"googleManaged,omitempty"`
	// The KMS key name used for encryption.
	KmsKeyName *string `json:"kmsKeyName,omitempty"`
	// The KMS key version with which data is encrypted.
	KmsKeyVersionName *string `json:"kmsKeyVersionName,omitempty"`
	// Gives a short summary of an evaluation, and links to the evaluation itself.
	LatestEvaluation *GoogleCloudDocumentaiV1EvaluationReference `json:"latestEvaluation,omitempty"`
	// The resource name of the processor version. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}`
	Name *string `json:"name,omitempty"`
	// The state of the processor version.
	State *GoogleCloudDocumentaiV1ProcessorVersionStateEnum `json:"state,omitempty"`
}
