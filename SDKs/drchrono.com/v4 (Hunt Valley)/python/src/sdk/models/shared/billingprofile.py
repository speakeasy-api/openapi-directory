"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BillingProfileCptCodesNdcCodeUnitsEnum(str, Enum):
    r"""Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)"""
    F2 = 'F2'
    GR = 'GR'
    ME = 'ME'
    ML = 'ML'
    UN = 'UN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfileCptCodesNdcCode:
    r"""NDC code object"""
    
    ndc_package_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ndc_package_code'), 'exclude': lambda f: f is None }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    units: Optional[BillingProfileCptCodesNdcCodeUnitsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    r"""Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfileCptCodes:
    r"""CPT Code object"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    diagnosis_pointers_icd10: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosis_pointers_icd10'), 'exclude': lambda f: f is None }})
    r"""ICD10 codes represented in strings"""  
    diagnosis_pointers_icd9: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosis_pointers_icd9'), 'exclude': lambda f: f is None }})
    r"""ICD9 codes represented in strings"""  
    modifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiers'), 'exclude': lambda f: f is None }})
    r"""Modifiers represented in strings"""  
    ndc_code: Optional[list[BillingProfileCptCodesNdcCode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ndc_code'), 'exclude': lambda f: f is None }})
    r"""Array of NDC Code objects"""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfileCustomProcedureCodes:
    r"""Custom procedure code object"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    
class BillingProfileHcpcsCodesNdcCodeUnitsEnum(str, Enum):
    r"""Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)"""
    F2 = 'F2'
    GR = 'GR'
    ME = 'ME'
    ML = 'ML'
    UN = 'UN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfileHcpcsCodesNdcCode:
    r"""NDC code object"""
    
    ndc_package_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ndc_package_code'), 'exclude': lambda f: f is None }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    units: Optional[BillingProfileHcpcsCodesNdcCodeUnitsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    r"""Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfileHcpcsCodes:
    r"""HCPCS code object"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    diagnosis_pointers_icd10: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosis_pointers_icd10'), 'exclude': lambda f: f is None }})
    r"""ICD10 codes represented in array of strings"""  
    diagnosis_pointers_icd9: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosis_pointers_icd9'), 'exclude': lambda f: f is None }})
    r"""ICD9 codes represented in array of strings"""  
    modifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiers'), 'exclude': lambda f: f is None }})
    r"""Modifiers represented in array of strings"""  
    ndc_code: Optional[list[BillingProfileHcpcsCodesNdcCode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ndc_code'), 'exclude': lambda f: f is None }})
    r"""Array of NDC Code objects"""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""This field is represented in string format"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingProfile:
    r"""OK"""
    
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})  
    cpt_codes: Optional[list[BillingProfileCptCodes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpt_codes'), 'exclude': lambda f: f is None }})
    r"""Array of CPT Code objects"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    custom_procedure_codes: Optional[list[BillingProfileCustomProcedureCodes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_procedure_codes'), 'exclude': lambda f: f is None }})
    r"""Array of custom procedure code objects"""  
    doctor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor'), 'exclude': lambda f: f is None }})  
    hcpcs_codes: Optional[list[BillingProfileHcpcsCodes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hcpcs_codes'), 'exclude': lambda f: f is None }})
    r"""Array of HCPCS Code objects"""  
    icd10_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd10_codes'), 'exclude': lambda f: f is None }})
    r"""ICD10 Codes represented in string format"""  
    icd9_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd9_codes'), 'exclude': lambda f: f is None }})
    r"""ICD9 Codes represented in string format"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    