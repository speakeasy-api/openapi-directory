/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecurringDetail } from "./recurringdetail";
import { Expose, Transform, Type } from "class-transformer";

/**
 * OK - the request has succeeded.
 */
export class RecurringDetailsResult extends SpeakeasyBase {
  /**
   * The date when the recurring details were created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  /**
   * A list of one or more recurring payment details.
   */
  @SpeakeasyMetadata({ elemType: RecurringDetail })
  @Expose({ name: "details" })
  @Type(() => RecurringDetail)
  details?: RecurringDetail[];

  /**
   * The most recent email for this shopper (if available).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastKnownShopperEmail" })
  lastKnownShopperEmail?: string;

  /**
   * The reference you use to uniquely identify the shopper (e.g. user ID or account ID).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shopperReference" })
  shopperReference?: string;
}
