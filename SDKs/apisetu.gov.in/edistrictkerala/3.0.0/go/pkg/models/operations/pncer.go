// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PncerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type PncerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// PncerRequestBodyFormatEnum - The format of the certificate in response.
type PncerRequestBodyFormatEnum string

const (
	PncerRequestBodyFormatEnumPdf PncerRequestBodyFormatEnum = "pdf"
)

func (e *PncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PncerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PncerRequestBodyFormatEnum: %s", s)
	}
}

// PncerRequestBody - Request format
type PncerRequestBody struct {
	CertificateParameters *PncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type PncerRequest struct {
	// Request format
	Request  *PncerRequestBody `request:"mediaType=application/json"`
	Security PncerSecurity
}

type Pncer504ApplicationJSONErrorEnum string

const (
	Pncer504ApplicationJSONErrorEnumGatewayTimeout Pncer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Pncer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Pncer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer504ApplicationJSONErrorDescriptionEnum string

const (
	Pncer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pncer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Pncer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Pncer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer504ApplicationJSON - Gateway timeout
type Pncer504ApplicationJSON struct {
	Error            *Pncer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer503ApplicationJSONErrorEnum string

const (
	Pncer503ApplicationJSONErrorEnumServiceUnavailable Pncer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Pncer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Pncer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer503ApplicationJSONErrorDescriptionEnum string

const (
	Pncer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pncer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Pncer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Pncer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer503ApplicationJSON - Service unavailable
type Pncer503ApplicationJSON struct {
	Error            *Pncer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer502ApplicationJSONErrorEnum string

const (
	Pncer502ApplicationJSONErrorEnumBadGatewy Pncer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Pncer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Pncer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer502ApplicationJSONErrorDescriptionEnum string

const (
	Pncer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pncer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Pncer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Pncer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer502ApplicationJSON - Bad gateway
type Pncer502ApplicationJSON struct {
	Error            *Pncer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer500ApplicationJSONErrorEnum string

const (
	Pncer500ApplicationJSONErrorEnumInternalServerError Pncer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Pncer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Pncer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer500ApplicationJSONErrorDescriptionEnum string

const (
	Pncer500ApplicationJSONErrorDescriptionEnumInternalServerError Pncer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Pncer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Pncer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer500ApplicationJSON - Internal server error
type Pncer500ApplicationJSON struct {
	Error            *Pncer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer404ApplicationJSONErrorEnum string

const (
	Pncer404ApplicationJSONErrorEnumRecordNotFound Pncer404ApplicationJSONErrorEnum = "record_not_found"
	Pncer404ApplicationJSONErrorEnumURLNotFound    Pncer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Pncer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pncer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer404ApplicationJSONErrorDescriptionEnum string

const (
	Pncer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pncer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pncer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pncer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Pncer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pncer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer404ApplicationJSON - No record found
type Pncer404ApplicationJSON struct {
	Error            *Pncer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer401ApplicationJSONErrorEnum string

const (
	Pncer401ApplicationJSONErrorEnumInvalidAuthentication Pncer401ApplicationJSONErrorEnum = "invalid_authentication"
	Pncer401ApplicationJSONErrorEnumInvalidAuthorization  Pncer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Pncer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pncer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer401ApplicationJSONErrorDescriptionEnum string

const (
	Pncer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pncer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pncer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pncer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Pncer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pncer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer401ApplicationJSON - Unauthorized access
type Pncer401ApplicationJSON struct {
	Error            *Pncer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pncer400ApplicationJSONErrorEnum string

const (
	Pncer400ApplicationJSONErrorEnumMissingParameter Pncer400ApplicationJSONErrorEnum = "missing_parameter"
	Pncer400ApplicationJSONErrorEnumInvalidParameter Pncer400ApplicationJSONErrorEnum = "invalid_parameter"
	Pncer400ApplicationJSONErrorEnumInvalidFormat    Pncer400ApplicationJSONErrorEnum = "invalid_format"
	Pncer400ApplicationJSONErrorEnumInvalidTxnid     Pncer400ApplicationJSONErrorEnum = "invalid_txnid"
	Pncer400ApplicationJSONErrorEnumInvalidConsentid Pncer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Pncer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pncer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Pncer400ApplicationJSONErrorDescriptionEnum string

const (
	Pncer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pncer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pncer400ApplicationJSONErrorDescriptionEnumBadRequest                              Pncer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pncer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pncer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pncer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pncer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pncer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pncer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Pncer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pncer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pncer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pncer400ApplicationJSON - Bad request
type Pncer400ApplicationJSON struct {
	Error            *Pncer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pncer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PncerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pncer400ApplicationJSONObject *Pncer400ApplicationJSON
	// Unauthorized access
	Pncer401ApplicationJSONObject *Pncer401ApplicationJSON
	// No record found
	Pncer404ApplicationJSONObject *Pncer404ApplicationJSON
	// Internal server error
	Pncer500ApplicationJSONObject *Pncer500ApplicationJSON
	// Bad gateway
	Pncer502ApplicationJSONObject *Pncer502ApplicationJSON
	// Service unavailable
	Pncer503ApplicationJSONObject *Pncer503ApplicationJSON
	// Gateway timeout
	Pncer504ApplicationJSONObject *Pncer504ApplicationJSON
}
