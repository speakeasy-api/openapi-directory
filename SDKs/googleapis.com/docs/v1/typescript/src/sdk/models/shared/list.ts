/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ListProperties } from "./listproperties";
import { SuggestedListProperties } from "./suggestedlistproperties";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A List represents the list attributes for a group of paragraphs that all belong to the same list. A paragraph that's part of a list has a reference to the list's ID in its bullet.
 */
export class List extends SpeakeasyBase {
  /**
   * The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listProperties" })
  @Type(() => ListProperties)
  listProperties?: ListProperties;

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedDeletionIds" })
  suggestedDeletionIds?: string[];

  /**
   * The suggested insertion ID. If empty, then this is not a suggested insertion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedInsertionId" })
  suggestedInsertionId?: string;

  /**
   * The suggested changes to the list properties, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedListProperties })
  @Expose({ name: "suggestedListPropertiesChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedListProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedListProperties);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedListPropertiesChanges?: Record<string, SuggestedListProperties>;
}
