/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class DashboardMeetingDetailSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
 */
export enum DashboardMeetingDetailTypeEnum {
  Past = "past",
  PastOne = "pastOne",
  Live = "live",
}

export class DashboardMeetingDetailRequest extends SpeakeasyBase {
  /**
   * The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: string;

  /**
   * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: DashboardMeetingDetailTypeEnum;
}

export class DashboardMeetingDetailMeetingMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the meetinh.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Meeting metric details.
 */
export class DashboardMeetingDetailMeetingMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardMeetingDetailMeetingMetricsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => DashboardMeetingDetailMeetingMetricsCustomKeys)
  customKeys?: DashboardMeetingDetailMeetingMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * Email address of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_3rd_party_audio" })
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not the PSTN was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_pstn" })
  hasPstn?: boolean;

  /**
   * Indicates whether or not the recording feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_recording" })
  hasRecording?: boolean;

  /**
   * Indicates whether or not screenshare feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_screen_share" })
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not someone joined the meeting using SIP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_sip" })
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_video" })
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_voip" })
  hasVoip?: boolean;

  /**
   * Host display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The number of Zoom Room participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_room_participants" })
  inRoomParticipants?: number;

  /**
   * Meeting participant count.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * License type of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_type" })
  userType?: string;

  /**
   * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class DashboardMeetingDetailResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Meeting returned.<br>
   * Only available for paid accounts that have enabled the dashboard feature.
   */
  @SpeakeasyMetadata()
  meetingMetrics?: DashboardMeetingDetailMeetingMetrics;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
