<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class FacetscategoryRequest
{
    /**
     * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * 
     * @var string $accept
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Accept')]
    public string $accept;
    
    /**
     * Describes the type of the content being sent.
     * 
     * @var string $contentType
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Content-Type')]
    public string $contentType;
    
    /**
     * Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     * 
     * @var ?string $from
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=_from')]
    public ?string $from = null;
    
    /**
     * Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     * 
     * @var ?string $to
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=_to')]
    public ?string $to = null;
    
    /**
     * Mapping of the term. It can be `c` for a category, `b` for a brand, or `specificationFilter_{specificationId}` for a specification. You need to include a map for each term you are searching for in the same term's order.
     * 
     * @var string $map
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=map')]
    public string $map;
    
    /**
     * Term used for the facet's search. You can search for as much term as you want. The term can be: `categoryId`, `brandId`, `specificationId`.
     * 
     * @var string $term
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=term')]
    public string $term;
    
	public function __construct()
	{
		$this->accept = "";
		$this->contentType = "";
		$this->from = null;
		$this->to = null;
		$this->map = "";
		$this->term = "";
	}
}
