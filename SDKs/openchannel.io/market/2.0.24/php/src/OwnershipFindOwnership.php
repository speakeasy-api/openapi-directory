<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OwnershipFindOwnership 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns a paginated list of app licenses
     * 
     *  - Results are returned for the market provided within the basic authentication credentials 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOwnershipRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOwnershipResponse
     */
	public function getOwnership(
        \OpenAPI\OpenAPI\Models\Operations\GetOwnershipRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOwnershipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOwnershipRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOwnershipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns an ownership record
     * 
     *  - Results are returned for the market provided within the basic authentication credentials 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdResponse
     */
	public function getOwnershipOwnershipId(
        \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership/{ownershipId}', \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOwnershipOwnershipIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates ownership fields
     * 
     *  - Results are returned for the market provided within the basic authentication credentials 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdResponse
     */
	public function patchOwnershipOwnershipId(
        \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership/{ownershipId}', \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchOwnershipOwnershipIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Aquires an app license for a user (installs app)
     * 
     *  - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallResponse
     */
	public function postOwnershipInstall(
        \OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership/install');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOwnershipInstallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Uninstalls a license for a particular user and app (uninstalls app)
     * 
     *  - This method is called on behalf of a user - User data and statistics are recorded when this method is called 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdResponse
     */
	public function postOwnershipUninstallOwnershipId(
        \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership/uninstall/{ownershipId}', \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOwnershipUninstallOwnershipIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates an ownership record
     * 
     *  - Results are returned for the market provided within the basic authentication credentials 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdResponse
     */
	public function postOwnershipOwnershipId(
        \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ownership/{ownershipId}', \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOwnershipOwnershipIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}