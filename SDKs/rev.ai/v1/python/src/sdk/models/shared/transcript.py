"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TranscriptMonologuesElementsTypeEnum(str, Enum):
    r"""Type of transcript element. If Rev.ai was unable to determine the spoken word, the `type` will be `unknown`."""
    TEXT = 'text'
    PUNCT = 'punct'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscriptMonologuesElements:
    
    confidence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Confidence score of the provided value. If the element `type` is `punct` or `unknown`, confidence will be `null`"""  
    ts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts'), 'exclude': lambda f: f is None }})
    r"""The timestamp of the beginning of the element relative to the beginning of the audio in seconds (centisecond precision)"""  
    ts_end: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts_end'), 'exclude': lambda f: f is None }})
    r"""The timestamp of the end of the element relative to the beginning of the audio in seconds (centisecond precision)"""  
    type: Optional[TranscriptMonologuesElementsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of transcript element. If Rev.ai was unable to determine the spoken word, the `type` will be `unknown`."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the transcript element."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscriptMonologues:
    
    elements: Optional[list[TranscriptMonologuesElements]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})
    r"""Array of transcript elements"""  
    speaker: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaker'), 'exclude': lambda f: f is None }})
    r"""Id of the speaker of the monologue"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transcript:
    r"""Rev.ai Transcript Model
    ***
    Note: properties are not displayed in the returned object if they are null
    
    Jobs with skip_diarization set to true will only show a single speaker for the entire duration of the transcript.
    """
    
    monologues: Optional[list[TranscriptMonologues]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monologues'), 'exclude': lambda f: f is None }})  
    