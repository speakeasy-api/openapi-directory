"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class LogEventStatusEnum(str, Enum):
    r"""Operation status:
    
    * `0` - Success
    
    * `2` - Error
    """
    ZERO = '0'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogEvent:
    r"""Log event information"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Event ID"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Event description"""  
    time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Event timestamp"""  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId') }})
    r"""Unique identifier for the user"""  
    attribute1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute1'), 'exclude': lambda f: f is None }})
    r"""Attribute 1"""  
    attribute2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute2'), 'exclude': lambda f: f is None }})
    r"""Attribute 2"""  
    attribute3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute3'), 'exclude': lambda f: f is None }})
    r"""Attribute 3"""  
    auth_parent_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authParentSource'), 'exclude': lambda f: f is None }})
    r"""Auth parent source ID"""  
    auth_parent_target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authParentTarget'), 'exclude': lambda f: f is None }})
    r"""Auth parent target ID"""  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the customer"""  
    object_id1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectId1'), 'exclude': lambda f: f is None }})
    r"""Object ID 1"""  
    object_id2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectId2'), 'exclude': lambda f: f is None }})
    r"""Object ID 2"""  
    object_name1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectName1'), 'exclude': lambda f: f is None }})
    r"""Object name 1"""  
    object_name2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectName2'), 'exclude': lambda f: f is None }})
    r"""Object name 2"""  
    object_type1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectType1'), 'exclude': lambda f: f is None }})
    r"""Object type 1"""  
    object_type2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectType2'), 'exclude': lambda f: f is None }})
    r"""Object type 2"""  
    operation_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationId'), 'exclude': lambda f: f is None }})
    r"""Operation type ID"""  
    operation_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationName'), 'exclude': lambda f: f is None }})
    r"""Operation name"""  
    status: Optional[LogEventStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Operation status:
    
    * `0` - Success
    
    * `2` - Error
    """  
    user_client: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userClient'), 'exclude': lambda f: f is None }})
    r"""Client"""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userIp'), 'exclude': lambda f: f is None }})
    r"""User IP"""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    r"""Username"""  
    