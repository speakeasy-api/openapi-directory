// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSensorAlertsCurrentOverviewByMetricRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise - Object containing the number of sensors that are currently alerting due to noise readings
type GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise struct {
	// Number of sensors that are currently alerting due to ambient noise readings
	Ambient *int64 `json:"ambient,omitempty"`
}

// GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts - Counts of currently alerting sensors, aggregated by alerting metric
type GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts struct {
	// Number of sensors that are currently alerting due to an open door
	Door *int64 `json:"door,omitempty"`
	// Number of sensors that are currently alerting due to humidity readings
	Humidity *int64 `json:"humidity,omitempty"`
	// Number of sensors that are currently alerting due to indoor air quality readings
	IndoorAirQuality *int64 `json:"indoorAirQuality,omitempty"`
	// Object containing the number of sensors that are currently alerting due to noise readings
	Noise *GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise `json:"noise,omitempty"`
	// Number of sensors that are currently alerting due to PM2.5 readings
	Pm25 *int64 `json:"pm25,omitempty"`
	// Number of sensors that are currently alerting due to temperature readings
	Temperature *int64 `json:"temperature,omitempty"`
	// Number of sensors that are currently alerting due to TVOC readings
	Tvoc *int64 `json:"tvoc,omitempty"`
	// Number of sensors that are currently alerting due to the presence of water
	Water *int64 `json:"water,omitempty"`
}

type GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum string

const (
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumDoor             GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "door"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumHumidity         GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "humidity"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumIndoorAirQuality GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "indoorAirQuality"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumNoise            GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "noise"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumPm25             GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "pm25"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumTemperature      GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "temperature"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumTvoc             GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "tvoc"
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnumWater            GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum = "water"
)

func (e GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum) ToPointer() *GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum {
	return &e
}

func (e *GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "door":
		fallthrough
	case "humidity":
		fallthrough
	case "indoorAirQuality":
		fallthrough
	case "noise":
		fallthrough
	case "pm25":
		fallthrough
	case "temperature":
		fallthrough
	case "tvoc":
		fallthrough
	case "water":
		*e = GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum: %v", v)
	}
}

// GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON - Successful operation
type GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON struct {
	// Counts of currently alerting sensors, aggregated by alerting metric
	Counts *GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts `json:"counts,omitempty"`
	// List of metrics that are supported for alerts, based on available sensor devices in the network
	SupportedMetrics []GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum `json:"supportedMetrics,omitempty"`
}

type GetNetworkSensorAlertsCurrentOverviewByMetricResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONObject *GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON
}
