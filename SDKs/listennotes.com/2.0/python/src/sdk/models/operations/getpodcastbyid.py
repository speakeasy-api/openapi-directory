"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import podcastfull as shared_podcastfull
from enum import Enum
from typing import Optional

class GetPodcastByIDSortEnum(str, Enum):
    r"""How do you want to sort the episodes of this podcast?"""
    RECENT_FIRST = 'recent_first'
    OLDEST_FIRST = 'oldest_first'


@dataclasses.dataclass
class GetPodcastByIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`..."""  
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    next_episode_pub_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_episode_pub_date', 'style': 'form', 'explode': True }})
    r"""For episodes pagination. It's the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter."""  
    sort: Optional[GetPodcastByIDSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""How do you want to sort the episodes of this podcast?"""  
    

@dataclasses.dataclass
class GetPodcastByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    podcast_full: Optional[shared_podcastfull.PodcastFull] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    