// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeAddressesAttributeActionEnum
type GETDescribeAddressesAttributeActionEnum string

const (
	GETDescribeAddressesAttributeActionEnumDescribeAddressesAttribute GETDescribeAddressesAttributeActionEnum = "DescribeAddressesAttribute"
)

func (e *GETDescribeAddressesAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeAddressesAttribute":
		*e = GETDescribeAddressesAttributeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAddressesAttributeActionEnum: %s", s)
	}
}

// GETDescribeAddressesAttributeAttributeEnum - The attribute of the IP address.
type GETDescribeAddressesAttributeAttributeEnum string

const (
	GETDescribeAddressesAttributeAttributeEnumDomainName GETDescribeAddressesAttributeAttributeEnum = "domain-name"
)

func (e *GETDescribeAddressesAttributeAttributeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "domain-name":
		*e = GETDescribeAddressesAttributeAttributeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAddressesAttributeAttributeEnum: %s", s)
	}
}

// GETDescribeAddressesAttributeVersionEnum
type GETDescribeAddressesAttributeVersionEnum string

const (
	GETDescribeAddressesAttributeVersionEnumTwoThousandAndSixteen1115 GETDescribeAddressesAttributeVersionEnum = "2016-11-15"
)

func (e *GETDescribeAddressesAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDescribeAddressesAttributeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAddressesAttributeVersionEnum: %s", s)
	}
}

type GETDescribeAddressesAttributeQueryParams struct {
	Action GETDescribeAddressesAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// [EC2-VPC] The allocation IDs.
	AllocationID []string `queryParam:"style=form,explode=true,name=AllocationId"`
	// The attribute of the IP address.
	Attribute *GETDescribeAddressesAttributeAttributeEnum `queryParam:"style=form,explode=true,name=Attribute"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// The token for the next page of results.
	NextToken *string                                  `queryParam:"style=form,explode=true,name=NextToken"`
	Version   GETDescribeAddressesAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeAddressesAttributeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeAddressesAttributeRequest struct {
	QueryParams GETDescribeAddressesAttributeQueryParams
	Headers     GETDescribeAddressesAttributeHeaders
}

type GETDescribeAddressesAttributeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
