// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// WireTransferTransferApproval - If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
type WireTransferTransferApproval struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
	ApprovedAt time.Time `json:"approved_at"`
}

// WireTransferTransferCancellation - If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
type WireTransferTransferCancellation struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
	CanceledAt time.Time `json:"canceled_at"`
}

// WireTransferCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
type WireTransferCurrencyEnum string

const (
	WireTransferCurrencyEnumCad WireTransferCurrencyEnum = "CAD"
	WireTransferCurrencyEnumChf WireTransferCurrencyEnum = "CHF"
	WireTransferCurrencyEnumEur WireTransferCurrencyEnum = "EUR"
	WireTransferCurrencyEnumGbp WireTransferCurrencyEnum = "GBP"
	WireTransferCurrencyEnumJpy WireTransferCurrencyEnum = "JPY"
	WireTransferCurrencyEnumUsd WireTransferCurrencyEnum = "USD"
)

func (e *WireTransferCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = WireTransferCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WireTransferCurrencyEnum: %s", s)
	}
}

// WireTransferNetworkEnum - The transfer's network.
type WireTransferNetworkEnum string

const (
	WireTransferNetworkEnumWire WireTransferNetworkEnum = "wire"
)

func (e *WireTransferNetworkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wire":
		*e = WireTransferNetworkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WireTransferNetworkEnum: %s", s)
	}
}

// WireTransferInboundWireReversal - If your transfer is reversed, this will contain details of the reversal.
type WireTransferInboundWireReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// Additional financial institution information included in the wire reversal.
	FinancialInstitutionToFinancialInstitutionInformation string `json:"financial_institution_to_financial_institution_information"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
	// Information included in the wire reversal for the receiving financial institution.
	ReceiverFinancialInstitutionInformation string `json:"receiver_financial_institution_information"`
}

// WireTransferStatusEnum - The lifecycle status of the transfer.
type WireTransferStatusEnum string

const (
	WireTransferStatusEnumCanceled          WireTransferStatusEnum = "canceled"
	WireTransferStatusEnumRequiresAttention WireTransferStatusEnum = "requires_attention"
	WireTransferStatusEnumPendingApproval   WireTransferStatusEnum = "pending_approval"
	WireTransferStatusEnumRejected          WireTransferStatusEnum = "rejected"
	WireTransferStatusEnumReversed          WireTransferStatusEnum = "reversed"
	WireTransferStatusEnumComplete          WireTransferStatusEnum = "complete"
	WireTransferStatusEnumPendingCreating   WireTransferStatusEnum = "pending_creating"
)

func (e *WireTransferStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "canceled":
		fallthrough
	case "requires_attention":
		fallthrough
	case "pending_approval":
		fallthrough
	case "rejected":
		fallthrough
	case "reversed":
		fallthrough
	case "complete":
		fallthrough
	case "pending_creating":
		*e = WireTransferStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WireTransferStatusEnum: %s", s)
	}
}

// WireTransferWireTransferSubmission - After the transfer is submitted to Fedwire, this will contain supplemental details.
type WireTransferWireTransferSubmission struct {
	// The accountability data for the submission.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// When this wire transfer was submitted to Fedwire.
	SubmittedAt time.Time `json:"submitted_at"`
}

// WireTransferTypeEnum - A constant representing the object's type. For this resource it will always be `wire_transfer`.
type WireTransferTypeEnum string

const (
	WireTransferTypeEnumWireTransfer WireTransferTypeEnum = "wire_transfer"
)

func (e *WireTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wire_transfer":
		*e = WireTransferTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WireTransferTypeEnum: %s", s)
	}
}

// WireTransfer - Wire transfers move funds between your Increase account and any other account accessible by Fedwire.
type WireTransfer struct {
	// The Account to which the transfer belongs.
	AccountID string `json:"account_id"`
	// The destination account number.
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
	Approval WireTransferTransferApproval `json:"approval"`
	// The beneficiary's address line 1.
	BeneficiaryAddressLine1 string `json:"beneficiary_address_line1"`
	// The beneficiary's address line 2.
	BeneficiaryAddressLine2 string `json:"beneficiary_address_line2"`
	// The beneficiary's address line 3.
	BeneficiaryAddressLine3 string `json:"beneficiary_address_line3"`
	// The beneficiary's name.
	BeneficiaryName string `json:"beneficiary_name"`
	// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
	Cancellation WireTransferTransferCancellation `json:"cancellation"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
	Currency WireTransferCurrencyEnum `json:"currency"`
	// The identifier of the External Account the transfer was made to, if any.
	ExternalAccountID string `json:"external_account_id"`
	// The wire transfer's identifier.
	ID string `json:"id"`
	// The message that will show on the recipient's bank statement.
	MessageToRecipient string `json:"message_to_recipient"`
	// The transfer's network.
	Network WireTransferNetworkEnum `json:"network"`
	// If your transfer is reversed, this will contain details of the reversal.
	Reversal WireTransferInboundWireReversal `json:"reversal"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	RoutingNumber string `json:"routing_number"`
	// The lifecycle status of the transfer.
	Status WireTransferStatusEnum `json:"status"`
	// After the transfer is submitted to Fedwire, this will contain supplemental details.
	Submission WireTransferWireTransferSubmission `json:"submission"`
	// If the transfer was created from a template, this will be the template's ID.
	TemplateID string `json:"template_id"`
	// The ID for the transaction funding the transfer.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `wire_transfer`.
	Type WireTransferTypeEnum `json:"type"`
}
