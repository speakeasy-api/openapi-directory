/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class RejectedPaymentV3 {
    /**
     * The amount of the payment in minor units
     */
    @JsonProperty("amount")
    public Long amount;
    public RejectedPaymentV3 withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Valid ISO 4217 3 letter currency code. See the &lt;a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a&gt;ISO specification&lt;/a&gt; for details.
     */
    @JsonProperty("currencyType")
    public String currencyType;
    public RejectedPaymentV3 withCurrencyType(String currencyType) {
        this.currencyType = currencyType;
        return this;
    }
    
    /**
     * If the payment was submitted in a csv payout then this will be the line number of the payment in the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineNumber")
    public Long lineNumber;
    public RejectedPaymentV3 withLineNumber(Long lineNumber) {
        this.lineNumber = lineNumber;
        return this;
    }
    
    /**
     * A more general rejection message than the reason property
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;
    public RejectedPaymentV3 withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * &lt;p&gt;Metadata about the payment that may be relevant to the specific rails or remote system making the payout&lt;/p&gt;
     * &lt;p&gt;The structure of the data will be dictated by the requirements of the payment rails&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMetadata")
    public String paymentMetadata;
    public RejectedPaymentV3 withPaymentMetadata(String paymentMetadata) {
        this.paymentMetadata = paymentMetadata;
        return this;
    }
    
    /**
     * A reference identifier for the payor for the given payee payment
     */
    @JsonProperty("payorPaymentId")
    public String payorPaymentId;
    public RejectedPaymentV3 withPayorPaymentId(String payorPaymentId) {
        this.payorPaymentId = payorPaymentId;
        return this;
    }
    
    /**
     * The reason for the payment being rejected
     */
    @JsonProperty("reason")
    public String reason;
    public RejectedPaymentV3 withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * The reason code as determined by Velo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonCode")
    public String reasonCode;
    public RejectedPaymentV3 withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     * The remoteId supplied by the payor that identifies the payee
     */
    @JsonProperty("remoteId")
    public String remoteId;
    public RejectedPaymentV3 withRemoteId(String remoteId) {
        this.remoteId = remoteId;
        return this;
    }
    
    /**
     * &lt;p&gt;The identifier for the remote payments system if not Velo&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteSystemId")
    public String remoteSystemId;
    public RejectedPaymentV3 withRemoteSystemId(String remoteSystemId) {
        this.remoteSystemId = remoteSystemId;
        return this;
    }
    
    /**
     * The identifier of the source account to debit the payment from
     */
    @JsonProperty("sourceAccountName")
    public String sourceAccountName;
    public RejectedPaymentV3 withSourceAccountName(String sourceAccountName) {
        this.sourceAccountName = sourceAccountName;
        return this;
    }
    
}
