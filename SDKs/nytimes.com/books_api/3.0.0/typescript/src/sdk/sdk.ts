/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.nytimes.com/svc/books/v3"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Books API provides information about book reviews and The New York Times bestsellers lists.
 *
 * @see {@link http://developer.nytimes.com/}
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Best Seller History List
   */
  getListsBestSellersHistoryJson(
    req: operations.GETListsBestSellersHistoryJsonRequest,
    security: operations.GETListsBestSellersHistoryJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETListsBestSellersHistoryJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETListsBestSellersHistoryJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/lists/best-sellers/history.json";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETListsBestSellersHistoryJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETListsBestSellersHistoryJsonResponse =
        new operations.GETListsBestSellersHistoryJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getListsBestSellersHistoryJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETListsBestSellersHistoryJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Best Seller List by Date
   */
  getListsDateListJson(
    req: operations.GETListsDateListJsonRequest,
    security: operations.GETListsDateListJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETListsDateListJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETListsDateListJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/lists/{date}/{list}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETListsDateListJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETListsDateListJsonResponse =
        new operations.GETListsDateListJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getListsDateListJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETListsDateListJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Best Seller List
   */
  getListsFormat(
    req: operations.GETListsFormatRequest,
    security: operations.GETListsFormatSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETListsFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETListsFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/lists.{format}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETListsFormatSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETListsFormatResponse =
        new operations.GETListsFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getListsFormat200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETListsFormat200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Best Seller List Names
   */
  getListsNamesFormat(
    req: operations.GETListsNamesFormatRequest,
    security: operations.GETListsNamesFormatSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETListsNamesFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETListsNamesFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/lists/names.{format}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETListsNamesFormatSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETListsNamesFormatResponse =
        new operations.GETListsNamesFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getListsNamesFormat200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETListsNamesFormat200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Best Seller List Overview
   */
  getListsOverviewFormat(
    req: operations.GETListsOverviewFormatRequest,
    security: operations.GETListsOverviewFormatSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETListsOverviewFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETListsOverviewFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/lists/overview.{format}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETListsOverviewFormatSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETListsOverviewFormatResponse =
        new operations.GETListsOverviewFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getListsOverviewFormat200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETListsOverviewFormat200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reviews
   */
  getReviewsFormat(
    req: operations.GETReviewsFormatRequest,
    security: operations.GETReviewsFormatSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETReviewsFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETReviewsFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/reviews.{format}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETReviewsFormatSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETReviewsFormatResponse =
        new operations.GETReviewsFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReviewsFormat200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETReviewsFormat200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
