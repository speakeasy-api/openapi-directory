/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Type of MessageEvent. Indicates whether the message was sent or received.
 */
export enum MessageEventTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Sent = "SENT",
  Received = "RECEIVED",
}

/**
 * An event describing a message sent/received between Spans.
 */
export class MessageEvent extends SpeakeasyBase {
  /**
   * The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compressedSizeBytes" })
  compressedSizeBytes?: string;

  /**
   * An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MessageEventTypeEnum;

  /**
   * The number of uncompressed bytes sent or received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uncompressedSizeBytes" })
  uncompressedSizeBytes?: string;
}
