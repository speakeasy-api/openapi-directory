// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkTrafficAnalysisPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum -     The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'.
type UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum string

const (
	UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnumHost    UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum = "host"
	UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnumIPRange UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum = "ipRange"
	UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnumPort    UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum = "port"
)

func (e *UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "port":
		*e = UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum: %s", s)
	}
}

type UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItems struct {
	// The name of the custom pie chart item.
	Name string `json:"name"`
	//     The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'.
	//
	Type UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum `json:"type"`
	//     The value of the custom pie chart item. Valid syntax depends on the signature type of the chart item
	//     (see sample request/response for more details).
	//
	Value string `json:"value"`
}

// UpdateNetworkTrafficAnalysisRequestBodyModeEnum -     The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),
//
//	'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames).
type UpdateNetworkTrafficAnalysisRequestBodyModeEnum string

const (
	UpdateNetworkTrafficAnalysisRequestBodyModeEnumBasic    UpdateNetworkTrafficAnalysisRequestBodyModeEnum = "basic"
	UpdateNetworkTrafficAnalysisRequestBodyModeEnumDetailed UpdateNetworkTrafficAnalysisRequestBodyModeEnum = "detailed"
	UpdateNetworkTrafficAnalysisRequestBodyModeEnumDisabled UpdateNetworkTrafficAnalysisRequestBodyModeEnum = "disabled"
)

func (e *UpdateNetworkTrafficAnalysisRequestBodyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "detailed":
		fallthrough
	case "disabled":
		*e = UpdateNetworkTrafficAnalysisRequestBodyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkTrafficAnalysisRequestBodyModeEnum: %s", s)
	}
}

type UpdateNetworkTrafficAnalysisRequestBody struct {
	// The list of items that make up the custom pie chart for traffic reporting.
	CustomPieChartItems []UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItems `json:"customPieChartItems,omitempty"`
	//     The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),
	//     'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames).
	//
	Mode *UpdateNetworkTrafficAnalysisRequestBodyModeEnum `json:"mode,omitempty"`
}

type UpdateNetworkTrafficAnalysisRequest struct {
	PathParams UpdateNetworkTrafficAnalysisPathParams
	Request    *UpdateNetworkTrafficAnalysisRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkTrafficAnalysisResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkTrafficAnalysis200ApplicationJSONObject map[string]interface{}
}
