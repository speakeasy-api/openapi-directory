"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_place as shared_tfl_api_presentation_entities_place
from typing import Optional


@dataclasses.dataclass
class PlaceSearchRequest:
    
    name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names."""  
    types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of the types to return. Max. approx 12 types."""  
    

@dataclasses.dataclass
class PlaceSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_places: Optional[list[shared_tfl_api_presentation_entities_place.TflAPIPresentationEntitiesPlace]] = dataclasses.field(default=None)
    r"""OK"""  
    