/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InternalRange - The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
 */
public class InternalRange {
    /**
     * Time when the internal range was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public InternalRange withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * A description of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public InternalRange withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The IP range that this internal range defines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipCidrRange")
    public String ipCidrRange;
    public InternalRange withIpCidrRange(String ipCidrRange) {
        this.ipCidrRange = ipCidrRange;
        return this;
    }
    
    /**
     * User-defined labels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public InternalRange withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Immutable. The name of an internal range. Format: projects/{project}/locations/{location}/internalRanges/{internal_range} See: https://google.aip.dev/122#fields-representing-resource-names
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public InternalRange withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The URL or resource ID of the network in which to reserve the internal range. The network cannot be deleted if there are any reserved internal ranges referring to it. Legacy networks are not supported. This can only be specified for a global internal address. Example: - URL: /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public InternalRange withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Optional. Types of resources that are allowed to overlap with the current internal range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overlaps")
    public InternalRangeOverlapsEnum[] overlaps;
    public InternalRange withOverlaps(InternalRangeOverlapsEnum[] overlaps) {
        this.overlaps = overlaps;
        return this;
    }
    
    /**
     * The type of peering set for this internal range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peering")
    public InternalRangePeeringEnum peering;
    public InternalRange withPeering(InternalRangePeeringEnum peering) {
        this.peering = peering;
        return this;
    }
    
    /**
     * An alternate to ip_cidr_range. Can be set when trying to create a reservation that automatically finds a free range of the given size. If both ip_cidr_range and prefix_length are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefixLength")
    public Integer prefixLength;
    public InternalRange withPrefixLength(Integer prefixLength) {
        this.prefixLength = prefixLength;
        return this;
    }
    
    /**
     * Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetCidrRange")
    public String[] targetCidrRange;
    public InternalRange withTargetCidrRange(String[] targetCidrRange) {
        this.targetCidrRange = targetCidrRange;
        return this;
    }
    
    /**
     * Time when the internal range was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public InternalRange withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * The type of usage set for this InternalRange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public InternalRangeUsageEnum usage;
    public InternalRange withUsage(InternalRangeUsageEnum usage) {
        this.usage = usage;
        return this;
    }
    
    /**
     * Output only. The list of resources that refer to this internal range. Resources that use the internal range for their range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    public String[] users;
    public InternalRange withUsers(String[] users) {
        this.users = users;
        return this;
    }
    
}
