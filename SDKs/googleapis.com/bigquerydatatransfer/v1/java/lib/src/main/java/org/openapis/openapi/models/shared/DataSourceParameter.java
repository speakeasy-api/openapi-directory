/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DataSourceParameter - A parameter used to define custom fields in a data source definition.
 */
public class DataSourceParameter {
    /**
     * All possible values for the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedValues")
    public String[] allowedValues;

    public DataSourceParameter withAllowedValues(String[] allowedValues) {
        this.allowedValues = allowedValues;
        return this;
    }
    
    /**
     * If true, it should not be used in new transfers, and it should not be visible to users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deprecated")
    public Boolean deprecated;

    public DataSourceParameter withDeprecated(Boolean deprecated) {
        this.deprecated = deprecated;
        return this;
    }
    
    /**
     * Parameter description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public DataSourceParameter withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Parameter display name in the user interface.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public DataSourceParameter withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Deprecated. This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public DataSourceParameter[] fields;

    public DataSourceParameter withFields(DataSourceParameter[] fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Cannot be changed after initial creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("immutable")
    public Boolean immutable;

    public DataSourceParameter withImmutable(Boolean immutable) {
        this.immutable = immutable;
        return this;
    }
    
    /**
     * For integer and double values specifies maximum allowed value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxValue")
    public Double maxValue;

    public DataSourceParameter withMaxValue(Double maxValue) {
        this.maxValue = maxValue;
        return this;
    }
    
    /**
     * For integer and double values specifies minimum allowed value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minValue")
    public Double minValue;

    public DataSourceParameter withMinValue(Double minValue) {
        this.minValue = minValue;
        return this;
    }
    
    /**
     * Parameter identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paramId")
    public String paramId;

    public DataSourceParameter withParamId(String paramId) {
        this.paramId = paramId;
        return this;
    }
    
    /**
     * Deprecated. This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurse")
    public Boolean recurse;

    public DataSourceParameter withRecurse(Boolean recurse) {
        this.recurse = recurse;
        return this;
    }
    
    /**
     * Deprecated. This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeated")
    public Boolean repeated;

    public DataSourceParameter withRepeated(Boolean repeated) {
        this.repeated = repeated;
        return this;
    }
    
    /**
     * Is parameter required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    public Boolean required;

    public DataSourceParameter withRequired(Boolean required) {
        this.required = required;
        return this;
    }
    
    /**
     * Parameter type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public DataSourceParameterTypeEnum type;

    public DataSourceParameter withType(DataSourceParameterTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationDescription")
    public String validationDescription;

    public DataSourceParameter withValidationDescription(String validationDescription) {
        this.validationDescription = validationDescription;
        return this;
    }
    
    /**
     * URL to a help document to further explain the naming requirements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationHelpUrl")
    public String validationHelpUrl;

    public DataSourceParameter withValidationHelpUrl(String validationHelpUrl) {
        this.validationHelpUrl = validationHelpUrl;
        return this;
    }
    
    /**
     * Regular expression which can be used for parameter validation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationRegex")
    public String validationRegex;

    public DataSourceParameter withValidationRegex(String validationRegex) {
        this.validationRegex = validationRegex;
        return this;
    }
    
    public DataSourceParameter(){}
}
