/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetRecordsRecordIdMoreLikeThisFormatRequest extends SpeakeasyBase {
  /**
   * The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can:
   *
   * @remarks
   * - provide targeted help and support
   * - increase your query throughput (by negotiation)
   * - notify you directly of changes to the API
   * - gather usage metrics to help improve the service
   *
   * API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.
   *
   * **Getting an API key**
   * [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select "[my API key](https://digitalnz.org/api_keys/edit)" from your username drop-down menu (on the right hand side)'. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).
   *
   * **Using an API key**
   * When you make a call to the API you'll need to pass the key in a custom HTTP header: ‘Authentication-Token’.
   * For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):
   *
   * `curl -H "Authentication-Token:{YOUR_API_KEY}" http://api.digitalnz.org/v3/records.json?text=kiwi`
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Authentication-Token",
  })
  authenticationToken?: string;

  /**
   * Comma-separated whitelist of fields to be returned. The syntax *"&fields=verbose"* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *"&fields=id,title,subject,collection,landing_url,locations"*.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=fields",
  })
  fields?: string;

  /**
   * More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&and[category]=Images*, or to only show related records from a specific content partner eg *&and[content_partner]=Puke+Ariki*.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=filtering",
  })
  filtering?: string;

  /**
   * Note - There is a small difference with some field names in the response between JSON and XML.
   *
   * @remarks
   * When a field name has more than one word, JSON format will separate the words with an underscore, eg. "content_partner", whereas XML uses a hyphenated naming convention, eg. "content-partner".
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=format",
  })
  format: shared.FormatEnum;

  /**
   * Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&mlt_fields=title,subject* or *&mlt_fields=title*.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=mlt_fields",
  })
  mltFields?: string;

  /**
   * Every record has a unique, persistent *record_id*.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=record_id",
  })
  recordId: number;
}

/**
 * ok
 */
export class GetRecordsRecordIdMoreLikeThisFormat200ApplicationJSON extends SpeakeasyBase {
  /**
   * Current page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  /**
   * Requested amount of records shown per page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage?: number;

  @SpeakeasyMetadata({ elemType: shared.RecordT })
  @Expose({ name: "records" })
  @Type(() => shared.RecordT)
  records?: shared.RecordT[];

  /**
   * The URL of current page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_url" })
  requestUrl?: string;

  /**
   * Total number of matching search results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "result_count" })
  resultCount?: number;
}

export class GetRecordsRecordIdMoreLikeThisFormatResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ok
   */
  @SpeakeasyMetadata()
  getRecordsRecordIdMoreLikeThisFormat200ApplicationJSONObject?: GetRecordsRecordIdMoreLikeThisFormat200ApplicationJSON;

  /**
   * API Key (Authentication-Token) is invalid.
   */
  @SpeakeasyMetadata()
  getRecordsRecordIdMoreLikeThisFormat403ApplicationJSONObject?: Record<
    string,
    any
  >;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  getRecordsRecordIdMoreLikeThisFormat404ApplicationJSONObject?: Record<
    string,
    any
  >;
}
