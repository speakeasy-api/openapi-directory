/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Indicates whether attachment requests are automatically accepted.
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsAutoAcceptSharedAttachmentsEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments are automatically associated with the default association route table.
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsDefaultRouteTableAssociationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments automatically propagate routes to the default propagation route table.
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsDefaultRouteTablePropagationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether DNS support is enabled.
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsDnsSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether multicast is enabled on the transit gateway
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsMulticastSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether Equal Cost Multipath Protocol support is enabled.
 */
export enum DeleteTransitGatewayResultTransitGatewayOptionsVpnEcmpSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * The transit gateway options.
 */
export class DeleteTransitGatewayResultTransitGatewayOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  amazonSideAsn?: number;

  @SpeakeasyMetadata()
  associationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  autoAcceptSharedAttachments?: DeleteTransitGatewayResultTransitGatewayOptionsAutoAcceptSharedAttachmentsEnum;

  @SpeakeasyMetadata()
  defaultRouteTableAssociation?: DeleteTransitGatewayResultTransitGatewayOptionsDefaultRouteTableAssociationEnum;

  @SpeakeasyMetadata()
  defaultRouteTablePropagation?: DeleteTransitGatewayResultTransitGatewayOptionsDefaultRouteTablePropagationEnum;

  @SpeakeasyMetadata()
  dnsSupport?: DeleteTransitGatewayResultTransitGatewayOptionsDnsSupportEnum;

  @SpeakeasyMetadata()
  multicastSupport?: DeleteTransitGatewayResultTransitGatewayOptionsMulticastSupportEnum;

  @SpeakeasyMetadata()
  propagationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  transitGatewayCidrBlocks?: string[];

  @SpeakeasyMetadata()
  vpnEcmpSupport?: DeleteTransitGatewayResultTransitGatewayOptionsVpnEcmpSupportEnum;
}

/**
 * The state of the transit gateway.
 */
export enum DeleteTransitGatewayResultTransitGatewayStateEnum {
  Pending = "pending",
  Available = "available",
  Modifying = "modifying",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class DeleteTransitGatewayResultTransitGatewayTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the deleted transit gateway.
 */
export class DeleteTransitGatewayResultTransitGateway extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  options?: DeleteTransitGatewayResultTransitGatewayOptions;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  state?: DeleteTransitGatewayResultTransitGatewayStateEnum;

  @SpeakeasyMetadata({ elemType: DeleteTransitGatewayResultTransitGatewayTags })
  tags?: DeleteTransitGatewayResultTransitGatewayTags[];

  @SpeakeasyMetadata()
  transitGatewayArn?: string;

  @SpeakeasyMetadata()
  transitGatewayId?: string;
}

/**
 * Success
 */
export class DeleteTransitGatewayResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  transitGateway?: DeleteTransitGatewayResultTransitGateway;
}
