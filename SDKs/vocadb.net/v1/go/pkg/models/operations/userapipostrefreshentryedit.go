// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UserAPIPostRefreshEntryEditEntryTypeEnum - Type of entry.
type UserAPIPostRefreshEntryEditEntryTypeEnum string

const (
	UserAPIPostRefreshEntryEditEntryTypeEnumUndefined          UserAPIPostRefreshEntryEditEntryTypeEnum = "Undefined"
	UserAPIPostRefreshEntryEditEntryTypeEnumAlbum              UserAPIPostRefreshEntryEditEntryTypeEnum = "Album"
	UserAPIPostRefreshEntryEditEntryTypeEnumArtist             UserAPIPostRefreshEntryEditEntryTypeEnum = "Artist"
	UserAPIPostRefreshEntryEditEntryTypeEnumDiscussionTopic    UserAPIPostRefreshEntryEditEntryTypeEnum = "DiscussionTopic"
	UserAPIPostRefreshEntryEditEntryTypeEnumPv                 UserAPIPostRefreshEntryEditEntryTypeEnum = "PV"
	UserAPIPostRefreshEntryEditEntryTypeEnumReleaseEvent       UserAPIPostRefreshEntryEditEntryTypeEnum = "ReleaseEvent"
	UserAPIPostRefreshEntryEditEntryTypeEnumReleaseEventSeries UserAPIPostRefreshEntryEditEntryTypeEnum = "ReleaseEventSeries"
	UserAPIPostRefreshEntryEditEntryTypeEnumSong               UserAPIPostRefreshEntryEditEntryTypeEnum = "Song"
	UserAPIPostRefreshEntryEditEntryTypeEnumSongList           UserAPIPostRefreshEntryEditEntryTypeEnum = "SongList"
	UserAPIPostRefreshEntryEditEntryTypeEnumTag                UserAPIPostRefreshEntryEditEntryTypeEnum = "Tag"
	UserAPIPostRefreshEntryEditEntryTypeEnumUser               UserAPIPostRefreshEntryEditEntryTypeEnum = "User"
	UserAPIPostRefreshEntryEditEntryTypeEnumVenue              UserAPIPostRefreshEntryEditEntryTypeEnum = "Venue"
)

func (e *UserAPIPostRefreshEntryEditEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Undefined":
		fallthrough
	case "Album":
		fallthrough
	case "Artist":
		fallthrough
	case "DiscussionTopic":
		fallthrough
	case "PV":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "ReleaseEventSeries":
		fallthrough
	case "Song":
		fallthrough
	case "SongList":
		fallthrough
	case "Tag":
		fallthrough
	case "User":
		fallthrough
	case "Venue":
		*e = UserAPIPostRefreshEntryEditEntryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIPostRefreshEntryEditEntryTypeEnum: %s", s)
	}
}

type UserAPIPostRefreshEntryEditQueryParams struct {
	// Entry ID.
	EntryID int `queryParam:"style=form,explode=true,name=entryId"`
	// Type of entry.
	EntryType UserAPIPostRefreshEntryEditEntryTypeEnum `queryParam:"style=form,explode=true,name=entryType"`
}

type UserAPIPostRefreshEntryEditRequest struct {
	QueryParams UserAPIPostRefreshEntryEditQueryParams
}

type UserAPIPostRefreshEntryEditResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
