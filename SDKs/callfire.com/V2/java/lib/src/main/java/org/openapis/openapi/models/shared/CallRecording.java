/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CallRecording - Represents a recording of a voice call
 */
public class CallRecording {
    /**
     * An id of a call action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callId")
    public Long callId;
    public CallRecording withCallId(Long callId) {
        this.callId = callId;
        return this;
    }
    
    /**
     * Contains broadcast id if call was sent as a part of voice broadcast
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaignId")
    public Long campaignId;
    public CallRecording withCampaignId(Long campaignId) {
        this.campaignId = campaignId;
        return this;
    }
    
    /**
     * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    public Long created;
    public CallRecording withCreated(Long created) {
        this.created = created;
        return this;
    }
    
    /**
     * A unique string hash identifier of a recording
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    public String hash;
    public CallRecording withHash(String hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * An id of a call recording
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public CallRecording withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * A size of a recording file in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lengthInBytes")
    public Long lengthInBytes;
    public CallRecording withLengthInBytes(Long lengthInBytes) {
        this.lengthInBytes = lengthInBytes;
        return this;
    }
    
    /**
     * Duration of a recording in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lengthInSeconds")
    public Integer lengthInSeconds;
    public CallRecording withLengthInSeconds(Integer lengthInSeconds) {
        this.lengthInSeconds = lengthInSeconds;
        return this;
    }
    
    /**
     * A public URL of a call recording
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mp3Url")
    public String mp3Url;
    public CallRecording withMp3Url(String mp3Url) {
        this.mp3Url = mp3Url;
        return this;
    }
    
    /**
     * A name of a recording
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CallRecording withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CallRecordingStateEnum state;
    public CallRecording withState(CallRecordingStateEnum state) {
        this.state = state;
        return this;
    }
    
}
