/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PayoutRequest {
    @JsonProperty("amount")
    public Amount amount;

    public PayoutRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    public Address billingAddress;

    public PayoutRequest withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public Card card;

    public PayoutRequest withCard(Card card) {
        this.card = card;
        return this;
    }
    
    /**
     * An integer value that is added to the normal fraud score. The value can be either positive or negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fraudOffset")
    public Integer fraudOffset;

    public PayoutRequest withFraudOffset(Integer fraudOffset) {
        this.fraudOffset = fraudOffset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fundSource")
    public FundSource fundSource;

    public PayoutRequest withFundSource(FundSource fundSource) {
        this.fundSource = fundSource;
        return this;
    }
    
    /**
     * The merchant account identifier, with which you want to process the transaction.
     */
    @JsonProperty("merchantAccount")
    public String merchantAccount;

    public PayoutRequest withMerchantAccount(String merchantAccount) {
        this.merchantAccount = merchantAccount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    public Recurring recurring;

    public PayoutRequest withRecurring(Recurring recurring) {
        this.recurring = recurring;
        return this;
    }
    
    /**
     * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
     * If you need to provide multiple references for a transaction, separate them with hyphens ("-").
     * Maximum length: 80 characters.
     */
    @JsonProperty("reference")
    public String reference;

    public PayoutRequest withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedRecurringDetailReference")
    public String selectedRecurringDetailReference;

    public PayoutRequest withSelectedRecurringDetailReference(String selectedRecurringDetailReference) {
        this.selectedRecurringDetailReference = selectedRecurringDetailReference;
        return this;
    }
    
    /**
     * The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
     * &gt; For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperEmail")
    public String shopperEmail;

    public PayoutRequest withShopperEmail(String shopperEmail) {
        this.shopperEmail = shopperEmail;
        return this;
    }
    
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
     * For the web service API, Adyen assumes Ecommerce shopper interaction by default.
     * 
     * This field has the following possible values:
     * * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
     * * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
     * * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
     * * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperInteraction")
    public PayoutRequestShopperInteractionEnum shopperInteraction;

    public PayoutRequest withShopperInteraction(PayoutRequestShopperInteractionEnum shopperInteraction) {
        this.shopperInteraction = shopperInteraction;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperName")
    public Name shopperName;

    public PayoutRequest withShopperName(Name shopperName) {
        this.shopperName = shopperName;
        return this;
    }
    
    /**
     * Required for recurring payments. 
     * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.
     * &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperReference")
    public String shopperReference;

    public PayoutRequest withShopperReference(String shopperReference) {
        this.shopperReference = shopperReference;
        return this;
    }
    
    /**
     * The shopper's telephone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephoneNumber")
    public String telephoneNumber;

    public PayoutRequest withTelephoneNumber(String telephoneNumber) {
        this.telephoneNumber = telephoneNumber;
        return this;
    }
    
    public PayoutRequest(@JsonProperty("amount") Amount amount, @JsonProperty("merchantAccount") String merchantAccount, @JsonProperty("reference") String reference) {
        this.amount = amount;
        this.merchantAccount = merchantAccount;
        this.reference = reference;
  }
}
