<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RepricingRuleEligibleOfferMatcher - Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RepricingRuleEligibleOfferMatcher
{
    /**
     * Matcher by string attributes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher $brandMatcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('brandMatcher')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RepricingRuleEligibleOfferMatcherStringMatcher $brandMatcher = null;
    
    /**
     * Matcher by string attributes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher $itemGroupIdMatcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('itemGroupIdMatcher')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RepricingRuleEligibleOfferMatcherStringMatcher $itemGroupIdMatcher = null;
    
    /**
     * Determines whether to use the custom matchers or the product feed attribute "repricing_rule_id" to specify offer-rule mapping.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherMatcherOptionEnum $matcherOption
     */
	#[\JMS\Serializer\Annotation\SerializedName('matcherOption')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherMatcherOptionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RepricingRuleEligibleOfferMatcherMatcherOptionEnum $matcherOption = null;
    
    /**
     * Matcher by string attributes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher $offerIdMatcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('offerIdMatcher')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RepricingRuleEligibleOfferMatcherStringMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RepricingRuleEligibleOfferMatcherStringMatcher $offerIdMatcher = null;
    
    /**
     * When true, the rule won't be applied to offers with active promotions.
     * 
     * @var ?bool $skipWhenOnPromotion
     */
	#[\JMS\Serializer\Annotation\SerializedName('skipWhenOnPromotion')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $skipWhenOnPromotion = null;
    
	public function __construct()
	{
		$this->brandMatcher = null;
		$this->itemGroupIdMatcher = null;
		$this->matcherOption = null;
		$this->offerIdMatcher = null;
		$this->skipWhenOnPromotion = null;
	}
}
