<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RegistrationInput - The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RegistrationInput
{
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ContactSettings $contactSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('contactSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContactSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContactSettings $contactSettings = null;
    
    /**
     * Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DnsSettingsInput $dnsSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('dnsSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DnsSettingsInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DnsSettingsInput $dnsSettings = null;
    
    /**
     * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     * @var ?string $domainName
     */
	#[\JMS\Serializer\Annotation\SerializedName('domainName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $domainName = null;
    
    /**
     * Set of labels associated with the `Registration`.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Defines renewal, billing, and transfer settings for a `Registration`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ManagementSettingsInput $managementSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('managementSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ManagementSettingsInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ManagementSettingsInput $managementSettings = null;
    
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ContactSettings $pendingContactSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('pendingContactSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContactSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContactSettings $pendingContactSettings = null;
    
	public function __construct()
	{
		$this->contactSettings = null;
		$this->dnsSettings = null;
		$this->domainName = null;
		$this->labels = null;
		$this->managementSettings = null;
		$this->pendingContactSettings = null;
	}
}
