<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generate summary of app installation requests.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsResponse
     */
	public function chromemanagementCustomersAppsCountChromeAppRequests(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/apps:countChromeAppRequests', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersAppsCountChromeAppRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeAppRequestsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeAppRequestsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse
     */
	public function chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countChromeBrowsersNeedingAttention', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse
     */
	public function chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse
     */
	public function chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countChromeDevicesThatNeedAttention', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse
     */
	public function chromemanagementCustomersReportsCountChromeHardwareFleetDevices(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countChromeHardwareFleetDevices', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeHardwareFleetDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate report of installed Chrome versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsResponse
     */
	public function chromemanagementCustomersReportsCountChromeVersions(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countChromeVersions', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountChromeVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountChromeVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountChromeVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate report of app installations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsResponse
     */
	public function chromemanagementCustomersReportsCountInstalledApps(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:countInstalledApps', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsCountInstalledAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1CountInstalledAppsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1CountInstalledAppsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate report of managed Chrome browser devices that have a specified app installed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesResponse
     */
	public function chromemanagementCustomersReportsFindInstalledAppDevices(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/reports:findInstalledAppDevices', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersReportsFindInstalledAppDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1FindInstalledAppDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1FindInstalledAppDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all telemetry devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListResponse
     */
	public function chromemanagementCustomersTelemetryDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/telemetry/devices', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1ListTelemetryDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1ListTelemetryDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List telemetry events.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListResponse
     */
	public function chromemanagementCustomersTelemetryEventsList(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/telemetry/events', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1ListTelemetryEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1ListTelemetryEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get telemetry user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetResponse
     */
	public function chromemanagementCustomersTelemetryUsersGet(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1TelemetryUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1TelemetryUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all telemetry users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListResponse
     */
	public function chromemanagementCustomersTelemetryUsersList(
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/telemetry/users', \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromemanagementCustomersTelemetryUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromeManagementV1ListTelemetryUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromeManagementV1ListTelemetryUsersResponse', 'json');
            }
        }

        return $response;
    }
}