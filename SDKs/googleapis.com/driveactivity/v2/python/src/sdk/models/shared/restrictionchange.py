"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RestrictionChangeFeatureEnum(str, Enum):
    r"""The feature which had a change in restriction policy."""
    FEATURE_UNSPECIFIED = 'FEATURE_UNSPECIFIED'
    SHARING_OUTSIDE_DOMAIN = 'SHARING_OUTSIDE_DOMAIN'
    DIRECT_SHARING = 'DIRECT_SHARING'
    ITEM_DUPLICATION = 'ITEM_DUPLICATION'
    DRIVE_FILE_STREAM = 'DRIVE_FILE_STREAM'
    FILE_ORGANIZER_CAN_SHARE_FOLDERS = 'FILE_ORGANIZER_CAN_SHARE_FOLDERS'

class RestrictionChangeNewRestrictionEnum(str, Enum):
    r"""The restriction in place after the change."""
    RESTRICTION_UNSPECIFIED = 'RESTRICTION_UNSPECIFIED'
    UNRESTRICTED = 'UNRESTRICTED'
    FULLY_RESTRICTED = 'FULLY_RESTRICTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestrictionChange:
    r"""Information about restriction policy changes to a feature."""
    
    feature: Optional[RestrictionChangeFeatureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature'), 'exclude': lambda f: f is None }})
    r"""The feature which had a change in restriction policy."""  
    new_restriction: Optional[RestrictionChangeNewRestrictionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newRestriction'), 'exclude': lambda f: f is None }})
    r"""The restriction in place after the change."""  
    