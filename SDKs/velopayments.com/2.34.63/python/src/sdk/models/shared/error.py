"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errordata as shared_errordata
from ..shared import localisationdetails as shared_localisationdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ErrorLocationTypeEnum(str, Enum):
    r"""the location type in the request that was the cause of the error"""
    REQUEST_BODY = 'requestBody'
    QUERY_PARAM = 'queryParam'
    REQUEST_PARAM = 'requestParam'
    HEADER = 'header'
    PATH_PARAM = 'pathParam'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Error:
    
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})
    r"""Unique numeric code that can be used for switching client behavior or to drive translated or customised error messages"""  
    error_data: Optional[shared_errordata.ErrorData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorData'), 'exclude': lambda f: f is None }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""English language message indicating the nature of the error"""  
    localisation_details: Optional[shared_localisationdetails.LocalisationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localisationDetails'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""the property or object that caused the error"""  
    location_type: Optional[ErrorLocationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationType'), 'exclude': lambda f: f is None }})
    r"""the location type in the request that was the cause of the error"""  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasonCode'), 'exclude': lambda f: f is None }})
    r"""a camel-cased string that can be used by clients to localise client error messages (deprecated)"""  
    