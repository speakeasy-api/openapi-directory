"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddialogflowv2beta1messageannotation as shared_googleclouddialogflowv2beta1messageannotation
from ..shared import googleclouddialogflowv2beta1sentimentanalysisresult as shared_googleclouddialogflowv2beta1sentimentanalysisresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDialogflowV2beta1MessageParticipantRoleEnum(str, Enum):
    r"""Output only. The role of the participant."""
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    HUMAN_AGENT = 'HUMAN_AGENT'
    AUTOMATED_AGENT = 'AUTOMATED_AGENT'
    END_USER = 'END_USER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowV2beta1Message:
    r"""Represents a message posted into a conversation."""
    
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""Required. The message content."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the message was created in Contact Center AI."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \\"en-US\\"."""  
    message_annotation: Optional[shared_googleclouddialogflowv2beta1messageannotation.GoogleCloudDialogflowV2beta1MessageAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageAnnotation'), 'exclude': lambda f: f is None }})
    r"""Represents the result of annotation for the message."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`."""  
    participant: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant'), 'exclude': lambda f: f is None }})
    r"""Output only. The participant that sends this message."""  
    participant_role: Optional[GoogleCloudDialogflowV2beta1MessageParticipantRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participantRole'), 'exclude': lambda f: f is None }})
    r"""Output only. The role of the participant."""  
    send_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The time when the message was sent."""  
    sentiment_analysis: Optional[shared_googleclouddialogflowv2beta1sentimentanalysisresult.GoogleCloudDialogflowV2beta1SentimentAnalysisResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentAnalysis'), 'exclude': lambda f: f is None }})
    r"""The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowV2beta1MessageInput:
    r"""Represents a message posted into a conversation."""
    
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""Required. The message content."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \\"en-US\\"."""  
    message_annotation: Optional[shared_googleclouddialogflowv2beta1messageannotation.GoogleCloudDialogflowV2beta1MessageAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageAnnotation'), 'exclude': lambda f: f is None }})
    r"""Represents the result of annotation for the message."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`."""  
    send_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The time when the message was sent."""  
    sentiment_analysis: Optional[shared_googleclouddialogflowv2beta1sentimentanalysisresult.GoogleCloudDialogflowV2beta1SentimentAnalysisResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentAnalysis'), 'exclude': lambda f: f is None }})
    r"""The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config"""  
    