"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateNetworkSwitchQosRuleRequestBodyProtocolEnum(str, Enum):
    r"""The protocol of the incoming packet. Can be one of \\"ANY\\", \\"TCP\\" or \\"UDP\\". Default value is \\"ANY\\" """
    ANY = 'ANY'
    TCP = 'TCP'
    UDP = 'UDP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchQosRuleRequestBody:
    
    vlan: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan') }})
    r"""The VLAN of the incoming packet. A null value will match any VLAN."""  
    dscp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dscp'), 'exclude': lambda f: f is None }})
    r"""DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0"""  
    dst_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPort'), 'exclude': lambda f: f is None }})
    r"""The destination port of the incoming packet. Applicable only if protocol is TCP or UDP."""  
    dst_port_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPortRange'), 'exclude': lambda f: f is None }})
    r"""The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80"""  
    protocol: Optional[CreateNetworkSwitchQosRuleRequestBodyProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""The protocol of the incoming packet. Can be one of \\"ANY\\", \\"TCP\\" or \\"UDP\\". Default value is \\"ANY\\" """  
    src_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""The source port of the incoming packet. Applicable only if protocol is TCP or UDP."""  
    src_port_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPortRange'), 'exclude': lambda f: f is None }})
    r"""The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80"""  
    

@dataclasses.dataclass
class CreateNetworkSwitchQosRuleRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkSwitchQosRuleRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkSwitchQosRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_switch_qos_rule_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    