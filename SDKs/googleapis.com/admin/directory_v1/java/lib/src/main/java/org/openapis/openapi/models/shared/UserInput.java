/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserInput - The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).
 */
public class UserInput {
    /**
     * The list of the user's addresses. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public Object addresses;
    public UserInput withAddresses(Object addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * Indicates if user is archived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;
    public UserInput withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePasswordAtNextLogin")
    public Boolean changePasswordAtNextLogin;
    public UserInput withChangePasswordAtNextLogin(Boolean changePasswordAtNextLogin) {
        this.changePasswordAtNextLogin = changePasswordAtNextLogin;
        return this;
    }
    
    /**
     * Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customSchemas")
    public java.util.Map<String, java.util.Map<String, Object>> customSchemas;
    public UserInput withCustomSchemas(java.util.Map<String, java.util.Map<String, Object>> customSchemas) {
        this.customSchemas = customSchemas;
        return this;
    }
    
    /**
     * The list of the user's email addresses. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    public Object emails;
    public UserInput withEmails(Object emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalIds")
    public Object externalIds;
    public UserInput withExternalIds(Object externalIds) {
        this.externalIds = externalIds;
        return this;
    }
    
    /**
     * The user's gender. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    public Object gender;
    public UserInput withGender(Object gender) {
        this.gender = gender;
        return this;
    }
    
    /**
     * Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hashFunction")
    public String hashFunction;
    public UserInput withHashFunction(String hashFunction) {
        this.hashFunction = hashFunction;
        return this;
    }
    
    /**
     * The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public UserInput withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ims")
    public Object ims;
    public UserInput withIms(Object ims) {
        this.ims = ims;
        return this;
    }
    
    /**
     * Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeInGlobalAddressList")
    public Boolean includeInGlobalAddressList;
    public UserInput withIncludeInGlobalAddressList(Boolean includeInGlobalAddressList) {
        this.includeInGlobalAddressList = includeInGlobalAddressList;
        return this;
    }
    
    /**
     * If `true`, the user's IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipWhitelisted")
    public Boolean ipWhitelisted;
    public UserInput withIpWhitelisted(Boolean ipWhitelisted) {
        this.ipWhitelisted = ipWhitelisted;
        return this;
    }
    
    /**
     * The list of the user's keywords. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    public Object keywords;
    public UserInput withKeywords(Object keywords) {
        this.keywords = keywords;
        return this;
    }
    
    /**
     * The user's languages. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    public Object languages;
    public UserInput withLanguages(Object languages) {
        this.languages = languages;
        return this;
    }
    
    /**
     * The user's locations. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public Object locations;
    public UserInput withLocations(Object locations) {
        this.locations = locations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public UserName name;
    public UserInput withName(UserName name) {
        this.name = name;
        return this;
    }
    
    /**
     * Notes for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public Object notes;
    public UserInput withNotes(Object notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orgUnitPath")
    public String orgUnitPath;
    public UserInput withOrgUnitPath(String orgUnitPath) {
        this.orgUnitPath = orgUnitPath;
        return this;
    }
    
    /**
     * The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizations")
    public Object organizations;
    public UserInput withOrganizations(Object organizations) {
        this.organizations = organizations;
        return this;
    }
    
    /**
     * User's password
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public UserInput withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The list of the user's phone numbers. The maximum allowed data size for this field is 1KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phones")
    public Object phones;
    public UserInput withPhones(Object phones) {
        this.phones = phones;
        return this;
    }
    
    /**
     * The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posixAccounts")
    public Object posixAccounts;
    public UserInput withPosixAccounts(Object posixAccounts) {
        this.posixAccounts = posixAccounts;
        return this;
    }
    
    /**
     * The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryEmail")
    public String primaryEmail;
    public UserInput withPrimaryEmail(String primaryEmail) {
        this.primaryEmail = primaryEmail;
        return this;
    }
    
    /**
     * Recovery email of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryEmail")
    public String recoveryEmail;
    public UserInput withRecoveryEmail(String recoveryEmail) {
        this.recoveryEmail = recoveryEmail;
        return this;
    }
    
    /**
     * Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryPhone")
    public String recoveryPhone;
    public UserInput withRecoveryPhone(String recoveryPhone) {
        this.recoveryPhone = recoveryPhone;
        return this;
    }
    
    /**
     * The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relations")
    public Object relations;
    public UserInput withRelations(Object relations) {
        this.relations = relations;
        return this;
    }
    
    /**
     * A list of SSH public keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sshPublicKeys")
    public Object sshPublicKeys;
    public UserInput withSshPublicKeys(Object sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }
    
    /**
     * Indicates if user is suspended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    public Boolean suspended;
    public UserInput withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }
    
    /**
     * The user's websites. The maximum allowed data size for this field is 2KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    public Object websites;
    public UserInput withWebsites(Object websites) {
        this.websites = websites;
        return this;
    }
    
}
