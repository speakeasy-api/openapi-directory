// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesGetLatestByPublicDistributionGroupRequest struct {
	// The secret of the target application
	AppSecret string `pathParam:"style=simple,explode=false,name=app_secret"`
	// the id for destination
	DistributionGroupID string `pathParam:"style=simple,explode=false,name=distribution_group_id"`
	// The check if the request is from Install page
	IsInstallPage *bool `queryParam:"style=form,explode=true,name=is_install_page"`
}

type ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumBadRequest          ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumConflict            ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumNotAcceptable       ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumNotFound            ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumInternalServerError ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumUnauthorized        ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnumTooManyRequests     ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON - Error Codes:
// - `not_found` - Distribution group or the app doesn't exist
// - `no_releases_for_app` - App has no releases.
type ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON struct {
	Code    ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                               `json:"message"`
}

type ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumBadRequest          ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumConflict            ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumNotAcceptable       ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumNotFound            ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumInternalServerError ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumUnauthorized        ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnumTooManyRequests     ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON - Error Codes:
// - `forbidden` - Unauthorized to access private distribution group
type ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON struct {
	Code    ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum `json:"code"`
	Message string                                                               `json:"message"`
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild - Contains metadata about the build that produced the release being uploaded
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild struct {
	// The branch name of the build producing the release
	BranchName *string `json:"branch_name,omitempty"`
	// The commit hash of the build producing the release
	CommitHash *string `json:"commit_hash,omitempty"`
	// The commit message of the build producing the release
	CommitMessage *string `json:"commit_message,omitempty"`
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum - OBSOLETE. Will be removed in next version. The destination type.<br>
// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
// <b>tester</b>: The release distributed testers details will be returned.<br>
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnumGroup  ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum = "group"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnumStore  ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum = "store"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnumTester ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum = "tester"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum - Destination can be either store or group.
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnumGroup  ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum = "group"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnumStore  ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum = "store"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnumTester ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum = "tester"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnumIntune     ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum = "intune"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnumGoogleplay ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum = "googleplay"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnumApple      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum = "apple"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnumNone       ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum = "none"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations - A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations struct {
	// Destination can be either store or group.
	DestinationType *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum `json:"destination_type,omitempty"`
	// Display name for the group or tester
	DisplayName *string `json:"display_name,omitempty"`
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum `json:"type,omitempty"`
}

type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups struct {
	// ID identifying a unique distribution group.
	ID string `json:"id"`
	// A name identifying a unique distribution group.
	Name *string `json:"name,omitempty"`
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnumIntune     ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum = "intune"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnumGoogleplay ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnumApple      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum = "apple"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnumNone       ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum = "none"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum: %s", s)
	}
}

type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum - The release's origin
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnumHockeyapp ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum = "hockeyapp"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnumAppcenter ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum = "appcenter"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hockeyapp":
		fallthrough
	case "appcenter":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum - The type of the provisioning profile for the requested app version.
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum string

const (
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnumAdhoc      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum = "adhoc"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnumEnterprise ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum = "enterprise"
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnumOther      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum = "other"
)

func (e *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "adhoc":
		fallthrough
	case "enterprise":
		fallthrough
	case "other":
		*e = ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON - Details of an uploaded release
type ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON struct {
	// The release's minimum required Android API level.
	AndroidMinAPILevel *string `json:"android_min_api_level,omitempty"`
	// The app's display name.
	AppDisplayName string `json:"app_display_name"`
	// A URL to the app's icon.
	AppIconURL string `json:"app_icon_url"`
	// The app's name (extracted from the uploaded release).
	AppName string `json:"app_name"`
	// The app's OS.
	AppOs *string `json:"app_os,omitempty"`
	// Contains metadata about the build that produced the release being uploaded
	Build *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild `json:"build,omitempty"`
	// The identifier of the apps bundle.
	BundleIdentifier *string `json:"bundle_identifier,omitempty"`
	// In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.
	CanResign *bool `json:"can_resign,omitempty"`
	// OBSOLETE. Will be removed in next version. The destination type.<br>
	// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
	// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
	// <b>tester</b>: The release distributed testers details will be returned.<br>
	//
	DestinationType *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum `json:"destination_type,omitempty"`
	// A list of distribution groups or stores.
	Destinations []ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations `json:"destinations,omitempty"`
	// The release's device family.
	DeviceFamily *string `json:"device_family,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
	DistributionGroups []ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups `json:"distribution_groups,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
	DistributionStores []ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// The URL that hosts the binary for this release.
	DownloadURL *string `json:"download_url,omitempty"`
	// This value determines the whether a release currently is enabled or disabled.
	Enabled bool `json:"enabled"`
	// MD5 checksum of the release binary.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// ID identifying this unique release.
	ID int64 `json:"id"`
	// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
	InstallURL *string `json:"install_url,omitempty"`
	// This value determines if a release is external or not.
	IsExternalBuild *bool `json:"is_external_build,omitempty"`
	// A flag that determines whether the release's provisioning profile is still extracted or not.
	IsProvisioningProfileSyncing *bool `json:"is_provisioning_profile_syncing,omitempty"`
	// In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.
	IsUdidProvisioned *bool `json:"is_udid_provisioned,omitempty"`
	// The release's minimum required operating system.
	MinOs *string `json:"min_os,omitempty"`
	// The release's origin
	Origin *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// Hashes for the packages.
	PackageHashes []string `json:"package_hashes,omitempty"`
	// expiration date of provisioning profile in UTC format.
	ProvisioningProfileExpiryDate *string `json:"provisioning_profile_expiry_date,omitempty"`
	// The release's provisioning profile name.
	ProvisioningProfileName *string `json:"provisioning_profile_name,omitempty"`
	// The type of the provisioning profile for the requested app version.
	ProvisioningProfileType *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum `json:"provisioning_profile_type,omitempty"`
	// The release's release notes.
	ReleaseNotes *string `json:"release_notes,omitempty"`
	// The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
	SecondaryDownloadURL *string `json:"secondary_download_url,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion string `json:"short_version"`
	// The release's size in bytes.
	Size *int64 `json:"size,omitempty"`
	// Status of the release.
	Status *string `json:"status,omitempty"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt string `json:"uploaded_at"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version string `json:"version"`
}

type ReleasesGetLatestByPublicDistributionGroupResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The full release details of the latest release that was distributed from the given public group.
	ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONObject *ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON
	// Error Codes:
	// - `forbidden` - Unauthorized to access private distribution group
	//
	ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONObject *ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON
	// Error Codes:
	// - `not_found` - Distribution group or the app doesn't exist
	// - `no_releases_for_app` - App has no releases.
	//
	ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONObject *ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON
}
