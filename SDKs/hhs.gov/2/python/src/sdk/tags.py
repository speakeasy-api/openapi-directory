"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tags:
    r"""Information about tags"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_resources_tags_format_(self, request: operations.GetResourcesTagsFormatRequest) -> operations.GetResourcesTagsFormatResponse:
        r"""Get Tags
        List of Tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsFormatRequest, base_url, '/resources/tags.{format}', request)
        
        query_params = utils.get_query_params(operations.GetResourcesTagsFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagMarshallerWrapped]])
                res.tag_marshaller_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_tag_languages_format_(self, request: operations.GetResourcesTagsTagLanguagesFormatRequest) -> operations.GetResourcesTagsTagLanguagesFormatResponse:
        r"""Get TagLanguages
        List of Tag Languages
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsTagLanguagesFormatRequest, base_url, '/resources/tags/tagLanguages.{format}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsTagLanguagesFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagLanguageMarshallerWrapped]])
                res.tag_language_marshaller_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_tag_types_format_(self, request: operations.GetResourcesTagsTagTypesFormatRequest) -> operations.GetResourcesTagsTagTypesFormatResponse:
        r"""Get MediaItems for Tag
        List of Types
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsTagTypesFormatRequest, base_url, '/resources/tags/tagTypes.{format}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsTagTypesFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagTypeMarshallerWrapped]])
                res.tag_type_marshaller_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_id_format_(self, request: operations.GetResourcesTagsIDFormatRequest) -> operations.GetResourcesTagsIDFormatResponse:
        r"""Get Tag by ID
        Information about a specific tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsIDFormatRequest, base_url, '/resources/tags/{id}.{format}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsIDFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagMarshallerWrapped]])
                res.tag_marshaller_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_id_media_format_(self, request: operations.GetResourcesTagsIDMediaFormatRequest) -> operations.GetResourcesTagsIDMediaFormatResponse:
        r"""Get MediaItems for Tag
        MediaItem
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsIDMediaFormatRequest, base_url, '/resources/tags/{id}/media.{format}', request)
        
        query_params = utils.get_query_params(operations.GetResourcesTagsIDMediaFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsIDMediaFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MediaItemWrapped]])
                res.media_item_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_id_related_format_(self, request: operations.GetResourcesTagsIDRelatedFormatRequest) -> operations.GetResourcesTagsIDRelatedFormatResponse:
        r"""Get related Tags by ID
        Information about related tags to a specific tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsIDRelatedFormatRequest, base_url, '/resources/tags/{id}/related.{format}', request)
        
        query_params = utils.get_query_params(operations.GetResourcesTagsIDRelatedFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsIDRelatedFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagMarshallerWrapped]])
                res.tag_marshaller_wrappeds = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_tags_id_syndicate_format_(self, request: operations.GetResourcesTagsIDSyndicateFormatRequest) -> operations.GetResourcesTagsIDSyndicateFormatResponse:
        r"""Get MediaItems for Tag
        MediaItem
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesTagsIDSyndicateFormatRequest, base_url, '/resources/tags/{id}/syndicate.{format}', request)
        
        query_params = utils.get_query_params(operations.GetResourcesTagsIDSyndicateFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesTagsIDSyndicateFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_resources_tags_id_syndicate_format_200_application_json_string = http_res.content
        elif http_res.status_code in [400, 500]:
            pass

        return res

    