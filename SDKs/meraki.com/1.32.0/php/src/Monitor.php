<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Monitor 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * 
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse
     */
	public function generateDeviceCameraSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/generateSnapshot', \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateDeviceCameraSnapshot202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the identity of the current user.
     * 
     * Returns the identity of the current user.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdministeredIdentitiesMeResponse
     */
	public function getAdministeredIdentitiesMe(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdministeredIdentitiesMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/administered/identities/me');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdministeredIdentitiesMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAdministeredIdentitiesMe200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAdministeredIdentitiesMe200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the DHCP subnet information for an appliance
     * 
     * Return the DHCP subnet information for an appliance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsResponse
     */
	public function getDeviceApplianceDhcpSubnets(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/dhcp/subnets', \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceDhcpSubnetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceApplianceDhcpSubnets200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the performance score for a single MX
     * 
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceResponse
     */
	public function getDeviceAppliancePerformance(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/performance', \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePerformanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceAppliancePerformance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return current delegated IPv6 prefixes on an appliance.
     * 
     * Return current delegated IPv6 prefixes on an appliance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedResponse
     */
	public function getDeviceAppliancePrefixesDelegated(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/prefixes/delegated', \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceAppliancePrefixesDelegated200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * 
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse
     */
	public function getDeviceAppliancePrefixesDelegatedVlanAssignments(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/prefixes/delegated/vlanAssignments', \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceAppliancePrefixesDelegatedVlanAssignments200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns live state from camera of analytics zones
     * 
     * Returns live state from camera of analytics zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse
     */
	public function getDeviceCameraAnalyticsLive(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/live', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsLive200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an overview of aggregate analytics data for a timespan
     * 
     * Returns an overview of aggregate analytics data for a timespan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse
     */
	public function getDeviceCameraAnalyticsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/overview', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsOverview200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns most recent record for analytics zones
     * 
     * Returns most recent record for analytics zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse
     */
	public function getDeviceCameraAnalyticsRecent(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/recent', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsRecent200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records for analytic zones
     * 
     * Return historical records for analytic zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse
     */
	public function getDeviceCameraAnalyticsZoneHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/zones/{zoneId}/history', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsZoneHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all configured analytic zones for this camera
     * 
     * Returns all configured analytic zones for this camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse
     */
	public function getDeviceCameraAnalyticsZones(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/zones', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsZones200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the clients of a device, up to a maximum of a month ago
     * 
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse
     */
	public function getDeviceClients(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/clients', \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceClients200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List LLDP and CDP information for a device
     * 
     * List LLDP and CDP information for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse
     */
	public function getDeviceLldpCdp(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/lldpCdp', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLldpCdp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * 
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse
     */
	public function getDeviceLossAndLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/lossAndLatencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLossAndLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the status for all the ports of a switch
     * 
     * Return the status for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
     */
	public function getDeviceSwitchPortsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the packet counters for all the ports of a switch
     * 
     * Return the packet counters for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
     */
	public function getDeviceSwitchPortsStatusesPackets(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses/packets', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatusesPackets200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for a given AP on this network
     * 
     * Aggregated connectivity info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse
     */
	public function getDeviceWirelessConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given AP on this network
     * 
     * Aggregated latency info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse
     */
	public function getDeviceWirelessLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SSID statuses of an access point
     * 
     * Return the SSID statuses of an access point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse
     */
	public function getDeviceWirelessStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/status', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the alert history for this network
     * 
     * Return the alert history for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryResponse
     */
	public function getNetworkAlertsHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/alerts/history', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAlertsHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security events for a client
     * 
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsResponse
     */
	public function getNetworkApplianceClientSecurityEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/clients/{clientId}/security/events', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceClientSecurityEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceClientSecurityEvents200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security events for a network
     * 
     * List the security events for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsResponse
     */
	public function getNetworkApplianceSecurityEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/security/events', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSecurityEvents200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the sent and received bytes for each uplink of a network.
     * 
     * Get the sent and received bytes for each uplink of a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryResponse
     */
	public function getNetworkApplianceUplinksUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/uplinks/usageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceUplinksUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceUplinksUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a Bluetooth client
     * 
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientResponse
     */
	public function getNetworkBluetoothClient(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/bluetoothClients/{bluetoothClientId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkBluetoothClient200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the Bluetooth clients seen by APs in this network
     * 
     * List the Bluetooth clients seen by APs in this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsResponse
     */
	public function getNetworkBluetoothClients(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/bluetoothClients', \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkBluetoothClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkBluetoothClients200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client associated with the given identifier
     * 
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientResponse
     */
	public function getNetworkClient(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClient200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkClient200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's network traffic data over time
     * 
     * Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryResponse
     */
	public function getNetworkClientTrafficHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/trafficHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientTrafficHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientTrafficHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's daily usage history
     * 
     * Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryResponse
     */
	public function getNetworkClientUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/usageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the clients that have used this network in the timespan
     * 
     * List the clients that have used this network in the timespan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsResponse
     */
	public function getNetworkClients(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClients200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkClients200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the application usage data for clients
     * 
     * Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageResponse
     */
	public function getNetworkClientsApplicationUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/applicationUsage', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsApplicationUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsApplicationUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * 
     * Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryResponse
     */
	public function getNetworkClientsBandwidthUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/bandwidthUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsBandwidthUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsBandwidthUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return overview statistics for network clients
     * 
     * Return overview statistics for network clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewResponse
     */
	public function getNetworkClientsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/overview', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the usage histories for clients
     * 
     * Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesResponse
     */
	public function getNetworkClientsUsageHistories(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/usageHistories', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsUsageHistoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsUsageHistories200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the events for the network
     * 
     * List the events for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsResponse
     */
	public function getNetworkEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/events', \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkEvents200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkEvents200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the event type to human-readable description
     * 
     * List the event type to human-readable description
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesResponse
     */
	public function getNetworkEventsEventTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/events/eventTypes', \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkEventsEventTypes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkEventsEventTypes200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get application health by time
     * 
     * Get application health by time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeResponse
     */
	public function getNetworkInsightApplicationHealthByTime(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/insight/applications/{applicationId}/healthByTime', \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkInsightApplicationHealthByTime200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkInsightApplicationHealthByTime200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the channel utilization over each radio for all APs in a network.
     * 
     * Get the channel utilization over each radio for all APs in a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationResponse
     */
	public function getNetworkNetworkHealthChannelUtilization(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/networkHealth/channelUtilization', \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetworkHealthChannelUtilizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkNetworkHealthChannelUtilization200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of currently alerting sensors by metric
     * 
     * Return an overview of currently alerting sensors by metric
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricResponse
     */
	public function getNetworkSensorAlertsCurrentOverviewByMetric(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/current/overview/byMetric', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetricResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of alert occurrences over a timespan, by metric
     * 
     * Return an overview of alert occurrences over a timespan, by metric
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricResponse
     */
	public function getNetworkSensorAlertsOverviewByMetric(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/overview/byMetric', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetricResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsOverviewByMetric200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsOverviewByMetric200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's daily cellular data usage history
     * 
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
     */
	public function getNetworkSmDeviceCellularUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCellularUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
     */
	public function getNetworkSmDeviceConnectivity(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/connectivity', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceConnectivity200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivity200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
     */
	public function getNetworkSmDeviceDesktopLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/desktopLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDesktopLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of commands sent to Systems Manager devices
     * 
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
     */
	public function getNetworkSmDeviceDeviceCommandLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceCommandLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
     */
	public function getNetworkSmDevicePerformanceHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/performanceHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevicePerformanceHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the splash login attempts for a network
     * 
     * List the splash login attempts for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsResponse
     */
	public function getNetworkSplashLoginAttempts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/splashLoginAttempts', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSplashLoginAttemptsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSplashLoginAttempts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * 
     * List the LLDP and CDP information for all discovered devices and connections in a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerResponse
     */
	public function getNetworkTopologyLinkLayer(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/topology/linkLayer', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTopologyLinkLayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTopologyLinkLayer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the traffic analysis data for this network
     * 
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse
     */
	public function getNetworkTraffic(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/traffic', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTraffic200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Air Marshal scan results from a network
     * 
     * List Air Marshal scan results from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse
     */
	public function getNetworkWirelessAirMarshal(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/airMarshal', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessAirMarshal200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return AP channel utilization over time for a device or network client
     * 
     * Return AP channel utilization over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse
     */
	public function getNetworkWirelessChannelUtilizationHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/channelUtilizationHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessChannelUtilizationHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for a given client on this network
     * 
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse
     */
	public function getNetworkWirelessClientConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * 
     * List the wireless connectivity events for a client within a network in the timespan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse
     */
	public function getNetworkWirelessClientConnectivityEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientConnectivityEvents200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return wireless client counts over time for a network, device, or network client
     * 
     * Return wireless client counts over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse
     */
	public function getNetworkWirelessClientCountHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clientCountHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientCountHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the latency history for a client
     * 
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse
     */
	public function getNetworkWirelessClientLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/latencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given client on this network
     * 
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse
     */
	public function getNetworkWirelessClientLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse
     */
	public function getNetworkWirelessClientsConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientsConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by clients
     * 
     * Aggregated latency info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse
     */
	public function getNetworkWirelessClientsLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientsLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network
     * 
     * Aggregated connectivity info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse
     */
	public function getNetworkWirelessConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return PHY data rates over time for a network, device, or network client
     * 
     * Return PHY data rates over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse
     */
	public function getNetworkWirelessDataRateHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/dataRateHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDataRateHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by node
     * 
     * Aggregated connectivity info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
     */
	public function getNetworkWirelessDevicesConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStats200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by node
     * 
     * Aggregated latency info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
     */
	public function getNetworkWirelessDevicesLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all failed client connection events on this network in a given time range
     * 
     * List of all failed client connection events on this network in a given time range
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse
     */
	public function getNetworkWirelessFailedConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/failedConnections', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessFailedConnections200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnections200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return average wireless latency over time for a network, device, or network client
     * 
     * Return average wireless latency over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse
     */
	public function getNetworkWirelessLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/latencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network
     * 
     * Aggregated latency info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse
     */
	public function getNetworkWirelessLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List wireless mesh statuses for repeaters
     * 
     * List wireless mesh statuses for repeaters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse
     */
	public function getNetworkWirelessMeshStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/meshStatuses', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessMeshStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * 
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse
     */
	public function getNetworkWirelessSignalQualityHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/signalQualityHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSignalQualityHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return AP usage over time for a device or network client
     * 
     * Return AP usage over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse
     */
	public function getNetworkWirelessUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/usageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
     */
	public function getOrganizationAdaptivePolicyOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the API requests made by an organization
     * 
     * List the API requests made by an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse
     */
	public function getOrganizationApiRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequests200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequests200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an aggregated overview of API requests data
     * 
     * Return an aggregated overview of API requests data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse
     */
	public function getOrganizationApiRequestsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequestsOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tracks organizations' API requests by response code across a given time period
     * 
     * Tracks organizations' API requests by response code across a given time period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse
     */
	public function getOrganizationApiRequestsOverviewResponseCodesByInterval(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequestsOverviewResponseCodesByInterval200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByInterval200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security events for an organization
     * 
     * List the security events for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsResponse
     */
	public function getOrganizationApplianceSecurityEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/security/events', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceSecurityEvents200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * 
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse
     */
	public function getOrganizationApplianceUplinkStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/uplink/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceUplinkStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show VPN history stat for networks in an organization
     * 
     * Show VPN history stat for networks in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsResponse
     */
	public function getOrganizationApplianceVpnStats(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/stats', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceVpnStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show VPN status for networks in an organization
     * 
     * Show VPN status for networks in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse
     */
	public function getOrganizationApplianceVpnStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceVpnStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MG cellular gateway in the organization
     * 
     * List the uplink status of every Meraki MG cellular gateway in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse
     */
	public function getOrganizationCellularGatewayUplinkStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/cellularGateway/uplink/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCellularGatewayUplinkStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * 
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse
     */
	public function getOrganizationClientsBandwidthUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/bandwidthUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsBandwidthUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * 
     * Return summary information around client data usage (in mb) across the given organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse
     */
	public function getOrganizationClientsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View the Change Log for your organization
     * 
     * View the Change Log for your organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse
     */
	public function getOrganizationConfigurationChanges(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configurationChanges', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigurationChanges200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the availability information for devices in an organization
     * 
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
     */
	public function getOrganizationDevicesAvailabilities(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/availabilities', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesAvailabilities200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilities200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the power status information for devices in an organization
     * 
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
     */
	public function getOrganizationDevicesPowerModulesStatusesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the status of every Meraki device in the organization
     * 
     * List the status of every Meraki device in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
     */
	public function getOrganizationDevicesStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatuses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of current device statuses
     * 
     * Return an overview of current device statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
     */
	public function getOrganizationDevicesStatusesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatusesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the current uplink addresses for devices in an organization.
     * 
     * List the current uplink addresses for devices in an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
     */
	public function getOrganizationDevicesUplinksAddressesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
     */
	public function getOrganizationDevicesUplinksLossAndLatency(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinksLossAndLatency', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksLossAndLatency200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatency200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of the license state for an organization
     * 
     * Return an overview of the license state for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse
     */
	public function getOrganizationLicensesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicensesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * 
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse
     */
	public function getOrganizationOpenapiSpec(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/openapiSpec', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationOpenapiSpec200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * 
     * Return all reported readings from sensors in a given timespan, sorted by timestamp
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryResponse
     */
	public function getOrganizationSensorReadingsHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sensor/readings/history', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSensorReadingsHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * 
     * Return the latest available reading for each metric from each sensor, sorted by sensor serial
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestResponse
     */
	public function getOrganizationSensorReadingsLatest(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sensor/readings/latest', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSensorReadingsLatest200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSensorReadingsLatest200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the top 10 appliances sorted by utilization over given time range.
     * 
     * Return the top 10 appliances sorted by utilization over given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse
     */
	public function getOrganizationSummaryTopAppliancesByUtilization(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/appliances/byUtilization', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopAppliancesByUtilization200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilization200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * 
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse
     */
	public function getOrganizationSummaryTopClientsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/clients/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopClientsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * 
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse
     */
	public function getOrganizationSummaryTopClientsManufacturersByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopClientsManufacturersByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 devices sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 device models sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesModelsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/models/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 ssids by data usage over given time range
     * 
     * Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse
     */
	public function getOrganizationSummaryTopSsidsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/ssids/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopSsidsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 switches by energy usage over given time range
     * 
     * Return metrics for organization's top 10 switches by energy usage over given time range. Default unit is joules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse
     */
	public function getOrganizationSummaryTopSwitchesByEnergyUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/switches/byEnergyUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopSwitchesByEnergyUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
     */
	public function getOrganizationUplinksStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/uplinks/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationUplinksStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
     */
	public function getOrganizationWebhooksAlertTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/alertTypes', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksAlertTypes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the log of webhook POSTs sent
     * 
     * Return the log of webhook POSTs sent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
     */
	public function getOrganizationWebhooksLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/logs', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
}