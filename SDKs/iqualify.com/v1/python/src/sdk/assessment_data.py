"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AssessmentData:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_offerings_offering_id_analytics_activities_responses(self, request: operations.GetOfferingsOfferingIDAnalyticsActivitiesResponsesRequest) -> operations.GetOfferingsOfferingIDAnalyticsActivitiesResponsesResponse:
        r"""Find open response activity attempts
        Responds with all learner activity attempts for open response activities in an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsActivitiesResponsesRequest, base_url, '/offerings/{offeringId}/analytics/activities/responses', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsActivitiesResponsesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActivityAttemptOpenResponse]])
                res.activity_attempt_open_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_analytics_marks_assignments(self, request: operations.GetOfferingsOfferingIDAnalyticsMarksAssignmentsRequest) -> operations.GetOfferingsOfferingIDAnalyticsMarksAssignmentsResponse:
        r"""Find assessment marks
        Responds with all learner assessment marks in an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsMarksAssignmentsRequest, base_url, '/offerings/{offeringId}/analytics/marks/assignments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsMarksAssignmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssignmentMarkResponse]])
                res.assignment_mark_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_analytics_marks_quizzes(self, request: operations.GetOfferingsOfferingIDAnalyticsMarksQuizzesRequest) -> operations.GetOfferingsOfferingIDAnalyticsMarksQuizzesResponse:
        r"""Find quiz marks
        Responds with all learner quiz marks in an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsMarksQuizzesRequest, base_url, '/offerings/{offeringId}/analytics/marks/quizzes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsMarksQuizzesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.QuizMarkResponse]])
                res.quiz_mark_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_analytics_submissions_assignments(self, request: operations.GetOfferingsOfferingIDAnalyticsSubmissionsAssignmentsRequest) -> operations.GetOfferingsOfferingIDAnalyticsSubmissionsAssignmentsResponse:
        r"""Find submissions to assessments, including marks if any
        Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsSubmissionsAssignmentsRequest, base_url, '/offerings/{offeringId}/analytics/submissions/assignments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsSubmissionsAssignmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssignmentMarkResponse]])
                res.assignment_mark_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_analytics_submissions_open_response_assessment_id_(self, request: operations.GetOfferingsOfferingIDAnalyticsSubmissionsOpenResponseAssessmentIDRequest) -> operations.GetOfferingsOfferingIDAnalyticsSubmissionsOpenResponseAssessmentIDResponse:
        r"""Find submissions to a specified open response assessment, including marks if any
        Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsSubmissionsOpenResponseAssessmentIDRequest, base_url, '/offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsSubmissionsOpenResponseAssessmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SubmissionMarkResponse]])
                res.submission_mark_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_analytics_submissions_user_email_assignments_assessment_id_(self, request: operations.GetOfferingsOfferingIDAnalyticsSubmissionsUserEmailAssignmentsAssessmentIDRequest) -> operations.GetOfferingsOfferingIDAnalyticsSubmissionsUserEmailAssignmentsAssessmentIDResponse:
        r"""Find a learner's submission to a specified assessment, including marks if any
        Responds with the learner's assessment submission and any marks for the submission.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDAnalyticsSubmissionsUserEmailAssignmentsAssessmentIDRequest, base_url, '/offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDAnalyticsSubmissionsUserEmailAssignmentsAssessmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SubmissionMarkResponse]])
                res.submission_mark_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    