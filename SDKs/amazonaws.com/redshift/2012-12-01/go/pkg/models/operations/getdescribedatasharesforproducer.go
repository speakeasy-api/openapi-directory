// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeDataSharesForProducerActionEnum
type GETDescribeDataSharesForProducerActionEnum string

const (
	GETDescribeDataSharesForProducerActionEnumDescribeDataSharesForProducer GETDescribeDataSharesForProducerActionEnum = "DescribeDataSharesForProducer"
)

func (e GETDescribeDataSharesForProducerActionEnum) ToPointer() *GETDescribeDataSharesForProducerActionEnum {
	return &e
}

func (e *GETDescribeDataSharesForProducerActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeDataSharesForProducer":
		*e = GETDescribeDataSharesForProducerActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDataSharesForProducerActionEnum: %v", v)
	}
}

// GETDescribeDataSharesForProducerStatusEnum - An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
type GETDescribeDataSharesForProducerStatusEnum string

const (
	GETDescribeDataSharesForProducerStatusEnumActive               GETDescribeDataSharesForProducerStatusEnum = "ACTIVE"
	GETDescribeDataSharesForProducerStatusEnumAuthorized           GETDescribeDataSharesForProducerStatusEnum = "AUTHORIZED"
	GETDescribeDataSharesForProducerStatusEnumPendingAuthorization GETDescribeDataSharesForProducerStatusEnum = "PENDING_AUTHORIZATION"
	GETDescribeDataSharesForProducerStatusEnumDeauthorized         GETDescribeDataSharesForProducerStatusEnum = "DEAUTHORIZED"
	GETDescribeDataSharesForProducerStatusEnumRejected             GETDescribeDataSharesForProducerStatusEnum = "REJECTED"
)

func (e GETDescribeDataSharesForProducerStatusEnum) ToPointer() *GETDescribeDataSharesForProducerStatusEnum {
	return &e
}

func (e *GETDescribeDataSharesForProducerStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "AUTHORIZED":
		fallthrough
	case "PENDING_AUTHORIZATION":
		fallthrough
	case "DEAUTHORIZED":
		fallthrough
	case "REJECTED":
		*e = GETDescribeDataSharesForProducerStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDataSharesForProducerStatusEnum: %v", v)
	}
}

// GETDescribeDataSharesForProducerVersionEnum
type GETDescribeDataSharesForProducerVersionEnum string

const (
	GETDescribeDataSharesForProducerVersionEnumTwoThousandAndTwelve1201 GETDescribeDataSharesForProducerVersionEnum = "2012-12-01"
)

func (e GETDescribeDataSharesForProducerVersionEnum) ToPointer() *GETDescribeDataSharesForProducerVersionEnum {
	return &e
}

func (e *GETDescribeDataSharesForProducerVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2012-12-01":
		*e = GETDescribeDataSharesForProducerVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDataSharesForProducerVersionEnum: %v", v)
	}
}

type GETDescribeDataSharesForProducerRequest struct {
	Action GETDescribeDataSharesForProducerActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataSharesForProducer</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// The Amazon Resource Name (ARN) of the producer that returns in the list of datashares.
	ProducerArn *string `queryParam:"style=form,explode=true,name=ProducerArn"`
	// An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
	Status            *GETDescribeDataSharesForProducerStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	Version           GETDescribeDataSharesForProducerVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeDataSharesForProducerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
