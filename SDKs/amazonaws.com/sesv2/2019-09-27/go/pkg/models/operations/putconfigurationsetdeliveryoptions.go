// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum - Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
type PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum string

const (
	PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnumRequire  PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum = "REQUIRE"
	PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnumOptional PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum = "OPTIONAL"
)

func (e *PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REQUIRE":
		fallthrough
	case "OPTIONAL":
		*e = PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum: %s", s)
	}
}

type PutConfigurationSetDeliveryOptionsRequestBody struct {
	// The name of the dedicated IP pool to associate with the configuration set.
	SendingPoolName *string `json:"SendingPoolName,omitempty"`
	// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
	TLSPolicy *PutConfigurationSetDeliveryOptionsRequestBodyTLSPolicyEnum `json:"TlsPolicy,omitempty"`
}

type PutConfigurationSetDeliveryOptionsRequest struct {
	// The name of the configuration set to associate with a dedicated IP pool.
	ConfigurationSetName string                                        `pathParam:"style=simple,explode=false,name=ConfigurationSetName"`
	RequestBody          PutConfigurationSetDeliveryOptionsRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type PutConfigurationSetDeliveryOptionsResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// NotFoundException
	NotFoundException interface{}
	// Success
	PutConfigurationSetDeliveryOptionsResponse map[string]interface{}
	StatusCode                                 int
	RawResponse                                *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
