/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetNetworkWirelessSsidSplashSettings200ApplicationJSON - Successful operation
 */
public class GetNetworkWirelessSsidSplashSettings200ApplicationJSON {
    /**
     * Whether or not to allow simultaneous logins from different devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSimultaneousLogins")
    public Boolean allowSimultaneousLogins;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withAllowSimultaneousLogins(Boolean allowSimultaneousLogins) {
        this.allowSimultaneousLogins = allowSimultaneousLogins;
        return this;
    }
    
    /**
     * Details associated with billing splash
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling billing;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withBilling(GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockAllTrafficBeforeSignOn")
    public Boolean blockAllTrafficBeforeSignOn;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withBlockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
        this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
        return this;
    }
    
    /**
     * How login attempts should be handled when the controller is unreachable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controllerDisconnectionBehavior")
    public String controllerDisconnectionBehavior;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withControllerDisconnectionBehavior(String controllerDisconnectionBehavior) {
        this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
        return this;
    }
    
    /**
     * Details associated with guest sponsored splash
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestSponsorship")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship guestSponsorship;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withGuestSponsorship(GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship guestSponsorship) {
        this.guestSponsorship = guestSponsorship;
        return this;
    }
    
    /**
     * The custom redirect URL where the users will go after the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    public String redirectUrl;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * Self-registration for splash with Meraki authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfRegistration")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration selfRegistration;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSelfRegistration(GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration selfRegistration) {
        this.selfRegistration = selfRegistration;
        return this;
    }
    
    /**
     * Systems Manager sentry enrollment splash settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sentryEnrollment")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment sentryEnrollment;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSentryEnrollment(GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment sentryEnrollment) {
        this.sentryEnrollment = sentryEnrollment;
        return this;
    }
    
    /**
     * The image used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashImage")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage splashImage;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashImage(GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage splashImage) {
        this.splashImage = splashImage;
        return this;
    }
    
    /**
     * The logo used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashLogo")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo splashLogo;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashLogo(GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo splashLogo) {
        this.splashLogo = splashLogo;
        return this;
    }
    
    /**
     * The type of splash page for this SSID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashPage")
    public String splashPage;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashPage(String splashPage) {
        this.splashPage = splashPage;
        return this;
    }
    
    /**
     * The prepaid front image used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashPrepaidFront")
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront splashPrepaidFront;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashPrepaidFront(GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront splashPrepaidFront) {
        this.splashPrepaidFront = splashPrepaidFront;
        return this;
    }
    
    /**
     * Splash timeout in minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashTimeout")
    public Long splashTimeout;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashTimeout(Long splashTimeout) {
        this.splashTimeout = splashTimeout;
        return this;
    }
    
    /**
     * The custom splash URL of the click-through splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashUrl")
    public String splashUrl;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSplashUrl(String splashUrl) {
        this.splashUrl = splashUrl;
        return this;
    }
    
    /**
     * SSID number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssidNumber")
    public Long ssidNumber;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withSsidNumber(Long ssidNumber) {
        this.ssidNumber = ssidNumber;
        return this;
    }
    
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useRedirectUrl")
    public Boolean useRedirectUrl;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withUseRedirectUrl(Boolean useRedirectUrl) {
        this.useRedirectUrl = useRedirectUrl;
        return this;
    }
    
    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useSplashUrl")
    public Boolean useSplashUrl;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withUseSplashUrl(Boolean useSplashUrl) {
        this.useSplashUrl = useSplashUrl;
        return this;
    }
    
    /**
     * The welcome message for the users on the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcomeMessage")
    public String welcomeMessage;

    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON withWelcomeMessage(String welcomeMessage) {
        this.welcomeMessage = welcomeMessage;
        return this;
    }
    
    public GetNetworkWirelessSsidSplashSettings200ApplicationJSON(){}
}
