"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class LicenseEditorialContentSizeEnum(str, Enum):
    r"""Asset size to download"""
    SMALL = 'small'
    MEDIUM = 'medium'
    ORIGINAL = 'original'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LicenseEditorialContent:
    r"""Individual editorial content to license"""
    
    editorial_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editorial_id') }})
    r"""Editorial ID"""  
    license: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    r"""License agreement to use for licensing"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder"""  
    size: Optional[LicenseEditorialContentSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Asset size to download"""  
    