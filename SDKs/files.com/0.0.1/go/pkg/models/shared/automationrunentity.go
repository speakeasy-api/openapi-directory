// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AutomationRunEntityStatusEnum - The success status of the AutomationRun. One of `running`, `success`, `partial_failure`, or `failure`.
type AutomationRunEntityStatusEnum string

const (
	AutomationRunEntityStatusEnumRunning        AutomationRunEntityStatusEnum = "running"
	AutomationRunEntityStatusEnumSuccess        AutomationRunEntityStatusEnum = "success"
	AutomationRunEntityStatusEnumPartialFailure AutomationRunEntityStatusEnum = "partial_failure"
	AutomationRunEntityStatusEnumFailure        AutomationRunEntityStatusEnum = "failure"
	AutomationRunEntityStatusEnumSkipped        AutomationRunEntityStatusEnum = "skipped"
)

func (e *AutomationRunEntityStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "running":
		fallthrough
	case "success":
		fallthrough
	case "partial_failure":
		fallthrough
	case "failure":
		fallthrough
	case "skipped":
		*e = AutomationRunEntityStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationRunEntityStatusEnum: %s", s)
	}
}

// AutomationRunEntity - List Automation Runs
type AutomationRunEntity struct {
	// ID of the associated Automation.
	AutomationID *int `json:"automation_id,omitempty"`
	// Automation run completion/failure date/time.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Automation run start date/time.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ID.
	ID *int `json:"id,omitempty"`
	// The success status of the AutomationRun. One of `running`, `success`, `partial_failure`, or `failure`.
	Status *AutomationRunEntityStatusEnum `json:"status,omitempty"`
	// Link to status messages log file.
	StatusMessagesURL *string `json:"status_messages_url,omitempty"`
}
