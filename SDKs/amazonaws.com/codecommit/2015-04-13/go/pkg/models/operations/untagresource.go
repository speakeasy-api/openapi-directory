// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UntagResourceXAmzTargetEnum
type UntagResourceXAmzTargetEnum string

const (
	UntagResourceXAmzTargetEnumCodeCommit20150413UntagResource UntagResourceXAmzTargetEnum = "CodeCommit_20150413.UntagResource"
)

func (e *UntagResourceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.UntagResource":
		*e = UntagResourceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UntagResourceXAmzTargetEnum: %s", s)
	}
}

type UntagResourceRequest struct {
	UntagResourceInput shared.UntagResourceInput   `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         UntagResourceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UntagResourceResponse struct {
	ContentType string
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// InvalidResourceArnException
	InvalidResourceArnException interface{}
	// InvalidSystemTagUsageException
	InvalidSystemTagUsageException interface{}
	// InvalidTagKeysListException
	InvalidTagKeysListException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
	// ResourceArnRequiredException
	ResourceArnRequiredException interface{}
	// TagKeysListRequiredException
	TagKeysListRequiredException interface{}
	// TagPolicyException
	TagPolicyException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
