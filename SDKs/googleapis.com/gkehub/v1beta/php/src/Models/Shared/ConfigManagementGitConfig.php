<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ConfigManagementGitConfig - Git repo configuration for a single cluster.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ConfigManagementGitConfig
{
    /**
     * The GCP Service Account Email used for auth when secret_type is gcpServiceAccount.
     * 
     * @var ?string $gcpServiceAccountEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('gcpServiceAccountEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gcpServiceAccountEmail = null;
    
    /**
     * URL for the HTTPS proxy to be used when communicating with the Git repo.
     * 
     * @var ?string $httpsProxy
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpsProxy')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $httpsProxy = null;
    
    /**
     * The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
     * 
     * @var ?string $policyDir
     */
	#[\JMS\Serializer\Annotation\SerializedName('policyDir')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $policyDir = null;
    
    /**
     * Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
     * 
     * @var ?string $secretType
     */
	#[\JMS\Serializer\Annotation\SerializedName('secretType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $secretType = null;
    
    /**
     * The branch of the repository to sync from. Default: master.
     * 
     * @var ?string $syncBranch
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncBranch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncBranch = null;
    
    /**
     * The URL of the Git repository to use as the source of truth.
     * 
     * @var ?string $syncRepo
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncRepo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncRepo = null;
    
    /**
     * Git revision (tag or hash) to check out. Default HEAD.
     * 
     * @var ?string $syncRev
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncRev')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncRev = null;
    
    /**
     * Period in seconds between consecutive syncs. Default: 15.
     * 
     * @var ?string $syncWaitSecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncWaitSecs')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncWaitSecs = null;
    
	public function __construct()
	{
		$this->gcpServiceAccountEmail = null;
		$this->httpsProxy = null;
		$this->policyDir = null;
		$this->secretType = null;
		$this->syncBranch = null;
		$this->syncRepo = null;
		$this->syncRev = null;
		$this->syncWaitSecs = null;
	}
}
