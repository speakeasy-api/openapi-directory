"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createquantumtaskresponse as shared_createquantumtaskresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateQuantumTaskRequestBody:
    
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""The action associated with the task."""  
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""The client token associated with the request."""  
    device_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceArn') }})
    r"""The ARN of the device to run the task on."""  
    output_s3_bucket: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputS3Bucket') }})
    r"""The S3 bucket to store task result files in."""  
    output_s3_key_prefix: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputS3KeyPrefix') }})
    r"""The key prefix for the location in the S3 bucket to store task results in."""  
    shots: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shots') }})
    r"""The number of shots to use for the task."""  
    device_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceParameters'), 'exclude': lambda f: f is None }})
    r"""The parameters for the device to run the task on."""  
    job_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobToken'), 'exclude': lambda f: f is None }})
    r"""The token for an Amazon Braket job that associates it with the quantum task."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags to be added to the quantum task you're creating."""  
    

@dataclasses.dataclass
class CreateQuantumTaskRequest:
    
    request_body: CreateQuantumTaskRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateQuantumTaskResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    create_quantum_task_response: Optional[shared_createquantumtaskresponse.CreateQuantumTaskResponse] = dataclasses.field(default=None)
    r"""Success"""  
    device_offline_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeviceOfflineException"""  
    device_retired_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeviceRetiredException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    