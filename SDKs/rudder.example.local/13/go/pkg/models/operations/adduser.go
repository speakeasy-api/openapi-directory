// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AddUserRequest struct {
	Request shared.Users `request:"mediaType=application/json"`
}

// AddUser200ApplicationJSONActionEnum - The id of the action
type AddUser200ApplicationJSONActionEnum string

const (
	AddUser200ApplicationJSONActionEnumAddUser AddUser200ApplicationJSONActionEnum = "addUser"
)

func (e *AddUser200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addUser":
		*e = AddUser200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddUser200ApplicationJSONActionEnum: %s", s)
	}
}

type AddUser200ApplicationJSONDataAddedUser struct {
	// this password will be hashed for you if the `isPreHashed` is set on false
	Password *string `json:"password,omitempty"`
	// defined user's permissions
	Role     []string `json:"role,omitempty"`
	Username *string  `json:"username,omitempty"`
}

type AddUser200ApplicationJSONData struct {
	AddedUser AddUser200ApplicationJSONDataAddedUser `json:"addedUser"`
}

// AddUser200ApplicationJSONResultEnum - Result of the request
type AddUser200ApplicationJSONResultEnum string

const (
	AddUser200ApplicationJSONResultEnumSuccess AddUser200ApplicationJSONResultEnum = "success"
	AddUser200ApplicationJSONResultEnumError   AddUser200ApplicationJSONResultEnum = "error"
)

func (e *AddUser200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = AddUser200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddUser200ApplicationJSONResultEnum: %s", s)
	}
}

// AddUser200ApplicationJSON - Updated
type AddUser200ApplicationJSON struct {
	// The id of the action
	Action AddUser200ApplicationJSONActionEnum `json:"action"`
	Data   AddUser200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result AddUser200ApplicationJSONResultEnum `json:"result"`
}

type AddUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Updated
	AddUser200ApplicationJSONObject *AddUser200ApplicationJSON
}
