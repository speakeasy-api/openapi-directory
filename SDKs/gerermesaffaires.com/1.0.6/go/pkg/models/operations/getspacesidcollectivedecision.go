// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesIDCollectiveDecisionPathParams struct {
	// Id of the space
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum - If true returns only invoices with a CompanyRegistrationCertificate
type GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum string

const (
	GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnumTrue  GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum = "true"
	GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnumFalse GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum = "false"
)

func (e *GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum: %s", s)
	}
}

// GetSpacesIDCollectiveDecisionHasMinutesEnum - If true returns only invoices with Minutes
type GetSpacesIDCollectiveDecisionHasMinutesEnum string

const (
	GetSpacesIDCollectiveDecisionHasMinutesEnumTrue  GetSpacesIDCollectiveDecisionHasMinutesEnum = "true"
	GetSpacesIDCollectiveDecisionHasMinutesEnumFalse GetSpacesIDCollectiveDecisionHasMinutesEnum = "false"
)

func (e *GetSpacesIDCollectiveDecisionHasMinutesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesIDCollectiveDecisionHasMinutesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecisionHasMinutesEnum: %s", s)
	}
}

// GetSpacesIDCollectiveDecisionHasSireneRegisterEnum - If true returns only invoices with a SireneRegister
type GetSpacesIDCollectiveDecisionHasSireneRegisterEnum string

const (
	GetSpacesIDCollectiveDecisionHasSireneRegisterEnumTrue  GetSpacesIDCollectiveDecisionHasSireneRegisterEnum = "true"
	GetSpacesIDCollectiveDecisionHasSireneRegisterEnumFalse GetSpacesIDCollectiveDecisionHasSireneRegisterEnum = "false"
)

func (e *GetSpacesIDCollectiveDecisionHasSireneRegisterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesIDCollectiveDecisionHasSireneRegisterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecisionHasSireneRegisterEnum: %s", s)
	}
}

// GetSpacesIDCollectiveDecisionHasStatusEnum - If true returns only invoices with a Status
type GetSpacesIDCollectiveDecisionHasStatusEnum string

const (
	GetSpacesIDCollectiveDecisionHasStatusEnumTrue  GetSpacesIDCollectiveDecisionHasStatusEnum = "true"
	GetSpacesIDCollectiveDecisionHasStatusEnumFalse GetSpacesIDCollectiveDecisionHasStatusEnum = "false"
)

func (e *GetSpacesIDCollectiveDecisionHasStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesIDCollectiveDecisionHasStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecisionHasStatusEnum: %s", s)
	}
}

type GetSpacesIDCollectiveDecisionQueryParams struct {
	// Date of the collective decision YYYMMDD
	Date *string `queryParam:"style=form,explode=true,name=Date"`
	// Event of the collective decision (see post for the list of events)
	Event *string `queryParam:"style=form,explode=true,name=Event"`
	// If true returns only invoices with a CompanyRegistrationCertificate
	HasCompanyRegistrationCertificate *GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum `queryParam:"style=form,explode=true,name=HasCompanyRegistrationCertificate"`
	// If true returns only invoices with Minutes
	HasMinutes *GetSpacesIDCollectiveDecisionHasMinutesEnum `queryParam:"style=form,explode=true,name=HasMinutes"`
	// If true returns only invoices with a SireneRegister
	HasSireneRegister *GetSpacesIDCollectiveDecisionHasSireneRegisterEnum `queryParam:"style=form,explode=true,name=HasSireneRegister"`
	// If true returns only invoices with a Status
	HasStatus *GetSpacesIDCollectiveDecisionHasStatusEnum `queryParam:"style=form,explode=true,name=HasStatus"`
	// index range of the results
	Range *string `queryParam:"style=form,explode=true,name=Range"`
}

type GetSpacesIDCollectiveDecisionRequest struct {
	PathParams  GetSpacesIDCollectiveDecisionPathParams
	QueryParams GetSpacesIDCollectiveDecisionQueryParams
}

type GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum string

const (
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumEgm                 GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "EGM"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumCgm                 GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "CGM"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumOgm                 GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "OGM"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumConstituentAssembly GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "ConstituentAssembly"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumSolePartner         GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "SolePartner"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumOtherEvent          GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "OtherEvent"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumOther               GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "Other"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumOffice              GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "Office"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumExecutiveCommittee  GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "ExecutiveCommittee"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumConsulting          GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "Consulting"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumBoard               GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "Board"
	GetSpacesIDCollectiveDecision200ApplicationJSONEventEnumPartnersMeeting     GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum = "PartnersMeeting"
)

func (e *GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EGM":
		fallthrough
	case "CGM":
		fallthrough
	case "OGM":
		fallthrough
	case "ConstituentAssembly":
		fallthrough
	case "SolePartner":
		fallthrough
	case "OtherEvent":
		fallthrough
	case "Other":
		fallthrough
	case "Office":
		fallthrough
	case "ExecutiveCommittee":
		fallthrough
	case "Consulting":
		fallthrough
	case "Board":
		fallthrough
	case "PartnersMeeting":
		*e = GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum: %s", s)
	}
}

type GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum string

const (
	GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnumConfidential GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum = "confidential"
	GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnumRegular      GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum = "regular"
	GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnumPublic       GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum = "public"
)

func (e *GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum: %s", s)
	}
}

type GetSpacesIDCollectiveDecision200ApplicationJSON struct {
	About                     *string                                                   `json:"About,omitempty"`
	ArchivalDate              *string                                                   `json:"ArchivalDate,omitempty"`
	Class                     *string                                                   `json:"Class,omitempty"`
	Comment                   *string                                                   `json:"Comment,omitempty"`
	Date                      *string                                                   `json:"Date,omitempty"`
	DividendDistributions     *float64                                                  `json:"DividendDistributions,omitempty"`
	DividendDistributionsDate *string                                                   `json:"DividendDistributionsDate,omitempty"`
	Event                     *GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum `json:"Event,omitempty"`
	Home                      *bool                                                     `json:"Home,omitempty"`
	ID                        *string                                                   `json:"Id,omitempty"`
	Keywords                  []string                                                  `json:"Keywords,omitempty"`
	Level                     *GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum `json:"Level,omitempty"`
	ModificationDate          *string                                                   `json:"ModificationDate,omitempty"`
	Name                      *string                                                   `json:"Name,omitempty"`
	Parent                    *string                                                   `json:"Parent,omitempty"`
}

type GetSpacesIDCollectiveDecisionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of collective decisions
	GetSpacesIDCollectiveDecision200ApplicationJSONAnies []GetSpacesIDCollectiveDecision200ApplicationJSON
}
