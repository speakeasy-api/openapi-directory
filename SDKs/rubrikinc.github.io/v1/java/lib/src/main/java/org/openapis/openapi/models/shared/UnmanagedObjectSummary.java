/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UnmanagedObjectSummary {
    /**
     * Storage being taken up in the archival location by unmanaged snapshots.
     */
    @JsonProperty("archiveStorage")
    public Long archiveStorage;

    public UnmanagedObjectSummary withArchiveStorage(Long archiveStorage) {
        this.archiveStorage = archiveStorage;
        return this;
    }
    
    /**
     * Number of policy-based snapshots to retain for the specified object.
     */
    @JsonProperty("autoSnapshotCount")
    public Long autoSnapshotCount;

    public UnmanagedObjectSummary withAutoSnapshotCount(Long autoSnapshotCount) {
        this.autoSnapshotCount = autoSnapshotCount;
        return this;
    }
    
    /**
     * A boolean that specifies whether any of the snapshots for this object are being retained by a SLA  at any location.
     * 
     */
    @JsonProperty("hasSnapshotsWithPolicy")
    public Boolean hasSnapshotsWithPolicy;

    public UnmanagedObjectSummary withHasSnapshotsWithPolicy(Boolean hasSnapshotsWithPolicy) {
        this.hasSnapshotsWithPolicy = hasSnapshotsWithPolicy;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public UnmanagedObjectSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A boolean that specifies if the object is remote or local. When this value is true, the object is remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRemote")
    public Boolean isRemote;

    public UnmanagedObjectSummary withIsRemote(Boolean isRemote) {
        this.isRemote = isRemote;
        return this;
    }
    
    /**
     * Storage being taken up on the local cluster by unmanaged snapshots.
     */
    @JsonProperty("localStorage")
    public Long localStorage;

    public UnmanagedObjectSummary withLocalStorage(Long localStorage) {
        this.localStorage = localStorage;
        return this;
    }
    
    /**
     * Number of on-demand snapshots and snapshots retrieved from an archival location for specified object.
     */
    @JsonProperty("manualSnapshotCount")
    public Long manualSnapshotCount;

    public UnmanagedObjectSummary withManualSnapshotCount(Long manualSnapshotCount) {
        this.manualSnapshotCount = manualSnapshotCount;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public UnmanagedObjectSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The type of the unmanaged object. This may be VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance or StorageArrayVolumeGroup.
     */
    @JsonProperty("objectType")
    public UnmanagedObjectSummaryObjectTypeEnum objectType;

    public UnmanagedObjectSummary withObjectType(UnmanagedObjectSummaryObjectTypeEnum objectType) {
        this.objectType = objectType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public UnmanagedObjectSummary withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    /**
     * Brief info of all the objects in the physical path to this Object.
     */
    @JsonProperty("physicalLocation")
    public LocationPathPoint[] physicalLocation;

    public UnmanagedObjectSummary withPhysicalLocation(LocationPathPoint[] physicalLocation) {
        this.physicalLocation = physicalLocation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryInfo")
    public SnappableRecoveryInfo recoveryInfo;

    public UnmanagedObjectSummary withRecoveryInfo(SnappableRecoveryInfo recoveryInfo) {
        this.recoveryInfo = recoveryInfo;
        return this;
    }
    
    /**
     * ID assigned to an SLA retention policy.
     */
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public UnmanagedObjectSummary withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * Name of an SLA retention policy.
     */
    @JsonProperty("retentionSlaDomainName")
    public String retentionSlaDomainName;

    public UnmanagedObjectSummary withRetentionSlaDomainName(String retentionSlaDomainName) {
        this.retentionSlaDomainName = retentionSlaDomainName;
        return this;
    }
    
    /**
     * Optional field with the ID assigned to an SLA Domain by Polaris.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainPolarisManagedId")
    public String retentionSlaDomainPolarisManagedId;

    public UnmanagedObjectSummary withRetentionSlaDomainPolarisManagedId(String retentionSlaDomainPolarisManagedId) {
        this.retentionSlaDomainPolarisManagedId = retentionSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.
     */
    @JsonProperty("unmanagedStatus")
    public UnmanagedObjectSummaryUnmanagedStatusEnum unmanagedStatus;

    public UnmanagedObjectSummary withUnmanagedStatus(UnmanagedObjectSummaryUnmanagedStatusEnum unmanagedStatus) {
        this.unmanagedStatus = unmanagedStatus;
        return this;
    }
    
    public UnmanagedObjectSummary(@JsonProperty("archiveStorage") Long archiveStorage, @JsonProperty("autoSnapshotCount") Long autoSnapshotCount, @JsonProperty("hasSnapshotsWithPolicy") Boolean hasSnapshotsWithPolicy, @JsonProperty("id") String id, @JsonProperty("localStorage") Long localStorage, @JsonProperty("manualSnapshotCount") Long manualSnapshotCount, @JsonProperty("name") String name, @JsonProperty("objectType") UnmanagedObjectSummaryObjectTypeEnum objectType, @JsonProperty("physicalLocation") LocationPathPoint[] physicalLocation, @JsonProperty("retentionSlaDomainId") String retentionSlaDomainId, @JsonProperty("retentionSlaDomainName") String retentionSlaDomainName, @JsonProperty("unmanagedStatus") UnmanagedObjectSummaryUnmanagedStatusEnum unmanagedStatus) {
        this.archiveStorage = archiveStorage;
        this.autoSnapshotCount = autoSnapshotCount;
        this.hasSnapshotsWithPolicy = hasSnapshotsWithPolicy;
        this.id = id;
        this.localStorage = localStorage;
        this.manualSnapshotCount = manualSnapshotCount;
        this.name = name;
        this.objectType = objectType;
        this.physicalLocation = physicalLocation;
        this.retentionSlaDomainId = retentionSlaDomainId;
        this.retentionSlaDomainName = retentionSlaDomainName;
        this.unmanagedStatus = unmanagedStatus;
  }
}
