/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * User200ApplicationJSON - The user object represents a specific user on Zoom.
 */
public class User200ApplicationJSON {
    /**
     * User's account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public User200ApplicationJSON withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * CMS ID of user, only enabled for Kaltura integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cms_user_id")
    public String cmsUserId;
    public User200ApplicationJSON withCmsUserId(String cmsUserId) {
        this.cmsUserId = cmsUserId;
        return this;
    }
    
    /**
     * User's company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    public String company;
    public User200ApplicationJSON withCompany(String company) {
        this.company = company;
        return this;
    }
    
    /**
     * The date and time at which this user was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public User200ApplicationJSON withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Custom attribute(s) that have been assigned to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attributes")
    public User200ApplicationJSONCustomAttributes customAttributes;
    public User200ApplicationJSON withCustomAttributes(User200ApplicationJSONCustomAttributes customAttributes) {
        this.customAttributes = customAttributes;
        return this;
    }
    
    /**
     * Department.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dept")
    public String dept;
    public User200ApplicationJSON withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * User's email address.
     */
    @JsonProperty("email")
    public String email;
    public User200ApplicationJSON withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * User's first name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;
    public User200ApplicationJSON withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * IDs of the web groups user belongs to. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_ids")
    public String[] groupIds;
    public User200ApplicationJSON withGroupIds(String[] groupIds) {
        this.groupIds = groupIds;
        return this;
    }
    
    /**
     * User's host key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_key")
    public String hostKey;
    public User200ApplicationJSON withHostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }
    
    /**
     * User ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public User200ApplicationJSON withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * IM IDs of the groups user belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("im_group_ids")
    public String[] imGroupIds;
    public User200ApplicationJSON withImGroupIds(String[] imGroupIds) {
        this.imGroupIds = imGroupIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jid")
    public String jid;
    public User200ApplicationJSON withJid(String jid) {
        this.jid = jid;
        return this;
    }
    
    /**
     * User's job title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    public String jobTitle;
    public User200ApplicationJSON withJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
        return this;
    }
    
    /**
     * Default language for the Zoom Web Portal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public User200ApplicationJSON withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * User last login client version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_client_version")
    public String lastClientVersion;
    public User200ApplicationJSON withLastClientVersion(String lastClientVersion) {
        this.lastClientVersion = lastClientVersion;
        return this;
    }
    
    /**
     * User last login time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_login_time")
    public OffsetDateTime lastLoginTime;
    public User200ApplicationJSON withLastLoginTime(OffsetDateTime lastLoginTime) {
        this.lastLoginTime = lastLoginTime;
        return this;
    }
    
    /**
     * User's last name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;
    public User200ApplicationJSON withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * User's location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public User200ApplicationJSON withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Login type. 
     * 
     * `0` : Facebook
     * 
     * `1` : Google
     * 
     * `99` : API
     * 
     * `100` : ZOOM
     * 
     * `101` : SSO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login_type")
    public User200ApplicationJSONLoginTypeEnum loginType;
    public User200ApplicationJSON withLoginType(User200ApplicationJSONLoginTypeEnum loginType) {
        this.loginType = loginType;
        return this;
    }
    
    /**
     * The manager for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    public String manager;
    public User200ApplicationJSON withManager(String manager) {
        this.manager = manager;
        return this;
    }
    
    /**
     * User's personal meeting url.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_meeting_url")
    public String personalMeetingUrl;
    public User200ApplicationJSON withPersonalMeetingUrl(String personalMeetingUrl) {
        this.personalMeetingUrl = personalMeetingUrl;
        return this;
    }
    
    /**
     * **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. &lt;br&gt; User's country for Company Phone Number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_country")
    public String phoneCountry;
    public User200ApplicationJSON withPhoneCountry(String phoneCountry) {
        this.phoneCountry = phoneCountry;
        return this;
    }
    
    /**
     * **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. &lt;br&gt; User's phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;
    public User200ApplicationJSON withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    public User200ApplicationJSONPhoneNumbers phoneNumbers;
    public User200ApplicationJSON withPhoneNumbers(User200ApplicationJSONPhoneNumbers phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    /**
     * The URL for user's profile picture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pic_url")
    public String picUrl;
    public User200ApplicationJSON withPicUrl(String picUrl) {
        this.picUrl = picUrl;
        return this;
    }
    
    /**
     * United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_united_type")
    public String planUnitedType;
    public User200ApplicationJSON withPlanUnitedType(String planUnitedType) {
        this.planUnitedType = planUnitedType;
        return this;
    }
    
    /**
     * Personal meeting ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pmi")
    public Long pmi;
    public User200ApplicationJSON withPmi(Long pmi) {
        this.pmi = pmi;
        return this;
    }
    
    /**
     * Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    public String roleId;
    public User200ApplicationJSON withRoleId(String roleId) {
        this.roleId = roleId;
        return this;
    }
    
    /**
     * User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_name")
    public String roleName;
    public User200ApplicationJSON withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }
    
    /**
     * Status of user's account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public User200ApplicationJSONStatusEnum status;
    public User200ApplicationJSON withStatus(User200ApplicationJSONStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The time zone of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public User200ApplicationJSON withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * User's plan type:&lt;br&gt;`1` - Basic.&lt;br&gt;`2` - Licensed.&lt;br&gt;`3` - On-prem.&lt;br&gt;`99` - None (this can only be set with `ssoCreate`).
     */
    @JsonProperty("type")
    public User200ApplicationJSONTypeEnum type;
    public User200ApplicationJSON withType(User200ApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_pmi")
    public Boolean usePmi;
    public User200ApplicationJSON withUsePmi(Boolean usePmi) {
        this.usePmi = usePmi;
        return this;
    }
    
    /**
     * Personal meeting room URL, if the user has one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vanity_url")
    public String vanityUrl;
    public User200ApplicationJSON withVanityUrl(String vanityUrl) {
        this.vanityUrl = vanityUrl;
        return this;
    }
    
    /**
     * Displays whether user is verified or not. &lt;br&gt;
     * `1` - Account verified.&lt;br&gt;
     * `0` - Account not verified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    public Long verified;
    public User200ApplicationJSON withVerified(Long verified) {
        this.verified = verified;
        return this;
    }
    
}
