"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class CustomAnalytics:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_camera_custom_analytics_artifact(self, request: operations.CreateOrganizationCameraCustomAnalyticsArtifactRequest) -> operations.CreateOrganizationCameraCustomAnalyticsArtifactResponse:
        r"""Create custom analytics artifact
        Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationCameraCustomAnalyticsArtifactRequest, base_url, '/organizations/{organizationId}/camera/customAnalytics/artifacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationCameraCustomAnalyticsArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_camera_custom_analytics_artifact_201_application_json_object = out

        return res

    def delete_organization_camera_custom_analytics_artifact(self, request: operations.DeleteOrganizationCameraCustomAnalyticsArtifactRequest) -> operations.DeleteOrganizationCameraCustomAnalyticsArtifactResponse:
        r"""Delete Custom Analytics Artifact
        Delete Custom Analytics Artifact
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationCameraCustomAnalyticsArtifactRequest, base_url, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationCameraCustomAnalyticsArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_device_camera_custom_analytics(self, request: operations.GetDeviceCameraCustomAnalyticsRequest) -> operations.GetDeviceCameraCustomAnalyticsResponse:
        r"""Return custom analytics settings for a camera
        Return custom analytics settings for a camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCameraCustomAnalyticsRequest, base_url, '/devices/{serial}/camera/customAnalytics', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCameraCustomAnalyticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_device_camera_custom_analytics_200_application_json_object = out

        return res

    def get_organization_camera_custom_analytics_artifact(self, request: operations.GetOrganizationCameraCustomAnalyticsArtifactRequest) -> operations.GetOrganizationCameraCustomAnalyticsArtifactResponse:
        r"""Get Custom Analytics Artifact
        Get Custom Analytics Artifact
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationCameraCustomAnalyticsArtifactRequest, base_url, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationCameraCustomAnalyticsArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_camera_custom_analytics_artifact_200_application_json_object = out

        return res

    def get_organization_camera_custom_analytics_artifacts(self, request: operations.GetOrganizationCameraCustomAnalyticsArtifactsRequest) -> operations.GetOrganizationCameraCustomAnalyticsArtifactsResponse:
        r"""List Custom Analytics Artifacts
        List Custom Analytics Artifacts
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationCameraCustomAnalyticsArtifactsRequest, base_url, '/organizations/{organizationId}/camera/customAnalytics/artifacts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationCameraCustomAnalyticsArtifactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_camera_custom_analytics_artifacts_200_application_json_objects = out

        return res

    def update_device_camera_custom_analytics(self, request: operations.UpdateDeviceCameraCustomAnalyticsRequest) -> operations.UpdateDeviceCameraCustomAnalyticsResponse:
        r"""Update custom analytics settings for a camera
        Update custom analytics settings for a camera
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceCameraCustomAnalyticsRequest, base_url, '/devices/{serial}/camera/customAnalytics', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceCameraCustomAnalyticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_device_camera_custom_analytics_200_application_json_object = out

        return res

    