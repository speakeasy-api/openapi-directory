// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsListAudiencesSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsListAudiencesRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Include disabled audience definitions
	IncludeDisabled *bool `queryParam:"style=form,explode=true,name=include_disabled"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsListAudiencesDefaultApplicationJSONError struct {
	Code    AnalyticsListAudiencesDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// AnalyticsListAudiencesDefaultApplicationJSON - Error code with reason
type AnalyticsListAudiencesDefaultApplicationJSON struct {
	Error AnalyticsListAudiencesDefaultApplicationJSONError `json:"error"`
}

// AnalyticsListAudiences200ApplicationJSONValuesStateEnum - Audience state.
type AnalyticsListAudiences200ApplicationJSONValuesStateEnum string

const (
	AnalyticsListAudiences200ApplicationJSONValuesStateEnumCalculating AnalyticsListAudiences200ApplicationJSONValuesStateEnum = "Calculating"
	AnalyticsListAudiences200ApplicationJSONValuesStateEnumReady       AnalyticsListAudiences200ApplicationJSONValuesStateEnum = "Ready"
	AnalyticsListAudiences200ApplicationJSONValuesStateEnumDisabled    AnalyticsListAudiences200ApplicationJSONValuesStateEnum = "Disabled"
)

func (e *AnalyticsListAudiences200ApplicationJSONValuesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Calculating":
		fallthrough
	case "Ready":
		fallthrough
	case "Disabled":
		*e = AnalyticsListAudiences200ApplicationJSONValuesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsListAudiences200ApplicationJSONValuesStateEnum: %s", s)
	}
}

// AnalyticsListAudiences200ApplicationJSONValues - Audience definition.
type AnalyticsListAudiences200ApplicationJSONValues struct {
	// Audience definition in OData format.
	Definition *string `json:"definition,omitempty"`
	// Audience description.
	Description *string `json:"description,omitempty"`
	// Estimated audience size.
	EstimatedCount *int64 `json:"estimated_count,omitempty"`
	// Audience name.
	Name *string `json:"name,omitempty"`
	// Audience state.
	State *AnalyticsListAudiences200ApplicationJSONValuesStateEnum `json:"state,omitempty"`
}

// AnalyticsListAudiences200ApplicationJSON - List of audiences.
type AnalyticsListAudiences200ApplicationJSON struct {
	NextLink *string `json:"nextLink,omitempty"`
	// List of audiences.
	Values []AnalyticsListAudiences200ApplicationJSONValues `json:"values"`
}

type AnalyticsListAudiencesResponse struct {
	// List of audiences.
	AnalyticsListAudiences200ApplicationJSONObject *AnalyticsListAudiences200ApplicationJSON
	// Error code with reason
	AnalyticsListAudiencesDefaultApplicationJSONObject *AnalyticsListAudiencesDefaultApplicationJSON
	ContentType                                        string
	StatusCode                                         int
	RawResponse                                        *http.Response
}
