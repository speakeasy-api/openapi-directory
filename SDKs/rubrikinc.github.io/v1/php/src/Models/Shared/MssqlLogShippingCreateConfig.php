<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MssqlLogShippingCreateConfig - Object containing the values of a log shipping configuration.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MssqlLogShippingCreateConfig
{
    /**
     * Maximum number of parallel data streams that can be used to copy data to the target system.
     * 
     * @var ?int $maxDataStreams
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxDataStreams')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxDataStreams = null;
    
    /**
     * Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the "state" field is `RESTORING`, this value can be omitted and is ignored.
     * 
     * @var ?bool $shouldDisconnectStandbyUsers
     */
	#[\JMS\Serializer\Annotation\SerializedName('shouldDisconnectStandbyUsers')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $shouldDisconnectStandbyUsers = null;
    
    /**
     * Secondary database states for log shipping configurations with a status of OK.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MssqlLogShippingOkStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MssqlLogShippingOkStateEnum>')]
    public MssqlLogShippingOkStateEnum $state;
    
    /**
     * The path to the default target location for data file storage.
     * 
     * @var ?string $targetDataFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetDataFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetDataFilePath = null;
    
    /**
     * The name of the secondary database.
     * 
     * @var string $targetDatabaseName
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetDatabaseName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetDatabaseName;
    
    /**
     * Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\MssqlDbFileExportPath> $targetFilePaths
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetFilePaths')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MssqlDbFileExportPath>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $targetFilePaths = null;
    
    /**
     * The ID of the SQL Server instance that hosts the secondary database.
     * 
     * @var string $targetInstanceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetInstanceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $targetInstanceId;
    
    /**
     * The path to the location of the log files.
     * 
     * @var ?string $targetLogFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetLogFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetLogFilePath = null;
    
	public function __construct()
	{
		$this->maxDataStreams = null;
		$this->shouldDisconnectStandbyUsers = null;
		$this->state = \OpenAPI\OpenAPI\Models\Shared\MssqlLogShippingOkStateEnum::RESTORING;
		$this->targetDataFilePath = null;
		$this->targetDatabaseName = "";
		$this->targetFilePaths = null;
		$this->targetInstanceId = "";
		$this->targetLogFilePath = null;
	}
}
