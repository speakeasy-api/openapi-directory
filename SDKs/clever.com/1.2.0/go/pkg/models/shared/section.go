// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SectionGradeEnum string

const (
	SectionGradeEnumOne             SectionGradeEnum = "1"
	SectionGradeEnumTwo             SectionGradeEnum = "2"
	SectionGradeEnumThree           SectionGradeEnum = "3"
	SectionGradeEnumFour            SectionGradeEnum = "4"
	SectionGradeEnumFive            SectionGradeEnum = "5"
	SectionGradeEnumSix             SectionGradeEnum = "6"
	SectionGradeEnumSeven           SectionGradeEnum = "7"
	SectionGradeEnumEight           SectionGradeEnum = "8"
	SectionGradeEnumNine            SectionGradeEnum = "9"
	SectionGradeEnumTen             SectionGradeEnum = "10"
	SectionGradeEnumEleven          SectionGradeEnum = "11"
	SectionGradeEnumTwelve          SectionGradeEnum = "12"
	SectionGradeEnumPreKindergarten SectionGradeEnum = "PreKindergarten"
	SectionGradeEnumKindergarten    SectionGradeEnum = "Kindergarten"
	SectionGradeEnumPostGraduate    SectionGradeEnum = "PostGraduate"
	SectionGradeEnumOther           SectionGradeEnum = "Other"
)

func (e *SectionGradeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		fallthrough
	case "9":
		fallthrough
	case "10":
		fallthrough
	case "11":
		fallthrough
	case "12":
		fallthrough
	case "PreKindergarten":
		fallthrough
	case "Kindergarten":
		fallthrough
	case "PostGraduate":
		fallthrough
	case "Other":
		*e = SectionGradeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SectionGradeEnum: %s", s)
	}
}

type SectionSubjectEnum string

const (
	SectionSubjectEnumEnglishLanguageArts         SectionSubjectEnum = "english/language arts"
	SectionSubjectEnumMath                        SectionSubjectEnum = "math"
	SectionSubjectEnumScience                     SectionSubjectEnum = "science"
	SectionSubjectEnumSocialStudies               SectionSubjectEnum = "social studies"
	SectionSubjectEnumLanguage                    SectionSubjectEnum = "language"
	SectionSubjectEnumHomeroomAdvisory            SectionSubjectEnum = "homeroom/advisory"
	SectionSubjectEnumInterventionsOnlineLearning SectionSubjectEnum = "interventions/online learning"
	SectionSubjectEnumTechnologyAndEngineering    SectionSubjectEnum = "technology and engineering"
	SectionSubjectEnumPeAndHealth                 SectionSubjectEnum = "PE and health"
	SectionSubjectEnumArtsAndMusic                SectionSubjectEnum = "arts and music"
	SectionSubjectEnumOther                       SectionSubjectEnum = "other"
)

func (e *SectionSubjectEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "english/language arts":
		fallthrough
	case "math":
		fallthrough
	case "science":
		fallthrough
	case "social studies":
		fallthrough
	case "language":
		fallthrough
	case "homeroom/advisory":
		fallthrough
	case "interventions/online learning":
		fallthrough
	case "technology and engineering":
		fallthrough
	case "PE and health":
		fallthrough
	case "arts and music":
		fallthrough
	case "other":
		*e = SectionSubjectEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SectionSubjectEnum: %s", s)
	}
}

type Section struct {
	CourseDescription *string             `json:"course_description,omitempty"`
	CourseName        *string             `json:"course_name,omitempty"`
	CourseNumber      *string             `json:"course_number,omitempty"`
	Created           *string             `json:"created,omitempty"`
	District          *string             `json:"district,omitempty"`
	Grade             *SectionGradeEnum   `json:"grade,omitempty"`
	ID                *string             `json:"id,omitempty"`
	LastModified      *string             `json:"last_modified,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Period            *string             `json:"period,omitempty"`
	School            *string             `json:"school,omitempty"`
	SectionNumber     *string             `json:"section_number,omitempty"`
	SisID             *string             `json:"sis_id,omitempty"`
	Students          []string            `json:"students,omitempty"`
	Subject           *SectionSubjectEnum `json:"subject,omitempty"`
	Teacher           *string             `json:"teacher,omitempty"`
	Teachers          []string            `json:"teachers,omitempty"`
	Term              *Term               `json:"term,omitempty"`
}
