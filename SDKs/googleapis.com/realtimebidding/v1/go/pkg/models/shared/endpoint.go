// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EndpointBidProtocolEnum - The protocol that the bidder endpoint is using.
type EndpointBidProtocolEnum string

const (
	EndpointBidProtocolEnumBidProtocolUnspecified EndpointBidProtocolEnum = "BID_PROTOCOL_UNSPECIFIED"
	EndpointBidProtocolEnumGoogleRtb              EndpointBidProtocolEnum = "GOOGLE_RTB"
	EndpointBidProtocolEnumOpenrtbJSON            EndpointBidProtocolEnum = "OPENRTB_JSON"
	EndpointBidProtocolEnumOpenrtbProtobuf        EndpointBidProtocolEnum = "OPENRTB_PROTOBUF"
)

func (e EndpointBidProtocolEnum) ToPointer() *EndpointBidProtocolEnum {
	return &e
}

func (e *EndpointBidProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BID_PROTOCOL_UNSPECIFIED":
		fallthrough
	case "GOOGLE_RTB":
		fallthrough
	case "OPENRTB_JSON":
		fallthrough
	case "OPENRTB_PROTOBUF":
		*e = EndpointBidProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EndpointBidProtocolEnum: %v", v)
	}
}

// EndpointTradingLocationEnum - The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.
type EndpointTradingLocationEnum string

const (
	EndpointTradingLocationEnumTradingLocationUnspecified EndpointTradingLocationEnum = "TRADING_LOCATION_UNSPECIFIED"
	EndpointTradingLocationEnumUsWest                     EndpointTradingLocationEnum = "US_WEST"
	EndpointTradingLocationEnumUsEast                     EndpointTradingLocationEnum = "US_EAST"
	EndpointTradingLocationEnumEurope                     EndpointTradingLocationEnum = "EUROPE"
	EndpointTradingLocationEnumAsia                       EndpointTradingLocationEnum = "ASIA"
)

func (e EndpointTradingLocationEnum) ToPointer() *EndpointTradingLocationEnum {
	return &e
}

func (e *EndpointTradingLocationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRADING_LOCATION_UNSPECIFIED":
		fallthrough
	case "US_WEST":
		fallthrough
	case "US_EAST":
		fallthrough
	case "EUROPE":
		fallthrough
	case "ASIA":
		*e = EndpointTradingLocationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EndpointTradingLocationEnum: %v", v)
	}
}

// Endpoint - Bidder endpoint that receives bid requests.
type Endpoint struct {
	// The protocol that the bidder endpoint is using.
	BidProtocol *EndpointBidProtocolEnum `json:"bidProtocol,omitempty"`
	// The maximum number of queries per second allowed to be sent to this server.
	MaximumQPS *string `json:"maximumQps,omitempty"`
	// Output only. Name of the endpoint resource that must follow the pattern `bidders/{bidderAccountId}/endpoints/{endpointId}`, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.
	Name *string `json:"name,omitempty"`
	// The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.
	TradingLocation *EndpointTradingLocationEnum `json:"tradingLocation,omitempty"`
	// Output only. The URL that bid requests should be sent to.
	URL *string `json:"url,omitempty"`
}
