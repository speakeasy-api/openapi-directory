"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody2Portfolios:
    
    portfolio_values: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioValues') }})
    r"""portfolioValues[t] is the value of the portfolio at the time t"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody2:
    
    portfolios: list[PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody2Portfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    risk_free_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskFreeRate') }})
    r"""The risk free rate"""  
    benchmark_values: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benchmarkValues'), 'exclude': lambda f: f is None }})
    r"""benchmarkValues[t] is the value of the benchmark at the time t; the benchmarkValues array must have the same length as all the portfolioValues arrays"""  
    confidence_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidenceLevel'), 'exclude': lambda f: f is None }})
    r"""The confidence level of the minimum track record length, in percentage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody1Portfolios:
    
    portfolio_values: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioValues') }})
    r"""portfolioValues[t] is the value of the portfolio at the time t"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody1:
    
    benchmark_sharpe_ratio: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benchmarkSharpeRatio') }})
    r"""The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values"""  
    portfolios: list[PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthRequestBody1Portfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    risk_free_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskFreeRate') }})
    r"""The risk free rate"""  
    confidence_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidenceLevel'), 'exclude': lambda f: f is None }})
    r"""The confidence level of the minimum track record length, in percentage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSONPortfolios:
    
    portfolio_sharpe_ratio_minimum_track_record_length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioSharpeRatioMinimumTrackRecordLength') }})
    r"""The minimum track record length of the portfolio, in number of required arithmetic returns, possibly equal to null in case the minimum track record length does not exist"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSON:
    r"""OK"""
    
    portfolios: list[PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSONPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    

@dataclasses.dataclass
class PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_analysis_sharpe_ratio_probabilistic_minimum_track_record_length_200_application_json_object: Optional[PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    