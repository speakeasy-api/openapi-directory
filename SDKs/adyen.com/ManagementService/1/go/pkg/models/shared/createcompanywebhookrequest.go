// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateCompanyWebhookRequestCommunicationFormatEnum - Format or protocol for receiving webhooks. Possible values:
// * **soap**
// * **http**
// * **json**
type CreateCompanyWebhookRequestCommunicationFormatEnum string

const (
	CreateCompanyWebhookRequestCommunicationFormatEnumHTTP CreateCompanyWebhookRequestCommunicationFormatEnum = "HTTP"
	CreateCompanyWebhookRequestCommunicationFormatEnumJSON CreateCompanyWebhookRequestCommunicationFormatEnum = "JSON"
	CreateCompanyWebhookRequestCommunicationFormatEnumSoap CreateCompanyWebhookRequestCommunicationFormatEnum = "SOAP"
)

func (e *CreateCompanyWebhookRequestCommunicationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "JSON":
		fallthrough
	case "SOAP":
		*e = CreateCompanyWebhookRequestCommunicationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompanyWebhookRequestCommunicationFormatEnum: %s", s)
	}
}

// CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum - Shows how merchant accounts are filtered when configuring the webhook. Possible values:
// * **includeAccounts**: The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`.
// * **excludeAccounts**: The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.
// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
type CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum string

const (
	CreateCompanyWebhookRequestFilterMerchantAccountTypeEnumExcludeList CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "EXCLUDE_LIST"
	CreateCompanyWebhookRequestFilterMerchantAccountTypeEnumIncludeAll  CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "INCLUDE_ALL"
	CreateCompanyWebhookRequestFilterMerchantAccountTypeEnumIncludeList CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "INCLUDE_LIST"
)

func (e *CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCLUDE_LIST":
		fallthrough
	case "INCLUDE_ALL":
		fallthrough
	case "INCLUDE_LIST":
		*e = CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum: %s", s)
	}
}

// CreateCompanyWebhookRequestNetworkTypeEnum - Network type for Terminal API notification webhooks. Possible values:
// * **public**
// * **local**
//
// Default Value: **public**.
type CreateCompanyWebhookRequestNetworkTypeEnum string

const (
	CreateCompanyWebhookRequestNetworkTypeEnumLocal  CreateCompanyWebhookRequestNetworkTypeEnum = "LOCAL"
	CreateCompanyWebhookRequestNetworkTypeEnumPublic CreateCompanyWebhookRequestNetworkTypeEnum = "PUBLIC"
)

func (e *CreateCompanyWebhookRequestNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOCAL":
		fallthrough
	case "PUBLIC":
		*e = CreateCompanyWebhookRequestNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompanyWebhookRequestNetworkTypeEnum: %s", s)
	}
}

// CreateCompanyWebhookRequestSslVersionEnum - SSL version to access the public webhook URL specified in the `url` field. Possible values:
// * **TLSv1.3**
// * **TLSv1.2**
// * **HTTP** - Only allowed on Test environment.
//
// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
type CreateCompanyWebhookRequestSslVersionEnum string

const (
	CreateCompanyWebhookRequestSslVersionEnumHTTP                 CreateCompanyWebhookRequestSslVersionEnum = "HTTP"
	CreateCompanyWebhookRequestSslVersionEnumSsl                  CreateCompanyWebhookRequestSslVersionEnum = "SSL"
	CreateCompanyWebhookRequestSslVersionEnumSslv3                CreateCompanyWebhookRequestSslVersionEnum = "SSLV3"
	CreateCompanyWebhookRequestSslVersionEnumSslInsecureCiphers   CreateCompanyWebhookRequestSslVersionEnum = "SSL_INSECURE_CIPHERS"
	CreateCompanyWebhookRequestSslVersionEnumTLS                  CreateCompanyWebhookRequestSslVersionEnum = "TLS"
	CreateCompanyWebhookRequestSslVersionEnumTlsv1                CreateCompanyWebhookRequestSslVersionEnum = "TLSV1"
	CreateCompanyWebhookRequestSslVersionEnumTlsv11               CreateCompanyWebhookRequestSslVersionEnum = "TLSV1_1"
	CreateCompanyWebhookRequestSslVersionEnumTlsv12               CreateCompanyWebhookRequestSslVersionEnum = "TLSV1_2"
	CreateCompanyWebhookRequestSslVersionEnumTlsv13               CreateCompanyWebhookRequestSslVersionEnum = "TLSV1_3"
	CreateCompanyWebhookRequestSslVersionEnumTlsv1InsecureCiphers CreateCompanyWebhookRequestSslVersionEnum = "TLSV1_INSECURE_CIPHERS"
)

func (e *CreateCompanyWebhookRequestSslVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "SSL":
		fallthrough
	case "SSLV3":
		fallthrough
	case "SSL_INSECURE_CIPHERS":
		fallthrough
	case "TLS":
		fallthrough
	case "TLSV1":
		fallthrough
	case "TLSV1_1":
		fallthrough
	case "TLSV1_2":
		fallthrough
	case "TLSV1_3":
		fallthrough
	case "TLSV1_INSECURE_CIPHERS":
		*e = CreateCompanyWebhookRequestSslVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompanyWebhookRequestSslVersionEnum: %s", s)
	}
}

type CreateCompanyWebhookRequest struct {
	// Indicates if expired SSL certificates are accepted. Default value: **false**.
	AcceptsExpiredCertificate *bool `json:"acceptsExpiredCertificate,omitempty"`
	// Indicates if self-signed SSL certificates are accepted. Default value: **false**.
	AcceptsSelfSignedCertificate *bool `json:"acceptsSelfSignedCertificate,omitempty"`
	// Indicates if untrusted SSL certificates are accepted. Default value: **false**.
	AcceptsUntrustedRootCertificate *bool `json:"acceptsUntrustedRootCertificate,omitempty"`
	// Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
	Active             bool                `json:"active"`
	AdditionalSettings *AdditionalSettings `json:"additionalSettings,omitempty"`
	// Format or protocol for receiving webhooks. Possible values:
	// * **soap**
	// * **http**
	// * **json**
	CommunicationFormat CreateCompanyWebhookRequestCommunicationFormatEnum `json:"communicationFormat"`
	// Your description for this webhook configuration.
	Description *string `json:"description,omitempty"`
	// Shows how merchant accounts are filtered when configuring the webhook. Possible values:
	// * **includeAccounts**: The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`.
	// * **excludeAccounts**: The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.
	// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
	FilterMerchantAccountType CreateCompanyWebhookRequestFilterMerchantAccountTypeEnum `json:"filterMerchantAccountType"`
	// A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.
	//
	// Required if `filterMerchantAccountType` is either:
	// * **includeAccounts**
	// * **excludeAccounts**
	//
	// Not needed for `filterMerchantAccountType`: **allAccounts**.
	FilterMerchantAccounts []string `json:"filterMerchantAccounts"`
	// Network type for Terminal API notification webhooks. Possible values:
	// * **public**
	// * **local**
	//
	// Default Value: **public**.
	NetworkType *CreateCompanyWebhookRequestNetworkTypeEnum `json:"networkType,omitempty"`
	// Password to access the webhook URL.
	Password *string `json:"password,omitempty"`
	// Indicates if the SOAP action header needs to be populated. Default value: **false**.
	//
	// Only applies if `communicationFormat`: **soap**.
	PopulateSoapActionHeader *bool `json:"populateSoapActionHeader,omitempty"`
	// SSL version to access the public webhook URL specified in the `url` field. Possible values:
	// * **TLSv1.3**
	// * **TLSv1.2**
	// * **HTTP** - Only allowed on Test environment.
	//
	// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
	SslVersion *CreateCompanyWebhookRequestSslVersionEnum `json:"sslVersion,omitempty"`
	// The type of webhook that is being created. Possible values are:
	//
	// - **standard**
	// - **account-settings-notification**
	// - **banktransfer-notification**
	// - **boletobancario-notification**
	// - **directdebit-notification**
	// - **pending-notification**
	// - **ideal-notification**
	// - **ideal-pending-notification**
	// - **report-notification**
	// - **rreq-notification**
	//
	// Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
	Type string `json:"type"`
	// Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
	URL string `json:"url"`
	// Username to access the webhook URL.
	Username *string `json:"username,omitempty"`
}
