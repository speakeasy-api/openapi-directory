/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This folder contains Wi-Fi related endpoints.
 */
export class Wifi {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Connect to Wi-Fi Network
   *
   * @remarks
   * **Note:** Not sure how the password is encrypted. Might be using the public certificate from /setup/eureka_info. So this cannot be used as of now. If someone figures it out, please [create a new issue here](https://github.com/rithvikvibhu/GHLocalApi/issues/new).
   */
  connecttoWiFiNetwork(
    req: shared.ConnecttoWiFiNetworkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ConnecttoWiFiNetworkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ConnecttoWiFiNetworkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/connect_wifi";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ConnecttoWiFiNetworkResponse =
        new operations.ConnecttoWiFiNetworkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Forget Wi-Fi Network
   *
   * @remarks
   * This is to forget a saved network by `wpa_id`. Get the `wpa_id` from /setup/configured_networks
   */
  forgetWiFiNetwork(
    req: shared.ForgetWiFiNetworkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ForgetWiFiNetworkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ForgetWiFiNetworkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/forget_wifi";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ForgetWiFiNetworkResponse =
        new operations.ForgetWiFiNetworkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.forgetWiFiNetwork200TextPlainObject = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Saved Networks
   *
   * @remarks
   * This gets a list of all saved Wi-Fi networks.
   *
   * Each network has `ssid`, `wpa_auth`, `wpa_cipher` and `wpa_id`.
   * `wpa_id` is an incrementing number used to identify a saved network.
   * #TODO: Add values for `wpa_auth` and `wpa_cipher`.
   */
  getSavedNetworks(
    config?: AxiosRequestConfig
  ): Promise<operations.GetSavedNetworksResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/configured_networks";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSavedNetworksResponse =
        new operations.GetSavedNetworksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example113s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.example113s = utils.objectToClass(
              httpRes?.data,
              shared.Example113,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Wi-Fi Scan Results
   *
   * @remarks
   * This gets a list of all nearby Wi-Fi access points.
   *
   * The list only has the connected AP by default. Once a scan is triggered by `/setup/scan_wifi`, the whole list is cached for ~3 minutes. Then it will revert to returning only the connected AP again.
   */
  getWiFiScanResults(
    config?: AxiosRequestConfig
  ): Promise<operations.GetWiFiScanResultsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/scan_results";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWiFiScanResultsResponse =
        new operations.GetWiFiScanResultsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example114s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.example114s = utils.objectToClass(
              httpRes?.data,
              shared.Example114,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan for Networks
   *
   * @remarks
   * This initiates scanning for Wi-Fi networks.
   *
   * The results can be obtained with `/setup/scan_results` after triggering the scan with this request.
   */
  scanforNetworks(
    config?: AxiosRequestConfig
  ): Promise<operations.ScanforNetworksResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/scan_wifi";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScanforNetworksResponse =
        new operations.ScanforNetworksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.scanforNetworks200TextPlainObject = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
