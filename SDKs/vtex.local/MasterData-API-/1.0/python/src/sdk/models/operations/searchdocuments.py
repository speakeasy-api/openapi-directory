"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class SearchdocumentsRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand"""  
    acronym: str = dataclasses.field(metadata={'path_param': { 'field_name': 'acronym', 'style': 'simple', 'explode': False }})
    r"""Identifies the kind of data"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    rest_range: str = dataclasses.field(metadata={'header': { 'field_name': 'REST-Range', 'style': 'simple', 'explode': False }})
    r"""Range of documents to show"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_fields', 'style': 'form', 'explode': True }})
    r"""Fields that will be returned by document"""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_keyword', 'style': 'form', 'explode': True }})
    r"""String to search"""  
    schema: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_schema', 'style': 'form', 'explode': True }})
    r"""Enter with the name of the schema to filter documents by compatibility of the schema."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_sort', 'style': 'form', 'explode': True }})
    r"""Use ASC value to sort ascending or DESC value to sort descending."""  
    where: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_where', 'style': 'form', 'explode': True }})
    r"""Specification of filters. As seen below"""  
    

@dataclasses.dataclass
class SearchdocumentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    searchdocuments_503_application_json_any: Optional[Any] = dataclasses.field(default=None)
    r"""Service Unavailable"""  
    