<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - <fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
 * 
 * https://docs.aws.amazon.com/importexport/ - Amazon Web Services documentation
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://docs.aws.amazon.com/importexport/
 */
class SDK
{
	public const SERVERS = [
        /** The general AWS Import/Export multi-region endpoint */
		'http://importexport.amazonaws.com',
        /** The general AWS Import/Export multi-region endpoint */
		'https://importexport.amazonaws.com',
        /** The AWS Import/Export endpoint for China (Beijing) and China (Ningxia) */
		'http://importexport.{region}.amazonaws.com.cn',
        /** The AWS Import/Export endpoint for China (Beijing) and China (Ningxia) */
		'https://importexport.{region}.amazonaws.com.cn',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCancelJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCancelJobResponse
     */
	public function getCancelJob(
        \OpenAPI\OpenAPI\Models\Operations\GETCancelJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCancelJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=CancelJob&Action=CancelJob');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETCancelJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCancelJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCreateJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCreateJobResponse
     */
	public function getCreateJob(
        \OpenAPI\OpenAPI\Models\Operations\GETCreateJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCreateJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=CreateJob&Action=CreateJob');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETCreateJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCreateJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelResponse
     */
	public function getGETShippingLabel(
        \OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=GetShippingLabel&Action=GetShippingLabel');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGETShippingLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGETStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGETStatusResponse
     */
	public function getGETStatus(
        \OpenAPI\OpenAPI\Models\Operations\GETGETStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGETStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=GetStatus&Action=GetStatus');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETGETStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGETStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListJobsResponse
     */
	public function getListJobs(
        \OpenAPI\OpenAPI\Models\Operations\GETListJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=ListJobs&Action=ListJobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListJobsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETUpdateJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETUpdateJobResponse
     */
	public function getUpdateJob(
        \OpenAPI\OpenAPI\Models\Operations\GETUpdateJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETUpdateJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=UpdateJob&Action=UpdateJob');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETUpdateJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETUpdateJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495 or $httpResponse->getStatusCode() === 496 or $httpResponse->getStatusCode() === 497) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCancelJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCancelJobResponse
     */
	public function postCancelJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTCancelJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCancelJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=CancelJob&Action=CancelJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCancelJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCancelJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateJobResponse
     */
	public function postCreateJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=CreateJob&Action=CreateJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelResponse
     */
	public function postGetShippingLabel(
        \OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=GetShippingLabel&Action=GetShippingLabel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTGetShippingLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTGetStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTGetStatusResponse
     */
	public function postGetStatus(
        \OpenAPI\OpenAPI\Models\Operations\POSTGetStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTGetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=GetStatus&Action=GetStatus');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTGetStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTGetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTListJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTListJobsResponse
     */
	public function postListJobs(
        \OpenAPI\OpenAPI\Models\Operations\POSTListJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTListJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=ListJobs&Action=ListJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTListJobsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTListJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobResponse
     */
	public function postUpdateJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Operation=UpdateJob&Action=UpdateJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTUpdateJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495 or $httpResponse->getStatusCode() === 496 or $httpResponse->getStatusCode() === 497) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}