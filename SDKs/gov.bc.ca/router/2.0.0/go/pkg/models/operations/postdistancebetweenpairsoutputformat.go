// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// PostDistanceBetweenPairsOutputFormatOutputFormatEnum - Format of representation
type PostDistanceBetweenPairsOutputFormatOutputFormatEnum string

const (
	PostDistanceBetweenPairsOutputFormatOutputFormatEnumJSON PostDistanceBetweenPairsOutputFormatOutputFormatEnum = "json"
	PostDistanceBetweenPairsOutputFormatOutputFormatEnumHTML PostDistanceBetweenPairsOutputFormatOutputFormatEnum = "html"
)

func (e *PostDistanceBetweenPairsOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "html":
		*e = PostDistanceBetweenPairsOutputFormatOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostDistanceBetweenPairsOutputFormatOutputFormatEnum: %s", s)
	}
}

type PostDistanceBetweenPairsOutputFormatPathParams struct {
	// Format of representation
	OutputFormat PostDistanceBetweenPairsOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
}

// PostDistanceBetweenPairsOutputFormatCriteriaEnum - Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
type PostDistanceBetweenPairsOutputFormatCriteriaEnum string

const (
	PostDistanceBetweenPairsOutputFormatCriteriaEnumShortest PostDistanceBetweenPairsOutputFormatCriteriaEnum = "shortest"
	PostDistanceBetweenPairsOutputFormatCriteriaEnumFastest  PostDistanceBetweenPairsOutputFormatCriteriaEnum = "fastest"
)

func (e *PostDistanceBetweenPairsOutputFormatCriteriaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shortest":
		fallthrough
	case "fastest":
		*e = PostDistanceBetweenPairsOutputFormatCriteriaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostDistanceBetweenPairsOutputFormatCriteriaEnum: %s", s)
	}
}

// PostDistanceBetweenPairsOutputFormatDistanceUnitEnum - distance unit of measure (e.g., km, mi). Default is km.
type PostDistanceBetweenPairsOutputFormatDistanceUnitEnum string

const (
	PostDistanceBetweenPairsOutputFormatDistanceUnitEnumKm PostDistanceBetweenPairsOutputFormatDistanceUnitEnum = "km"
	PostDistanceBetweenPairsOutputFormatDistanceUnitEnumMi PostDistanceBetweenPairsOutputFormatDistanceUnitEnum = "mi"
)

func (e *PostDistanceBetweenPairsOutputFormatDistanceUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "km":
		fallthrough
	case "mi":
		*e = PostDistanceBetweenPairsOutputFormatDistanceUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostDistanceBetweenPairsOutputFormatDistanceUnitEnum: %s", s)
	}
}

// PostDistanceBetweenPairsOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS target="_blank">outputSRS</a>
type PostDistanceBetweenPairsOutputFormatOutputSrsEnum string

const (
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "4326"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "4269"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumThreeThousandAndFive                  PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "3005"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "26907"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "26908"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "26909"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "26910"
	PostDistanceBetweenPairsOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven PostDistanceBetweenPairsOutputFormatOutputSrsEnum = "26911"
)

func (e *PostDistanceBetweenPairsOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = PostDistanceBetweenPairsOutputFormatOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostDistanceBetweenPairsOutputFormatOutputSrsEnum: %s", s)
	}
}

type PostDistanceBetweenPairsOutputFormatQueryParams struct {
	// If true, route starts and ends on same side of road as start and end points.Default is false.
	CorrectSide *bool `queryParam:"style=form,explode=true,name=correctSide"`
	// Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
	Criteria *PostDistanceBetweenPairsOutputFormatCriteriaEnum `queryParam:"style=form,explode=true,name=criteria"`
	// departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
	Departure *time.Time `queryParam:"style=form,explode=true,name=departure"`
	// A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
	Disable *string `queryParam:"style=form,explode=true,name=disable"`
	// distance unit of measure (e.g., km, mi). Default is km.
	DistanceUnit *PostDistanceBetweenPairsOutputFormatDistanceUnitEnum `queryParam:"style=form,explode=true,name=distanceUnit"`
	// A comma-separated list of origin points.  See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#fromPoints target='_blank'>fromPoints</a>
	FromPoints string `queryParam:"style=form,explode=true,name=fromPoints"`
	// The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
	MaxPairs *int64 `queryParam:"style=form,explode=true,name=maxPairs"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *PostDistanceBetweenPairsOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
	RouteDescription *string `queryParam:"style=form,explode=true,name=routeDescription"`
	// A comma-separated list of destination points. See <a href=https://github.com/bcgov/api-specs/blob/master/router/glossary.md#toPoints target='_blank'>toPoints</a>
	ToPoints string `queryParam:"style=form,explode=true,name=toPoints"`
}

type PostDistanceBetweenPairsOutputFormatRequest struct {
	PathParams  PostDistanceBetweenPairsOutputFormatPathParams
	QueryParams PostDistanceBetweenPairsOutputFormatQueryParams
}

type PostDistanceBetweenPairsOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
