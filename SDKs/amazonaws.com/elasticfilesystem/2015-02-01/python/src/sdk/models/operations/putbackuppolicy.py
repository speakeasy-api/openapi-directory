"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import backuppolicydescription as shared_backuppolicydescription
from ..shared import status_enum as shared_status_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutBackupPolicyRequestBodyBackupPolicy:
    r"""The backup policy for the file system used to create automatic daily backups. If status has a value of <code>ENABLED</code>, the file system is being automatically backed up. For more information, see <a href=\\"https://docs.aws.amazon.com/efs/latest/ug/awsbackup.html#automatic-backups\\">Automatic backups</a>."""
    
    status: Optional[shared_status_enum.StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutBackupPolicyRequestBody:
    
    backup_policy: PutBackupPolicyRequestBodyBackupPolicy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupPolicy') }})
    r"""The backup policy for the file system used to create automatic daily backups. If status has a value of <code>ENABLED</code>, the file system is being automatically backed up. For more information, see <a href=\\"https://docs.aws.amazon.com/efs/latest/ug/awsbackup.html#automatic-backups\\">Automatic backups</a>."""  
    

@dataclasses.dataclass
class PutBackupPolicyRequest:
    
    file_system_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FileSystemId', 'style': 'simple', 'explode': False }})
    r"""Specifies which EFS file system to update the backup policy for."""  
    request_body: PutBackupPolicyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutBackupPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    backup_policy_description: Optional[shared_backuppolicydescription.BackupPolicyDescription] = dataclasses.field(default=None)
    r"""Success"""  
    bad_request: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequest"""  
    file_system_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""FileSystemNotFound"""  
    incorrect_file_system_life_cycle_state: Optional[Any] = dataclasses.field(default=None)
    r"""IncorrectFileSystemLifeCycleState"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    