"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostClientRequestBody:
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""OAuth 2.0 client identifier string."""  
    at_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@id'), 'exclude': lambda f: f is None }})
    r"""URL of the Client's JSON representation."""  
    client_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_name'), 'exclude': lambda f: f is None }})
    r"""Human-readable string name of the client to be presented to the end-user during authorization."""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }})
    r"""OAuth 2.0 client secret string."""  
    client_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_uri'), 'exclude': lambda f: f is None }})
    r"""URL string of a web page providing information about the client."""  
    contacts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contacts'), 'exclude': lambda f: f is None }})
    r"""Array of strings representing ways to contact people responsible for this client, typically email addresses."""  
    grant_types: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_types'), 'exclude': lambda f: f is None }})
    r"""Array of OAuth 2.0 grant type strings that the client can use at the token endpoint."""  
    jwks: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwks'), 'exclude': lambda f: f is None }})
    r"""Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set."""  
    jwks_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwks_uri'), 'exclude': lambda f: f is None }})
    r"""URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys."""  
    logo_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_email'), 'exclude': lambda f: f is None }})
    r"""An email address used to generate a gravatar.com logo_uri."""  
    logo_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_uri'), 'exclude': lambda f: f is None }})
    r"""URL string that references a logo for the client."""  
    policy_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy_uri'), 'exclude': lambda f: f is None }})
    r"""URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data."""  
    redirect_uris: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_uris'), 'exclude': lambda f: f is None }})
    r"""Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows."""  
    response_types: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_types'), 'exclude': lambda f: f is None }})
    r"""Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint."""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens."""  
    software_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered."""  
    software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software_version'), 'exclude': lambda f: f is None }})
    r"""A version identifier string for the client software identified by software_id."""  
    token_endpoint_auth_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_endpoint_auth_method'), 'exclude': lambda f: f is None }})
    r"""String indicator of the requested authentication method for the token endpoint."""  
    tos_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tos_uri'), 'exclude': lambda f: f is None }})
    r"""URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client."""  
    

@dataclasses.dataclass
class PostClientResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    