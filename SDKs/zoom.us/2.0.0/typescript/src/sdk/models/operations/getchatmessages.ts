/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetChatMessagesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class GetChatMessagesRequest extends SpeakeasyBase {
  /**
   * The query date for which you would like to get the chat messages.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date;dateTimeFormat=YYYY-MM-DD",
  })
  date?: Date;

  /**
   * **Optional** <br>
   *
   * @remarks
   * Set the value of this field to `true` to include edited and deleted messages in the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_deleted_and_edited_message",
  })
  includeDeletedAndEditedMessage?: string;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned with a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * The channel Id of a channel inside which the current user had chat conversations. Messages that were sent and/or received between the user and the channel is displayed.
   *
   * @remarks
   *
   * Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to_channel",
  })
  toChannel?: string;

  /**
   * The email address of a chat contact with whom the current user chatted. Messages that were sent and/or received between the user and the contact is displayed.
   *
   * @remarks
   *
   * Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to_contact",
  })
  toContact?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

/**
 * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
 *
 * @remarks
 *
 * This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
 */
export enum GetChatMessages200ApplicationXMLMessagesStatusEnum {
  Deleted = "Deleted",
  Edited = "Edited",
  Normal = "Normal",
}

export class GetChatMessages200ApplicationXMLMessages extends SpeakeasyBase {
  /**
   * The date-time at which the message was sent.
   */
  @SpeakeasyMetadata()
  dateTime?: string;

  /**
   * Message ID: Unique Identifier of the message.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * The message content.
   */
  @SpeakeasyMetadata()
  message?: string;

  /**
   * Unique identifier of a reply. This field will only be returned if the message is a reply message.
   */
  @SpeakeasyMetadata()
  replyMainMessageId?: string;

  /**
   * Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
   *
   * @remarks
   *
   * The value of this field will be in **long** format(int64).
   */
  @SpeakeasyMetadata()
  replyMainMessageTimestamp?: number;

  /**
   * The email address of the sender of the message.
   */
  @SpeakeasyMetadata()
  sender?: string;

  /**
   * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
   *
   * @remarks
   *
   * This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
   */
  @SpeakeasyMetadata()
  status?: GetChatMessages200ApplicationXMLMessagesStatusEnum;

  /**
   * The timestamp of the message in microseconds.
   */
  @SpeakeasyMetadata()
  timestamp?: number;
}

/**
 * Chat message object.
 */
export class GetChatMessages200ApplicationXML extends SpeakeasyBase {
  /**
   * The date provided in the query parameter. If a date is not provided, the default value is the **current date**.
   */
  @SpeakeasyMetadata()
  date?: Date;

  /**
   * List of message(s).
   */
  @SpeakeasyMetadata({ elemType: GetChatMessages200ApplicationXMLMessages })
  messages?: GetChatMessages200ApplicationXMLMessages[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of records returned with a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;
}

/**
 * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
 *
 * @remarks
 *
 * This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
 */
export enum GetChatMessages200ApplicationJSONMessagesStatusEnum {
  Deleted = "Deleted",
  Edited = "Edited",
  Normal = "Normal",
}

export class GetChatMessages200ApplicationJSONMessages extends SpeakeasyBase {
  /**
   * The date-time at which the message was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time" })
  dateTime?: string;

  /**
   * Message ID: Unique Identifier of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The message content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * Unique identifier of a reply. This field will only be returned if the message is a reply message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reply_main_message_id" })
  replyMainMessageId?: string;

  /**
   * Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
   *
   * @remarks
   *
   * The value of this field will be in **long** format(int64).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reply_main_message_timestamp" })
  replyMainMessageTimestamp?: number;

  /**
   * The email address of the sender of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sender" })
  sender?: string;

  /**
   * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
   *
   * @remarks
   *
   * This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetChatMessages200ApplicationJSONMessagesStatusEnum;

  /**
   * The timestamp of the message in microseconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: number;
}

/**
 * Chat message object.
 */
export class GetChatMessages200ApplicationJSON extends SpeakeasyBase {
  /**
   * The date provided in the query parameter. If a date is not provided, the default value is the **current date**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  /**
   * List of message(s).
   */
  @SpeakeasyMetadata({ elemType: GetChatMessages200ApplicationJSONMessages })
  @Expose({ name: "messages" })
  @Type(() => GetChatMessages200ApplicationJSONMessages)
  messages?: GetChatMessages200ApplicationJSONMessages[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of records returned with a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;
}

export class GetChatMessagesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:**`200`<br>
   *
   * @remarks
   * List of chat messages returned.
   */
  @SpeakeasyMetadata()
  getChatMessages200ApplicationJSONObject?: GetChatMessages200ApplicationJSON;
}
