/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { MetricValue } from "./metricvalue";
import { Expose, Transform } from "class-transformer";

/**
 * One level of grouped data in the results.
 */
export class Group extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Keys" })
  keys?: string[];

  @SpeakeasyMetadata({ elemType: MetricValue })
  @Expose({ name: "Metrics" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, MetricValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], MetricValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  metrics?: Record<string, MetricValue>;
}
