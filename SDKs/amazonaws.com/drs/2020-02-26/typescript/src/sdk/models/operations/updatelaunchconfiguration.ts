/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The state of the Recovery Instance in EC2 after the recovery operation.
 */
export enum UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum {
  Stopped = "STOPPED",
  Started = "STARTED",
}

/**
 * Configuration of a machine's license.
 */
export class UpdateLaunchConfigurationRequestBodyLicensing extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "osByol" })
  osByol?: boolean;
}

/**
 * Whether Elastic Disaster Recovery should try to automatically choose the instance type that best matches the OS, CPU, and RAM of your Source Server.
 */
export enum UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum {
  None = "NONE",
  Basic = "BASIC",
}

export class UpdateLaunchConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Whether we should copy the Private IP of the Source Server to the Recovery Instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyPrivateIp" })
  copyPrivateIp?: boolean;

  /**
   * Whether we want to copy the tags of the Source Server to the EC2 machine of the Recovery Instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyTags" })
  copyTags?: boolean;

  /**
   * The state of the Recovery Instance in EC2 after the recovery operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchDisposition" })
  launchDisposition?: UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum;

  /**
   * Configuration of a machine's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licensing" })
  @Type(() => UpdateLaunchConfigurationRequestBodyLicensing)
  licensing?: UpdateLaunchConfigurationRequestBodyLicensing;

  /**
   * The name of the launch configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The ID of the Source Server that we want to retrieve a Launch Configuration for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceServerID" })
  sourceServerID: string;

  /**
   * Whether Elastic Disaster Recovery should try to automatically choose the instance type that best matches the OS, CPU, and RAM of your Source Server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetInstanceTypeRightSizingMethod" })
  targetInstanceTypeRightSizingMethod?: UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum;
}

export class UpdateLaunchConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateLaunchConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateLaunchConfigurationResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  launchConfiguration?: shared.LaunchConfiguration;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
