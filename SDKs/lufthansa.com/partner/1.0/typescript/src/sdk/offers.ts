/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Offers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * All Fares
   *
   * @remarks
   * Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
   */
  allFares(
    req: operations.AllFaresRequest,
    security: operations.AllFaresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AllFaresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AllFaresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/fares/allfares";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AllFaresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AllFaresResponse = new operations.AllFaresResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.allFares200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Best Fares
   *
   * @remarks
   * Retrieve best fares for the requested journey across multiple days or multiple months.
   */
  bestFares(
    req: operations.BestFaresRequest,
    security: operations.BestFaresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BestFaresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BestFaresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/fares/bestfares";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BestFaresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BestFaresResponse =
        new operations.BestFaresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bestFares200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deep Links
   *
   * @remarks
   * Returns valid deep links for the provided input parameters
   */
  deepLinks(
    req: operations.DeepLinksRequest,
    security: operations.DeepLinksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeepLinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeepLinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/fares/deeplink";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeepLinksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeepLinksResponse =
        new operations.DeepLinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deepLinks200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fares
   *
   * @remarks
   * Retrieve all available fares per fare family for a specific Origin & Destination on a given date
   */
  fares(
    req: operations.FaresRequest,
    security: operations.FaresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FaresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FaresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/fares/fares";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FaresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FaresResponse = new operations.FaresResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fares200ApplicationJSONString = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fares Subscriptions
   *
   * @remarks
   * Create a subscription for best price O&D. Receive regular updates on lowest fares
   */
  faresSubscriptions(
    req: operations.FaresSubscriptionsRequest,
    security: operations.FaresSubscriptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FaresSubscriptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FaresSubscriptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/offers/fares/subscriptions";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FaresSubscriptionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FaresSubscriptionsResponse =
        new operations.FaresSubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.faresSubscriptions200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * LH Deep Links - FFP
   *
   * @remarks
   * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
   */
  lhDeepLinksFFP(
    req: operations.LHDeepLinksFFPRequest,
    security: operations.LHDeepLinksFFPSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LHDeepLinksFFPResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LHDeepLinksFFPRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/offers/fares/deeplink/ffp";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LHDeepLinksFFPSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LHDeepLinksFFPResponse =
        new operations.LHDeepLinksFFPResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhDeepLinksFFP200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * LH Deep Links - ITCO
   *
   * @remarks
   * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
   */
  lhDeepLinksITCO(
    req: operations.LHDeepLinksITCORequest,
    security: operations.LHDeepLinksITCOSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LHDeepLinksITCOResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LHDeepLinksITCORequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/offers/fares/deeplink/itco";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LHDeepLinksITCOSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LHDeepLinksITCOResponse =
        new operations.LHDeepLinksITCOResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhDeepLinksITCO200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lowest Fares
   *
   * @remarks
   * Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
   */
  lowestFares(
    req: operations.LowestFaresRequest,
    security: operations.LowestFaresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LowestFaresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LowestFaresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/offers/fares/lowestfares";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LowestFaresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LowestFaresResponse =
        new operations.LowestFaresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lowestFares200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * OND Route
   *
   * @remarks
   * Returns LH route origin & destination information
   */
  ondRoute(
    req: operations.ONDRouteRequest,
    security: operations.ONDRouteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ONDRouteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ONDRouteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offers/ond/route/{origin}/{destination}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ONDRouteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ONDRouteResponse = new operations.ONDRouteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ondRoute200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * OND Status
   *
   * @remarks
   * Returns LH network route status information. Search for recently added or retired routes
   */
  ondStatus(
    req: operations.ONDStatusRequest,
    security: operations.ONDStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ONDStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ONDStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/ond/status";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ONDStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ONDStatusResponse =
        new operations.ONDStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ondStatus200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Top OND
   *
   * @remarks
   * Returns LH Top routes per country or across all countries
   */
  topOND(
    req: operations.TopONDRequest,
    security: operations.TopONDSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TopONDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TopONDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/offers/ond/top";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TopONDSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TopONDResponse = new operations.TopONDResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.topOND200ApplicationJSONString = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
