"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def gkehub_projects_locations_features_create(self, request: operations.GkehubProjectsLocationsFeaturesCreateRequest, security: operations.GkehubProjectsLocationsFeaturesCreateSecurity) -> operations.GkehubProjectsLocationsFeaturesCreateResponse:
        r"""Adds a new Feature."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsFeaturesCreateRequest, base_url, '/v1alpha/{parent}/features', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "feature_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsFeaturesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsFeaturesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_features_list(self, request: operations.GkehubProjectsLocationsFeaturesListRequest, security: operations.GkehubProjectsLocationsFeaturesListSecurity) -> operations.GkehubProjectsLocationsFeaturesListResponse:
        r"""Lists Features in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsFeaturesListRequest, base_url, '/v1alpha/{parent}/features', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsFeaturesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsFeaturesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFeaturesResponse])
                res.list_features_response = out

        return res

    def gkehub_projects_locations_fleets_create(self, request: operations.GkehubProjectsLocationsFleetsCreateRequest, security: operations.GkehubProjectsLocationsFleetsCreateSecurity) -> operations.GkehubProjectsLocationsFleetsCreateResponse:
        r"""Creates a fleet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsFleetsCreateRequest, base_url, '/v1alpha/{parent}/fleets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "fleet_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsFleetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsFleetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_fleets_list(self, request: operations.GkehubProjectsLocationsFleetsListRequest, security: operations.GkehubProjectsLocationsFleetsListSecurity) -> operations.GkehubProjectsLocationsFleetsListResponse:
        r"""Returns all fleets within an organization or a project that the caller has access to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsFleetsListRequest, base_url, '/v1alpha/{parent}/fleets', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsFleetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsFleetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFleetsResponse])
                res.list_fleets_response = out

        return res

    def gkehub_projects_locations_list(self, request: operations.GkehubProjectsLocationsListRequest, security: operations.GkehubProjectsLocationsListSecurity) -> operations.GkehubProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsListRequest, base_url, '/v1alpha/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def gkehub_projects_locations_memberships_bindings_create(self, request: operations.GkehubProjectsLocationsMembershipsBindingsCreateRequest, security: operations.GkehubProjectsLocationsMembershipsBindingsCreateSecurity) -> operations.GkehubProjectsLocationsMembershipsBindingsCreateResponse:
        r"""Creates a MembershipBinding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsBindingsCreateRequest, base_url, '/v1alpha/{parent}/bindings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "membership_binding_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsBindingsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsBindingsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_memberships_bindings_list(self, request: operations.GkehubProjectsLocationsMembershipsBindingsListRequest, security: operations.GkehubProjectsLocationsMembershipsBindingsListSecurity) -> operations.GkehubProjectsLocationsMembershipsBindingsListResponse:
        r"""Lists MembershipBindings."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsBindingsListRequest, base_url, '/v1alpha/{parent}/bindings', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsBindingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsBindingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMembershipBindingsResponse])
                res.list_membership_bindings_response = out

        return res

    def gkehub_projects_locations_memberships_create(self, request: operations.GkehubProjectsLocationsMembershipsCreateRequest, security: operations.GkehubProjectsLocationsMembershipsCreateSecurity) -> operations.GkehubProjectsLocationsMembershipsCreateResponse:
        r"""Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsCreateRequest, base_url, '/v1alpha/{parent}/memberships', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "membership_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_memberships_generate_connect_manifest(self, request: operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest, security: operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestSecurity) -> operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse:
        r"""Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest, base_url, '/v1alpha/{name}:generateConnectManifest', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateConnectManifestResponse])
                res.generate_connect_manifest_response = out

        return res

    def gkehub_projects_locations_memberships_get_iam_policy(self, request: operations.GkehubProjectsLocationsMembershipsGetIamPolicyRequest, security: operations.GkehubProjectsLocationsMembershipsGetIamPolicySecurity) -> operations.GkehubProjectsLocationsMembershipsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsGetIamPolicyRequest, base_url, '/v1alpha/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def gkehub_projects_locations_memberships_list(self, request: operations.GkehubProjectsLocationsMembershipsListRequest, security: operations.GkehubProjectsLocationsMembershipsListSecurity) -> operations.GkehubProjectsLocationsMembershipsListResponse:
        r"""Lists Memberships in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsListRequest, base_url, '/v1alpha/{parent}/memberships', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMembershipsResponse])
                res.list_memberships_response = out

        return res

    def gkehub_projects_locations_memberships_list_admin(self, request: operations.GkehubProjectsLocationsMembershipsListAdminRequest, security: operations.GkehubProjectsLocationsMembershipsListAdminSecurity) -> operations.GkehubProjectsLocationsMembershipsListAdminResponse:
        r"""Lists Memberships of admin clusters in a given project and location. **This method is only used internally**."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsListAdminRequest, base_url, '/v1alpha/{parent}/memberships:listAdmin', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsListAdminRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsListAdminResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAdminClusterMembershipsResponse])
                res.list_admin_cluster_memberships_response = out

        return res

    def gkehub_projects_locations_memberships_set_iam_policy(self, request: operations.GkehubProjectsLocationsMembershipsSetIamPolicyRequest, security: operations.GkehubProjectsLocationsMembershipsSetIamPolicySecurity) -> operations.GkehubProjectsLocationsMembershipsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsSetIamPolicyRequest, base_url, '/v1alpha/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def gkehub_projects_locations_memberships_test_iam_permissions(self, request: operations.GkehubProjectsLocationsMembershipsTestIamPermissionsRequest, security: operations.GkehubProjectsLocationsMembershipsTestIamPermissionsSecurity) -> operations.GkehubProjectsLocationsMembershipsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsTestIamPermissionsRequest, base_url, '/v1alpha/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def gkehub_projects_locations_memberships_validate_create(self, request: operations.GkehubProjectsLocationsMembershipsValidateCreateRequest, security: operations.GkehubProjectsLocationsMembershipsValidateCreateSecurity) -> operations.GkehubProjectsLocationsMembershipsValidateCreateResponse:
        r"""ValidateCreateMembership is a preflight check for CreateMembership. It checks the following: 1. Caller has the required `gkehub.memberships.create` permission. 2. The membership_id is still available."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsMembershipsValidateCreateRequest, base_url, '/v1alpha/{parent}/memberships:validateCreate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "validate_create_membership_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsMembershipsValidateCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsMembershipsValidateCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidateCreateMembershipResponse])
                res.validate_create_membership_response = out

        return res

    def gkehub_projects_locations_namespaces_create(self, request: operations.GkehubProjectsLocationsNamespacesCreateRequest, security: operations.GkehubProjectsLocationsNamespacesCreateSecurity) -> operations.GkehubProjectsLocationsNamespacesCreateResponse:
        r"""Creates a fleet namespace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsNamespacesCreateRequest, base_url, '/v1alpha/{parent}/namespaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "namespace_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsNamespacesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsNamespacesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_namespaces_list(self, request: operations.GkehubProjectsLocationsNamespacesListRequest, security: operations.GkehubProjectsLocationsNamespacesListSecurity) -> operations.GkehubProjectsLocationsNamespacesListResponse:
        r"""Lists fleet namespaces."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsNamespacesListRequest, base_url, '/v1alpha/{parent}/namespaces', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsNamespacesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsNamespacesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNamespacesResponse])
                res.list_namespaces_response = out

        return res

    def gkehub_projects_locations_namespaces_rbacrolebindings_create(self, request: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateRequest, security: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateSecurity) -> operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateResponse:
        r"""Creates a RBACRoleBinding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateRequest, base_url, '/v1alpha/{parent}/rbacrolebindings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rbac_role_binding_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_namespaces_rbacrolebindings_list(self, request: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListRequest, security: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListSecurity) -> operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListResponse:
        r"""Lists RBACRoleBinding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListRequest, base_url, '/v1alpha/{parent}/rbacrolebindings', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRBACRoleBindingsResponse])
                res.list_rbac_role_bindings_response = out

        return res

    def gkehub_projects_locations_operations_cancel(self, request: operations.GkehubProjectsLocationsOperationsCancelRequest, security: operations.GkehubProjectsLocationsOperationsCancelSecurity) -> operations.GkehubProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsOperationsCancelRequest, base_url, '/v1alpha/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def gkehub_projects_locations_operations_list(self, request: operations.GkehubProjectsLocationsOperationsListRequest, security: operations.GkehubProjectsLocationsOperationsListSecurity) -> operations.GkehubProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsOperationsListRequest, base_url, '/v1alpha/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def gkehub_projects_locations_scopes_create(self, request: operations.GkehubProjectsLocationsScopesCreateRequest, security: operations.GkehubProjectsLocationsScopesCreateSecurity) -> operations.GkehubProjectsLocationsScopesCreateResponse:
        r"""Creates a Scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsScopesCreateRequest, base_url, '/v1alpha/{parent}/scopes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scope_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsScopesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsScopesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_scopes_delete(self, request: operations.GkehubProjectsLocationsScopesDeleteRequest, security: operations.GkehubProjectsLocationsScopesDeleteSecurity) -> operations.GkehubProjectsLocationsScopesDeleteResponse:
        r"""Deletes a Scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsScopesDeleteRequest, base_url, '/v1alpha/{name}', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsScopesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsScopesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def gkehub_projects_locations_scopes_get(self, request: operations.GkehubProjectsLocationsScopesGetRequest, security: operations.GkehubProjectsLocationsScopesGetSecurity) -> operations.GkehubProjectsLocationsScopesGetResponse:
        r"""Returns the details of a Scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsScopesGetRequest, base_url, '/v1alpha/{name}', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsScopesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsScopesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Scope])
                res.scope = out

        return res

    def gkehub_projects_locations_scopes_list(self, request: operations.GkehubProjectsLocationsScopesListRequest, security: operations.GkehubProjectsLocationsScopesListSecurity) -> operations.GkehubProjectsLocationsScopesListResponse:
        r"""Lists Scopes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsScopesListRequest, base_url, '/v1alpha/{parent}/scopes', request)
        
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsScopesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsScopesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListScopesResponse])
                res.list_scopes_response = out

        return res

    def gkehub_projects_locations_scopes_patch(self, request: operations.GkehubProjectsLocationsScopesPatchRequest, security: operations.GkehubProjectsLocationsScopesPatchSecurity) -> operations.GkehubProjectsLocationsScopesPatchResponse:
        r"""Updates a scopes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GkehubProjectsLocationsScopesPatchRequest, base_url, '/v1alpha/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scope_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GkehubProjectsLocationsScopesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GkehubProjectsLocationsScopesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    