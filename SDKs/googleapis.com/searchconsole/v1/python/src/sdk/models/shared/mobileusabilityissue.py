"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MobileUsabilityIssueIssueTypeEnum(str, Enum):
    r"""Mobile-usability issue type."""
    MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED = 'MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED'
    USES_INCOMPATIBLE_PLUGINS = 'USES_INCOMPATIBLE_PLUGINS'
    CONFIGURE_VIEWPORT = 'CONFIGURE_VIEWPORT'
    FIXED_WIDTH_VIEWPORT = 'FIXED_WIDTH_VIEWPORT'
    SIZE_CONTENT_TO_VIEWPORT = 'SIZE_CONTENT_TO_VIEWPORT'
    USE_LEGIBLE_FONT_SIZES = 'USE_LEGIBLE_FONT_SIZES'
    TAP_TARGETS_TOO_CLOSE = 'TAP_TARGETS_TOO_CLOSE'

class MobileUsabilityIssueSeverityEnum(str, Enum):
    r"""Not returned; reserved for future use."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MobileUsabilityIssue:
    r"""Mobile-usability issue."""
    
    issue_type: Optional[MobileUsabilityIssueIssueTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueType'), 'exclude': lambda f: f is None }})
    r"""Mobile-usability issue type."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Additional information regarding the issue."""  
    severity: Optional[MobileUsabilityIssueSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Not returned; reserved for future use."""  
    