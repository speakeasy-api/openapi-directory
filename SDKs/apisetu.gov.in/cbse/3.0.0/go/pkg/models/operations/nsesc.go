// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NsescSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NsescRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NsescRequestBodyFormatEnum - The format of the certificate in response.
type NsescRequestBodyFormatEnum string

const (
	NsescRequestBodyFormatEnumPdf NsescRequestBodyFormatEnum = "pdf"
)

func (e *NsescRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NsescRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NsescRequestBodyFormatEnum: %s", s)
	}
}

// NsescRequestBody - Request format
type NsescRequestBody struct {
	CertificateParameters *NsescRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NsescRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nsesc504ApplicationJSONErrorEnum string

const (
	Nsesc504ApplicationJSONErrorEnumGatewayTimeout Nsesc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Nsesc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Nsesc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc504ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nsesc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Nsesc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Nsesc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc504ApplicationJSON - Gateway timeout
type Nsesc504ApplicationJSON struct {
	Error            *Nsesc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc503ApplicationJSONErrorEnum string

const (
	Nsesc503ApplicationJSONErrorEnumServiceUnavailable Nsesc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Nsesc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Nsesc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc503ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nsesc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Nsesc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Nsesc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc503ApplicationJSON - Service unavailable
type Nsesc503ApplicationJSON struct {
	Error            *Nsesc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc502ApplicationJSONErrorEnum string

const (
	Nsesc502ApplicationJSONErrorEnumBadGatewy Nsesc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Nsesc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Nsesc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc502ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nsesc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Nsesc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Nsesc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc502ApplicationJSON - Bad gateway
type Nsesc502ApplicationJSON struct {
	Error            *Nsesc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc500ApplicationJSONErrorEnum string

const (
	Nsesc500ApplicationJSONErrorEnumInternalServerError Nsesc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Nsesc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Nsesc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc500ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc500ApplicationJSONErrorDescriptionEnumInternalServerError Nsesc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Nsesc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Nsesc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc500ApplicationJSON - Internal server error
type Nsesc500ApplicationJSON struct {
	Error            *Nsesc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc404ApplicationJSONErrorEnum string

const (
	Nsesc404ApplicationJSONErrorEnumRecordNotFound Nsesc404ApplicationJSONErrorEnum = "record_not_found"
	Nsesc404ApplicationJSONErrorEnumURLNotFound    Nsesc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Nsesc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nsesc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc404ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nsesc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nsesc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nsesc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Nsesc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nsesc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc404ApplicationJSON - No record found
type Nsesc404ApplicationJSON struct {
	Error            *Nsesc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc401ApplicationJSONErrorEnum string

const (
	Nsesc401ApplicationJSONErrorEnumInvalidAuthentication Nsesc401ApplicationJSONErrorEnum = "invalid_authentication"
	Nsesc401ApplicationJSONErrorEnumInvalidAuthorization  Nsesc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Nsesc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nsesc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc401ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nsesc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nsesc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nsesc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Nsesc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nsesc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc401ApplicationJSON - Unauthorized access
type Nsesc401ApplicationJSON struct {
	Error            *Nsesc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nsesc400ApplicationJSONErrorEnum string

const (
	Nsesc400ApplicationJSONErrorEnumMissingParameter Nsesc400ApplicationJSONErrorEnum = "missing_parameter"
	Nsesc400ApplicationJSONErrorEnumInvalidParameter Nsesc400ApplicationJSONErrorEnum = "invalid_parameter"
	Nsesc400ApplicationJSONErrorEnumInvalidFormat    Nsesc400ApplicationJSONErrorEnum = "invalid_format"
	Nsesc400ApplicationJSONErrorEnumInvalidTxnid     Nsesc400ApplicationJSONErrorEnum = "invalid_txnid"
	Nsesc400ApplicationJSONErrorEnumInvalidConsentid Nsesc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Nsesc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nsesc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Nsesc400ApplicationJSONErrorDescriptionEnum string

const (
	Nsesc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nsesc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nsesc400ApplicationJSONErrorDescriptionEnumBadRequest                              Nsesc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nsesc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nsesc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nsesc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nsesc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nsesc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nsesc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Nsesc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nsesc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nsesc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nsesc400ApplicationJSON - Bad request
type Nsesc400ApplicationJSON struct {
	Error            *Nsesc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nsesc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NsescResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nsesc400ApplicationJSONObject *Nsesc400ApplicationJSON
	// Unauthorized access
	Nsesc401ApplicationJSONObject *Nsesc401ApplicationJSON
	// No record found
	Nsesc404ApplicationJSONObject *Nsesc404ApplicationJSON
	// Internal server error
	Nsesc500ApplicationJSONObject *Nsesc500ApplicationJSON
	// Bad gateway
	Nsesc502ApplicationJSONObject *Nsesc502ApplicationJSON
	// Service unavailable
	Nsesc503ApplicationJSONObject *Nsesc503ApplicationJSON
	// Gateway timeout
	Nsesc504ApplicationJSONObject *Nsesc504ApplicationJSON
}
