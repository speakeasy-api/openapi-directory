// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DataPointsCountStatusEnum - Status of the datapoint
type DataPointsCountStatusEnum string

const (
	DataPointsCountStatusEnumDeleted DataPointsCountStatusEnum = "deleted"
	DataPointsCountStatusEnumActive  DataPointsCountStatusEnum = "active"
	DataPointsCountStatusEnumPaused  DataPointsCountStatusEnum = "paused"
	DataPointsCountStatusEnumSpam    DataPointsCountStatusEnum = "spam"
)

func (e DataPointsCountStatusEnum) ToPointer() *DataPointsCountStatusEnum {
	return &e
}

func (e *DataPointsCountStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deleted":
		fallthrough
	case "active":
		fallthrough
	case "paused":
		fallthrough
	case "spam":
		*e = DataPointsCountStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsCountStatusEnum: %v", v)
	}
}

// DataPointsCountTypeEnum - Type of the datapoint ("tp"/"tl")
type DataPointsCountTypeEnum string

const (
	DataPointsCountTypeEnumTp DataPointsCountTypeEnum = "tp"
	DataPointsCountTypeEnumTl DataPointsCountTypeEnum = "tl"
)

func (e DataPointsCountTypeEnum) ToPointer() *DataPointsCountTypeEnum {
	return &e
}

func (e *DataPointsCountTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tp":
		fallthrough
	case "tl":
		*e = DataPointsCountTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsCountTypeEnum: %v", v)
	}
}

type DataPointsCountRequest struct {
	// Exclude datapoints created before this date (YYYYMMDD)
	CreatedAfter *string `queryParam:"style=form,explode=true,name=createdAfter"`
	// Exclude datapoints created after this date (YYYYMMDD)
	CreatedBefore *string `queryParam:"style=form,explode=true,name=createdBefore"`
	// Filter fields by favourite status
	OnlyFavorites *bool `queryParam:"style=form,explode=true,name=onlyFavorites"`
	// Status of the datapoint
	Status *DataPointsCountStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// A comma separated list of tags you want to filter with.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// Filter fields by this pattern
	TextSearch *string `queryParam:"style=form,explode=true,name=textSearch"`
	// Type of the datapoint ("tp"/"tl")
	Type *DataPointsCountTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DataPointsCountResponse struct {
	APICoreResponsesCountResponce *shared.APICoreResponsesCountResponce
	Body                          []byte
	ContentType                   string
	StatusCode                    int
	RawResponse                   *http.Response
}
