/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PromotionEditFields {
    /**
     * Creation date of the promotion (requires 'lasts' param - 'date')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("begins_at")
    public String beginsAt;
    public PromotionEditFields withBeginsAt(String beginsAt) {
        this.beginsAt = beginsAt;
        return this;
    }
    
    /**
     * Controls the promotion's condition ('none', 'price', 'qty')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buys_at_least")
    public String buysAtLeast;
    public PromotionEditFields withBuysAtLeast(String buysAtLeast) {
        this.buysAtLeast = buysAtLeast;
        return this;
    }
    
    /**
     * Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Id[] categories;
    public PromotionEditFields withCategories(Id[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Code of the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public PromotionEditFields withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Minimum order amount to validate the promotion (requires 'buys_at_least' param - 'price')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition_price")
    public Float conditionPrice;
    public PromotionEditFields withConditionPrice(Float conditionPrice) {
        this.conditionPrice = conditionPrice;
        return this;
    }
    
    /**
     * Minimum quantity of ordered itens to validate the promotion (requires 'buys_at_least' param - 'qty')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition_qty")
    public Integer conditionQty;
    public PromotionEditFields withConditionQty(Integer conditionQty) {
        this.conditionQty = conditionQty;
        return this;
    }
    
    /**
     * True if the promotion can be acumulated with others
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative")
    public Boolean cumulative;
    public PromotionEditFields withCumulative(Boolean cumulative) {
        this.cumulative = cumulative;
        return this;
    }
    
    /**
     * Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_categories")
    public Id[] customerCategories;
    public PromotionEditFields withCustomerCategories(Id[] customerCategories) {
        this.customerCategories = customerCategories;
        return this;
    }
    
    /**
     * Controls to which customers the promotion will be applied ('all', 'loggedin', 'categories', 'guests')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customers")
    public String customers;
    public PromotionEditFields withCustomers(String customers) {
        this.customers = customers;
        return this;
    }
    
    /**
     * Fixed discount amount of the promotion (requires 'type' param - 'fix')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount_fix")
    public Float discountAmountFix;
    public PromotionEditFields withDiscountAmountFix(Float discountAmountFix) {
        this.discountAmountFix = discountAmountFix;
        return this;
    }
    
    /**
     * Percentual discount amount of the promotion (requires 'type' param - 'percentage')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount_percent")
    public Float discountAmountPercent;
    public PromotionEditFields withDiscountAmountPercent(Float discountAmountPercent) {
        this.discountAmountPercent = discountAmountPercent;
        return this;
    }
    
    /**
     * Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_target")
    public String discountTarget;
    public PromotionEditFields withDiscountTarget(String discountTarget) {
        this.discountTarget = discountTarget;
        return this;
    }
    
    /**
     * If the promotion is to be temporarily disabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public PromotionEditFields withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Expiration date of the promotion (requires 'lasts' param - 'date')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    public String expiresAt;
    public PromotionEditFields withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * Controls when the promotion will expire ('none', 'date', 'max_times_used')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lasts")
    public String lasts;
    public PromotionEditFields withLasts(String lasts) {
        this.lasts = lasts;
        return this;
    }
    
    /**
     * Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_times_used")
    public Integer maxTimesUsed;
    public PromotionEditFields withMaxTimesUsed(Integer maxTimesUsed) {
        this.maxTimesUsed = maxTimesUsed;
        return this;
    }
    
    /**
     * Name of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PromotionEditFields withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public Id[] products;
    public PromotionEditFields withProducts(Id[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products_x")
    public Id[] productsX;
    public PromotionEditFields withProductsX(Id[] productsX) {
        this.productsX = productsX;
        return this;
    }
    
    /**
     * Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity_x")
    public Integer quantityX;
    public PromotionEditFields withQuantityX(Integer quantityX) {
        this.quantityX = quantityX;
        return this;
    }
    
    /**
     * Controls if the discount will be a fixed area ('fix', 'percentage')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public PromotionEditFields withType(String type) {
        this.type = type;
        return this;
    }
    
}
