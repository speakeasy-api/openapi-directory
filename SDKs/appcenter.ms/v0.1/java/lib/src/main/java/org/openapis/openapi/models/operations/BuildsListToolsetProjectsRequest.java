/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class BuildsListToolsetProjectsRequest {
    /**
     * The name of the application
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=app_name")
    public String appName;
    public BuildsListToolsetProjectsRequest withAppName(String appName) {
        this.appName = appName;
        return this;
    }
    
    /**
     * The branch name
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=branch")
    public String branch;
    public BuildsListToolsetProjectsRequest withBranch(String branch) {
        this.branch = branch;
        return this;
    }
    
    /**
     * The depth of the repository to search for project files
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxSearchDepth")
    public Long maxSearchDepth;
    public BuildsListToolsetProjectsRequest withMaxSearchDepth(Long maxSearchDepth) {
        this.maxSearchDepth = maxSearchDepth;
        return this;
    }
    
    /**
     * The desired OS for the project scan; normally the same as the app OS
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=os")
    public BuildsListToolsetProjectsOsEnum os;
    public BuildsListToolsetProjectsRequest withOs(BuildsListToolsetProjectsOsEnum os) {
        this.os = os;
        return this;
    }
    
    /**
     * The name of the owner
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=owner_name")
    public String ownerName;
    public BuildsListToolsetProjectsRequest withOwnerName(String ownerName) {
        this.ownerName = ownerName;
        return this;
    }
    
    /**
     * The desired platform for the project scan
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=platform")
    public BuildsListToolsetProjectsPlatformEnum platform;
    public BuildsListToolsetProjectsRequest withPlatform(BuildsListToolsetProjectsPlatformEnum platform) {
        this.platform = platform;
        return this;
    }
    
}
