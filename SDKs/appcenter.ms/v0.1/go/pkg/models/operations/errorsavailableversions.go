// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ErrorsAvailableVersionsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ErrorsAvailableVersionsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// ErrorsAvailableVersionsDollarInlinecountEnum - Controls whether or not to include a count of all the items across all pages.
type ErrorsAvailableVersionsDollarInlinecountEnum string

const (
	ErrorsAvailableVersionsDollarInlinecountEnumAllpages ErrorsAvailableVersionsDollarInlinecountEnum = "allpages"
	ErrorsAvailableVersionsDollarInlinecountEnumNone     ErrorsAvailableVersionsDollarInlinecountEnum = "none"
)

func (e *ErrorsAvailableVersionsDollarInlinecountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allpages":
		fallthrough
	case "none":
		*e = ErrorsAvailableVersionsDollarInlinecountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsAvailableVersionsDollarInlinecountEnum: %s", s)
	}
}

// ErrorsAvailableVersionsErrorTypeEnum - Type of error (handled vs unhandled), including All
type ErrorsAvailableVersionsErrorTypeEnum string

const (
	ErrorsAvailableVersionsErrorTypeEnumAll            ErrorsAvailableVersionsErrorTypeEnum = "all"
	ErrorsAvailableVersionsErrorTypeEnumUnhandledError ErrorsAvailableVersionsErrorTypeEnum = "unhandledError"
	ErrorsAvailableVersionsErrorTypeEnumHandledError   ErrorsAvailableVersionsErrorTypeEnum = "handledError"
)

func (e *ErrorsAvailableVersionsErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "unhandledError":
		fallthrough
	case "handledError":
		*e = ErrorsAvailableVersionsErrorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsAvailableVersionsErrorTypeEnum: %s", s)
	}
}

type ErrorsAvailableVersionsQueryParams struct {
	// A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
	DollarFilter *string `queryParam:"style=form,explode=true,name=$filter"`
	// Controls whether or not to include a count of all the items across all pages.
	DollarInlinecount *ErrorsAvailableVersionsDollarInlinecountEnum `queryParam:"style=form,explode=true,name=$inlinecount"`
	// The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
	DollarSkip *int64 `queryParam:"style=form,explode=true,name=$skip"`
	// The maximum number of results to return. (0 will fetch all results till the max number.)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// Last date time in data in ISO 8601 date time format
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Type of error (handled vs unhandled), including All
	ErrorType *ErrorsAvailableVersionsErrorTypeEnum `queryParam:"style=form,explode=true,name=errorType"`
	// Start date time in data in ISO 8601 date time format
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
}

type ErrorsAvailableVersionsRequest struct {
	PathParams  ErrorsAvailableVersionsPathParams
	QueryParams ErrorsAvailableVersionsQueryParams
	Security    ErrorsAvailableVersionsSecurity
}

type ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsAvailableVersionsDefaultApplicationJSONError struct {
	Code    ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                     `json:"message"`
}

// ErrorsAvailableVersionsDefaultApplicationJSON - Error code with reason.
type ErrorsAvailableVersionsDefaultApplicationJSON struct {
	Error ErrorsAvailableVersionsDefaultApplicationJSONError `json:"error"`
}

// ErrorsAvailableVersions200ApplicationJSON - A list of available versions in the time range.
type ErrorsAvailableVersions200ApplicationJSON struct {
	// The full number of versions across all pages.
	TotalCount *int64 `json:"total_count,omitempty"`
	// List of available versions.
	Versions []string `json:"versions,omitempty"`
}

type ErrorsAvailableVersionsResponse struct {
	ContentType string
	// A list of available versions in the time range.
	ErrorsAvailableVersions200ApplicationJSONObject *ErrorsAvailableVersions200ApplicationJSON
	// Error code with reason.
	ErrorsAvailableVersionsDefaultApplicationJSONObject *ErrorsAvailableVersionsDefaultApplicationJSON
	StatusCode                                          int
	RawResponse                                         *http.Response
}
