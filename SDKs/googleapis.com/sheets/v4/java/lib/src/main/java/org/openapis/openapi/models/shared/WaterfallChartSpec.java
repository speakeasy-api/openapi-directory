/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WaterfallChartSpec - A waterfall chart.
 */
public class WaterfallChartSpec {
    /**
     * Properties that describe the style of a line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorLineStyle")
    public LineStyle connectorLineStyle;
    public WaterfallChartSpec withConnectorLineStyle(LineStyle connectorLineStyle) {
        this.connectorLineStyle = connectorLineStyle;
        return this;
    }
    
    /**
     * The domain of a waterfall chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public WaterfallChartDomain domain;
    public WaterfallChartSpec withDomain(WaterfallChartDomain domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * True to interpret the first value as a total.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstValueIsTotal")
    public Boolean firstValueIsTotal;
    public WaterfallChartSpec withFirstValueIsTotal(Boolean firstValueIsTotal) {
        this.firstValueIsTotal = firstValueIsTotal;
        return this;
    }
    
    /**
     * True to hide connector lines between columns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideConnectorLines")
    public Boolean hideConnectorLines;
    public WaterfallChartSpec withHideConnectorLines(Boolean hideConnectorLines) {
        this.hideConnectorLines = hideConnectorLines;
        return this;
    }
    
    /**
     * The data this waterfall chart is visualizing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("series")
    public WaterfallChartSeries[] series;
    public WaterfallChartSpec withSeries(WaterfallChartSeries[] series) {
        this.series = series;
        return this;
    }
    
    /**
     * The stacked type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackedType")
    public WaterfallChartSpecStackedTypeEnum stackedType;
    public WaterfallChartSpec withStackedType(WaterfallChartSpecStackedTypeEnum stackedType) {
        this.stackedType = stackedType;
        return this;
    }
    
    /**
     * Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDataLabel")
    public DataLabel totalDataLabel;
    public WaterfallChartSpec withTotalDataLabel(DataLabel totalDataLabel) {
        this.totalDataLabel = totalDataLabel;
        return this;
    }
    
}
