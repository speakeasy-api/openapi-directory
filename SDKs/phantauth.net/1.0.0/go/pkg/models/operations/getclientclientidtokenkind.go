// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetClientClientIDTokenKindKindEnum - Token type
type GetClientClientIDTokenKindKindEnum string

const (
	GetClientClientIDTokenKindKindEnumRegistration GetClientClientIDTokenKindKindEnum = "'registration'"
	GetClientClientIDTokenKindKindEnumSelfie       GetClientClientIDTokenKindKindEnum = "'selfie'"
	GetClientClientIDTokenKindKindEnumPlain        GetClientClientIDTokenKindKindEnum = "'plain'"
)

func (e *GetClientClientIDTokenKindKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "'registration'":
		fallthrough
	case "'selfie'":
		fallthrough
	case "'plain'":
		*e = GetClientClientIDTokenKindKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientClientIDTokenKindKindEnum: %s", s)
	}
}

type GetClientClientIDTokenKindRequest struct {
	// A client ID or email.
	ClientID string `pathParam:"style=simple,explode=false,name=client_id"`
	// Token type
	Kind GetClientClientIDTokenKindKindEnum `pathParam:"style=simple,explode=false,name=kind"`
}

type GetClientClientIDTokenKindResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
