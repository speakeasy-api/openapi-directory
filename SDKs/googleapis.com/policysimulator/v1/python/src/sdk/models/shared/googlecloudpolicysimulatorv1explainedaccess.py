"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudpolicysimulatorv1explainedpolicy as shared_googlecloudpolicysimulatorv1explainedpolicy
from ..shared import googlerpcstatus as shared_googlerpcstatus
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudPolicysimulatorV1ExplainedAccessAccessStateEnum(str, Enum):
    r"""Whether the principal in the access tuple has permission to access the resource in the access tuple under the given policies."""
    ACCESS_STATE_UNSPECIFIED = 'ACCESS_STATE_UNSPECIFIED'
    GRANTED = 'GRANTED'
    NOT_GRANTED = 'NOT_GRANTED'
    UNKNOWN_CONDITIONAL = 'UNKNOWN_CONDITIONAL'
    UNKNOWN_INFO_DENIED = 'UNKNOWN_INFO_DENIED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudPolicysimulatorV1ExplainedAccess:
    r"""Details about how a set of policies, listed in ExplainedPolicy, resulted in a certain AccessState when replaying an access tuple."""
    
    access_state: Optional[GoogleCloudPolicysimulatorV1ExplainedAccessAccessStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessState'), 'exclude': lambda f: f is None }})
    r"""Whether the principal in the access tuple has permission to access the resource in the access tuple under the given policies."""  
    errors: Optional[list[shared_googlerpcstatus.GoogleRPCStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""If the AccessState is `UNKNOWN`, this field contains a list of errors explaining why the result is `UNKNOWN`. If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is omitted."""  
    policies: Optional[list[shared_googlecloudpolicysimulatorv1explainedpolicy.GoogleCloudPolicysimulatorV1ExplainedPolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policies'), 'exclude': lambda f: f is None }})
    r"""If the AccessState is `UNKNOWN`, this field contains the policies that led to that result. If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is omitted."""  
    