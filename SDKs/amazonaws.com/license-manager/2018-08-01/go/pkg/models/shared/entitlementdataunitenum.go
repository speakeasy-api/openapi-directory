// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntitlementDataUnitEnum string

const (
	EntitlementDataUnitEnumCount           EntitlementDataUnitEnum = "Count"
	EntitlementDataUnitEnumNone            EntitlementDataUnitEnum = "None"
	EntitlementDataUnitEnumSeconds         EntitlementDataUnitEnum = "Seconds"
	EntitlementDataUnitEnumMicroseconds    EntitlementDataUnitEnum = "Microseconds"
	EntitlementDataUnitEnumMilliseconds    EntitlementDataUnitEnum = "Milliseconds"
	EntitlementDataUnitEnumBytes           EntitlementDataUnitEnum = "Bytes"
	EntitlementDataUnitEnumKilobytes       EntitlementDataUnitEnum = "Kilobytes"
	EntitlementDataUnitEnumMegabytes       EntitlementDataUnitEnum = "Megabytes"
	EntitlementDataUnitEnumGigabytes       EntitlementDataUnitEnum = "Gigabytes"
	EntitlementDataUnitEnumTerabytes       EntitlementDataUnitEnum = "Terabytes"
	EntitlementDataUnitEnumBits            EntitlementDataUnitEnum = "Bits"
	EntitlementDataUnitEnumKilobits        EntitlementDataUnitEnum = "Kilobits"
	EntitlementDataUnitEnumMegabits        EntitlementDataUnitEnum = "Megabits"
	EntitlementDataUnitEnumGigabits        EntitlementDataUnitEnum = "Gigabits"
	EntitlementDataUnitEnumTerabits        EntitlementDataUnitEnum = "Terabits"
	EntitlementDataUnitEnumPercent         EntitlementDataUnitEnum = "Percent"
	EntitlementDataUnitEnumBytesSecond     EntitlementDataUnitEnum = "Bytes/Second"
	EntitlementDataUnitEnumKilobytesSecond EntitlementDataUnitEnum = "Kilobytes/Second"
	EntitlementDataUnitEnumMegabytesSecond EntitlementDataUnitEnum = "Megabytes/Second"
	EntitlementDataUnitEnumGigabytesSecond EntitlementDataUnitEnum = "Gigabytes/Second"
	EntitlementDataUnitEnumTerabytesSecond EntitlementDataUnitEnum = "Terabytes/Second"
	EntitlementDataUnitEnumBitsSecond      EntitlementDataUnitEnum = "Bits/Second"
	EntitlementDataUnitEnumKilobitsSecond  EntitlementDataUnitEnum = "Kilobits/Second"
	EntitlementDataUnitEnumMegabitsSecond  EntitlementDataUnitEnum = "Megabits/Second"
	EntitlementDataUnitEnumGigabitsSecond  EntitlementDataUnitEnum = "Gigabits/Second"
	EntitlementDataUnitEnumTerabitsSecond  EntitlementDataUnitEnum = "Terabits/Second"
	EntitlementDataUnitEnumCountSecond     EntitlementDataUnitEnum = "Count/Second"
)

func (e *EntitlementDataUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Count":
		fallthrough
	case "None":
		fallthrough
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		*e = EntitlementDataUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementDataUnitEnum: %s", s)
	}
}
