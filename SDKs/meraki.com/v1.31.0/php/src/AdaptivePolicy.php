<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AdaptivePolicy 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates new adaptive policy ACL
     * 
     * Creates new adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
     */
	public function createOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new adaptive policy group
     * 
     * Creates a new adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
     */
	public function createOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an Adaptive Policy
     * 
     * Add an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
     */
	public function createOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy ACL
     * 
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
     */
	public function deleteOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
     */
	public function deleteOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an Adaptive Policy
     * 
     * Delete an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
     */
	public function deleteOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns the adaptive policy ACL information
     * 
     * Returns the adaptive policy ACL information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
     */
	public function getOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy ACLs in a organization
     * 
     * List adaptive policy ACLs in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
     */
	public function getOrganizationAdaptivePolicyAcls(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcls200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an adaptive policy group
     * 
     * Returns an adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
     */
	public function getOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy groups in a organization
     * 
     * List adaptive policy groups in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
     */
	public function getOrganizationAdaptivePolicyGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
     */
	public function getOrganizationAdaptivePolicyOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policies in an organization
     * 
     * List adaptive policies in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
     */
	public function getOrganizationAdaptivePolicyPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an adaptive policy
     * 
     * Return an adaptive policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
     */
	public function getOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns global adaptive policy settings in an organization
     * 
     * Returns global adaptive policy settings in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
     */
	public function getOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy ACL
     * 
     * Updates an adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
     */
	public function updateOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy group
     * 
     * Updates an adaptive policy group. If updating "Infrastructure", only the SGT is allowed. Cannot update "Unknown".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
     */
	public function updateOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Adaptive Policy
     * 
     * Update an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
     */
	public function updateOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update global adaptive policy settings
     * 
     * Update global adaptive policy settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
     */
	public function updateOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}