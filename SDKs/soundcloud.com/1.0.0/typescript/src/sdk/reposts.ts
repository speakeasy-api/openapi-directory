/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Reposting Tracks & Playlists.
 */
export class Reposts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Removes a repost on a playlist as the authenticated user
   */
  deleteRepostsPlaylistsPlaylistId(
    req: operations.DeleteRepostsPlaylistsPlaylistIdRequest,
    security: operations.DeleteRepostsPlaylistsPlaylistIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRepostsPlaylistsPlaylistIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRepostsPlaylistsPlaylistIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reposts/playlists/{playlist_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteRepostsPlaylistsPlaylistIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRepostsPlaylistsPlaylistIdResponse =
        new operations.DeleteRepostsPlaylistsPlaylistIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a repost on a track as the authenticated user
   */
  deleteRepostsTracksTrackId(
    req: operations.DeleteRepostsTracksTrackIdRequest,
    security: operations.DeleteRepostsTracksTrackIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRepostsTracksTrackIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRepostsTracksTrackIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reposts/tracks/{track_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteRepostsTracksTrackIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRepostsTracksTrackIdResponse =
        new operations.DeleteRepostsTracksTrackIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reposts a playlist as the authenticated user
   */
  postRepostsPlaylistsPlaylistId(
    req: operations.PostRepostsPlaylistsPlaylistIdRequest,
    security: operations.PostRepostsPlaylistsPlaylistIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRepostsPlaylistsPlaylistIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRepostsPlaylistsPlaylistIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reposts/playlists/{playlist_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostRepostsPlaylistsPlaylistIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRepostsPlaylistsPlaylistIdResponse =
        new operations.PostRepostsPlaylistsPlaylistIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reposts a track as the authenticated user
   */
  postRepostsTracksTrackId(
    req: operations.PostRepostsTracksTrackIdRequest,
    security: operations.PostRepostsTracksTrackIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRepostsTracksTrackIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRepostsTracksTrackIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reposts/tracks/{track_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostRepostsTracksTrackIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRepostsTracksTrackIdResponse =
        new operations.PostRepostsTracksTrackIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
