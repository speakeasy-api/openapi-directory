/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETGETReservedNodeExchangeConfigurationOptionsActionEnum {
  GetReservedNodeExchangeConfigurationOptions = "GetReservedNodeExchangeConfigurationOptions",
}

/**
 * The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
 */
export enum GETGETReservedNodeExchangeConfigurationOptionsActionTypeEnum {
  RestoreCluster = "restore-cluster",
  ResizeCluster = "resize-cluster",
}

export enum GETGETReservedNodeExchangeConfigurationOptionsVersionEnum {
  TwoThousandAndTwelve1201 = "2012-12-01",
}

export class GETGETReservedNodeExchangeConfigurationOptionsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETGETReservedNodeExchangeConfigurationOptionsActionEnum;

  /**
   * The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ActionType",
  })
  actionType: GETGETReservedNodeExchangeConfigurationOptionsActionTypeEnum;

  /**
   * The identifier for the cluster that is the source for a reserved-node exchange.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ClusterIdentifier",
  })
  clusterIdentifier?: string;

  /**
   * An optional pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Marker",
  })
  marker?: string;

  /**
   * The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MaxRecords",
  })
  maxRecords?: number;

  /**
   * The identifier for the snapshot that is the source for the reserved-node exchange.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SnapshotIdentifier",
  })
  snapshotIdentifier?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETGETReservedNodeExchangeConfigurationOptionsVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETGETReservedNodeExchangeConfigurationOptionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
