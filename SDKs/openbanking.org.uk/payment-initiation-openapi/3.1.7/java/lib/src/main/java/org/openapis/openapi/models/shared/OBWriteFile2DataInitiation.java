/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * OBWriteFile2DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
 */
public class OBWriteFile2DataInitiation {
    /**
     * Total of all individual amounts included in the group, irrespective of currencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ControlSum")
    public Double controlSum;
    public OBWriteFile2DataInitiation withControlSum(Double controlSum) {
        this.controlSum = controlSum;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteFile2DataInitiationDebtorAccount debtorAccount;
    public OBWriteFile2DataInitiation withDebtorAccount(OBWriteFile2DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * A base64 encoding of a SHA256 hash of the file to be uploaded.
     */
    @JsonProperty("FileHash")
    public String fileHash;
    public OBWriteFile2DataInitiation withFileHash(String fileHash) {
        this.fileHash = fileHash;
        return this;
    }
    
    /**
     * Reference for the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FileReference")
    public String fileReference;
    public OBWriteFile2DataInitiation withFileReference(String fileReference) {
        this.fileReference = fileReference;
        return this;
    }
    
    /**
     * Specifies the payment file type.
     */
    @JsonProperty("FileType")
    public String fileType;
    public OBWriteFile2DataInitiation withFileType(String fileType) {
        this.fileType = fileType;
        return this;
    }
    
    /**
     * User community specific instrument.
     * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LocalInstrument")
    public String localInstrument;
    public OBWriteFile2DataInitiation withLocalInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
        return this;
    }
    
    /**
     * Number of individual transactions contained in the payment information group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumberOfTransactions")
    public String numberOfTransactions;
    public OBWriteFile2DataInitiation withNumberOfTransactions(String numberOfTransactions) {
        this.numberOfTransactions = numberOfTransactions;
        return this;
    }
    
    /**
     * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RemittanceInformation")
    public OBWriteFile2DataInitiationRemittanceInformation remittanceInformation;
    public OBWriteFile2DataInitiation withRemittanceInformation(OBWriteFile2DataInitiationRemittanceInformation remittanceInformation) {
        this.remittanceInformation = remittanceInformation;
        return this;
    }
    
    /**
     * Date at which the initiating party requests the clearing agent to process the payment. 
     * Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RequestedExecutionDateTime")
    public OffsetDateTime requestedExecutionDateTime;
    public OBWriteFile2DataInitiation withRequestedExecutionDateTime(OffsetDateTime requestedExecutionDateTime) {
        this.requestedExecutionDateTime = requestedExecutionDateTime;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;
    public OBWriteFile2DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
}
