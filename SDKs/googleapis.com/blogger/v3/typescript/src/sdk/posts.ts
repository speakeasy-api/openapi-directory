/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Posts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a post by blog id and post id.
   */
  bloggerPostsDelete(
    req: operations.BloggerPostsDeleteRequest,
    security: operations.BloggerPostsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsDeleteResponse =
        new operations.BloggerPostsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a post by blog id and post id
   */
  bloggerPostsGet(
    req: operations.BloggerPostsGetRequest,
    security: operations.BloggerPostsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsGetResponse =
        new operations.BloggerPostsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a post by path.
   */
  bloggerPostsGetByPath(
    req: operations.BloggerPostsGetByPathRequest,
    security: operations.BloggerPostsGetByPathSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsGetByPathResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsGetByPathRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/bypath",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsGetByPathSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsGetByPathResponse =
        new operations.BloggerPostsGetByPathResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a post.
   */
  bloggerPostsInsert(
    req: operations.BloggerPostsInsertRequest,
    security: operations.BloggerPostsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "post",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsInsertResponse =
        new operations.BloggerPostsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists posts.
   */
  bloggerPostsList(
    req: operations.BloggerPostsListRequest,
    security: operations.BloggerPostsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsListResponse =
        new operations.BloggerPostsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postList = utils.objectToClass(httpRes?.data, shared.PostList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a post.
   */
  bloggerPostsPatch(
    req: operations.BloggerPostsPatchRequest,
    security: operations.BloggerPostsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "post",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsPatchResponse =
        new operations.BloggerPostsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Publishes a post.
   */
  bloggerPostsPublish(
    req: operations.BloggerPostsPublishRequest,
    security: operations.BloggerPostsPublishSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsPublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsPublishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/publish",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsPublishSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsPublishResponse =
        new operations.BloggerPostsPublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reverts a published or scheduled post to draft state.
   */
  bloggerPostsRevert(
    req: operations.BloggerPostsRevertRequest,
    security: operations.BloggerPostsRevertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsRevertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsRevertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/revert",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsRevertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsRevertResponse =
        new operations.BloggerPostsRevertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Searches for posts matching given query terms in the specified blog.
   */
  bloggerPostsSearch(
    req: operations.BloggerPostsSearchRequest,
    security: operations.BloggerPostsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsSearchResponse =
        new operations.BloggerPostsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postList = utils.objectToClass(httpRes?.data, shared.PostList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a post by blog id and post id.
   */
  bloggerPostsUpdate(
    req: operations.BloggerPostsUpdateRequest,
    security: operations.BloggerPostsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPostsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPostsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "post",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPostsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPostsUpdateResponse =
        new operations.BloggerPostsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.post = utils.objectToClass(httpRes?.data, shared.Post);
          }
          break;
      }

      return res;
    });
  }
}
