// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestNodeXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestNodeXSdsDateFormatEnum string

const (
	RequestNodeXSdsDateFormatEnumUtc    RequestNodeXSdsDateFormatEnum = "UTC"
	RequestNodeXSdsDateFormatEnumLocal  RequestNodeXSdsDateFormatEnum = "LOCAL"
	RequestNodeXSdsDateFormatEnumOffset RequestNodeXSdsDateFormatEnum = "OFFSET"
	RequestNodeXSdsDateFormatEnumEpoch  RequestNodeXSdsDateFormatEnum = "EPOCH"
	RequestNodeXSdsDateFormatEnumLeet   RequestNodeXSdsDateFormatEnum = "LEET"
)

func (e RequestNodeXSdsDateFormatEnum) ToPointer() *RequestNodeXSdsDateFormatEnum {
	return &e
}

func (e *RequestNodeXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestNodeXSdsDateFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestNodeXSdsDateFormatEnum: %v", v)
	}
}

type RequestNodeRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestNodeXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Node ID
	NodeID int64 `pathParam:"style=simple,explode=false,name=node_id"`
}

type RequestNodeResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	// OK
	Node        *shared.Node
	StatusCode  int
	RawResponse *http.Response
}
