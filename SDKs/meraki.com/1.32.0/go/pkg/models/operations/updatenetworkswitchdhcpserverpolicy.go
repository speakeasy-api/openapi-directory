// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlertsEmail - Email alert settings for DHCP servers
type UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlertsEmail struct {
	// When enabled, send an email if a new DHCP server is seen. Default value is false.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlerts - Alert settings for DHCP servers
type UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlerts struct {
	// Email alert settings for DHCP servers
	Email *UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlertsEmail `json:"email,omitempty"`
}

// UpdateNetworkSwitchDhcpServerPolicyRequestBodyArpInspection - Dynamic ARP Inspection settings
type UpdateNetworkSwitchDhcpServerPolicyRequestBodyArpInspection struct {
	// Enable or disable Dynamic ARP Inspection on the network. Default value is false.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum - 'allow' or 'block' new DHCP servers. Default value is 'allow'.
type UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum string

const (
	UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnumAllow UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum = "allow"
	UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnumBlock UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum = "block"
)

func (e UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum) ToPointer() *UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum {
	return &e
}

func (e *UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum: %v", v)
	}
}

type UpdateNetworkSwitchDhcpServerPolicyRequestBody struct {
	// Alert settings for DHCP servers
	Alerts *UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlerts `json:"alerts,omitempty"`
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set to block. An empty array will clear the entries.
	AllowedServers []string `json:"allowedServers,omitempty"`
	// Dynamic ARP Inspection settings
	ArpInspection *UpdateNetworkSwitchDhcpServerPolicyRequestBodyArpInspection `json:"arpInspection,omitempty"`
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set to allow. An empty array will clear the entries.
	BlockedServers []string `json:"blockedServers,omitempty"`
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy *UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum `json:"defaultPolicy,omitempty"`
}

type UpdateNetworkSwitchDhcpServerPolicyRequest struct {
	RequestBody *UpdateNetworkSwitchDhcpServerPolicyRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                          `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkSwitchDhcpServerPolicyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchDhcpServerPolicy200ApplicationJSONObject map[string]interface{}
}
