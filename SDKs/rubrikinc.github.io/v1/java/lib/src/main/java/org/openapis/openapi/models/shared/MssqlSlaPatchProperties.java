/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MssqlSlaPatchProperties - Properties to update.
 */
public class MssqlSlaPatchProperties {
    /**
     * SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public MssqlSlaPatchProperties withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyOnly")
    public Boolean copyOnly;

    public MssqlSlaPatchProperties withCopyOnly(Boolean copyOnly) {
        this.copyOnly = copyOnly;
        return this;
    }
    
    /**
     * Seconds between two log backups. A value of 0 disables log backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupFrequencyInSeconds")
    public Integer logBackupFrequencyInSeconds;

    public MssqlSlaPatchProperties withLogBackupFrequencyInSeconds(Integer logBackupFrequencyInSeconds) {
        this.logBackupFrequencyInSeconds = logBackupFrequencyInSeconds;
        return this;
    }
    
    /**
     * Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logRetentionHours")
    public Integer logRetentionHours;

    public MssqlSlaPatchProperties withLogRetentionHours(Integer logRetentionHours) {
        this.logRetentionHours = logRetentionHours;
        return this;
    }
    
    /**
     * Determines whether to use the configured default value of log backup retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useConfiguredDefaultLogRetention")
    public Boolean useConfiguredDefaultLogRetention;

    public MssqlSlaPatchProperties withUseConfiguredDefaultLogRetention(Boolean useConfiguredDefaultLogRetention) {
        this.useConfiguredDefaultLogRetention = useConfiguredDefaultLogRetention;
        return this;
    }
    
    public MssqlSlaPatchProperties(){}
}
