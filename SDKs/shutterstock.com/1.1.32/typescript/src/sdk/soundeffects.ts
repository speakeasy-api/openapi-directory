/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SoundEffects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Download sound effects
   *
   * @remarks
   * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
   */
  downloadSfx(
    req: operations.DownloadSfxRequest,
    security: operations.DownloadSfxSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadSfxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadSfxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/sfx/licenses/{id}/downloads",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DownloadSfxSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadSfxResponse =
        new operations.DownloadSfxResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sfxUrl = utils.objectToClass(httpRes?.data, shared.SfxUrl);
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get details about sound effects
   *
   * @remarks
   * This endpoint shows information about a sound effect.
   */
  getSfxDetails(
    req: operations.GetSfxDetailsRequest,
    security: operations.GetSfxDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSfxDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSfxDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/sfx/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetSfxDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSfxDetailsResponse =
        new operations.GetSfxDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sfx = utils.objectToClass(httpRes?.data, shared.Sfx);
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List sound effects licenses
   *
   * @remarks
   * This endpoint lists existing licenses.
   */
  getSfxLicenseList(
    req: operations.GetSfxLicenseListRequest,
    security: operations.GetSfxLicenseListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSfxLicenseListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSfxLicenseListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/sfx/licenses";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetSfxLicenseListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSfxLicenseListResponse =
        new operations.GetSfxLicenseListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.downloadHistoryDataList = utils.objectToClass(
              httpRes?.data,
              shared.DownloadHistoryDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List details about sound effects
   *
   * @remarks
   * This endpoint shows information about sound effects.
   */
  getSfxListDetails(
    req: operations.GetSfxListDetailsRequest,
    security: operations.GetSfxListDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSfxListDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSfxListDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/sfx";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetSfxListDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSfxListDetailsResponse =
        new operations.GetSfxListDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sfxDataList = utils.objectToClass(
              httpRes?.data,
              shared.SFXDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * License sound effects
   *
   * @remarks
   * This endpoint licenses sounds effect assets.
   */
  licensesSFX(
    req: shared.LicenseSFXRequest,
    security: operations.LicensesSFXSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensesSFXResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.LicenseSFXRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/sfx/licenses";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicensesSFXSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensesSFXResponse =
        new operations.LicensesSFXResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseSFXResultDataList = utils.objectToClass(
              httpRes?.data,
              shared.LicenseSFXResultDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Search for sound effects
   *
   * @remarks
   * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
   */
  searchSFX(
    req: operations.SearchSFXRequest,
    security: operations.SearchSFXSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchSFXResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchSFXRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/sfx/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchSFXSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchSFXResponse =
        new operations.SearchSFXResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sfxSearchResults = utils.objectToClass(
              httpRes?.data,
              shared.SFXSearchResults
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
