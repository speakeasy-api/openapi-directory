/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ItemConditionPolicy {
    /**
     * The category ID to which the item-condition policy applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryId")
    public String categoryId;
    public ItemConditionPolicy withCategoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    &lt;br&gt;&lt;br&gt;A &lt;i&gt;category tree&lt;/i&gt; is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique &lt;b&gt;categoryId&lt;/b&gt; value. Within a category tree, the root node has no parent node and &lt;i&gt;leaf nodes&lt;/i&gt; are nodes that have no child nodes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryTreeId")
    public String categoryTreeId;
    public ItemConditionPolicy withCategoryTreeId(String categoryTreeId) {
        this.categoryTreeId = categoryTreeId;
        return this;
    }
    
    /**
     * This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to &lt;code&gt;true&lt;/code&gt;, you must specify an item condition for the associated category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemConditionRequired")
    public Boolean itemConditionRequired;
    public ItemConditionPolicy withItemConditionRequired(Boolean itemConditionRequired) {
        this.itemConditionRequired = itemConditionRequired;
        return this;
    }
    
    /**
     * The item-condition values allowed in the category.&lt;br /&gt;&lt;br /&gt;&lt;span class="tablenote"&gt;&lt;b&gt;Note:&lt;/b&gt; The \u2018Seller Refurbished\u2019 item condition (condition ID 2500) has been replaced by the 'Excellent - Refurbished', 'Very Good - Refurbished', and 'Good - Refurbished' item conditions in a select number of eBay marketplaces and categories. See the &lt;a href="/api-docs/sell/static/metadata/condition-id-values.html#Category " target="_blank "&gt; eBay Refurbished Program - Category and marketplace support&lt;/a&gt; topic for more details.&lt;br/&gt;&lt;br/&gt;Similar to the \u2018Certified Refurbished\u2019 item condition (condition ID 2000), a seller\u2019s OAuth user token will have to be used instead of an OAuth application token, since each seller must  go through an application and qualification process before using any of these new refurbished item conditions in supported categories. If a seller is not qualified to use the new refurbished item conditions, these item condition values will not be returned by &lt;b&gt;getItemConditionPolicies&lt;/b&gt;.&lt;/span&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemConditions")
    public ItemCondition[] itemConditions;
    public ItemConditionPolicy withItemConditions(ItemCondition[] itemConditions) {
        this.itemConditions = itemConditions;
        return this;
    }
    
}
