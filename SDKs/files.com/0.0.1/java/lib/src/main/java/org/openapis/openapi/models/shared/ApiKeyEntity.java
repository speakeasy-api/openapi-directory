/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ApiKeyEntity - List Api Keys
 */
public class ApiKeyEntity {
    /**
     * Time which API Key was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public ApiKeyEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * User-supplied description of API key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ApiKeyEntity withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Unique label that describes this API key.  Useful for external systems where you may have API keys from multiple accounts and want a human-readable label for each key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descriptive_label")
    public String descriptiveLabel;
    public ApiKeyEntity withDescriptiveLabel(String descriptiveLabel) {
        this.descriptiveLabel = descriptiveLabel;
        return this;
    }
    
    /**
     * API Key expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_at")
    public OffsetDateTime expiresAt;
    public ApiKeyEntity withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * API Key ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public ApiKeyEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * API Key actual key string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;
    public ApiKeyEntity withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up to 3 hours later than this timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_use_at")
    public OffsetDateTime lastUseAt;
    public ApiKeyEntity withLastUseAt(OffsetDateTime lastUseAt) {
        this.lastUseAt = lastUseAt;
        return this;
    }
    
    /**
     * Internal name for the API Key.  For your use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ApiKeyEntity withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Folder path restriction for this api key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;
    public ApiKeyEntity withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permission_set")
    public ApiKeyEntityPermissionSetEnum permissionSet;
    public ApiKeyEntity withPermissionSet(ApiKeyEntityPermissionSetEnum permissionSet) {
        this.permissionSet = permissionSet;
        return this;
    }
    
    /**
     * If this API key represents a Desktop app, what platform was it created on?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    public String platform;
    public ApiKeyEntity withPlatform(String platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * URL for API host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public ApiKeyEntity withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * User ID for the owner of this API Key.  May be blank for Site-wide API Keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public Integer userId;
    public ApiKeyEntity withUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
}
