"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldvalue as shared_fieldvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldFilter:
    r"""A filter for fields. Only one value can be provided."""
    
    contains: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contains'), 'exclude': lambda f: f is None }})  
    equal_to: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equalTo'), 'exclude': lambda f: f is None }})  
    greater_than: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('greaterThan'), 'exclude': lambda f: f is None }})  
    greater_than_or_equal_to: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('greaterThanOrEqualTo'), 'exclude': lambda f: f is None }})  
    less_than: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lessThan'), 'exclude': lambda f: f is None }})  
    less_than_or_equal_to: Optional[shared_fieldvalue.FieldValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lessThanOrEqualTo'), 'exclude': lambda f: f is None }})  
    