"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GeneratorRecipeCharacterSetsEnum(str, Enum):
    LETTERS = 'LETTERS'
    DIGITS = 'DIGITS'
    SYMBOLS = 'SYMBOLS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneratorRecipe:
    r"""The recipe is used in conjunction with the \\"generate\\" property to set the character set used to generate a new secure value"""
    
    character_sets: Optional[list[GeneratorRecipeCharacterSetsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('characterSets'), 'exclude': lambda f: f is None }})  
    exclude_characters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeCharacters'), 'exclude': lambda f: f is None }})
    r"""List of all characters that should be excluded from generated passwords."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""Length of the generated value"""  
    