"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hdfsauthenticationtype_enum as shared_hdfsauthenticationtype_enum
from ..shared import hdfsnamenode as shared_hdfsnamenode
from ..shared import qopconfiguration as shared_qopconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLocationHdfsRequest:
    
    location_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationArn') }})  
    agent_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgentArns'), 'exclude': lambda f: f is None }})  
    authentication_type: Optional[shared_hdfsauthenticationtype_enum.HdfsAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationType'), 'exclude': lambda f: f is None }})  
    block_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockSize'), 'exclude': lambda f: f is None }})  
    kerberos_keytab: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KerberosKeytab'), 'exclude': lambda f: f is None }})  
    kerberos_krb5_conf: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KerberosKrb5Conf'), 'exclude': lambda f: f is None }})  
    kerberos_principal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KerberosPrincipal'), 'exclude': lambda f: f is None }})  
    kms_key_provider_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyProviderUri'), 'exclude': lambda f: f is None }})  
    name_nodes: Optional[list[shared_hdfsnamenode.HdfsNameNode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NameNodes'), 'exclude': lambda f: f is None }})  
    qop_configuration: Optional[shared_qopconfiguration.QopConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QopConfiguration'), 'exclude': lambda f: f is None }})  
    replication_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationFactor'), 'exclude': lambda f: f is None }})  
    simple_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SimpleUser'), 'exclude': lambda f: f is None }})  
    subdirectory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subdirectory'), 'exclude': lambda f: f is None }})  
    