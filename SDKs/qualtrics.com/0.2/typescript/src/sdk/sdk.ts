/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://fra1.qualtrics.com/API/v3"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Work with Qualtrics surveys, distributions and response events
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Create contact in mailing list
   *
   * @remarks
   * Creates a contact in a given mailing list
   */
  createContactInMailinglist(
    req: operations.CreateContactInMailinglistRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateContactInMailinglistResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateContactInMailinglistRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/directories/{DirectoryId}/mailinglists/{MailingListId}/contacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createContactInMailingList",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateContactInMailinglistResponse =
        new operations.CreateContactInMailinglistResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Generate distribution links
   *
   * @remarks
   * Geneates links for individual distribution
   */
  generateDistributionLinks(
    req: shared.CreateDistributionLinks,
    config?: AxiosRequestConfig
  ): Promise<operations.GenerateDistributionLinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateDistributionLinks(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/distributions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenerateDistributionLinksResponse =
        new operations.GenerateDistributionLinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get distributions for survey
   *
   * @remarks
   * Gets all distributions for a given survey
   */
  getDistributions(
    req: operations.GetDistributionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistributionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistributionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/distributions";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistributionsResponse =
        new operations.GetDistributionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.distributionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.DistributionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get event subscriptions
   *
   * @remarks
   * Get event subscriptions
   */
  getEventSubscriptions(
    req: operations.GetEventSubscriptionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventSubscriptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventSubscriptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/eventsubscriptions/{SubscriptionId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventSubscriptionsResponse =
        new operations.GetEventSubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSubscriptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.EventSubscriptionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get survey
   *
   * @remarks
   * Gets a single Qualtrics survey speficied by its ID
   */
  getSurvey(
    req: operations.GetSurveyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSurveyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSurveyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/survey-definitions/{SurveyId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSurveyResponse =
        new operations.GetSurveyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.surveyResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        default:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve distribution links
   *
   * @remarks
   * Retrieves all the individual links for a given distribution
   */
  retrievedistributionlinks(
    req: operations.RetrievedistributionlinksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrievedistributionlinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrievedistributionlinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/distributions/{DistributionId}/links",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrievedistributionlinksResponse =
        new operations.RetrievedistributionlinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveDistributionLinksResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveDistributionLinksResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove subscription to response event
   *
   * @remarks
   * Remove event subscription
   */
  webhookDelete(
    req: shared.SubscribeToEventBody,
    config?: AxiosRequestConfig
  ): Promise<operations.WebhookDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SubscribeToEventBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/eventsubscriptions/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebhookDeleteResponse =
        new operations.WebhookDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSubscriptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.EventSubscriptionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Triggers when a response is submitted to a qualtrics survey
   *
   * @remarks
   * Subscribe to response event
   */
  whenAResponseIsReceived(
    req: shared.SubscribeToEventBody,
    config?: AxiosRequestConfig
  ): Promise<operations.WhenAResponseIsReceivedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SubscribeToEventBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/eventsubscriptions/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WhenAResponseIsReceivedResponse =
        new operations.WhenAResponseIsReceivedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSubscriptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.EventSubscriptionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
