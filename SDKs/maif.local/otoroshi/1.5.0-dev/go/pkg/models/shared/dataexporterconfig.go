// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DataExporterConfigConfigType string

const (
	DataExporterConfigConfigTypeElasticConfig                DataExporterConfigConfigType = "ElasticConfig"
	DataExporterConfigConfigTypeKafkaConfig                  DataExporterConfigConfigType = "KafkaConfig"
	DataExporterConfigConfigTypePulsarDataExporterConfig     DataExporterConfigConfigType = "PulsarDataExporterConfig"
	DataExporterConfigConfigTypeFileDataExporterConfig       DataExporterConfigConfigType = "FileDataExporterConfig"
	DataExporterConfigConfigTypeMailerGenericExporterConfig  DataExporterConfigConfigType = "MailerGenericExporterConfig"
	DataExporterConfigConfigTypeMailerConsoleExporterConfig  DataExporterConfigConfigType = "MailerConsoleExporterConfig"
	DataExporterConfigConfigTypeMailerMailgunExporterConfig  DataExporterConfigConfigType = "MailerMailgunExporterConfig"
	DataExporterConfigConfigTypeMailerMailjetExporterConfig  DataExporterConfigConfigType = "MailerMailjetExporterConfig"
	DataExporterConfigConfigTypeMailerSendgridExporterConfig DataExporterConfigConfigType = "MailerSendgridExporterConfig"
	DataExporterConfigConfigTypeMapOfany                     DataExporterConfigConfigType = "mapOfany"
	DataExporterConfigConfigTypeCustomDataExporterConfig     DataExporterConfigConfigType = "CustomDataExporterConfig"
)

type DataExporterConfigConfig struct {
	ElasticConfig                *ElasticConfig
	KafkaConfig                  *KafkaConfig
	PulsarDataExporterConfig     *PulsarDataExporterConfig
	FileDataExporterConfig       *FileDataExporterConfig
	MailerGenericExporterConfig  *MailerGenericExporterConfig
	MailerConsoleExporterConfig  *MailerConsoleExporterConfig
	MailerMailgunExporterConfig  *MailerMailgunExporterConfig
	MailerMailjetExporterConfig  *MailerMailjetExporterConfig
	MailerSendgridExporterConfig *MailerSendgridExporterConfig
	MapOfany                     map[string]interface{}
	CustomDataExporterConfig     *CustomDataExporterConfig

	Type DataExporterConfigConfigType
}

func CreateDataExporterConfigConfigElasticConfig(elasticConfig ElasticConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeElasticConfig

	return DataExporterConfigConfig{
		ElasticConfig: &elasticConfig,
		Type:          typ,
	}
}

func CreateDataExporterConfigConfigKafkaConfig(kafkaConfig KafkaConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeKafkaConfig

	return DataExporterConfigConfig{
		KafkaConfig: &kafkaConfig,
		Type:        typ,
	}
}

func CreateDataExporterConfigConfigPulsarDataExporterConfig(pulsarDataExporterConfig PulsarDataExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypePulsarDataExporterConfig

	return DataExporterConfigConfig{
		PulsarDataExporterConfig: &pulsarDataExporterConfig,
		Type:                     typ,
	}
}

func CreateDataExporterConfigConfigFileDataExporterConfig(fileDataExporterConfig FileDataExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeFileDataExporterConfig

	return DataExporterConfigConfig{
		FileDataExporterConfig: &fileDataExporterConfig,
		Type:                   typ,
	}
}

func CreateDataExporterConfigConfigMailerGenericExporterConfig(mailerGenericExporterConfig MailerGenericExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMailerGenericExporterConfig

	return DataExporterConfigConfig{
		MailerGenericExporterConfig: &mailerGenericExporterConfig,
		Type:                        typ,
	}
}

func CreateDataExporterConfigConfigMailerConsoleExporterConfig(mailerConsoleExporterConfig MailerConsoleExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMailerConsoleExporterConfig

	return DataExporterConfigConfig{
		MailerConsoleExporterConfig: &mailerConsoleExporterConfig,
		Type:                        typ,
	}
}

func CreateDataExporterConfigConfigMailerMailgunExporterConfig(mailerMailgunExporterConfig MailerMailgunExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMailerMailgunExporterConfig

	return DataExporterConfigConfig{
		MailerMailgunExporterConfig: &mailerMailgunExporterConfig,
		Type:                        typ,
	}
}

func CreateDataExporterConfigConfigMailerMailjetExporterConfig(mailerMailjetExporterConfig MailerMailjetExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMailerMailjetExporterConfig

	return DataExporterConfigConfig{
		MailerMailjetExporterConfig: &mailerMailjetExporterConfig,
		Type:                        typ,
	}
}

func CreateDataExporterConfigConfigMailerSendgridExporterConfig(mailerSendgridExporterConfig MailerSendgridExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMailerSendgridExporterConfig

	return DataExporterConfigConfig{
		MailerSendgridExporterConfig: &mailerSendgridExporterConfig,
		Type:                         typ,
	}
}

func CreateDataExporterConfigConfigMapOfany(mapOfany map[string]interface{}) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeMapOfany

	return DataExporterConfigConfig{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func CreateDataExporterConfigConfigCustomDataExporterConfig(customDataExporterConfig CustomDataExporterConfig) DataExporterConfigConfig {
	typ := DataExporterConfigConfigTypeCustomDataExporterConfig

	return DataExporterConfigConfig{
		CustomDataExporterConfig: &customDataExporterConfig,
		Type:                     typ,
	}
}

func (u *DataExporterConfigConfig) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	elasticConfig := new(ElasticConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&elasticConfig); err == nil {
		u.ElasticConfig = elasticConfig
		u.Type = DataExporterConfigConfigTypeElasticConfig
		return nil
	}

	kafkaConfig := new(KafkaConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaConfig); err == nil {
		u.KafkaConfig = kafkaConfig
		u.Type = DataExporterConfigConfigTypeKafkaConfig
		return nil
	}

	pulsarDataExporterConfig := new(PulsarDataExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pulsarDataExporterConfig); err == nil {
		u.PulsarDataExporterConfig = pulsarDataExporterConfig
		u.Type = DataExporterConfigConfigTypePulsarDataExporterConfig
		return nil
	}

	fileDataExporterConfig := new(FileDataExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&fileDataExporterConfig); err == nil {
		u.FileDataExporterConfig = fileDataExporterConfig
		u.Type = DataExporterConfigConfigTypeFileDataExporterConfig
		return nil
	}

	mailerGenericExporterConfig := new(MailerGenericExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mailerGenericExporterConfig); err == nil {
		u.MailerGenericExporterConfig = mailerGenericExporterConfig
		u.Type = DataExporterConfigConfigTypeMailerGenericExporterConfig
		return nil
	}

	mailerConsoleExporterConfig := new(MailerConsoleExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mailerConsoleExporterConfig); err == nil {
		u.MailerConsoleExporterConfig = mailerConsoleExporterConfig
		u.Type = DataExporterConfigConfigTypeMailerConsoleExporterConfig
		return nil
	}

	mailerMailgunExporterConfig := new(MailerMailgunExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mailerMailgunExporterConfig); err == nil {
		u.MailerMailgunExporterConfig = mailerMailgunExporterConfig
		u.Type = DataExporterConfigConfigTypeMailerMailgunExporterConfig
		return nil
	}

	mailerMailjetExporterConfig := new(MailerMailjetExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mailerMailjetExporterConfig); err == nil {
		u.MailerMailjetExporterConfig = mailerMailjetExporterConfig
		u.Type = DataExporterConfigConfigTypeMailerMailjetExporterConfig
		return nil
	}

	mailerSendgridExporterConfig := new(MailerSendgridExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mailerSendgridExporterConfig); err == nil {
		u.MailerSendgridExporterConfig = mailerSendgridExporterConfig
		u.Type = DataExporterConfigConfigTypeMailerSendgridExporterConfig
		return nil
	}

	mapOfany := map[string]interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mapOfany); err == nil {
		u.MapOfany = mapOfany
		u.Type = DataExporterConfigConfigTypeMapOfany
		return nil
	}

	customDataExporterConfig := new(CustomDataExporterConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&customDataExporterConfig); err == nil {
		u.CustomDataExporterConfig = customDataExporterConfig
		u.Type = DataExporterConfigConfigTypeCustomDataExporterConfig
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DataExporterConfigConfig) MarshalJSON() ([]byte, error) {
	if u.ElasticConfig != nil {
		return json.Marshal(u.ElasticConfig)
	}

	if u.KafkaConfig != nil {
		return json.Marshal(u.KafkaConfig)
	}

	if u.PulsarDataExporterConfig != nil {
		return json.Marshal(u.PulsarDataExporterConfig)
	}

	if u.FileDataExporterConfig != nil {
		return json.Marshal(u.FileDataExporterConfig)
	}

	if u.MailerGenericExporterConfig != nil {
		return json.Marshal(u.MailerGenericExporterConfig)
	}

	if u.MailerConsoleExporterConfig != nil {
		return json.Marshal(u.MailerConsoleExporterConfig)
	}

	if u.MailerMailgunExporterConfig != nil {
		return json.Marshal(u.MailerMailgunExporterConfig)
	}

	if u.MailerMailjetExporterConfig != nil {
		return json.Marshal(u.MailerMailjetExporterConfig)
	}

	if u.MailerSendgridExporterConfig != nil {
		return json.Marshal(u.MailerSendgridExporterConfig)
	}

	if u.MapOfany != nil {
		return json.Marshal(u.MapOfany)
	}

	if u.CustomDataExporterConfig != nil {
		return json.Marshal(u.CustomDataExporterConfig)
	}

	return nil, nil
}

// DataExporterConfigTypEnum - Type of data exporter
type DataExporterConfigTypEnum string

const (
	DataExporterConfigTypEnumKafka   DataExporterConfigTypEnum = "kafka"
	DataExporterConfigTypEnumPulsar  DataExporterConfigTypEnum = "pulsar"
	DataExporterConfigTypEnumFile    DataExporterConfigTypEnum = "file"
	DataExporterConfigTypEnumMailer  DataExporterConfigTypEnum = "mailer"
	DataExporterConfigTypEnumElastic DataExporterConfigTypEnum = "elastic"
	DataExporterConfigTypEnumConsole DataExporterConfigTypEnum = "console"
	DataExporterConfigTypEnumCustom  DataExporterConfigTypEnum = "custom"
)

func (e DataExporterConfigTypEnum) ToPointer() *DataExporterConfigTypEnum {
	return &e
}

func (e *DataExporterConfigTypEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kafka":
		fallthrough
	case "pulsar":
		fallthrough
	case "file":
		fallthrough
	case "mailer":
		fallthrough
	case "elastic":
		fallthrough
	case "console":
		fallthrough
	case "custom":
		*e = DataExporterConfigTypEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataExporterConfigTypEnum: %v", v)
	}
}

// DataExporterConfig - Settings to export Otorshi events
type DataExporterConfig struct {
	// buffer size
	BufferSize *int `json:"bufferSize,omitempty"`
	// Data Exporter config
	Config *DataExporterConfigConfig `json:"config,omitempty"`
	// Description
	Desc *string `json:"desc,omitempty"`
	// Boolean
	Enabled   *string    `json:"enabled,omitempty"`
	Filtering *Filtering `json:"filtering,omitempty"`
	// duration
	GroupDuration *int64 `json:"groupDuration,omitempty"`
	// Group size
	GroupSize *int `json:"groupSize,omitempty"`
	// Id
	ID *string `json:"id,omitempty"`
	// nb workers
	JSONWorkers *int      `json:"jsonWorkers,omitempty"`
	Location    *Location `json:"location,omitempty"`
	// Metadata
	Metadata map[string]string `json:"metadata,omitempty"`
	// Name
	Name *string `json:"name,omitempty"`
	// projection
	Projection map[string]string `json:"projection,omitempty"`
	// send workers
	SendWorkers *int `json:"sendWorkers,omitempty"`
	// Type of data exporter
	Typ *DataExporterConfigTypEnum `json:"typ,omitempty"`
}
