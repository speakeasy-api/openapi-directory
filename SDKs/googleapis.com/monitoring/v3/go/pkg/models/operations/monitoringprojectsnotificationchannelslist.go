// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type MonitoringProjectsNotificationChannelsListSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type MonitoringProjectsNotificationChannelsListSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type MonitoringProjectsNotificationChannelsListSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type MonitoringProjectsNotificationChannelsListSecurity struct {
	Option1 *MonitoringProjectsNotificationChannelsListSecurityOption1 `security:"option"`
	Option2 *MonitoringProjectsNotificationChannelsListSecurityOption2 `security:"option"`
	Option3 *MonitoringProjectsNotificationChannelsListSecurityOption3 `security:"option"`
}

type MonitoringProjectsNotificationChannelsListPathParams struct {
	// Required. The project (https://cloud.google.com/monitoring/api/v3#project_name) on which to execute the request. The format is: projects/[PROJECT_ID_OR_NUMBER] This names the container in which to look for the notification channels; it does not name a specific channel. To query a specific channel by REST resource name, use the GetNotificationChannel operation.
	Name string `pathParam:"style=simple,explode=false,name=name"`
}

type MonitoringProjectsNotificationChannelsListQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// If provided, this field specifies the criteria that must be met by notification channels to be included in the response.For more details, see sorting and filtering (https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// A comma-separated list of fields by which to sort the result. Supports the same set of fields as in filter. Entries can be prefixed with a minus sign to sort in descending rather than ascending order.For more details, see sorting and filtering (https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// The maximum number of results to return in a single response. If not set to a positive number, a reasonable value will be chosen by the service.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// If non-empty, page_token must contain a value returned as the next_page_token in a previous response to request the next set of results.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type MonitoringProjectsNotificationChannelsListRequest struct {
	PathParams  MonitoringProjectsNotificationChannelsListPathParams
	QueryParams MonitoringProjectsNotificationChannelsListQueryParams
	Security    MonitoringProjectsNotificationChannelsListSecurity
}

type MonitoringProjectsNotificationChannelsListResponse struct {
	ContentType string
	// Successful response
	ListNotificationChannelsResponse *shared.ListNotificationChannelsResponse
	StatusCode                       int
	RawResponse                      *http.Response
}
