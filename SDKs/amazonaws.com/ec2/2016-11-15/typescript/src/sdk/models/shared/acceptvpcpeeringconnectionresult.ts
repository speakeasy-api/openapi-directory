/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes an IPv4 CIDR block.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Describes an IPv4 CIDR block.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * The status of the VPC peering connection.
 */
export enum AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum {
  InitiatingRequest = "initiating-request",
  PendingAcceptance = "pending-acceptance",
  Active = "active",
  Deleted = "deleted",
  Rejected = "rejected",
  Failed = "failed",
  Expired = "expired",
  Provisioning = "provisioning",
  Deleting = "deleting",
}

/**
 * The status of the VPC peering connection.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the VPC peering connection.
 */
export class AcceptVpcPeeringConnectionResultVpcPeeringConnection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  accepterVpcInfo?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo;

  @SpeakeasyMetadata()
  expirationTime?: Date;

  @SpeakeasyMetadata()
  requesterVpcInfo?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo;

  @SpeakeasyMetadata()
  status?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus;

  @SpeakeasyMetadata({
    elemType: AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags,
  })
  tags?: AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags[];

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Success
 */
export class AcceptVpcPeeringConnectionResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  vpcPeeringConnection?: AcceptVpcPeeringConnectionResultVpcPeeringConnection;
}
