"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createauthorizerresponse as shared_createauthorizerresponse
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateAuthorizerRequestBodyStatusEnum(str, Enum):
    r"""The status of the create authorizer request."""
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAuthorizerRequestBody:
    
    authorizer_function_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizerFunctionArn') }})
    r"""The ARN of the authorizer's Lambda function."""  
    enable_caching_for_http: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableCachingForHttp'), 'exclude': lambda f: f is None }})
    r"""<p>When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p> <p>The default value is <code>false</code>.</p>"""  
    signing_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingDisabled'), 'exclude': lambda f: f is None }})
    r"""Specifies whether IoT validates the token signature in an authorization request."""  
    status: Optional[CreateAuthorizerRequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the create authorizer request."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""<p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags \\"key1=value1&amp;key2=value2...\\"</p> <p>For the cli-input-json file use format: \\"tags\\": \\"key1=value1&amp;key2=value2...\\"</p> </note>"""  
    token_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenKeyName'), 'exclude': lambda f: f is None }})
    r"""The name of the token key used to extract the token from the HTTP headers."""  
    token_signing_public_keys: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenSigningPublicKeys'), 'exclude': lambda f: f is None }})
    r"""The public keys used to verify the digital signature returned by your custom authentication service."""  
    

@dataclasses.dataclass
class CreateAuthorizerRequest:
    
    authorizer_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'authorizerName', 'style': 'simple', 'explode': False }})
    r"""The authorizer name."""  
    request_body: CreateAuthorizerRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateAuthorizerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_authorizer_response: Optional[shared_createauthorizerresponse.CreateAuthorizerResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    