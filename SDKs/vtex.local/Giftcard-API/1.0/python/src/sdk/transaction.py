"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transaction:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_gift_card_transaction(self, request: operations.CancelGiftCardTransactionRequest) -> operations.CancelGiftCardTransactionResponse:
        r"""Cancel GiftCard Transaction
        Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelGiftCardTransactionRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_gift_card_transaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelGiftCardTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response6])
                res.response6 = out

        return res

    def create_gift_card_transaction(self, request: operations.CreateGiftCardTransactionRequest) -> operations.CreateGiftCardTransactionResponse:
        r"""Create GiftCard Transaction
        Register a new giftcard transaction and authorize the item reservation.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateGiftCardTransactionRequest, base_url, '/giftcards/{giftCardID}/transactions', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_gift_card_transaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGiftCardTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response3])
                res.response3 = out

        return res

    def get_gift_card_transactionby_id(self, request: operations.GetGiftCardTransactionbyIDRequest) -> operations.GetGiftCardTransactionbyIDResponse:
        r"""Get GiftCard Transaction by ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGiftCardTransactionbyIDRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGiftCardTransactionbyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response5])
                res.response5 = out

        return res

    def get_gift_card_transactions(self, request: operations.GetGiftCardTransactionsRequest) -> operations.GetGiftCardTransactionsResponse:
        r"""Get GiftCard Transactions
        Returns all transaction of a giftcard.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGiftCardTransactionsRequest, base_url, '/giftcards/{giftCardID}/transactions', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGiftCardTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Response3]])
                res.response3s = out

        return res

    def get_transaction_authorizations(self, request: operations.GetTransactionAuthorizationsRequest) -> operations.GetTransactionAuthorizationsResponse:
        r"""Get Transaction Authorizations
        Returns the giftcard transaction authorizations.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionAuthorizationsRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}/authorization', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionAuthorizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response6])
                res.response6 = out

        return res

    def get_transaction_cancellations(self, request: operations.GetTransactionCancellationsRequest) -> operations.GetTransactionCancellationsResponse:
        r"""Get Transaction Cancellations
        Returns the giftcard transaction cancellations.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionCancellationsRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionCancellationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Response7]])
                res.response7s = out

        return res

    def get_transaction_settlements(self, request: operations.GetTransactionSettlementsRequest) -> operations.GetTransactionSettlementsResponse:
        r"""Get Transaction Settlements
        Returns the giftcard transaction settlements.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionSettlementsRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionSettlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Response6]])
                res.response6s = out

        return res

    def settle_gift_card_transaction(self, request: operations.SettleGiftCardTransactionRequest) -> operations.SettleGiftCardTransactionResponse:
        r"""Settle GiftCard Transaction
        Creates a giftcard transaction settlement.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SettleGiftCardTransactionRequest, base_url, '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "settle_gift_card_transaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SettleGiftCardTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response6])
                res.response6 = out

        return res

    