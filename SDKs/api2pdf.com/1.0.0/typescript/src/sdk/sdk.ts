/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { HeadlessChrome } from "./headlesschrome";
import { LibreOffice } from "./libreoffice";
import { MergeCombinePdfs } from "./mergecombinepdfs";
import * as shared from "./models/shared";
import { Wkhtmltopdf } from "./wkhtmltopdf";
import { ZXINGZebraCrossingBarCodes } from "./zxingzebracrossingbarcodes";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Api2Pdf.com API
   */
  "https://v2018.api2pdf.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 *
 * @remarks
 * # Introduction
 * [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing).
 * # SDKs & Client Libraries
 * We've made a number of open source libraries available for the API
 * - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python)
 * - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet)
 * - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node)
 * - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php)
 * - Ruby: (Coming soon)
 * # Authorization
 * Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.
 *
 * **Authorize your API calls**
 * - GET requests, include apikey=YOUR-API-KEY as a query string parameter
 * - POST requests, add **Authorization** to your header.
 * ``` Authorization: YOUR-API-KEY ```
 *
 * # Quickstart
 * If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:
 * ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```
 *
 * For more advanced usage and settings, see the API specification below.
 *
 *
 * @see {@link https://www.api2pdf.com} - Find out more about Api2Pdf
 */
export class SDK {
  public headlessChrome: HeadlessChrome;
  public libreOffice: LibreOffice;
  public mergeCombinePdfs: MergeCombinePdfs;
  public zxingZebraCrossingBarCodes: ZXINGZebraCrossingBarCodes;
  public wkhtmltopdf: Wkhtmltopdf;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.headlessChrome = new HeadlessChrome(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.libreOffice = new LibreOffice(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mergeCombinePdfs = new MergeCombinePdfs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.zxingZebraCrossingBarCodes = new ZXINGZebraCrossingBarCodes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.wkhtmltopdf = new Wkhtmltopdf(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
