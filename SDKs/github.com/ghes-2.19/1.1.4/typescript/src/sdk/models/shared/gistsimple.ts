/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GistHistory } from "./gisthistory";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { PublicUser } from "./publicuser";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

export class GistSimpleFiles extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "filename" })
  filename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "raw_url" })
  rawUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "truncated" })
  truncated?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class GistSimpleGistFiles extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "filename" })
  filename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "raw_url" })
  rawUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Gist
 */
export class GistSimpleGist extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata({ elemType: GistSimpleGistFiles })
  @Expose({ name: "files" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GistSimpleGistFiles> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], GistSimpleGistFiles);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  files: Record<string, GistSimpleGistFiles>;

  @SpeakeasyMetadata()
  @Expose({ name: "forks" })
  forks?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_pull_url" })
  gitPullUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_push_url" })
  gitPushUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "history" })
  history?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => NullableSimpleUser)
  owner?: NullableSimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "public" })
  public: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "truncated" })
  truncated?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NullableSimpleUser)
  user: NullableSimpleUser;
}

export class GistSimpleForks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * Public User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => PublicUser)
  user?: PublicUser;
}

/**
 * Gist Simple
 */
export class GistSimple extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata({ elemType: GistSimpleFiles })
  @Expose({ name: "files" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GistSimpleFiles> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], GistSimpleFiles);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  files?: Record<string, GistSimpleFiles>;

  /**
   * Gist
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fork_of" })
  @Type(() => GistSimpleGist)
  forkOf?: GistSimpleGist;

  @SpeakeasyMetadata({ elemType: GistSimpleForks })
  @Expose({ name: "forks" })
  @Type(() => GistSimpleForks)
  forks?: GistSimpleForks[];

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_pull_url" })
  gitPullUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_push_url" })
  gitPushUrl?: string;

  @SpeakeasyMetadata({ elemType: GistHistory })
  @Expose({ name: "history" })
  @Type(() => GistHistory)
  history?: GistHistory[];

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId?: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => SimpleUser)
  owner?: SimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "public" })
  public?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "truncated" })
  truncated?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;
}
