"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import challengeresponsetype as shared_challengeresponsetype
from ..shared import eventcontextdatatype as shared_eventcontextdatatype
from ..shared import eventfeedbacktype as shared_eventfeedbacktype
from ..shared import eventresponsetype_enum as shared_eventresponsetype_enum
from ..shared import eventrisktype as shared_eventrisktype
from ..shared import eventtype_enum as shared_eventtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthEventType:
    r"""The authentication event type."""
    
    challenge_responses: Optional[list[shared_challengeresponsetype.ChallengeResponseType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChallengeResponses'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    event_context_data: Optional[shared_eventcontextdatatype.EventContextDataType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventContextData'), 'exclude': lambda f: f is None }})  
    event_feedback: Optional[shared_eventfeedbacktype.EventFeedbackType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventFeedback'), 'exclude': lambda f: f is None }})  
    event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventId'), 'exclude': lambda f: f is None }})  
    event_response: Optional[shared_eventresponsetype_enum.EventResponseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventResponse'), 'exclude': lambda f: f is None }})  
    event_risk: Optional[shared_eventrisktype.EventRiskType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventRisk'), 'exclude': lambda f: f is None }})  
    event_type: Optional[shared_eventtype_enum.EventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventType'), 'exclude': lambda f: f is None }})  
    