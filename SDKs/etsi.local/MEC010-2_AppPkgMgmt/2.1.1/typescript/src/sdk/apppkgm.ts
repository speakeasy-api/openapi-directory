/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * App Package management
 */
export class AppPkgm {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Reads the content of the AppD of on-boarded individual application package resources.
   *
   * @remarks
   * Reads the content of the AppD of on-boarded individual application package resources.
   */
  appDGET(
    req: operations.AppDGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppDGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppDGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/onboarded_app_packages/{appDId}/appd",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppDGETResponse = new operations.AppDGETResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/zip`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.appD = JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch the onboarded application package content identified by appPkgId or appDId.
   *
   * @remarks
   * Fetch the onboarded application package content identified by appPkgId or appDId.
   */
  appDIdGET(
    req: operations.AppDIdGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppDIdGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppDIdGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/onboarded_app_packages/{appDId}/package_content",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppDIdGETResponse =
        new operations.AppDIdGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 206, 416].includes(httpRes?.status):
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads the content of application package.
   *
   * @remarks
   * Uploads the content of application package.
   */
  appDIdPUT(
    req: operations.AppDIdPUTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppDIdPUTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppDIdPUTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/onboarded_app_packages/{appDId}/package_content",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppDIdPUTResponse =
        new operations.AppDIdPUTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case [400, 401, 403, 404, 406, 409, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch the onboarded application package content identified by appPkgId or appDId.
   *
   * @remarks
   * Fetch the onboarded application package content identified by appPkgId or appDId.
   */
  appPkgGET(
    req: operations.AppPkgGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPkgGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPkgGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}/package_content",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPkgGETResponse =
        new operations.AppPkgGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 206, 416].includes(httpRes?.status):
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reads the content of the AppD of on-boarded individual application package resources.
   *
   * @remarks
   * Reads the content of the AppD of on-boarded individual application package resources.
   */
  appPkgIdGET(
    req: operations.AppPkgIdGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPkgIdGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPkgIdGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}/appd",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPkgIdGETResponse =
        new operations.AppPkgIdGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/zip`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.appD = JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads the content of application package.
   *
   * @remarks
   * Uploads the content of application package.
   */
  appPkgPUT(
    req: operations.AppPkgPUTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPkgPUTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPkgPUTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}/package_content",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPkgPUTResponse =
        new operations.AppPkgPUTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case [400, 401, 403, 404, 406, 409, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an individual application package resources
   *
   * @remarks
   * Deletes an individual application package resources
   */
  appPackageDELETE(
    req: operations.AppPackageDELETERequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPackageDELETEResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPackageDELETERequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPackageDELETEResponse =
        new operations.AppPackageDELETEResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Queries the information related to individual application package resources
   *
   * @remarks
   * Queries the information related to individual application package resources
   */
  appPackageGET(
    req: operations.AppPackageGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPackageGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPackageGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPackageGETResponse =
        new operations.AppPackageGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgInfo = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgInfo
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the operational state of an individual application package resource
   *
   * @remarks
   * Updates the operational state of an individual application package resources
   */
  appPackagePATCH(
    req: operations.AppPackagePATCHRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPackagePATCHResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPackagePATCHRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/app_packages/{appPkgId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "appPkgInfoModifications",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPackagePATCHResponse =
        new operations.AppPackagePATCHResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgInfoModifications = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgInfoModifications
            );
          }
          break;
        case [400, 401, 403, 404, 406, 409, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Queries information relating to on-boarded application packages in the MEO
   *
   * @remarks
   * queries information relating to on-boarded application packages in the MEO
   */
  appPackagesGET(
    req: operations.AppPackagesGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPackagesGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppPackagesGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/app_packages";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPackagesGETResponse =
        new operations.AppPackagesGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgInfos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.appPkgInfos = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgInfo,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a resource for on-boarding an application package to a MEO
   *
   * @remarks
   * Create a resource for on-boarding an application package to a MEO
   */
  appPackagesPOST(
    req: shared.CreateAppPkg,
    config?: AxiosRequestConfig
  ): Promise<operations.AppPackagesPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateAppPkg(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/app_packages";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppPackagesPOSTResponse =
        new operations.AppPackagesPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgInfos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.appPkgInfos = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgInfo,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the individual subscription to notifications about application package changes in MEO.
   *
   * @remarks
   * Deletes the individual subscription to notifications about application package changes in MEO.
   */
  individualSubscriptionDELETE(
    req: operations.IndividualSubscriptionDELETERequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IndividualSubscriptionDELETEResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IndividualSubscriptionDELETERequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/subscriptions/{subscriptionId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IndividualSubscriptionDELETEResponse =
        new operations.IndividualSubscriptionDELETEResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [401, 403, 404, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Used to represent an individual subscription to notifications about application package changes.
   *
   * @remarks
   * Used to represent an individual subscription to notifications about application package changes.
   */
  individualSubscriptionGET(
    req: operations.IndividualSubscriptionGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IndividualSubscriptionGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IndividualSubscriptionGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/subscriptions/{subscriptionId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IndividualSubscriptionGETResponse =
        new operations.IndividualSubscriptionGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgSubscriptionInfo = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgSubscriptionInfo
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * used to retrieve the information of subscriptions to individual application package resource in MEO
   *
   * @remarks
   * used to retrieve the information of subscriptions to individual application package resource in MEO package
   */
  subscriptionsGET(
    config?: AxiosRequestConfig
  ): Promise<operations.SubscriptionsGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/subscriptions";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubscriptionsGETResponse =
        new operations.SubscriptionsGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgSubscriptionLinkList = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgSubscriptionLinkList
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subscribe to notifications about on-boarding an application package
   *
   * @remarks
   * Subscribe to notifications about on-boarding an application package
   */
  subscriptionsPOST(
    req: shared.AppPkgSubscription,
    config?: AxiosRequestConfig
  ): Promise<operations.SubscriptionsPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AppPkgSubscription(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/subscriptions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubscriptionsPOSTResponse =
        new operations.SubscriptionsPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appPkgSubscriptionInfo = utils.objectToClass(
              httpRes?.data,
              shared.AppPkgSubscriptionInfo
            );
          }
          break;
        case [400, 401, 403, 404, 406, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetails = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetails
            );
          }
          break;
      }

      return res;
    });
  }
}
