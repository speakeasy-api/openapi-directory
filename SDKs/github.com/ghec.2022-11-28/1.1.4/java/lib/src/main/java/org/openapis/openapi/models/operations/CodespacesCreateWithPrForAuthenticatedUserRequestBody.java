/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CodespacesCreateWithPrForAuthenticatedUserRequestBody {
    /**
     * IP for location auto-detection when proxying a request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_ip")
    public String clientIp;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withClientIp(String clientIp) {
        this.clientIp = clientIp;
        return this;
    }
    
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("devcontainer_path")
    public String devcontainerPath;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withDevcontainerPath(String devcontainerPath) {
        this.devcontainerPath = devcontainerPath;
        return this;
    }
    
    /**
     * Display name for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    public String displayName;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Time in minutes before codespace stops from inactivity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idle_timeout_minutes")
    public Long idleTimeoutMinutes;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withIdleTimeoutMinutes(Long idleTimeoutMinutes) {
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        return this;
    }
    
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Machine type to use for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machine")
    public String machine;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withMachine(String machine) {
        this.machine = machine;
        return this;
    }
    
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multi_repo_permissions_opt_out")
    public Boolean multiRepoPermissionsOptOut;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withMultiRepoPermissionsOptOut(Boolean multiRepoPermissionsOptOut) {
        this.multiRepoPermissionsOptOut = multiRepoPermissionsOptOut;
        return this;
    }
    
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retention_period_minutes")
    public Long retentionPeriodMinutes;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withRetentionPeriodMinutes(Long retentionPeriodMinutes) {
        this.retentionPeriodMinutes = retentionPeriodMinutes;
        return this;
    }
    
    /**
     * Working directory for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("working_directory")
    public String workingDirectory;
    public CodespacesCreateWithPrForAuthenticatedUserRequestBody withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }
    
}
