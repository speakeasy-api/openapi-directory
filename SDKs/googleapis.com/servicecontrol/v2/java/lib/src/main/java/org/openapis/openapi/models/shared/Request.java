/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request - This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
 */
public class Request {
    /**
     * This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth")
    public Auth auth;

    public Request withAuth(Auth auth) {
        this.auth = auth;
        return this;
    }
    
    /**
     * The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public java.util.Map<String, String> headers;

    public Request withHeaders(java.util.Map<String, String> headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * The HTTP request `Host` header value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public Request withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Request withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The HTTP request method, such as `GET`, `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    public String method;

    public Request withMethod(String method) {
        this.method = method;
        return this;
    }
    
    /**
     * The HTTP URL path, excluding the query parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public Request withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The network protocol used with the request, such as "http/1.1", "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;

    public Request withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The HTTP URL query in the format of `name1=value1&amp;name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;

    public Request withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * A special parameter for request reason. It is used by security systems to associate auditing information with a request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public String reason;

    public Request withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * The HTTP URL scheme, such as `http` and `https`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    public String scheme;

    public Request withScheme(String scheme) {
        this.scheme = scheme;
        return this;
    }
    
    /**
     * The HTTP request size in bytes. If unknown, it must be -1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public String size;

    public Request withSize(String size) {
        this.size = size;
        return this;
    }
    
    /**
     * The timestamp when the `destination` service receives the last byte of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public String time;

    public Request withTime(String time) {
        this.time = time;
        return this;
    }
    
    public Request(){}
}
