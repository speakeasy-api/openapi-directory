/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * JobScheduleStatistics - Resource usage statistics for a job schedule.
 */
public class JobScheduleStatistics {
    /**
     * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("kernelCPUTime")
    public String kernelCPUTime;
    public JobScheduleStatistics withKernelCPUTime(String kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }
    
    /**
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;
    public JobScheduleStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * The total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.
     */
    @JsonProperty("numFailedTasks")
    public Long numFailedTasks;
    public JobScheduleStatistics withNumFailedTasks(Long numFailedTasks) {
        this.numFailedTasks = numFailedTasks;
        return this;
    }
    
    /**
     * The total number of tasks successfully completed during the given time range in jobs created under the schedule. A task completes successfully if it returns exit code 0.
     */
    @JsonProperty("numSucceededTasks")
    public Long numSucceededTasks;
    public JobScheduleStatistics withNumSucceededTasks(Long numSucceededTasks) {
        this.numSucceededTasks = numSucceededTasks;
        return this;
    }
    
    /**
     * The total number of retries during the given time range on all tasks in all jobs created under the schedule.
     */
    @JsonProperty("numTaskRetries")
    public Long numTaskRetries;
    public JobScheduleStatistics withNumTaskRetries(Long numTaskRetries) {
        this.numTaskRetries = numTaskRetries;
        return this;
    }
    
    /**
     * The total gibibytes read from disk by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("readIOGiB")
    public Double readIOGiB;
    public JobScheduleStatistics withReadIOGiB(Double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }
    
    /**
     * The total number of disk read operations made by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("readIOps")
    public Long readIOps;
    public JobScheduleStatistics withReadIOps(Long readIOps) {
        this.readIOps = readIOps;
        return this;
    }
    
    /**
     * The start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public JobScheduleStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The URL of the statistics.
     */
    @JsonProperty("url")
    public String url;
    public JobScheduleStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("userCPUTime")
    public String userCPUTime;
    public JobScheduleStatistics withUserCPUTime(String userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }
    
    /**
     * The total wait time of all tasks in all jobs created under the schedule. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
     */
    @JsonProperty("waitTime")
    public String waitTime;
    public JobScheduleStatistics withWaitTime(String waitTime) {
        this.waitTime = waitTime;
        return this;
    }
    
    /**
     * The total wall clock time of all the tasks in all the jobs created under the schedule.
     */
    @JsonProperty("wallClockTime")
    public String wallClockTime;
    public JobScheduleStatistics withWallClockTime(String wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }
    
    /**
     * The total gibibytes written to disk by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("writeIOGiB")
    public Double writeIOGiB;
    public JobScheduleStatistics withWriteIOGiB(Double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }
    
    /**
     * The total number of disk write operations made by all tasks in all jobs created under the schedule.
     */
    @JsonProperty("writeIOps")
    public Long writeIOps;
    public JobScheduleStatistics withWriteIOps(Long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }
    
}
