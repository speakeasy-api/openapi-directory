/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ArchivalSpec {
    @JsonProperty("archivalThreshold")
    public Long archivalThreshold;

    public ArchivalSpec withArchivalThreshold(Long archivalThreshold) {
        this.archivalThreshold = archivalThreshold;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archivalTieringSpec")
    public ArchivalTieringSpec archivalTieringSpec;

    public ArchivalSpec withArchivalTieringSpec(ArchivalTieringSpec archivalTieringSpec) {
        this.archivalTieringSpec = archivalTieringSpec;
        return this;
    }
    
    /**
     * A Boolean value that identifies whether the archival location type supports direct archive backups.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPassthroughSupported")
    public Boolean isPassthroughSupported;

    public ArchivalSpec withIsPassthroughSupported(Boolean isPassthroughSupported) {
        this.isPassthroughSupported = isPassthroughSupported;
        return this;
    }
    
    @JsonProperty("locationId")
    public String locationId;

    public ArchivalSpec withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationName")
    public String locationName;

    public ArchivalSpec withLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }
    
    public ArchivalSpec(@JsonProperty("archivalThreshold") Long archivalThreshold, @JsonProperty("locationId") String locationId) {
        this.archivalThreshold = archivalThreshold;
        this.locationId = locationId;
  }
}
