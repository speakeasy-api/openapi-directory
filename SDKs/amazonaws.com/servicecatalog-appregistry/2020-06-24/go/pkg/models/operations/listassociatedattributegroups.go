// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAssociatedAttributeGroupsPathParams struct {
	// The name or ID of the application.
	Application string `pathParam:"style=simple,explode=false,name=application"`
}

type ListAssociatedAttributeGroupsQueryParams struct {
	// The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to use to get the next page of results after a previous API call.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListAssociatedAttributeGroupsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListAssociatedAttributeGroupsRequest struct {
	PathParams  ListAssociatedAttributeGroupsPathParams
	QueryParams ListAssociatedAttributeGroupsQueryParams
	Headers     ListAssociatedAttributeGroupsHeaders
}

type ListAssociatedAttributeGroupsResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListAssociatedAttributeGroupsResponse *shared.ListAssociatedAttributeGroupsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
