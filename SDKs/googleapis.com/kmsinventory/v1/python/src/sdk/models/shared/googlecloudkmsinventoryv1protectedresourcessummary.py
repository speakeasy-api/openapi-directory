"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudKmsInventoryV1ProtectedResourcesSummary:
    r"""Aggregate information about the resources protected by a Cloud KMS key in the same Cloud organization as the key."""
    
    cloud_products: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudProducts'), 'exclude': lambda f: f is None }})
    r"""The number of resources protected by the key grouped by Cloud product."""  
    locations: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locations'), 'exclude': lambda f: f is None }})
    r"""The number of resources protected by the key grouped by region."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The full name of the ProtectedResourcesSummary resource. Example: projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary"""  
    project_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectCount'), 'exclude': lambda f: f is None }})
    r"""The number of distinct Cloud projects in the same Cloud organization as the key that have resources protected by the key."""  
    resource_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceCount'), 'exclude': lambda f: f is None }})
    r"""The total number of protected resources in the same Cloud organization as the key."""  
    resource_types: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceTypes'), 'exclude': lambda f: f is None }})
    r"""The number of resources protected by the key grouped by resource type."""  
    