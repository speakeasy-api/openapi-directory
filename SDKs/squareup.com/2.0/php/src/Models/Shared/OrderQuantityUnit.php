<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderQuantityUnit - Contains the measurement unit for a quantity and a precision that
 * 
 * specifies the number of digits after the decimal point for decimal quantities.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderQuantityUnit
{
    /**
     * The version of the catalog object that this measurement unit references.
     * 
     * 
     * This field is set when this is a catalog-backed measurement unit.
     * 
     * @var ?int $catalogVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $catalogVersion = null;
    
    /**
     * Represents a unit of measurement to use with a quantity, such as ounces
     * 
     * or inches. Exactly one of the following fields are required: `custom_unit`,
     * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MeasurementUnit $measurementUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('measurement_unit')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MeasurementUnit')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MeasurementUnit $measurementUnit = null;
    
    /**
     * For non-integer quantities, represents the number of digits after the decimal point that are
     * 
     * recorded for this quantity.
     * 
     * For example, a precision of 1 allows quantities such as `"1.0"` and `"1.1"`, but not `"1.01"`.
     * 
     * Min: 0. Max: 5.
     * 
     * @var ?int $precision
     */
	#[\JMS\Serializer\Annotation\SerializedName('precision')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $precision = null;
    
	public function __construct()
	{
		$this->catalogVersion = null;
		$this->measurementUnit = null;
		$this->precision = null;
	}
}
