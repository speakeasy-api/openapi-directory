"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessAlternateManagementInterfaceRequestBodyAccessPoints:
    
    alternate_management_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateManagementIp') }})
    r"""Wireless alternate management interface device IP. Provide an empty string to remove alternate management IP assignment"""  
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""Serial number of access point to be configured with alternate management IP"""  
    dns1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns1'), 'exclude': lambda f: f is None }})
    r"""Primary DNS must be in IP format"""  
    dns2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns2'), 'exclude': lambda f: f is None }})
    r"""Optional secondary DNS must be in IP format"""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Gateway must be in IP format"""  
    subnet_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetMask'), 'exclude': lambda f: f is None }})
    r"""Subnet mask must be in IP format"""  
    
class UpdateNetworkWirelessAlternateManagementInterfaceRequestBodyProtocolsEnum(str, Enum):
    LDAP = 'ldap'
    RADIUS = 'radius'
    SNMP = 'snmp'
    SYSLOG = 'syslog'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessAlternateManagementInterfaceRequestBody:
    
    access_points: Optional[list[UpdateNetworkWirelessAlternateManagementInterfaceRequestBodyAccessPoints]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPoints'), 'exclude': lambda f: f is None }})
    r"""Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean value to enable or disable alternate management interface"""  
    protocols: Optional[list[UpdateNetworkWirelessAlternateManagementInterfaceRequestBodyProtocolsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocols'), 'exclude': lambda f: f is None }})
    r"""Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'"""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""Alternate management interface VLAN, must be between 1 and 4094"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessAlternateManagementInterfaceRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessAlternateManagementInterfaceRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkWirelessAlternateManagementInterfaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_alternate_management_interface_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    