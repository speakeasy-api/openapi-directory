/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateComponentRequestBody {
    /**
     * The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changeDescription")
    public String changeDescription;

    public CreateComponentRequestBody withChangeDescription(String changeDescription) {
        this.changeDescription = changeDescription;
        return this;
    }
    
    /**
     * The idempotency token of the component.
     */
    @JsonProperty("clientToken")
    public String clientToken;

    public CreateComponentRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * Component &lt;code&gt;data&lt;/code&gt; contains inline YAML document content for the component. Alternatively, you can specify the &lt;code&gt;uri&lt;/code&gt; of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public String data;

    public CreateComponentRequestBody withData(String data) {
        this.data = data;
        return this;
    }
    
    /**
     * Describes the contents of the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CreateComponentRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The ID of the KMS key that is used to encrypt this component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyId")
    public String kmsKeyId;

    public CreateComponentRequestBody withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }
    
    /**
     * The name of the component.
     */
    @JsonProperty("name")
    public String name;

    public CreateComponentRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The operating system platform of the component.
     */
    @JsonProperty("platform")
    public CreateComponentRequestBodyPlatformEnum platform;

    public CreateComponentRequestBody withPlatform(CreateComponentRequestBodyPlatformEnum platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * &lt;p&gt;The semantic version of the component. This version follows the semantic version syntax.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The semantic version has four nodes: &amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;/&amp;lt;build&amp;gt;. You can assign values for the first three, and can filter on all of them.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Assignment:&lt;/b&gt; For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Patterns:&lt;/b&gt; You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonProperty("semanticVersion")
    public String semanticVersion;

    public CreateComponentRequestBody withSemanticVersion(String semanticVersion) {
        this.semanticVersion = semanticVersion;
        return this;
    }
    
    /**
     * The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedOsVersions")
    public String[] supportedOsVersions;

    public CreateComponentRequestBody withSupportedOsVersions(String[] supportedOsVersions) {
        this.supportedOsVersions = supportedOsVersions;
        return this;
    }
    
    /**
     * The tags that apply to the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public CreateComponentRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * &lt;p&gt;The &lt;code&gt;uri&lt;/code&gt; of a YAML component document file. This must be an S3 URL (&lt;code&gt;s3://bucket/key&lt;/code&gt;), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.&lt;/p&gt; &lt;p&gt;Alternatively, you can specify the YAML document inline, using the component &lt;code&gt;data&lt;/code&gt; property. You cannot specify both properties.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;

    public CreateComponentRequestBody withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    public CreateComponentRequestBody(@JsonProperty("clientToken") String clientToken, @JsonProperty("name") String name, @JsonProperty("platform") CreateComponentRequestBodyPlatformEnum platform, @JsonProperty("semanticVersion") String semanticVersion) {
        this.clientToken = clientToken;
        this.name = name;
        this.platform = platform;
        this.semanticVersion = semanticVersion;
  }
}
