"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nawelcomesnapshot as shared_nawelcomesnapshot
from ..shared import nawelcomesubevent as shared_nawelcomesubevent
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NAWelcomeEventCategoryEnum(str, Enum):
    r"""Type of the detected object."""
    HUMAN = 'human'
    ANIMAL = 'animal'
    VEHICLE = 'vehicle'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAWelcomeEvent:
    
    camera_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('camera_id'), 'exclude': lambda f: f is None }})
    r"""Camera that detected the event"""  
    category: Optional[NAWelcomeEventCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Type of the detected object."""  
    event_list: Optional[list[shared_nawelcomesubevent.NAWelcomeSubEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_list'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the event"""  
    is_arrival: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_arrival'), 'exclude': lambda f: f is None }})
    r"""If person was considered away before being seen during this event"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""User facing event description"""  
    person_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person_id'), 'exclude': lambda f: f is None }})
    r"""Id of the person the event is about (if any)"""  
    snapshot: Optional[shared_nawelcomesnapshot.NAWelcomeSnapshot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshot'), 'exclude': lambda f: f is None }})  
    sub_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_type'), 'exclude': lambda f: f is None }})
    r"""Subtypes of SD and Alim events. Go to Welcome page for further details."""  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Time of occurence of event"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of events. Go to the Welcome page for further details."""  
    video_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video_id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the video"""  
    video_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video_status'), 'exclude': lambda f: f is None }})
    r"""Status of the video (recording, deleted or available)"""  
    