"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import repository as shared_repository
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateUsingTemplateRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the new repository."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description of the new repository."""  
    include_all_branches: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_all_branches'), 'exclude': lambda f: f is None }})
    r"""Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`."""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization."""  
    private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private'), 'exclude': lambda f: f is None }})
    r"""Either `true` to create a new private repository or `false` to create a new public one."""  
    

@dataclasses.dataclass
class ReposCreateUsingTemplateRequest:
    
    request_body: ReposCreateUsingTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    template_owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'template_owner', 'style': 'simple', 'explode': False }})  
    template_repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'template_repo', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ReposCreateUsingTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository: Optional[shared_repository.Repository] = dataclasses.field(default=None)
    r"""Response"""  
    