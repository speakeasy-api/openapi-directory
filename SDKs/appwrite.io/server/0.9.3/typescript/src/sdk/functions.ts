/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Functions Service allows you view, create and manage your Cloud Functions.
 */
export class Functions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Function
   *
   * @remarks
   * Create a new function. You can pass a list of [permissions](/docs/permissions) to allow different project users or team with access to execute the function using the client API.
   */
  functionsCreate(
    req: operations.FunctionsCreateRequestBody,
    security: operations.FunctionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsCreateRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/functions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsCreateResponse =
        new operations.FunctionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.function = utils.objectToClass(httpRes?.data, shared.FunctionT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Execution
   *
   * @remarks
   * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
   */
  functionsCreateExecution(
    req: operations.FunctionsCreateExecutionRequest,
    security: operations.FunctionsCreateExecutionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsCreateExecutionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsCreateExecutionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/executions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsCreateExecutionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsCreateExecutionResponse =
        new operations.FunctionsCreateExecutionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.execution = utils.objectToClass(
              httpRes?.data,
              shared.Execution
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Tag
   *
   * @remarks
   * Create a new function code tag. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's tag to use your new tag UID.
   *
   * This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](/docs/functions).
   *
   * Use the "command" param to set the entry point used to execute your code.
   */
  functionsCreateTag(
    req: operations.FunctionsCreateTagRequest,
    security: operations.FunctionsCreateTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsCreateTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsCreateTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsCreateTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsCreateTagResponse =
        new operations.FunctionsCreateTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Function
   *
   * @remarks
   * Delete a function by its unique ID.
   */
  functionsDelete(
    req: operations.FunctionsDeleteRequest,
    security: operations.FunctionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsDeleteResponse =
        new operations.FunctionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete Tag
   *
   * @remarks
   * Delete a code tag by its unique ID.
   */
  functionsDeleteTag(
    req: operations.FunctionsDeleteTagRequest,
    security: operations.FunctionsDeleteTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsDeleteTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsDeleteTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/tags/{tagId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsDeleteTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsDeleteTagResponse =
        new operations.FunctionsDeleteTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get Function
   *
   * @remarks
   * Get a function by its unique ID.
   */
  functionsGet(
    req: operations.FunctionsGetRequest,
    security: operations.FunctionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsGetResponse =
        new operations.FunctionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.function = utils.objectToClass(httpRes?.data, shared.FunctionT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Execution
   *
   * @remarks
   * Get a function execution log by its unique ID.
   */
  functionsGetExecution(
    req: operations.FunctionsGetExecutionRequest,
    security: operations.FunctionsGetExecutionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsGetExecutionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsGetExecutionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/executions/{executionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsGetExecutionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsGetExecutionResponse =
        new operations.FunctionsGetExecutionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.execution = utils.objectToClass(
              httpRes?.data,
              shared.Execution
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Tag
   *
   * @remarks
   * Get a code tag by its unique ID.
   */
  functionsGetTag(
    req: operations.FunctionsGetTagRequest,
    security: operations.FunctionsGetTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsGetTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsGetTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/tags/{tagId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsGetTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsGetTagResponse =
        new operations.FunctionsGetTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Functions
   *
   * @remarks
   * Get a list of all the project's functions. You can use the query params to filter your results.
   */
  functionsList(
    req: operations.FunctionsListRequest,
    security: operations.FunctionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/functions";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsListResponse =
        new operations.FunctionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.functionList = utils.objectToClass(
              httpRes?.data,
              shared.FunctionList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Executions
   *
   * @remarks
   * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin).
   */
  functionsListExecutions(
    req: operations.FunctionsListExecutionsRequest,
    security: operations.FunctionsListExecutionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsListExecutionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsListExecutionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/executions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsListExecutionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsListExecutionsResponse =
        new operations.FunctionsListExecutionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executionList = utils.objectToClass(
              httpRes?.data,
              shared.ExecutionList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Tags
   *
   * @remarks
   * Get a list of all the project's code tags. You can use the query params to filter your results.
   */
  functionsListTags(
    req: operations.FunctionsListTagsRequest,
    security: operations.FunctionsListTagsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsListTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsListTagsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/tags",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsListTagsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsListTagsResponse =
        new operations.FunctionsListTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagList = utils.objectToClass(httpRes?.data, shared.TagList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Function
   *
   * @remarks
   * Update function by its unique ID.
   */
  functionsUpdate(
    req: operations.FunctionsUpdateRequest,
    security: operations.FunctionsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsUpdateResponse =
        new operations.FunctionsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.function = utils.objectToClass(httpRes?.data, shared.FunctionT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Function Tag
   *
   * @remarks
   * Update the function code tag ID using the unique function ID. Use this endpoint to switch the code tag that should be executed by the execution endpoint.
   */
  functionsUpdateTag(
    req: operations.FunctionsUpdateTagRequest,
    security: operations.FunctionsUpdateTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FunctionsUpdateTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FunctionsUpdateTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/functions/{functionId}/tag",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FunctionsUpdateTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FunctionsUpdateTagResponse =
        new operations.FunctionsUpdateTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.function = utils.objectToClass(httpRes?.data, shared.FunctionT);
          }
          break;
      }

      return res;
    });
  }
}
