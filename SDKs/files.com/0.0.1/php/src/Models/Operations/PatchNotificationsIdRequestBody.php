<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class PatchNotificationsIdRequestBody
{
    /**
     * Custom message to include in notification emails.
     * 
     * @var ?string $message
     */
	#[SpeakeasyMetadata('multipartForm:name=message')]
    public ?string $message = null;
    
    /**
     * If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.
     * 
     * @var ?bool $notifyOnCopy
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_on_copy')]
    public ?bool $notifyOnCopy = null;
    
    /**
     * Triggers notification when deleting files from this path
     * 
     * @var ?bool $notifyOnDelete
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_on_delete')]
    public ?bool $notifyOnDelete = null;
    
    /**
     * Triggers notification when downloading files from this path
     * 
     * @var ?bool $notifyOnDownload
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_on_download')]
    public ?bool $notifyOnDownload = null;
    
    /**
     * Triggers notification when moving files to this path
     * 
     * @var ?bool $notifyOnMove
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_on_move')]
    public ?bool $notifyOnMove = null;
    
    /**
     * Triggers notification when uploading new files to this path
     * 
     * @var ?bool $notifyOnUpload
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_on_upload')]
    public ?bool $notifyOnUpload = null;
    
    /**
     * If `true` actions initiated by the user will still result in a notification
     * 
     * @var ?bool $notifyUserActions
     */
	#[SpeakeasyMetadata('multipartForm:name=notify_user_actions')]
    public ?bool $notifyUserActions = null;
    
    /**
     * If `true`, enable notifications for each subfolder in this path
     * 
     * @var ?bool $recursive
     */
	#[SpeakeasyMetadata('multipartForm:name=recursive')]
    public ?bool $recursive = null;
    
    /**
     * The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.
     * 
     * @var ?string $sendInterval
     */
	#[SpeakeasyMetadata('multipartForm:name=send_interval')]
    public ?string $sendInterval = null;
    
    /**
     * Notify when actions are performed by a share recipient?
     * 
     * @var ?bool $triggerByShareRecipients
     */
	#[SpeakeasyMetadata('multipartForm:name=trigger_by_share_recipients')]
    public ?bool $triggerByShareRecipients = null;
    
    /**
     * Array of filenames (possibly with wildcards) to match for action path
     * 
     * @var ?array<string> $triggeringFilenames
     */
	#[SpeakeasyMetadata('multipartForm:name=triggering_filenames')]
    public ?array $triggeringFilenames = null;
    
    /**
     * Only notify on actions made by a member of one of the specified groups
     * 
     * @var ?array<int> $triggeringGroupIds
     */
	#[SpeakeasyMetadata('multipartForm:name=triggering_group_ids')]
    public ?array $triggeringGroupIds = null;
    
    /**
     * Only notify on actions made one of the specified users
     * 
     * @var ?array<int> $triggeringUserIds
     */
	#[SpeakeasyMetadata('multipartForm:name=triggering_user_ids')]
    public ?array $triggeringUserIds = null;
    
	public function __construct()
	{
		$this->message = null;
		$this->notifyOnCopy = null;
		$this->notifyOnDelete = null;
		$this->notifyOnDownload = null;
		$this->notifyOnMove = null;
		$this->notifyOnUpload = null;
		$this->notifyUserActions = null;
		$this->recursive = null;
		$this->sendInterval = null;
		$this->triggerByShareRecipients = null;
		$this->triggeringFilenames = null;
		$this->triggeringGroupIds = null;
		$this->triggeringUserIds = null;
	}
}
