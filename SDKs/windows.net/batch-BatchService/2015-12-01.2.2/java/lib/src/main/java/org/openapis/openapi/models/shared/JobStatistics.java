/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * JobStatistics - Resource usage statistics for a job.
 */
public class JobStatistics {
    /**
     * Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in the job.
     */
    @JsonProperty("kernelCPUTime")
    public String kernelCPUTime;

    public JobStatistics withKernelCPUTime(String kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }
    
    /**
     * Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between StartTime and LastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;

    public JobStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * Gets or sets the total number of tasks in the job that failed during the given time range.
     */
    @JsonProperty("numFailedTasks")
    public Long numFailedTasks;

    public JobStatistics withNumFailedTasks(Long numFailedTasks) {
        this.numFailedTasks = numFailedTasks;
        return this;
    }
    
    /**
     * Gets or sets the total number of tasks successfully completed in the job during the given time range.
     */
    @JsonProperty("numSucceededTasks")
    public Long numSucceededTasks;

    public JobStatistics withNumSucceededTasks(Long numSucceededTasks) {
        this.numSucceededTasks = numSucceededTasks;
        return this;
    }
    
    /**
     * Gets or sets the total number of retries on all the tasks in the job during the given time range.
     */
    @JsonProperty("numTaskRetries")
    public Long numTaskRetries;

    public JobStatistics withNumTaskRetries(Long numTaskRetries) {
        this.numTaskRetries = numTaskRetries;
        return this;
    }
    
    /**
     * Gets or sets the total amount of data in GiB of I/O read by all the tasks in the job.
     */
    @JsonProperty("readIOGiB")
    public Double readIOGiB;

    public JobStatistics withReadIOGiB(Double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }
    
    /**
     * Gets or sets the total number of I/O read operations performed by all the tasks in the job.
     */
    @JsonProperty("readIOps")
    public Long readIOps;

    public JobStatistics withReadIOps(Long readIOps) {
        this.readIOps = readIOps;
        return this;
    }
    
    /**
     * Gets or sets the start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public JobStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Gets or sets the URL for the statistics.
     */
    @JsonProperty("url")
    public String url;

    public JobStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in the job.
     */
    @JsonProperty("userCPUTime")
    public String userCPUTime;

    public JobStatistics withUserCPUTime(String userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }
    
    /**
     * Gets or sets the total wait time of all the tasks in the job.  The wait time for a task is defined as the elapsed time between the creation of the task creation and the start of task execution.  This value is reported only in the account lifetime statistics; it is not included in individual job statistics.
     */
    @JsonProperty("waitTime")
    public String waitTime;

    public JobStatistics withWaitTime(String waitTime) {
        this.waitTime = waitTime;
        return this;
    }
    
    /**
     * Gets or sets the total wall clock time of all the tasks in the job.
     */
    @JsonProperty("wallClockTime")
    public String wallClockTime;

    public JobStatistics withWallClockTime(String wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }
    
    /**
     * Gets or sets the total amount of data in GiB of I/O written by all the tasks in the job.
     */
    @JsonProperty("writeIOGiB")
    public Double writeIOGiB;

    public JobStatistics withWriteIOGiB(Double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }
    
    /**
     * Gets or sets the total number of I/O write operations performed by all the tasks in the job.
     */
    @JsonProperty("writeIOps")
    public Long writeIOps;

    public JobStatistics withWriteIOps(Long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }
    
    public JobStatistics(@JsonProperty("kernelCPUTime") String kernelCPUTime, @JsonProperty("lastUpdateTime") OffsetDateTime lastUpdateTime, @JsonProperty("numFailedTasks") Long numFailedTasks, @JsonProperty("numSucceededTasks") Long numSucceededTasks, @JsonProperty("numTaskRetries") Long numTaskRetries, @JsonProperty("readIOGiB") Double readIOGiB, @JsonProperty("readIOps") Long readIOps, @JsonProperty("startTime") OffsetDateTime startTime, @JsonProperty("url") String url, @JsonProperty("userCPUTime") String userCPUTime, @JsonProperty("waitTime") String waitTime, @JsonProperty("wallClockTime") String wallClockTime, @JsonProperty("writeIOGiB") Double writeIOGiB, @JsonProperty("writeIOps") Long writeIOps) {
        this.kernelCPUTime = kernelCPUTime;
        this.lastUpdateTime = lastUpdateTime;
        this.numFailedTasks = numFailedTasks;
        this.numSucceededTasks = numSucceededTasks;
        this.numTaskRetries = numTaskRetries;
        this.readIOGiB = readIOGiB;
        this.readIOps = readIOps;
        this.startTime = startTime;
        this.url = url;
        this.userCPUTime = userCPUTime;
        this.waitTime = waitTime;
        this.wallClockTime = wallClockTime;
        this.writeIOGiB = writeIOGiB;
        this.writeIOps = writeIOps;
  }
}
