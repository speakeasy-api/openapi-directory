// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateTestGridURLXAmzTargetEnum
type CreateTestGridURLXAmzTargetEnum string

const (
	CreateTestGridURLXAmzTargetEnumDeviceFarm20150623CreateTestGridURL CreateTestGridURLXAmzTargetEnum = "DeviceFarm_20150623.CreateTestGridUrl"
)

func (e *CreateTestGridURLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeviceFarm_20150623.CreateTestGridUrl":
		*e = CreateTestGridURLXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTestGridURLXAmzTargetEnum: %s", s)
	}
}

type CreateTestGridURLRequest struct {
	CreateTestGridURLRequest shared.CreateTestGridURLRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateTestGridURLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateTestGridURLResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// Success
	CreateTestGridURLResult *shared.CreateTestGridURLResult
	// InternalServiceException
	InternalServiceException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
