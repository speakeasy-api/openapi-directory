/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TflApiPresentationEntitiesStreetSegment } from "./tflapipresentationentitiesstreetsegment";
import { Expose, Type } from "class-transformer";

export class TflApiPresentationEntitiesStreet extends SpeakeasyBase {
  /**
   * Type of road closure. Some example values:
   *
   * @remarks
   *             Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
   *             Partial Closure = road is partially blocked, closed or restricted.
   *             Full Closure = road is fully blocked or closed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closure" })
  closure?: string;

  /**
   * The direction of the disruption on the street. Some example values:
   *
   * @remarks
   *             All Directions
   *             All Approaches
   *             Clockwise
   *             Anti-Clockwise
   *             Northbound
   *             Eastbound
   *             Southbound
   *             Westbound
   *             Both Directions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directions" })
  directions?: string;

  /**
   * Street name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Geographic description of the sections of this street that are affected.
   */
  @SpeakeasyMetadata({ elemType: TflApiPresentationEntitiesStreetSegment })
  @Expose({ name: "segments" })
  @Type(() => TflApiPresentationEntitiesStreetSegment)
  segments?: TflApiPresentationEntitiesStreetSegment[];

  /**
   * The ID from the source system of the disruption that this street belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceSystemId" })
  sourceSystemId?: number;

  /**
   * The key of the source system of the disruption that this street belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceSystemKey" })
  sourceSystemKey?: string;
}
