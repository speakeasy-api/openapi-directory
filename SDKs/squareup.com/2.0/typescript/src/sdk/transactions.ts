/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Transactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CaptureTransaction
   *
   * @remarks
   * Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
   * endpoint with a `delay_capture` value of `true`.
   *
   *
   * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
   * for more information.
   */
  captureTransaction(
    req: operations.CaptureTransactionRequest,
    security: operations.CaptureTransactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CaptureTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CaptureTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions/{transaction_id}/capture",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CaptureTransactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CaptureTransactionResponse =
        new operations.CaptureTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.captureTransactionResponse = utils.objectToClass(
              httpRes?.data,
              shared.CaptureTransactionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Charge
   *
   * @remarks
   * Charges a card represented by a card nonce or a customer's card on file.
   *
   * Your request to this endpoint must include _either_:
   *
   * - A value for the `card_nonce` parameter (to charge a card payment token generated
   * with the Web Payments SDK)
   * - Values for the `customer_card_id` and `customer_id` parameters (to charge
   * a customer's card on file)
   *
   * In order for an eCommerce payment to potentially qualify for
   * [Square chargeback protection](https://squareup.com/help/article/5394), you
   * _must_ provide values for the following parameters in your request:
   *
   * - `buyer_email_address`
   * - At least one of `billing_address` or `shipping_address`
   *
   * When this response is returned, the amount of Square's processing fee might not yet be
   * calculated. To obtain the processing fee, wait about ten seconds and call
   * [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money`
   * field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
   */
  charge(
    req: operations.ChargeRequest,
    security: operations.ChargeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChargeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChargeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "chargeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChargeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChargeResponse = new operations.ChargeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chargeResponse = utils.objectToClass(
              httpRes?.data,
              shared.ChargeResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListTransactions
   *
   * @remarks
   * Lists transactions for a particular location.
   *
   * Transactions include payment information from sales and exchanges and refund
   * information from returns and exchanges.
   *
   * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
   */
  listTransactions(
    req: operations.ListTransactionsRequest,
    security: operations.ListTransactionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListTransactionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTransactionsResponse =
        new operations.ListTransactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransactionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransactionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveTransaction
   *
   * @remarks
   * Retrieves details for a single transaction.
   */
  retrieveTransaction(
    req: operations.RetrieveTransactionRequest,
    security: operations.RetrieveTransactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions/{transaction_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveTransactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveTransactionResponse =
        new operations.RetrieveTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveTransactionResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveTransactionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * VoidTransaction
   *
   * @remarks
   * Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
   * endpoint with a `delay_capture` value of `true`.
   *
   *
   * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
   * for more information.
   */
  voidTransaction(
    req: operations.VoidTransactionRequest,
    security: operations.VoidTransactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VoidTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VoidTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions/{transaction_id}/void",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VoidTransactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VoidTransactionResponse =
        new operations.VoidTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.voidTransactionResponse = utils.objectToClass(
              httpRes?.data,
              shared.VoidTransactionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListRefunds
   *
   * @remarks
   * Lists refunds for one of a business's locations.
   *
   * In addition to full or partial tender refunds processed through Square APIs,
   * refunds may result from itemized returns or exchanges through Square's
   * Point of Sale applications.
   *
   * Refunds with a `status` of `PENDING` are not currently included in this
   * endpoint's response.
   *
   * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
   */
  getV2LocationsLocationIdRefunds(
    req: operations.GetV2LocationsLocationIdRefundsRequest,
    security: operations.GetV2LocationsLocationIdRefundsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2LocationsLocationIdRefundsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2LocationsLocationIdRefundsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/refunds",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetV2LocationsLocationIdRefundsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2LocationsLocationIdRefundsResponse =
        new operations.GetV2LocationsLocationIdRefundsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRefundsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRefundsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateRefund
   *
   * @remarks
   * Initiates a refund for a previously charged tender.
   *
   * You must issue a refund within 120 days of the associated payment. See
   * [this article](https://squareup.com/help/us/en/article/5060) for more information
   * on refund behavior.
   *
   * NOTE: Card-present transactions with Interac credit cards **cannot be
   * refunded using the Connect API**. Interac transactions must refunded
   * in-person (e.g., dipping the card using POS app).
   */
  postV2LocationsLocationIdTransactionsTransactionIdRefund(
    req: operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundRequest,
    security: operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}/transactions/{transaction_id}/refund",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createRefundRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse =
        new operations.PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createRefundResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateRefundResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
