/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ActionTypeEnum } from "./actiontypeenum";
import { HandshakeParty } from "./handshakeparty";
import { HandshakeResource } from "./handshakeresource";
import { HandshakeStateEnum } from "./handshakestateenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Contains information that must be exchanged to securely establish a relationship between two accounts (an <i>originator</i> and a <i>recipient</i>). For example, when a management account (the originator) invites another account (the recipient) to join its organization, the two accounts exchange information as a series of handshake requests and responses.</p> <p> <b>Note:</b> Handshakes that are <code>CANCELED</code>, <code>ACCEPTED</code>, <code>DECLINED</code>, or <code>EXPIRED</code> show up in lists for only 30 days after entering that state After that they are deleted.</p>
 */
export class Handshake extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Action" })
  action?: ActionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExpirationTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: HandshakeParty })
  @Expose({ name: "Parties" })
  @Type(() => HandshakeParty)
  parties?: HandshakeParty[];

  @SpeakeasyMetadata()
  @Expose({ name: "RequestedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedTimestamp?: Date;

  @SpeakeasyMetadata({ elemType: HandshakeResource })
  @Expose({ name: "Resources" })
  @Type(() => HandshakeResource)
  resources?: HandshakeResource[];

  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: HandshakeStateEnum;
}
