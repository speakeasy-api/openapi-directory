<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ImportLensRequestBody
{
    /**
     * <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
     * 
     * @var string $clientRequestToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('ClientRequestToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientRequestToken;
    
    /**
     * The JSON representation of a lens.
     * 
     * @var string $jsonString
     */
	#[\JMS\Serializer\Annotation\SerializedName('JSONString')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $jsonString;
    
    /**
     * <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
     * 
     * @var ?string $lensAlias
     */
	#[\JMS\Serializer\Annotation\SerializedName('LensAlias')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lensAlias = null;
    
    /**
     * Tags to associate to a lens.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('Tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->clientRequestToken = "";
		$this->jsonString = "";
		$this->lensAlias = null;
		$this->tags = null;
	}
}
