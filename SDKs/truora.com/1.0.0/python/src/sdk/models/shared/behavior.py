"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class BehaviorCountryEnum(str, Enum):
    r"""Document country"""
    CO = 'co'
    VE = 've'
    CL = 'cl'
    MX = 'mx'
    PE = 'pe'
    DO = 'do'
    SV = 'sv'
    GT = 'gt'
    BO = 'bo'
    CR = 'cr'
    EC = 'ec'
    PA = 'pa'
    BR = 'br'

class BehaviorDocumentTypeEnum(str, Enum):
    r"""Document type associated with the background check"""
    NATIONAL_ID = 'national-id'
    PASSPORT = 'passport'
    FOREIGN_ID = 'foreign-id'
    NIT = 'nit'
    DIPLOMATIC_ID = 'diplomatic-id'
    CIVIL_REGISTRATION = 'civil-registration'
    IDENTITY_CARD = 'identity-card'
    FOREIGNER_CARD = 'foreigner-card'
    PROFESSIONAL_CARD = 'professional-card'
    MILITARY_CARD = 'military-card'
    PEP = 'pep'
    NIS = 'nis'
    DNI = 'dni'
    RUI = 'rui'
    LICENSE_PLATE = 'license-plate'
    QUERY = 'query'
    NAME = 'name'
    RUT = 'rut'
    NUIP = 'nuip'
    FOREIGN_SOCIETIES = 'foreign-societies'
    ESCROW = 'escrow'
    INDIVIDUAL_REGISTRATION = 'individual-registration'
    GENERAL_REGISTRATION = 'general-registration'
    CURP = 'curp'
    DUI = 'dui'
    DRIVER_LICENSE = 'driver-license'
    RUC = 'ruc'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Behavior:
    r"""Represents behaviour reports"""
    
    birth_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birth_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Birth date of reported person"""  
    country: BehaviorCountryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Document country"""  
    document_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id') }})
    r"""Person document ID"""  
    document_type: BehaviorDocumentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_type') }})
    r"""Document type associated with the background check"""  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Reported person e-mail"""  
    feedback_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedback_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Behavior report date"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})
    r"""Person first name"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})
    r"""Person last name"""  
    reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""Report reason"""  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Feedback creation date"""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the reported person"""  
    