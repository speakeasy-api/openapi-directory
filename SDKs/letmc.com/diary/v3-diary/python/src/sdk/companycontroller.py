"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CompanyController:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def company_controller_get_branches(self, request: operations.CompanyControllerGetBranchesRequest) -> operations.CompanyControllerGetBranchesResponse:
        r"""All branches defined for a company"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyControllerGetBranchesRequest, base_url, '/v3/diary/{shortName}/company/branches', request)
        
        query_params = utils.get_query_params(operations.CompanyControllerGetBranchesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyControllerGetBranchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertisingBranchModelResults])
                res.advertising_branch_model_results = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertisingBranchModelResults])
                res.advertising_branch_model_results = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_v3_diary_short_name_company_branches_branch_id_(self, request: operations.GetV3DiaryShortNameCompanyBranchesBranchIDRequest) -> operations.GetV3DiaryShortNameCompanyBranchesBranchIDResponse:
        r"""Get a specific branch given its unique Object ID (OID)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV3DiaryShortNameCompanyBranchesBranchIDRequest, base_url, '/v3/diary/{shortName}/company/branches/{branchID}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV3DiaryShortNameCompanyBranchesBranchIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertisingBranchModel])
                res.advertising_branch_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertisingBranchModel])
                res.advertising_branch_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    