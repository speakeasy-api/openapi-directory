// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UnsupportedRuleResponseRuleTypeEnum string

const (
	UnsupportedRuleResponseRuleTypeEnumUnsupported UnsupportedRuleResponseRuleTypeEnum = "unsupported"
)

func (e UnsupportedRuleResponseRuleTypeEnum) ToPointer() *UnsupportedRuleResponseRuleTypeEnum {
	return &e
}

func (e *UnsupportedRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unsupported":
		*e = UnsupportedRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnsupportedRuleResponseRuleTypeEnum: %v", v)
	}
}

type UnsupportedRuleResponseTarget struct {
	URL string `json:"url"`
}

type UnsupportedRuleResponse struct {
	Links       map[string]interface{}              `json:"_links,omitempty"`
	AppID       *string                             `json:"appId,omitempty"`
	Created     *float64                            `json:"created,omitempty"`
	ID          *string                             `json:"id,omitempty"`
	Modified    *float64                            `json:"modified,omitempty"`
	RequestMode string                              `json:"requestMode"`
	RuleType    UnsupportedRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                          `json:"source"`
	Status      *string                             `json:"status,omitempty"`
	Target      UnsupportedRuleResponseTarget       `json:"target"`
	Version     *string                             `json:"version,omitempty"`
}
