"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://azure-api.sportsdata.io/v3/mlb/stats",
    "https://azure-api.sportsdata.io/v3/mlb/stats",
];
/**
 * MLB scores, stats, and news API.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     * Are Games In Progress
     *
     * @remarks
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     */
    SDK.prototype.areGamesInProgress = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AreGamesInProgressRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/AreAnyGamesInProgress", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AreGamesInProgressResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.areGamesInProgress200ApplicationJSONBoolean = httpRes === null || httpRes === void 0 ? void 0 : httpRes.data;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Batter vs. Pitcher Stats
     */
    SDK.prototype.batterVsPitcherStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BatterVsPitcherStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/HitterVsPitcher/{hitterid}/{pitcherid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BatterVsPitcherStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Box Score
     */
    SDK.prototype.boxScore = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BoxScoreRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/BoxScore/{gameid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BoxScoreResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.boxScore = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BoxScore);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Box Scores by Date
     */
    SDK.prototype.boxScoresByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BoxScoresByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/BoxScores/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BoxScoresByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.boxScores = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.boxScores = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BoxScore, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Box Scores by Date Delta
     */
    SDK.prototype.boxScoresByDateDelta = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BoxScoresByDateDeltaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/BoxScoresDelta/{date}/{minutes}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BoxScoresByDateDeltaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.boxScores = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.boxScores = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BoxScore, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Current Season
     */
    SDK.prototype.currentSeason = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CurrentSeasonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/CurrentSeason", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CurrentSeasonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.season = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Season);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DFS Slates by Date
     */
    SDK.prototype.dfsSlatesByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DfsSlatesByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/DfsSlatesByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DfsSlatesByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.dfsSlates = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.dfsSlates = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DfsSlate, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Games by Date
     */
    SDK.prototype.gamesByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GamesByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/GamesByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GamesByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.games = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.games = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Game, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News
     */
    SDK.prototype.news = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/News", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News by Date
     */
    SDK.prototype.newsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/NewsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News by Player
     */
    SDK.prototype.newsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/NewsByPlayerID/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Details by Active
     */
    SDK.prototype.playerDetailsByActive = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerDetailsByActiveRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Players", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerDetailsByActiveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Details by Free Agents
     */
    SDK.prototype.playerDetailsByFreeAgents = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerDetailsByFreeAgentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/FreeAgents", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerDetailsByFreeAgentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Details by Player
     */
    SDK.prototype.playerDetailsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerDetailsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Player/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerDetailsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.player = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Game Logs By Season
     */
    SDK.prototype.playerGameLogsBySeason = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerGameLogsBySeasonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerGameLogsBySeasonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerGames = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerGames = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerGame, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Game Stats by Date
     */
    SDK.prototype.playerGameStatsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerGameStatsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerGameStatsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerGameStatsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerGames = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerGames = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerGame, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Game Stats by Player
     */
    SDK.prototype.playerGameStatsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerGameStatsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerGameStatsByPlayer/{date}/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerGameStatsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerGame = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerGame);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Away Stats
     */
    SDK.prototype.playerSeasonAwayStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonAwayStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonAwayStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonAwayStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Home Stats
     */
    SDK.prototype.playerSeasonHomeStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonHomeStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonHomeStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonHomeStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Split Stats
     */
    SDK.prototype.playerSeasonSplitStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonSplitStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonSplitStats/{season}/{split}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonSplitStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Stats
     */
    SDK.prototype.playerSeasonStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Stats By Player
     */
    SDK.prototype.playerSeasonStatsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonStatsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonStatsByPlayer/{season}/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonStatsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeason = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Stats by Team
     */
    SDK.prototype.playerSeasonStatsByTeam = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonStatsByTeamRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonStatsByTeam/{season}/{team}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonStatsByTeamResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Stats Split By Team
     */
    SDK.prototype.playerSeasonStatsSplitByTeam = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonStatsSplitByTeamRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonStatsSplitByTeam/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonStatsSplitByTeamResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Players by Team
     */
    SDK.prototype.playersByTeam = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayersByTeamRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Players/{team}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayersByTeamResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Schedules
     */
    SDK.prototype.schedules = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SchedulesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Games/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SchedulesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.games = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.games = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Game, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Stadiums
     */
    SDK.prototype.stadiums = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StadiumsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Stadiums", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.StadiumsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.stadiums = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.stadiums = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Stadium, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Standings
     */
    SDK.prototype.standings = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StandingsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Standings/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.StandingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.standings = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.standings = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Standing, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Game Logs By Season
     *
     * @remarks
     * Game by game log of total team statistics.
     */
    SDK.prototype.teamGameLogsBySeason = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamGameLogsBySeasonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamGameLogsBySeasonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamGames = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamGames = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamGame, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Game Stats by Date
     */
    SDK.prototype.teamGameStatsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamGameStatsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamGameStatsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamGameStatsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamGames = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamGames = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamGame, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Hitting vs. Starting Pitcher
     */
    SDK.prototype.teamHittingVsStartingPitcher = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamHittingVsStartingPitcherRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamHittersVsPitcher/{gameid}/{team}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamHittingVsStartingPitcherResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Season Stats
     */
    SDK.prototype.teamSeasonStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamSeasonStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamSeasonStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamSeasonStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Teams (Active)
     */
    SDK.prototype.teamsActive = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamsActiveRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/teams", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamsActiveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teams = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teams = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Team, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Teams (All)
     */
    SDK.prototype.teamsAll = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamsAllRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/AllTeams", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamsAllResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teams = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teams = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Team, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
