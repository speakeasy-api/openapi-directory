// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransferableEnum - <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> <dt>DOMAIN_IN_OWN_ACCOUNT</dt> <dd> <p>The domain already exists in the current Amazon Web Services account.</p> </dd> <dt>DOMAIN_IN_ANOTHER_ACCOUNT</dt> <dd> <p> the domain exists in another Amazon Web Services account.</p> </dd> <dt>PREMIUM_DOMAIN</dt> <dd> <p>Premium domain transfer is not supported.</p> </dd> </dl>
type TransferableEnum string

const (
	TransferableEnumTransferable           TransferableEnum = "TRANSFERABLE"
	TransferableEnumUntransferable         TransferableEnum = "UNTRANSFERABLE"
	TransferableEnumDontKnow               TransferableEnum = "DONT_KNOW"
	TransferableEnumDomainInOwnAccount     TransferableEnum = "DOMAIN_IN_OWN_ACCOUNT"
	TransferableEnumDomainInAnotherAccount TransferableEnum = "DOMAIN_IN_ANOTHER_ACCOUNT"
	TransferableEnumPremiumDomain          TransferableEnum = "PREMIUM_DOMAIN"
)

func (e TransferableEnum) ToPointer() *TransferableEnum {
	return &e
}

func (e *TransferableEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRANSFERABLE":
		fallthrough
	case "UNTRANSFERABLE":
		fallthrough
	case "DONT_KNOW":
		fallthrough
	case "DOMAIN_IN_OWN_ACCOUNT":
		fallthrough
	case "DOMAIN_IN_ANOTHER_ACCOUNT":
		fallthrough
	case "PREMIUM_DOMAIN":
		*e = TransferableEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferableEnum: %v", v)
	}
}
