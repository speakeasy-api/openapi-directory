// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TapcnSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type TapcnRequestBodyCertificateParameters struct {
	// DocumentNumber
	DocumentNumber string `json:"DocumentNumber"`
}

// TapcnRequestBodyFormatEnum - The format of the certificate in response.
type TapcnRequestBodyFormatEnum string

const (
	TapcnRequestBodyFormatEnumPdf TapcnRequestBodyFormatEnum = "pdf"
)

func (e TapcnRequestBodyFormatEnum) ToPointer() *TapcnRequestBodyFormatEnum {
	return &e
}

func (e *TapcnRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = TapcnRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TapcnRequestBodyFormatEnum: %v", v)
	}
}

// TapcnRequestBody - Request format
type TapcnRequestBody struct {
	CertificateParameters *TapcnRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TapcnRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Tapcn504ApplicationJSONErrorEnum string

const (
	Tapcn504ApplicationJSONErrorEnumGatewayTimeout Tapcn504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Tapcn504ApplicationJSONErrorEnum) ToPointer() *Tapcn504ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Tapcn504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn504ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn504ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tapcn504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Tapcn504ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Tapcn504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn504ApplicationJSON - Gateway timeout
type Tapcn504ApplicationJSON struct {
	Error            *Tapcn504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn503ApplicationJSONErrorEnum string

const (
	Tapcn503ApplicationJSONErrorEnumServiceUnavailable Tapcn503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Tapcn503ApplicationJSONErrorEnum) ToPointer() *Tapcn503ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Tapcn503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn503ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn503ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tapcn503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Tapcn503ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Tapcn503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn503ApplicationJSON - Service unavailable
type Tapcn503ApplicationJSON struct {
	Error            *Tapcn503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn502ApplicationJSONErrorEnum string

const (
	Tapcn502ApplicationJSONErrorEnumBadGatewy Tapcn502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Tapcn502ApplicationJSONErrorEnum) ToPointer() *Tapcn502ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Tapcn502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn502ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn502ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tapcn502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Tapcn502ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Tapcn502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn502ApplicationJSON - Bad gateway
type Tapcn502ApplicationJSON struct {
	Error            *Tapcn502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn500ApplicationJSONErrorEnum string

const (
	Tapcn500ApplicationJSONErrorEnumInternalServerError Tapcn500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Tapcn500ApplicationJSONErrorEnum) ToPointer() *Tapcn500ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Tapcn500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn500ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn500ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn500ApplicationJSONErrorDescriptionEnumInternalServerError Tapcn500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Tapcn500ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Tapcn500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn500ApplicationJSON - Internal server error
type Tapcn500ApplicationJSON struct {
	Error            *Tapcn500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn404ApplicationJSONErrorEnum string

const (
	Tapcn404ApplicationJSONErrorEnumRecordNotFound Tapcn404ApplicationJSONErrorEnum = "record_not_found"
	Tapcn404ApplicationJSONErrorEnumURLNotFound    Tapcn404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Tapcn404ApplicationJSONErrorEnum) ToPointer() *Tapcn404ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tapcn404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn404ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn404ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tapcn404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tapcn404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tapcn404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Tapcn404ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tapcn404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn404ApplicationJSON - No record found
type Tapcn404ApplicationJSON struct {
	Error            *Tapcn404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn401ApplicationJSONErrorEnum string

const (
	Tapcn401ApplicationJSONErrorEnumInvalidAuthentication Tapcn401ApplicationJSONErrorEnum = "invalid_authentication"
	Tapcn401ApplicationJSONErrorEnumInvalidAuthorization  Tapcn401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Tapcn401ApplicationJSONErrorEnum) ToPointer() *Tapcn401ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tapcn401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn401ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn401ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tapcn401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tapcn401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tapcn401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Tapcn401ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tapcn401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn401ApplicationJSON - Unauthorized access
type Tapcn401ApplicationJSON struct {
	Error            *Tapcn401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tapcn400ApplicationJSONErrorEnum string

const (
	Tapcn400ApplicationJSONErrorEnumMissingParameter Tapcn400ApplicationJSONErrorEnum = "missing_parameter"
	Tapcn400ApplicationJSONErrorEnumInvalidParameter Tapcn400ApplicationJSONErrorEnum = "invalid_parameter"
	Tapcn400ApplicationJSONErrorEnumInvalidFormat    Tapcn400ApplicationJSONErrorEnum = "invalid_format"
	Tapcn400ApplicationJSONErrorEnumInvalidTxnid     Tapcn400ApplicationJSONErrorEnum = "invalid_txnid"
	Tapcn400ApplicationJSONErrorEnumInvalidConsentid Tapcn400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Tapcn400ApplicationJSONErrorEnum) ToPointer() *Tapcn400ApplicationJSONErrorEnum {
	return &e
}

func (e *Tapcn400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tapcn400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn400ApplicationJSONErrorEnum: %v", v)
	}
}

type Tapcn400ApplicationJSONErrorDescriptionEnum string

const (
	Tapcn400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tapcn400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tapcn400ApplicationJSONErrorDescriptionEnumBadRequest                              Tapcn400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tapcn400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tapcn400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tapcn400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tapcn400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tapcn400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tapcn400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Tapcn400ApplicationJSONErrorDescriptionEnum) ToPointer() *Tapcn400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tapcn400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tapcn400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tapcn400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tapcn400ApplicationJSON - Bad request
type Tapcn400ApplicationJSON struct {
	Error            *Tapcn400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tapcn400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TapcnResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tapcn400ApplicationJSONObject *Tapcn400ApplicationJSON
	// Unauthorized access
	Tapcn401ApplicationJSONObject *Tapcn401ApplicationJSON
	// No record found
	Tapcn404ApplicationJSONObject *Tapcn404ApplicationJSON
	// Internal server error
	Tapcn500ApplicationJSONObject *Tapcn500ApplicationJSON
	// Bad gateway
	Tapcn502ApplicationJSONObject *Tapcn502ApplicationJSON
	// Service unavailable
	Tapcn503ApplicationJSONObject *Tapcn503ApplicationJSON
	// Gateway timeout
	Tapcn504ApplicationJSONObject *Tapcn504ApplicationJSON
}
