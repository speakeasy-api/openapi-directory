"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Any, Optional

class TransactionTypeEnum(str, Enum):
    r"""The type for this transaction"""
    PAYMENT = 'payment'
    REFUND = 'refund'


@dataclasses.dataclass
class Transaction:
    r"""A transaction for an app initiated by a user"""
    
    amount: int = dataclasses.field()
    r"""The total amount paid in cents"""  
    app_id: str = dataclasses.field()
    r"""The id of the app involved with this transaction"""  
    date_: int = dataclasses.field()
    r"""The date (in millis) of when this transaction occurred"""  
    developer_id: str = dataclasses.field()
    r"""The id of the developer involved with this transaction"""  
    ownership_id: str = dataclasses.field()
    r"""The id for the ownership associated with this transaction"""  
    transaction_id: str = dataclasses.field()
    r"""The id for this transaction"""  
    type: TransactionTypeEnum = dataclasses.field()
    r"""The type for this transaction"""  
    user_id: str = dataclasses.field()
    r"""The id of the user making the transaction"""  
    custom_data: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""A custom JSON object that you can create and attach to this record"""  
    developer_amount: Optional[int] = dataclasses.field(default=None)
    r"""The total amount paid to the developer in cents"""  
    fee_amount: Optional[int] = dataclasses.field(default=None)
    r"""The total amount paid to payment processing fees in cents"""  
    marketplace_amount: Optional[int] = dataclasses.field(default=None)
    r"""The total amount paid to the marketplace owner in cents"""  
    