"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import searchteammembersfilter as shared_searchteammembersfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchTeamMembersQuery:
    r"""Represents the parameters in a search for `TeamMember` objects."""
    
    filter: Optional[shared_searchteammembersfilter.SearchTeamMembersFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
    between the individual fields, and `OR` logic is applied within list-based fields.
    For example, setting this filter value:
    ```
    filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)
    ```
    returns only active team members assigned to either location \"A\" or \"B\".
    """  
    