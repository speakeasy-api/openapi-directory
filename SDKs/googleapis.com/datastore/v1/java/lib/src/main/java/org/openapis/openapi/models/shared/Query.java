/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Query - A query for entities.
 */
public class Query {
    /**
     * The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distinctOn")
    public PropertyReference[] distinctOn;
    public Query withDistinctOn(PropertyReference[] distinctOn) {
        this.distinctOn = distinctOn;
        return this;
    }
    
    /**
     * An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endCursor")
    public String endCursor;
    public Query withEndCursor(String endCursor) {
        this.endCursor = endCursor;
        return this;
    }
    
    /**
     * A holder for any type of filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public Filter filter;
    public Query withFilter(Filter filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public KindExpression[] kind;
    public Query withKind(KindExpression[] kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be &gt;= 0 if specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Integer limit;
    public Query withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be &gt;= 0 if specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Integer offset;
    public Query withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The order to apply to the query results (if empty, order is unspecified).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    public PropertyOrder[] order;
    public Query withOrder(PropertyOrder[] order) {
        this.order = order;
        return this;
    }
    
    /**
     * The projection to return. Defaults to returning all properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projection")
    public Projection[] projection;
    public Query withProjection(Projection[] projection) {
        this.projection = projection;
        return this;
    }
    
    /**
     * A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startCursor")
    public String startCursor;
    public Query withStartCursor(String startCursor) {
        this.startCursor = startCursor;
        return this;
    }
    
}
