/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetPaymentsForPayoutResponseV4Summary {
    /**
     * The count of payments within the payout which have been confirmed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confirmedPayments")
    public Long confirmedPayments;
    public GetPaymentsForPayoutResponseV4Summary withConfirmedPayments(Long confirmedPayments) {
        this.confirmedPayments = confirmedPayments;
        return this;
    }
    
    /**
     * The count of payments within the payout which are incomplete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incompletePayments")
    public Long incompletePayments;
    public GetPaymentsForPayoutResponseV4Summary withIncompletePayments(Long incompletePayments) {
        this.incompletePayments = incompletePayments;
        return this;
    }
    
    /**
     * Details of principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instructed")
    public PayoutPrincipal instructed;
    public GetPaymentsForPayoutResponseV4Summary withInstructed(PayoutPrincipal instructed) {
        this.instructed = instructed;
        return this;
    }
    
    /**
     * The date/time at which the payout was instructed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("instructedDateTime")
    public OffsetDateTime instructedDateTime;
    public GetPaymentsForPayoutResponseV4Summary withInstructedDateTime(OffsetDateTime instructedDateTime) {
        this.instructedDateTime = instructedDateTime;
        return this;
    }
    
    /**
     * Details of payor and principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutFrom")
    public PayoutPayor payoutFrom;
    public GetPaymentsForPayoutResponseV4Summary withPayoutFrom(PayoutPayor payoutFrom) {
        this.payoutFrom = payoutFrom;
        return this;
    }
    
    /**
     * The memo attached to the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutMemo")
    public String payoutMemo;
    public GetPaymentsForPayoutResponseV4Summary withPayoutMemo(String payoutMemo) {
        this.payoutMemo = payoutMemo;
        return this;
    }
    
    /**
     * Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutStatus")
    public String payoutStatus;
    public GetPaymentsForPayoutResponseV4Summary withPayoutStatus(String payoutStatus) {
        this.payoutStatus = payoutStatus;
        return this;
    }
    
    /**
     * Details of payor and principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutTo")
    public PayoutPayor payoutTo;
    public GetPaymentsForPayoutResponseV4Summary withPayoutTo(PayoutPayor payoutTo) {
        this.payoutTo = payoutTo;
        return this;
    }
    
    /**
     * The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutType")
    public String payoutType;
    public GetPaymentsForPayoutResponseV4Summary withPayoutType(String payoutType) {
        this.payoutType = payoutType;
        return this;
    }
    
    /**
     * Details of principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quoted")
    public PayoutPrincipal quoted;
    public GetPaymentsForPayoutResponseV4Summary withQuoted(PayoutPrincipal quoted) {
        this.quoted = quoted;
        return this;
    }
    
    /**
     * The date/time at which the payout was quoted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("quotedDateTime")
    public OffsetDateTime quotedDateTime;
    public GetPaymentsForPayoutResponseV4Summary withQuotedDateTime(OffsetDateTime quotedDateTime) {
        this.quotedDateTime = quotedDateTime;
        return this;
    }
    
    /**
     * The count of payments within the payout which have been released.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releasedPayments")
    public Long releasedPayments;
    public GetPaymentsForPayoutResponseV4Summary withReleasedPayments(Long releasedPayments) {
        this.releasedPayments = releasedPayments;
        return this;
    }
    
    /**
     * The count of payments within the payout which have been returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnedPayments")
    public Long returnedPayments;
    public GetPaymentsForPayoutResponseV4Summary withReturnedPayments(Long returnedPayments) {
        this.returnedPayments = returnedPayments;
        return this;
    }
    
    /**
     * Details relating to a payout that was executed via a schedule or is still waiting to be executed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public PayoutSchedule schedule;
    public GetPaymentsForPayoutResponseV4Summary withSchedule(PayoutSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * The date/time at which the payout was submitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("submittedDateTime")
    public OffsetDateTime submittedDateTime;
    public GetPaymentsForPayoutResponseV4Summary withSubmittedDateTime(OffsetDateTime submittedDateTime) {
        this.submittedDateTime = submittedDateTime;
        return this;
    }
    
    /**
     * Details of payor and principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submitting")
    public PayoutPayor submitting;
    public GetPaymentsForPayoutResponseV4Summary withSubmitting(PayoutPayor submitting) {
        this.submitting = submitting;
        return this;
    }
    
    /**
     * The count of payments within the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPayments")
    public Long totalPayments;
    public GetPaymentsForPayoutResponseV4Summary withTotalPayments(Long totalPayments) {
        this.totalPayments = totalPayments;
        return this;
    }
    
    /**
     * Details of principal participating in a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withdrawn")
    public PayoutPrincipal withdrawn;
    public GetPaymentsForPayoutResponseV4Summary withWithdrawn(PayoutPrincipal withdrawn) {
        this.withdrawn = withdrawn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("withdrawnDateTime")
    public OffsetDateTime withdrawnDateTime;
    public GetPaymentsForPayoutResponseV4Summary withWithdrawnDateTime(OffsetDateTime withdrawnDateTime) {
        this.withdrawnDateTime = withdrawnDateTime;
        return this;
    }
    
    /**
     * The count of payments within the payout which have been withdrawn.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withdrawnPayments")
    public Long withdrawnPayments;
    public GetPaymentsForPayoutResponseV4Summary withWithdrawnPayments(Long withdrawnPayments) {
        this.withdrawnPayments = withdrawnPayments;
        return this;
    }
    
}
