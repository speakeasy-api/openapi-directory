// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LabrpSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LabrpRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Gender - M for male, F for female and O for other
	Gender string `json:"GENDER"`
	// Mobile No./Requisition No.
	MobileNoRQ string `json:"MobileNoRQ"`
}

// LabrpRequestBodyFormatEnum - The format of the certificate in response.
type LabrpRequestBodyFormatEnum string

const (
	LabrpRequestBodyFormatEnumPdf LabrpRequestBodyFormatEnum = "pdf"
)

func (e LabrpRequestBodyFormatEnum) ToPointer() *LabrpRequestBodyFormatEnum {
	return &e
}

func (e *LabrpRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = LabrpRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LabrpRequestBodyFormatEnum: %v", v)
	}
}

// LabrpRequestBody - Request format
type LabrpRequestBody struct {
	CertificateParameters *LabrpRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LabrpRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Labrp504ApplicationJSONErrorEnum string

const (
	Labrp504ApplicationJSONErrorEnumGatewayTimeout Labrp504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Labrp504ApplicationJSONErrorEnum) ToPointer() *Labrp504ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Labrp504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp504ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp504ApplicationJSONErrorDescriptionEnum string

const (
	Labrp504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Labrp504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Labrp504ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Labrp504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp504ApplicationJSON - Gateway timeout
type Labrp504ApplicationJSON struct {
	Error            *Labrp504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp503ApplicationJSONErrorEnum string

const (
	Labrp503ApplicationJSONErrorEnumServiceUnavailable Labrp503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Labrp503ApplicationJSONErrorEnum) ToPointer() *Labrp503ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Labrp503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp503ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp503ApplicationJSONErrorDescriptionEnum string

const (
	Labrp503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Labrp503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Labrp503ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Labrp503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp503ApplicationJSON - Service unavailable
type Labrp503ApplicationJSON struct {
	Error            *Labrp503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp502ApplicationJSONErrorEnum string

const (
	Labrp502ApplicationJSONErrorEnumBadGatewy Labrp502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Labrp502ApplicationJSONErrorEnum) ToPointer() *Labrp502ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Labrp502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp502ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp502ApplicationJSONErrorDescriptionEnum string

const (
	Labrp502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Labrp502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Labrp502ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Labrp502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp502ApplicationJSON - Bad gateway
type Labrp502ApplicationJSON struct {
	Error            *Labrp502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp500ApplicationJSONErrorEnum string

const (
	Labrp500ApplicationJSONErrorEnumInternalServerError Labrp500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Labrp500ApplicationJSONErrorEnum) ToPointer() *Labrp500ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Labrp500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp500ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp500ApplicationJSONErrorDescriptionEnum string

const (
	Labrp500ApplicationJSONErrorDescriptionEnumInternalServerError Labrp500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Labrp500ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Labrp500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp500ApplicationJSON - Internal server error
type Labrp500ApplicationJSON struct {
	Error            *Labrp500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp404ApplicationJSONErrorEnum string

const (
	Labrp404ApplicationJSONErrorEnumRecordNotFound Labrp404ApplicationJSONErrorEnum = "record_not_found"
	Labrp404ApplicationJSONErrorEnumURLNotFound    Labrp404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Labrp404ApplicationJSONErrorEnum) ToPointer() *Labrp404ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Labrp404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp404ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp404ApplicationJSONErrorDescriptionEnum string

const (
	Labrp404ApplicationJSONErrorDescriptionEnumNoRecordFound               Labrp404ApplicationJSONErrorDescriptionEnum = "No record found"
	Labrp404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Labrp404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Labrp404ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Labrp404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp404ApplicationJSON - No record found
type Labrp404ApplicationJSON struct {
	Error            *Labrp404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp401ApplicationJSONErrorEnum string

const (
	Labrp401ApplicationJSONErrorEnumInvalidAuthentication Labrp401ApplicationJSONErrorEnum = "invalid_authentication"
	Labrp401ApplicationJSONErrorEnumInvalidAuthorization  Labrp401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Labrp401ApplicationJSONErrorEnum) ToPointer() *Labrp401ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Labrp401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp401ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp401ApplicationJSONErrorDescriptionEnum string

const (
	Labrp401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Labrp401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Labrp401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Labrp401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Labrp401ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Labrp401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp401ApplicationJSON - Unauthorized access
type Labrp401ApplicationJSON struct {
	Error            *Labrp401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Labrp400ApplicationJSONErrorEnum string

const (
	Labrp400ApplicationJSONErrorEnumMissingParameter Labrp400ApplicationJSONErrorEnum = "missing_parameter"
	Labrp400ApplicationJSONErrorEnumInvalidParameter Labrp400ApplicationJSONErrorEnum = "invalid_parameter"
	Labrp400ApplicationJSONErrorEnumInvalidFormat    Labrp400ApplicationJSONErrorEnum = "invalid_format"
	Labrp400ApplicationJSONErrorEnumInvalidTxnid     Labrp400ApplicationJSONErrorEnum = "invalid_txnid"
	Labrp400ApplicationJSONErrorEnumInvalidConsentid Labrp400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Labrp400ApplicationJSONErrorEnum) ToPointer() *Labrp400ApplicationJSONErrorEnum {
	return &e
}

func (e *Labrp400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Labrp400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp400ApplicationJSONErrorEnum: %v", v)
	}
}

type Labrp400ApplicationJSONErrorDescriptionEnum string

const (
	Labrp400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Labrp400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Labrp400ApplicationJSONErrorDescriptionEnumBadRequest                              Labrp400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Labrp400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Labrp400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Labrp400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Labrp400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Labrp400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Labrp400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Labrp400ApplicationJSONErrorDescriptionEnum) ToPointer() *Labrp400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Labrp400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Labrp400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Labrp400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Labrp400ApplicationJSON - Bad request
type Labrp400ApplicationJSON struct {
	Error            *Labrp400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Labrp400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LabrpResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Labrp400ApplicationJSONObject *Labrp400ApplicationJSON
	// Unauthorized access
	Labrp401ApplicationJSONObject *Labrp401ApplicationJSON
	// No record found
	Labrp404ApplicationJSONObject *Labrp404ApplicationJSON
	// Internal server error
	Labrp500ApplicationJSONObject *Labrp500ApplicationJSON
	// Bad gateway
	Labrp502ApplicationJSONObject *Labrp502ApplicationJSON
	// Service unavailable
	Labrp503ApplicationJSONObject *Labrp503ApplicationJSON
	// Gateway timeout
	Labrp504ApplicationJSONObject *Labrp504ApplicationJSON
}
