"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import challengev4 as shared_challengev4
from ..shared import companyv4 as shared_companyv4
from ..shared import individualv4 as shared_individualv4
from ..shared import payeeaddressv4 as shared_payeeaddressv4
from ..shared import payeepayorrefv4 as shared_payeepayorrefv4
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayeeDetailResponseV4:
    r"""Success response, request completed okay"""
    
    accept_terms_and_conditions_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptTermsAndConditionsTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the payee last accepted T&Cs"""  
    address: Optional[shared_payeeaddressv4.PayeeAddressV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    cellphone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellphoneNumber'), 'exclude': lambda f: f is None }})  
    challenge: Optional[shared_challengev4.ChallengeV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})
    r"""<p>Used to override the default challenge presented to the payee when they onboard</p>
    <p>Not used after the payee has onboarded</p>
    """  
    company: Optional[shared_companyv4.CompanyV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})  
    disabled_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabledComment'), 'exclude': lambda f: f is None }})  
    disabled_updated_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabledUpdatedTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    enhanced_kyc_completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedKycCompleted'), 'exclude': lambda f: f is None }})  
    grace_period_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gracePeriodEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    individual: Optional[shared_individualv4.IndividualV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    kyc_completed_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kycCompletedTimestamp'), 'exclude': lambda f: f is None }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
    See the /v1/supportedLanguages endpoint to list the available codes for an environment.
    """  
    marketing_opt_in_decision: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingOptInDecision'), 'exclude': lambda f: f is None }})  
    marketing_opt_in_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingOptInTimestamp'), 'exclude': lambda f: f is None }})  
    onboarded_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onboardedStatus'), 'exclude': lambda f: f is None }})
    r"""Payee onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED"""  
    pause_payment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pausePayment'), 'exclude': lambda f: f is None }})  
    pause_payment_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pausePaymentTimestamp'), 'exclude': lambda f: f is None }})  
    payee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeId'), 'exclude': lambda f: f is None }})  
    payee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeType'), 'exclude': lambda f: f is None }})
    r"""Type of Payee. One of the following values: Individual, Company"""  
    payor_refs: Optional[list[shared_payeepayorrefv4.PayeePayorRefV4]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorRefs'), 'exclude': lambda f: f is None }})  
    watchlist_override_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlistOverrideComment'), 'exclude': lambda f: f is None }})  
    watchlist_override_expires_at_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlistOverrideExpiresAtTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    watchlist_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlistStatus'), 'exclude': lambda f: f is None }})
    r"""Current watchlist status. One of the following values: NONE, PENDING, REVIEW, PASSED, FAILED"""  
    watchlist_status_updated_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlistStatusUpdatedTimestamp'), 'exclude': lambda f: f is None }})  
    