"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudassuredworkloadsv1violationremediation as shared_googlecloudassuredworkloadsv1violationremediation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudAssuredworkloadsV1ViolationStateEnum(str, Enum):
    r"""Output only. State of the violation"""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RESOLVED = 'RESOLVED'
    UNRESOLVED = 'UNRESOLVED'
    EXCEPTION = 'EXCEPTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudAssuredworkloadsV1Violation:
    r"""Workload monitoring Violation. Next Id: 22"""
    
    acknowledged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acknowledged'), 'exclude': lambda f: f is None }})
    r"""A boolean that indicates if the violation is acknowledged"""  
    acknowledgement_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acknowledgementTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Timestamp when this violation was acknowledged last. This will be absent when acknowledged field is marked as false."""  
    audit_log_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditLogLink'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. Audit Log Link for violated resource Format: https://console.cloud.google.com/logs/query;query={logName}{protoPayload.resourceName}{timeRange}{folder}"""  
    begin_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time of the event which triggered the Violation."""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Output only. Category under which this violation is mapped. e.g. Location, Service Usage, Access, Encryption, etc."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Output only. Description for the Violation. e.g. OrgPolicy gcp.resourceLocations has non compliant value."""  
    exception_audit_log_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionAuditLogLink'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. Audit Log link to find business justification provided for violation exception. Format: https://console.cloud.google.com/logs/query;query={logName}{protoPayload.resourceName}{protoPayload.methodName}{timeRange}{organization}"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. Name of the Violation. Format: organizations/{organization}/locations/{location}/workloads/{workload_id}/violations/{violations_id}"""  
    non_compliant_org_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonCompliantOrgPolicy'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. Name of the OrgPolicy which was modified with non-compliant change and resulted this violation. Format: projects/{project_number}/policies/{constraint_name} folders/{folder_id}/policies/{constraint_name} organizations/{organization_id}/policies/{constraint_name}"""  
    org_policy_constraint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgPolicyConstraint'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. The org-policy-constraint that was incorrectly changed, which resulted in this violation."""  
    remediation: Optional[shared_googlecloudassuredworkloadsv1violationremediation.GoogleCloudAssuredworkloadsV1ViolationRemediation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediation'), 'exclude': lambda f: f is None }})
    r"""Represents remediation guidance to resolve compliance violation for AssuredWorkload"""  
    resolve_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolveTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time of the event which fixed the Violation. If the violation is ACTIVE this will be empty."""  
    state: Optional[GoogleCloudAssuredworkloadsV1ViolationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the violation"""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last time when the Violation record was updated."""  
    