// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListArchivesPathParams struct {
	// Type of archive to make
	ArchiveKind shared.ArchiveKindEnum `pathParam:"style=simple,explode=false,name=archiveKind"`
}

type ListArchivesRequest struct {
	PathParams ListArchivesPathParams
}

// ListArchives200ApplicationJSONActionEnum - The kind of the archive
type ListArchives200ApplicationJSONActionEnum string

const (
	ListArchives200ApplicationJSONActionEnumArchiveFull       ListArchives200ApplicationJSONActionEnum = "archiveFull"
	ListArchives200ApplicationJSONActionEnumArchiveGroups     ListArchives200ApplicationJSONActionEnum = "archiveGroups"
	ListArchives200ApplicationJSONActionEnumArchiveRules      ListArchives200ApplicationJSONActionEnum = "archiveRules"
	ListArchives200ApplicationJSONActionEnumArchiveDirectives ListArchives200ApplicationJSONActionEnum = "archiveDirectives"
	ListArchives200ApplicationJSONActionEnumArchiveParameters ListArchives200ApplicationJSONActionEnum = "archiveParameters"
)

func (e *ListArchives200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "archiveFull":
		fallthrough
	case "archiveGroups":
		fallthrough
	case "archiveRules":
		fallthrough
	case "archiveDirectives":
		fallthrough
	case "archiveParameters":
		*e = ListArchives200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListArchives200ApplicationJSONActionEnum: %s", s)
	}
}

type ListArchives200ApplicationJSONDataFull struct {
	Commiter  string `json:"commiter"`
	GitCommit string `json:"gitCommit"`
	ID        string `json:"id"`
}

type ListArchives200ApplicationJSONData struct {
	Full []ListArchives200ApplicationJSONDataFull `json:"full"`
}

// ListArchives200ApplicationJSONResultEnum - Result of the request
type ListArchives200ApplicationJSONResultEnum string

const (
	ListArchives200ApplicationJSONResultEnumSuccess ListArchives200ApplicationJSONResultEnum = "success"
	ListArchives200ApplicationJSONResultEnumError   ListArchives200ApplicationJSONResultEnum = "error"
)

func (e *ListArchives200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ListArchives200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListArchives200ApplicationJSONResultEnum: %s", s)
	}
}

// ListArchives200ApplicationJSON - Success
type ListArchives200ApplicationJSON struct {
	// The kind of the archive
	Action ListArchives200ApplicationJSONActionEnum `json:"action"`
	Data   ListArchives200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ListArchives200ApplicationJSONResultEnum `json:"result"`
}

type ListArchivesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ListArchives200ApplicationJSONObject *ListArchives200ApplicationJSON
}
