// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UsersGetDefaultApplicationJSONErrorCodeEnum string

const (
	UsersGetDefaultApplicationJSONErrorCodeEnumBadRequest          UsersGetDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersGetDefaultApplicationJSONErrorCodeEnumConflict            UsersGetDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersGetDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersGetDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersGetDefaultApplicationJSONErrorCodeEnumNotFound            UsersGetDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersGetDefaultApplicationJSONErrorCodeEnumInternalServerError UsersGetDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersGetDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersGetDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	UsersGetDefaultApplicationJSONErrorCodeEnumTooManyRequests     UsersGetDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UsersGetDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UsersGetDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGetDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UsersGetDefaultApplicationJSONError struct {
	Code    UsersGetDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                      `json:"message"`
}

// UsersGetDefaultApplicationJSON - Error
type UsersGetDefaultApplicationJSON struct {
	Error UsersGetDefaultApplicationJSONError `json:"error"`
}

// UsersGet200ApplicationJSONOriginEnum - The creation origin of this user
type UsersGet200ApplicationJSONOriginEnum string

const (
	UsersGet200ApplicationJSONOriginEnumAppcenter UsersGet200ApplicationJSONOriginEnum = "appcenter"
	UsersGet200ApplicationJSONOriginEnumHockeyapp UsersGet200ApplicationJSONOriginEnum = "hockeyapp"
	UsersGet200ApplicationJSONOriginEnumCodepush  UsersGet200ApplicationJSONOriginEnum = "codepush"
)

func (e *UsersGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = UsersGet200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGet200ApplicationJSONOriginEnum: %s", s)
	}
}

type UsersGet200ApplicationJSONPermissionsEnum string

const (
	UsersGet200ApplicationJSONPermissionsEnumManager   UsersGet200ApplicationJSONPermissionsEnum = "manager"
	UsersGet200ApplicationJSONPermissionsEnumDeveloper UsersGet200ApplicationJSONPermissionsEnum = "developer"
	UsersGet200ApplicationJSONPermissionsEnumViewer    UsersGet200ApplicationJSONPermissionsEnum = "viewer"
	UsersGet200ApplicationJSONPermissionsEnumTester    UsersGet200ApplicationJSONPermissionsEnum = "tester"
)

func (e *UsersGet200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = UsersGet200ApplicationJSONPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGet200ApplicationJSONPermissionsEnum: %s", s)
	}
}

// UsersGet200ApplicationJSON - Success
type UsersGet200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID string `json:"id"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The creation origin of this user
	Origin UsersGet200ApplicationJSONOriginEnum `json:"origin"`
	// The permissions the user has for the app
	Permissions []UsersGet200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type UsersGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersGet200ApplicationJSONObject *UsersGet200ApplicationJSON
	// Error
	UsersGetDefaultApplicationJSONObject *UsersGetDefaultApplicationJSON
}
