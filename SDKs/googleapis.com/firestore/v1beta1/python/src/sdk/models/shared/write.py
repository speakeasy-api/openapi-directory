"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import document as shared_document
from ..shared import documentmask as shared_documentmask
from ..shared import documenttransform as shared_documenttransform
from ..shared import fieldtransform as shared_fieldtransform
from ..shared import precondition as shared_precondition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Write:
    r"""A write on a document."""
    
    current_document: Optional[shared_precondition.Precondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentDocument'), 'exclude': lambda f: f is None }})
    r"""A precondition on a document, used for conditional operations."""  
    delete: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete'), 'exclude': lambda f: f is None }})
    r"""A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."""  
    transform: Optional[shared_documenttransform.DocumentTransform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transform'), 'exclude': lambda f: f is None }})
    r"""A transformation of a document."""  
    update: Optional[shared_document.Document] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update'), 'exclude': lambda f: f is None }})
    r"""A Firestore document. Must not exceed 1 MiB - 4 bytes."""  
    update_mask: Optional[shared_documentmask.DocumentMask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateMask'), 'exclude': lambda f: f is None }})
    r"""A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value."""  
    update_transforms: Optional[list[shared_fieldtransform.FieldTransform]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTransforms'), 'exclude': lambda f: f is None }})
    r"""The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order."""  
    