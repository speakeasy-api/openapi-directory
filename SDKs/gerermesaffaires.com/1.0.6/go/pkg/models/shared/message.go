// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MessageLevelEnum string

const (
	MessageLevelEnumConfidential MessageLevelEnum = "confidential"
	MessageLevelEnumRegular      MessageLevelEnum = "regular"
)

func (e *MessageLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		*e = MessageLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageLevelEnum: %s", s)
	}
}

type Message struct {
	Author             *string           `json:"Author,omitempty"`
	ID                 *string           `json:"Id,omitempty"`
	Level              *MessageLevelEnum `json:"Level,omitempty"`
	MessageDate        *string           `json:"MessageDate,omitempty"`
	ModificationAuthor *string           `json:"ModificationAuthor,omitempty"`
	ModificationDate   *string           `json:"ModificationDate,omitempty"`
	Text               *string           `json:"Text,omitempty"`
}
