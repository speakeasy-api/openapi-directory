// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UncrdSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type UncrdRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// UAN NUMBER
	Uan string `json:"UAN"`
}

// UncrdRequestBodyFormatEnum - The format of the certificate in response.
type UncrdRequestBodyFormatEnum string

const (
	UncrdRequestBodyFormatEnumPdf UncrdRequestBodyFormatEnum = "pdf"
)

func (e *UncrdRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = UncrdRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UncrdRequestBodyFormatEnum: %s", s)
	}
}

// UncrdRequestBody - Request format
type UncrdRequestBody struct {
	CertificateParameters *UncrdRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format UncrdRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Uncrd504ApplicationJSONErrorEnum string

const (
	Uncrd504ApplicationJSONErrorEnumGatewayTimeout Uncrd504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Uncrd504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Uncrd504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd504ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd504ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Uncrd504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Uncrd504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Uncrd504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd504ApplicationJSON - Gateway timeout
type Uncrd504ApplicationJSON struct {
	Error            *Uncrd504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd503ApplicationJSONErrorEnum string

const (
	Uncrd503ApplicationJSONErrorEnumServiceUnavailable Uncrd503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Uncrd503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Uncrd503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd503ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd503ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Uncrd503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Uncrd503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Uncrd503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd503ApplicationJSON - Service unavailable
type Uncrd503ApplicationJSON struct {
	Error            *Uncrd503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd502ApplicationJSONErrorEnum string

const (
	Uncrd502ApplicationJSONErrorEnumBadGatewy Uncrd502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Uncrd502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Uncrd502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd502ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd502ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Uncrd502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Uncrd502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Uncrd502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd502ApplicationJSON - Bad gateway
type Uncrd502ApplicationJSON struct {
	Error            *Uncrd502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd500ApplicationJSONErrorEnum string

const (
	Uncrd500ApplicationJSONErrorEnumInternalServerError Uncrd500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Uncrd500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Uncrd500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd500ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd500ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd500ApplicationJSONErrorDescriptionEnumInternalServerError Uncrd500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Uncrd500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Uncrd500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd500ApplicationJSON - Internal server error
type Uncrd500ApplicationJSON struct {
	Error            *Uncrd500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd404ApplicationJSONErrorEnum string

const (
	Uncrd404ApplicationJSONErrorEnumRecordNotFound Uncrd404ApplicationJSONErrorEnum = "record_not_found"
	Uncrd404ApplicationJSONErrorEnumURLNotFound    Uncrd404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Uncrd404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Uncrd404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd404ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd404ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd404ApplicationJSONErrorDescriptionEnumNoRecordFound               Uncrd404ApplicationJSONErrorDescriptionEnum = "No record found"
	Uncrd404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Uncrd404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Uncrd404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Uncrd404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd404ApplicationJSON - No record found
type Uncrd404ApplicationJSON struct {
	Error            *Uncrd404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd401ApplicationJSONErrorEnum string

const (
	Uncrd401ApplicationJSONErrorEnumInvalidAuthentication Uncrd401ApplicationJSONErrorEnum = "invalid_authentication"
	Uncrd401ApplicationJSONErrorEnumInvalidAuthorization  Uncrd401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Uncrd401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Uncrd401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd401ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd401ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Uncrd401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Uncrd401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Uncrd401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Uncrd401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Uncrd401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd401ApplicationJSON - Unauthorized access
type Uncrd401ApplicationJSON struct {
	Error            *Uncrd401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Uncrd400ApplicationJSONErrorEnum string

const (
	Uncrd400ApplicationJSONErrorEnumMissingParameter Uncrd400ApplicationJSONErrorEnum = "missing_parameter"
	Uncrd400ApplicationJSONErrorEnumInvalidParameter Uncrd400ApplicationJSONErrorEnum = "invalid_parameter"
	Uncrd400ApplicationJSONErrorEnumInvalidFormat    Uncrd400ApplicationJSONErrorEnum = "invalid_format"
	Uncrd400ApplicationJSONErrorEnumInvalidTxnid     Uncrd400ApplicationJSONErrorEnum = "invalid_txnid"
	Uncrd400ApplicationJSONErrorEnumInvalidConsentid Uncrd400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Uncrd400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Uncrd400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd400ApplicationJSONErrorEnum: %s", s)
	}
}

type Uncrd400ApplicationJSONErrorDescriptionEnum string

const (
	Uncrd400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Uncrd400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Uncrd400ApplicationJSONErrorDescriptionEnumBadRequest                              Uncrd400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Uncrd400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Uncrd400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Uncrd400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Uncrd400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Uncrd400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Uncrd400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Uncrd400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Uncrd400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Uncrd400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Uncrd400ApplicationJSON - Bad request
type Uncrd400ApplicationJSON struct {
	Error            *Uncrd400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Uncrd400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type UncrdResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Uncrd400ApplicationJSONObject *Uncrd400ApplicationJSON
	// Unauthorized access
	Uncrd401ApplicationJSONObject *Uncrd401ApplicationJSON
	// No record found
	Uncrd404ApplicationJSONObject *Uncrd404ApplicationJSON
	// Internal server error
	Uncrd500ApplicationJSONObject *Uncrd500ApplicationJSON
	// Bad gateway
	Uncrd502ApplicationJSONObject *Uncrd502ApplicationJSON
	// Service unavailable
	Uncrd503ApplicationJSONObject *Uncrd503ApplicationJSON
	// Gateway timeout
	Uncrd504ApplicationJSONObject *Uncrd504ApplicationJSON
}
