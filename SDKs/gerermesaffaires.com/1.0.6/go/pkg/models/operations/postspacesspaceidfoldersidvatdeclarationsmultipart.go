// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                           `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                           `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormData1 - VATDeclaration to add (either (DocumentId,End) either (File,Name,Content64Encoded,Title,End) is mandatory)
type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormData1 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author          *string                                                               `multipartForm:"name=Author"`
	Begin           *string                                                               `multipartForm:"name=Begin"`
	Code            *string                                                               `multipartForm:"name=Code"`
	CollectedVAT    *float32                                                              `multipartForm:"name=CollectedVAT"`
	Comment         *string                                                               `multipartForm:"name=Comment"`
	CreditVAT       *float32                                                              `multipartForm:"name=CreditVAT"`
	Date            *string                                                               `multipartForm:"name=Date"`
	DeductibleVAT   *float32                                                              `multipartForm:"name=DeductibleVAT"`
	End             string                                                                `multipartForm:"name=End"`
	ExemptTurnover  *float32                                                              `multipartForm:"name=ExemptTurnover"`
	File            PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormDataFile        `multipartForm:"file"`
	Number          *string                                                               `multipartForm:"name=Number"`
	PayableVAT      *float32                                                              `multipartForm:"name=PayableVAT"`
	TaxableTurnover *float32                                                              `multipartForm:"name=TaxableTurnover"`
	Title           string                                                                `multipartForm:"name=Title"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartRequest struct {
	// VATDeclaration to add (either (DocumentId,End) either (File,Name,Content64Encoded,Title,End) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder result and taxation
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDVatDeclarationsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDVatDeclarationsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDVatDeclarationsMultipart201ApplicationJSON
}
