/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AssignmentSubmission } from "./assignmentsubmission";
import { AssignmentTypeEnum } from "./assignmenttypeenum";
import { GoogleClassroomCoursework } from "./googleclassroomcoursework";
import { MediaAttachment } from "./mediaattachment";
import { MicrosoftGraphAssignment } from "./microsoftgraphassignment";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A Canvas LMS assignment
 */
export class AssignmentCanvas extends SpeakeasyBase {
  /**
   * Link to Canvas assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternateLink" })
  alternateLink?: string;

  /**
   * Unique identifier of the course on Canvas assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * An LTI assignment
 */
export class AssignmentLti extends SpeakeasyBase {
  /**
   * Resource ID in the LMS
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * A MusicFirst Classroom assignment
 */
export class AssignmentMfc extends SpeakeasyBase {
  /**
   * Link to MusicFirst Classroom task
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternateLink" })
  alternateLink?: string;

  /**
   * Unique identifier of the course on MusicFirst Task
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * State of the assignment
 */
export enum AssignmentStateEnum {
  Draft = "draft",
  Active = "active",
  Archived = "archived",
}

/**
 * Assignment details
 */
export class Assignment extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: MediaAttachment })
  @Expose({ name: "attachments" })
  @Type(() => MediaAttachment)
  attachments?: MediaAttachment[];

  /**
   * A Canvas LMS assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canvas" })
  @Type(() => AssignmentCanvas)
  canvas?: AssignmentCanvas;

  /**
   * The unique identifier of the class where this assignment was posted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classroom" })
  classroom?: string;

  /**
   * The URL of the cover to display
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover" })
  cover?: string;

  /**
   * The id of the cover to display
   */
  @SpeakeasyMetadata()
  @Expose({ name: "coverFile" })
  coverFile?: string;

  /**
   * The creation date of this assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  /**
   * The User unique identifier of the creator of this assignment
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creator" })
  creator?: string;

  /**
   * Description and content of the assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The due date of this assignment, late submissions will be marked as
   *
   * @remarks
   * paste due.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dueDate?: Date;

  /**
   * A coursework on Google Classroom
   */
  @SpeakeasyMetadata()
  @Expose({ name: "googleClassroom" })
  @Type(() => GoogleClassroomCoursework)
  googleClassroom?: GoogleClassroomCoursework;

  /**
   * An LTI assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lti" })
  @Type(() => AssignmentLti)
  lti?: AssignmentLti;

  /**
   * If set, the grading will be enabled for the assignement
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxPoints" })
  maxPoints?: number;

  /**
   * A MusicFirst Classroom assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfc" })
  @Type(() => AssignmentMfc)
  mfc?: AssignmentMfc;

  /**
   * A Microsoft Teams asignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "microsoftGraph" })
  @Type(() => MicrosoftGraphAssignment)
  microsoftGraph?: MicrosoftGraphAssignment;

  /**
   * The publication (scheduled) date of the assignment.
   *
   * @remarks
   * If this one is specified, the assignment will only be listed to the teachers of the class.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledDate?: Date;

  /**
   * State of the assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: AssignmentStateEnum;

  @SpeakeasyMetadata({ elemType: AssignmentSubmission })
  @Expose({ name: "submissions" })
  @Type(() => AssignmentSubmission)
  submissions?: AssignmentSubmission[];

  /**
   * Title of the assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * Type of the assignment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AssignmentTypeEnum;
}
