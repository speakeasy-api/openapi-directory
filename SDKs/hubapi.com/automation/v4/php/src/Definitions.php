<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Definitions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archive a custom action
     * 
     * Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse
     */
	public function deleteAutomationV4ActionsAppIdDefinitionIdArchive(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/automation/v4/actions/{appId}/{definitionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a custom action
     * 
     * Returns a single custom workflow action with the specified ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse
     */
	public function getAutomationV4ActionsAppIdDefinitionIdGetById(
        \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/automation/v4/actions/{appId}/{definitionId}', \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->extensionActionDefinition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExtensionActionDefinition', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get all custom actions
     * 
     * Returns a list of all custom workflow actions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageResponse
     */
	public function getAutomationV4ActionsAppIdGetPage(
        \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/automation/v4/actions/{appId}', \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAutomationV4ActionsAppIdGetPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionResponseExtensionActionDefinitionForwardPaging = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionResponseExtensionActionDefinitionForwardPaging', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a custom action
     * 
     * Updates a custom workflow action with new values for the specified fields.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse
     */
	public function patchAutomationV4ActionsAppIdDefinitionIdUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/automation/v4/actions/{appId}/{definitionId}', \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "extensionActionDefinitionPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->extensionActionDefinition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExtensionActionDefinition', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create new custom action
     * 
     * Creates a new custom workflow action.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateResponse
     */
	public function postAutomationV4ActionsAppIdCreate(
        \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/automation/v4/actions/{appId}', \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "extensionActionDefinitionInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAutomationV4ActionsAppIdCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->extensionActionDefinition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExtensionActionDefinition', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}