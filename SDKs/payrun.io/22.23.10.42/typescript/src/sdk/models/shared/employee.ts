/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The employees' a e assessment override
 */
export enum EmployeeEmployeeAEAssessmentOverrideEnum {
  None = "None",
  OptOut = "OptOut",
  OptIn = "OptIn",
  VoluntaryJoiner = "VoluntaryJoiner",
  ContractualPension = "ContractualPension",
  CeasedMembership = "CeasedMembership",
  Leaver = "Leaver",
  Excluded = "Excluded",
}

/**
 * The employees' a e exclusion reason code
 */
export enum EmployeeEmployeeAEExclusionReasonCodeEnum {
  OtherNotKnown = "OtherNotKnown",
  NotAWorker = "NotAWorker",
  NotUKWorker = "NotUKWorker",
  TemporaryUKWorker = "TemporaryUKWorker",
  OutsideAgeRange = "OutsideAgeRange",
  SingleEmployeeDirector = "SingleEmployeeDirector",
  CeasedMembershipWithin12Months = "CeasedMembershipWithin12Months",
  CeasedMembershipBeyond12Months = "CeasedMembershipBeyond12Months",
  WorkerWULSWithin12Month = "WorkerWULSWithin12Month",
  WorkerWULSBeyond12Month = "WorkerWULSBeyond12Month",
  WorkerInNoticePeriod = "WorkerInNoticePeriod",
  WorkerTaxProtection = "WorkerTaxProtection",
}

/**
 * The employees' address
 */
export class EmployeeEmployeeAddress extends SpeakeasyBase {
  /**
   * The addresss' line 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address1" })
  address1?: string;

  /**
   * The addresss' line 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address2" })
  address2?: string;

  /**
   * The addresss' line 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address3" })
  address3?: string;

  /**
   * The addresss' line 4
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address4" })
  address4?: string;

  /**
   * The addresss' country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Country" })
  country?: string;

  /**
   * The addresss' postcode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Postcode" })
  postcode?: string;
}

/**
 * The employees' bank account
 */
export class EmployeeEmployeeBankAccount extends SpeakeasyBase {
  /**
   * The bank accounts' account name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountName" })
  accountName?: string;

  /**
   * The bank accounts' account number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountNumber" })
  accountNumber?: string;

  /**
   * The bank accounts' branch name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchName" })
  branchName?: string;

  /**
   * The bank accounts' reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reference" })
  reference?: string;

  /**
   * The bank accounts' sort code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SortCode" })
  sortCode?: string;
}

/**
 * The employees' employee partner
 */
export class EmployeeEmployeeEmployeePartner extends SpeakeasyBase {
  /**
   * The employee partners' first name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FirstName" })
  firstName?: string;

  /**
   * The employee partners' initials
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initials" })
  initials?: string;

  /**
   * The employee partners' last name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastName" })
  lastName?: string;

  /**
   * The employee partners' middle name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MiddleName" })
  middleName?: string;

  /**
   * The employee partners' ni number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NiNumber" })
  niNumber?: string;
}

/**
 * The employees' gender
 */
export enum EmployeeEmployeeGenderEnum {
  Unknown = "Unknown",
  Male = "Male",
  Female = "Female",
}

/**
 * The employees' leaver reason
 */
export enum EmployeeEmployeeLeaverReasonEnum {
  Resigned = "Resigned",
  Dismissed = "Dismissed",
  Redundant = "Redundant",
  Retired = "Retired",
  Deceased = "Deceased",
  LegalCustody = "LegalCustody",
  Other = "Other",
}

/**
 * The employees' marital status
 */
export enum EmployeeEmployeeMaritalStatusEnum {
  NotSet = "NotSet",
  Single = "Single",
  Married = "Married",
  Divorced = "Divorced",
  Widowed = "Widowed",
}

/**
 * The employees' nic liability
 */
export enum EmployeeEmployeeNicLiabilityEnum {
  HasOtherJob = "HasOtherJob",
  IsFemaleEntitledToReducedRate = "IsFemaleEntitledToReducedRate",
  IsNotLiable = "IsNotLiable",
  IsContractedOut = "IsContractedOut",
  IsFullyLiable = "IsFullyLiable",
  IsApprentice = "IsApprentice",
  LeaverBeyond6Weeks = "LeaverBeyond6Weeks",
  PaymentAfterLeavingIrregular = "PaymentAfterLeavingIrregular",
  IsFreePortWorker = "IsFreePortWorker",
  IsNotLiableForEmployerNi = "IsNotLiableForEmployerNi",
}

/**
 * The employees' pay schedule
 */
export class EmployeeEmployeePaySchedule extends SpeakeasyBase {
  /**
   * The links' href
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@href" })
  atHref?: string;

  /**
   * The links' target type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@rel" })
  atRel?: string;

  /**
   * The links' title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@title" })
  atTitle?: string;
}

/**
 * The employees' payment method
 */
export enum EmployeeEmployeePaymentMethodEnum {
  NotSet = "NotSet",
  Cash = "Cash",
  Cheque = "Cheque",
  Bacs = "BACS",
  FasterPayments = "FasterPayments",
  Other = "Other",
}

/**
 * The employees' region
 */
export enum EmployeeEmployeeRegionEnum {
  NotSet = "NotSet",
  England = "England",
  Scotland = "Scotland",
  Wales = "Wales",
}

/**
 * The employees' rule exclusions
 */
export enum EmployeeEmployeeRuleExclusionsEnum {
  None = "None",
  NiMissingPayInstructionRule = "NiMissingPayInstructionRule",
  TaxMissingPayInstructionRule = "TaxMissingPayInstructionRule",
  TaxCodeUpliftRule = "TaxCodeUpliftRule",
  NiSetExpectedLetterRule = "NiSetExpectedLetterRule",
  NiDateOfBirthChangeRetrospectiveCRule = "NiDateOfBirthChangeRetrospectiveCRule",
  NiDefermentStatusChangeRule = "NiDefermentStatusChangeRule",
  NiEndContractedOutTransferRule = "NiEndContractedOutTransferRule",
  PaymentAfterLeavingTaxCodeRule = "PaymentAfterLeavingTaxCodeRule",
  LeaverEndInstructionsRule = "LeaverEndInstructionsRule",
  P45StudentLoanInstructionRule = "P45StudentLoanInstructionRule",
  P45TaxInstructionRule = "P45TaxInstructionRule",
  P45YtdTaxRule = "P45YtdTaxRule",
  YtdInstructionRule = "YtdInstructionRule",
  TaxCodeRegionChangeRule = "TaxCodeRegionChangeRule",
  AutoEnrolmentStatusChangeRule = "AutoEnrolmentStatusChangeRule",
  EmployeeDeceasedRule = "EmployeeDeceasedRule",
  BenefitInstructionAutoEndRule = "BenefitInstructionAutoEndRule",
}

/**
 * The employees' seconded
 */
export enum EmployeeEmployeeSecondedEnum {
  NotSet = "NotSet",
  Stay183DaysOrMore = "Stay183DaysOrMore",
  StayLessThan183Days = "StayLessThan183Days",
  InOutUk = "InOutUk",
}

/**
 * The employees' starter declaration
 */
export enum EmployeeEmployeeStarterDeclarationEnum {
  PreviouslyReported = "PreviouslyReported",
  A = "A",
  B = "B",
  C = "C",
}

/**
 * The employees' territory
 */
export enum EmployeeEmployeeTerritoryEnum {
  UnitedKingdom = "UnitedKingdom",
}

/**
 * The employees' working week
 */
export enum EmployeeEmployeeWorkingWeekEnum {
  None = "None",
  Monday = "Monday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
  Thursday = "Thursday",
  Friday = "Friday",
  AllWeekDays = "AllWeekDays",
  Saturday = "Saturday",
  Sunday = "Sunday",
  AllDays = "AllDays",
}

export class EmployeeEmployee extends SpeakeasyBase {
  /**
   * The employees' a e assessment override
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AEAssessmentOverride" })
  aeAssessmentOverride?: EmployeeEmployeeAEAssessmentOverrideEnum;

  /**
   * The employees' a e assessment override date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AEAssessmentOverrideDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  aeAssessmentOverrideDate?: Date;

  /**
   * The employees' a e exclusion reason code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AEExclusionReasonCode" })
  aeExclusionReasonCode?: EmployeeEmployeeAEExclusionReasonCodeEnum;

  /**
   * The employees' a e postponement date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AEPostponementDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  aePostponementDate?: Date;

  /**
   * The employees' address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address" })
  @Type(() => EmployeeEmployeeAddress)
  address?: EmployeeEmployeeAddress;

  /**
   * The employees' bank account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BankAccount" })
  @Type(() => EmployeeEmployeeBankAccount)
  bankAccount?: EmployeeEmployeeBankAccount;

  /**
   * The employees' code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Code" })
  code?: string;

  /**
   * The employees' date of birth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfBirth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth?: Date;

  /**
   * The employees' deactivated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Deactivated" })
  deactivated?: boolean;

  /**
   * The employees' directorship appointment date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DirectorshipAppointmentDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  directorshipAppointmentDate?: Date;

  /**
   * The employees' e e a citizen
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EEACitizen" })
  eeaCitizen?: boolean;

  /**
   * The employees' e p m6
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EPM6" })
  epm6?: boolean;

  /**
   * The employees' effective date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The employees' employee partner
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployeePartner" })
  @Type(() => EmployeeEmployeeEmployeePartner)
  employeePartner?: EmployeeEmployeeEmployeePartner;

  /**
   * The employees' the first name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FirstName" })
  firstName?: string;

  /**
   * The employees' gender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Gender" })
  gender?: EmployeeEmployeeGenderEnum;

  /**
   * The employees' hours per week
   */
  @SpeakeasyMetadata()
  @Expose({ name: "HoursPerWeek" })
  hoursPerWeek?: number;

  /**
   * The employees' initials
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initials" })
  initials?: string;

  /**
   * The employees' irregular employment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IrregularEmployment" })
  irregularEmployment?: boolean;

  /**
   * The employees' is agency worker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsAgencyWorker" })
  isAgencyWorker?: boolean;

  /**
   * The employees' last name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastName" })
  lastName?: string;

  /**
   * The employees' leaver reason
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LeaverReason" })
  leaverReason?: EmployeeEmployeeLeaverReasonEnum;

  /**
   * The employees' leaving date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LeavingDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  leavingDate?: Date;

  /**
   * The employees' marital status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaritalStatus" })
  maritalStatus?: EmployeeEmployeeMaritalStatusEnum;

  /**
   * The employees' meta data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetaData" })
  metaData?: Record<string, any>;

  /**
   * The employees' middle name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MiddleName" })
  middleName?: string;

  /**
   * The employees' next revision date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextRevisionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nextRevisionDate?: Date;

  /**
   * The employees' ni number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NiNumber" })
  niNumber?: string;

  /**
   * The employees' nic liability
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NicLiability" })
  nicLiability?: EmployeeEmployeeNicLiabilityEnum;

  /**
   * The employees' off payroll worker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OffPayrollWorker" })
  offPayrollWorker?: boolean;

  /**
   * The employees' on strike
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OnStrike" })
  onStrike?: boolean;

  /**
   * The employees' p45 issued date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "P45IssuedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  p45IssuedDate?: Date;

  /**
   * The employees' passport number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PassportNumber" })
  passportNumber?: string;

  /**
   * The employees' pay schedule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaySchedule" })
  @Type(() => EmployeeEmployeePaySchedule)
  paySchedule?: EmployeeEmployeePaySchedule;

  /**
   * The employees' payment method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentMethod" })
  paymentMethod?: EmployeeEmployeePaymentMethodEnum;

  /**
   * The employees' payment to a non individual
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentToANonIndividual" })
  paymentToANonIndividual?: boolean;

  /**
   * The employees' region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Region" })
  region?: EmployeeEmployeeRegionEnum;

  /**
   * The employees' revision
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Revision" })
  revision?: number;

  /**
   * The employees' rule exclusions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RuleExclusions" })
  ruleExclusions?: EmployeeEmployeeRuleExclusionsEnum;

  /**
   * The employees' seconded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Seconded" })
  seconded?: EmployeeEmployeeSecondedEnum;

  /**
   * The employees' start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * The employees' starter declaration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StarterDeclaration" })
  starterDeclaration?: EmployeeEmployeeStarterDeclarationEnum;

  /**
   * The employees' territory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Territory" })
  territory?: EmployeeEmployeeTerritoryEnum;

  /**
   * The employees' title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Title" })
  title?: string;

  /**
   * The employees' veteran period start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VeteranPeriodStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  veteranPeriodStartDate?: Date;

  /**
   * The employees' working week
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkingWeek" })
  workingWeek?: EmployeeEmployeeWorkingWeekEnum;
}

/**
 * The employee object.
 */
export class Employee extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Employee" })
  @Type(() => EmployeeEmployee)
  employee?: EmployeeEmployee;
}
