// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum - Required. The day of the week for this day and time targeting setting.
type DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum string

const (
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumDayOfWeekUnspecified DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumMonday               DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "MONDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumTuesday              DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "TUESDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumWednesday            DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "WEDNESDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumThursday             DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "THURSDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumFriday               DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "FRIDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumSaturday             DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "SATURDAY"
	DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnumSunday               DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum = "SUNDAY"
)

func (e DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum) ToPointer() *DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum {
	return &e
}

func (e *DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum: %v", v)
	}
}

// DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum - Required. The mechanism used to determine which timezone to use for this day and time targeting setting.
type DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum string

const (
	DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnumTimeZoneResolutionUnspecified DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum = "TIME_ZONE_RESOLUTION_UNSPECIFIED"
	DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnumTimeZoneResolutionEndUser     DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum = "TIME_ZONE_RESOLUTION_END_USER"
	DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnumTimeZoneResolutionAdvertiser  DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum = "TIME_ZONE_RESOLUTION_ADVERTISER"
)

func (e DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum) ToPointer() *DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum {
	return &e
}

func (e *DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIME_ZONE_RESOLUTION_UNSPECIFIED":
		fallthrough
	case "TIME_ZONE_RESOLUTION_END_USER":
		fallthrough
	case "TIME_ZONE_RESOLUTION_ADVERTISER":
		*e = DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum: %v", v)
	}
}

// DayAndTimeAssignedTargetingOptionDetails - Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`.
type DayAndTimeAssignedTargetingOptionDetails struct {
	// Required. The day of the week for this day and time targeting setting.
	DayOfWeek *DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day).
	EndHour *int `json:"endHour,omitempty"`
	// Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day).
	StartHour *int `json:"startHour,omitempty"`
	// Required. The mechanism used to determine which timezone to use for this day and time targeting setting.
	TimeZoneResolution *DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum `json:"timeZoneResolution,omitempty"`
}
