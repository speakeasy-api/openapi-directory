// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AccountTransferTransferApproval - If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
type AccountTransferTransferApproval struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
	ApprovedAt time.Time `json:"approved_at"`
	// If the Transfer was approved by a user in the dashboard, the email address of that user.
	ApprovedBy string `json:"approved_by"`
}

// AccountTransferTransferCancellation - If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
type AccountTransferTransferCancellation struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
	CanceledAt time.Time `json:"canceled_at"`
	// If the Transfer was canceled by a user in the dashboard, the email address of that user.
	CanceledBy string `json:"canceled_by"`
}

// AccountTransferCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type AccountTransferCurrencyEnum string

const (
	AccountTransferCurrencyEnumCad AccountTransferCurrencyEnum = "CAD"
	AccountTransferCurrencyEnumChf AccountTransferCurrencyEnum = "CHF"
	AccountTransferCurrencyEnumEur AccountTransferCurrencyEnum = "EUR"
	AccountTransferCurrencyEnumGbp AccountTransferCurrencyEnum = "GBP"
	AccountTransferCurrencyEnumJpy AccountTransferCurrencyEnum = "JPY"
	AccountTransferCurrencyEnumUsd AccountTransferCurrencyEnum = "USD"
)

func (e AccountTransferCurrencyEnum) ToPointer() *AccountTransferCurrencyEnum {
	return &e
}

func (e *AccountTransferCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = AccountTransferCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTransferCurrencyEnum: %v", v)
	}
}

// AccountTransferNetworkEnum - The transfer's network.
type AccountTransferNetworkEnum string

const (
	AccountTransferNetworkEnumAccount AccountTransferNetworkEnum = "account"
)

func (e AccountTransferNetworkEnum) ToPointer() *AccountTransferNetworkEnum {
	return &e
}

func (e *AccountTransferNetworkEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		*e = AccountTransferNetworkEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTransferNetworkEnum: %v", v)
	}
}

// AccountTransferStatusEnum - The lifecycle status of the transfer.
type AccountTransferStatusEnum string

const (
	AccountTransferStatusEnumPendingApproval AccountTransferStatusEnum = "pending_approval"
	AccountTransferStatusEnumCanceled        AccountTransferStatusEnum = "canceled"
	AccountTransferStatusEnumComplete        AccountTransferStatusEnum = "complete"
)

func (e AccountTransferStatusEnum) ToPointer() *AccountTransferStatusEnum {
	return &e
}

func (e *AccountTransferStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_approval":
		fallthrough
	case "canceled":
		fallthrough
	case "complete":
		*e = AccountTransferStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTransferStatusEnum: %v", v)
	}
}

// AccountTransferTypeEnum - A constant representing the object's type. For this resource it will always be `account_transfer`.
type AccountTransferTypeEnum string

const (
	AccountTransferTypeEnumAccountTransfer AccountTransferTypeEnum = "account_transfer"
)

func (e AccountTransferTypeEnum) ToPointer() *AccountTransferTypeEnum {
	return &e
}

func (e *AccountTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_transfer":
		*e = AccountTransferTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTransferTypeEnum: %v", v)
	}
}

// AccountTransfer - Account transfers move funds between your own accounts at Increase.
type AccountTransfer struct {
	// The Account to which the transfer belongs.
	AccountID string `json:"account_id"`
	// The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
	Approval AccountTransferTransferApproval `json:"approval"`
	// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
	Cancellation AccountTransferTransferCancellation `json:"cancellation"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency AccountTransferCurrencyEnum `json:"currency"`
	// The description that will show on the transactions.
	Description string `json:"description"`
	// The destination account's identifier.
	DestinationAccountID string `json:"destination_account_id"`
	// The ID for the transaction receiving the transfer.
	DestinationTransactionID string `json:"destination_transaction_id"`
	// The account transfer's identifier.
	ID string `json:"id"`
	// The transfer's network.
	Network AccountTransferNetworkEnum `json:"network"`
	// The lifecycle status of the transfer.
	Status AccountTransferStatusEnum `json:"status"`
	// The ID for the transaction funding the transfer.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `account_transfer`.
	Type AccountTransferTypeEnum `json:"type"`
}
