<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RecurringPaymentsAPIEmailSubscriptionsFeature 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete recurring payment
     * 
     * Completely removes a particular payment from the recurring payment plan.  
     * You need to specify the payment plan id in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentResponse
     */
	public function deleteRecurringPayment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions/{sub_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteRecurringPayment200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPayment200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteRecurringPayment404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteRecurringPayment404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get many plans
     * 
     * This method allows you to obtain information about all the payment plans you’ve created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetManyPlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetManyPlansResponse
     */
	public function getManyPlans(
        \OpenAPI\OpenAPI\Models\Operations\GetManyPlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetManyPlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions/plans');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetManyPlansRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetManyPlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getManyPlans200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetManyPlans200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get many recurring payments
     * 
     * The method allows you to view the entire list of recurring payments filtered by payment status and/or payment plan id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsResponse
     */
	public function getManyRecurringPayments(
        \OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPaymentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getManyRecurringPayments200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetManyRecurringPayments200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get one plan
     * 
     * This method allows you to obtain information about your payment plan.  
     * (you need to specify your payment plan id in the request).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOnePlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOnePlanResponse
     */
	public function getOnePlan(
        \OpenAPI\OpenAPI\Models\Operations\GetOnePlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOnePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions/plans/{plan-id}', \OpenAPI\OpenAPI\Models\Operations\GetOnePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOnePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOnePlan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOnePlan200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOnePlan404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOnePlan404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get one recurring payment
     * 
     * Get information about a particular recurring payment via its ID.
     * 
     * Here’s the list of available statuses:  
     * \- WAITING_PAY  
     * \- PAID  
     * \- PARTIALLY_PAID  
     * \- EXPIRED
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentResponse
     */
	public function getOneRecurringPayment(
        \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions/{sub_id}', \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOneRecurringPayment200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPayment200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOneRecurringPayment404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOneRecurringPayment404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update plan
     * 
     * This method allows you to add necessary changes to a created plan. They won’t affect users who have already paid; however, the changes will take effect when a new payment is to be made.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePlanResponse
     */
	public function updatePlan(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/subscriptions/plans/{plan-id}', \OpenAPI\OpenAPI\Models\Operations\UpdatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}