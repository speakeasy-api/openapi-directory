// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type JobStatusEnum string

const (
	JobStatusEnumCreated                    JobStatusEnum = "CREATED"
	JobStatusEnumPreparingForInitialization JobStatusEnum = "PREPARING_FOR_INITIALIZATION"
	JobStatusEnumInitializing               JobStatusEnum = "INITIALIZING"
	JobStatusEnumProcessing                 JobStatusEnum = "PROCESSING"
	JobStatusEnumPendingJob                 JobStatusEnum = "PENDING_JOB"
	JobStatusEnumCompleting                 JobStatusEnum = "COMPLETING"
	JobStatusEnumCompleted                  JobStatusEnum = "COMPLETED"
	JobStatusEnumFailing                    JobStatusEnum = "FAILING"
	JobStatusEnumFailed                     JobStatusEnum = "FAILED"
)

func (e JobStatusEnum) ToPointer() *JobStatusEnum {
	return &e
}

func (e *JobStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATED":
		fallthrough
	case "PREPARING_FOR_INITIALIZATION":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "PENDING_JOB":
		fallthrough
	case "COMPLETING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILING":
		fallthrough
	case "FAILED":
		*e = JobStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusEnum: %v", v)
	}
}
