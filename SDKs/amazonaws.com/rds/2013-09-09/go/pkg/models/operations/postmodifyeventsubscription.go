// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTModifyEventSubscriptionActionEnum
type POSTModifyEventSubscriptionActionEnum string

const (
	POSTModifyEventSubscriptionActionEnumModifyEventSubscription POSTModifyEventSubscriptionActionEnum = "ModifyEventSubscription"
)

func (e *POSTModifyEventSubscriptionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyEventSubscription":
		*e = POSTModifyEventSubscriptionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTModifyEventSubscriptionActionEnum: %s", s)
	}
}

// POSTModifyEventSubscriptionVersionEnum
type POSTModifyEventSubscriptionVersionEnum string

const (
	POSTModifyEventSubscriptionVersionEnumTwoThousandAndThirteen0909 POSTModifyEventSubscriptionVersionEnum = "2013-09-09"
)

func (e *POSTModifyEventSubscriptionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-09-09":
		*e = POSTModifyEventSubscriptionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTModifyEventSubscriptionVersionEnum: %s", s)
	}
}

type POSTModifyEventSubscriptionQueryParams struct {
	Action  POSTModifyEventSubscriptionActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTModifyEventSubscriptionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTModifyEventSubscriptionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTModifyEventSubscriptionRequest struct {
	QueryParams POSTModifyEventSubscriptionQueryParams
	Headers     POSTModifyEventSubscriptionHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTModifyEventSubscriptionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
