"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InventoryTask:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_inventory_task(self, request: shared.CreateInventoryTaskRequest, security: operations.CreateInventoryTaskSecurity) -> operations.CreateInventoryTaskResponse:
        r"""This method creates an inventory-related download task for a specified feed type with optional filter criteria. When using this method, specify the <strong>feedType</strong>. <br/><br/>This method returns the location response header containing the <strong>getInventoryTask</strong> call URI to retrieve the inventory task you just created. The URL includes the eBay-assigned task ID, which you can use to reference the inventory task.<br/><br/>To retrieve the status of the task, use the <strong>getInventoryTask</strong> method to retrieve a single task ID or the <strong>getInventoryTasks</strong> method to retrieve multiple task IDs.<p> <span class=\"tablenote\"><strong>Note:</strong> The scope depends on the feed type. An error message results when an unsupported scope or feed type is specified.</span></p>Presently, this method supports Active Inventory Report. The <strong>ActiveInventoryReport</strong> returns a report that contains price and quantity information for all of the active listings for a specific seller. A seller can use this information to maintain their inventory on eBay."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/inventory_task'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInventoryTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_inventory_task(self, request: operations.GetInventoryTaskRequest, security: operations.GetInventoryTaskSecurity) -> operations.GetInventoryTaskResponse:
        r"""This method retrieves the task details and status of the specified inventory-related task. The input is <strong>task_id</strong>."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInventoryTaskRequest, base_url, '/inventory_task/{task_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInventoryTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventoryTask])
                res.inventory_task = out
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def get_inventory_tasks(self, request: operations.GetInventoryTasksRequest, security: operations.GetInventoryTasksSecurity) -> operations.GetInventoryTasksResponse:
        r"""This method searches for multiple tasks of a specific feed type, and includes date filters and pagination."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/inventory_task'
        
        query_params = utils.get_query_params(operations.GetInventoryTasksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInventoryTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventoryTaskCollection])
                res.inventory_task_collection = out
        elif http_res.status_code in [400, 403, 500]:
            pass

        return res

    