/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxEditFields {
    /**
     * Unique identifier of the category of the Tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    public Integer categoryId;
    public TaxEditFields withCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * Country where the Tax applies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public TaxEditFields withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * True if the tax has a fixed valued amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed")
    public Boolean fixed;
    public TaxEditFields withFixed(Boolean fixed) {
        this.fixed = fixed;
        return this;
    }
    
    /**
     * Name that identifies tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TaxEditFields withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Region where the Tax applies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public TaxEditFields withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * True if the tax should be applied to shipping costs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping")
    public Boolean shipping;
    public TaxEditFields withShipping(Boolean shipping) {
        this.shipping = shipping;
        return this;
    }
    
    /**
     * Tax value for the given Tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax")
    public Float tax;
    public TaxEditFields withTax(Float tax) {
        this.tax = tax;
        return this;
    }
    
}
