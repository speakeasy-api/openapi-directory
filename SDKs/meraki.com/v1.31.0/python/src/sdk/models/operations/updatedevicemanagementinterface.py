"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum(str, Enum):
    r"""Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'."""
    DISABLED = 'disabled'
    ENABLED = 'enabled'
    NOT_CONFIGURED = 'not configured'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceManagementInterfaceRequestBodyWan1:
    r"""WAN 1 settings"""
    
    static_dns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticDns'), 'exclude': lambda f: f is None }})
    r"""Up to two DNS IPs."""  
    static_gateway_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticGatewayIp'), 'exclude': lambda f: f is None }})
    r"""The IP of the gateway on the WAN."""  
    static_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticIp'), 'exclude': lambda f: f is None }})
    r"""The IP the device should use on the WAN."""  
    static_subnet_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticSubnetMask'), 'exclude': lambda f: f is None }})
    r"""The subnet mask for the WAN."""  
    using_static_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usingStaticIp'), 'exclude': lambda f: f is None }})
    r"""Configure the interface to have static IP settings or use DHCP."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false."""  
    wan_enabled: Optional[UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wanEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'."""  
    
class UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum(str, Enum):
    r"""Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'."""
    DISABLED = 'disabled'
    ENABLED = 'enabled'
    NOT_CONFIGURED = 'not configured'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceManagementInterfaceRequestBodyWan2:
    r"""WAN 2 settings (only for MX devices)"""
    
    static_dns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticDns'), 'exclude': lambda f: f is None }})
    r"""Up to two DNS IPs."""  
    static_gateway_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticGatewayIp'), 'exclude': lambda f: f is None }})
    r"""The IP of the gateway on the WAN."""  
    static_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticIp'), 'exclude': lambda f: f is None }})
    r"""The IP the device should use on the WAN."""  
    static_subnet_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticSubnetMask'), 'exclude': lambda f: f is None }})
    r"""The subnet mask for the WAN."""  
    using_static_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usingStaticIp'), 'exclude': lambda f: f is None }})
    r"""Configure the interface to have static IP settings or use DHCP."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false."""  
    wan_enabled: Optional[UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wanEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceManagementInterfaceRequestBody:
    
    wan1: Optional[UpdateDeviceManagementInterfaceRequestBodyWan1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan1'), 'exclude': lambda f: f is None }})
    r"""WAN 1 settings"""  
    wan2: Optional[UpdateDeviceManagementInterfaceRequestBodyWan2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan2'), 'exclude': lambda f: f is None }})
    r"""WAN 2 settings (only for MX devices)"""  
    

@dataclasses.dataclass
class UpdateDeviceManagementInterfaceRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateDeviceManagementInterfaceRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateDeviceManagementInterfaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_device_management_interface_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    