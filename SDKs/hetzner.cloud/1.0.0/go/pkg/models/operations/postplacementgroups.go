// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPlacementGroupsCreatePlacementGroupRequestTypeEnum - Define the Placement Group Type.
type PostPlacementGroupsCreatePlacementGroupRequestTypeEnum string

const (
	PostPlacementGroupsCreatePlacementGroupRequestTypeEnumSpread PostPlacementGroupsCreatePlacementGroupRequestTypeEnum = "spread"
)

func (e *PostPlacementGroupsCreatePlacementGroupRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "spread":
		*e = PostPlacementGroupsCreatePlacementGroupRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPlacementGroupsCreatePlacementGroupRequestTypeEnum: %s", s)
	}
}

type PostPlacementGroupsCreatePlacementGroupRequest struct {
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Name of the PlacementGroup
	Name string `json:"name"`
	// Define the Placement Group Type.
	Type PostPlacementGroupsCreatePlacementGroupRequestTypeEnum `json:"type"`
}

type PostPlacementGroupsRequest struct {
	Request *PostPlacementGroupsCreatePlacementGroupRequest `request:"mediaType=application/json"`
}

// PostPlacementGroupsCreatePlacementGroupResponseNullableActionError - Error message for the Action if error occurred, otherwise null
type PostPlacementGroupsCreatePlacementGroupResponseNullableActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum - Status of the Action
type PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum string

const (
	PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnumSuccess PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum = "success"
	PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnumRunning PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum = "running"
	PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnumError   PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum = "error"
)

func (e *PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum: %s", s)
	}
}

type PostPlacementGroupsCreatePlacementGroupResponseNullableAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostPlacementGroupsCreatePlacementGroupResponseNullableActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum `json:"status"`
}

// PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum - Type of the Placement Group
type PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum string

const (
	PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnumSpread PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum = "spread"
)

func (e *PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "spread":
		*e = PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum: %s", s)
	}
}

type PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Array of IDs of Servers that are part of this Placement Group
	Servers []int64 `json:"servers"`
	// Type of the Placement Group
	Type PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum `json:"type"`
}

// PostPlacementGroupsCreatePlacementGroupResponse - The `PlacementGroup` key contains the PlacementGroup that was just created.
type PostPlacementGroupsCreatePlacementGroupResponse struct {
	Action         *PostPlacementGroupsCreatePlacementGroupResponseNullableAction `json:"action,omitempty"`
	PlacementGroup PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup  `json:"placement_group"`
}

type PostPlacementGroupsResponse struct {
	ContentType string
	// The `PlacementGroup` key contains the PlacementGroup that was just created.
	CreatePlacementGroupResponse *PostPlacementGroupsCreatePlacementGroupResponse
	StatusCode                   int
	RawResponse                  *http.Response
}
