"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RejectedPaymentV3:
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of the payment in minor units"""  
    currency_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyType') }})
    r"""Valid ISO 4217 3 letter currency code. See the <a href=\\"https://www.iso.org/iso-4217-currency-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    payor_payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorPaymentId') }})
    r"""A reference identifier for the payor for the given payee payment"""  
    reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""The reason for the payment being rejected"""  
    remote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId') }})
    r"""The remoteId supplied by the payor that identifies the payee"""  
    source_account_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountName') }})
    r"""The identifier of the source account to debit the payment from"""  
    line_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineNumber'), 'exclude': lambda f: f is None }})
    r"""If the payment was submitted in a csv payout then this will be the line number of the payment in the file"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""A more general rejection message than the reason property"""  
    payment_metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMetadata'), 'exclude': lambda f: f is None }})
    r"""<p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
    <p>The structure of the data will be dictated by the requirements of the payment rails</p>
    """  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasonCode'), 'exclude': lambda f: f is None }})
    r"""The reason code as determined by Velo"""  
    remote_system_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteSystemId'), 'exclude': lambda f: f is None }})
    r"""<p>The identifier for the remote payments system if not Velo</p>"""  
    