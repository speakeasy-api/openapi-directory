/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class EmployeeStaging {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add new employee to Web Link
   *
   * @remarks
   * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
   */
  addNewEmployeeToWebLink(
    req: operations.AddNewEmployeeToWebLinkRequest,
    security: operations.AddNewEmployeeToWebLinkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddNewEmployeeToWebLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddNewEmployeeToWebLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/weblinkstaging/companies/{companyId}/employees/newemployees",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "stagedEmployee",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddNewEmployeeToWebLinkSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddNewEmployeeToWebLinkResponse =
        new operations.AddNewEmployeeToWebLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackingNumberResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.trackingNumberResponses = utils.objectToClass(
              httpRes?.data,
              shared.TrackingNumberResponse,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
        case [403, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
