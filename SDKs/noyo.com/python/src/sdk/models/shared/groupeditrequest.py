"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GroupEditRequestBusinessDetailsEmployerTypeEnum(str, Enum):
    r"""Type or classification of the group as an employer"""
    FOREIGN_GOVERNMENT = 'foreign_government'
    PRIVATE_SECTOR = 'private_sector'
    RELIGIOUS_EMPLOYER = 'religious_employer'
    STATE_GOVERNMENT = 'state_government'
    TRIBAL_GOVERNMENT = 'tribal_government'

class GroupEditRequestBusinessDetailsEntityTypeEnum(str, Enum):
    r"""Type of legal or business entity"""
    C_CORP = 'c_corp'
    LLC = 'llc'
    LLP = 'llp'
    PARTNERSHIP = 'partnership'
    S_CORP = 's_corp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupEditRequestBusinessDetails:
    r"""Details about business or industry of the group"""
    
    company_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_description'), 'exclude': lambda f: f is None }})
    r"""General description of the type of business"""  
    date_established: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_established'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the company was established"""  
    employer_type: Optional[GroupEditRequestBusinessDetailsEmployerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_type'), 'exclude': lambda f: f is None }})
    r"""Type or classification of the group as an employer"""  
    entity_type: Optional[GroupEditRequestBusinessDetailsEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type'), 'exclude': lambda f: f is None }})
    r"""Type of legal or business entity"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupEditRequestInsuranceDetails:
    r"""General details about the group insurance offerings"""
    
    is_erisa_compliant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_erisa_compliant'), 'exclude': lambda f: f is None }})
    r"""True if the group is compliant with ERISA regulation"""  
    is_erisa_subject: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_erisa_subject'), 'exclude': lambda f: f is None }})
    r"""True if company is subject to ERISA regulation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupEditRequest:
    
    business_details: Optional[GroupEditRequestBusinessDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('business_details'), 'exclude': lambda f: f is None }})
    r"""Details about business or industry of the group"""  
    dba_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dba_name'), 'exclude': lambda f: f is None }})
    r"""DBA name for the company, if applicable"""  
    federal_ein: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federal_ein'), 'exclude': lambda f: f is None }})
    r"""Federal Employer Identification Number for the group/company"""  
    insurance_details: Optional[GroupEditRequestInsuranceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_details'), 'exclude': lambda f: f is None }})
    r"""General details about the group insurance offerings"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the group/company"""  
    sic_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sic_code'), 'exclude': lambda f: f is None }})
    r"""SIC Code for the group/company"""  
    