"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BackgroundRemoval:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_removebg_form(self, request: shared.RemoveBgJSON) -> operations.PostRemovebgFormResponse:
        r"""Remove the background of an image
        Removes the background of a JPG/PNG image.
        
        * File size: up to 12 MB
        * Image source: File upload (binary or as base64 encoded string) or download from URL
        * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
        * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
        
        Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/removebg'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRemovebgFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoveBgJSONResponse])
                res.remove_bg_json_response = out
            if utils.match_content_type(content_type, 'image/*'):
                res.post_removebg_form_200_image_wildcard_binary_string = http_res.content
        elif http_res.status_code in [400, 402, 403, 429]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_removebg_json(self, request: shared.RemoveBgJSON) -> operations.PostRemovebgJSONResponse:
        r"""Remove the background of an image
        Removes the background of a JPG/PNG image.
        
        * File size: up to 12 MB
        * Image source: File upload (binary or as base64 encoded string) or download from URL
        * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
        * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
        
        Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/removebg'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRemovebgJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoveBgJSONResponse])
                res.remove_bg_json_response = out
            if utils.match_content_type(content_type, 'image/*'):
                res.post_removebg_json_200_image_wildcard_binary_string = http_res.content
        elif http_res.status_code in [400, 402, 403, 429]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_removebg_multipart(self, request: shared.RemoveBgMultipart) -> operations.PostRemovebgMultipartResponse:
        r"""Remove the background of an image
        Removes the background of a JPG/PNG image.
        
        * File size: up to 12 MB
        * Image source: File upload (binary or as base64 encoded string) or download from URL
        * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
        * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
        
        Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/removebg'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRemovebgMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoveBgJSONResponse])
                res.remove_bg_json_response = out
            if utils.match_content_type(content_type, 'image/*'):
                res.post_removebg_multipart_200_image_wildcard_binary_string = http_res.content
        elif http_res.status_code in [400, 402, 403, 429]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    