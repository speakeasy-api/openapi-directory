"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class JustificationJustificationTypeEnum(str, Enum):
    r"""The justification type for this vulnerability."""
    JUSTIFICATION_TYPE_UNSPECIFIED = 'JUSTIFICATION_TYPE_UNSPECIFIED'
    COMPONENT_NOT_PRESENT = 'COMPONENT_NOT_PRESENT'
    VULNERABLE_CODE_NOT_PRESENT = 'VULNERABLE_CODE_NOT_PRESENT'
    VULNERABLE_CODE_NOT_IN_EXECUTE_PATH = 'VULNERABLE_CODE_NOT_IN_EXECUTE_PATH'
    VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = 'VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY'
    INLINE_MITIGATIONS_ALREADY_EXIST = 'INLINE_MITIGATIONS_ALREADY_EXIST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Justification:
    r"""Justification provides the justification when the state of the assessment if NOT_AFFECTED."""
    
    details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional details on why this justification was chosen."""  
    justification_type: Optional[JustificationJustificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('justificationType'), 'exclude': lambda f: f is None }})
    r"""The justification type for this vulnerability."""  
    