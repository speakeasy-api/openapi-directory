<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListResponse
     */
	public function dataformProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new CompilationResult in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesCompilationResultsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/compilationResults', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "compilationResultInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->compilationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompilationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CompilationResults in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListResponse
     */
	public function dataformProjectsLocationsRepositoriesCompilationResultsList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/compilationResults', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCompilationResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompilationResultsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCompilationResultsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Repository in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/repositories', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "repositoryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repository = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Repository', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a Repository's remote branches.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse
     */
	public function dataformProjectsLocationsRepositoriesFetchRemoteBranches(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:fetchRemoteBranches', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchRemoteBranchesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchRemoteBranchesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Repositories in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListResponse
     */
	public function dataformProjectsLocationsRepositoriesList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/repositories', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRepositoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRepositoriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new ReleaseConfig in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesReleaseConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/releaseConfigs', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "releaseConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releaseConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReleaseConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ReleaseConfigs in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListResponse
     */
	public function dataformProjectsLocationsRepositoriesReleaseConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/releaseConfigs', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesReleaseConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReleaseConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReleaseConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new WorkflowConfig in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workflowConfigs', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists WorkflowConfigs in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workflowConfigs', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkflowConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a single WorkflowConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowConfigsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Requests cancellation of a running WorkflowInvocation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowInvocationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new WorkflowInvocation in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowInvocationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workflowInvocations', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowInvocationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowInvocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowInvocation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists WorkflowInvocations in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowInvocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workflowInvocations', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowInvocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkflowInvocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns WorkflowInvocationActions in a given WorkflowInvocation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkflowInvocationsQuery(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:query', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryWorkflowInvocationActionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryWorkflowInvocationActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a Git commit for uncommitted files in a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesCommit(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:commit', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitWorkspaceChangesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Workspace in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workspaces', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workspace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches Git diff for an uncommitted file in a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesFetchFileDiff(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:fetchFileDiff', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchFileDiffResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchFileDiffResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches Git statuses for the files in a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatuses(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:fetchFileGitStatuses', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchFileGitStatusesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchFileGitStatusesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches Git ahead/behind against a remote branch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehind(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:fetchGitAheadBehind', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchGitAheadBehindResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchGitAheadBehindResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a single Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesGet(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workspace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Installs dependency NPM packages (inside a Workspace).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackages(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:installNpmPackages', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installNpmPackagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Workspaces in a given Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesList(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workspaces', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkspacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkspacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a directory inside a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesMakeDirectory(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:makeDirectory', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "makeDirectoryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->makeDirectoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a directory (inside a Workspace), and all of its contents, to a new location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesMoveDirectory(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:moveDirectory', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "moveDirectoryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveDirectoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a file (inside a Workspace) to a new location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesMoveFile(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:moveFile', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "moveFileRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pulls Git commits from the Repository's remote into a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesPull(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:pull', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pullGitCommitsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pushes Git commits from a Workspace to the Repository's remote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesPush(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:push', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushGitCommitsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesPushResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the contents of a given Workspace directory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContents(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:queryDirectoryContents', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryDirectoryContentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryDirectoryContentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the contents of a file (inside a Workspace).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesReadFile(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:readFile', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadFileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a directory (inside a Workspace) and all of its contents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesRemoveDirectory(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:removeDirectory', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeDirectoryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a file (inside a Workspace).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesRemoveFile(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:removeFile', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeFileRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs a Git reset for uncommitted files in a Workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesReset(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:reset', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resetWorkspaceChangesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Writes to a file (inside a Workspace).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse
     */
	public function dataformProjectsLocationsRepositoriesWorkspacesWriteFile(
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{workspace}:writeFile', \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writeFileRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->writeFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}