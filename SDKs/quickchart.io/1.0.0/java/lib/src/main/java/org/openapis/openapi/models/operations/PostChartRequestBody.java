/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PostChartRequestBody {
    /**
     * The background color of the chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    public String backgroundColor;

    public PostChartRequestBody withBackgroundColor(String backgroundColor) {
        this.backgroundColor = backgroundColor;
        return this;
    }
    
    /**
     * The chart configuration in Chart.js format (JSON or Javascript).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chart")
    public java.util.Map<String, Object> chart;

    public PostChartRequestBody withChart(java.util.Map<String, Object> chart) {
        this.chart = chart;
        return this;
    }
    
    /**
     * The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public String format;

    public PostChartRequestBody withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * The height of the chart in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;

    public PostChartRequestBody withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * The width of the chart in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;

    public PostChartRequestBody withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    public PostChartRequestBody(){}
}
