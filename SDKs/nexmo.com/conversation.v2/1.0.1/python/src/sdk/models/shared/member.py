"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberLinksSelf:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberLinks:
    
    self_: Optional[MemberLinksSelf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    
class MemberChannelTypeEnum(str, Enum):
    r"""The channel that the member joins with"""
    APP = 'app'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberChannel:
    
    type: Optional[MemberChannelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The channel that the member joins with"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberInitiatorInvited:
    
    is_system: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_system'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberInitiatorJoined:
    
    is_system: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_system'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberInitiator:
    
    invited: Optional[MemberInitiatorInvited] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited'), 'exclude': lambda f: f is None }})  
    joined: Optional[MemberInitiatorJoined] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joined'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberMediaAudioSettings:
    r"""The current audio state for the member"""
    
    earmuffed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earmuffed'), 'exclude': lambda f: f is None }})
    r"""Can the member hear other participants?"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Is audio enabled?"""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted'), 'exclude': lambda f: f is None }})
    r"""Can the member speak to other participants?"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberMedia:
    r"""The current media state for the member"""
    
    audio_settings: Optional[MemberMediaAudioSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_settings'), 'exclude': lambda f: f is None }})
    r"""The current audio state for the member"""  
    
class MemberStateEnum(str, Enum):
    r"""The state that the member is in for this conversation"""
    INVITED = 'INVITED'
    JOINED = 'JOINED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberTimestamp:
    
    invited: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited'), 'exclude': lambda f: f is None }})
    r"""The time that an invitation was sent"""  
    joined: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joined'), 'exclude': lambda f: f is None }})
    r"""The time that the conversation was joined"""  
    left: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('left'), 'exclude': lambda f: f is None }})
    r"""The time that the member left the conversation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Member:
    
    links: Optional[MemberLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    channel: Optional[MemberChannel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""The display name of the User"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Member ID"""  
    initiator: Optional[MemberInitiator] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initiator'), 'exclude': lambda f: f is None }})  
    media: Optional[MemberMedia] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})
    r"""The current media state for the member"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the User"""  
    state: Optional[MemberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state that the member is in for this conversation"""  
    timestamp: Optional[MemberTimestamp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the User"""  
    