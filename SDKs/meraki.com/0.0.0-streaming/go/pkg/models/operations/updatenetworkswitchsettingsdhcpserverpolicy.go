// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkSwitchSettingsDhcpServerPolicyPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum - 'allow' or 'block' new DHCP servers. Default value is 'allow'.
type UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum string

const (
	UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnumAllow UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum = "allow"
	UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnumBlock UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum = "block"
)

func (e *UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "block":
		*e = UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum: %s", s)
	}
}

type UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBody struct {
	// List the MAC addresses of DHCP servers to permit on the network. Applicable only if defaultPolicy is set to block. An empty array will clear the entries.
	AllowedServers []string `json:"allowedServers,omitempty"`
	// List the MAC addresses of DHCP servers to block on the network. Applicable only if defaultPolicy is set to allow. An empty array will clear the entries.
	BlockedServers []string `json:"blockedServers,omitempty"`
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy *UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBodyDefaultPolicyEnum `json:"defaultPolicy,omitempty"`
}

type UpdateNetworkSwitchSettingsDhcpServerPolicyRequest struct {
	PathParams UpdateNetworkSwitchSettingsDhcpServerPolicyPathParams
	Request    *UpdateNetworkSwitchSettingsDhcpServerPolicyRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkSwitchSettingsDhcpServerPolicyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchSettingsDhcpServerPolicy200ApplicationJSONObject map[string]interface{}
}
