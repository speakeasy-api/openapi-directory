<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class SearchWordsRequest
{
    /**
     * Search term is a Regular Expression
     * 
     * @var ?string $allowRegex
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=allowRegex')]
    public ?string $allowRegex = null;
    
    /**
     * Search case sensitive
     * 
     * @var ?string $caseSensitive
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=caseSensitive')]
    public ?string $caseSensitive = null;
    
    /**
     * Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * 
     * @var ?string $excludePartOfSpeech
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=excludePartOfSpeech')]
    public ?string $excludePartOfSpeech = null;
    
    /**
     * Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * 
     * @var ?string $includePartOfSpeech
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=includePartOfSpeech')]
    public ?string $includePartOfSpeech = null;
    
    /**
     * Maximum number of results to return
     * 
     * @var ?int $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;
    
    /**
     * Maximum corpus frequency for terms
     * 
     * @var ?int $maxCorpusCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=maxCorpusCount')]
    public ?int $maxCorpusCount = null;
    
    /**
     * Maximum dictionary definition count
     * 
     * @var ?int $maxDictionaryCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=maxDictionaryCount')]
    public ?int $maxDictionaryCount = null;
    
    /**
     * Maximum word length
     * 
     * @var ?int $maxLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=maxLength')]
    public ?int $maxLength = null;
    
    /**
     * Minimum corpus frequency for terms
     * 
     * @var ?int $minCorpusCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minCorpusCount')]
    public ?int $minCorpusCount = null;
    
    /**
     * Minimum number of dictionary entries for words returned
     * 
     * @var ?int $minDictionaryCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minDictionaryCount')]
    public ?int $minDictionaryCount = null;
    
    /**
     * Minimum word length
     * 
     * @var ?int $minLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minLength')]
    public ?int $minLength = null;
    
    /**
     * Search query
     * 
     * @var string $query
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=query')]
    public string $query;
    
    /**
     * Results to skip
     * 
     * @var ?int $skip
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=skip')]
    public ?int $skip = null;
    
	public function __construct()
	{
		$this->allowRegex = null;
		$this->caseSensitive = null;
		$this->excludePartOfSpeech = null;
		$this->includePartOfSpeech = null;
		$this->limit = null;
		$this->maxCorpusCount = null;
		$this->maxDictionaryCount = null;
		$this->maxLength = null;
		$this->minCorpusCount = null;
		$this->minDictionaryCount = null;
		$this->minLength = null;
		$this->query = "";
		$this->skip = null;
	}
}
