"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import backupcontext as shared_backupcontext
from ..shared import exportcontext as shared_exportcontext
from ..shared import importcontext as shared_importcontext
from ..shared import operationerrors as shared_operationerrors
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OperationOperationTypeEnum(str, Enum):
    r"""The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`"""
    SQL_OPERATION_TYPE_UNSPECIFIED = 'SQL_OPERATION_TYPE_UNSPECIFIED'
    IMPORT = 'IMPORT'
    EXPORT = 'EXPORT'
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    RESTART = 'RESTART'
    BACKUP = 'BACKUP'
    SNAPSHOT = 'SNAPSHOT'
    BACKUP_VOLUME = 'BACKUP_VOLUME'
    DELETE_VOLUME = 'DELETE_VOLUME'
    RESTORE_VOLUME = 'RESTORE_VOLUME'
    INJECT_USER = 'INJECT_USER'
    CLONE = 'CLONE'
    STOP_REPLICA = 'STOP_REPLICA'
    START_REPLICA = 'START_REPLICA'
    PROMOTE_REPLICA = 'PROMOTE_REPLICA'
    CREATE_REPLICA = 'CREATE_REPLICA'
    CREATE_USER = 'CREATE_USER'
    DELETE_USER = 'DELETE_USER'
    UPDATE_USER = 'UPDATE_USER'
    CREATE_DATABASE = 'CREATE_DATABASE'
    DELETE_DATABASE = 'DELETE_DATABASE'
    UPDATE_DATABASE = 'UPDATE_DATABASE'
    FAILOVER = 'FAILOVER'
    DELETE_BACKUP = 'DELETE_BACKUP'
    RECREATE_REPLICA = 'RECREATE_REPLICA'
    TRUNCATE_LOG = 'TRUNCATE_LOG'
    DEMOTE_MASTER = 'DEMOTE_MASTER'
    MAINTENANCE = 'MAINTENANCE'
    ENABLE_PRIVATE_IP = 'ENABLE_PRIVATE_IP'
    DEFER_MAINTENANCE = 'DEFER_MAINTENANCE'
    CREATE_CLONE = 'CREATE_CLONE'
    RESCHEDULE_MAINTENANCE = 'RESCHEDULE_MAINTENANCE'
    START_EXTERNAL_SYNC = 'START_EXTERNAL_SYNC'
    LOG_CLEANUP = 'LOG_CLEANUP'
    AUTO_RESTART = 'AUTO_RESTART'
    REENCRYPT = 'REENCRYPT'

class OperationStatusEnum(str, Enum):
    r"""The status of an operation."""
    SQL_OPERATION_STATUS_UNSPECIFIED = 'SQL_OPERATION_STATUS_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Operation:
    r"""An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource."""
    
    backup_context: Optional[shared_backupcontext.BackupContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupContext'), 'exclude': lambda f: f is None }})
    r"""Backup context."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`."""  
    error: Optional[shared_operationerrors.OperationErrors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Database instance operation errors list wrapper."""  
    export_context: Optional[shared_exportcontext.ExportContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportContext'), 'exclude': lambda f: f is None }})
    r"""Database instance export context."""  
    import_context: Optional[shared_importcontext.ImportContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importContext'), 'exclude': lambda f: f is None }})
    r"""Database instance import context."""  
    insert_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertTime'), 'exclude': lambda f: f is None }})
    r"""The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#operation`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation."""  
    operation_type: Optional[OperationOperationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationType'), 'exclude': lambda f: f is None }})
    r"""The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`"""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""The URI of this resource."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`."""  
    status: Optional[OperationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of an operation."""  
    target_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetId'), 'exclude': lambda f: f is None }})
    r"""Name of the database instance related to this operation."""  
    target_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetLink'), 'exclude': lambda f: f is None }})  
    target_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetProject'), 'exclude': lambda f: f is None }})
    r"""The project ID of the target instance related to this operation."""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""The email address of the user who initiated this operation."""  
    