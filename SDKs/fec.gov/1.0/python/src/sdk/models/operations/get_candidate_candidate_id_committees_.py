"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import committeedetailpage as shared_committeedetailpage
from enum import Enum
from typing import Optional

class GetCandidateCandidateIDCommitteesCommitteeTypeEnum(str, Enum):
    UNKNOWN = ''
    C = 'C'
    D = 'D'
    E = 'E'
    H = 'H'
    I = 'I'
    N = 'N'
    O = 'O'
    P = 'P'
    Q = 'Q'
    S = 'S'
    U = 'U'
    V = 'V'
    W = 'W'
    X = 'X'
    Y = 'Y'
    Z = 'Z'

class GetCandidateCandidateIDCommitteesDesignationEnum(str, Enum):
    UNKNOWN = ''
    A = 'A'
    J = 'J'
    P = 'P'
    U = 'U'
    B = 'B'
    D = 'D'

class GetCandidateCandidateIDCommitteesFilingFrequencyEnum(str, Enum):
    UNKNOWN = ''
    A = 'A'
    M = 'M'
    N = 'N'
    Q = 'Q'
    T = 'T'
    W = 'W'
    MINUS_A = '-A'
    MINUS_T = '-T'

class GetCandidateCandidateIDCommitteesOrganizationTypeEnum(str, Enum):
    UNKNOWN = ''
    C = 'C'
    L = 'L'
    M = 'M'
    T = 'T'
    V = 'V'
    W = 'W'


@dataclasses.dataclass
class GetCandidateCandidateIDCommitteesRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    candidate_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'candidate_id', 'style': 'simple', 'explode': False }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    committee_type: Optional[list[GetCandidateCandidateIDCommitteesCommitteeTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_type', 'style': 'form', 'explode': True }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    cycle: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cycle', 'style': 'form', 'explode': True }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1s) The cycle begins with
    an odd year and is named for its ending, even year.
    """  
    designation: Optional[list[GetCandidateCandidateIDCommitteesDesignationEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'designation', 'style': 'form', 'explode': True }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    filing_frequency: Optional[list[GetCandidateCandidateIDCommitteesFilingFrequencyEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filing_frequency', 'style': 'form', 'explode': True }})
    r"""The one-letter
        code of the filing frequency:
             - A Administratively terminated
             - D Debt
             - M Monthly filer
             - Q Quarterly filer
             - T Terminated
             - W Waived
    """  
    organization_type: Optional[list[GetCandidateCandidateIDCommitteesOrganizationTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'organization_type', 'style': 'form', 'explode': True }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)"""  
    

@dataclasses.dataclass
class GetCandidateCandidateIDCommitteesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    committee_detail_page: Optional[shared_committeedetailpage.CommitteeDetailPage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    