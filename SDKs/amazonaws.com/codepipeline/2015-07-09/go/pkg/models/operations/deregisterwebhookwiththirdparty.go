// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeregisterWebhookWithThirdPartyXAmzTargetEnum
type DeregisterWebhookWithThirdPartyXAmzTargetEnum string

const (
	DeregisterWebhookWithThirdPartyXAmzTargetEnumCodePipeline20150709DeregisterWebhookWithThirdParty DeregisterWebhookWithThirdPartyXAmzTargetEnum = "CodePipeline_20150709.DeregisterWebhookWithThirdParty"
)

func (e *DeregisterWebhookWithThirdPartyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodePipeline_20150709.DeregisterWebhookWithThirdParty":
		*e = DeregisterWebhookWithThirdPartyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeregisterWebhookWithThirdPartyXAmzTargetEnum: %s", s)
	}
}

type DeregisterWebhookWithThirdPartyHeaders struct {
	XAmzAlgorithm     *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeregisterWebhookWithThirdPartyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeregisterWebhookWithThirdPartyRequest struct {
	Headers DeregisterWebhookWithThirdPartyHeaders
	Request shared.DeregisterWebhookWithThirdPartyInput `request:"mediaType=application/json"`
}

type DeregisterWebhookWithThirdPartyResponse struct {
	ContentType string
	// Success
	DeregisterWebhookWithThirdPartyOutput map[string]interface{}
	StatusCode                            int
	RawResponse                           *http.Response
	// ValidationException
	ValidationException interface{}
	// WebhookNotFoundException
	WebhookNotFoundException interface{}
}
