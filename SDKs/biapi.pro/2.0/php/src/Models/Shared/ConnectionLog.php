<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ConnectionLog
{
    /**
     * If fail, contains the error code
     * 
     * @var ?string $error
     */
	#[\JMS\Serializer\Annotation\SerializedName('error')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $error = null;
    
    /**
     * If fail, error message received from connector
     * 
     * @var ?string $errorMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('error_message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $errorMessage = null;
    
    /**
     * MD5 hash of the exception backtrace
     * 
     * @var ?string $errorUid
     */
	#[\JMS\Serializer\Annotation\SerializedName('error_uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $errorUid = null;
    
    /**
     * Fields for connection in additionalInformationNeeded state with background option
     * 
     * @var ?string $fields
     */
	#[\JMS\Serializer\Annotation\SerializedName('fields')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fields = null;
    
    /**
     * ID of the log
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * ID of the connection
     * 
     * @var int $idConnection
     */
	#[\JMS\Serializer\Annotation\SerializedName('id_connection')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $idConnection;
    
    /**
     * ID of the connector
     * 
     * @var ?int $idConnector
     */
	#[\JMS\Serializer\Annotation\SerializedName('id_connector')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $idConnector = null;
    
    /**
     * ID of the related connection source
     * 
     * @var ?int $idSource
     */
	#[\JMS\Serializer\Annotation\SerializedName('id_source')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $idSource = null;
    
    /**
     * ID of the user
     * 
     * @var ?int $idUser
     */
	#[\JMS\Serializer\Annotation\SerializedName('id_user')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $idUser = null;
    
    /**
     * bcrypt hash of the login
     * 
     * @var ?string $login
     */
	#[\JMS\Serializer\Annotation\SerializedName('login')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $login = null;
    
    /**
     * In case of bank connection, number of accounts
     * 
     * @var ?int $nbAccounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('nb_accounts')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $nbAccounts = null;
    
    /**
     * If fail, the date represents the next try to connect
     * 
     * @var ?\DateTime $nextTry
     */
	#[\JMS\Serializer\Annotation\SerializedName('next_try')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $nextTry = null;
    
    /**
     * Session folder uid
     * 
     * @var ?string $sessionFolderId
     */
	#[\JMS\Serializer\Annotation\SerializedName('session_folder_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sessionFolderId = null;
    
    /**
     * Timestamp when the synchronization has started
     * 
     * @var ?\DateTime $start
     */
	#[\JMS\Serializer\Annotation\SerializedName('start')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $start = null;
    
    /**
     * Status of user (1 = charged user)
     * 
     * @var ?int $statut
     */
	#[\JMS\Serializer\Annotation\SerializedName('statut')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $statut = null;
    
    /**
     * Timestamp of log, when the synchronization has finished
     * 
     * @var \DateTime $timestamp
     */
	#[\JMS\Serializer\Annotation\SerializedName('timestamp')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $timestamp;
    
    /**
     * Worker used to do synchronization
     * 
     * @var ?string $worker
     */
	#[\JMS\Serializer\Annotation\SerializedName('worker')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $worker = null;
    
	public function __construct()
	{
		$this->error = null;
		$this->errorMessage = null;
		$this->errorUid = null;
		$this->fields = null;
		$this->id = 0;
		$this->idConnection = 0;
		$this->idConnector = null;
		$this->idSource = null;
		$this->idUser = null;
		$this->login = null;
		$this->nbAccounts = null;
		$this->nextTry = null;
		$this->sessionFolderId = null;
		$this->start = null;
		$this->statut = null;
		$this->timestamp = new \DateTime();
		$this->worker = null;
	}
}
