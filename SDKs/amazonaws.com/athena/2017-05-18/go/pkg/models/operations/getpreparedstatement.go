// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetPreparedStatementXAmzTargetEnum
type GetPreparedStatementXAmzTargetEnum string

const (
	GetPreparedStatementXAmzTargetEnumAmazonAthenaGetPreparedStatement GetPreparedStatementXAmzTargetEnum = "AmazonAthena.GetPreparedStatement"
)

func (e *GetPreparedStatementXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonAthena.GetPreparedStatement":
		*e = GetPreparedStatementXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPreparedStatementXAmzTargetEnum: %s", s)
	}
}

type GetPreparedStatementRequest struct {
	GetPreparedStatementInput shared.GetPreparedStatementInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                GetPreparedStatementXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetPreparedStatementResponse struct {
	ContentType string
	// Success
	GetPreparedStatementOutput *shared.GetPreparedStatementOutput
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
