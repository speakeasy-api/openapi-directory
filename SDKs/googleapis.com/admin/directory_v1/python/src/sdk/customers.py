"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def admin_customers_chrome_print_servers_batch_create_print_servers(self, request: operations.AdminCustomersChromePrintServersBatchCreatePrintServersRequest, security: operations.AdminCustomersChromePrintServersBatchCreatePrintServersSecurity) -> operations.AdminCustomersChromePrintServersBatchCreatePrintServersResponse:
        r"""Creates multiple print servers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersBatchCreatePrintServersRequest, base_url, '/admin/directory/v1/{parent}/chrome/printServers:batchCreatePrintServers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_create_print_servers_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersBatchCreatePrintServersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersBatchCreatePrintServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchCreatePrintServersResponse])
                res.batch_create_print_servers_response = out

        return res

    def admin_customers_chrome_print_servers_batch_delete_print_servers(self, request: operations.AdminCustomersChromePrintServersBatchDeletePrintServersRequest, security: operations.AdminCustomersChromePrintServersBatchDeletePrintServersSecurity) -> operations.AdminCustomersChromePrintServersBatchDeletePrintServersResponse:
        r"""Deletes multiple print servers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersBatchDeletePrintServersRequest, base_url, '/admin/directory/v1/{parent}/chrome/printServers:batchDeletePrintServers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_delete_print_servers_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersBatchDeletePrintServersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersBatchDeletePrintServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchDeletePrintServersResponse])
                res.batch_delete_print_servers_response = out

        return res

    def admin_customers_chrome_print_servers_create(self, request: operations.AdminCustomersChromePrintServersCreateRequest, security: operations.AdminCustomersChromePrintServersCreateSecurity) -> operations.AdminCustomersChromePrintServersCreateResponse:
        r"""Creates a print server."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersCreateRequest, base_url, '/admin/directory/v1/{parent}/chrome/printServers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "print_server_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrintServer])
                res.print_server = out

        return res

    def admin_customers_chrome_print_servers_delete(self, request: operations.AdminCustomersChromePrintServersDeleteRequest, security: operations.AdminCustomersChromePrintServersDeleteSecurity) -> operations.AdminCustomersChromePrintServersDeleteResponse:
        r"""Deletes a print server."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersDeleteRequest, base_url, '/admin/directory/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def admin_customers_chrome_print_servers_get(self, request: operations.AdminCustomersChromePrintServersGetRequest, security: operations.AdminCustomersChromePrintServersGetSecurity) -> operations.AdminCustomersChromePrintServersGetResponse:
        r"""Returns a print server's configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersGetRequest, base_url, '/admin/directory/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrintServer])
                res.print_server = out

        return res

    def admin_customers_chrome_print_servers_list(self, request: operations.AdminCustomersChromePrintServersListRequest, security: operations.AdminCustomersChromePrintServersListSecurity) -> operations.AdminCustomersChromePrintServersListResponse:
        r"""Lists print server configurations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersListRequest, base_url, '/admin/directory/v1/{parent}/chrome/printServers', request)
        
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPrintServersResponse])
                res.list_print_servers_response = out

        return res

    def admin_customers_chrome_print_servers_patch(self, request: operations.AdminCustomersChromePrintServersPatchRequest, security: operations.AdminCustomersChromePrintServersPatchSecurity) -> operations.AdminCustomersChromePrintServersPatchResponse:
        r"""Updates a print server's configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintServersPatchRequest, base_url, '/admin/directory/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "print_server_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintServersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintServersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrintServer])
                res.print_server = out

        return res

    def admin_customers_chrome_printers_batch_create_printers(self, request: operations.AdminCustomersChromePrintersBatchCreatePrintersRequest, security: operations.AdminCustomersChromePrintersBatchCreatePrintersSecurity) -> operations.AdminCustomersChromePrintersBatchCreatePrintersResponse:
        r"""Creates printers under given Organization Unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintersBatchCreatePrintersRequest, base_url, '/admin/directory/v1/{parent}/chrome/printers:batchCreatePrinters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_create_printers_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintersBatchCreatePrintersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintersBatchCreatePrintersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchCreatePrintersResponse])
                res.batch_create_printers_response = out

        return res

    def admin_customers_chrome_printers_batch_delete_printers(self, request: operations.AdminCustomersChromePrintersBatchDeletePrintersRequest, security: operations.AdminCustomersChromePrintersBatchDeletePrintersSecurity) -> operations.AdminCustomersChromePrintersBatchDeletePrintersResponse:
        r"""Deletes printers in batch."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintersBatchDeletePrintersRequest, base_url, '/admin/directory/v1/{parent}/chrome/printers:batchDeletePrinters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_delete_printers_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintersBatchDeletePrintersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintersBatchDeletePrintersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchDeletePrintersResponse])
                res.batch_delete_printers_response = out

        return res

    def admin_customers_chrome_printers_create(self, request: operations.AdminCustomersChromePrintersCreateRequest, security: operations.AdminCustomersChromePrintersCreateSecurity) -> operations.AdminCustomersChromePrintersCreateResponse:
        r"""Creates a printer under given Organization Unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintersCreateRequest, base_url, '/admin/directory/v1/{parent}/chrome/printers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "printer_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Printer])
                res.printer = out

        return res

    def admin_customers_chrome_printers_list(self, request: operations.AdminCustomersChromePrintersListRequest, security: operations.AdminCustomersChromePrintersListSecurity) -> operations.AdminCustomersChromePrintersListResponse:
        r"""List printers configs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintersListRequest, base_url, '/admin/directory/v1/{parent}/chrome/printers', request)
        
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPrintersResponse])
                res.list_printers_response = out

        return res

    def admin_customers_chrome_printers_list_printer_models(self, request: operations.AdminCustomersChromePrintersListPrinterModelsRequest, security: operations.AdminCustomersChromePrintersListPrinterModelsSecurity) -> operations.AdminCustomersChromePrintersListPrinterModelsResponse:
        r"""Lists the supported printer models."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminCustomersChromePrintersListPrinterModelsRequest, base_url, '/admin/directory/v1/{parent}/chrome/printers:listPrinterModels', request)
        
        query_params = utils.get_query_params(operations.AdminCustomersChromePrintersListPrinterModelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminCustomersChromePrintersListPrinterModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPrinterModelsResponse])
                res.list_printer_models_response = out

        return res

    def directory_customers_get(self, request: operations.DirectoryCustomersGetRequest, security: operations.DirectoryCustomersGetSecurity) -> operations.DirectoryCustomersGetResponse:
        r"""Retrieves a customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryCustomersGetRequest, base_url, '/admin/directory/v1/customers/{customerKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryCustomersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryCustomersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out

        return res

    def directory_customers_patch(self, request: operations.DirectoryCustomersPatchRequest, security: operations.DirectoryCustomersPatchSecurity) -> operations.DirectoryCustomersPatchResponse:
        r"""Patches a customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryCustomersPatchRequest, base_url, '/admin/directory/v1/customers/{customerKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryCustomersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryCustomersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out

        return res

    def directory_customers_update(self, request: operations.DirectoryCustomersUpdateRequest, security: operations.DirectoryCustomersUpdateSecurity) -> operations.DirectoryCustomersUpdateResponse:
        r"""Updates a customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryCustomersUpdateRequest, base_url, '/admin/directory/v1/customers/{customerKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryCustomersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryCustomersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out

        return res

    