/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APICredentialsMerchantLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of API credentials
   *
   * @remarks
   * Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—API credentials read and write
   */
  getMerchantsMerchantIdApiCredentials(
    req: operations.GetMerchantsMerchantIdApiCredentialsRequest,
    security: operations.GetMerchantsMerchantIdApiCredentialsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdApiCredentialsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdApiCredentialsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/apiCredentials",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdApiCredentialsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdApiCredentialsResponse =
        new operations.GetMerchantsMerchantIdApiCredentialsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMerchantApiCredentialsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMerchantApiCredentialsResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an API credential
   *
   * @remarks
   * Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—API credentials read and write
   */
  getMerchantsMerchantIdApiCredentialsApiCredentialId(
    req: operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdRequest,
    security: operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/apiCredentials/{apiCredentialId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdResponse =
        new operations.GetMerchantsMerchantIdApiCredentialsApiCredentialIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCredential = utils.objectToClass(
              httpRes?.data,
              shared.ApiCredential
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an API credential
   *
   * @remarks
   * Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—API credentials read and write
   */
  patchMerchantsMerchantIdApiCredentialsApiCredentialId(
    req: operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdRequest,
    security: operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/apiCredentials/{apiCredentialId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateMerchantApiCredentialRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdResponse =
        new operations.PatchMerchantsMerchantIdApiCredentialsApiCredentialIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCredential = utils.objectToClass(
              httpRes?.data,
              shared.ApiCredential
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an API credential
   *
   * @remarks
   * Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.
   *
   * The response includes the:
   * * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.
   * * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.
   * * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.
   *
   * > Make sure you store the API key securely in your system. You won't be able to retrieve it later.
   *
   * If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—API credentials read and write
   */
  postMerchantsMerchantIdApiCredentials(
    req: operations.PostMerchantsMerchantIdApiCredentialsRequest,
    security: operations.PostMerchantsMerchantIdApiCredentialsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdApiCredentialsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMerchantsMerchantIdApiCredentialsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/apiCredentials",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createMerchantApiCredentialRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostMerchantsMerchantIdApiCredentialsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdApiCredentialsResponse =
        new operations.PostMerchantsMerchantIdApiCredentialsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApiCredentialResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateApiCredentialResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
