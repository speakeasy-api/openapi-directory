/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class PastMeetingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class PastMeetingsRequest extends SpeakeasyBase {
  /**
   * The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
   *
   * @remarks
   *
   * While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: number;
}

export class PastMeetingsMeetingInstancesMeetings extends SpeakeasyBase {
  /**
   * Start time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting UUID. Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * List of Meetings
 */
export class PastMeetingsMeetingInstances extends SpeakeasyBase {
  /**
   * List of ended meeting instances.
   */
  @SpeakeasyMetadata({ elemType: PastMeetingsMeetingInstancesMeetings })
  @Expose({ name: "meetings" })
  @Type(() => PastMeetingsMeetingInstancesMeetings)
  meetings?: PastMeetingsMeetingInstancesMeetings[];
}

export class PastMeetingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * List of ended meeting instances returned.
   */
  @SpeakeasyMetadata()
  meetingInstances?: PastMeetingsMeetingInstances;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
