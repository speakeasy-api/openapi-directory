"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accesskeycredentials as shared_accesskeycredentials
from ..shared import status as shared_status
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AwsSourceDetailsStateEnum(str, Enum):
    r"""Output only. State of the source as determined by the health check."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsSourceDetails:
    r"""AwsSourceDetails message describes a specific source details for the AWS source type."""
    
    access_key_creds: Optional[shared_accesskeycredentials.AccessKeyCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessKeyCreds'), 'exclude': lambda f: f is None }})
    r"""Message describing AWS Credentials using access key id and secret."""  
    aws_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsRegion'), 'exclude': lambda f: f is None }})
    r"""Immutable. The AWS region that the source VMs will be migrated from."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    inventory_security_group_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySecurityGroupNames'), 'exclude': lambda f: f is None }})
    r"""AWS security group names to limit the scope of the source inventory."""  
    inventory_tag_list: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryTagList'), 'exclude': lambda f: f is None }})
    r"""AWS resource tags to limit the scope of the source inventory."""  
    migration_resources_user_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrationResourcesUserTags'), 'exclude': lambda f: f is None }})
    r"""User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`."""  
    public_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp'), 'exclude': lambda f: f is None }})
    r"""Output only. The source's public IP. All communication initiated by this source will originate from this IP."""  
    state: Optional[AwsSourceDetailsStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the source as determined by the health check."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsSourceDetailsInput:
    r"""AwsSourceDetails message describes a specific source details for the AWS source type."""
    
    access_key_creds: Optional[shared_accesskeycredentials.AccessKeyCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessKeyCreds'), 'exclude': lambda f: f is None }})
    r"""Message describing AWS Credentials using access key id and secret."""  
    aws_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsRegion'), 'exclude': lambda f: f is None }})
    r"""Immutable. The AWS region that the source VMs will be migrated from."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    inventory_security_group_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySecurityGroupNames'), 'exclude': lambda f: f is None }})
    r"""AWS security group names to limit the scope of the source inventory."""  
    inventory_tag_list: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryTagList'), 'exclude': lambda f: f is None }})
    r"""AWS resource tags to limit the scope of the source inventory."""  
    migration_resources_user_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrationResourcesUserTags'), 'exclude': lambda f: f is None }})
    r"""User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`."""  
    