/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetlasteventofSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  codeOauth?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  passwordOauth?: string;
}

export class GetlasteventofRequest extends SpeakeasyBase {
  /**
   * ID of the Home you're interested in
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=home_id",
  })
  homeId: string;

  /**
   * Number of events to retrieve. Default is 30.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Your request will retrieve all events of the given home until the most recent event of the given person
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=person_id",
  })
  personId: string;
}

export class GetlasteventofResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  naWelcomeEventResponse?: shared.NAWelcomeEventResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
