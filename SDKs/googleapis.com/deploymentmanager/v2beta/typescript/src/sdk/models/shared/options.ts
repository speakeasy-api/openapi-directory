/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AsyncOptions } from "./asyncoptions";
import { InputMapping } from "./inputmapping";
import { ValidationOptions } from "./validationoptions";
import { Expose, Type } from "class-transformer";

/**
 * Options allows customized resource handling by Deployment Manager.
 */
export class Options extends SpeakeasyBase {
  /**
   * Options regarding how to thread async requests.
   */
  @SpeakeasyMetadata({ elemType: AsyncOptions })
  @Expose({ name: "asyncOptions" })
  @Type(() => AsyncOptions)
  asyncOptions?: AsyncOptions[];

  /**
   * The mappings that apply for requests.
   */
  @SpeakeasyMetadata({ elemType: InputMapping })
  @Expose({ name: "inputMappings" })
  @Type(() => InputMapping)
  inputMappings?: InputMapping[];

  /**
   * Options for how to validate and process properties on a resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validationOptions" })
  @Type(() => ValidationOptions)
  validationOptions?: ValidationOptions;

  /**
   * Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "virtualProperties" })
  virtualProperties?: string;
}
