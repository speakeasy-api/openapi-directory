"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudretailv2alphaproduct as shared_googlecloudretailv2alphaproduct
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRetailV2alphaSearchResponseSearchResult:
    r"""Represents the search results."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Product.id of the searched Product."""  
    matching_variant_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchingVariantCount'), 'exclude': lambda f: f is None }})
    r"""The count of matched variant Products."""  
    matching_variant_fields: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchingVariantFields'), 'exclude': lambda f: f is None }})
    r"""If a variant Product matches the search query, this map indicates which Product fields are matched. The key is the Product.name, the value is a field mask of the matched Product fields. If matched attributes cannot be determined, this map will be empty. For example, a key \\"sku1\\" with field mask \\"products.color_info\\" indicates there is a match between \\"sku1\\" ColorInfo and the query."""  
    personal_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('personalLabels'), 'exclude': lambda f: f is None }})
    r"""Specifies previous events related to this product for this user based on UserEvent with same SearchRequest.visitor_id or UserInfo.user_id. This is set only when SearchRequest.PersonalizationSpec.mode is SearchRequest.PersonalizationSpec.Mode.AUTO. Possible values: * `purchased`: Indicates that this product has been purchased before."""  
    product: Optional[shared_googlecloudretailv2alphaproduct.GoogleCloudRetailV2alphaProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})
    r"""Product captures all metadata information of items to be recommended or searched."""  
    variant_rollup_values: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variantRollupValues'), 'exclude': lambda f: f is None }})
    r"""The rollup matching variant Product attributes. The key is one of the SearchRequest.variant_rollup_keys. The values are the merged and de-duplicated Product attributes. Notice that the rollup values are respect filter. For example, when filtering by \\"colorFamilies:ANY(\\\"red\\\")\\" and rollup \\"colorFamilies\\", only \\"red\\" is returned. For textual and numerical attributes, the rollup values is a list of string or double values with type google.protobuf.ListValue. For example, if there are two variants with colors \\"red\\" and \\"blue\\", the rollup values are { key: \\"colorFamilies\\" value { list_value { values { string_value: \\"red\\" } values { string_value: \\"blue\\" } } } } For FulfillmentInfo, the rollup values is a double value with type google.protobuf.Value. For example, `{key: \\"pickupInStore.store1\\" value { number_value: 10 }}` means a there are 10 variants in this product are available in the store \\"store1\\"."""  
    