"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class CommitStatuses:
    r"""Commit statuses provide a way to tag commits with meta data,
    like automated build results.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_repositories_workspace_repo_slug_commit_commit_statuses(self, request: operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest, security: operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse:
        r"""List commit statuses for a commit
        Returns all statuses (e.g. build results) for a specific commit.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses', request)
        
        query_params = utils.get_query_params(operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedCommitstatuses])
                res.paginated_commitstatuses = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_commit_commit_statuses_build_key_(self, request: operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest, security: operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeySecurity) -> operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse:
        r"""Get a build status for a commit
        Returns the specified build status for a commit.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build/{key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.commitstatus = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_statuses(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesResponse:
        r"""List commit statuses for a pull request
        Returns all statuses (e.g. build results) for the given pull
        request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/statuses', request)
        
        query_params = utils.get_query_params(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedCommitstatuses])
                res.paginated_commitstatuses = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_commit_commit_statuses_build(self, request: operations.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequest, security: operations.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse:
        r"""Create a build status for a commit
        Creates a new build status against the specified commit.
        
        If the specified key already exists, the existing status object will
        be overwritten.
        
        Example:
        
        ```
        curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/           -X POST -u jdoe -H 'Content-Type: application/json'           -d '{
            \"key\": \"MY-BUILD\",
            \"state\": \"SUCCESSFUL\",
            \"description\": \"42 tests passed\",
            \"url\": \"https://www.example.org/my-build-result\"
          }'
        ```
        
        When creating a new commit status, you can use a URI template for the URL.
        Templates are URLs that contain variable names that Bitbucket will
        evaluate at runtime whenever the URL is displayed anywhere similar to
        parameter substitution in
        [Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html).
        For example, one could use `https://foo.com/builds/{repository.full_name}`
        which Bitbucket will turn into `https://foo.com/builds/foo/bar` at render time.
        The context variables available are `repository` and `commit`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.commitstatus = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_commit_commit_statuses_build_key_(self, request: operations.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest, security: operations.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeySecurity) -> operations.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse:
        r"""Update a build status for a commit
        Used to update the current status of a build status object on the
        specific commit.
        
        This operation can also be used to change other properties of the
        build status:
        
        * `state`
        * `name`
        * `description`
        * `url`
        * `refname`
        
        The `key` cannot be changed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build/{key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.commitstatus = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    