<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class MergeBranchesByFastForwardResponse
{
    /**
     * BranchDoesNotExistException
     * 
     * @var mixed $branchDoesNotExistException
     */
	
    public mixed $branchDoesNotExistException = null;
    
    /**
     * BranchNameIsTagNameException
     * 
     * @var mixed $branchNameIsTagNameException
     */
	
    public mixed $branchNameIsTagNameException = null;
    
    /**
     * BranchNameRequiredException
     * 
     * @var mixed $branchNameRequiredException
     */
	
    public mixed $branchNameRequiredException = null;
    
    /**
     * CommitDoesNotExistException
     * 
     * @var mixed $commitDoesNotExistException
     */
	
    public mixed $commitDoesNotExistException = null;
    
    /**
     * CommitRequiredException
     * 
     * @var mixed $commitRequiredException
     */
	
    public mixed $commitRequiredException = null;
    
    /**
     * ConcurrentReferenceUpdateException
     * 
     * @var mixed $concurrentReferenceUpdateException
     */
	
    public mixed $concurrentReferenceUpdateException = null;
    
	
    public string $contentType;
    
    /**
     * EncryptionIntegrityChecksFailedException
     * 
     * @var mixed $encryptionIntegrityChecksFailedException
     */
	
    public mixed $encryptionIntegrityChecksFailedException = null;
    
    /**
     * EncryptionKeyAccessDeniedException
     * 
     * @var mixed $encryptionKeyAccessDeniedException
     */
	
    public mixed $encryptionKeyAccessDeniedException = null;
    
    /**
     * EncryptionKeyDisabledException
     * 
     * @var mixed $encryptionKeyDisabledException
     */
	
    public mixed $encryptionKeyDisabledException = null;
    
    /**
     * EncryptionKeyNotFoundException
     * 
     * @var mixed $encryptionKeyNotFoundException
     */
	
    public mixed $encryptionKeyNotFoundException = null;
    
    /**
     * EncryptionKeyUnavailableException
     * 
     * @var mixed $encryptionKeyUnavailableException
     */
	
    public mixed $encryptionKeyUnavailableException = null;
    
    /**
     * InvalidBranchNameException
     * 
     * @var mixed $invalidBranchNameException
     */
	
    public mixed $invalidBranchNameException = null;
    
    /**
     * InvalidCommitException
     * 
     * @var mixed $invalidCommitException
     */
	
    public mixed $invalidCommitException = null;
    
    /**
     * InvalidRepositoryNameException
     * 
     * @var mixed $invalidRepositoryNameException
     */
	
    public mixed $invalidRepositoryNameException = null;
    
    /**
     * InvalidTargetBranchException
     * 
     * @var mixed $invalidTargetBranchException
     */
	
    public mixed $invalidTargetBranchException = null;
    
    /**
     * ManualMergeRequiredException
     * 
     * @var mixed $manualMergeRequiredException
     */
	
    public mixed $manualMergeRequiredException = null;
    
    /**
     * Success
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MergeBranchesByFastForwardOutput $mergeBranchesByFastForwardOutput
     */
	
    public ?\OpenAPI\OpenAPI\Models\Shared\MergeBranchesByFastForwardOutput $mergeBranchesByFastForwardOutput = null;
    
    /**
     * RepositoryDoesNotExistException
     * 
     * @var mixed $repositoryDoesNotExistException
     */
	
    public mixed $repositoryDoesNotExistException = null;
    
    /**
     * RepositoryNameRequiredException
     * 
     * @var mixed $repositoryNameRequiredException
     */
	
    public mixed $repositoryNameRequiredException = null;
    
	
    public int $statusCode;
    
	
    public ?\Psr\Http\Message\ResponseInterface $rawResponse = null;
    
    /**
     * TipsDivergenceExceededException
     * 
     * @var mixed $tipsDivergenceExceededException
     */
	
    public mixed $tipsDivergenceExceededException = null;
    
	public function __construct()
	{
		$this->branchDoesNotExistException = null;
		$this->branchNameIsTagNameException = null;
		$this->branchNameRequiredException = null;
		$this->commitDoesNotExistException = null;
		$this->commitRequiredException = null;
		$this->concurrentReferenceUpdateException = null;
		$this->contentType = "";
		$this->encryptionIntegrityChecksFailedException = null;
		$this->encryptionKeyAccessDeniedException = null;
		$this->encryptionKeyDisabledException = null;
		$this->encryptionKeyNotFoundException = null;
		$this->encryptionKeyUnavailableException = null;
		$this->invalidBranchNameException = null;
		$this->invalidCommitException = null;
		$this->invalidRepositoryNameException = null;
		$this->invalidTargetBranchException = null;
		$this->manualMergeRequiredException = null;
		$this->mergeBranchesByFastForwardOutput = null;
		$this->repositoryDoesNotExistException = null;
		$this->repositoryNameRequiredException = null;
		$this->statusCode = 0;
		$this->rawResponse = null;
		$this->tipsDivergenceExceededException = null;
	}
}
