// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateGlobalClusterActionEnum
type GETCreateGlobalClusterActionEnum string

const (
	GETCreateGlobalClusterActionEnumCreateGlobalCluster GETCreateGlobalClusterActionEnum = "CreateGlobalCluster"
)

func (e *GETCreateGlobalClusterActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateGlobalCluster":
		*e = GETCreateGlobalClusterActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGlobalClusterActionEnum: %s", s)
	}
}

// GETCreateGlobalClusterVersionEnum
type GETCreateGlobalClusterVersionEnum string

const (
	GETCreateGlobalClusterVersionEnumTwoThousandAndFourteen1031 GETCreateGlobalClusterVersionEnum = "2014-10-31"
)

func (e *GETCreateGlobalClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = GETCreateGlobalClusterVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGlobalClusterVersionEnum: %s", s)
	}
}

type GETCreateGlobalClusterRequest struct {
	Action GETCreateGlobalClusterActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating.
	DatabaseName *string `queryParam:"style=form,explode=true,name=DatabaseName"`
	// The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
	DeletionProtection *bool `queryParam:"style=form,explode=true,name=DeletionProtection"`
	// The name of the database engine to be used for this DB cluster.
	Engine *string `queryParam:"style=form,explode=true,name=Engine"`
	// The engine version of the Aurora global database.
	EngineVersion *string `queryParam:"style=form,explode=true,name=EngineVersion"`
	// The cluster identifier of the new global database cluster.
	GlobalClusterIdentifier *string `queryParam:"style=form,explode=true,name=GlobalClusterIdentifier"`
	// The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional.
	SourceDBClusterIdentifier *string `queryParam:"style=form,explode=true,name=SourceDBClusterIdentifier"`
	// The storage encryption setting for the new global database cluster.
	StorageEncrypted  *bool                             `queryParam:"style=form,explode=true,name=StorageEncrypted"`
	Version           GETCreateGlobalClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateGlobalClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
