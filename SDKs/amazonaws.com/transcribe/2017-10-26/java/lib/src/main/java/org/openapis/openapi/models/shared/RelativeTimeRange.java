/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RelativeTimeRange - &lt;p&gt;A time range, in percentage, between two points in your media file.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;StartPercentage&lt;/code&gt; and &lt;code&gt;EndPercentage&lt;/code&gt; to search a custom segment. For example, setting &lt;code&gt;StartPercentage&lt;/code&gt; to 10 and &lt;code&gt;EndPercentage&lt;/code&gt; to 50 only searches for your specified criteria in the audio contained between the 10 percent mark and the 50 percent mark of your media file.&lt;/p&gt; &lt;p&gt;You can use also &lt;code&gt;First&lt;/code&gt; to search from the start of the media file until the time that you specify. Or use &lt;code&gt;Last&lt;/code&gt; to search from the time that you specify until the end of the media file. For example, setting &lt;code&gt;First&lt;/code&gt; to 10 only searches for your specified criteria in the audio contained in the first 10 percent of the media file.&lt;/p&gt; &lt;p&gt;If you prefer to use milliseconds instead of percentage, see .&lt;/p&gt;
 */
public class RelativeTimeRange {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndPercentage")
    public Long endPercentage;
    public RelativeTimeRange withEndPercentage(Long endPercentage) {
        this.endPercentage = endPercentage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("First")
    public Long first;
    public RelativeTimeRange withFirst(Long first) {
        this.first = first;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Last")
    public Long last;
    public RelativeTimeRange withLast(Long last) {
        this.last = last;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartPercentage")
    public Long startPercentage;
    public RelativeTimeRange withStartPercentage(Long startPercentage) {
        this.startPercentage = startPercentage;
        return this;
    }
    
}
