/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Membership - Membership contains information about a member cluster.
 */
public class Membership {
    /**
     * Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authority")
    public Authority authority;
    public Membership withAuthority(Authority authority) {
        this.authority = authority;
        return this;
    }
    
    /**
     * Output only. When the Membership was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Membership withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. When the Membership was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;
    public Membership withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * Optional. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Membership withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    public MembershipEndpoint endpoint;
    public Membership withEndpoint(MembershipEndpoint endpoint) {
        this.endpoint = endpoint;
        return this;
    }
    
    /**
     * Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. For GKE clusters, external_id is managed by the Hub API and updates will be ignored. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalId")
    public String externalId;
    public Membership withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }
    
    /**
     * Optional. The infrastructure type this Membership is running on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infrastructureType")
    public MembershipInfrastructureTypeEnum infrastructureType;
    public Membership withInfrastructureType(MembershipInfrastructureTypeEnum infrastructureType) {
        this.infrastructureType = infrastructureType;
        return this;
    }
    
    /**
     * Optional. GCP labels for this membership.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Membership withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastConnectionTime")
    public String lastConnectionTime;
    public Membership withLastConnectionTime(String lastConnectionTime) {
        this.lastConnectionTime = lastConnectionTime;
        return this;
    }
    
    /**
     * Output only. The full, unique name of this Membership resource in the format `projects/* /locations/* /memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Membership withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * State of the Membership resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public MembershipState state;
    public Membership withState(MembershipState state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueId")
    public String uniqueId;
    public Membership withUniqueId(String uniqueId) {
        this.uniqueId = uniqueId;
        return this;
    }
    
    /**
     * Output only. When the Membership was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Membership withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
