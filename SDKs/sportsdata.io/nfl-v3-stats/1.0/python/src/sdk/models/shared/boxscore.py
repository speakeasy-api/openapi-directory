"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fantasydefensegame as shared_fantasydefensegame
from ..shared import game as shared_game
from ..shared import playerdefense as shared_playerdefense
from ..shared import playerkicking as shared_playerkicking
from ..shared import playerkickpuntreturns as shared_playerkickpuntreturns
from ..shared import playerpassing as shared_playerpassing
from ..shared import playerpunting as shared_playerpunting
from ..shared import playerreceiving as shared_playerreceiving
from ..shared import playerrushing as shared_playerrushing
from ..shared import score as shared_score
from ..shared import scoringdetail as shared_scoringdetail
from ..shared import scoringplay as shared_scoringplay
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BoxScore:
    
    away_defense: Optional[list[shared_playerdefense.PlayerDefense]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayDefense'), 'exclude': lambda f: f is None }})  
    away_fantasy_defense: Optional[shared_fantasydefensegame.FantasyDefenseGame] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayFantasyDefense'), 'exclude': lambda f: f is None }})  
    away_kicking: Optional[list[shared_playerkicking.PlayerKicking]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayKicking'), 'exclude': lambda f: f is None }})  
    away_kick_punt_returns: Optional[list[shared_playerkickpuntreturns.PlayerKickPuntReturns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayKickPuntReturns'), 'exclude': lambda f: f is None }})  
    away_passing: Optional[list[shared_playerpassing.PlayerPassing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayPassing'), 'exclude': lambda f: f is None }})  
    away_punting: Optional[list[shared_playerpunting.PlayerPunting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayPunting'), 'exclude': lambda f: f is None }})  
    away_receiving: Optional[list[shared_playerreceiving.PlayerReceiving]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayReceiving'), 'exclude': lambda f: f is None }})  
    away_rushing: Optional[list[shared_playerrushing.PlayerRushing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayRushing'), 'exclude': lambda f: f is None }})  
    game: Optional[shared_game.Game] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Game'), 'exclude': lambda f: f is None }})  
    home_defense: Optional[list[shared_playerdefense.PlayerDefense]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeDefense'), 'exclude': lambda f: f is None }})  
    home_fantasy_defense: Optional[shared_fantasydefensegame.FantasyDefenseGame] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeFantasyDefense'), 'exclude': lambda f: f is None }})  
    home_kicking: Optional[list[shared_playerkicking.PlayerKicking]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeKicking'), 'exclude': lambda f: f is None }})  
    home_kick_punt_returns: Optional[list[shared_playerkickpuntreturns.PlayerKickPuntReturns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeKickPuntReturns'), 'exclude': lambda f: f is None }})  
    home_passing: Optional[list[shared_playerpassing.PlayerPassing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomePassing'), 'exclude': lambda f: f is None }})  
    home_punting: Optional[list[shared_playerpunting.PlayerPunting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomePunting'), 'exclude': lambda f: f is None }})  
    home_receiving: Optional[list[shared_playerreceiving.PlayerReceiving]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeReceiving'), 'exclude': lambda f: f is None }})  
    home_rushing: Optional[list[shared_playerrushing.PlayerRushing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRushing'), 'exclude': lambda f: f is None }})  
    score: Optional[shared_score.Score] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Score'), 'exclude': lambda f: f is None }})  
    scoring_details: Optional[list[shared_scoringdetail.ScoringDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoringDetails'), 'exclude': lambda f: f is None }})  
    scoring_plays: Optional[list[shared_scoringplay.ScoringPlay]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoringPlays'), 'exclude': lambda f: f is None }})  
    