/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PutEventSelectorsXAmzTargetEnum {
  ComAmazonawsCloudtrailV20131101CloudTrail20131101PutEventSelectors = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutEventSelectors",
}

export class PutEventSelectorsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  putEventSelectorsRequest: shared.PutEventSelectorsRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: PutEventSelectorsXAmzTargetEnum;
}

export class PutEventSelectorsResponse extends SpeakeasyBase {
  /**
   * CloudTrailARNInvalidException
   */
  @SpeakeasyMetadata()
  cloudTrailARNInvalidException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InsufficientDependencyServiceAccessPermissionException
   */
  @SpeakeasyMetadata()
  insufficientDependencyServiceAccessPermissionException?: any;

  /**
   * InvalidEventSelectorsException
   */
  @SpeakeasyMetadata()
  invalidEventSelectorsException?: any;

  /**
   * InvalidHomeRegionException
   */
  @SpeakeasyMetadata()
  invalidHomeRegionException?: any;

  /**
   * InvalidTrailNameException
   */
  @SpeakeasyMetadata()
  invalidTrailNameException?: any;

  /**
   * NoManagementAccountSLRExistsException
   */
  @SpeakeasyMetadata()
  noManagementAccountSLRExistsException?: any;

  /**
   * NotOrganizationMasterAccountException
   */
  @SpeakeasyMetadata()
  notOrganizationMasterAccountException?: any;

  /**
   * OperationNotPermittedException
   */
  @SpeakeasyMetadata()
  operationNotPermittedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putEventSelectorsResponse?: shared.PutEventSelectorsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TrailNotFoundException
   */
  @SpeakeasyMetadata()
  trailNotFoundException?: any;

  /**
   * UnsupportedOperationException
   */
  @SpeakeasyMetadata()
  unsupportedOperationException?: any;
}
