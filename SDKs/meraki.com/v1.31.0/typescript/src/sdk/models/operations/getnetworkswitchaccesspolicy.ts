/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkSwitchAccessPolicyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=accessPolicyNumber",
  })
  accessPolicyNumber: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
 */
export enum GetNetworkSwitchAccessPolicy200ApplicationJSONAccessPolicyTypeEnum {
  EightHundredAndTwo1x = "802.1x",
  HybridAuthentication = "Hybrid authentication",
  MACAuthenticationBypass = "MAC authentication bypass",
}

/**
 * Supports either 'both' or 'inbound'. Set to 'inbound' to allow unauthorized egress on the switchport. Set to 'both' to control both traffic directions with authorization. Defaults to 'both'
 */
export enum GetNetworkSwitchAccessPolicy200ApplicationJSONDot1xControlDirectionEnum {
  Both = "both",
  Inbound = "inbound",
}

/**
 * 802.1x Settings
 */
export class GetNetworkSwitchAccessPolicy200ApplicationJSONDot1x extends SpeakeasyBase {
  /**
   * Supports either 'both' or 'inbound'. Set to 'inbound' to allow unauthorized egress on the switchport. Set to 'both' to control both traffic directions with authorization. Defaults to 'both'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "controlDirection" })
  controlDirection?: GetNetworkSwitchAccessPolicy200ApplicationJSONDot1xControlDirectionEnum;
}

/**
 * Choose the Host Mode for the access policy.
 */
export enum GetNetworkSwitchAccessPolicy200ApplicationJSONHostModeEnum {
  MultiAuth = "Multi-Auth",
  MultiDomain = "Multi-Domain",
  MultiHost = "Multi-Host",
  SingleHost = "Single-Host",
}

/**
 * Critical auth settings for when authentication is rejected by the RADIUS server
 */
export class GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusCriticalAuth extends SpeakeasyBase {
  /**
   * VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataVlanId" })
  dataVlanId?: number;

  /**
   * Enable to suspend port bounce when RADIUS servers are unreachable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suspendPortBounce" })
  suspendPortBounce?: boolean;

  /**
   * VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voiceVlanId" })
  voiceVlanId?: number;
}

/**
 * Object for RADIUS Settings
 */
export class GetNetworkSwitchAccessPolicy200ApplicationJSONRadius extends SpeakeasyBase {
  /**
   * Critical auth settings for when authentication is rejected by the RADIUS server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "criticalAuth" })
  @Type(() => GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusCriticalAuth)
  criticalAuth?: GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusCriticalAuth;

  /**
   * VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failedAuthVlanId" })
  failedAuthVlanId?: number;

  /**
   * Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reAuthenticationInterval" })
  reAuthenticationInterval?: number;
}

export class GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusAccountingServers extends SpeakeasyBase {
  /**
   * Public IP address of the RADIUS accounting server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * UDP port that the RADIUS Accounting server listens on for access requests
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: number;
}

export class GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusServers extends SpeakeasyBase {
  /**
   * Public IP address of the RADIUS server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * UDP port that the RADIUS server listens on for access requests
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: number;
}

/**
 * Successful operation
 */
export class GetNetworkSwitchAccessPolicy200ApplicationJSON extends SpeakeasyBase {
  /**
   * Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessPolicyType" })
  accessPolicyType?: GetNetworkSwitchAccessPolicy200ApplicationJSONAccessPolicyTypeEnum;

  /**
   * 802.1x Settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dot1x" })
  @Type(() => GetNetworkSwitchAccessPolicy200ApplicationJSONDot1x)
  dot1x?: GetNetworkSwitchAccessPolicy200ApplicationJSONDot1x;

  /**
   * ID for the guest VLAN allow unauthorized devices access to limited network resources
   */
  @SpeakeasyMetadata()
  @Expose({ name: "guestVlanId" })
  guestVlanId?: number;

  /**
   * Choose the Host Mode for the access policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostMode" })
  hostMode?: GetNetworkSwitchAccessPolicy200ApplicationJSONHostModeEnum;

  /**
   * Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "increaseAccessSpeed" })
  increaseAccessSpeed?: boolean;

  /**
   * Name of the access policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Object for RADIUS Settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radius" })
  @Type(() => GetNetworkSwitchAccessPolicy200ApplicationJSONRadius)
  radius?: GetNetworkSwitchAccessPolicy200ApplicationJSONRadius;

  /**
   * Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radiusAccountingEnabled" })
  radiusAccountingEnabled?: boolean;

  /**
   * List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusAccountingServers,
  })
  @Expose({ name: "radiusAccountingServers" })
  @Type(
    () => GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusAccountingServers
  )
  radiusAccountingServers?: GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusAccountingServers[];

  /**
   * Change of authentication for RADIUS re-authentication and disconnection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radiusCoaSupportEnabled" })
  radiusCoaSupportEnabled?: boolean;

  /**
   * Acceptable values are `""` for None, or `"11"` for Group Policies ACL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radiusGroupAttribute" })
  radiusGroupAttribute?: string;

  /**
   * List of RADIUS servers to require connecting devices to authenticate against before granting network access
   */
  @SpeakeasyMetadata({
    elemType: GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusServers,
  })
  @Expose({ name: "radiusServers" })
  @Type(() => GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusServers)
  radiusServers?: GetNetworkSwitchAccessPolicy200ApplicationJSONRadiusServers[];

  /**
   * If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radiusTestingEnabled" })
  radiusTestingEnabled?: boolean;

  /**
   * Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlRedirectWalledGardenEnabled" })
  urlRedirectWalledGardenEnabled?: boolean;

  /**
   * IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlRedirectWalledGardenRanges" })
  urlRedirectWalledGardenRanges?: string[];

  /**
   * CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voiceVlanClients" })
  voiceVlanClients?: boolean;
}

export class GetNetworkSwitchAccessPolicyResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkSwitchAccessPolicy200ApplicationJSONObject?: GetNetworkSwitchAccessPolicy200ApplicationJSON;
}
