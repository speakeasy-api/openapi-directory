/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * &lt;p&gt;AppConfig Data provides the data plane APIs your application uses to retrieve configuration data. Here's how it works:&lt;/p&gt; &lt;p&gt;Your application retrieves configuration data by first establishing a configuration session using the AppConfig Data &lt;a&gt;StartConfigurationSession&lt;/a&gt; API action. Your session's client then makes periodic calls to &lt;a&gt;GetLatestConfiguration&lt;/a&gt; to check for and retrieve the latest data available.&lt;/p&gt; &lt;p&gt;When calling &lt;code&gt;StartConfigurationSession&lt;/code&gt;, your code sends the following information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Identifiers (ID or name) of an AppConfig application, environment, and configuration profile that the session tracks.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) The minimum amount of time the session's client must wait between calls to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In response, AppConfig provides an &lt;code&gt;InitialConfigurationToken&lt;/code&gt; to be given to the session's client and used the first time it calls &lt;code&gt;GetLatestConfiguration&lt;/code&gt; for that session.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This token should only be used once in your first call to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;. You &lt;i&gt;must&lt;/i&gt; use the new token in the &lt;code&gt;GetLatestConfiguration&lt;/code&gt; response (&lt;code&gt;NextPollConfigurationToken&lt;/code&gt;) in each subsequent call to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;When calling &lt;code&gt;GetLatestConfiguration&lt;/code&gt;, your client code sends the most recent &lt;code&gt;ConfigurationToken&lt;/code&gt; value it has and receives in response:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NextPollConfigurationToken&lt;/code&gt;: the &lt;code&gt;ConfigurationToken&lt;/code&gt; value to use on the next call to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NextPollIntervalInSeconds&lt;/code&gt;: the duration the client should wait before making its next call to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;. This duration may vary over the course of the session, so it should be used instead of the value sent on the &lt;code&gt;StartConfigurationSession&lt;/code&gt; call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The configuration: the latest data intended for the session. This may be empty if the client already has the latest version of the configuration.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;InitialConfigurationToken&lt;/code&gt; and &lt;code&gt;NextPollConfigurationToken&lt;/code&gt; should only be used once. To support long poll use cases, the tokens are valid for up to 24 hours. If a &lt;code&gt;GetLatestConfiguration&lt;/code&gt; call uses an expired token, the system returns &lt;code&gt;BadRequestException&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information and to view example CLI commands that show how to retrieve a configuration using the AppConfig Data &lt;code&gt;StartConfigurationSession&lt;/code&gt; and &lt;code&gt;GetLatestConfiguration&lt;/code&gt; API actions, see &lt;a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration"&gt;Retrieving the configuration&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;.&lt;/p&gt;
 * https://docs.aws.amazon.com/appconfigdata/ - Amazon Web Services documentation
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * The AWS AppConfig Data multi-region endpoint
         */
        "http://appconfigdata.{region}.amazonaws.com",
        /**
         * The AWS AppConfig Data multi-region endpoint
         */
        "https://appconfigdata.{region}.amazonaws.com",
        /**
         * The AWS AppConfig Data endpoint for China (Beijing) and China (Ningxia)
         */
        "http://appconfigdata.{region}.amazonaws.com.cn",
        /**
         * The AWS AppConfig Data endpoint for China (Beijing) and China (Ningxia)
         */
        "https://appconfigdata.{region}.amazonaws.com.cn",
	};
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * &lt;p&gt;Retrieves the latest deployed configuration. This API may return empty configuration data if the client already has the latest version. For more information about this API action and to view example CLI commands that show how to use it with the &lt;a&gt;StartConfigurationSession&lt;/a&gt; API action, see &lt;a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration"&gt;Retrieving the configuration&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;Note the following important information.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Each configuration token is only valid for one call to &lt;code&gt;GetLatestConfiguration&lt;/code&gt;. The &lt;code&gt;GetLatestConfiguration&lt;/code&gt; response includes a &lt;code&gt;NextPollConfigurationToken&lt;/code&gt; that should always replace the token used for the just-completed call in preparation for the next one. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetLatestConfiguration&lt;/code&gt; is a priced call. For more information, see &lt;a href="https://aws.amazon.com/systems-manager/pricing/"&gt;Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetLatestConfigurationResponse getLatestConfiguration(org.openapis.openapi.models.operations.GetLatestConfigurationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/configuration#configuration_token");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetLatestConfigurationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetLatestConfigurationResponse res = new org.openapis.openapi.models.operations.GetLatestConfigurationResponse() {{
            getLatestConfigurationResponse = null;
            throttlingException = null;
            resourceNotFoundException = null;
            badRequestException = null;
            internalServerException = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetLatestConfigurationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetLatestConfigurationResponse.class);
                res.getLatestConfigurationResponse = out;
            }
        }
        else if (httpRes.statusCode() == 480) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.throttlingException = out;
            }
        }
        else if (httpRes.statusCode() == 481) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.resourceNotFoundException = out;
            }
        }
        else if (httpRes.statusCode() == 482) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.badRequestException = out;
            }
        }
        else if (httpRes.statusCode() == 483) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.internalServerException = out;
            }
        }

        return res;
    }

    /**
     * Starts a configuration session used to retrieve a deployed configuration. For more information about this API action and to view example CLI commands that show how to use it with the &lt;a&gt;GetLatestConfiguration&lt;/a&gt; API action, see &lt;a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration"&gt;Retrieving the configuration&lt;/a&gt; in the &lt;i&gt;AppConfig User Guide&lt;/i&gt;. 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StartConfigurationSessionResponse startConfigurationSession(org.openapis.openapi.models.operations.StartConfigurationSessionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/configurationsessions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StartConfigurationSessionResponse res = new org.openapis.openapi.models.operations.StartConfigurationSessionResponse() {{
            startConfigurationSessionResponse = null;
            throttlingException = null;
            resourceNotFoundException = null;
            badRequestException = null;
            internalServerException = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StartConfigurationSessionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StartConfigurationSessionResponse.class);
                res.startConfigurationSessionResponse = out;
            }
        }
        else if (httpRes.statusCode() == 480) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.throttlingException = out;
            }
        }
        else if (httpRes.statusCode() == 481) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.resourceNotFoundException = out;
            }
        }
        else if (httpRes.statusCode() == 482) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.badRequestException = out;
            }
        }
        else if (httpRes.statusCode() == 483) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.internalServerException = out;
            }
        }

        return res;
    }
}