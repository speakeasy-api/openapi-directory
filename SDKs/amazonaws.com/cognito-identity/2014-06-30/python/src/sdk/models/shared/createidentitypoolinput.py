"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cognitoidentityprovider as shared_cognitoidentityprovider
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateIdentityPoolInput:
    r"""Input to the CreateIdentityPool action."""
    
    allow_unauthenticated_identities: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowUnauthenticatedIdentities') }})  
    identity_pool_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolName') }})  
    allow_classic_flow: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowClassicFlow'), 'exclude': lambda f: f is None }})  
    cognito_identity_providers: Optional[list[shared_cognitoidentityprovider.CognitoIdentityProvider]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CognitoIdentityProviders'), 'exclude': lambda f: f is None }})  
    developer_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeveloperProviderName'), 'exclude': lambda f: f is None }})  
    identity_pool_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolTags'), 'exclude': lambda f: f is None }})  
    open_id_connect_provider_ar_ns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIdConnectProviderARNs'), 'exclude': lambda f: f is None }})  
    saml_provider_ar_ns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SamlProviderARNs'), 'exclude': lambda f: f is None }})  
    supported_login_providers: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedLoginProviders'), 'exclude': lambda f: f is None }})  
    