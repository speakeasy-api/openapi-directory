/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { StreamViewTypeEnum } from "./streamviewtypeenum";
import { Expose, Transform } from "class-transformer";

/**
 * A description of a single data modification that was performed on an item in a DynamoDB table.
 */
export class StreamRecord extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApproximateCreationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  approximateCreationDateTime?: Date;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "Keys" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  keys?: Record<string, AttributeValue>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "NewImage" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  newImage?: Record<string, AttributeValue>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "OldImage" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  oldImage?: Record<string, AttributeValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "SequenceNumber" })
  sequenceNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SizeBytes" })
  sizeBytes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamViewType" })
  streamViewType?: StreamViewTypeEnum;
}
