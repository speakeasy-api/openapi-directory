// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CorpPassFlowTypeEnum - The CorpPass flow type.
type CorpPassFlowTypeEnum string

const (
	CorpPassFlowTypeEnumCorppassFlowRedirect CorpPassFlowTypeEnum = "corppass_flow_redirect"
	CorpPassFlowTypeEnumCorppassFlowEmail    CorpPassFlowTypeEnum = "corppass_flow_email"
)

func (e *CorpPassFlowTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "corppass_flow_redirect":
		fallthrough
	case "corppass_flow_email":
		*e = CorpPassFlowTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CorpPassFlowTypeEnum: %s", s)
	}
}

// CorpPassCorpPassStatusEnum - The status of the CorpPass process.
type CorpPassCorpPassStatusEnum string

const (
	CorpPassCorpPassStatusEnumCorppassNoStatus  CorpPassCorpPassStatusEnum = "corppass_no_status,"
	CorpPassCorpPassStatusEnumCorppassInitiated CorpPassCorpPassStatusEnum = "corppass_initiated,"
	CorpPassCorpPassStatusEnumCorppassCancelled CorpPassCorpPassStatusEnum = "corppass_cancelled,"
	CorpPassCorpPassStatusEnumCorppassFailed    CorpPassCorpPassStatusEnum = "corppass_failed,"
	CorpPassCorpPassStatusEnumCorppassSucceeded CorpPassCorpPassStatusEnum = "corppass_succeeded"
)

func (e *CorpPassCorpPassStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "corppass_no_status,":
		fallthrough
	case "corppass_initiated,":
		fallthrough
	case "corppass_cancelled,":
		fallthrough
	case "corppass_failed,":
		fallthrough
	case "corppass_succeeded":
		*e = CorpPassCorpPassStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CorpPassCorpPassStatusEnum: %s", s)
	}
}

type CorpPass struct {
	// The URL the CorpPass system will redirect to in case of a failure to perform identity verfication.
	ClientRedirectFailURL *string `json:"client_redirect_fail_url,omitempty"`
	// The URL the CorpPass system will redirect to in case of successful identity verfication.
	ClientRedirectSuccessURL *string `json:"client_redirect_success_url,omitempty"`
	// The CorpPass redirect URL.
	CorppassURL *string `json:"corppass_url,omitempty"`
	// Whether or not the CorpPass flow is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The CorpPass flow type.
	FlowType *CorpPassFlowTypeEnum `json:"flow_type,omitempty"`
	// The email of the person who is going to perform the CorpPass process.
	SignerEmail *string `json:"signer_email,omitempty"`
	// The name of the person who is going to perform the CorpPass process.
	SignerName *string `json:"signer_name,omitempty"`
	// Whether or not CorpPass is being simulated.
	SimulateCorppass *bool `json:"simulate_corppass,omitempty"`
	// The status of the CorpPass process.
	Status *CorpPassCorpPassStatusEnum `json:"status,omitempty"`
}
