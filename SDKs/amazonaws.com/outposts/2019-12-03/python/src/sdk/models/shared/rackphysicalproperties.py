"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fiberopticcabletype_enum as shared_fiberopticcabletype_enum
from ..shared import maximumsupportedweightlbs_enum as shared_maximumsupportedweightlbs_enum
from ..shared import opticalstandard_enum as shared_opticalstandard_enum
from ..shared import powerconnector_enum as shared_powerconnector_enum
from ..shared import powerdrawkva_enum as shared_powerdrawkva_enum
from ..shared import powerfeeddrop_enum as shared_powerfeeddrop_enum
from ..shared import powerphase_enum as shared_powerphase_enum
from ..shared import uplinkcount_enum as shared_uplinkcount_enum
from ..shared import uplinkgbps_enum as shared_uplinkgbps_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RackPhysicalProperties:
    r"""Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href=\\"https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist\\">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide."""
    
    fiber_optic_cable_type: Optional[shared_fiberopticcabletype_enum.FiberOpticCableTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FiberOpticCableType'), 'exclude': lambda f: f is None }})  
    maximum_supported_weight_lbs: Optional[shared_maximumsupportedweightlbs_enum.MaximumSupportedWeightLbsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumSupportedWeightLbs'), 'exclude': lambda f: f is None }})  
    optical_standard: Optional[shared_opticalstandard_enum.OpticalStandardEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpticalStandard'), 'exclude': lambda f: f is None }})  
    power_connector: Optional[shared_powerconnector_enum.PowerConnectorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerConnector'), 'exclude': lambda f: f is None }})  
    power_draw_kva: Optional[shared_powerdrawkva_enum.PowerDrawKvaEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerDrawKva'), 'exclude': lambda f: f is None }})  
    power_feed_drop: Optional[shared_powerfeeddrop_enum.PowerFeedDropEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFeedDrop'), 'exclude': lambda f: f is None }})  
    power_phase: Optional[shared_powerphase_enum.PowerPhaseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerPhase'), 'exclude': lambda f: f is None }})  
    uplink_count: Optional[shared_uplinkcount_enum.UplinkCountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkCount'), 'exclude': lambda f: f is None }})  
    uplink_gbps: Optional[shared_uplinkgbps_enum.UplinkGbpsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkGbps'), 'exclude': lambda f: f is None }})  
    