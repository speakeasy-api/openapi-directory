"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifySubnetAttributeActionEnum(str, Enum):
    MODIFY_SUBNET_ATTRIBUTE = 'ModifySubnetAttribute'


@dataclasses.dataclass
class GETModifySubnetAttributeAssignIpv6AddressOnCreation:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeDisableLniAtDeviceIndex:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeEnableDns64:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeMapPublicIPOnLaunch:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    
class GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum(str, Enum):
    r"""The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name)."""
    IP_NAME = 'ip-name'
    RESOURCE_NAME = 'resource-name'

class GETModifySubnetAttributeVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifySubnetAttributeRequest:
    
    action: GETModifySubnetAttributeActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    subnet_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SubnetId', 'style': 'form', 'explode': True }})
    r"""The ID of the subnet."""  
    version: GETModifySubnetAttributeVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    assign_ipv6_address_on_creation: Optional[GETModifySubnetAttributeAssignIpv6AddressOnCreation] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AssignIpv6AddressOnCreation', 'style': 'form', 'explode': True }})
    r"""<p>Specify <code>true</code> to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). </p> <p>If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version <code>2016-11-15</code> or later of the Amazon EC2 API.</p>"""  
    customer_owned_ipv4_pool: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CustomerOwnedIpv4Pool', 'style': 'form', 'explode': True }})
    r"""<p>The customer-owned IPv4 address pool associated with the subnet.</p> <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p>"""  
    disable_lni_at_device_index: Optional[GETModifySubnetAttributeDisableLniAtDeviceIndex] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DisableLniAtDeviceIndex', 'style': 'form', 'explode': True }})
    r"""Specify <code>true</code> to indicate that local network interfaces at the current position should be disabled."""  
    enable_dns64: Optional[GETModifySubnetAttributeEnableDns64] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableDns64', 'style': 'form', 'explode': True }})
    r"""Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations."""  
    enable_lni_at_device_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableLniAtDeviceIndex', 'style': 'form', 'explode': True }})
    r"""Indicates the device position for local network interfaces in this subnet. For example, <code>1</code> indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0)."""  
    enable_resource_name_dns_aaaa_record_on_launch: Optional[GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableResourceNameDnsAAAARecordOnLaunch', 'style': 'form', 'explode': True }})
    r"""Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records."""  
    enable_resource_name_dns_a_record_on_launch: Optional[GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableResourceNameDnsARecordOnLaunch', 'style': 'form', 'explode': True }})
    r"""Indicates whether to respond to DNS queries for instance hostnames with DNS A records."""  
    map_customer_owned_ip_on_launch: Optional[GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MapCustomerOwnedIpOnLaunch', 'style': 'form', 'explode': True }})
    r"""<p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.</p> <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p>"""  
    map_public_ip_on_launch: Optional[GETModifySubnetAttributeMapPublicIPOnLaunch] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MapPublicIpOnLaunch', 'style': 'form', 'explode': True }})
    r"""Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address."""  
    private_dns_hostname_type_on_launch: Optional[GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PrivateDnsHostnameTypeOnLaunch', 'style': 'form', 'explode': True }})
    r"""The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name)."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifySubnetAttributeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    