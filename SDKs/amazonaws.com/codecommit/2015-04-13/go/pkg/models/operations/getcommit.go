// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCommitXAmzTargetEnum
type GetCommitXAmzTargetEnum string

const (
	GetCommitXAmzTargetEnumCodeCommit20150413GetCommit GetCommitXAmzTargetEnum = "CodeCommit_20150413.GetCommit"
)

func (e GetCommitXAmzTargetEnum) ToPointer() *GetCommitXAmzTargetEnum {
	return &e
}

func (e *GetCommitXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.GetCommit":
		*e = GetCommitXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitXAmzTargetEnum: %v", v)
	}
}

type GetCommitRequest struct {
	GetCommitInput    shared.GetCommitInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetCommitXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCommitResponse struct {
	// CommitIdDoesNotExistException
	CommitIDDoesNotExistException interface{}
	// CommitIdRequiredException
	CommitIDRequiredException interface{}
	ContentType               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// Success
	GetCommitOutput *shared.GetCommitOutput
	// InvalidCommitIdException
	InvalidCommitIDException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
