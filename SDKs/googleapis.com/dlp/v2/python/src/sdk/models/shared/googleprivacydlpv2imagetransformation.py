"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2color as shared_googleprivacydlpv2color
from ..shared import googleprivacydlpv2selectedinfotypes as shared_googleprivacydlpv2selectedinfotypes
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2ImageTransformation:
    r"""Configuration for determining how redaction of images should occur."""
    
    all_info_types: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allInfoTypes'), 'exclude': lambda f: f is None }})
    r"""Apply transformation to all findings."""  
    all_text: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allText'), 'exclude': lambda f: f is None }})
    r"""Apply to all text."""  
    redaction_color: Optional[shared_googleprivacydlpv2color.GooglePrivacyDlpV2Color] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactionColor'), 'exclude': lambda f: f is None }})
    r"""Represents a color in the RGB color space."""  
    selected_info_types: Optional[shared_googleprivacydlpv2selectedinfotypes.GooglePrivacyDlpV2SelectedInfoTypes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedInfoTypes'), 'exclude': lambda f: f is None }})
    r"""Apply transformation to the selected info_types."""  
    