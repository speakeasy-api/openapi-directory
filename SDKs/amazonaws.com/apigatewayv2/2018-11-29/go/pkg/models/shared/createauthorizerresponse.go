// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateAuthorizerResponseAuthorizerTypeEnum - The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
type CreateAuthorizerResponseAuthorizerTypeEnum string

const (
	CreateAuthorizerResponseAuthorizerTypeEnumRequest CreateAuthorizerResponseAuthorizerTypeEnum = "REQUEST"
	CreateAuthorizerResponseAuthorizerTypeEnumJwt     CreateAuthorizerResponseAuthorizerTypeEnum = "JWT"
)

func (e *CreateAuthorizerResponseAuthorizerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REQUEST":
		fallthrough
	case "JWT":
		*e = CreateAuthorizerResponseAuthorizerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAuthorizerResponseAuthorizerTypeEnum: %s", s)
	}
}

// CreateAuthorizerResponseJwtConfiguration - Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
type CreateAuthorizerResponseJwtConfiguration struct {
	Audience []string `json:"Audience,omitempty"`
	Issuer   *string  `json:"Issuer,omitempty"`
}

// CreateAuthorizerResponse - Success
type CreateAuthorizerResponse struct {
	AuthorizerCredentialsArn       *string                                     `json:"AuthorizerCredentialsArn,omitempty"`
	AuthorizerID                   *string                                     `json:"AuthorizerId,omitempty"`
	AuthorizerPayloadFormatVersion *string                                     `json:"AuthorizerPayloadFormatVersion,omitempty"`
	AuthorizerResultTTLInSeconds   *int64                                      `json:"AuthorizerResultTtlInSeconds,omitempty"`
	AuthorizerType                 *CreateAuthorizerResponseAuthorizerTypeEnum `json:"AuthorizerType,omitempty"`
	AuthorizerURI                  *string                                     `json:"AuthorizerUri,omitempty"`
	EnableSimpleResponses          *bool                                       `json:"EnableSimpleResponses,omitempty"`
	IdentitySource                 []string                                    `json:"IdentitySource,omitempty"`
	IdentityValidationExpression   *string                                     `json:"IdentityValidationExpression,omitempty"`
	JwtConfiguration               *CreateAuthorizerResponseJwtConfiguration   `json:"JwtConfiguration,omitempty"`
	Name                           *string                                     `json:"Name,omitempty"`
}
