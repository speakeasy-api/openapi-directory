"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import ipaddressinterface as shared_ipaddressinterface
from ..shared import nestedipaddress as shared_nestedipaddress
from ..shared import nestedtenant as shared_nestedtenant
from ..shared import nestedvrf as shared_nestedvrf
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class IPAddressFamilyLabelEnum(str, Enum):
    I_PV4 = 'IPv4'
    I_PV6 = 'IPv6'

class IPAddressFamilyValueEnum(str, Enum):
    FOUR = '4'
    SIX = '6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPAddressFamily:
    
    label: IPAddressFamilyLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: IPAddressFamilyValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class IPAddressRoleLabelEnum(str, Enum):
    LOOPBACK = 'Loopback'
    SECONDARY = 'Secondary'
    ANYCAST = 'Anycast'
    VIP = 'VIP'
    VRRP = 'VRRP'
    HSRP = 'HSRP'
    GLBP = 'GLBP'
    CARP = 'CARP'

class IPAddressRoleValueEnum(str, Enum):
    LOOPBACK = 'loopback'
    SECONDARY = 'secondary'
    ANYCAST = 'anycast'
    VIP = 'vip'
    VRRP = 'vrrp'
    HSRP = 'hsrp'
    GLBP = 'glbp'
    CARP = 'carp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPAddressRole:
    
    label: IPAddressRoleLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: IPAddressRoleValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class IPAddressStatusLabelEnum(str, Enum):
    ACTIVE = 'Active'
    RESERVED = 'Reserved'
    DEPRECATED = 'Deprecated'
    DHCP = 'DHCP'

class IPAddressStatusValueEnum(str, Enum):
    ACTIVE = 'active'
    RESERVED = 'reserved'
    DEPRECATED = 'deprecated'
    DHCP = 'dhcp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPAddressStatus:
    
    label: IPAddressStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: IPAddressStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPAddress:
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""IPv4 or IPv6 address (with mask)"""  
    created: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_name'), 'exclude': lambda f: f is None }})
    r"""Hostname or FQDN (not case-sensitive)"""  
    family: Optional[IPAddressFamily] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    interface: Optional[shared_ipaddressinterface.IPAddressInterface] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    nat_inside: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nat_inside'), 'exclude': lambda f: f is None }})  
    nat_outside: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nat_outside'), 'exclude': lambda f: f is None }})  
    role: Optional[IPAddressRole] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    status: Optional[IPAddressStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[shared_nestedtenant.NestedTenant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    vrf: Optional[shared_nestedvrf.NestedVRF] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vrf'), 'exclude': lambda f: f is None }})  
    