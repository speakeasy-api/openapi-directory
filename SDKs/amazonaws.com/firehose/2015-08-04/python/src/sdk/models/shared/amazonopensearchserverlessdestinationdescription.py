"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amazonopensearchserverlessbufferinghints as shared_amazonopensearchserverlessbufferinghints
from ..shared import amazonopensearchserverlessretryoptions as shared_amazonopensearchserverlessretryoptions
from ..shared import amazonopensearchserverlesss3backupmode_enum as shared_amazonopensearchserverlesss3backupmode_enum
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import processingconfiguration as shared_processingconfiguration
from ..shared import s3destinationdescription as shared_s3destinationdescription
from ..shared import vpcconfigurationdescription as shared_vpcconfigurationdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmazonOpenSearchServerlessDestinationDescription:
    r"""The destination description in the Serverless offering for Amazon OpenSearch Service."""
    
    buffering_hints: Optional[shared_amazonopensearchserverlessbufferinghints.AmazonOpenSearchServerlessBufferingHints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})
    r"""Describes the Amazon CloudWatch logging options for your delivery stream."""  
    collection_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CollectionEndpoint'), 'exclude': lambda f: f is None }})  
    index_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexName'), 'exclude': lambda f: f is None }})  
    processing_configuration: Optional[shared_processingconfiguration.ProcessingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingConfiguration'), 'exclude': lambda f: f is None }})
    r"""Describes a data processing configuration."""  
    retry_options: Optional[shared_amazonopensearchserverlessretryoptions.AmazonOpenSearchServerlessRetryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryOptions'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN'), 'exclude': lambda f: f is None }})  
    s3_backup_mode: Optional[shared_amazonopensearchserverlesss3backupmode_enum.AmazonOpenSearchServerlessS3BackupModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupMode'), 'exclude': lambda f: f is None }})  
    s3_destination_description: Optional[shared_s3destinationdescription.S3DestinationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DestinationDescription'), 'exclude': lambda f: f is None }})
    r"""Describes a destination in Amazon S3."""  
    vpc_configuration_description: Optional[shared_vpcconfigurationdescription.VpcConfigurationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfigurationDescription'), 'exclude': lambda f: f is None }})
    r"""The details of the VPC of the Amazon ES destination."""  
    