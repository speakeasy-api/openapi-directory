"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributescores as shared_attributescores
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyzeCommentResponse:
    r"""The comment analysis response message."""
    
    attribute_scores: Optional[dict[str, shared_attributescores.AttributeScores]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributeScores'), 'exclude': lambda f: f is None }})
    r"""Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \\"ATTACK_ON_AUTHOR\\", \\"INFLAMMATORY\\", etc)."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""Same token from the original AnalyzeCommentRequest."""  
    detected_languages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedLanguages'), 'exclude': lambda f: f is None }})
    r"""Contains the languages detected from the text content, sorted in order of likelihood."""  
    languages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages'), 'exclude': lambda f: f is None }})
    r"""The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \\"effective_languages\\". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]"""  
    