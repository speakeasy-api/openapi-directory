"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import engine_enum as shared_engine_enum
from ..shared import languagecode_enum as shared_languagecode_enum
from ..shared import outputformat_enum as shared_outputformat_enum
from ..shared import speechmarktype_enum as shared_speechmarktype_enum
from ..shared import taskstatus_enum as shared_taskstatus_enum
from ..shared import texttype_enum as shared_texttype_enum
from ..shared import voiceid_enum as shared_voiceid_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SynthesisTask:
    r"""SynthesisTask object that provides information about a speech synthesis task."""
    
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    engine: Optional[shared_engine_enum.EngineEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Engine'), 'exclude': lambda f: f is None }})  
    language_code: Optional[shared_languagecode_enum.LanguageCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageCode'), 'exclude': lambda f: f is None }})  
    lexicon_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LexiconNames'), 'exclude': lambda f: f is None }})  
    output_format: Optional[shared_outputformat_enum.OutputFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputFormat'), 'exclude': lambda f: f is None }})  
    output_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputUri'), 'exclude': lambda f: f is None }})  
    request_characters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestCharacters'), 'exclude': lambda f: f is None }})  
    sample_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SampleRate'), 'exclude': lambda f: f is None }})  
    sns_topic_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnsTopicArn'), 'exclude': lambda f: f is None }})  
    speech_mark_types: Optional[list[shared_speechmarktype_enum.SpeechMarkTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpeechMarkTypes'), 'exclude': lambda f: f is None }})  
    task_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskId'), 'exclude': lambda f: f is None }})  
    task_status: Optional[shared_taskstatus_enum.TaskStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskStatus'), 'exclude': lambda f: f is None }})  
    task_status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskStatusReason'), 'exclude': lambda f: f is None }})  
    text_type: Optional[shared_texttype_enum.TextTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TextType'), 'exclude': lambda f: f is None }})  
    voice_id: Optional[shared_voiceid_enum.VoiceIDEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoiceId'), 'exclude': lambda f: f is None }})  
    