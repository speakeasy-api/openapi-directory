/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Finding - A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
public class Finding {
    /**
     * The body of the request that triggered the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public Finding withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * The description of the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Finding withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The URL where the browser lands when the vulnerability is detected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalUrl")
    public String finalUrl;

    public Finding withFinalUrl(String finalUrl) {
        this.finalUrl = finalUrl;
        return this;
    }
    
    /**
     * The type of the Finding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("findingType")
    public FindingFindingTypeEnum findingType;

    public Finding withFindingType(FindingFindingTypeEnum findingType) {
        this.findingType = findingType;
        return this;
    }
    
    /**
     * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameUrl")
    public String frameUrl;

    public Finding withFrameUrl(String frameUrl) {
        this.frameUrl = frameUrl;
        return this;
    }
    
    /**
     * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fuzzedUrl")
    public String fuzzedUrl;

    public Finding withFuzzedUrl(String fuzzedUrl) {
        this.fuzzedUrl = fuzzedUrl;
        return this;
    }
    
    /**
     * The http method of the request that triggered the vulnerability, in uppercase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpMethod")
    public String httpMethod;

    public Finding withHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }
    
    /**
     * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Finding withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Information reported for an outdated library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outdatedLibrary")
    public OutdatedLibrary outdatedLibrary;

    public Finding withOutdatedLibrary(OutdatedLibrary outdatedLibrary) {
        this.outdatedLibrary = outdatedLibrary;
        return this;
    }
    
    /**
     * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reproductionUrl")
    public String reproductionUrl;

    public Finding withReproductionUrl(String reproductionUrl) {
        this.reproductionUrl = reproductionUrl;
        return this;
    }
    
    /**
     * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingId")
    public String trackingId;

    public Finding withTrackingId(String trackingId) {
        this.trackingId = trackingId;
        return this;
    }
    
    /**
     * Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("violatingResource")
    public ViolatingResource violatingResource;

    public Finding withViolatingResource(ViolatingResource violatingResource) {
        this.violatingResource = violatingResource;
        return this;
    }
    
    /**
     * Information about vulnerable or missing HTTP Headers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vulnerableHeaders")
    public VulnerableHeaders vulnerableHeaders;

    public Finding withVulnerableHeaders(VulnerableHeaders vulnerableHeaders) {
        this.vulnerableHeaders = vulnerableHeaders;
        return this;
    }
    
    /**
     * Information about vulnerable request parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vulnerableParameters")
    public VulnerableParameters vulnerableParameters;

    public Finding withVulnerableParameters(VulnerableParameters vulnerableParameters) {
        this.vulnerableParameters = vulnerableParameters;
        return this;
    }
    
    /**
     * Information reported for an XSS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xss")
    public Xss xss;

    public Finding withXss(Xss xss) {
        this.xss = xss;
        return this;
    }
    
    public Finding(){}
}
