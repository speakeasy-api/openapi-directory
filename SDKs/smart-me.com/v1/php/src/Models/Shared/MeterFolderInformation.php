<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MeterFolderInformation - Container Class for the Web API
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MeterFolderInformation
{
    /**
     * The Version of the Communication Module (if exists)
     * 
     * @var ?int $communicationModuleFirmwareVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('CommunicationModuleFirmwareVersion')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $communicationModuleFirmwareVersion = null;
    
    /**
     * The Version of the Communication Module (if exists)
     * 
     * @var ?int $communicationModuleHardwareVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('CommunicationModuleHardwareVersion')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $communicationModuleHardwareVersion = null;
    
    /**
     * The Firmware Version of a Meter
     * 
     * @var ?int $firmwareVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('FirmwareVersion')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $firmwareVersion = null;
    
    /**
     * The Hardware Version of a Meter.
     * 
     * @var ?int $hardwareVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('HardwareVersion')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $hardwareVersion = null;
    
    /**
     * Informations about the available Inputs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\InputInformation> $inputInformations
     */
	#[\JMS\Serializer\Annotation\SerializedName('InputInformations')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\InputInformation>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $inputInformations = null;
    
    /**
     * Flag if it's a Folder or a Meter
     * 
     * @var ?bool $isFolder
     */
	#[\JMS\Serializer\Annotation\SerializedName('IsFolder')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isFolder = null;
    
    /**
     * Name of the Meter or Folder
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Informations about the available Outputs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OutputInformation> $outputInformations
     */
	#[\JMS\Serializer\Annotation\SerializedName('OutputInformations')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OutputInformation>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $outputInformations = null;
    
	public function __construct()
	{
		$this->communicationModuleFirmwareVersion = null;
		$this->communicationModuleHardwareVersion = null;
		$this->firmwareVersion = null;
		$this->hardwareVersion = null;
		$this->inputInformations = null;
		$this->isFolder = null;
		$this->name = null;
		$this->outputInformations = null;
	}
}
