"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .apps import Apps
from .categories import Categories
from .checkout_custom_fields import CheckoutCustomFields
from .countries import Countries
from .custom_field_select_options import CustomFieldSelectOptions
from .custom_fields import CustomFields
from .customer_additional_fields import CustomerAdditionalFields
from .customer_categories import CustomerCategories
from .customers import Customers
from .fulfillments import Fulfillments
from .hooks import Hooks
from .orders import Orders
from .pages import Pages
from .partners import Partners
from .payment_methods import PaymentMethods
from .product_attachments import ProductAttachments
from .product_custom_fields import ProductCustomFields
from .product_digitalproducts import ProductDigitalProducts
from .product_images import ProductImages
from .product_option_values import ProductOptionValues
from .product_options import ProductOptions
from .product_variants import ProductVariants
from .products import Products
from .promotions import Promotions
from .regions import Regions
from .shipping_methods import ShippingMethods
from .stores import Stores
from .taxes import Taxes

SERVERS = [
    "https://api.jumpseller.com/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Endpoint Structure
    
    All URLs are in the format: 
    
    ```text
    https://api.jumpseller.com/v1/path.json?login=XXXXXX&authtoken=storetoken  
    ```
    
    The path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.
    <br/><br/>
    ***
    
    # Version
    
    The current version of the API is **v1**.  
    If we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.
    <br/><br/>
    ***
    
    # Authentication
    
    The API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.
    
    ![Store Login](/images/support/api/apilogin.png)
    
    The auth token is a **32 characters** string.
    
    If you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.
    <br/><br/>
    ***
    
    # Curl Examples
    
    To request all the products at your store, you would append the products index path to the base url to create an URL with the format:  
    
    ```text
    https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX
    ```
    
    In curl, you can invoque that URL with:  
    
    ```text
    curl -X GET \"https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\"
    ```
    
    To create a product, you will include the JSON data and specify the MIME Type:  
    
    ```text
    curl -X POST -d '{ \"product\" : {\"name\": \"My new Product!\", \"price\": 100} }' \"https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"
    ```
    
    and to update the product identified with 123:  
    
    ```text
    curl -X PUT -d '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }' \"https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"
    ```
    
    or delete it:  
    
    ```text
    curl -X DELETE \"https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"
    ```
    <br/><br/>
    ***
    
    # PHP Examples
    
    Create a new Product (POST method)
    
    ```php
    $url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=XXXXX;
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\"); //post method
    curl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }');
    
    $result = curl_exec($ch);
    print_r($result);
    curl_close($ch);
    ```
    <br/><br/>
    ***
    
    # Plain JSON only. No XML.
    
    * We only support JSON for data serialization.
    * Our node format has no root element.  
    * We use snake_case to describe attribute keys (like \"created_at\").  
    * All empty value are replaced with **null** strings.
    * All API URLs end in .json to indicate that they accept and return JSON.
    * POST and PUT methods require you to explicitly state the MIME type of your request's body content as **\"application/json\"**.
    <br/><br/>
    ***
    
    # Rate Limit
    You can perform a maximum of:
    
    + 240 (two hundred forty) requests per minute and
    + 8 (eight) requests per second 
    
    If you exceed this limit, you'll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.  
    
    The rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.
    
    This limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:
    
    ```ruby
    tries = 0; max_tries = 3;
    begin
      HTTParty.send(method, uri) # perform an API call.
      sleep 0.5
      tries += 1
    rescue
      unless tries >= max_tries
        sleep 1.0 # wait the necessary time before retrying the call again.
        retry
      end
    end
    ```
    
    Finally, you can review the Response Headers of each request:
    
    ```text
    Jumpseller-PerMinuteRateLimit-Limit: 60  
    Jumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval  
    Jumpseller-PerSecondRateLimit-Limit: 2  
    Jumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval
    ``` 
    
    to better model your application requests intervals.
    
    In the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.
    <br/><br/>
    ***
    
    # Pagination
    
    By default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.
    If the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.
    
    ```text
    https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX&page=3&limit=100
    ```
    <br/><br/>
    ***
    
    # More
    * [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;
    * [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;
    * [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.
    <br/><br/>
    ***
    <br/><br/>
    """
    apps: Apps
    categories: Categories
    checkout_custom_fields: CheckoutCustomFields
    countries: Countries
    custom_field_select_options: CustomFieldSelectOptions
    custom_fields: CustomFields
    customer_additional_fields: CustomerAdditionalFields
    customer_categories: CustomerCategories
    customers: Customers
    fulfillments: Fulfillments
    hooks: Hooks
    orders: Orders
    pages: Pages
    partners: Partners
    payment_methods: PaymentMethods
    product_attachments: ProductAttachments
    product_custom_fields: ProductCustomFields
    product_digital_products: ProductDigitalProducts
    product_images: ProductImages
    product_option_values: ProductOptionValues
    product_options: ProductOptions
    product_variants: ProductVariants
    products: Products
    promotions: Promotions
    regions: Regions
    shipping_methods: ShippingMethods
    stores: Stores
    taxes: Taxes

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.apps = Apps(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.categories = Categories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.checkout_custom_fields = CheckoutCustomFields(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.countries = Countries(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.custom_field_select_options = CustomFieldSelectOptions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.custom_fields = CustomFields(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_additional_fields = CustomerAdditionalFields(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_categories = CustomerCategories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customers = Customers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.fulfillments = Fulfillments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.hooks = Hooks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.orders = Orders(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pages = Pages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.partners = Partners(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payment_methods = PaymentMethods(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_attachments = ProductAttachments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_custom_fields = ProductCustomFields(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_digital_products = ProductDigitalProducts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_images = ProductImages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_option_values = ProductOptionValues(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_options = ProductOptions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product_variants = ProductVariants(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.products = Products(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.promotions = Promotions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.regions = Regions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.shipping_methods = ShippingMethods(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stores = Stores(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.taxes = Taxes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    