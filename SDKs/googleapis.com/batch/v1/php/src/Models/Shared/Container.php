<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Container - Container runnable.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Container
{
    /**
     * If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.
     * 
     * @var ?bool $blockExternalNetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('blockExternalNetwork')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $blockExternalNetwork = null;
    
    /**
     * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
     * 
     * @var ?array<string> $commands
     */
	#[\JMS\Serializer\Annotation\SerializedName('commands')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $commands = null;
    
    /**
     * Overrides the `ENTRYPOINT` specified in the container.
     * 
     * @var ?string $entrypoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('entrypoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $entrypoint = null;
    
    /**
     * The URI to pull the container image from.
     * 
     * @var ?string $imageUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('imageUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $imageUri = null;
    
    /**
     * Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
     * 
     * @var ?string $options
     */
	#[\JMS\Serializer\Annotation\SerializedName('options')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $options = null;
    
    /**
     * Optional password for logging in to a docker registry. If password matches `projects/* /secrets/* /versions/*` then Batch will read the password from the Secret Manager;
     * 
     * @var ?string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $password = null;
    
    /**
     * Optional username for logging in to a docker registry. If username matches `projects/* /secrets/* /versions/*` then Batch will read the username from the Secret Manager.
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
    /**
     * Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
     * 
     * @var ?array<string> $volumes
     */
	#[\JMS\Serializer\Annotation\SerializedName('volumes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $volumes = null;
    
	public function __construct()
	{
		$this->blockExternalNetwork = null;
		$this->commands = null;
		$this->entrypoint = null;
		$this->imageUri = null;
		$this->options = null;
		$this->password = null;
		$this->username = null;
		$this->volumes = null;
	}
}
