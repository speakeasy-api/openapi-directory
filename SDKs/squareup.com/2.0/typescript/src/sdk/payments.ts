/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Payments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CancelPayment
   *
   * @remarks
   * Cancels (voids) a payment. You can use this endpoint to cancel a payment with
   * the APPROVED `status`.
   */
  cancelPayment(
    req: operations.CancelPaymentRequest,
    security: operations.CancelPaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/payments/{payment_id}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelPaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelPaymentResponse =
        new operations.CancelPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelPaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.CancelPaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CancelPaymentByIdempotencyKey
   *
   * @remarks
   * Cancels (voids) a payment identified by the idempotency key that is specified in the
   * request.
   *
   * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
   * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
   * direct Square to cancel the payment using this endpoint. In the request, you provide the same
   * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
   * canceling the payment, you can submit your `CreatePayment` request again.
   *
   * Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
   * returns successfully.
   */
  cancelPaymentByIdempotencyKey(
    req: shared.CancelPaymentByIdempotencyKeyRequest,
    security: operations.CancelPaymentByIdempotencyKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelPaymentByIdempotencyKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CancelPaymentByIdempotencyKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/payments/cancel";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelPaymentByIdempotencyKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelPaymentByIdempotencyKeyResponse =
        new operations.CancelPaymentByIdempotencyKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelPaymentByIdempotencyKeyResponse = utils.objectToClass(
              httpRes?.data,
              shared.CancelPaymentByIdempotencyKeyResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CompletePayment
   *
   * @remarks
   * Completes (captures) a payment.
   * By default, payments are set to complete immediately after they are created.
   *
   * You can use this endpoint to complete a payment with the APPROVED `status`.
   */
  completePayment(
    req: operations.CompletePaymentRequest,
    security: operations.CompletePaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompletePaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompletePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/payments/{payment_id}/complete",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompletePaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompletePaymentResponse =
        new operations.CompletePaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.completePaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.CompletePaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreatePayment
   *
   * @remarks
   * Creates a payment using the provided source. You can use this endpoint
   * to charge a card (credit/debit card or
   * Square gift card) or record a payment that the seller received outside of Square
   * (cash payment from a buyer or a payment that an external entity
   * processed on behalf of the seller).
   *
   * The endpoint creates a
   * `Payment` object and returns it in the response.
   */
  createPayment(
    req: shared.CreatePaymentRequest,
    security: operations.CreatePaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreatePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/payments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreatePaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePaymentResponse =
        new operations.CreatePaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreatePaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * GetPayment
   *
   * @remarks
   * Retrieves details for a specific payment.
   */
  getPayment(
    req: operations.GetPaymentRequest,
    security: operations.GetPaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/payments/{payment_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentResponse =
        new operations.GetPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetPaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdatePayment
   *
   * @remarks
   * Updates a payment with the APPROVED status.
   * You can update the `amount_money` and `tip_money` using this endpoint.
   */
  updatePayment(
    req: operations.UpdatePaymentRequest,
    security: operations.UpdatePaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/payments/{payment_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updatePaymentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdatePaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePaymentResponse =
        new operations.UpdatePaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updatePaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdatePaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListPayments
   *
   * @remarks
   * Retrieves a list of payments taken by the account making the request.
   *
   * Results are eventually consistent, and new payments or changes to payments might take several
   * seconds to appear.
   *
   * The maximum results per page is 100.
   */
  getV2Payments(
    req: operations.GetV2PaymentsRequest,
    security: operations.GetV2PaymentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2PaymentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2PaymentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/payments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetV2PaymentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2PaymentsResponse =
        new operations.GetV2PaymentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPaymentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPaymentsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
