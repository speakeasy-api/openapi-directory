"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import floodlightactivitydynamictag as shared_floodlightactivitydynamictag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FloodlightActivityPublisherDynamicTag:
    r"""Publisher Dynamic Tag"""
    
    click_through: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThrough'), 'exclude': lambda f: f is None }})
    r"""Whether this tag is applicable only for click-throughs."""  
    directory_site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directorySiteId'), 'exclude': lambda f: f is None }})
    r"""Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated."""  
    dynamic_tag: Optional[shared_floodlightactivitydynamictag.FloodlightActivityDynamicTag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamicTag'), 'exclude': lambda f: f is None }})
    r"""Dynamic Tag"""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteId'), 'exclude': lambda f: f is None }})
    r"""Site ID of this dynamic tag."""  
    site_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    view_through: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewThrough'), 'exclude': lambda f: f is None }})
    r"""Whether this tag is applicable only for view-throughs."""  
    