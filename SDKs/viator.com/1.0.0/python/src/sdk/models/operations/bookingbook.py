"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bookingengineid_response_enum as shared_bookingengineid_response_enum
from ..shared import bookingstatus_item as shared_bookingstatus_item
from ..shared import bookingstatus_itinerary as shared_bookingstatus_itinerary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyBooker:
    r"""**object** containing details about the primary contact (**note**: this contact needn't be a traveller)"""
    
    firstname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstname') }})
    r"""**first name** of the primary contact"""  
    surname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surname') }})
    r"""**surname** of the primary contact"""  
    cell_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellPhone'), 'exclude': lambda f: f is None }})
    r"""**telephone number** of the lead traveler
    
    **Note**:
    
      * Must be included to enable CLC communications
      * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
    """  
    cell_phone_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellPhoneCountryCode'), 'exclude': lambda f: f is None }})
    r"""**country code** for the telephone number of the lead traveler
    
    **Note**: 
    
      * Must be included to enable CLC communications. 
      * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""**email address** of the primary contact"""  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homePhone'), 'exclude': lambda f: f is None }})
    r"""**phone number** (home) of the primary contact"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""**title** of the primary contact"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyItemsBookingQuestionAnswers:
    
    answer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer'), 'exclude': lambda f: f is None }})
    r"""**answer** to the question for the `questionId` listed (recommended length for the answer is 500 characters)
    
    **Note**: To specify answers for each traveler, separate the values with a comma as in the per_person_booking_questions request example
    """  
    question_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionId'), 'exclude': lambda f: f is None }})
    r"""**numeric identifier** for the question (**note**: `questionId` can be retrieved from the [/product](#operation/product) service)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyItemsPartnerItemDetail:
    r"""**object** containing partner details at a per-item level"""
    
    distributor_item_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorItemRef'), 'exclude': lambda f: f is None }})
    r"""**unique alphanumeric code** for the order ('itinerary') (merchant API partners must pass a `distributorItemRef` into the `partnerItemDetails` object for each item in *this* object
    - this code can be any alphanumeric string and is defined by the distributor
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyItemsTravellers:
    
    band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    firstname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstname'), 'exclude': lambda f: f is None }})
    r"""**first name** of *this* traveller"""  
    lead_traveller: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTraveller'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if this traveler is the lead traveler"""  
    surname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surname'), 'exclude': lambda f: f is None }})
    r"""**surname** of *this* traveler"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""**title** of the traveler (e.g `'Mr'`, `'Mrs'`, `'Ms'`, `'Miss'`, `'Mstr'`, `'Dr'`)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyItems:
    
    booking_question_answers: Optional[list[BookingBookRequestBodyItemsBookingQuestionAnswers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingQuestionAnswers'), 'exclude': lambda f: f is None }})
    r"""**array** of objects containing booking questions and the answers provided for them for *this* product
    - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service. 
    - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request. 
    - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised) 
    - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array.
    """  
    hotel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelId'), 'exclude': lambda f: f is None }})
    r"""**specifer** of the hotel
    If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:
     
     - `\"notBooked\"`: the customer has not yet booked their hotel
     - `\"notListed\"`: the customer's hotel is not listed
    
     If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications).
    """  
    language_option_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageOptionCode'), 'exclude': lambda f: f is None }})
    r"""**specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)"""  
    partner_item_detail: Optional[BookingBookRequestBodyItemsPartnerItemDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerItemDetail'), 'exclude': lambda f: f is None }})
    r"""**object** containing partner details at a per-item level"""  
    pickup_point: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupPoint'), 'exclude': lambda f: f is None }})
    r"""**details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`."""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""**unique alphanumeric identifier** of the product to be booked"""  
    special_requirements: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialRequirements'), 'exclude': lambda f: f is None }})
    r"""**text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required"""  
    tour_grade_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGradeCode'), 'exclude': lambda f: f is None }})
    r"""**specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)"""  
    travel_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelDate'), 'exclude': lambda f: f is None }})
    r"""**date** of travel for the item in format yyyy-mm-dd"""  
    travellers: Optional[list[BookingBookRequestBodyItemsTravellers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travellers'), 'exclude': lambda f: f is None }})
    r"""**array** of traveler names, details and whether they are the lead traveller"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBodyPartnerDetail:
    r"""Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information"""
    
    distributor_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorRef'), 'exclude': lambda f: f is None }})
    r"""**unique alphanumeric reference code** for the distributor
    - Merchant API partners must pass a `distributorRef` at the order (A.K.A. 'itinerary') level in the `partnerDetail` object. The `distributorRef` passed must be alphanumeric and unique to bookings made by the merchant.
    - Passing an existing `distributorRef`: If an existing `distributorRef` is passed, the booking with the matching `distributorRef` will be returned in the response and a new booking will not be made. The fields in the response are identical to the response for a new booking.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBookRequestBody:
    
    booker: Optional[BookingBookRequestBodyBooker] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booker'), 'exclude': lambda f: f is None }})
    r"""**object** containing details about the primary contact (**note**: this contact needn't be a traveller)"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency the booking will be submitted in (you will be billed in this currency)"""  
    demo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('demo'), 'exclude': lambda f: f is None }})
    r"""**specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`."""  
    items: Optional[list[BookingBookRequestBodyItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""**array** of items to be booked"""  
    partner_detail: Optional[BookingBookRequestBodyPartnerDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerDetail'), 'exclude': lambda f: f is None }})
    r"""Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information"""  
    

@dataclasses.dataclass
class BookingBookRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    request_body: Optional[BookingBookRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate:
    
    day_range_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayRangeMax'), 'exclude': lambda f: f is None }})
    r"""**number** of days prior to the tour start date that *this* policy window begins. `null` signifies open-endedness"""  
    day_range_min: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayRangeMin'), 'exclude': lambda f: f is None }})
    r"""**number** of days prior to the tour start date that *this* policy window ends"""  
    percentage_refundable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentageRefundable'), 'exclude': lambda f: f is None }})
    r"""**percentage** of total price refundable if cancelled within *this* time window"""  
    policy_end_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyEndTimestamp'), 'exclude': lambda f: f is None }})
    r"""**Unix timestamp** giving the exact time the policy ends"""  
    policy_start_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyStartTimestamp'), 'exclude': lambda f: f is None }})
    r"""**Unix timestamp** giving the exact time the policy commences"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions:
    
    amount_refundable: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountRefundable'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted** amount that will be refunded if the cancellation is processed now."""  
    cancellation_from_tour_date: Optional[list[BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellationFromTourDate'), 'exclude': lambda f: f is None }})
    r"""**array** of cancellation policy objects"""  
    terms_and_conditions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the terms and conditions for *this* product"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands:
    
    age_band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""**numeric** number of travelers in *this* age band"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** (singular) of *this* age band"""  
    plural_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pluralDescription'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** (plural) of *this* age band"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* age band"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSONDataItemSummaries:
    
    apple_pass_supported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applePassSupported'), 'exclude': lambda f: f is None }})  
    barcode_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeOption'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking."""  
    barcode_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeType'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric code** specifying the type of barcode"""  
    booking_engine_id: Optional[shared_bookingengineid_response_enum.BookingEngineIDResponseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingEngineId'), 'exclude': lambda f: f is None }})
    r"""[booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
    
    *one of* the following:
    - `\"UF\"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
    - `\"OR\"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
    - `\"FO\"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
    """  
    booking_status: Optional[shared_bookingstatus_item.BookingStatusItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingStatus'), 'exclude': lambda f: f is None }})
    r"""**object** containing item booking status information"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which pricing is displayed for *this* item"""  
    departs_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departsFrom'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* item's departure location"""  
    departure_point: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePoint'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* item's departure point"""  
    departure_point_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePointAddress'), 'exclude': lambda f: f is None }})
    r"""**HTML-formatted address** of *this* item's departure point"""  
    departure_point_directions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePointDirections'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of directions regarding *this* item's departure point"""  
    dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifer** of the destination of *this* item"""  
    distributor_item_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorItemRef'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    hours_confirmed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hoursConfirmed'), 'exclude': lambda f: f is None }})
    r"""The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**."""  
    item_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""**numeric identifer** of *this* item"""  
    itinerary_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itineraryId'), 'exclude': lambda f: f is None }})
    r"""Ignore (Viator only)"""  
    language_services_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageServicesCode'), 'exclude': lambda f: f is None }})
    r"""**code** for the language that this product operates in"""  
    last_retail_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRetailPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant net rate** of *this* item"""  
    last_retail_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRetailPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant net rate** of *this* item"""  
    lead_traveller_firstname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerFirstname'), 'exclude': lambda f: f is None }})
    r"""**first name** of the lead traveler"""  
    lead_traveller_surname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerSurname'), 'exclude': lambda f: f is None }})
    r"""**surname** of the lead traveler"""  
    lead_traveller_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerTitle'), 'exclude': lambda f: f is None }})
    r"""**title** of the lead traveler's name"""  
    merchant_cancellable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCancellable'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)
    
    For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
    """  
    merchant_net_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant net rate** for *this* item\\" 
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_net_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant net rate** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_terms_and_conditions: Optional[BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantTermsAndConditions'), 'exclude': lambda f: f is None }})  
    obfs_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obfsId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    passbooks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passbooks'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    pickup_hotel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupHotelId'), 'exclude': lambda f: f is None }})
    r"""**identifer** for the pick-up hotel"""  
    pickup_hotel_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupHotelName'), 'exclude': lambda f: f is None }})
    r"""**natural-language name** of the pick-up hotel"""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant total price** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    price_usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceUSD'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** in USD"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""**unique alphanumeric identifier** of *this* product"""  
    product_pulled_down: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productPulledDown'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    product_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTitle'), 'exclude': lambda f: f is None }})
    r"""**natural-language title** of *this* product"""  
    product_widget_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productWidgetList'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    rules_applied: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesApplied'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    saving_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingAmount'), 'exclude': lambda f: f is None }})
    r"""Ignore (Viator only)"""  
    saving_amount_formated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingAmountFormated'), 'exclude': lambda f: f is None }})
    r"""Ignore (Viator only)"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** of *this* item summary"""  
    starting_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startingTime'), 'exclude': lambda f: f is None }})
    r"""**starting time** of this product"""  
    supplier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplierName'), 'exclude': lambda f: f is None }})
    r"""**natural-language name** of *this* product's supplier"""  
    supplier_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplierPhoneNumber'), 'exclude': lambda f: f is None }})
    r"""**telephone number** of *this* product's supplier"""  
    terms_and_conditions: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    tour_grade_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGradeCode'), 'exclude': lambda f: f is None }})
    r"""**identifer** of *this* tour grade"""  
    tour_grade_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGradeDescription'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* tour grade"""  
    travel_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelDate'), 'exclude': lambda f: f is None }})
    r"""**date** of travel"""  
    traveller_age_bands: Optional[list[BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travellerAgeBands'), 'exclude': lambda f: f is None }})
    r"""**array** of objects detailing the traveler age bands"""  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherKey'), 'exclude': lambda f: f is None }})
    r"""Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints"""  
    voucher_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherOption'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    voucher_requirements: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherRequirements'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the requirements pertaining to this voucher"""  
    vouchers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vouchers'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    voucher_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherURL'), 'exclude': lambda f: f is None }})
    r"""**URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSONData:
    
    booker_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookerEmail'), 'exclude': lambda f: f is None }})
    r"""**email address** of the entity that made *this* booking"""  
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** of *this* booking"""  
    booking_status: Optional[shared_bookingstatus_itinerary.BookingStatusItinerary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingStatus'), 'exclude': lambda f: f is None }})
    r"""**object** containing itinerary booking status information"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** of the currency in which *this* booking was made"""  
    distributor_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorRef'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    exchange_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeRate'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    has_voucher: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasVoucher'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    item_summaries: Optional[list[BookingBook200ApplicationJSONDataItemSummaries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemSummaries'), 'exclude': lambda f: f is None }})
    r"""**array** of item summaries"""  
    itinerary_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itineraryId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    omni_pre_rule_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omniPreRuleList'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    paypal_redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paypalRedirectURL'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    rules_applied: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesApplied'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    security_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityToken'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* object"""  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** for *this* booking
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    total_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant total price** for *this* booking
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    total_price_usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPriceUSD'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** of *this* booking in USD"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherKey'), 'exclude': lambda f: f is None }})
    r"""Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints"""  
    voucher_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherURL'), 'exclude': lambda f: f is None }})
    r"""**URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingBook200ApplicationJSON:
    r"""Success"""
    
    data: Optional[BookingBook200ApplicationJSONData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class BookingBookResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    booking_book_200_application_json_object: Optional[BookingBook200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    