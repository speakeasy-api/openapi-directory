/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ApproximateReportedProgress - A progress measurement of a WorkItem by a worker.
 */
public class ApproximateReportedProgress {
    /**
     * Represents the level of parallelism in a WorkItem's input, reported by the worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumedParallelism")
    public ReportedParallelism consumedParallelism;

    public ApproximateReportedProgress withConsumedParallelism(ReportedParallelism consumedParallelism) {
        this.consumedParallelism = consumedParallelism;
        return this;
    }
    
    /**
     * Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fractionConsumed")
    public Double fractionConsumed;

    public ApproximateReportedProgress withFractionConsumed(Double fractionConsumed) {
        this.fractionConsumed = fractionConsumed;
        return this;
    }
    
    /**
     * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public Position position;

    public ApproximateReportedProgress withPosition(Position position) {
        this.position = position;
        return this;
    }
    
    /**
     * Represents the level of parallelism in a WorkItem's input, reported by the worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingParallelism")
    public ReportedParallelism remainingParallelism;

    public ApproximateReportedProgress withRemainingParallelism(ReportedParallelism remainingParallelism) {
        this.remainingParallelism = remainingParallelism;
        return this;
    }
    
    public ApproximateReportedProgress(){}
}
