"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileSurvey:
    
    current_services: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_services'), 'exclude': lambda f: f is None }})  
    daily_proofreading_capacity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_proofreading_capacity'), 'exclude': lambda f: f is None }})  
    daily_translation_capacity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_translation_capacity'), 'exclude': lambda f: f is None }})  
    dtp_software: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dtp_software'), 'exclude': lambda f: f is None }})  
    experience: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('experience'), 'exclude': lambda f: f is None }})  
    is_certified_translator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_certified_translator'), 'exclude': lambda f: f is None }})  
    is_sworn_translator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_sworn_translator'), 'exclude': lambda f: f is None }})  
    memoq: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoq'), 'exclude': lambda f: f is None }})  
    memsource: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memsource'), 'exclude': lambda f: f is None }})  
    omegat: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omegat'), 'exclude': lambda f: f is None }})  
    proofreader_experience: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proofreader_experience'), 'exclude': lambda f: f is None }})  
    provides_creative_writing_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provides_creative_writing_service'), 'exclude': lambda f: f is None }})  
    provides_postedit_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provides_postedit_service'), 'exclude': lambda f: f is None }})  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})  
    sdl_trados: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdl_trados'), 'exclude': lambda f: f is None }})  
    skype_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skype_id'), 'exclude': lambda f: f is None }})  
    smartcat: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smartcat'), 'exclude': lambda f: f is None }})  
    smartling: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smartling'), 'exclude': lambda f: f is None }})  
    software: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software'), 'exclude': lambda f: f is None }})  
    specialization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialization'), 'exclude': lambda f: f is None }})  
    subtitle_edit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtitle_edit'), 'exclude': lambda f: f is None }})  
    subtitle_workshop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtitle_workshop'), 'exclude': lambda f: f is None }})  
    translator_association: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translator_association'), 'exclude': lambda f: f is None }})  
    transsuite_2000: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transsuite_2000'), 'exclude': lambda f: f is None }})  
    vendor_profile_lsp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor_profile_lsp'), 'exclude': lambda f: f is None }})  
    wordbee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wordbee'), 'exclude': lambda f: f is None }})  
    wordfast: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wordfast'), 'exclude': lambda f: f is None }})  
    work_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_type'), 'exclude': lambda f: f is None }})  
    work_with: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_with'), 'exclude': lambda f: f is None }})  
    working_as: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('working_as'), 'exclude': lambda f: f is None }})  
    working_timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('working_timezone'), 'exclude': lambda f: f is None }})  
    xbench: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xbench'), 'exclude': lambda f: f is None }})  
    xtm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xtm'), 'exclude': lambda f: f is None }})  
    