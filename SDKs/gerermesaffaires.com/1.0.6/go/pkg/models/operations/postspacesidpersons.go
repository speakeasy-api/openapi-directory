// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesIDPersonsSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesIDPersonsRequestBodyAddress struct {
	City       *string `json:"City,omitempty"`
	Complement *string `json:"Complement,omitempty"`
	Country    *string `json:"Country,omitempty"`
	Street     *string `json:"Street,omitempty"`
	ZipCode    *string `json:"ZipCode,omitempty"`
}

type PostSpacesIDPersonsRequestBodyBirth struct {
	Date  *int64  `json:"Date,omitempty"`
	Place *string `json:"Place,omitempty"`
}

type PostSpacesIDPersonsRequestBodySexEnum string

const (
	PostSpacesIDPersonsRequestBodySexEnumMale   PostSpacesIDPersonsRequestBodySexEnum = "male"
	PostSpacesIDPersonsRequestBodySexEnumFemale PostSpacesIDPersonsRequestBodySexEnum = "female"
)

func (e *PostSpacesIDPersonsRequestBodySexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = PostSpacesIDPersonsRequestBodySexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesIDPersonsRequestBodySexEnum: %s", s)
	}
}

// PostSpacesIDPersonsRequestBody - Person to add
type PostSpacesIDPersonsRequestBody struct {
	Address      *PostSpacesIDPersonsRequestBodyAddress `json:"Address,omitempty"`
	ArchivalDate *string                                `json:"ArchivalDate,omitempty"`
	Birth        *PostSpacesIDPersonsRequestBodyBirth   `json:"Birth,omitempty"`
	Comment      *string                                `json:"Comment,omitempty"`
	Email        *string                                `json:"Email,omitempty"`
	FirstName    string                                 `json:"FirstName"`
	Mobile       *string                                `json:"Mobile,omitempty"`
	Name         string                                 `json:"Name"`
	Sex          PostSpacesIDPersonsRequestBodySexEnum  `json:"Sex"`
}

type PostSpacesIDPersonsRequest struct {
	// Person to add
	RequestBody PostSpacesIDPersonsRequestBody `request:"mediaType=application/json"`
	// Id of the space
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PostSpacesIDPersons201ApplicationJSON - Id of person created
type PostSpacesIDPersons201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesIDPersonsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of person created
	PostSpacesIDPersons201ApplicationJSONObject *PostSpacesIDPersons201ApplicationJSON
}
