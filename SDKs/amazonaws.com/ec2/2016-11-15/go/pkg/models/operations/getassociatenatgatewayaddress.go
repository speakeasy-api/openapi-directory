// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssociateNatGatewayAddressActionEnum
type GETAssociateNatGatewayAddressActionEnum string

const (
	GETAssociateNatGatewayAddressActionEnumAssociateNatGatewayAddress GETAssociateNatGatewayAddressActionEnum = "AssociateNatGatewayAddress"
)

func (e *GETAssociateNatGatewayAddressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AssociateNatGatewayAddress":
		*e = GETAssociateNatGatewayAddressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateNatGatewayAddressActionEnum: %s", s)
	}
}

// GETAssociateNatGatewayAddressVersionEnum
type GETAssociateNatGatewayAddressVersionEnum string

const (
	GETAssociateNatGatewayAddressVersionEnumTwoThousandAndSixteen1115 GETAssociateNatGatewayAddressVersionEnum = "2016-11-15"
)

func (e *GETAssociateNatGatewayAddressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETAssociateNatGatewayAddressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateNatGatewayAddressVersionEnum: %s", s)
	}
}

type GETAssociateNatGatewayAddressRequest struct {
	Action GETAssociateNatGatewayAddressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The allocation IDs of EIPs that you want to associate with your NAT gateway.
	AllocationID []string `queryParam:"style=form,explode=true,name=AllocationId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The NAT gateway ID.
	NatGatewayID string `queryParam:"style=form,explode=true,name=NatGatewayId"`
	// The private IPv4 addresses that you want to assign to the NAT gateway.
	PrivateIPAddress  []string                                 `queryParam:"style=form,explode=true,name=PrivateIpAddress"`
	Version           GETAssociateNatGatewayAddressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssociateNatGatewayAddressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
