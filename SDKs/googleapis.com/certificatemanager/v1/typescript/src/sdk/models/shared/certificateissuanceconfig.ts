/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CertificateAuthorityConfig } from "./certificateauthorityconfig";
import { Expose, Type } from "class-transformer";

/**
 * Required. The key algorithm to use when generating the private key.
 */
export enum CertificateIssuanceConfigKeyAlgorithmEnum {
  KeyAlgorithmUnspecified = "KEY_ALGORITHM_UNSPECIFIED",
  Rsa2048 = "RSA_2048",
  EcdsaP256 = "ECDSA_P256",
}

/**
 * CertificateIssuanceConfig specifies how to issue and manage a certificate.
 */
export class CertificateIssuanceConfig extends SpeakeasyBase {
  /**
   * The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificateAuthorityConfig" })
  @Type(() => CertificateAuthorityConfig)
  certificateAuthorityConfig?: CertificateAuthorityConfig;

  /**
   * Output only. The creation timestamp of a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Required. The key algorithm to use when generating the private key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyAlgorithm" })
  keyAlgorithm?: CertificateIssuanceConfigKeyAlgorithmEnum;

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Workload certificate lifetime requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  lifetime?: string;

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/* /locations/* /certificateIssuanceConfigs/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rotationWindowPercentage" })
  rotationWindowPercentage?: number;

  /**
   * Output only. The last update timestamp of a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * CertificateIssuanceConfig specifies how to issue and manage a certificate.
 */
export class CertificateIssuanceConfigInput extends SpeakeasyBase {
  /**
   * The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificateAuthorityConfig" })
  @Type(() => CertificateAuthorityConfig)
  certificateAuthorityConfig?: CertificateAuthorityConfig;

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Required. The key algorithm to use when generating the private key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyAlgorithm" })
  keyAlgorithm?: CertificateIssuanceConfigKeyAlgorithmEnum;

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Workload certificate lifetime requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  lifetime?: string;

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/* /locations/* /certificateIssuanceConfigs/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rotationWindowPercentage" })
  rotationWindowPercentage?: number;
}
