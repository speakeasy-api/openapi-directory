"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDataplexV1ActionIncompatibleDataSchemaSchemaChangeEnum(str, Enum):
    r"""Whether the action relates to a schema that is incompatible or modified."""
    SCHEMA_CHANGE_UNSPECIFIED = 'SCHEMA_CHANGE_UNSPECIFIED'
    INCOMPATIBLE = 'INCOMPATIBLE'
    MODIFIED = 'MODIFIED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDataplexV1ActionIncompatibleDataSchema:
    r"""Action details for incompatible schemas detected by discovery."""
    
    existing_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existingSchema'), 'exclude': lambda f: f is None }})
    r"""The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types."""  
    new_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newSchema'), 'exclude': lambda f: f is None }})
    r"""The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types."""  
    sampled_data_locations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampledDataLocations'), 'exclude': lambda f: f is None }})
    r"""The list of data locations sampled and used for format/schema inference."""  
    schema_change: Optional[GoogleCloudDataplexV1ActionIncompatibleDataSchemaSchemaChangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaChange'), 'exclude': lambda f: f is None }})
    r"""Whether the action relates to a schema that is incompatible or modified."""  
    table: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('table'), 'exclude': lambda f: f is None }})
    r"""The name of the table containing invalid data."""  
    