<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TransactionRules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a transaction rule
     * 
     * Deletes a transaction rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdResponse
     */
	public function deleteTransactionRulesTransactionRuleId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactionRules/{transactionRuleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionRulesTransactionRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionRule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a transaction rule
     * 
     * Returns the details of a transaction rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdResponse
     */
	public function getTransactionRulesTransactionRuleId(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactionRules/{transactionRuleId}', \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionRulesTransactionRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionRuleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionRuleResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a transaction rule
     * 
     * Updates a transaction rule. 
     * 
     * * To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.
     * 
     * * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdResponse
     */
	public function patchTransactionRulesTransactionRuleId(
        \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactionRules/{transactionRuleId}', \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transactionRuleInfo", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTransactionRulesTransactionRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionRule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a transaction rule
     * 
     * Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TransactionRuleInfo $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTransactionRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTransactionRulesResponse
     */
	public function postTransactionRules(
        \OpenAPI\OpenAPI\Models\Shared\TransactionRuleInfo $request,
        \OpenAPI\OpenAPI\Models\Operations\PostTransactionRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTransactionRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactionRules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTransactionRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionRule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}