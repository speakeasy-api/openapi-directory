"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeNetworkAclsResult = exports.DescribeNetworkAclsResultNetworkAcls = exports.DescribeNetworkAclsResultNetworkAclsTags = exports.DescribeNetworkAclsResultNetworkAclsEntries = exports.DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum = exports.DescribeNetworkAclsResultNetworkAclsEntriesPortRange = exports.DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode = exports.DescribeNetworkAclsResultNetworkAclsAssociations = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes an association between a network ACL and a subnet.
 */
var DescribeNetworkAclsResultNetworkAclsAssociations = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAclsAssociations, _super);
    function DescribeNetworkAclsResultNetworkAclsAssociations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsAssociations.prototype, "networkAclAssociationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsAssociations.prototype, "networkAclId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsAssociations.prototype, "subnetId", void 0);
    return DescribeNetworkAclsResultNetworkAclsAssociations;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAclsAssociations = DescribeNetworkAclsResultNetworkAclsAssociations;
/**
 * ICMP protocol: The ICMP type and code.
 */
var DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode, _super);
    function DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode.prototype, "type", void 0);
    return DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode = DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode;
/**
 * TCP or UDP protocols: The range of ports the rule applies to.
 */
var DescribeNetworkAclsResultNetworkAclsEntriesPortRange = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAclsEntriesPortRange, _super);
    function DescribeNetworkAclsResultNetworkAclsEntriesPortRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeNetworkAclsResultNetworkAclsEntriesPortRange.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeNetworkAclsResultNetworkAclsEntriesPortRange.prototype, "to", void 0);
    return DescribeNetworkAclsResultNetworkAclsEntriesPortRange;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAclsEntriesPortRange = DescribeNetworkAclsResultNetworkAclsEntriesPortRange;
/**
 * Indicates whether to allow or deny the traffic that matches the rule.
 */
var DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum;
(function (DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum) {
    DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum["Allow"] = "allow";
    DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum["Deny"] = "deny";
})(DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum = exports.DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum || (exports.DescribeNetworkAclsResultNetworkAclsEntriesRuleActionEnum = {}));
/**
 * Describes an entry in a network ACL.
 */
var DescribeNetworkAclsResultNetworkAclsEntries = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAclsEntries, _super);
    function DescribeNetworkAclsResultNetworkAclsEntries() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "egress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeNetworkAclsResultNetworkAclsEntriesIcmpTypeCode)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "icmpTypeCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "ipv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeNetworkAclsResultNetworkAclsEntriesPortRange)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "portRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "protocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "ruleAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeNetworkAclsResultNetworkAclsEntries.prototype, "ruleNumber", void 0);
    return DescribeNetworkAclsResultNetworkAclsEntries;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAclsEntries = DescribeNetworkAclsResultNetworkAclsEntries;
/**
 * Describes a tag.
 */
var DescribeNetworkAclsResultNetworkAclsTags = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAclsTags, _super);
    function DescribeNetworkAclsResultNetworkAclsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAclsTags.prototype, "value", void 0);
    return DescribeNetworkAclsResultNetworkAclsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAclsTags = DescribeNetworkAclsResultNetworkAclsTags;
/**
 * Describes a network ACL.
 */
var DescribeNetworkAclsResultNetworkAcls = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResultNetworkAcls, _super);
    function DescribeNetworkAclsResultNetworkAcls() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeNetworkAclsResultNetworkAclsAssociations,
        }),
        __metadata("design:type", Array)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "associations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeNetworkAclsResultNetworkAclsEntries }),
        __metadata("design:type", Array)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "entries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "isDefault", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "networkAclId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeNetworkAclsResultNetworkAclsTags }),
        __metadata("design:type", Array)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResultNetworkAcls.prototype, "vpcId", void 0);
    return DescribeNetworkAclsResultNetworkAcls;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResultNetworkAcls = DescribeNetworkAclsResultNetworkAcls;
/**
 * Success
 */
var DescribeNetworkAclsResult = /** @class */ (function (_super) {
    __extends(DescribeNetworkAclsResult, _super);
    function DescribeNetworkAclsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeNetworkAclsResultNetworkAcls }),
        __metadata("design:type", Array)
    ], DescribeNetworkAclsResult.prototype, "networkAcls", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeNetworkAclsResult.prototype, "nextToken", void 0);
    return DescribeNetworkAclsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeNetworkAclsResult = DescribeNetworkAclsResult;
