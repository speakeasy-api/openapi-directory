"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class WebhookSupportManagedViaEnum(str, Enum):
    r"""How the subscription is managed in the downstream."""
    MANUAL = 'manual'
    API = 'api'

class WebhookSupportModeEnum(str, Enum):
    r"""Mode of the webhook support."""
    NATIVE = 'native'
    VIRTUAL = 'virtual'
    NONE = 'none'

class WebhookSupportSubscriptionLevelEnum(str, Enum):
    r"""Received events are scoped to connection or across integration."""
    CONNECTION = 'connection'
    INTEGRATION = 'integration'

class WebhookSupportVirtualWebhooksRequestRateUnitEnum(str, Enum):
    r"""The window unit for the rate."""
    SECOND = 'second'
    MINUTE = 'minute'
    HOUR = 'hour'
    DAY = 'day'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookSupportVirtualWebhooksRequestRate:
    r"""The rate at which requests for resources will be made to downstream."""
    
    rate: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate') }})
    r"""The number of requests per window unit."""  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Size of request window."""  
    unit: WebhookSupportVirtualWebhooksRequestRateUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The window unit for the rate."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookSupportVirtualWebhooks:
    r"""Virtual webhook config for the connector."""
    
    request_rate: WebhookSupportVirtualWebhooksRequestRate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_rate') }})
    r"""The rate at which requests for resources will be made to downstream."""  
    resources: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})
    r"""The resources that will be requested from downstream."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookSupport:
    r"""How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling."""
    
    managed_via: Optional[WebhookSupportManagedViaEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managed_via'), 'exclude': lambda f: f is None }})
    r"""How the subscription is managed in the downstream."""  
    mode: Optional[WebhookSupportModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Mode of the webhook support."""  
    subscription_level: Optional[WebhookSupportSubscriptionLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_level'), 'exclude': lambda f: f is None }})
    r"""Received events are scoped to connection or across integration."""  
    virtual_webhooks: Optional[WebhookSupportVirtualWebhooks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtual_webhooks'), 'exclude': lambda f: f is None }})
    r"""Virtual webhook config for the connector."""  
    