// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AppPermissionsActionsEnum - The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
type AppPermissionsActionsEnum string

const (
	AppPermissionsActionsEnumRead  AppPermissionsActionsEnum = "read"
	AppPermissionsActionsEnumWrite AppPermissionsActionsEnum = "write"
)

func (e AppPermissionsActionsEnum) ToPointer() *AppPermissionsActionsEnum {
	return &e
}

func (e *AppPermissionsActionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsActionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsActionsEnum: %v", v)
	}
}

// AppPermissionsAdministrationEnum - The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
type AppPermissionsAdministrationEnum string

const (
	AppPermissionsAdministrationEnumRead  AppPermissionsAdministrationEnum = "read"
	AppPermissionsAdministrationEnumWrite AppPermissionsAdministrationEnum = "write"
)

func (e AppPermissionsAdministrationEnum) ToPointer() *AppPermissionsAdministrationEnum {
	return &e
}

func (e *AppPermissionsAdministrationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsAdministrationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsAdministrationEnum: %v", v)
	}
}

// AppPermissionsChecksEnum - The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
type AppPermissionsChecksEnum string

const (
	AppPermissionsChecksEnumRead  AppPermissionsChecksEnum = "read"
	AppPermissionsChecksEnumWrite AppPermissionsChecksEnum = "write"
)

func (e AppPermissionsChecksEnum) ToPointer() *AppPermissionsChecksEnum {
	return &e
}

func (e *AppPermissionsChecksEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsChecksEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsChecksEnum: %v", v)
	}
}

// AppPermissionsContentReferencesEnum - The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
type AppPermissionsContentReferencesEnum string

const (
	AppPermissionsContentReferencesEnumRead  AppPermissionsContentReferencesEnum = "read"
	AppPermissionsContentReferencesEnumWrite AppPermissionsContentReferencesEnum = "write"
)

func (e AppPermissionsContentReferencesEnum) ToPointer() *AppPermissionsContentReferencesEnum {
	return &e
}

func (e *AppPermissionsContentReferencesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsContentReferencesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsContentReferencesEnum: %v", v)
	}
}

// AppPermissionsContentsEnum - The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
type AppPermissionsContentsEnum string

const (
	AppPermissionsContentsEnumRead  AppPermissionsContentsEnum = "read"
	AppPermissionsContentsEnumWrite AppPermissionsContentsEnum = "write"
)

func (e AppPermissionsContentsEnum) ToPointer() *AppPermissionsContentsEnum {
	return &e
}

func (e *AppPermissionsContentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsContentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsContentsEnum: %v", v)
	}
}

// AppPermissionsDeploymentsEnum - The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
type AppPermissionsDeploymentsEnum string

const (
	AppPermissionsDeploymentsEnumRead  AppPermissionsDeploymentsEnum = "read"
	AppPermissionsDeploymentsEnumWrite AppPermissionsDeploymentsEnum = "write"
)

func (e AppPermissionsDeploymentsEnum) ToPointer() *AppPermissionsDeploymentsEnum {
	return &e
}

func (e *AppPermissionsDeploymentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsDeploymentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsDeploymentsEnum: %v", v)
	}
}

// AppPermissionsEnvironmentsEnum - The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
type AppPermissionsEnvironmentsEnum string

const (
	AppPermissionsEnvironmentsEnumRead  AppPermissionsEnvironmentsEnum = "read"
	AppPermissionsEnvironmentsEnumWrite AppPermissionsEnvironmentsEnum = "write"
)

func (e AppPermissionsEnvironmentsEnum) ToPointer() *AppPermissionsEnvironmentsEnum {
	return &e
}

func (e *AppPermissionsEnvironmentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsEnvironmentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsEnvironmentsEnum: %v", v)
	}
}

// AppPermissionsIssuesEnum - The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
type AppPermissionsIssuesEnum string

const (
	AppPermissionsIssuesEnumRead  AppPermissionsIssuesEnum = "read"
	AppPermissionsIssuesEnumWrite AppPermissionsIssuesEnum = "write"
)

func (e AppPermissionsIssuesEnum) ToPointer() *AppPermissionsIssuesEnum {
	return &e
}

func (e *AppPermissionsIssuesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsIssuesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsIssuesEnum: %v", v)
	}
}

// AppPermissionsMembersEnum - The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
type AppPermissionsMembersEnum string

const (
	AppPermissionsMembersEnumRead  AppPermissionsMembersEnum = "read"
	AppPermissionsMembersEnumWrite AppPermissionsMembersEnum = "write"
)

func (e AppPermissionsMembersEnum) ToPointer() *AppPermissionsMembersEnum {
	return &e
}

func (e *AppPermissionsMembersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsMembersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsMembersEnum: %v", v)
	}
}

// AppPermissionsMetadataEnum - The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
type AppPermissionsMetadataEnum string

const (
	AppPermissionsMetadataEnumRead  AppPermissionsMetadataEnum = "read"
	AppPermissionsMetadataEnumWrite AppPermissionsMetadataEnum = "write"
)

func (e AppPermissionsMetadataEnum) ToPointer() *AppPermissionsMetadataEnum {
	return &e
}

func (e *AppPermissionsMetadataEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsMetadataEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsMetadataEnum: %v", v)
	}
}

// AppPermissionsOrganizationAdministrationEnum - The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationAdministrationEnum string

const (
	AppPermissionsOrganizationAdministrationEnumRead  AppPermissionsOrganizationAdministrationEnum = "read"
	AppPermissionsOrganizationAdministrationEnumWrite AppPermissionsOrganizationAdministrationEnum = "write"
)

func (e AppPermissionsOrganizationAdministrationEnum) ToPointer() *AppPermissionsOrganizationAdministrationEnum {
	return &e
}

func (e *AppPermissionsOrganizationAdministrationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationAdministrationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationAdministrationEnum: %v", v)
	}
}

// AppPermissionsOrganizationHooksEnum - The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationHooksEnum string

const (
	AppPermissionsOrganizationHooksEnumRead  AppPermissionsOrganizationHooksEnum = "read"
	AppPermissionsOrganizationHooksEnumWrite AppPermissionsOrganizationHooksEnum = "write"
)

func (e AppPermissionsOrganizationHooksEnum) ToPointer() *AppPermissionsOrganizationHooksEnum {
	return &e
}

func (e *AppPermissionsOrganizationHooksEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationHooksEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationHooksEnum: %v", v)
	}
}

// AppPermissionsOrganizationPackagesEnum - The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
type AppPermissionsOrganizationPackagesEnum string

const (
	AppPermissionsOrganizationPackagesEnumRead  AppPermissionsOrganizationPackagesEnum = "read"
	AppPermissionsOrganizationPackagesEnumWrite AppPermissionsOrganizationPackagesEnum = "write"
)

func (e AppPermissionsOrganizationPackagesEnum) ToPointer() *AppPermissionsOrganizationPackagesEnum {
	return &e
}

func (e *AppPermissionsOrganizationPackagesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationPackagesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationPackagesEnum: %v", v)
	}
}

// AppPermissionsOrganizationPlanEnum - The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
type AppPermissionsOrganizationPlanEnum string

const (
	AppPermissionsOrganizationPlanEnumRead AppPermissionsOrganizationPlanEnum = "read"
)

func (e AppPermissionsOrganizationPlanEnum) ToPointer() *AppPermissionsOrganizationPlanEnum {
	return &e
}

func (e *AppPermissionsOrganizationPlanEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		*e = AppPermissionsOrganizationPlanEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationPlanEnum: %v", v)
	}
}

// AppPermissionsOrganizationProjectsEnum - The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
type AppPermissionsOrganizationProjectsEnum string

const (
	AppPermissionsOrganizationProjectsEnumRead  AppPermissionsOrganizationProjectsEnum = "read"
	AppPermissionsOrganizationProjectsEnumWrite AppPermissionsOrganizationProjectsEnum = "write"
	AppPermissionsOrganizationProjectsEnumAdmin AppPermissionsOrganizationProjectsEnum = "admin"
)

func (e AppPermissionsOrganizationProjectsEnum) ToPointer() *AppPermissionsOrganizationProjectsEnum {
	return &e
}

func (e *AppPermissionsOrganizationProjectsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = AppPermissionsOrganizationProjectsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationProjectsEnum: %v", v)
	}
}

// AppPermissionsOrganizationSecretsEnum - The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
type AppPermissionsOrganizationSecretsEnum string

const (
	AppPermissionsOrganizationSecretsEnumRead  AppPermissionsOrganizationSecretsEnum = "read"
	AppPermissionsOrganizationSecretsEnumWrite AppPermissionsOrganizationSecretsEnum = "write"
)

func (e AppPermissionsOrganizationSecretsEnum) ToPointer() *AppPermissionsOrganizationSecretsEnum {
	return &e
}

func (e *AppPermissionsOrganizationSecretsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationSecretsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationSecretsEnum: %v", v)
	}
}

// AppPermissionsOrganizationSelfHostedRunnersEnum - The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationSelfHostedRunnersEnum string

const (
	AppPermissionsOrganizationSelfHostedRunnersEnumRead  AppPermissionsOrganizationSelfHostedRunnersEnum = "read"
	AppPermissionsOrganizationSelfHostedRunnersEnumWrite AppPermissionsOrganizationSelfHostedRunnersEnum = "write"
)

func (e AppPermissionsOrganizationSelfHostedRunnersEnum) ToPointer() *AppPermissionsOrganizationSelfHostedRunnersEnum {
	return &e
}

func (e *AppPermissionsOrganizationSelfHostedRunnersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationSelfHostedRunnersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationSelfHostedRunnersEnum: %v", v)
	}
}

// AppPermissionsOrganizationUserBlockingEnum - The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationUserBlockingEnum string

const (
	AppPermissionsOrganizationUserBlockingEnumRead  AppPermissionsOrganizationUserBlockingEnum = "read"
	AppPermissionsOrganizationUserBlockingEnumWrite AppPermissionsOrganizationUserBlockingEnum = "write"
)

func (e AppPermissionsOrganizationUserBlockingEnum) ToPointer() *AppPermissionsOrganizationUserBlockingEnum {
	return &e
}

func (e *AppPermissionsOrganizationUserBlockingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationUserBlockingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationUserBlockingEnum: %v", v)
	}
}

// AppPermissionsPackagesEnum - The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
type AppPermissionsPackagesEnum string

const (
	AppPermissionsPackagesEnumRead  AppPermissionsPackagesEnum = "read"
	AppPermissionsPackagesEnumWrite AppPermissionsPackagesEnum = "write"
)

func (e AppPermissionsPackagesEnum) ToPointer() *AppPermissionsPackagesEnum {
	return &e
}

func (e *AppPermissionsPackagesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPackagesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPackagesEnum: %v", v)
	}
}

// AppPermissionsPagesEnum - The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
type AppPermissionsPagesEnum string

const (
	AppPermissionsPagesEnumRead  AppPermissionsPagesEnum = "read"
	AppPermissionsPagesEnumWrite AppPermissionsPagesEnum = "write"
)

func (e AppPermissionsPagesEnum) ToPointer() *AppPermissionsPagesEnum {
	return &e
}

func (e *AppPermissionsPagesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPagesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPagesEnum: %v", v)
	}
}

// AppPermissionsPullRequestsEnum - The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
type AppPermissionsPullRequestsEnum string

const (
	AppPermissionsPullRequestsEnumRead  AppPermissionsPullRequestsEnum = "read"
	AppPermissionsPullRequestsEnumWrite AppPermissionsPullRequestsEnum = "write"
)

func (e AppPermissionsPullRequestsEnum) ToPointer() *AppPermissionsPullRequestsEnum {
	return &e
}

func (e *AppPermissionsPullRequestsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPullRequestsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPullRequestsEnum: %v", v)
	}
}

// AppPermissionsRepositoryHooksEnum - The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
type AppPermissionsRepositoryHooksEnum string

const (
	AppPermissionsRepositoryHooksEnumRead  AppPermissionsRepositoryHooksEnum = "read"
	AppPermissionsRepositoryHooksEnumWrite AppPermissionsRepositoryHooksEnum = "write"
)

func (e AppPermissionsRepositoryHooksEnum) ToPointer() *AppPermissionsRepositoryHooksEnum {
	return &e
}

func (e *AppPermissionsRepositoryHooksEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsRepositoryHooksEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsRepositoryHooksEnum: %v", v)
	}
}

// AppPermissionsRepositoryProjectsEnum - The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
type AppPermissionsRepositoryProjectsEnum string

const (
	AppPermissionsRepositoryProjectsEnumRead  AppPermissionsRepositoryProjectsEnum = "read"
	AppPermissionsRepositoryProjectsEnumWrite AppPermissionsRepositoryProjectsEnum = "write"
	AppPermissionsRepositoryProjectsEnumAdmin AppPermissionsRepositoryProjectsEnum = "admin"
)

func (e AppPermissionsRepositoryProjectsEnum) ToPointer() *AppPermissionsRepositoryProjectsEnum {
	return &e
}

func (e *AppPermissionsRepositoryProjectsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = AppPermissionsRepositoryProjectsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsRepositoryProjectsEnum: %v", v)
	}
}

// AppPermissionsSecretScanningAlertsEnum - The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
type AppPermissionsSecretScanningAlertsEnum string

const (
	AppPermissionsSecretScanningAlertsEnumRead  AppPermissionsSecretScanningAlertsEnum = "read"
	AppPermissionsSecretScanningAlertsEnumWrite AppPermissionsSecretScanningAlertsEnum = "write"
)

func (e AppPermissionsSecretScanningAlertsEnum) ToPointer() *AppPermissionsSecretScanningAlertsEnum {
	return &e
}

func (e *AppPermissionsSecretScanningAlertsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecretScanningAlertsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecretScanningAlertsEnum: %v", v)
	}
}

// AppPermissionsSecretsEnum - The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
type AppPermissionsSecretsEnum string

const (
	AppPermissionsSecretsEnumRead  AppPermissionsSecretsEnum = "read"
	AppPermissionsSecretsEnumWrite AppPermissionsSecretsEnum = "write"
)

func (e AppPermissionsSecretsEnum) ToPointer() *AppPermissionsSecretsEnum {
	return &e
}

func (e *AppPermissionsSecretsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecretsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecretsEnum: %v", v)
	}
}

// AppPermissionsSecurityEventsEnum - The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
type AppPermissionsSecurityEventsEnum string

const (
	AppPermissionsSecurityEventsEnumRead  AppPermissionsSecurityEventsEnum = "read"
	AppPermissionsSecurityEventsEnumWrite AppPermissionsSecurityEventsEnum = "write"
)

func (e AppPermissionsSecurityEventsEnum) ToPointer() *AppPermissionsSecurityEventsEnum {
	return &e
}

func (e *AppPermissionsSecurityEventsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecurityEventsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecurityEventsEnum: %v", v)
	}
}

// AppPermissionsSingleFileEnum - The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
type AppPermissionsSingleFileEnum string

const (
	AppPermissionsSingleFileEnumRead  AppPermissionsSingleFileEnum = "read"
	AppPermissionsSingleFileEnumWrite AppPermissionsSingleFileEnum = "write"
)

func (e AppPermissionsSingleFileEnum) ToPointer() *AppPermissionsSingleFileEnum {
	return &e
}

func (e *AppPermissionsSingleFileEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSingleFileEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSingleFileEnum: %v", v)
	}
}

// AppPermissionsStatusesEnum - The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
type AppPermissionsStatusesEnum string

const (
	AppPermissionsStatusesEnumRead  AppPermissionsStatusesEnum = "read"
	AppPermissionsStatusesEnumWrite AppPermissionsStatusesEnum = "write"
)

func (e AppPermissionsStatusesEnum) ToPointer() *AppPermissionsStatusesEnum {
	return &e
}

func (e *AppPermissionsStatusesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsStatusesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsStatusesEnum: %v", v)
	}
}

// AppPermissionsTeamDiscussionsEnum - The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
type AppPermissionsTeamDiscussionsEnum string

const (
	AppPermissionsTeamDiscussionsEnumRead  AppPermissionsTeamDiscussionsEnum = "read"
	AppPermissionsTeamDiscussionsEnumWrite AppPermissionsTeamDiscussionsEnum = "write"
)

func (e AppPermissionsTeamDiscussionsEnum) ToPointer() *AppPermissionsTeamDiscussionsEnum {
	return &e
}

func (e *AppPermissionsTeamDiscussionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsTeamDiscussionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsTeamDiscussionsEnum: %v", v)
	}
}

// AppPermissionsVulnerabilityAlertsEnum - The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
type AppPermissionsVulnerabilityAlertsEnum string

const (
	AppPermissionsVulnerabilityAlertsEnumRead  AppPermissionsVulnerabilityAlertsEnum = "read"
	AppPermissionsVulnerabilityAlertsEnumWrite AppPermissionsVulnerabilityAlertsEnum = "write"
)

func (e AppPermissionsVulnerabilityAlertsEnum) ToPointer() *AppPermissionsVulnerabilityAlertsEnum {
	return &e
}

func (e *AppPermissionsVulnerabilityAlertsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsVulnerabilityAlertsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsVulnerabilityAlertsEnum: %v", v)
	}
}

// AppPermissionsWorkflowsEnum - The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
type AppPermissionsWorkflowsEnum string

const (
	AppPermissionsWorkflowsEnumWrite AppPermissionsWorkflowsEnum = "write"
)

func (e AppPermissionsWorkflowsEnum) ToPointer() *AppPermissionsWorkflowsEnum {
	return &e
}

func (e *AppPermissionsWorkflowsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "write":
		*e = AppPermissionsWorkflowsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsWorkflowsEnum: %v", v)
	}
}

// AppPermissions - The permissions granted to the user-to-server access token.
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
	Actions *AppPermissionsActionsEnum `json:"actions,omitempty"`
	// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
	Administration *AppPermissionsAdministrationEnum `json:"administration,omitempty"`
	// The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
	Checks *AppPermissionsChecksEnum `json:"checks,omitempty"`
	// The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
	ContentReferences *AppPermissionsContentReferencesEnum `json:"content_references,omitempty"`
	// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
	Contents *AppPermissionsContentsEnum `json:"contents,omitempty"`
	// The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
	Deployments *AppPermissionsDeploymentsEnum `json:"deployments,omitempty"`
	// The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
	Environments *AppPermissionsEnvironmentsEnum `json:"environments,omitempty"`
	// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
	Issues *AppPermissionsIssuesEnum `json:"issues,omitempty"`
	// The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
	Members *AppPermissionsMembersEnum `json:"members,omitempty"`
	// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
	Metadata *AppPermissionsMetadataEnum `json:"metadata,omitempty"`
	// The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
	OrganizationAdministration *AppPermissionsOrganizationAdministrationEnum `json:"organization_administration,omitempty"`
	// The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
	OrganizationHooks *AppPermissionsOrganizationHooksEnum `json:"organization_hooks,omitempty"`
	// The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
	OrganizationPackages *AppPermissionsOrganizationPackagesEnum `json:"organization_packages,omitempty"`
	// The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
	OrganizationPlan *AppPermissionsOrganizationPlanEnum `json:"organization_plan,omitempty"`
	// The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
	OrganizationProjects *AppPermissionsOrganizationProjectsEnum `json:"organization_projects,omitempty"`
	// The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
	OrganizationSecrets *AppPermissionsOrganizationSecretsEnum `json:"organization_secrets,omitempty"`
	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
	OrganizationSelfHostedRunners *AppPermissionsOrganizationSelfHostedRunnersEnum `json:"organization_self_hosted_runners,omitempty"`
	// The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
	OrganizationUserBlocking *AppPermissionsOrganizationUserBlockingEnum `json:"organization_user_blocking,omitempty"`
	// The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
	Packages *AppPermissionsPackagesEnum `json:"packages,omitempty"`
	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
	Pages *AppPermissionsPagesEnum `json:"pages,omitempty"`
	// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
	PullRequests *AppPermissionsPullRequestsEnum `json:"pull_requests,omitempty"`
	// The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
	RepositoryHooks *AppPermissionsRepositoryHooksEnum `json:"repository_hooks,omitempty"`
	// The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
	RepositoryProjects *AppPermissionsRepositoryProjectsEnum `json:"repository_projects,omitempty"`
	// The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
	SecretScanningAlerts *AppPermissionsSecretScanningAlertsEnum `json:"secret_scanning_alerts,omitempty"`
	// The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
	Secrets *AppPermissionsSecretsEnum `json:"secrets,omitempty"`
	// The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
	SecurityEvents *AppPermissionsSecurityEventsEnum `json:"security_events,omitempty"`
	// The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
	SingleFile *AppPermissionsSingleFileEnum `json:"single_file,omitempty"`
	// The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
	Statuses *AppPermissionsStatusesEnum `json:"statuses,omitempty"`
	// The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
	TeamDiscussions *AppPermissionsTeamDiscussionsEnum `json:"team_discussions,omitempty"`
	// The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
	VulnerabilityAlerts *AppPermissionsVulnerabilityAlertsEnum `json:"vulnerability_alerts,omitempty"`
	// The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
	Workflows *AppPermissionsWorkflowsEnum `json:"workflows,omitempty"`
}
