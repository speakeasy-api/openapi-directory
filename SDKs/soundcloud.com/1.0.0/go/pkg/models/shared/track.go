// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TrackAccessEnum - Level of access the user (logged in or anonymous) has to the track.
//   - `playable` - user is allowed to listen to a full track.
//   - `preview` - user is allowed to preview a track, meaning a snippet is available
//   - `blocked` - user can only see the metadata of a track, no streaming is possible
type TrackAccessEnum string

const (
	TrackAccessEnumPlayable TrackAccessEnum = "playable"
	TrackAccessEnumPreview  TrackAccessEnum = "preview"
	TrackAccessEnumBlocked  TrackAccessEnum = "blocked"
	TrackAccessEnumNull     TrackAccessEnum = "null"
)

func (e *TrackAccessEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "playable":
		fallthrough
	case "preview":
		fallthrough
	case "blocked":
		fallthrough
	case "null":
		*e = TrackAccessEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackAccessEnum: %s", s)
	}
}

// Track - Soundcloud Track object.
type Track struct {
	// Level of access the user (logged in or anonymous) has to the track.
	//   * `playable` - user is allowed to listen to a full track.
	//   * `preview` - user is allowed to preview a track, meaning a snippet is available
	//   * `blocked` - user can only see the metadata of a track, no streaming is possible
	//
	Access *TrackAccessEnum `json:"access,omitempty"`
	// URL to a JPEG image.
	ArtworkURL *string `json:"artwork_url,omitempty"`
	// List of countries where track is available.
	AvailableCountryCodes *string `json:"available_country_codes,omitempty"`
	// Tempo.
	Bpm *int64 `json:"bpm,omitempty"`
	// Number of comments.
	CommentCount *int64 `json:"comment_count,omitempty"`
	// Is commentable.
	Commentable *bool `json:"commentable,omitempty"`
	// Created timestamp.
	CreatedAt *string `json:"created_at,omitempty"`
	// Track description.
	Description *string `json:"description,omitempty"`
	// NUmber of downloads.
	DownloadCount *int64 `json:"download_count,omitempty"`
	// URL to download a track.
	DownloadURL *string `json:"download_url,omitempty"`
	// Is downloadable.
	Downloadable *string `json:"downloadable,omitempty"`
	// Track duration.
	Duration *int64 `json:"duration,omitempty"`
	// Embeddable by.
	EmbeddableBy *string `json:"embeddable_by,omitempty"`
	// Number of favoritings.
	FavoritingsCount *int64 `json:"favoritings_count,omitempty"`
	// Genre
	Genre *string `json:"genre,omitempty"`
	// Track identifier.
	ID *int64 `json:"id,omitempty"`
	// ISRC code.
	Isrc *string `json:"isrc,omitempty"`
	// Key signature.
	KeySignature *string `json:"key_signature,omitempty"`
	// Type of object (track).
	Kind *string `json:"kind,omitempty"`
	// Label user name.
	LabelName *string `json:"label_name,omitempty"`
	// License
	License *string `json:"license,omitempty"`
	// Permalink URL.
	PermalinkURL *string `json:"permalink_url,omitempty"`
	// Number of plays.
	PlaybackCount *int64 `json:"playback_count,omitempty"`
	// Purchase title.
	PurchaseTitle *string `json:"purchase_title,omitempty"`
	// Purchase URL.
	PurchaseURL *string `json:"purchase_url,omitempty"`
	// Release.
	Release *string `json:"release,omitempty"`
	// Day of release.
	ReleaseDay *int64 `json:"release_day,omitempty"`
	// Month of release.
	ReleaseMonth *int64 `json:"release_month,omitempty"`
	// Year of release.
	ReleaseYear *int64 `json:"release_year,omitempty"`
	// Number of reposts.
	RepostsCount *int64 `json:"reposts_count,omitempty"`
	// Secret URL.
	SecretURI *string `json:"secret_uri,omitempty"`
	// Type of sharing (public/private).
	Sharing *string `json:"sharing,omitempty"`
	// URL to stream.
	StreamURL *string `json:"stream_url,omitempty"`
	// Is streamable.
	Streamable *bool `json:"streamable,omitempty"`
	// Tags.
	TagList *string `json:"tag_list,omitempty"`
	// Track title.
	Title *string `json:"title,omitempty"`
	// Track URI.
	URI *string `json:"uri,omitempty"`
	// SoundCloud User object.
	User *MetaUser `json:"user,omitempty"`
	// Is user's favourite.
	UserFavorite *bool `json:"user_favorite,omitempty"`
	// Number of plays by a user.
	UserPlaybackCount *int64 `json:"user_playback_count,omitempty"`
	// Waveform URL.
	WaveformURL *string `json:"waveform_url,omitempty"`
}
