"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import detectmitigationactionstaskstatistics as shared_detectmitigationactionstaskstatistics
from ..shared import detectmitigationactionstaskstatus_enum as shared_detectmitigationactionstaskstatus_enum
from ..shared import detectmitigationactionstasktarget as shared_detectmitigationactionstasktarget
from ..shared import mitigationaction as shared_mitigationaction
from ..shared import violationeventoccurrencerange as shared_violationeventoccurrencerange
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DetectMitigationActionsTaskSummary:
    r"""The summary of the mitigation action tasks."""
    
    actions_definition: Optional[list[shared_mitigationaction.MitigationAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionsDefinition'), 'exclude': lambda f: f is None }})  
    only_active_violations_included: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onlyActiveViolationsIncluded'), 'exclude': lambda f: f is None }})  
    suppressed_alerts_included: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suppressedAlertsIncluded'), 'exclude': lambda f: f is None }})  
    target: Optional[shared_detectmitigationactionstasktarget.DetectMitigationActionsTaskTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})  
    task_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    task_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId'), 'exclude': lambda f: f is None }})  
    task_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskStartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    task_statistics: Optional[shared_detectmitigationactionstaskstatistics.DetectMitigationActionsTaskStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskStatistics'), 'exclude': lambda f: f is None }})  
    task_status: Optional[shared_detectmitigationactionstaskstatus_enum.DetectMitigationActionsTaskStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskStatus'), 'exclude': lambda f: f is None }})  
    violation_event_occurrence_range: Optional[shared_violationeventoccurrencerange.ViolationEventOccurrenceRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('violationEventOccurrenceRange'), 'exclude': lambda f: f is None }})  
    