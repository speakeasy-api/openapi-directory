// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETExportClientVpnClientCertificateRevocationListActionEnum
type GETExportClientVpnClientCertificateRevocationListActionEnum string

const (
	GETExportClientVpnClientCertificateRevocationListActionEnumExportClientVpnClientCertificateRevocationList GETExportClientVpnClientCertificateRevocationListActionEnum = "ExportClientVpnClientCertificateRevocationList"
)

func (e *GETExportClientVpnClientCertificateRevocationListActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ExportClientVpnClientCertificateRevocationList":
		*e = GETExportClientVpnClientCertificateRevocationListActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETExportClientVpnClientCertificateRevocationListActionEnum: %s", s)
	}
}

// GETExportClientVpnClientCertificateRevocationListVersionEnum
type GETExportClientVpnClientCertificateRevocationListVersionEnum string

const (
	GETExportClientVpnClientCertificateRevocationListVersionEnumTwoThousandAndSixteen1115 GETExportClientVpnClientCertificateRevocationListVersionEnum = "2016-11-15"
)

func (e *GETExportClientVpnClientCertificateRevocationListVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETExportClientVpnClientCertificateRevocationListVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETExportClientVpnClientCertificateRevocationListVersionEnum: %s", s)
	}
}

type GETExportClientVpnClientCertificateRevocationListRequest struct {
	Action GETExportClientVpnClientCertificateRevocationListActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                                                        `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETExportClientVpnClientCertificateRevocationListVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETExportClientVpnClientCertificateRevocationListResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
