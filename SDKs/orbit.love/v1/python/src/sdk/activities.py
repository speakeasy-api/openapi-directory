"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Activities:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_workspace_slug_members_member_slug_activities_id_(self, request: operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIDRequest, security: operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIDSecurity) -> operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIDResponse:
        r"""Delete a post activity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIDRequest, base_url, '/{workspace_slug}/members/{member_slug}/activities/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_activities(self, request: operations.GetWorkspaceSlugActivitiesRequest, security: operations.GetWorkspaceSlugActivitiesSecurity) -> operations.GetWorkspaceSlugActivitiesResponse:
        r"""List activities for a workspace"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugActivitiesRequest, base_url, '/{workspace_slug}/activities', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugActivitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_activities_id_(self, request: operations.GetWorkspaceSlugActivitiesIDRequest, security: operations.GetWorkspaceSlugActivitiesIDSecurity) -> operations.GetWorkspaceSlugActivitiesIDResponse:
        r"""Get an activity in the workspace"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugActivitiesIDRequest, base_url, '/{workspace_slug}/activities/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugActivitiesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_members_member_slug_activities(self, request: operations.GetWorkspaceSlugMembersMemberSlugActivitiesRequest, security: operations.GetWorkspaceSlugMembersMemberSlugActivitiesSecurity) -> operations.GetWorkspaceSlugMembersMemberSlugActivitiesResponse:
        r"""List activities for a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugMembersMemberSlugActivitiesRequest, base_url, '/{workspace_slug}/members/{member_slug}/activities', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugMembersMemberSlugActivitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugMembersMemberSlugActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_organizations_organization_id_activities(self, request: operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesRequest, security: operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesSecurity) -> operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesResponse:
        r"""List member activities in an organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesRequest, base_url, '/{workspace_slug}/organizations/{organization_id}/activities', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugOrganizationsOrganizationIDActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_workspace_slug_activities(self, request: operations.PostWorkspaceSlugActivitiesRequest, security: operations.PostWorkspaceSlugActivitiesSecurity) -> operations.PostWorkspaceSlugActivitiesResponse:
        r"""Create a Custom or a Content activity for a new or existing member
        Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspaceSlugActivitiesRequest, base_url, '/{workspace_slug}/activities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "activity_and_identity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspaceSlugActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_workspace_slug_members_member_slug_activities(self, request: operations.PostWorkspaceSlugMembersMemberSlugActivitiesRequest, security: operations.PostWorkspaceSlugMembersMemberSlugActivitiesSecurity) -> operations.PostWorkspaceSlugMembersMemberSlugActivitiesResponse:
        r"""Create a Custom or a Content activity for a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspaceSlugMembersMemberSlugActivitiesRequest, base_url, '/{workspace_slug}/members/{member_slug}/activities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspaceSlugMembersMemberSlugActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_workspace_slug_members_member_slug_activities_id_(self, request: operations.PutWorkspaceSlugMembersMemberSlugActivitiesIDRequest, security: operations.PutWorkspaceSlugMembersMemberSlugActivitiesIDSecurity) -> operations.PutWorkspaceSlugMembersMemberSlugActivitiesIDResponse:
        r"""Update a custom activity for a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWorkspaceSlugMembersMemberSlugActivitiesIDRequest, base_url, '/{workspace_slug}/members/{member_slug}/activities/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "activity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWorkspaceSlugMembersMemberSlugActivitiesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    