"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateRelationalDatabaseRequest:
    
    master_database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterDatabaseName') }})  
    master_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterUsername') }})  
    relational_database_blueprint_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseBlueprintId') }})  
    relational_database_bundle_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseBundleId') }})  
    relational_database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseName') }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityZone'), 'exclude': lambda f: f is None }})  
    master_user_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterUserPassword'), 'exclude': lambda f: f is None }})  
    preferred_backup_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredBackupWindow'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publiclyAccessible'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    