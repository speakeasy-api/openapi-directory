"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connectionlog as shared_connectionlog
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetUsersIDUserLogsRequest:
    
    id_user_path_parameter: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id_user', 'style': 'simple', 'explode': False }})
    r"""Hint: you can use 'me' or 'all'"""  
    connector_uuid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'connector_uuid', 'style': 'form', 'explode': True }})
    r"""UUID of a connector"""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'error', 'style': 'form', 'explode': True }})
    r"""connections log error filter"""  
    expand: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})  
    id_connection: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_connection', 'style': 'form', 'explode': True }})
    r"""ID of a connection"""  
    id_connector: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_connector', 'style': 'form', 'explode': True }})
    r"""ID of a connector"""  
    id_max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_max', 'style': 'form', 'explode': True }})
    r"""filter \\"id\\" of logs, maximum id to return"""  
    id_source: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_source', 'style': 'form', 'explode': True }})
    r"""ID of a source"""  
    id_user_query_parameter: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_user', 'style': 'form', 'explode': True }})
    r"""ID of a user"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""limit number of results"""  
    max_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_date', 'style': 'form', 'explode': True }})
    r"""maximum date"""  
    min_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_date', 'style': 'form', 'explode': True }})
    r"""minimal date"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""offset of first result"""  
    period: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'period', 'style': 'form', 'explode': True }})
    r"""period to group logs"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsersIDUserLogs200ApplicationJSON:
    r"""connectionlogs"""
    
    connectionlogs: list[shared_connectionlog.ConnectionLog] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionlogs') }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""total number of results"""  
    

@dataclasses.dataclass
class GetUsersIDUserLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_users_id_user_logs_200_application_json_object: Optional[GetUsersIDUserLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""connectionlogs"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    