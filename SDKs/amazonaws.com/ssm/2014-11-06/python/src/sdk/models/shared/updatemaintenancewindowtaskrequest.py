"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alarmconfiguration as shared_alarmconfiguration
from ..shared import logginginfo as shared_logginginfo
from ..shared import maintenancewindowtaskcutoffbehavior_enum as shared_maintenancewindowtaskcutoffbehavior_enum
from ..shared import maintenancewindowtaskinvocationparameters as shared_maintenancewindowtaskinvocationparameters
from ..shared import maintenancewindowtaskparametervalueexpression as shared_maintenancewindowtaskparametervalueexpression
from ..shared import target as shared_target
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMaintenanceWindowTaskRequest:
    
    window_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindowId') }})  
    window_task_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindowTaskId') }})  
    alarm_configuration: Optional[shared_alarmconfiguration.AlarmConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmConfiguration'), 'exclude': lambda f: f is None }})  
    cutoff_behavior: Optional[shared_maintenancewindowtaskcutoffbehavior_enum.MaintenanceWindowTaskCutoffBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CutoffBehavior'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    logging_info: Optional[shared_logginginfo.LoggingInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoggingInfo'), 'exclude': lambda f: f is None }})  
    max_concurrency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrency'), 'exclude': lambda f: f is None }})  
    max_errors: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxErrors'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Priority'), 'exclude': lambda f: f is None }})  
    replace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Replace'), 'exclude': lambda f: f is None }})  
    service_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRoleArn'), 'exclude': lambda f: f is None }})  
    targets: Optional[list[shared_target.Target]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Targets'), 'exclude': lambda f: f is None }})  
    task_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskArn'), 'exclude': lambda f: f is None }})  
    task_invocation_parameters: Optional[shared_maintenancewindowtaskinvocationparameters.MaintenanceWindowTaskInvocationParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskInvocationParameters'), 'exclude': lambda f: f is None }})  
    task_parameters: Optional[dict[str, shared_maintenancewindowtaskparametervalueexpression.MaintenanceWindowTaskParameterValueExpression]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskParameters'), 'exclude': lambda f: f is None }})  
    