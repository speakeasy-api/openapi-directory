<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://media.twilio.com',
	];
	
	public const CREATE_MEDIA_PROCESSOR_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const CREATE_PLAYER_STREAMER_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const DELETE_MEDIA_RECORDING_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const FETCH_MEDIA_PROCESSOR_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const FETCH_MEDIA_RECORDING_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const FETCH_PLAYER_STREAMER_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const LIST_MEDIA_PROCESSOR_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const LIST_MEDIA_RECORDING_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const LIST_PLAYER_STREAMER_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const UPDATE_MEDIA_PROCESSOR_SERVERS = [
		'https://media.twilio.com',
	];
	
	public const UPDATE_PLAYER_STREAMER_SERVERS = [
		'https://media.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createMediaProcessor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorCreateMediaProcessorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorResponse
     */
	public function createMediaProcessor(
        \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorCreateMediaProcessorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorResponse
    {
        $baseUrl = SDK::CREATE_MEDIA_PROCESSOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaProcessors');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMediaProcessorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1MediaProcessor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1MediaProcessor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createPlayerStreamer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerCreatePlayerStreamerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerResponse
     */
	public function createPlayerStreamer(
        \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerCreatePlayerStreamerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerResponse
    {
        $baseUrl = SDK::CREATE_PLAYER_STREAMER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1PlayerStreamer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1PlayerStreamer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createPlayerStreamerPlaybackGrant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantResponse
     */
	public function createPlayerStreamerPlaybackGrant(
        \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantResponse
    {
        $baseUrl = SDK::CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers/{Sid}/PlaybackGrant', \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePlayerStreamerPlaybackGrantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1PlayerStreamerPlayerStreamerPlaybackGrant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a MediaRecording resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingResponse
     */
	public function deleteMediaRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingResponse
    {
        $baseUrl = SDK::DELETE_MEDIA_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaRecordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns a single MediaProcessor resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorResponse
     */
	public function fetchMediaProcessor(
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorResponse
    {
        $baseUrl = SDK::FETCH_MEDIA_PROCESSOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaProcessors/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMediaProcessorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1MediaProcessor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1MediaProcessor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single MediaRecording resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingResponse
     */
	public function fetchMediaRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingResponse
    {
        $baseUrl = SDK::FETCH_MEDIA_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaRecordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMediaRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1MediaRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1MediaRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single PlayerStreamer resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerResponse
     */
	public function fetchPlayerStreamer(
        \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerResponse
    {
        $baseUrl = SDK::FETCH_PLAYER_STREAMER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1PlayerStreamer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1PlayerStreamer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantResponse
     */
	public function fetchPlayerStreamerPlaybackGrant(
        \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantResponse
    {
        $baseUrl = SDK::FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers/{Sid}/PlaybackGrant', \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPlayerStreamerPlaybackGrantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1PlayerStreamerPlayerStreamerPlaybackGrant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1PlayerStreamerPlayerStreamerPlaybackGrant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of MediaProcessors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorResponse
     */
	public function listMediaProcessor(
        \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorResponse
    {
        $baseUrl = SDK::LIST_MEDIA_PROCESSOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaProcessors');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMediaProcessorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMediaProcessorListMediaProcessorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of MediaRecordings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingResponse
     */
	public function listMediaRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingResponse
    {
        $baseUrl = SDK::LIST_MEDIA_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaRecordings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMediaRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMediaRecordingListMediaRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of PlayerStreamers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerResponse
     */
	public function listPlayerStreamer(
        \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerResponse
    {
        $baseUrl = SDK::LIST_PLAYER_STREAMER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPlayerStreamerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPlayerStreamerListPlayerStreamerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a MediaProcessor resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorResponse
     */
	public function updateMediaProcessor(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorResponse
    {
        $baseUrl = SDK::UPDATE_MEDIA_PROCESSOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/MediaProcessors/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMediaProcessorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1MediaProcessor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1MediaProcessor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a PlayerStreamer resource identified by a SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerResponse
     */
	public function updatePlayerStreamer(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerResponse
    {
        $baseUrl = SDK::UPDATE_PLAYER_STREAMER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/PlayerStreamers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePlayerStreamerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaV1PlayerStreamer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaV1PlayerStreamer', 'json');
            }
        }

        return $response;
    }
}