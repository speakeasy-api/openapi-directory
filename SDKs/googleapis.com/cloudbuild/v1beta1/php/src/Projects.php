<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelResponse
     */
	public function cloudbuildProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a `WorkerPool` to run the builds, and returns the new worker pool. NOTE: As of now, this method returns an `Operation` that is always complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateResponse
     */
	public function cloudbuildProjectsLocationsWorkerPoolsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workerPools', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workerPoolInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteResponse
     */
	public function cloudbuildProjectsLocationsWorkerPoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns details of a `WorkerPool`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetResponse
     */
	public function cloudbuildProjectsLocationsWorkerPoolsGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workerPool = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkerPool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists `WorkerPool`s in the given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListResponse
     */
	public function cloudbuildProjectsLocationsWorkerPoolsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/workerPools', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkerPoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkerPoolsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchResponse
     */
	public function cloudbuildProjectsLocationsWorkerPoolsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workerPoolInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudbuildProjectsLocationsWorkerPoolsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}