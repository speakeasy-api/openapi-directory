// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FamiliesBabysittingExceptionEnum - Babysitting exception.
type FamiliesBabysittingExceptionEnum string

const (
	FamiliesBabysittingExceptionEnumExceptionUnspecified FamiliesBabysittingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FamiliesBabysittingExceptionEnumUnderConstruction    FamiliesBabysittingExceptionEnum = "UNDER_CONSTRUCTION"
	FamiliesBabysittingExceptionEnumDependentOnSeason    FamiliesBabysittingExceptionEnum = "DEPENDENT_ON_SEASON"
	FamiliesBabysittingExceptionEnumDependentOnDayOfWeek FamiliesBabysittingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FamiliesBabysittingExceptionEnum) ToPointer() *FamiliesBabysittingExceptionEnum {
	return &e
}

func (e *FamiliesBabysittingExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FamiliesBabysittingExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FamiliesBabysittingExceptionEnum: %v", v)
	}
}

// FamiliesKidsActivitiesExceptionEnum - Kids activities exception.
type FamiliesKidsActivitiesExceptionEnum string

const (
	FamiliesKidsActivitiesExceptionEnumExceptionUnspecified FamiliesKidsActivitiesExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FamiliesKidsActivitiesExceptionEnumUnderConstruction    FamiliesKidsActivitiesExceptionEnum = "UNDER_CONSTRUCTION"
	FamiliesKidsActivitiesExceptionEnumDependentOnSeason    FamiliesKidsActivitiesExceptionEnum = "DEPENDENT_ON_SEASON"
	FamiliesKidsActivitiesExceptionEnumDependentOnDayOfWeek FamiliesKidsActivitiesExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FamiliesKidsActivitiesExceptionEnum) ToPointer() *FamiliesKidsActivitiesExceptionEnum {
	return &e
}

func (e *FamiliesKidsActivitiesExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FamiliesKidsActivitiesExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FamiliesKidsActivitiesExceptionEnum: %v", v)
	}
}

// FamiliesKidsClubExceptionEnum - Kids club exception.
type FamiliesKidsClubExceptionEnum string

const (
	FamiliesKidsClubExceptionEnumExceptionUnspecified FamiliesKidsClubExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FamiliesKidsClubExceptionEnumUnderConstruction    FamiliesKidsClubExceptionEnum = "UNDER_CONSTRUCTION"
	FamiliesKidsClubExceptionEnumDependentOnSeason    FamiliesKidsClubExceptionEnum = "DEPENDENT_ON_SEASON"
	FamiliesKidsClubExceptionEnumDependentOnDayOfWeek FamiliesKidsClubExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FamiliesKidsClubExceptionEnum) ToPointer() *FamiliesKidsClubExceptionEnum {
	return &e
}

func (e *FamiliesKidsClubExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FamiliesKidsClubExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FamiliesKidsClubExceptionEnum: %v", v)
	}
}

// Families - Services and amenities for families and young guests.
type Families struct {
	// Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.
	Babysitting *bool `json:"babysitting,omitempty"`
	// Babysitting exception.
	BabysittingException *FamiliesBabysittingExceptionEnum `json:"babysittingException,omitempty"`
	// Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.
	KidsActivities *bool `json:"kidsActivities,omitempty"`
	// Kids activities exception.
	KidsActivitiesException *FamiliesKidsActivitiesExceptionEnum `json:"kidsActivitiesException,omitempty"`
	// Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.
	KidsClub *bool `json:"kidsClub,omitempty"`
	// Kids club exception.
	KidsClubException *FamiliesKidsClubExceptionEnum `json:"kidsClubException,omitempty"`
}
