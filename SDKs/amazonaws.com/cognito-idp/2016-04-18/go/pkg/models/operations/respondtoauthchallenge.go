// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RespondToAuthChallengeXAmzTargetEnum
type RespondToAuthChallengeXAmzTargetEnum string

const (
	RespondToAuthChallengeXAmzTargetEnumAwsCognitoIdentityProviderServiceRespondToAuthChallenge RespondToAuthChallengeXAmzTargetEnum = "AWSCognitoIdentityProviderService.RespondToAuthChallenge"
)

func (e RespondToAuthChallengeXAmzTargetEnum) ToPointer() *RespondToAuthChallengeXAmzTargetEnum {
	return &e
}

func (e *RespondToAuthChallengeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSCognitoIdentityProviderService.RespondToAuthChallenge":
		*e = RespondToAuthChallengeXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RespondToAuthChallengeXAmzTargetEnum: %v", v)
	}
}

type RespondToAuthChallengeRequest struct {
	RespondToAuthChallengeRequest shared.RespondToAuthChallengeRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    RespondToAuthChallengeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RespondToAuthChallengeResponse struct {
	// AliasExistsException
	AliasExistsException interface{}
	// CodeMismatchException
	CodeMismatchException interface{}
	ContentType           string
	// ExpiredCodeException
	ExpiredCodeException interface{}
	// ForbiddenException
	ForbiddenException interface{}
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidLambdaResponseException
	InvalidLambdaResponseException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidPasswordException
	InvalidPasswordException interface{}
	// InvalidSmsRoleAccessPolicyException
	InvalidSmsRoleAccessPolicyException interface{}
	// InvalidSmsRoleTrustRelationshipException
	InvalidSmsRoleTrustRelationshipException interface{}
	// InvalidUserPoolConfigurationException
	InvalidUserPoolConfigurationException interface{}
	// MFAMethodNotFoundException
	MFAMethodNotFoundException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// PasswordResetRequiredException
	PasswordResetRequiredException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	RespondToAuthChallengeResponse *shared.RespondToAuthChallengeResponse
	StatusCode                     int
	RawResponse                    *http.Response
	// SoftwareTokenMFANotFoundException
	SoftwareTokenMFANotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnexpectedLambdaException
	UnexpectedLambdaException interface{}
	// UserLambdaValidationException
	UserLambdaValidationException interface{}
	// UserNotConfirmedException
	UserNotConfirmedException interface{}
	// UserNotFoundException
	UserNotFoundException interface{}
}
