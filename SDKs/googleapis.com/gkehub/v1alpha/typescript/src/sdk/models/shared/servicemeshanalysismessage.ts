/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ServiceMeshAnalysisMessageBase } from "./servicemeshanalysismessagebase";
import { Expose, Type } from "class-transformer";

/**
 * AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
 */
export class ServiceMeshAnalysisMessage extends SpeakeasyBase {
  /**
   * A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "args" })
  args?: Record<string, any>;

  /**
   * A human readable description of what the error means. It is suitable for non-internationalize display purposes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * AnalysisMessageBase describes some common information that is needed for all messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messageBase" })
  @Type(() => ServiceMeshAnalysisMessageBase)
  messageBase?: ServiceMeshAnalysisMessageBase;

  /**
   * A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourcePaths" })
  resourcePaths?: string[];
}
