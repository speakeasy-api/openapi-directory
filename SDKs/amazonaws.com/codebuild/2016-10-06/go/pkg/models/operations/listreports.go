// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListReportsXAmzTargetEnum
type ListReportsXAmzTargetEnum string

const (
	ListReportsXAmzTargetEnumCodeBuild20161006ListReports ListReportsXAmzTargetEnum = "CodeBuild_20161006.ListReports"
)

func (e ListReportsXAmzTargetEnum) ToPointer() *ListReportsXAmzTargetEnum {
	return &e
}

func (e *ListReportsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeBuild_20161006.ListReports":
		*e = ListReportsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsXAmzTargetEnum: %v", v)
	}
}

type ListReportsRequest struct {
	ListReportsInput  shared.ListReportsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListReportsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListReportsResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// Success
	ListReportsOutput *shared.ListReportsOutput
	StatusCode        int
	RawResponse       *http.Response
}
