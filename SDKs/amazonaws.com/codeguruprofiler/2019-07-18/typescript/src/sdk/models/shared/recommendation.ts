/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Match } from "./match";
import { Pattern } from "./pattern";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A potential improvement that was found from analyzing the profiling data.
 */
export class Recommendation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allMatchesCount" })
  allMatchesCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "allMatchesSum" })
  allMatchesSum: number;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "pattern" })
  @Type(() => Pattern)
  pattern: Pattern;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime: Date;

  @SpeakeasyMetadata({ elemType: Match })
  @Expose({ name: "topMatches" })
  @Type(() => Match)
  topMatches: Match[];
}
