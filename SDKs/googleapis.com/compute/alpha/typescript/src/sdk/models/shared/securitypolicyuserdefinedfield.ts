/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
 */
export enum SecurityPolicyUserDefinedFieldBaseEnum {
  Ipv4 = "IPV4",
  Ipv6 = "IPV6",
  Tcp = "TCP",
  Udp = "UDP",
}

export class SecurityPolicyUserDefinedField extends SpeakeasyBase {
  /**
   * The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
   */
  @SpeakeasyMetadata()
  @Expose({ name: "base" })
  base?: SecurityPolicyUserDefinedFieldBaseEnum;

  /**
   * If specified, apply this mask (bitwise AND) to the field to ignore bits before matching. Encoded as a hexadecimal number (starting with "0x"). The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mask" })
  mask?: string;

  /**
   * The name of this field. Must be unique within the policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Offset of the first byte of the field (in network byte order) relative to 'base'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Size of the field in bytes. Valid values: 1-4.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;
}
