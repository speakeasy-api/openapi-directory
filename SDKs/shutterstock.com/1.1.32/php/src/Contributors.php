<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Contributors 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get details about a single contributor
     * 
     * This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributorResponse
     */
	public function getContributor(
        \OpenAPI\OpenAPI\Models\Operations\GetContributorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContributorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/contributors/{contributor_id}', \OpenAPI\OpenAPI\Models\Operations\GetContributorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contributorProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContributorProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get the items in contributors' collections
     * 
     * This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsResponse
     */
	public function getContributorCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/contributors/{contributor_id}/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionItemDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionItemDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get details about contributors' collections
     * 
     * This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsResponse
     */
	public function getContributorCollections(
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/contributors/{contributor_id}/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List contributors' collections
     * 
     * This endpoint lists collections based on contributor ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListResponse
     */
	public function getContributorCollectionsList(
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/contributors/{contributor_id}/collections', \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributorCollectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get details about multiple contributors
     * 
     * This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributorListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributorListResponse
     */
	public function getContributorList(
        \OpenAPI\OpenAPI\Models\Operations\GetContributorListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContributorListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributorListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/contributors');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContributorListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributorListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contributorProfileDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContributorProfileDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}