// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestSoftwareVersionXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestSoftwareVersionXSdsDateFormatEnum string

const (
	RequestSoftwareVersionXSdsDateFormatEnumUtc    RequestSoftwareVersionXSdsDateFormatEnum = "UTC"
	RequestSoftwareVersionXSdsDateFormatEnumLocal  RequestSoftwareVersionXSdsDateFormatEnum = "LOCAL"
	RequestSoftwareVersionXSdsDateFormatEnumOffset RequestSoftwareVersionXSdsDateFormatEnum = "OFFSET"
	RequestSoftwareVersionXSdsDateFormatEnumEpoch  RequestSoftwareVersionXSdsDateFormatEnum = "EPOCH"
	RequestSoftwareVersionXSdsDateFormatEnumLeet   RequestSoftwareVersionXSdsDateFormatEnum = "LEET"
)

func (e RequestSoftwareVersionXSdsDateFormatEnum) ToPointer() *RequestSoftwareVersionXSdsDateFormatEnum {
	return &e
}

func (e *RequestSoftwareVersionXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestSoftwareVersionXSdsDateFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestSoftwareVersionXSdsDateFormatEnum: %v", v)
	}
}

type RequestSoftwareVersionRequest struct {
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestSoftwareVersionXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
}

type RequestSoftwareVersionResponse struct {
	ContentType string
	// Not Acceptable
	ErrorResponse *shared.ErrorResponse
	// OK
	SoftwareVersionData *shared.SoftwareVersionData
	StatusCode          int
	RawResponse         *http.Response
}
