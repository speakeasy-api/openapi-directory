"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsageSnapshotEntity:
    r"""List Usage Snapshots"""
    
    bytes_sent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytes_sent'), 'exclude': lambda f: f is None }})
    r"""Transfer Usage for period - Outbound GB from Files Native Storage"""  
    current_storage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_storage'), 'exclude': lambda f: f is None }})
    r"""Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)"""  
    deleted_files_counted_in_minimum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_files_counted_in_minimum'), 'exclude': lambda f: f is None }})
    r"""Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)"""  
    deleted_files_storage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_files_storage'), 'exclude': lambda f: f is None }})
    r"""Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)"""  
    end_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Usage snapshot end date/time"""  
    high_water_storage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('high_water_storage'), 'exclude': lambda f: f is None }})
    r"""Highest Storage Usage GB recorded in time period (used for billing)"""  
    high_water_user_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('high_water_user_count'), 'exclude': lambda f: f is None }})
    r"""Highest user count number in time period"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Usage snapshot ID"""  
    root_storage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('root_storage'), 'exclude': lambda f: f is None }})
    r"""Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)"""  
    start_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Usage snapshot start date/time"""  
    sync_bytes_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sync_bytes_received'), 'exclude': lambda f: f is None }})
    r"""Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)"""  
    sync_bytes_sent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sync_bytes_sent'), 'exclude': lambda f: f is None }})
    r"""Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)"""  
    total_billable_transfer_usage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_billable_transfer_usage'), 'exclude': lambda f: f is None }})
    r"""Transfer usage for period - Total Billable amount"""  
    total_billable_usage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_billable_usage'), 'exclude': lambda f: f is None }})
    r"""Storage + Transfer Usage - Total Billable amount"""  
    usage_by_top_level_dir: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage_by_top_level_dir'), 'exclude': lambda f: f is None }})
    r"""Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)"""  
    