// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SongListAPIGetSongsPathParams struct {
	// ID of the song list.
	ListID int `pathParam:"style=simple,explode=false,name=listId"`
}

// SongListAPIGetSongsFieldsEnum - List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
type SongListAPIGetSongsFieldsEnum string

const (
	SongListAPIGetSongsFieldsEnumNone            SongListAPIGetSongsFieldsEnum = "None"
	SongListAPIGetSongsFieldsEnumAdditionalNames SongListAPIGetSongsFieldsEnum = "AdditionalNames"
	SongListAPIGetSongsFieldsEnumAlbums          SongListAPIGetSongsFieldsEnum = "Albums"
	SongListAPIGetSongsFieldsEnumArtists         SongListAPIGetSongsFieldsEnum = "Artists"
	SongListAPIGetSongsFieldsEnumLyrics          SongListAPIGetSongsFieldsEnum = "Lyrics"
	SongListAPIGetSongsFieldsEnumMainPicture     SongListAPIGetSongsFieldsEnum = "MainPicture"
	SongListAPIGetSongsFieldsEnumNames           SongListAPIGetSongsFieldsEnum = "Names"
	SongListAPIGetSongsFieldsEnumPVs             SongListAPIGetSongsFieldsEnum = "PVs"
	SongListAPIGetSongsFieldsEnumReleaseEvent    SongListAPIGetSongsFieldsEnum = "ReleaseEvent"
	SongListAPIGetSongsFieldsEnumTags            SongListAPIGetSongsFieldsEnum = "Tags"
	SongListAPIGetSongsFieldsEnumThumbURL        SongListAPIGetSongsFieldsEnum = "ThumbUrl"
	SongListAPIGetSongsFieldsEnumWebLinks        SongListAPIGetSongsFieldsEnum = "WebLinks"
)

func (e *SongListAPIGetSongsFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Albums":
		fallthrough
	case "Artists":
		fallthrough
	case "Lyrics":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "ThumbUrl":
		fallthrough
	case "WebLinks":
		*e = SongListAPIGetSongsFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongListAPIGetSongsFieldsEnum: %s", s)
	}
}

// SongListAPIGetSongsLangEnum - Content language preference (optional).
type SongListAPIGetSongsLangEnum string

const (
	SongListAPIGetSongsLangEnumDefault  SongListAPIGetSongsLangEnum = "Default"
	SongListAPIGetSongsLangEnumJapanese SongListAPIGetSongsLangEnum = "Japanese"
	SongListAPIGetSongsLangEnumRomaji   SongListAPIGetSongsLangEnum = "Romaji"
	SongListAPIGetSongsLangEnumEnglish  SongListAPIGetSongsLangEnum = "English"
)

func (e *SongListAPIGetSongsLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = SongListAPIGetSongsLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongListAPIGetSongsLangEnum: %s", s)
	}
}

// SongListAPIGetSongsNameMatchModeEnum - Match mode for song name (optional, defaults to Auto).
type SongListAPIGetSongsNameMatchModeEnum string

const (
	SongListAPIGetSongsNameMatchModeEnumAuto       SongListAPIGetSongsNameMatchModeEnum = "Auto"
	SongListAPIGetSongsNameMatchModeEnumPartial    SongListAPIGetSongsNameMatchModeEnum = "Partial"
	SongListAPIGetSongsNameMatchModeEnumStartsWith SongListAPIGetSongsNameMatchModeEnum = "StartsWith"
	SongListAPIGetSongsNameMatchModeEnumExact      SongListAPIGetSongsNameMatchModeEnum = "Exact"
	SongListAPIGetSongsNameMatchModeEnumWords      SongListAPIGetSongsNameMatchModeEnum = "Words"
)

func (e *SongListAPIGetSongsNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = SongListAPIGetSongsNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongListAPIGetSongsNameMatchModeEnum: %s", s)
	}
}

// SongListAPIGetSongsPvServicesEnum - Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
type SongListAPIGetSongsPvServicesEnum string

const (
	SongListAPIGetSongsPvServicesEnumNothing       SongListAPIGetSongsPvServicesEnum = "Nothing"
	SongListAPIGetSongsPvServicesEnumNicoNicoDouga SongListAPIGetSongsPvServicesEnum = "NicoNicoDouga"
	SongListAPIGetSongsPvServicesEnumYoutube       SongListAPIGetSongsPvServicesEnum = "Youtube"
	SongListAPIGetSongsPvServicesEnumSoundCloud    SongListAPIGetSongsPvServicesEnum = "SoundCloud"
	SongListAPIGetSongsPvServicesEnumVimeo         SongListAPIGetSongsPvServicesEnum = "Vimeo"
	SongListAPIGetSongsPvServicesEnumPiapro        SongListAPIGetSongsPvServicesEnum = "Piapro"
	SongListAPIGetSongsPvServicesEnumBilibili      SongListAPIGetSongsPvServicesEnum = "Bilibili"
	SongListAPIGetSongsPvServicesEnumFile          SongListAPIGetSongsPvServicesEnum = "File"
	SongListAPIGetSongsPvServicesEnumLocalFile     SongListAPIGetSongsPvServicesEnum = "LocalFile"
	SongListAPIGetSongsPvServicesEnumCreofuga      SongListAPIGetSongsPvServicesEnum = "Creofuga"
	SongListAPIGetSongsPvServicesEnumBandcamp      SongListAPIGetSongsPvServicesEnum = "Bandcamp"
)

func (e *SongListAPIGetSongsPvServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = SongListAPIGetSongsPvServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongListAPIGetSongsPvServicesEnum: %s", s)
	}
}

// SongListAPIGetSongsSortEnum - Song sort rule (optional, by default songs are sorted by song list order).
type SongListAPIGetSongsSortEnum string

const (
	SongListAPIGetSongsSortEnumNone           SongListAPIGetSongsSortEnum = "None"
	SongListAPIGetSongsSortEnumName           SongListAPIGetSongsSortEnum = "Name"
	SongListAPIGetSongsSortEnumAdditionDate   SongListAPIGetSongsSortEnum = "AdditionDate"
	SongListAPIGetSongsSortEnumPublishDate    SongListAPIGetSongsSortEnum = "PublishDate"
	SongListAPIGetSongsSortEnumFavoritedTimes SongListAPIGetSongsSortEnum = "FavoritedTimes"
	SongListAPIGetSongsSortEnumRatingScore    SongListAPIGetSongsSortEnum = "RatingScore"
	SongListAPIGetSongsSortEnumTagUsageCount  SongListAPIGetSongsSortEnum = "TagUsageCount"
)

func (e *SongListAPIGetSongsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "PublishDate":
		fallthrough
	case "FavoritedTimes":
		fallthrough
	case "RatingScore":
		fallthrough
	case "TagUsageCount":
		*e = SongListAPIGetSongsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongListAPIGetSongsSortEnum: %s", s)
	}
}

type SongListAPIGetSongsQueryParams struct {
	// List of advanced filters (optional).
	AdvancedFilters []interface{} `queryParam:"style=form,explode=true,name=advancedFilters"`
	// Filter by artist Id.
	ArtistID []int `queryParam:"style=form,explode=true,name=artistId"`
	// Include child voicebanks, if the artist being filtered by has any.
	ChildVoicebanks *bool `queryParam:"style=form,explode=true,name=childVoicebanks"`
	// List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
	Fields *SongListAPIGetSongsFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Content language preference (optional).
	Lang *SongListAPIGetSongsLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for song name (optional, defaults to Auto).
	NameMatchMode *SongListAPIGetSongsNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
	PvServices *SongListAPIGetSongsPvServicesEnum `queryParam:"style=form,explode=true,name=pvServices"`
	// Song name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filtered song types (optional).
	SongTypes *string `queryParam:"style=form,explode=true,name=songTypes"`
	// Song sort rule (optional, by default songs are sorted by song list order).
	Sort *SongListAPIGetSongsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by one or more tag Ids (optional).
	TagID []int `queryParam:"style=form,explode=true,name=tagId"`
}

type SongListAPIGetSongsRequest struct {
	PathParams  SongListAPIGetSongsPathParams
	QueryParams SongListAPIGetSongsQueryParams
}

type SongListAPIGetSongsResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultSongInListForAPIContract *shared.PartialFindResultSongInListForAPIContract
	StatusCode                                int
	RawResponse                               *http.Response
}
