/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateSiteRackPhysicalPropertiesRequestBody {
    /**
     * The type of fiber that you will use to attach the Outpost to your network. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FiberOpticCableType")
    public UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum fiberOpticCableType;

    public UpdateSiteRackPhysicalPropertiesRequestBody withFiberOpticCableType(UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum fiberOpticCableType) {
        this.fiberOpticCableType = fiberOpticCableType;
        return this;
    }
    
    /**
     * The maximum rack weight that this site can support. &lt;code&gt;NO_LIMIT&lt;/code&gt; is over 2000lbs. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumSupportedWeightLbs")
    public UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum maximumSupportedWeightLbs;

    public UpdateSiteRackPhysicalPropertiesRequestBody withMaximumSupportedWeightLbs(UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum maximumSupportedWeightLbs) {
        this.maximumSupportedWeightLbs = maximumSupportedWeightLbs;
        return this;
    }
    
    /**
     * &lt;p&gt;The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see &lt;a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking"&gt;Network&lt;/a&gt; in the Amazon Web Services Outposts User Guide. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_10GBASE_SR&lt;/code&gt;: 10GBASE-SR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_10GBASE_IR&lt;/code&gt;: 10GBASE-IR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_10GBASE_LR&lt;/code&gt;: 10GBASE-LR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_40GBASE_SR&lt;/code&gt;: 40GBASE-SR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_40GBASE_ESR&lt;/code&gt;: 40GBASE-ESR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_40GBASE_IR4_LR4L&lt;/code&gt;: 40GBASE-IR (LR4L)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_40GBASE_LR4&lt;/code&gt;: 40GBASE-LR4&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_100GBASE_SR4&lt;/code&gt;: 100GBASE-SR4&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_100GBASE_CWDM4&lt;/code&gt;: 100GBASE-CWDM4&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_100GBASE_LR4&lt;/code&gt;: 100GBASE-LR4&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_100G_PSM4_MSA&lt;/code&gt;: 100G PSM4 MSA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_1000BASE_LX&lt;/code&gt;: 1000Base-LX&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OPTIC_1000BASE_SX&lt;/code&gt; : 1000Base-SX&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpticalStandard")
    public UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum opticalStandard;

    public UpdateSiteRackPhysicalPropertiesRequestBody withOpticalStandard(UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum opticalStandard) {
        this.opticalStandard = opticalStandard;
        return this;
    }
    
    /**
     * &lt;p&gt;The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between &lt;code&gt;PowerPhase&lt;/code&gt; and &lt;code&gt;PowerConnector&lt;/code&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Single-phase AC feed&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;L6-30P&lt;/b&gt; \u2013 (common in US); 30A; single phase&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;IEC309 (blue)&lt;/b&gt; \u2013 P+N+E, 6hr; 32 A; single phase&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Three-phase AC feed&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AH530P7W (red)&lt;/b&gt; \u2013 3P+N+E, 7hr; 30A; three phase&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AH532P6W (red)&lt;/b&gt; \u2013 3P+N+E, 6hr; 32A; three phase&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerConnector")
    public UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum powerConnector;

    public UpdateSiteRackPhysicalPropertiesRequestBody withPowerConnector(UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum powerConnector) {
        this.powerConnector = powerConnector;
        return this;
    }
    
    /**
     * The power draw, in kVA, available at the hardware placement position for the rack.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerDrawKva")
    public UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum powerDrawKva;

    public UpdateSiteRackPhysicalPropertiesRequestBody withPowerDrawKva(UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum powerDrawKva) {
        this.powerDrawKva = powerDrawKva;
        return this;
    }
    
    /**
     * Indicates whether the power feed comes above or below the rack. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFeedDrop")
    public UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum powerFeedDrop;

    public UpdateSiteRackPhysicalPropertiesRequestBody withPowerFeedDrop(UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum powerFeedDrop) {
        this.powerFeedDrop = powerFeedDrop;
        return this;
    }
    
    /**
     * &lt;p&gt;The power option that you can provide for hardware. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerPhase")
    public UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum powerPhase;

    public UpdateSiteRackPhysicalPropertiesRequestBody withPowerPhase(UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum powerPhase) {
        this.powerPhase = powerPhase;
        return this;
    }
    
    /**
     * &lt;p&gt;Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between &lt;code&gt;UplinkGbps&lt;/code&gt; and &lt;code&gt;UplinkCount&lt;/code&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;1Gbps - Uplinks available: 1, 2, 4, 6, 8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;40 and 100 Gbps- Uplinks available: 1, 2, 4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UplinkCount")
    public UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum uplinkCount;

    public UpdateSiteRackPhysicalPropertiesRequestBody withUplinkCount(UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum uplinkCount) {
        this.uplinkCount = uplinkCount;
        return this;
    }
    
    /**
     * The uplink speed the rack should support for the connection to the Region. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UplinkGbps")
    public UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum uplinkGbps;

    public UpdateSiteRackPhysicalPropertiesRequestBody withUplinkGbps(UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum uplinkGbps) {
        this.uplinkGbps = uplinkGbps;
        return this;
    }
    
    public UpdateSiteRackPhysicalPropertiesRequestBody(){}
}
