<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DeviceSettings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Night Mode settings
     * 
     * This sets night mode options.  
     * To view currently set values, use /setup/eureka_info.  
     * If `enabled` is set to false, night mode is disabled and the other values do not matter.  
     * `led_brightness` and `volume` refer to the maximum LED Brightness and Volume that is set during night mode.  
     * `demo_to_user` is always set to `true` so change in values will be visible in realtime (like brightness).  
     * `windows`: A combination of `length_hours` and `start_hour` is used to define start and end times for night mode. In this example, night mode starts at 10 PM (22) and ends at 6 AM (8 hours later). `windows.days` is an array of days of week when night mode will be enabled. Example: 0->Sunday, 1-> Monday, ..., 6->Saturday.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NightModesettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NightModesettingsResponse
     */
	public function nightModesettings(
        \OpenAPI\OpenAPI\Models\Shared\NightModesettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NightModesettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/set_night_mode_params');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NightModesettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example17 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example17', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reboot and Factory Reset
     * 
     * This can simply reboot the device (`params: "now"`) or factory reset the device (`params: "fdr"`).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RebootandFactoryResetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RebootandFactoryResetResponse
     */
	public function rebootandFactoryReset(
        \OpenAPI\OpenAPI\Models\Shared\RebootandFactoryResetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RebootandFactoryResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reboot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RebootandFactoryResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->rebootandFactoryReset200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Set Eureka Info
     * 
     * This can set custom values to some options.
     * 
     * Only fields to be modified need to be sent, not all. The example has some modifiable fields.
     * 
     * TODO: List all modifiable fields.
     * 
     * Sending non-existant fields will still return a 200 OK, but they are not saved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SetEurekaInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetEurekaInfoResponse
     */
	public function setEurekaInfo(
        \OpenAPI\OpenAPI\Models\Shared\SetEurekaInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetEurekaInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/set_eureka_info');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetEurekaInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->setEurekaInfo200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}