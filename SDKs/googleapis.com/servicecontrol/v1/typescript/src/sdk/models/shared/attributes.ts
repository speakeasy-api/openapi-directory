/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { Expose, Transform } from "class-transformer";

/**
 * A set of attributes, each in the format `[KEY]:[VALUE]`.
 */
export class Attributes extends SpeakeasyBase {
  /**
   * The set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the Boolean values `true` and `false`. For example: "/instance_id": "my-instance" "/http/user_agent": "" "/http/request_bytes": 300 "abc.com/myattribute": true
   */
  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "attributeMap" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  attributeMap?: Record<string, AttributeValue>;

  /**
   * The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "droppedAttributesCount" })
  droppedAttributesCount?: number;
}
