// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostTokensRequestBodyChannelEnum string

const (
	PostTokensRequestBodyChannelEnumPhysical PostTokensRequestBodyChannelEnum = "physical"
	PostTokensRequestBodyChannelEnumSlack    PostTokensRequestBodyChannelEnum = "slack"
	PostTokensRequestBodyChannelEnumTelegram PostTokensRequestBodyChannelEnum = "telegram"
	PostTokensRequestBodyChannelEnumSms      PostTokensRequestBodyChannelEnum = "sms"
)

func (e PostTokensRequestBodyChannelEnum) ToPointer() *PostTokensRequestBodyChannelEnum {
	return &e
}

func (e *PostTokensRequestBodyChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "slack":
		fallthrough
	case "telegram":
		fallthrough
	case "sms":
		*e = PostTokensRequestBodyChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostTokensRequestBodyChannelEnum: %v", v)
	}
}

// PostTokensRequestBody - Include token properties to create here
type PostTokensRequestBody struct {
	Active     bool                             `json:"active"`
	Channel    PostTokensRequestBodyChannelEnum `json:"channel"`
	Driver     string                           `json:"driver"`
	PhysicalID string                           `json:"physicalId"`
	Type       *string                          `json:"type,omitempty"`
}

// PostTokens201ApplicationJSON - Returns a newly created token object
type PostTokens201ApplicationJSON struct {
	Message *string       `json:"message,omitempty"`
	Ok      *bool         `json:"ok,omitempty"`
	Result  []interface{} `json:"result,omitempty"`
}

type PostTokensResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns a newly created token object
	PostTokens201ApplicationJSONObject *PostTokens201ApplicationJSON
}
