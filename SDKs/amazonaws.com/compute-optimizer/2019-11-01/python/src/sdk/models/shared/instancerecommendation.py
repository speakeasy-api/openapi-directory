"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import currentperformancerisk_enum as shared_currentperformancerisk_enum
from ..shared import effectiverecommendationpreferences as shared_effectiverecommendationpreferences
from ..shared import finding_enum as shared_finding_enum
from ..shared import inferredworkloadtype_enum as shared_inferredworkloadtype_enum
from ..shared import instancerecommendationfindingreasoncode_enum as shared_instancerecommendationfindingreasoncode_enum
from ..shared import instancerecommendationoption as shared_instancerecommendationoption
from ..shared import recommendationsource as shared_recommendationsource
from ..shared import utilizationmetric as shared_utilizationmetric
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceRecommendation:
    r"""Describes an Amazon EC2 instance recommendation."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})  
    current_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentInstanceType'), 'exclude': lambda f: f is None }})  
    current_performance_risk: Optional[shared_currentperformancerisk_enum.CurrentPerformanceRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPerformanceRisk'), 'exclude': lambda f: f is None }})  
    effective_recommendation_preferences: Optional[shared_effectiverecommendationpreferences.EffectiveRecommendationPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveRecommendationPreferences'), 'exclude': lambda f: f is None }})  
    finding: Optional[shared_finding_enum.FindingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finding'), 'exclude': lambda f: f is None }})  
    finding_reason_codes: Optional[list[shared_instancerecommendationfindingreasoncode_enum.InstanceRecommendationFindingReasonCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingReasonCodes'), 'exclude': lambda f: f is None }})  
    inferred_workload_types: Optional[list[shared_inferredworkloadtype_enum.InferredWorkloadTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inferredWorkloadTypes'), 'exclude': lambda f: f is None }})  
    instance_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceArn'), 'exclude': lambda f: f is None }})  
    instance_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceName'), 'exclude': lambda f: f is None }})  
    last_refresh_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRefreshTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    look_back_period_in_days: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookBackPeriodInDays'), 'exclude': lambda f: f is None }})  
    recommendation_options: Optional[list[shared_instancerecommendationoption.InstanceRecommendationOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationOptions'), 'exclude': lambda f: f is None }})  
    recommendation_sources: Optional[list[shared_recommendationsource.RecommendationSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationSources'), 'exclude': lambda f: f is None }})  
    utilization_metrics: Optional[list[shared_utilizationmetric.UtilizationMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utilizationMetrics'), 'exclude': lambda f: f is None }})  
    