/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AppRestrictionsSchemaChangeEvent } from "./apprestrictionsschemachangeevent";
import { AppUpdateEvent } from "./appupdateevent";
import { DeviceReportUpdateEvent } from "./devicereportupdateevent";
import { InstallFailureEvent } from "./installfailureevent";
import { NewDeviceEvent } from "./newdeviceevent";
import { NewPermissionsEvent } from "./newpermissionsevent";
import { ProductApprovalEvent } from "./productapprovalevent";
import { ProductAvailabilityChangeEvent } from "./productavailabilitychangeevent";
import { Expose, Type } from "class-transformer";

/**
 * Type of the notification.
 */
export enum NotificationNotificationTypeEnum {
  Unknown = "unknown",
  TestNotification = "testNotification",
  ProductApproval = "productApproval",
  InstallFailure = "installFailure",
  AppUpdate = "appUpdate",
  NewPermissions = "newPermissions",
  AppRestricionsSchemaChange = "appRestricionsSchemaChange",
  ProductAvailabilityChange = "productAvailabilityChange",
  NewDevice = "newDevice",
  DeviceReportUpdate = "deviceReportUpdate",
}

/**
 * A notification of one event relating to an enterprise.
 */
export class Notification extends SpeakeasyBase {
  /**
   * An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appRestrictionsSchemaChangeEvent" })
  @Type(() => AppRestrictionsSchemaChangeEvent)
  appRestrictionsSchemaChangeEvent?: AppRestrictionsSchemaChangeEvent;

  /**
   * An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appUpdateEvent" })
  @Type(() => AppUpdateEvent)
  appUpdateEvent?: AppUpdateEvent;

  /**
   * An event generated when an updated device report is available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceReportUpdateEvent" })
  @Type(() => DeviceReportUpdateEvent)
  deviceReportUpdateEvent?: DeviceReportUpdateEvent;

  /**
   * The ID of the enterprise for which the notification is sent. This will always be present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enterpriseId" })
  enterpriseId?: string;

  /**
   * An event generated when an app installation failed on a device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "installFailureEvent" })
  @Type(() => InstallFailureEvent)
  installFailureEvent?: InstallFailureEvent;

  /**
   * An event generated when a new device is ready to be managed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newDeviceEvent" })
  @Type(() => NewDeviceEvent)
  newDeviceEvent?: NewDeviceEvent;

  /**
   * An event generated when new permissions are added to an app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newPermissionsEvent" })
  @Type(() => NewPermissionsEvent)
  newPermissionsEvent?: NewPermissionsEvent;

  /**
   * Type of the notification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notificationType" })
  notificationType?: NotificationNotificationTypeEnum;

  /**
   * An event generated when a product's approval status is changed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productApprovalEvent" })
  @Type(() => ProductApprovalEvent)
  productApprovalEvent?: ProductApprovalEvent;

  /**
   * An event generated whenever a product's availability changes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productAvailabilityChangeEvent" })
  @Type(() => ProductAvailabilityChangeEvent)
  productAvailabilityChangeEvent?: ProductAvailabilityChangeEvent;

  /**
   * The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampMillis" })
  timestampMillis?: string;
}
