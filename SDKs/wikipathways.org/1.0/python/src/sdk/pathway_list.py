"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class PathwayList:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_get_curation_tags_by_name(self, request: operations.GetGetCurationTagsByNameRequest) -> operations.GetGetCurationTagsByNameResponse:
        r"""getCurationTagsByNameGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getCurationTagsByName'
        
        query_params = utils.get_query_params(operations.GetGetCurationTagsByNameRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetCurationTagsByNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_pathways_by_ontology_term(self, request: operations.GetGetPathwaysByOntologyTermRequest) -> operations.GetGetPathwaysByOntologyTermResponse:
        r"""getPathwaysByOntologyTerm"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPathwaysByOntologyTerm'
        
        query_params = utils.get_query_params(operations.GetGetPathwaysByOntologyTermRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetPathwaysByOntologyTermResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_pathways_by_parent_ontology_term(self, request: operations.GetGetPathwaysByParentOntologyTermRequest) -> operations.GetGetPathwaysByParentOntologyTermResponse:
        r"""getPathwaysByParentOntologyTerm"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPathwaysByParentOntologyTerm'
        
        query_params = utils.get_query_params(operations.GetGetPathwaysByParentOntologyTermRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetPathwaysByParentOntologyTermResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_list_pathways(self, request: operations.GetListPathwaysRequest) -> operations.GetListPathwaysResponse:
        r"""listPathways"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listPathways'
        
        query_params = utils.get_query_params(operations.GetListPathwaysRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListPathwaysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    