"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import electronic_address as shared_electronic_address
from ..shared import organisation_address as shared_organisation_address
from ..shared import organisation_name as shared_organisation_name
from ..shared import registered_identifier as shared_registered_identifier
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class OrganisationLegalEntityTypeEnum(str, Enum):
    r"""The organisation's legal entity type."""
    COMPANY = 'Company'
    PARTNERSHIP = 'Partnership'
    TRUST = 'Trust'
    JOINT_VENTURE = 'Joint Venture'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganisationInput:
    r"""The Organisation resource."""
    
    establishment_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('establishmentDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)."""  
    legal_entity_type: OrganisationLegalEntityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalEntityType') }})
    r"""The organisation's legal entity type."""  
    addresses: Optional[list[shared_organisation_address.OrganisationAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    electronic_addresses: Optional[list[shared_electronic_address.ElectronicAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicAddresses'), 'exclude': lambda f: f is None }})  
    names: Optional[list[shared_organisation_name.OrganisationNameInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})  
    registered_identifiers: Optional[list[shared_registered_identifier.RegisteredIdentifierInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredIdentifiers'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Organisation:
    r"""The Organisation resource."""
    
    establishment_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('establishmentDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)."""  
    legal_entity_type: OrganisationLegalEntityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalEntityType') }})
    r"""The organisation's legal entity type."""  
    addresses: Optional[list[shared_organisation_address.OrganisationAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    electronic_addresses: Optional[list[shared_electronic_address.ElectronicAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicAddresses'), 'exclude': lambda f: f is None }})  
    from_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The party's unique identifier."""  
    names: Optional[list[shared_organisation_name.OrganisationName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})  
    registered_identifiers: Optional[list[shared_registered_identifier.RegisteredIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredIdentifiers'), 'exclude': lambda f: f is None }})  
    to_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    