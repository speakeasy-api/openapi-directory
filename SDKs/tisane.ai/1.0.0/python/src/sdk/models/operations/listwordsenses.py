"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class ListWordSensesRequest:
    
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""(Required) a standard culture code (ISO-639 language code with an optional country extension)"""  
    ocp_apim_subscription_key: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Ocp-Apim-Subscription-Key', 'style': 'simple', 'explode': False }})
    r"""{{apiKeyDescription}}"""  
    word: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'word', 'style': 'form', 'explode': True }})
    r"""(Required) the word to inspect"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWordSenses200ApplicationJSONFamilies:
    
    definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})  
    key: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key'), 'exclude': lambda f: f is None }})  
    value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWordSenses200ApplicationJSONFeatures:
    
    index: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWordSenses200ApplicationJSON:
    
    families: Optional[list[ListWordSenses200ApplicationJSONFamilies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('families'), 'exclude': lambda f: f is None }})  
    features: Optional[list[ListWordSenses200ApplicationJSONFeatures]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})  
    frequency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})  
    is_lemma: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLemma'), 'exclude': lambda f: f is None }})  
    legacy_map_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legacyMapId'), 'exclude': lambda f: f is None }})  
    lemma: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lemma'), 'exclude': lambda f: f is None }})  
    lexeme_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lexemeId'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListWordSensesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_word_senses_200_application_json_objects: Optional[list[ListWordSenses200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Interpretations of \\"couscous\\" """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    