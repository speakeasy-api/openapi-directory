/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PatientAuthPurposeEnum } from "./patientauthpurposeenum";
import { Expose, Transform, Type } from "class-transformer";

export enum PatientAuthModeQueryRequestQueryRequesterTypeEnum {
  Hip = "HIP",
  Hiu = "HIU",
}

export class PatientAuthModeQueryRequestQueryRequester extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientAuthModeQueryRequestQueryRequesterTypeEnum;
}

export class PatientAuthModeQueryRequestQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * what is the purpose of user auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  purpose: PatientAuthPurposeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "requester" })
  @Type(() => PatientAuthModeQueryRequestQueryRequester)
  requester: PatientAuthModeQueryRequestQueryRequester;
}

export class PatientAuthModeQueryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientAuthModeQueryRequestQuery)
  query: PatientAuthModeQueryRequestQuery;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
