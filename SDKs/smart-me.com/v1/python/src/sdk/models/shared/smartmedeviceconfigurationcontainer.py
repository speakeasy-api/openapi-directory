"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inputconfigurationcontainer as shared_inputconfigurationcontainer
from ..shared import outputconfigurationcontainer as shared_outputconfigurationcontainer
from ..shared import switchconfigurationcontainer as shared_switchconfigurationcontainer
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SmartMeDeviceConfigurationContainerDNSUpdateStateEnum(str, Enum):
    r"""Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS"""
    NO_UPDATE = 'NoUpdate'
    DNS_UPDATE_PUBLIC_IP = 'DnsUpdatePublicIp'
    DNS_UPDATE_INTERNAL_IP = 'DnsUpdateInternalIp'

class SmartMeDeviceConfigurationContainerUploadIntervalEnum(str, Enum):
    r"""Number of seconds the device will upload the data. For smaller values maybe a professional license is needed."""
    UPLOAD_INTERVAL_1S = 'UploadInterval_1s'
    UPLOAD_INTERVAL_5S = 'UploadInterval_5s'
    UPLOAD_INTERVAL_10S = 'UploadInterval_10s'
    UPLOAD_INTERVAL_30S = 'UploadInterval_30s'
    UPLOAD_INTERVAL_60S = 'UploadInterval_60s'
    UPLOAD_INTERVAL_5MIN = 'UploadInterval_5min'
    UPLOAD_INTERVAL_15MIN = 'UploadInterval_15min'
    UPLOAD_INTERVAL_30MIN = 'UploadInterval_30min'
    UPLOAD_INTERVAL_60MIN = 'UploadInterval_60min'
    UPLOAD_INTERVAL_6H = 'UploadInterval_6h'
    UPLOAD_INTERVAL_12H = 'UploadInterval_12h'
    UPLOAD_INTERVAL_24H = 'UploadInterval_24h'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SmartMeDeviceConfigurationContainer:
    r"""API Container class for the meter configuration"""
    
    device_encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceEncryptionKey'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DeviceEncryptionKey' }})
    r"""The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)"""  
    device_pin_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DevicePinCode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DevicePinCode' }})
    r"""PIN code to enter on a external meter (e.g. for the FNN meters)"""  
    dns_update_state: Optional[SmartMeDeviceConfigurationContainerDNSUpdateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsUpdateState'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DnsUpdateState' }})
    r"""Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS"""  
    enable_modbus_tcp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableModbusTcp'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'EnableModbusTcp' }})
    r"""Enables or disables Modbus TCP (if the meter supports it)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Id' }})
    r"""The ID of the device"""  
    input_configuration: Optional[list[shared_inputconfigurationcontainer.InputConfigurationContainer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfiguration'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InputConfiguration', 'json': True }})
    r"""The configuration for the intput outputs"""  
    output_configuration: Optional[list[shared_outputconfigurationcontainer.OutputConfigurationContainer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfiguration'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'OutputConfiguration', 'json': True }})
    r"""The configuration for the external outputs"""  
    show_reactive_energy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShowReactiveEnergy'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShowReactiveEnergy' }})
    r"""Shows the reactive energy values (if the meter supports it)."""  
    switch_configuration: Optional[list[shared_switchconfigurationcontainer.SwitchConfigurationContainer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SwitchConfiguration'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'SwitchConfiguration', 'json': True }})
    r"""The configuration for the phase switches"""  
    upload_interval: Optional[SmartMeDeviceConfigurationContainerUploadIntervalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UploadInterval'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'UploadInterval' }})
    r"""Number of seconds the device will upload the data. For smaller values maybe a professional license is needed."""  
    