"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import corpuskeysemantics_enum as shared_corpuskeysemantics_enum
from ..shared import vectaraservingcustomdimension as shared_vectaraservingcustomdimension
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServingCorpusKey:
    
    corpus_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corpusId'), 'exclude': lambda f: f is None }})
    r"""The Corpus ID."""  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})
    r"""The Customer ID."""  
    dim: Optional[list[shared_vectaraservingcustomdimension.VectaraservingCustomDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dim'), 'exclude': lambda f: f is None }})
    r"""Weights on custom dimensions for the corpus."""  
    metadata_filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataFilter'), 'exclude': lambda f: f is None }})  
    semantics: Optional[shared_corpuskeysemantics_enum.CorpusKeySemanticsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('semantics'), 'exclude': lambda f: f is None }})
    r"""Semantics controls the interpretation of the query string by the
    server, and can be used to override the default semantics assigned
    in the corpus definition.
    
    
    
    
     - DEFAULT: Use corpus-assigned semantics.  This is the most common setting.
     - QUERY: Use query semantics.  This is also common.
     - RESPONSE: Use response semantics.  Usage of this is rare.
    """  
    