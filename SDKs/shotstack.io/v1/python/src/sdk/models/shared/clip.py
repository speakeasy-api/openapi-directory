"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import offset as shared_offset
from ..shared import transition as shared_transition
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ClipEffectEnum(str, Enum):
    r"""A motion effect to apply to the Clip. <ul>
      <li>`zoomIn` - slow zoom in</li>
      <li>`zoomOut` - slow zoom out</li>
      <li>`slideLeft` - slow slide (pan) left</li>
      <li>`slideRight` - slow slide (pan) right</li>
      <li>`slideUp` - slow slide (pan) up</li>
      <li>`slideDown` - slow slide (pan) down</li>
    </ul>
    """
    ZOOM_IN = 'zoomIn'
    ZOOM_OUT = 'zoomOut'
    SLIDE_LEFT = 'slideLeft'
    SLIDE_RIGHT = 'slideRight'
    SLIDE_UP = 'slideUp'
    SLIDE_DOWN = 'slideDown'

class ClipFilterEnum(str, Enum):
    r"""A filter effect to apply to the Clip. <ul>
      <li>`boost` - boost contrast and saturation</li>
      <li>`contrast` - increase contrast</li>
      <li>`darken` - darken the scene</li>
      <li>`greyscale` - remove colour</li>
      <li>`lighten` - lighten the scene</li>
      <li>`muted` - reduce saturation and contrast</li>
      <li>`invert` - invert colors</li>
    </ul>
    """
    BOOST = 'boost'
    CONTRAST = 'contrast'
    DARKEN = 'darken'
    GREYSCALE = 'greyscale'
    LIGHTEN = 'lighten'
    MUTED = 'muted'
    NEGATIVE = 'negative'

class ClipFitEnum(str, Enum):
    r"""Set how the asset should be scaled to fit the viewport using one of the following options:
      <ul>
        <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>
        <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>
        <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>
        <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>
      </ul>
    """
    COVER = 'cover'
    CONTAIN = 'contain'
    CROP = 'crop'
    NONE = 'none'

class ClipPositionEnum(str, Enum):
    r"""Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>
      <li>`top` - top (center)</li>
      <li>`topRight` - top right</li>
      <li>`right` - right (center)</li>
      <li>`bottomRight` - bottom right</li>
      <li>`bottom` - bottom (center)</li>
      <li>`bottomLeft` - bottom left</li>
      <li>`left` - left (center)</li>
      <li>`topLeft` - top left</li>
      <li>`center` - center</li>
    </ul>
    """
    TOP = 'top'
    TOP_RIGHT = 'topRight'
    RIGHT = 'right'
    BOTTOM_RIGHT = 'bottomRight'
    BOTTOM = 'bottom'
    BOTTOM_LEFT = 'bottomLeft'
    LEFT = 'left'
    TOP_LEFT = 'topLeft'
    CENTER = 'center'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Clip:
    r"""A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it."""
    
    asset: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset') }})
    r"""The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b>, <b>VideoAsset</b>, <b>HtmlAsset</b>, <b>AudioAsset</b> or <b>LumaAsset</b>"""  
    length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})
    r"""The length, in seconds, the Clip should play for."""  
    start: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start') }})
    r"""The start position of the Clip on the timeline, in seconds."""  
    effect: Optional[ClipEffectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect'), 'exclude': lambda f: f is None }})
    r"""A motion effect to apply to the Clip. <ul>
      <li>`zoomIn` - slow zoom in</li>
      <li>`zoomOut` - slow zoom out</li>
      <li>`slideLeft` - slow slide (pan) left</li>
      <li>`slideRight` - slow slide (pan) right</li>
      <li>`slideUp` - slow slide (pan) up</li>
      <li>`slideDown` - slow slide (pan) down</li>
    </ul>
    """  
    filter: Optional[ClipFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""A filter effect to apply to the Clip. <ul>
      <li>`boost` - boost contrast and saturation</li>
      <li>`contrast` - increase contrast</li>
      <li>`darken` - darken the scene</li>
      <li>`greyscale` - remove colour</li>
      <li>`lighten` - lighten the scene</li>
      <li>`muted` - reduce saturation and contrast</li>
      <li>`invert` - invert colors</li>
    </ul>
    """  
    fit: Optional[ClipFitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fit'), 'exclude': lambda f: f is None }})
    r"""Set how the asset should be scaled to fit the viewport using one of the following options:
      <ul>
        <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>
        <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>
        <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>
        <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>
      </ul>
    """  
    offset: Optional[shared_offset.Offset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Offsets the position of an asset horizontally or vertically by a relative distance."""  
    opacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opacity'), 'exclude': lambda f: f is None }})
    r"""Sets the opacity of the Clip where 1 is opaque and 0 is transparent."""  
    position: Optional[ClipPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>
      <li>`top` - top (center)</li>
      <li>`topRight` - top right</li>
      <li>`right` - right (center)</li>
      <li>`bottomRight` - bottom right</li>
      <li>`bottom` - bottom (center)</li>
      <li>`bottomLeft` - bottom left</li>
      <li>`left` - left (center)</li>
      <li>`topLeft` - top left</li>
      <li>`center` - center</li>
    </ul>
    """  
    scale: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scale'), 'exclude': lambda f: f is None }})
    r"""Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks."""  
    transition: Optional[shared_transition.Transition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transition'), 'exclude': lambda f: f is None }})
    r"""In and out transitions for a clip - i.e. fade in and fade out"""  
    