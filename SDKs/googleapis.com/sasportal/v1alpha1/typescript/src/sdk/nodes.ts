/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Nodes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Signs a device.
   */
  sasportalNodesDevicesSignDevice(
    req: operations.SasportalNodesDevicesSignDeviceRequest,
    security: operations.SasportalNodesDevicesSignDeviceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesDevicesSignDeviceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesDevicesSignDeviceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:signDevice",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalSignDeviceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesDevicesSignDeviceSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesDevicesSignDeviceResponse =
        new operations.SasportalNodesDevicesSignDeviceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a signed device.
   */
  sasportalNodesDevicesUpdateSigned(
    req: operations.SasportalNodesDevicesUpdateSignedRequest,
    security: operations.SasportalNodesDevicesUpdateSignedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesDevicesUpdateSignedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesDevicesUpdateSignedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:updateSigned",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalUpdateSignedDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesDevicesUpdateSignedSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesDevicesUpdateSignedResponse =
        new operations.SasportalNodesDevicesUpdateSignedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a node.
   */
  sasportalNodesNodesDelete(
    req: operations.SasportalNodesNodesDeleteRequest,
    security: operations.SasportalNodesNodesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDeleteResponse =
        new operations.SasportalNodesNodesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new deployment.
   */
  sasportalNodesNodesDeploymentsCreate(
    req: operations.SasportalNodesNodesDeploymentsCreateRequest,
    security: operations.SasportalNodesNodesDeploymentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDeploymentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDeploymentsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/deployments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalDeploymentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDeploymentsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDeploymentsCreateResponse =
        new operations.SasportalNodesNodesDeploymentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDeployment = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists deployments.
   */
  sasportalNodesNodesDeploymentsList(
    req: operations.SasportalNodesNodesDeploymentsListRequest,
    security: operations.SasportalNodesNodesDeploymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDeploymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDeploymentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/deployments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDeploymentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDeploymentsListResponse =
        new operations.SasportalNodesNodesDeploymentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListDeploymentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListDeploymentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a device under a node or customer.
   */
  sasportalNodesNodesDevicesCreate(
    req: operations.SasportalNodesNodesDevicesCreateRequest,
    security: operations.SasportalNodesNodesDevicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDevicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDevicesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalDeviceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDevicesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDevicesCreateResponse =
        new operations.SasportalNodesNodesDevicesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a signed device under a node or customer.
   */
  sasportalNodesNodesDevicesCreateSigned(
    req: operations.SasportalNodesNodesDevicesCreateSignedRequest,
    security: operations.SasportalNodesNodesDevicesCreateSignedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDevicesCreateSignedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDevicesCreateSignedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices:createSigned",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalCreateSignedDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDevicesCreateSignedSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDevicesCreateSignedResponse =
        new operations.SasportalNodesNodesDevicesCreateSignedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists devices under a node or customer.
   */
  sasportalNodesNodesDevicesList(
    req: operations.SasportalNodesNodesDevicesListRequest,
    security: operations.SasportalNodesNodesDevicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesDevicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesDevicesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesDevicesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesDevicesListResponse =
        new operations.SasportalNodesNodesDevicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListDevicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListDevicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a requested node.
   */
  sasportalNodesNodesGet(
    req: operations.SasportalNodesNodesGetRequest,
    security: operations.SasportalNodesNodesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesGetResponse =
        new operations.SasportalNodesNodesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves a node under another node or customer.
   */
  sasportalNodesNodesMove(
    req: operations.SasportalNodesNodesMoveRequest,
    security: operations.SasportalNodesNodesMoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesMoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesMoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:move",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalMoveNodeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesMoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesMoveResponse =
        new operations.SasportalNodesNodesMoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalOperation = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new node.
   */
  sasportalNodesNodesNodesCreate(
    req: operations.SasportalNodesNodesNodesCreateRequest,
    security: operations.SasportalNodesNodesNodesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesNodesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesNodesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/nodes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalNode",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesNodesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesNodesCreateResponse =
        new operations.SasportalNodesNodesNodesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists nodes.
   */
  sasportalNodesNodesNodesList(
    req: operations.SasportalNodesNodesNodesListRequest,
    security: operations.SasportalNodesNodesNodesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesNodesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesNodesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/nodes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesNodesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesNodesListResponse =
        new operations.SasportalNodesNodesNodesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListNodesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListNodesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing node.
   */
  sasportalNodesNodesPatch(
    req: operations.SasportalNodesNodesPatchRequest,
    security: operations.SasportalNodesNodesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SasportalNodesNodesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SasportalNodesNodesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalNode",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SasportalNodesNodesPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SasportalNodesNodesPatchResponse =
        new operations.SasportalNodesNodesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }
}
