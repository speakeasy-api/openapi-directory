// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetPullRequestApprovalStatesXAmzTargetEnum
type GetPullRequestApprovalStatesXAmzTargetEnum string

const (
	GetPullRequestApprovalStatesXAmzTargetEnumCodeCommit20150413GetPullRequestApprovalStates GetPullRequestApprovalStatesXAmzTargetEnum = "CodeCommit_20150413.GetPullRequestApprovalStates"
)

func (e *GetPullRequestApprovalStatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.GetPullRequestApprovalStates":
		*e = GetPullRequestApprovalStatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPullRequestApprovalStatesXAmzTargetEnum: %s", s)
	}
}

type GetPullRequestApprovalStatesHeaders struct {
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetPullRequestApprovalStatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetPullRequestApprovalStatesRequest struct {
	Headers GetPullRequestApprovalStatesHeaders
	Request shared.GetPullRequestApprovalStatesInput `request:"mediaType=application/json"`
}

type GetPullRequestApprovalStatesResponse struct {
	ContentType string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// Success
	GetPullRequestApprovalStatesOutput *shared.GetPullRequestApprovalStatesOutput
	// InvalidPullRequestIdException
	InvalidPullRequestIDException interface{}
	// InvalidRevisionIdException
	InvalidRevisionIDException interface{}
	// PullRequestDoesNotExistException
	PullRequestDoesNotExistException interface{}
	// PullRequestIdRequiredException
	PullRequestIDRequiredException interface{}
	// RevisionIdRequiredException
	RevisionIDRequiredException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
}
