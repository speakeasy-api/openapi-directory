"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import configurationoverrides as shared_configurationoverrides
from ..shared import jobdriver as shared_jobdriver
from ..shared import jobrunstate_enum as shared_jobrunstate_enum
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import totalresourceutilization as shared_totalresourceutilization
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobRun:
    r"""Information about a job run. A job run is a unit of work, such as a Spark JAR, Hive query, or SparkSQL query, that you submit to an EMR Serverless application."""
    
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationId') }})  
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy') }})  
    execution_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRole') }})  
    job_driver: shared_jobdriver.JobDriver = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobDriver') }})  
    job_run_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobRunId') }})  
    release_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseLabel') }})  
    state: shared_jobrunstate_enum.JobRunStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    state_details: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateDetails') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    configuration_overrides: Optional[shared_configurationoverrides.ConfigurationOverrides] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurationOverrides'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_networkconfiguration.NetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfiguration'), 'exclude': lambda f: f is None }})
    r"""The network configuration for customer VPC connectivity."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    total_execution_duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalExecutionDurationSeconds'), 'exclude': lambda f: f is None }})  
    total_resource_utilization: Optional[shared_totalresourceutilization.TotalResourceUtilization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalResourceUtilization'), 'exclude': lambda f: f is None }})  
    