"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import monitoringproblemtype_enum as shared_monitoringproblemtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModelQualityAppSpecification:
    r"""Container image configuration object for the monitoring job."""
    
    image_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageUri') }})  
    container_arguments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerArguments'), 'exclude': lambda f: f is None }})  
    container_entrypoint: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerEntrypoint'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    post_analytics_processor_source_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostAnalyticsProcessorSourceUri'), 'exclude': lambda f: f is None }})  
    problem_type: Optional[shared_monitoringproblemtype_enum.MonitoringProblemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProblemType'), 'exclude': lambda f: f is None }})  
    record_preprocessor_source_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecordPreprocessorSourceUri'), 'exclude': lambda f: f is None }})  
    