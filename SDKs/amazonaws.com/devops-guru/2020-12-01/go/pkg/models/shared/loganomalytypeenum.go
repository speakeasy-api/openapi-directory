// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LogAnomalyTypeEnum string

const (
	LogAnomalyTypeEnumKeyword        LogAnomalyTypeEnum = "KEYWORD"
	LogAnomalyTypeEnumKeywordToken   LogAnomalyTypeEnum = "KEYWORD_TOKEN"
	LogAnomalyTypeEnumFormat         LogAnomalyTypeEnum = "FORMAT"
	LogAnomalyTypeEnumHTTPCode       LogAnomalyTypeEnum = "HTTP_CODE"
	LogAnomalyTypeEnumBlockFormat    LogAnomalyTypeEnum = "BLOCK_FORMAT"
	LogAnomalyTypeEnumNumericalPoint LogAnomalyTypeEnum = "NUMERICAL_POINT"
	LogAnomalyTypeEnumNumericalNan   LogAnomalyTypeEnum = "NUMERICAL_NAN"
	LogAnomalyTypeEnumNewFieldName   LogAnomalyTypeEnum = "NEW_FIELD_NAME"
)

func (e LogAnomalyTypeEnum) ToPointer() *LogAnomalyTypeEnum {
	return &e
}

func (e *LogAnomalyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KEYWORD":
		fallthrough
	case "KEYWORD_TOKEN":
		fallthrough
	case "FORMAT":
		fallthrough
	case "HTTP_CODE":
		fallthrough
	case "BLOCK_FORMAT":
		fallthrough
	case "NUMERICAL_POINT":
		fallthrough
	case "NUMERICAL_NAN":
		fallthrough
	case "NEW_FIELD_NAME":
		*e = LogAnomalyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogAnomalyTypeEnum: %v", v)
	}
}
