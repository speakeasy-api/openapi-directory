/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call.
 *
 * @remarks
 *
 */
export class GETAccountingPeriodWithoutSuccessTypeFileIds extends SpeakeasyBase {
  /**
   * File ID of the Accounts Receivable Aging Account Detail report.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountsReceivableAccountAgingDetailExportFileId" })
  accountsReceivableAccountAgingDetailExportFileId?: string;

  /**
   * File ID of the Accounts Receivable Aging Invoice Detail report.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountsReceivableInvoiceAgingDetailExportFileId" })
  accountsReceivableInvoiceAgingDetailExportFileId?: string;

  /**
   * File ID of the Accounts Receivable Detail report.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "arRollForwardDetailExportFileId" })
  arRollForwardDetailExportFileId?: string;

  /**
   * File ID of the Realized Gain and Loss Detail report.
   *
   * @remarks
   *
   * Returned only if you have Foreign Currency Conversion enabled.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fxRealizedGainAndLossDetailExportFileId" })
  fxRealizedGainAndLossDetailExportFileId?: string;

  /**
   * File ID of the Unrealized Gain and Loss Detail report.
   *
   * @remarks
   *
   * Returned only if you have Foreign Currency Conversion enabled
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fxUnrealizedGainAndLossDetailExportFileId" })
  fxUnrealizedGainAndLossDetailExportFileId?: string;

  /**
   * File ID of the Revenue Detail report in CSV format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revenueDetailCsvFileId" })
  revenueDetailCsvFileId?: string;

  /**
   * File ID of the Revenue Detail report in XLSX format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revenueDetailExcelFileId" })
  revenueDetailExcelFileId?: string;

  /**
   * File ID of a report containing all unprocessed charges for the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unprocessedChargesFileId" })
  unprocessedChargesFileId?: string;
}

/**
 * Container for custom fields of an Accounting Period object.
 *
 * @remarks
 *
 */
export class GETAccountingPeriodWithoutSuccessType extends SpeakeasyBase {
  /**
   * ID of the user who created the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * Date and time when the accounting period was created.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdOn?: Date;

  /**
   * The end date of the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileIds" })
  @Type(() => GETAccountingPeriodWithoutSuccessTypeFileIds)
  fileIds?: GETAccountingPeriodWithoutSuccessTypeFileIds;

  /**
   * Fiscal year of the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fiscalYear" })
  fiscalYear?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fiscal_quarter" })
  fiscalQuarter?: number;

  /**
   * ID of the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Any optional notes about the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTrialBalanceEnd" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  runTrialBalanceEnd?: Date;

  /**
   * If trial balance status is Error, an error message is returned in this field.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTrialBalanceErrorMessage" })
  runTrialBalanceErrorMessage?: string;

  /**
   * Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTrialBalanceStart" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  runTrialBalanceStart?: Date;

  /**
   * Status of the trial balance for the accounting period. Possible values:
   *
   * @remarks
   *
   * * `Pending`
   * * `Processing`
   * * `Completed`
   * * `Error`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTrialBalanceStatus" })
  runTrialBalanceStatus?: string;

  /**
   * The start date of the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * Status of the accounting period. Possible values:
   *
   * @remarks
   *
   * * `Open`
   * * `PendingClose`
   * * `Closed`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * D of the user who last updated the accounting period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  updatedBy?: string;

  /**
   * Date and time when the accounting period was last updated.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedOn?: Date;
}
