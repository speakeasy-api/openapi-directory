/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateSchemaResponse - Success
 */
public class CreateSchemaResponse {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Compatibility")
    public CompatibilityEnum compatibility;

    public CreateSchemaResponse withCompatibility(CompatibilityEnum compatibility) {
        this.compatibility = compatibility;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataFormat")
    public DataFormatEnum dataFormat;

    public CreateSchemaResponse withDataFormat(DataFormatEnum dataFormat) {
        this.dataFormat = dataFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;

    public CreateSchemaResponse withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LatestSchemaVersion")
    public Long latestSchemaVersion;

    public CreateSchemaResponse withLatestSchemaVersion(Long latestSchemaVersion) {
        this.latestSchemaVersion = latestSchemaVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NextSchemaVersion")
    public Long nextSchemaVersion;

    public CreateSchemaResponse withNextSchemaVersion(Long nextSchemaVersion) {
        this.nextSchemaVersion = nextSchemaVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegistryArn")
    public String registryArn;

    public CreateSchemaResponse withRegistryArn(String registryArn) {
        this.registryArn = registryArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegistryName")
    public String registryName;

    public CreateSchemaResponse withRegistryName(String registryName) {
        this.registryName = registryName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaArn")
    public String schemaArn;

    public CreateSchemaResponse withSchemaArn(String schemaArn) {
        this.schemaArn = schemaArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaCheckpoint")
    public Long schemaCheckpoint;

    public CreateSchemaResponse withSchemaCheckpoint(Long schemaCheckpoint) {
        this.schemaCheckpoint = schemaCheckpoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaName")
    public String schemaName;

    public CreateSchemaResponse withSchemaName(String schemaName) {
        this.schemaName = schemaName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaStatus")
    public SchemaStatusEnum schemaStatus;

    public CreateSchemaResponse withSchemaStatus(SchemaStatusEnum schemaStatus) {
        this.schemaStatus = schemaStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaVersionId")
    public String schemaVersionId;

    public CreateSchemaResponse withSchemaVersionId(String schemaVersionId) {
        this.schemaVersionId = schemaVersionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaVersionStatus")
    public SchemaVersionStatusEnum schemaVersionStatus;

    public CreateSchemaResponse withSchemaVersionStatus(SchemaVersionStatusEnum schemaVersionStatus) {
        this.schemaVersionStatus = schemaVersionStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public java.util.Map<String, String> tags;

    public CreateSchemaResponse withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    public CreateSchemaResponse(){}
}
