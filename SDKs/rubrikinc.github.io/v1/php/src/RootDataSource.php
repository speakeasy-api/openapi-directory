<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootDataSource 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk delete all snapshots for the given objects
     * 
     * This endpoint deletes all snapshots from all locations for the objects with the IDs specified by the 'objectIds' parameter. API returning success does not guarantee that the snapshots will be expired.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BulkDeleteSnapshotsConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsResponse
     */
	public function bulkDeleteSnapshots(
        \OpenAPI\OpenAPI\Models\Shared\BulkDeleteSnapshotsConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data_source/snapshot/bulk_delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestFailedException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RequestFailedException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk delete specified snapshots for the given object
     * 
     * Bulk deletion of the snapshots specified by a list of snapshot IDs for a given object. Object type is required. Location ID is optional. API returning success does not guarantee that the snapshot will be expired.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectResponse
     */
	public function bulkDeleteSnapshotsForObject(
        \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data_source/{id}/snapshot/bulk_delete', \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkDeleteObjectSnapshotsConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkDeleteSnapshotsForObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestFailedException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RequestFailedException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of snapshots that have expired according to their snapshot-level SLA Domain assignments
     * 
     * 
     * Gets a list of the snapshots of a specified data source that have expired according to the snapshot-level SLA Domain assignments. This list does not include remote snapshots.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsResponse
     */
	public function expiredCustomRetentionSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data_source/{id}/expired_custom_retention_snapshots', \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExpiredCustomRetentionSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expiredCustomRetentionSnapshots = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExpiredCustomRetentionSnapshots', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestFailedException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RequestFailedException', 'json');
            }
        }

        return $response;
    }
}