// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type CommissionStatusEnum string

const (
	CommissionStatusEnumCompleted      CommissionStatusEnum = "completed"
	CommissionStatusEnumUnclaimed      CommissionStatusEnum = "unclaimed"
	CommissionStatusEnumFailed         CommissionStatusEnum = "failed"
	CommissionStatusEnumSent           CommissionStatusEnum = "sent"
	CommissionStatusEnumWaiting        CommissionStatusEnum = "waiting"
	CommissionStatusEnumWaitingInvoice CommissionStatusEnum = "waiting_invoice"
)

func (e *CommissionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "completed":
		fallthrough
	case "unclaimed":
		fallthrough
	case "failed":
		fallthrough
	case "sent":
		fallthrough
	case "waiting":
		fallthrough
	case "waiting_invoice":
		*e = CommissionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommissionStatusEnum: %s", s)
	}
}

type Commission struct {
	Amount *Monetary `json:"amount,omitempty"`
	// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
	Date    *time.Time            `json:"date,omitempty"`
	Project *Project              `json:"project,omitempty"`
	Status  *CommissionStatusEnum `json:"status,omitempty"`
}
