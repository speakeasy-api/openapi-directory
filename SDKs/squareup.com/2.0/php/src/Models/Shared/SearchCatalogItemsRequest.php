<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SearchCatalogItemsRequest - Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SearchCatalogItemsRequest
{
    /**
     * The category id query expression to return items containing the specified category IDs.
     * 
     * @var ?array<string> $categoryIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('category_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $categoryIds = null;
    
    /**
     * The pagination token, returned in the previous response, used to fetch the next batch of pending results.
     * 
     * @var ?string $cursor
     */
	#[\JMS\Serializer\Annotation\SerializedName('cursor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cursor = null;
    
    /**
     * The customer-attribute filter to return items or item variations matching the specified
     * 
     * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
     * a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\CustomAttributeFilter> $customAttributeFilters
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_attribute_filters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\CustomAttributeFilter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $customAttributeFilters = null;
    
    /**
     * The enabled-location query expression to return items and item variations having specified enabled locations.
     * 
     * @var ?array<string> $enabledLocationIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled_location_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $enabledLocationIds = null;
    
    /**
     * The maximum number of results to return per page. The default value is 100.
     * 
     * @var ?int $limit
     */
	#[\JMS\Serializer\Annotation\SerializedName('limit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $limit = null;
    
    /**
     * The product types query expression to return items or item variations having the specified product types.
     * 
     * @var ?array<string> $productTypes
     */
	#[\JMS\Serializer\Annotation\SerializedName('product_types')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $productTypes = null;
    
    /**
     * The order to sort the results by item names. The default sort order is ascending (`ASC`).
     * 
     * @var ?string $sortOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('sort_order')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sortOrder = null;
    
    /**
     * The stock-level query expression to return item variations with the specified stock levels.
     * 
     * @var ?array<string> $stockLevels
     */
	#[\JMS\Serializer\Annotation\SerializedName('stock_levels')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $stockLevels = null;
    
    /**
     * The text filter expression to return items or item variations containing specified text in
     * 
     * the `name`, `description`, or `abbreviation` attribute value of an item, or in
     * the `name`, `sku`, or `upc` attribute value of an item variation.
     * 
     * @var ?string $textFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('text_filter')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $textFilter = null;
    
	public function __construct()
	{
		$this->categoryIds = null;
		$this->cursor = null;
		$this->customAttributeFilters = null;
		$this->enabledLocationIds = null;
		$this->limit = null;
		$this->productTypes = null;
		$this->sortOrder = null;
		$this->stockLevels = null;
		$this->textFilter = null;
	}
}
