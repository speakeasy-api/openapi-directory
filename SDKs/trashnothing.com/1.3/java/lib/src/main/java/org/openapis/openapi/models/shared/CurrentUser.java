/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CurrentUser - User data
 */
public class CurrentUser {
    /**
     * A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("about_me")
    public String aboutMe;
    public CurrentUser withAboutMe(String aboutMe) {
        this.aboutMe = aboutMe;
        return this;
    }
    
    /**
     * A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public CurrentUser withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Whether or not photos are included in the digest emails sent to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("digest_photos")
    public Boolean digestPhotos;
    public CurrentUser withDigestPhotos(Boolean digestPhotos) {
        this.digestPhotos = digestPhotos;
        return this;
    }
    
    /**
     * Data related to the users' email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public CurrentUserEmail email;
    public CurrentUser withEmail(CurrentUserEmail email) {
        this.email = email;
        return this;
    }
    
    /**
     * How quickly new messages from other users are emailed to this user. One of: immediate, 30_minutes, 1_hour, 2_hours, 4_hours, 6_hours, 8_hours &lt;br /&gt; If set to anything other than immediate, the user will receive a digest email summarizing all of the new messages that they haven't viewed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_message_delay")
    public String emailMessageDelay;
    public CurrentUser withEmailMessageDelay(String emailMessageDelay) {
        this.emailMessageDelay = emailMessageDelay;
        return this;
    }
    
    /**
     * Whether or not post reminder emails are enabled for this user (to remind them to update or repost their posts).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_post_reminders")
    public Boolean emailPostReminders;
    public CurrentUser withEmailPostReminders(Boolean emailPostReminders) {
        this.emailPostReminders = emailPostReminders;
        return this;
    }
    
    /**
     * How often new post email notifications are sent to the user. One of: weekly, twice_weekly, daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly &lt;br /&gt;&lt;br /&gt; Will be null if new post email notifications are turned off.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_posts_frequency")
    public String emailPostsFrequency;
    public CurrentUser withEmailPostsFrequency(String emailPostsFrequency) {
        this.emailPostsFrequency = emailPostsFrequency;
        return this;
    }
    
    /**
     * Whether or not search alert emails are enabled for this user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_search_alerts")
    public Boolean emailSearchAlerts;
    public CurrentUser withEmailSearchAlerts(Boolean emailSearchAlerts) {
        this.emailSearchAlerts = emailSearchAlerts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedback")
    public CurrentUserFeedback feedback;
    public CurrentUser withFeedback(CurrentUserFeedback feedback) {
        this.feedback = feedback;
        return this;
    }
    
    /**
     * The first name of the user (may be null).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstname")
    public String firstname;
    public CurrentUser withFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    /**
     * Whether or not the user has a password (accounts created using 3rd party providers like Facebook don't have passwords set). &lt;br /&gt;&lt;br /&gt; When has_password is false, the only way to set a password on the users' account is to send the user a password reset email.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_password")
    public Boolean hasPassword;
    public CurrentUser withHasPassword(Boolean hasPassword) {
        this.hasPassword = hasPassword;
        return this;
    }
    
    /**
     * The UTC date and time when the user last viewed the newest posts on the All Posts page (may be null). &lt;br /&gt;&lt;br /&gt; NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_listings_view")
    public OffsetDateTime lastListingsView;
    public CurrentUser withLastListingsView(OffsetDateTime lastListingsView) {
        this.lastListingsView = lastListingsView;
        return this;
    }
    
    /**
     * The last name of the user (may be null).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastname")
    public String lastname;
    public CurrentUser withLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    /**
     * The users' location.  The location is used to determine which posts are shown to the user (may be null).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public CurrentUserLocation location;
    public CurrentUser withLocation(CurrentUserLocation location) {
        this.location = location;
        return this;
    }
    
    /**
     * The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("member_since")
    public String memberSince;
    public CurrentUser withMemberSince(String memberSince) {
        this.memberSince = memberSince;
        return this;
    }
    
    /**
     * A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image")
    public String profileImage;
    public CurrentUser withProfileImage(String profileImage) {
        this.profileImage = profileImage;
        return this;
    }
    
    /**
     * The source of the users' profile image. One of: gravatar, facebook, google, freegle, custom
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image_source")
    public String profileImageSource;
    public CurrentUser withProfileImageSource(String profileImageSource) {
        this.profileImageSource = profileImageSource;
        return this;
    }
    
    /**
     * Whether or not the user has chosen to make their first and last name public.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_name")
    public Boolean publicName;
    public CurrentUser withPublicName(Boolean publicName) {
        this.publicName = publicName;
        return this;
    }
    
    /**
     * A list of the public post sources the user is interested in seeing posts from (currently only 'trashnothing' is supported). If the array is empty, no sources are enabled and the user will only see posts from the groups they are a member of. &lt;br /&gt;&lt;br /&gt; NOTE: Additional sources may be added in the future so clients should take care to support arbitrary sources being returned.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_post_sources")
    public String[] publicPostSources;
    public CurrentUser withPublicPostSources(String[] publicPostSources) {
        this.publicPostSources = publicPostSources;
        return this;
    }
    
    /**
     * An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_time")
    public Long replyTime;
    public CurrentUser withReplyTime(Long replyTime) {
        this.replyTime = replyTime;
        return this;
    }
    
    /**
     * If true, all group posts from the users' groups are shown to them on the main posts page and in the digests. &lt;br /&gt;&lt;br /&gt; If false, only group posts in the area defined by the users' location are shown.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_all_group_posts")
    public Boolean showAllGroupPosts;
    public CurrentUser withShowAllGroupPosts(Boolean showAllGroupPosts) {
        this.showAllGroupPosts = showAllGroupPosts;
        return this;
    }
    
    /**
     * The UTC date and time when the user signed up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("signup")
    public OffsetDateTime signup;
    public CurrentUser withSignup(OffsetDateTime signup) {
        this.signup = signup;
        return this;
    }
    
    /**
     * Whether or not the user wants to receive special notice emails from the groups they are a member of. Special notices are admin posts that the group moderators choose to send out by email.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("special_notices")
    public Boolean specialNotices;
    public CurrentUser withSpecialNotices(Boolean specialNotices) {
        this.specialNotices = specialNotices;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public CurrentUser withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public CurrentUser withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Whether or not the user used the Fair Offer Policy (see https://trashnothing.com/fair_offer_policy ) the last time they posted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uses_fair_offer_policy")
    public Boolean usesFairOfferPolicy;
    public CurrentUser withUsesFairOfferPolicy(Boolean usesFairOfferPolicy) {
        this.usesFairOfferPolicy = usesFairOfferPolicy;
        return this;
    }
    
    /**
     * Whether or not the user has verified their account. The user account will be limited (eg. they will not be able to reply to posts) until their account is verified.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    public Boolean verified;
    public CurrentUser withVerified(Boolean verified) {
        this.verified = verified;
        return this;
    }
    
}
