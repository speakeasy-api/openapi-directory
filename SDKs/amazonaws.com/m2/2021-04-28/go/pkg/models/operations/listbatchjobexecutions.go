// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ListBatchJobExecutionsPathParams struct {
	// The unique identifier of the application.
	ApplicationID string `pathParam:"style=simple,explode=false,name=applicationId"`
}

// ListBatchJobExecutionsStatusEnum - The status of the batch job executions.
type ListBatchJobExecutionsStatusEnum string

const (
	ListBatchJobExecutionsStatusEnumSubmitting           ListBatchJobExecutionsStatusEnum = "Submitting"
	ListBatchJobExecutionsStatusEnumHolding              ListBatchJobExecutionsStatusEnum = "Holding"
	ListBatchJobExecutionsStatusEnumDispatching          ListBatchJobExecutionsStatusEnum = "Dispatching"
	ListBatchJobExecutionsStatusEnumRunning              ListBatchJobExecutionsStatusEnum = "Running"
	ListBatchJobExecutionsStatusEnumCancelling           ListBatchJobExecutionsStatusEnum = "Cancelling"
	ListBatchJobExecutionsStatusEnumCancelled            ListBatchJobExecutionsStatusEnum = "Cancelled"
	ListBatchJobExecutionsStatusEnumSucceeded            ListBatchJobExecutionsStatusEnum = "Succeeded"
	ListBatchJobExecutionsStatusEnumFailed               ListBatchJobExecutionsStatusEnum = "Failed"
	ListBatchJobExecutionsStatusEnumSucceededWithWarning ListBatchJobExecutionsStatusEnum = "Succeeded With Warning"
)

func (e *ListBatchJobExecutionsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Submitting":
		fallthrough
	case "Holding":
		fallthrough
	case "Dispatching":
		fallthrough
	case "Running":
		fallthrough
	case "Cancelling":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Succeeded":
		fallthrough
	case "Failed":
		fallthrough
	case "Succeeded With Warning":
		*e = ListBatchJobExecutionsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBatchJobExecutionsStatusEnum: %s", s)
	}
}

type ListBatchJobExecutionsQueryParams struct {
	// The unique identifier of each batch job execution.
	ExecutionIds []string `queryParam:"style=form,explode=true,name=executionIds"`
	// The name of each batch job execution.
	JobName *string `queryParam:"style=form,explode=true,name=jobName"`
	// The maximum number of batch job executions to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// A pagination token to control the number of batch job executions displayed in the list.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The time after which the batch job executions started.
	StartedAfter *time.Time `queryParam:"style=form,explode=true,name=startedAfter"`
	// The time before the batch job executions started.
	StartedBefore *time.Time `queryParam:"style=form,explode=true,name=startedBefore"`
	// The status of the batch job executions.
	Status *ListBatchJobExecutionsStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type ListBatchJobExecutionsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListBatchJobExecutionsRequest struct {
	PathParams  ListBatchJobExecutionsPathParams
	QueryParams ListBatchJobExecutionsQueryParams
	Headers     ListBatchJobExecutionsHeaders
}

type ListBatchJobExecutionsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListBatchJobExecutionsResponse *shared.ListBatchJobExecutionsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
