// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PvcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PvcerRequestBodyCertificateParameters struct {
	// Enrollment No
	EnrolNo string `json:"ENROL_NO"`
	// Full name
	FullName string `json:"FullName"`
	// Year
	Year string `json:"YEAR"`
}

// PvcerRequestBodyFormatEnum - The format of the certificate in response.
type PvcerRequestBodyFormatEnum string

const (
	PvcerRequestBodyFormatEnumPdf PvcerRequestBodyFormatEnum = "pdf"
)

func (e PvcerRequestBodyFormatEnum) ToPointer() *PvcerRequestBodyFormatEnum {
	return &e
}

func (e *PvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PvcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PvcerRequestBodyFormatEnum: %v", v)
	}
}

// PvcerRequestBody - Request format
type PvcerRequestBody struct {
	CertificateParameters *PvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pvcer504ApplicationJSONErrorEnum string

const (
	Pvcer504ApplicationJSONErrorEnumGatewayTimeout Pvcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Pvcer504ApplicationJSONErrorEnum) ToPointer() *Pvcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Pvcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer504ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pvcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Pvcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Pvcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer504ApplicationJSON - Gateway timeout
type Pvcer504ApplicationJSON struct {
	Error            *Pvcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer503ApplicationJSONErrorEnum string

const (
	Pvcer503ApplicationJSONErrorEnumServiceUnavailable Pvcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Pvcer503ApplicationJSONErrorEnum) ToPointer() *Pvcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Pvcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer503ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pvcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Pvcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Pvcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer503ApplicationJSON - Service unavailable
type Pvcer503ApplicationJSON struct {
	Error            *Pvcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer502ApplicationJSONErrorEnum string

const (
	Pvcer502ApplicationJSONErrorEnumBadGatewy Pvcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Pvcer502ApplicationJSONErrorEnum) ToPointer() *Pvcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Pvcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer502ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pvcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Pvcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Pvcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer502ApplicationJSON - Bad gateway
type Pvcer502ApplicationJSON struct {
	Error            *Pvcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer500ApplicationJSONErrorEnum string

const (
	Pvcer500ApplicationJSONErrorEnumInternalServerError Pvcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Pvcer500ApplicationJSONErrorEnum) ToPointer() *Pvcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Pvcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer500ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer500ApplicationJSONErrorDescriptionEnumInternalServerError Pvcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Pvcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Pvcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer500ApplicationJSON - Internal server error
type Pvcer500ApplicationJSON struct {
	Error            *Pvcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer404ApplicationJSONErrorEnum string

const (
	Pvcer404ApplicationJSONErrorEnumRecordNotFound Pvcer404ApplicationJSONErrorEnum = "record_not_found"
	Pvcer404ApplicationJSONErrorEnumURLNotFound    Pvcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Pvcer404ApplicationJSONErrorEnum) ToPointer() *Pvcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pvcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer404ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pvcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pvcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pvcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Pvcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pvcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer404ApplicationJSON - No record found
type Pvcer404ApplicationJSON struct {
	Error            *Pvcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer401ApplicationJSONErrorEnum string

const (
	Pvcer401ApplicationJSONErrorEnumInvalidAuthentication Pvcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Pvcer401ApplicationJSONErrorEnumInvalidAuthorization  Pvcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Pvcer401ApplicationJSONErrorEnum) ToPointer() *Pvcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pvcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer401ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pvcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pvcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pvcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Pvcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pvcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer401ApplicationJSON - Unauthorized access
type Pvcer401ApplicationJSON struct {
	Error            *Pvcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pvcer400ApplicationJSONErrorEnum string

const (
	Pvcer400ApplicationJSONErrorEnumMissingParameter Pvcer400ApplicationJSONErrorEnum = "missing_parameter"
	Pvcer400ApplicationJSONErrorEnumInvalidParameter Pvcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Pvcer400ApplicationJSONErrorEnumInvalidFormat    Pvcer400ApplicationJSONErrorEnum = "invalid_format"
	Pvcer400ApplicationJSONErrorEnumInvalidTxnid     Pvcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Pvcer400ApplicationJSONErrorEnumInvalidConsentid Pvcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Pvcer400ApplicationJSONErrorEnum) ToPointer() *Pvcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Pvcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pvcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Pvcer400ApplicationJSONErrorDescriptionEnum string

const (
	Pvcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pvcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pvcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Pvcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pvcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pvcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pvcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pvcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pvcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pvcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Pvcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Pvcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pvcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pvcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pvcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pvcer400ApplicationJSON - Bad request
type Pvcer400ApplicationJSON struct {
	Error            *Pvcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pvcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PvcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pvcer400ApplicationJSONObject *Pvcer400ApplicationJSON
	// Unauthorized access
	Pvcer401ApplicationJSONObject *Pvcer401ApplicationJSON
	// No record found
	Pvcer404ApplicationJSONObject *Pvcer404ApplicationJSON
	// Internal server error
	Pvcer500ApplicationJSONObject *Pvcer500ApplicationJSON
	// Bad gateway
	Pvcer502ApplicationJSONObject *Pvcer502ApplicationJSON
	// Service unavailable
	Pvcer503ApplicationJSONObject *Pvcer503ApplicationJSON
	// Gateway timeout
	Pvcer504ApplicationJSONObject *Pvcer504ApplicationJSON
}
