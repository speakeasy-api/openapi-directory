// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DocumentUploadAttributesStatusEnum - Document upload status. Note that until a document status of
// “received”, “processing”, “success”, or "vbms" is returned, a client
// cannot consider the document as received by VA. In particular a
// status of “uploaded” means that the document package has been
// transmitted, but possibly not validated. Any errors with the
// document package (unreadable PDF, etc) may cause the status to
// change to “error”.
//
// * `pending` - Initial status, indicates no document package has been uploaded yet
// * `uploaded` - Indicates document package has been successfully uploaded (PUT) from the vendor's application system to the API server but has not yet been validated. Date of Receipt is _not_ yet established with this status.
// * `received` - Indicates document package has been received upstream of the API, but is not yet in processing. <ins>Date of Receipt is set when this status is achieved.</ins> (This is also the final status in the sandbox environment unless further progress is simulated.)
// * `processing` - Indicates VBA Intake, Conversion and Mail Handling Services (ICMHS) is processing the document package.
// * `success` - Indicates document package has been received by Digital Mail Handling System (DHMS, aka the Centralized Mail portal).
// * `vbms` - Final status. Indicates document package has been received by Veterans Benefits Management System (VBMS).
// * `error` - Indicates that there was an error. See the `code` and `message` for further information.
// * `expired` - Indicates that the submission was not successfully uploaded via PUT request within the 15-minute window after the POST request. We recommend coding to retry unsuccessful uploads using the same GUID within 15 minutes in case of connection issues.
type DocumentUploadAttributesStatusEnum string

const (
	DocumentUploadAttributesStatusEnumPending    DocumentUploadAttributesStatusEnum = "pending"
	DocumentUploadAttributesStatusEnumUploaded   DocumentUploadAttributesStatusEnum = "uploaded"
	DocumentUploadAttributesStatusEnumReceived   DocumentUploadAttributesStatusEnum = "received"
	DocumentUploadAttributesStatusEnumProcessing DocumentUploadAttributesStatusEnum = "processing"
	DocumentUploadAttributesStatusEnumSuccess    DocumentUploadAttributesStatusEnum = "success"
	DocumentUploadAttributesStatusEnumVbms       DocumentUploadAttributesStatusEnum = "vbms"
	DocumentUploadAttributesStatusEnumError      DocumentUploadAttributesStatusEnum = "error"
)

func (e *DocumentUploadAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "uploaded":
		fallthrough
	case "received":
		fallthrough
	case "processing":
		fallthrough
	case "success":
		fallthrough
	case "vbms":
		fallthrough
	case "error":
		*e = DocumentUploadAttributesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUploadAttributesStatusEnum: %s", s)
	}
}

type DocumentUploadAttributes struct {
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Code *string `json:"code,omitempty"`
	// Human readable error detail. Only present if status = "error"
	Detail *string `json:"detail,omitempty"`
	// The document upload identifier
	GUID string `json:"guid"`
	// Location to which to PUT document Payload
	Location *string `json:"location,omitempty"`
	// Document upload status. Note that until a document status of
	// “received”, “processing”, “success”, or "vbms" is returned, a client
	// cannot consider the document as received by VA. In particular a
	// status of “uploaded” means that the document package has been
	// transmitted, but possibly not validated. Any errors with the
	// document package (unreadable PDF, etc) may cause the status to
	// change to “error”.
	//
	// * `pending` - Initial status, indicates no document package has been uploaded yet
	// * `uploaded` - Indicates document package has been successfully uploaded (PUT) from the vendor's application system to the API server but has not yet been validated. Date of Receipt is _not_ yet established with this status.
	// * `received` - Indicates document package has been received upstream of the API, but is not yet in processing. <ins>Date of Receipt is set when this status is achieved.</ins> (This is also the final status in the sandbox environment unless further progress is simulated.)
	// * `processing` - Indicates VBA Intake, Conversion and Mail Handling Services (ICMHS) is processing the document package.
	// * `success` - Indicates document package has been received by Digital Mail Handling System (DHMS, aka the Centralized Mail portal).
	// * `vbms` - Final status. Indicates document package has been received by Veterans Benefits Management System (VBMS).
	// * `error` - Indicates that there was an error. See the `code` and `message` for further information.
	// * `expired` - Indicates that the submission was not successfully uploaded via PUT request within the 15-minute window after the POST request. We recommend coding to retry unsuccessful uploads using the same GUID within 15 minutes in case of connection issues.
	//
	Status DocumentUploadAttributesStatusEnum `json:"status"`
	// The last time the submission was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Only populated after submission starts processing
	UploadedPdf interface{} `json:"uploaded_pdf,omitempty"`
}
