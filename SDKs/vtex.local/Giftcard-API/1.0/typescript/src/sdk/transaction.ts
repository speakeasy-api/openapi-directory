/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Transaction {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel GiftCard Transaction
   *
   * @remarks
   * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
   */
  cancelGiftCardTransaction(
    req: operations.CancelGiftCardTransactionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelGiftCardTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelGiftCardTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}/cancellations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cancelGiftCardTransactionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelGiftCardTransactionResponse =
        new operations.CancelGiftCardTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response6 = utils.objectToClass(
              httpRes?.data,
              shared.Response6
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create GiftCard Transaction
   *
   * @remarks
   * Register a new giftcard transaction and authorize the item reservation.
   */
  createGiftCardTransaction(
    req: operations.CreateGiftCardTransactionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGiftCardTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGiftCardTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createGiftCardTransactionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGiftCardTransactionResponse =
        new operations.CreateGiftCardTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response3 = utils.objectToClass(
              httpRes?.data,
              shared.Response3
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get GiftCard Transaction by ID
   */
  getGiftCardTransactionbyID(
    req: operations.GetGiftCardTransactionbyIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGiftCardTransactionbyIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGiftCardTransactionbyIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGiftCardTransactionbyIDResponse =
        new operations.GetGiftCardTransactionbyIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response5 = utils.objectToClass(
              httpRes?.data,
              shared.Response5
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get GiftCard Transactions
   *
   * @remarks
   * Returns all transaction of a giftcard.
   */
  getGiftCardTransactions(
    req: operations.GetGiftCardTransactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGiftCardTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGiftCardTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGiftCardTransactionsResponse =
        new operations.GetGiftCardTransactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response3s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.response3s = utils.objectToClass(
              httpRes?.data,
              shared.Response3,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Transaction Authorizations
   *
   * @remarks
   * Returns the giftcard transaction authorizations.
   */
  getTransactionAuthorizations(
    req: operations.GetTransactionAuthorizationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionAuthorizationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionAuthorizationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}/authorization",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionAuthorizationsResponse =
        new operations.GetTransactionAuthorizationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response6 = utils.objectToClass(
              httpRes?.data,
              shared.Response6
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Transaction Cancellations
   *
   * @remarks
   * Returns the giftcard transaction cancellations.
   */
  getTransactionCancellations(
    req: operations.GetTransactionCancellationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionCancellationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionCancellationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}/cancellations",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionCancellationsResponse =
        new operations.GetTransactionCancellationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response7s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.response7s = utils.objectToClass(
              httpRes?.data,
              shared.Response7,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Transaction Settlements
   *
   * @remarks
   * Returns the giftcard transaction settlements.
   */
  getTransactionSettlements(
    req: operations.GetTransactionSettlementsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionSettlementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionSettlementsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}/settlements",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionSettlementsResponse =
        new operations.GetTransactionSettlementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response6s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.response6s = utils.objectToClass(
              httpRes?.data,
              shared.Response6,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Settle GiftCard Transaction
   *
   * @remarks
   * Creates a giftcard transaction settlement.
   */
  settleGiftCardTransaction(
    req: operations.SettleGiftCardTransactionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SettleGiftCardTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SettleGiftCardTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/giftcards/{giftCardID}/transactions/{transactionID}/settlements",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "settleGiftCardTransactionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SettleGiftCardTransactionResponse =
        new operations.SettleGiftCardTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.response6 = utils.objectToClass(
              httpRes?.data,
              shared.Response6
            );
          }
          break;
      }

      return res;
    });
  }
}
