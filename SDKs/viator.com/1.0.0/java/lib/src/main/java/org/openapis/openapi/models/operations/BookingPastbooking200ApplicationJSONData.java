/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BookingPastbooking200ApplicationJSONData - **object** containing pricing matrix information
 */
public class BookingPastbooking200ApplicationJSONData {
    /**
     * **email address** of the entity that booked the tour
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookerEmail")
    public String bookerEmail;

    public BookingPastbooking200ApplicationJSONData withBookerEmail(String bookerEmail) {
        this.bookerEmail = bookerEmail;
        return this;
    }
    
    /**
     * **date** on which the booking was made
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingDate")
    public String bookingDate;

    public BookingPastbooking200ApplicationJSONData withBookingDate(String bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }
    
    /**
     * **object** containing itinerary booking status information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingStatus")
    public org.openapis.openapi.models.shared.BookingStatusItinerary bookingStatus;

    public BookingPastbooking200ApplicationJSONData withBookingStatus(org.openapis.openapi.models.shared.BookingStatusItinerary bookingStatus) {
        this.bookingStatus = bookingStatus;
        return this;
    }
    
    /**
     * **currency code** for the currency in which pricing is displayed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public BookingPastbooking200ApplicationJSONData withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **reference code** for the distributor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distributorRef")
    public String distributorRef;

    public BookingPastbooking200ApplicationJSONData withDistributorRef(String distributorRef) {
        this.distributorRef = distributorRef;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchangeRate")
    public Long exchangeRate;

    public BookingPastbooking200ApplicationJSONData withExchangeRate(Long exchangeRate) {
        this.exchangeRate = exchangeRate;
        return this;
    }
    
    /**
     * **indicator**: `true` if a voucher exists
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasVoucher")
    public Boolean hasVoucher;

    public BookingPastbooking200ApplicationJSONData withHasVoucher(Boolean hasVoucher) {
        this.hasVoucher = hasVoucher;
        return this;
    }
    
    /**
     * **array** of item summary objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemSummaries")
    public BookingPastbooking200ApplicationJSONDataItemSummaries[] itemSummaries;

    public BookingPastbooking200ApplicationJSONData withItemSummaries(BookingPastbooking200ApplicationJSONDataItemSummaries[] itemSummaries) {
        this.itemSummaries = itemSummaries;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itineraryId")
    public Long itineraryId;

    public BookingPastbooking200ApplicationJSONData withItineraryId(Long itineraryId) {
        this.itineraryId = itineraryId;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rulesApplied")
    public String rulesApplied;

    public BookingPastbooking200ApplicationJSONData withRulesApplied(String rulesApplied) {
        this.rulesApplied = rulesApplied;
        return this;
    }
    
    /**
     * **sort order** for *this* result
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;

    public BookingPastbooking200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **numeric merchant total price** for *this* booking
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPrice")
    public Double totalPrice;

    public BookingPastbooking200ApplicationJSONData withTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }
    
    /**
     * **currency-formatted merchant total price** for *this* booking
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPriceFormatted")
    public String totalPriceFormatted;

    public BookingPastbooking200ApplicationJSONData withTotalPriceFormatted(String totalPriceFormatted) {
        this.totalPriceFormatted = totalPriceFormatted;
        return this;
    }
    
    /**
     * **numeric merchant total price** of this booking in USD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPriceUSD")
    public Double totalPriceUSD;

    public BookingPastbooking200ApplicationJSONData withTotalPriceUSD(Double totalPriceUSD) {
        this.totalPriceUSD = totalPriceUSD;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    public String userId;

    public BookingPastbooking200ApplicationJSONData withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voucherKey")
    public String voucherKey;

    public BookingPastbooking200ApplicationJSONData withVoucherKey(String voucherKey) {
        this.voucherKey = voucherKey;
        return this;
    }
    
    /**
     * **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voucherURL")
    public String voucherURL;

    public BookingPastbooking200ApplicationJSONData withVoucherURL(String voucherURL) {
        this.voucherURL = voucherURL;
        return this;
    }
    
    public BookingPastbooking200ApplicationJSONData(){}
}
