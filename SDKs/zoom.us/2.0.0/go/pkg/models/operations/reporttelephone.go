// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
	"time"
)

type ReportTelephoneSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// ReportTelephoneTypeEnum - Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>
// `3` - SIP Connected Audio
type ReportTelephoneTypeEnum string

const (
	ReportTelephoneTypeEnumOne   ReportTelephoneTypeEnum = "1"
	ReportTelephoneTypeEnumThree ReportTelephoneTypeEnum = "3"
)

func (e *ReportTelephoneTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "3":
		*e = ReportTelephoneTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportTelephoneTypeEnum: %s", s)
	}
}

type ReportTelephoneRequest struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// **Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use "next_page_token" for pagination instead of this field.
	//
	// The page number of the current page in the returned records.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page_number"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
	// Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>
	// `3` - SIP Connected Audio
	Type *ReportTelephoneTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

// ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum - Call type.
type ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum string

const (
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumTollFree         ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "toll-free"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumCallOut          ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "call-out"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumCallIn           ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "call-in"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumUsTollNumber     ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "US toll-number"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumGlobalTollNumber ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "global toll-number"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumPremium          ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "premium"
	ReportTelephone200ApplicationXMLTelephonyUsageTypeEnumPremiumCallIn    ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum = "premium call-in"
)

func (e *ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll-free":
		fallthrough
	case "call-out":
		fallthrough
	case "call-in":
		fallthrough
	case "US toll-number":
		fallthrough
	case "global toll-number":
		fallthrough
	case "premium":
		fallthrough
	case "premium call-in":
		*e = ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum: %s", s)
	}
}

type ReportTelephone200ApplicationXMLTelephonyUsage struct {
	// Caller's call-in number.
	CallInNumber *string
	// Country name.
	CountryName *string
	// User department.
	Dept *string
	// Call leg duration
	Duration *int64
	// Call leg end time
	EndTime *time.Time
	// User email.
	HostEmail *string
	// The user ID of the meeting host.
	HostID *string
	// User display name.
	HostName *string
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	MeetingID *int64
	// Meeting type.
	MeetingType *string
	// Toll-free telephone number.
	PhoneNumber *string
	// Calling rate for the telephone call.
	Rate *float64
	// The number that is signaled to Zoom.
	SignaledNumber *string
	// Call leg start time
	StartTime *time.Time
	// Total cost (USD) for Call Out. Calculated as plan rate by duration.
	Total *float64
	// Call type.
	Type *ReportTelephone200ApplicationXMLTelephonyUsageTypeEnum
	// Meeting UUID.
	UUID *string
}

// ReportTelephone200ApplicationXML - **HTTP Status Code:** `200`<br>
// Telephone report returned.<br>
// This is only available for paid account:{accountId}.<br>
// The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
// Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
type ReportTelephone200ApplicationXML struct {
	// Start date for this report.
	From *types.Date
	// The page number of the current results.
	NextPageToken *int64
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned with a single API call.
	PageSize *int64
	// Array of telephony objects.
	TelephonyUsage []ReportTelephone200ApplicationXMLTelephonyUsage
	// End date for this report.
	To *types.Date
	// The total number of all the records available across pages.
	TotalRecords *int64
}

// ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum - Call type.
type ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum string

const (
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumTollFree         ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "toll-free"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumCallOut          ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "call-out"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumCallIn           ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "call-in"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumUsTollNumber     ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "US toll-number"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumGlobalTollNumber ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "global toll-number"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumPremium          ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "premium"
	ReportTelephone200ApplicationJSONTelephonyUsageTypeEnumPremiumCallIn    ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum = "premium call-in"
)

func (e *ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll-free":
		fallthrough
	case "call-out":
		fallthrough
	case "call-in":
		fallthrough
	case "US toll-number":
		fallthrough
	case "global toll-number":
		fallthrough
	case "premium":
		fallthrough
	case "premium call-in":
		*e = ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum: %s", s)
	}
}

type ReportTelephone200ApplicationJSONTelephonyUsage struct {
	// Caller's call-in number.
	CallInNumber *string `json:"call_in_number,omitempty"`
	// Country name.
	CountryName *string `json:"country_name,omitempty"`
	// User department.
	Dept *string `json:"dept,omitempty"`
	// Call leg duration
	Duration *int64 `json:"duration,omitempty"`
	// Call leg end time
	EndTime *time.Time `json:"end_time,omitempty"`
	// User email.
	HostEmail *string `json:"host_email,omitempty"`
	// The user ID of the meeting host.
	HostID *string `json:"host_id,omitempty"`
	// User display name.
	HostName *string `json:"host_name,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	MeetingID *int64 `json:"meeting_id,omitempty"`
	// Meeting type.
	MeetingType *string `json:"meeting_type,omitempty"`
	// Toll-free telephone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Calling rate for the telephone call.
	Rate *float64 `json:"rate,omitempty"`
	// The number that is signaled to Zoom.
	SignaledNumber *string `json:"signaled_number,omitempty"`
	// Call leg start time
	StartTime *time.Time `json:"start_time,omitempty"`
	// Total cost (USD) for Call Out. Calculated as plan rate by duration.
	Total *float64 `json:"total,omitempty"`
	// Call type.
	Type *ReportTelephone200ApplicationJSONTelephonyUsageTypeEnum `json:"type,omitempty"`
	// Meeting UUID.
	UUID *string `json:"uuid,omitempty"`
}

// ReportTelephone200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Telephone report returned.<br>
// This is only available for paid account:{accountId}.<br>
// The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
// Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
type ReportTelephone200ApplicationJSON struct {
	// Start date for this report.
	From *types.Date `json:"from,omitempty"`
	// The page number of the current results.
	NextPageToken *int64 `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// Array of telephony objects.
	TelephonyUsage []ReportTelephone200ApplicationJSONTelephonyUsage `json:"telephony_usage,omitempty"`
	// End date for this report.
	To *types.Date `json:"to,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ReportTelephoneResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Telephone report returned.<br>
	// This is only available for paid account:{accountId}.<br>
	// The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<br>
	// Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.
	ReportTelephone200ApplicationJSONObject *ReportTelephone200ApplicationJSON
}
