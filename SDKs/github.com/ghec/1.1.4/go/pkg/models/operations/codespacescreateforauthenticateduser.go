// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

// CodespacesCreateForAuthenticatedUserRequestBody2PullRequest - Pull request number for this codespace
type CodespacesCreateForAuthenticatedUserRequestBody2PullRequest struct {
	// Pull request number
	PullRequestNumber int64 `json:"pull_request_number"`
	// Repository id for this codespace
	RepositoryID int64 `json:"repository_id"`
}

type CodespacesCreateForAuthenticatedUserRequestBody2 struct {
	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`
	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int64 `json:"idle_timeout_minutes,omitempty"`
	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`
	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`
	// Pull request number for this codespace
	PullRequest CodespacesCreateForAuthenticatedUserRequestBody2PullRequest `json:"pull_request"`
	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

type CodespacesCreateForAuthenticatedUserRequestBody1 struct {
	// IP for location auto-detection when proxying a request
	ClientIP *string `json:"client_ip,omitempty"`
	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`
	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`
	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int64 `json:"idle_timeout_minutes,omitempty"`
	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`
	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`
	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`
	// Git ref (typically a branch name) for this codespace
	Ref *string `json:"ref,omitempty"`
	// Repository id for this codespace
	RepositoryID int64 `json:"repository_id"`
	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
	RetentionPeriodMinutes *int64 `json:"retention_period_minutes,omitempty"`
	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

type CodespacesCreateForAuthenticatedUserRequestBodyType string

const (
	CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody1 CodespacesCreateForAuthenticatedUserRequestBodyType = "codespaces/create-for-authenticated-user_requestBody_1"
	CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody2 CodespacesCreateForAuthenticatedUserRequestBodyType = "codespaces/create-for-authenticated-user_requestBody_2"
)

type CodespacesCreateForAuthenticatedUserRequestBody struct {
	CodespacesCreateForAuthenticatedUserRequestBody1 *CodespacesCreateForAuthenticatedUserRequestBody1
	CodespacesCreateForAuthenticatedUserRequestBody2 *CodespacesCreateForAuthenticatedUserRequestBody2

	Type CodespacesCreateForAuthenticatedUserRequestBodyType
}

func CreateCodespacesCreateForAuthenticatedUserRequestBodyCodespacesCreateForAuthenticatedUserRequestBody1(codespacesCreateForAuthenticatedUserRequestBody1 CodespacesCreateForAuthenticatedUserRequestBody1) CodespacesCreateForAuthenticatedUserRequestBody {
	typ := CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody1

	return CodespacesCreateForAuthenticatedUserRequestBody{
		CodespacesCreateForAuthenticatedUserRequestBody1: &codespacesCreateForAuthenticatedUserRequestBody1,
		Type: typ,
	}
}

func CreateCodespacesCreateForAuthenticatedUserRequestBodyCodespacesCreateForAuthenticatedUserRequestBody2(codespacesCreateForAuthenticatedUserRequestBody2 CodespacesCreateForAuthenticatedUserRequestBody2) CodespacesCreateForAuthenticatedUserRequestBody {
	typ := CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody2

	return CodespacesCreateForAuthenticatedUserRequestBody{
		CodespacesCreateForAuthenticatedUserRequestBody2: &codespacesCreateForAuthenticatedUserRequestBody2,
		Type: typ,
	}
}

func (u *CodespacesCreateForAuthenticatedUserRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	codespacesCreateForAuthenticatedUserRequestBody1 := new(CodespacesCreateForAuthenticatedUserRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&codespacesCreateForAuthenticatedUserRequestBody1); err == nil {
		u.CodespacesCreateForAuthenticatedUserRequestBody1 = codespacesCreateForAuthenticatedUserRequestBody1
		u.Type = CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody1
		return nil
	}

	codespacesCreateForAuthenticatedUserRequestBody2 := new(CodespacesCreateForAuthenticatedUserRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&codespacesCreateForAuthenticatedUserRequestBody2); err == nil {
		u.CodespacesCreateForAuthenticatedUserRequestBody2 = codespacesCreateForAuthenticatedUserRequestBody2
		u.Type = CodespacesCreateForAuthenticatedUserRequestBodyTypeCodespacesCreateForAuthenticatedUserRequestBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CodespacesCreateForAuthenticatedUserRequestBody) MarshalJSON() ([]byte, error) {
	if u.CodespacesCreateForAuthenticatedUserRequestBody1 != nil {
		return json.Marshal(u.CodespacesCreateForAuthenticatedUserRequestBody1)
	}

	if u.CodespacesCreateForAuthenticatedUserRequestBody2 != nil {
		return json.Marshal(u.CodespacesCreateForAuthenticatedUserRequestBody2)
	}

	return nil, nil
}

type CodespacesCreateForAuthenticatedUserRequest struct {
	Request CodespacesCreateForAuthenticatedUserRequestBody `request:"mediaType=application/json"`
}

// CodespacesCreateForAuthenticatedUser503ApplicationJSON - Service unavailable
type CodespacesCreateForAuthenticatedUser503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type CodespacesCreateForAuthenticatedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response when the codespace was successfully created
	Codespace *shared.Codespace
	// Service unavailable
	CodespacesCreateForAuthenticatedUser503ApplicationJSONObject *CodespacesCreateForAuthenticatedUser503ApplicationJSON
}
