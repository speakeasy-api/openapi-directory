"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flightoffersource_enum as shared_flightoffersource_enum
from ..shared import origindestination as shared_origindestination
from ..shared import searchcriteria as shared_searchcriteria
from ..shared import traveler as shared_traveler
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFlightOffersQuery:
    r"""list of criteria to retrieve a list of flight offers"""
    
    origin_destinations: list[shared_origindestination.OriginDestination] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originDestinations') }})
    r"""Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings."""  
    sources: list[shared_flightoffersource_enum.FlightOfferSourceEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sources') }})
    r"""Allows enable one or more sources. If present in the list, these sources will be called by the system."""  
    travelers: list[shared_traveler.Traveler] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelers') }})  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed."""  
    search_criteria: Optional[shared_searchcriteria.SearchCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchCriteria'), 'exclude': lambda f: f is None }})  
    