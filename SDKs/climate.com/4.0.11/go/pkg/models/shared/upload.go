// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UploadContentTypeEnum - Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)
type UploadContentTypeEnum string

const (
	UploadContentTypeEnumApplicationVndClimateFieldGeojson UploadContentTypeEnum = "application/vnd.climate.field.geojson"
	UploadContentTypeEnumImageVndClimateThermalGeotiff     UploadContentTypeEnum = "image/vnd.climate.thermal.geotiff"
	UploadContentTypeEnumImageVndClimateNdviGeotiff        UploadContentTypeEnum = "image/vnd.climate.ndvi.geotiff"
	UploadContentTypeEnumImageVndClimateWaterstressGeotiff UploadContentTypeEnum = "image/vnd.climate.waterstress.geotiff"
	UploadContentTypeEnumImageVndClimateElevationGeotiff   UploadContentTypeEnum = "image/vnd.climate.elevation.geotiff"
	UploadContentTypeEnumImageVndClimateRawGeotiff         UploadContentTypeEnum = "image/vnd.climate.raw.geotiff"
	UploadContentTypeEnumImageVndClimateRgbGeotiff         UploadContentTypeEnum = "image/vnd.climate.rgb.geotiff"
)

func (e *UploadContentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application/vnd.climate.field.geojson":
		fallthrough
	case "image/vnd.climate.thermal.geotiff":
		fallthrough
	case "image/vnd.climate.ndvi.geotiff":
		fallthrough
	case "image/vnd.climate.waterstress.geotiff":
		fallthrough
	case "image/vnd.climate.elevation.geotiff":
		fallthrough
	case "image/vnd.climate.raw.geotiff":
		fallthrough
	case "image/vnd.climate.rgb.geotiff":
		*e = UploadContentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadContentTypeEnum: %s", s)
	}
}

// Upload - Client request to upload data for a user.
type Upload struct {
	// Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)
	ContentType UploadContentTypeEnum `json:"contentType"`
	// Content size in bytes
	Length int64 `json:"length"`
	// Base64 encoded md5 hash of the content
	Md5      string                 `json:"md5"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}
