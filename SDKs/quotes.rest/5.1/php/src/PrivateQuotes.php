<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PrivateQuotes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a quote. The user needs to be the owner of the quote to be able to delete it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteResponse
     */
	public function deleteQuote(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteQuoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Gets a `Quote` with a given `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteResponse
     */
	public function getQuote(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get the list of quotes in your private collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteListResponse
     */
	public function getQuoteList(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update a quote
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchQuoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchQuoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchQuoteResponse
     */
	public function patchQuote(
        \OpenAPI\OpenAPI\Models\Operations\PatchQuoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchQuoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchQuoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchQuoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchQuoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteResponse
     */
	public function postQuote(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Add a tag to a given Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddResponse
     */
	public function postQuoteTagsAdd(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/tags/add');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a tag from a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveResponse
     */
	public function postQuoteTagsRemove(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/tags/remove');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteTagsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add a new quote to your private collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQuoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQuoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutQuoteResponse
     */
	public function putQuote(
        \OpenAPI\OpenAPI\Models\Operations\PutQuoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutQuoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutQuoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutQuoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutQuoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}