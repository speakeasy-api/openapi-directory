// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetUpdatedVideosSecurity struct {
	Basic              *shared.SchemeBasic              `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *shared.SchemeCustomerAccessCode `security:"scheme,type=oauth2"`
}

// GetUpdatedVideosSortEnum - Sort by oldest or newest videos first
type GetUpdatedVideosSortEnum string

const (
	GetUpdatedVideosSortEnumNewest GetUpdatedVideosSortEnum = "newest"
	GetUpdatedVideosSortEnumOldest GetUpdatedVideosSortEnum = "oldest"
)

func (e *GetUpdatedVideosSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "oldest":
		*e = GetUpdatedVideosSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUpdatedVideosSortEnum: %s", s)
	}
}

type GetUpdatedVideosQueryParams struct {
	// Show videos updated before the specified date
	EndDate *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request
	Interval *string `queryParam:"style=form,explode=true,name=interval"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Sort by oldest or newest videos first
	Sort *GetUpdatedVideosSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show videos updated on or after the specified date
	StartDate *types.Date `queryParam:"style=form,explode=true,name=start_date"`
}

type GetUpdatedVideosRequest struct {
	QueryParams GetUpdatedVideosQueryParams
	Security    GetUpdatedVideosSecurity
}

type GetUpdatedVideosResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	UpdatedMediaDataList *shared.UpdatedMediaDataList
}
