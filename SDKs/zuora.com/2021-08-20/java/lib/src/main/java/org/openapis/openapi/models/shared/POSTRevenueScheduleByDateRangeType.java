/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * POSTRevenueScheduleByDateRangeType - Container for custom fields of a Revenue Schedule object.
 * 
 */
public class POSTRevenueScheduleByDateRangeType {
    /**
     * How you want to distribute the revenue. 
     * 
     * 
     * * Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.
     * * Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.
     * * Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.
     * * Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.
     * 
     * **Note:** To use any of the Monthly Distribution options, you must have the "Monthly recognition over time" model enabled in **Settings &gt; Finance &gt; Manage Revenue Recognition Models** in the Zuora UI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distributionType")
    public POSTRevenueScheduleByDateRangeTypeDistributionTypeEnum distributionType;
    public POSTRevenueScheduleByDateRangeType withDistributionType(POSTRevenueScheduleByDateRangeTypeDistributionTypeEnum distributionType) {
        this.distributionType = distributionType;
        return this;
    }
    
    /**
     * Additional information about this record.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public POSTRevenueScheduleByDateRangeType withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The end date of a recognition period in `yyyy-mm-dd` format. 
     * 
     * The maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("recognitionEnd")
    public LocalDate recognitionEnd;
    public POSTRevenueScheduleByDateRangeType withRecognitionEnd(LocalDate recognitionEnd) {
        this.recognitionEnd = recognitionEnd;
        return this;
    }
    
    /**
     * The start date of a recognition period in `yyyy-mm-dd` format.
     * 
     * If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("recognitionStart")
    public LocalDate recognitionStart;
    public POSTRevenueScheduleByDateRangeType withRecognitionStart(LocalDate recognitionStart) {
        this.recognitionStart = recognitionStart;
        return this;
    }
    
    /**
     * Must specify at least one of `eventType` or `eventTypeSystemId`.
     * 
     */
    @JsonProperty("revenueEvent")
    public POSTRevenueScheduleByDateRangeTypeRevenueEvent revenueEvent;
    public POSTRevenueScheduleByDateRangeType withRevenueEvent(POSTRevenueScheduleByDateRangeTypeRevenueEvent revenueEvent) {
        this.revenueEvent = revenueEvent;
        return this;
    }
    
}
