"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwoForMobileAppOptional = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
/**
 * # Introduction
 *
 * @remarks
 * These API services designed to use it inside a mobile applications to get statistics data and services directly from telematics platform and show it in the app
 *
 * # Scheme
 * ![API statistics](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/API+statistics+integration.png)
 */
var TwoForMobileAppOptional = /** @class */ (function () {
    function TwoForMobileAppOptional(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Trips - trip details
     *
     * @remarks
     * Trips - trip details
     */
    TwoForMobileAppOptional.prototype.tripsTripDetails = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TripsTripDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/mobilesdk/stage/track/get_track/v1";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TripsTripDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tripsTripDetails200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.TripsTripDetails200ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * User safe scoring - Accumulated value - v1/Scorings/individual
     *
     * @remarks
     * Safe driving score API. This API is a part of Telematics API that we provide to our clients.
     *
     * Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients' driving style.
     * Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event
     *
     * [More details](https://docs.telematicssdk.com)
     */
    TwoForMobileAppOptional.prototype.userSafeScoringAccumulatedValueV1ScoringsIndividual = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/statistics/v1/Scorings/individual/";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.UserSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     *
     * @remarks
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     */
    TwoForMobileAppOptional.prototype.userSafeScoringDailyValueV1ScoringsIndividualDaily = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/statistics/v1/Scorings/individual/daily";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.UserSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * User statistice - Daily value - v1/Statistics/individual/daily
     *
     * @remarks
     * User statistice - Daily value - v1/Statistics/individual/daily
     */
    TwoForMobileAppOptional.prototype.userStatisticeDailyValueV1StatisticsIndividualDaily = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.UserStatisticeDailyValueV1StatisticsIndividualDailyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/statistics/v1/Statistics/individual/daily/";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UserStatisticeDailyValueV1StatisticsIndividualDailyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userStatisticeDailyValueV1StatisticsIndividualDaily200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.UserStatisticeDailyValueV1StatisticsIndividualDaily200ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * User statistics - Accumulated value - /v1/Statistics/individual
     *
     * @remarks
     * User statistics - Accumulated value - /v1/Statistics/individual
     */
    TwoForMobileAppOptional.prototype.userStatisticsAccumulatedValueV1StatisticsIndividual = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.UserStatisticsAccumulatedValueV1StatisticsIndividualRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/statistics/v1/Statistics/individual/";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UserStatisticsAccumulatedValueV1StatisticsIndividualResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    return TwoForMobileAppOptional;
}());
exports.TwoForMobileAppOptional = TwoForMobileAppOptional;
