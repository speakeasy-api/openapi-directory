"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Schemas:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deleteschemabyname(self, request: operations.DeleteschemabynameRequest) -> operations.DeleteschemabynameResponse:
        r"""Delete schema by name
        Deletes an existing schema for a given data entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteschemabynameRequest, base_url, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteschemabynameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getschemabyname(self, request: operations.GetschemabynameRequest) -> operations.GetschemabynameResponse:
        r"""Get schema by name
        Returns an existing schema for a given data entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetschemabynameRequest, base_url, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetschemabynameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getschemas(self, request: operations.GetschemasRequest) -> operations.GetschemasResponse:
        r"""Get schemas
        Return the schemas saved.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetschemasRequest, base_url, '/api/dataentities/{dataEntityName}/schemas', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetschemasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def saveschemabyname(self, request: operations.SaveschemabynameRequest) -> operations.SaveschemabynameResponse:
        r"""Save schema by name
        Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)
        
        > Note that if you send a `schemaName` that does not exist for that data entity, this request will create it.
        
        This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SaveschemabynameRequest, base_url, '/api/dataentities/{dataEntityName}/schemas/{schemaName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "saveschemabyname_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveschemabynameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    