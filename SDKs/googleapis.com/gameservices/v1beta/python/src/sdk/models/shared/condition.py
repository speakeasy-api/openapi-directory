"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConditionIamEnum(str, Enum):
    r"""Trusted attributes supplied by the IAM system."""
    NO_ATTR = 'NO_ATTR'
    AUTHORITY = 'AUTHORITY'
    ATTRIBUTION = 'ATTRIBUTION'
    SECURITY_REALM = 'SECURITY_REALM'
    APPROVER = 'APPROVER'
    JUSTIFICATION_TYPE = 'JUSTIFICATION_TYPE'
    CREDENTIALS_TYPE = 'CREDENTIALS_TYPE'
    CREDS_ASSERTION = 'CREDS_ASSERTION'

class ConditionOpEnum(str, Enum):
    r"""An operator to apply the subject with."""
    NO_OP = 'NO_OP'
    EQUALS = 'EQUALS'
    NOT_EQUALS = 'NOT_EQUALS'
    IN = 'IN'
    NOT_IN = 'NOT_IN'
    DISCHARGED = 'DISCHARGED'

class ConditionSysEnum(str, Enum):
    r"""Trusted attributes supplied by any service that owns resources and uses the IAM system for access control."""
    NO_ATTR = 'NO_ATTR'
    REGION = 'REGION'
    SERVICE = 'SERVICE'
    NAME = 'NAME'
    IP = 'IP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Condition:
    r"""A condition to be met."""
    
    iam: Optional[ConditionIamEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iam'), 'exclude': lambda f: f is None }})
    r"""Trusted attributes supplied by the IAM system."""  
    op: Optional[ConditionOpEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""An operator to apply the subject with."""  
    svc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svc'), 'exclude': lambda f: f is None }})
    r"""Trusted attributes discharged by the service."""  
    sys: Optional[ConditionSysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sys'), 'exclude': lambda f: f is None }})
    r"""Trusted attributes supplied by any service that owns resources and uses the IAM system for access control."""  
    values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})
    r"""The objects of the condition."""  
    