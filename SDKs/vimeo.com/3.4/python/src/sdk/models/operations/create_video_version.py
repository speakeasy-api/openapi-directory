"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import video_versions as shared_video_versions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateVideoVersionRequestBodyUploadApproachEnum(str, Enum):
    r"""Upload approach"""
    POST = 'post'
    PULL = 'pull'
    STREAMING = 'streaming'
    TUS = 'tus'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVideoVersionRequestBodyUpload:
    
    approach: CreateVideoVersionRequestBodyUploadApproachEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approach') }})
    r"""Upload approach"""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""If your upload approach is pull, Vimeo will download the video hosted at this public URL. This URL must be valid for at least 24 hours."""  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_url'), 'exclude': lambda f: f is None }})
    r"""The app's redirect URL. Use this parameter when `approach` is `post`."""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Upload size"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVideoVersionRequestBody:
    
    file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name') }})
    r"""The name of the version"""  
    upload: CreateVideoVersionRequestBodyUpload = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload') }})  
    

@dataclasses.dataclass
class CreateVideoVersionRequest:
    
    request_body: CreateVideoVersionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/vnd.vimeo.video.version+json' }})  
    video_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'video_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the video."""  
    

@dataclasses.dataclass
class CreateVideoVersionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""* Error code 2204: If the request input contains invalid upload data.
    * Error code 2204: If the request input contains invalid versions data.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    video_versions: Optional[shared_video_versions.VideoVersions] = dataclasses.field(default=None)
    r"""Standard request."""  
    