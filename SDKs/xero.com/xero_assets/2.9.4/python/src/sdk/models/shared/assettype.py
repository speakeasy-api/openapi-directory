"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bookdepreciationsetting as shared_bookdepreciationsetting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssetType:
    r"""Asset type to add"""
    
    asset_type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetTypeName') }})
    r"""The name of the asset type"""  
    book_depreciation_setting: shared_bookdepreciationsetting.BookDepreciationSetting = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookDepreciationSetting') }})  
    accumulated_depreciation_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accumulatedDepreciationAccountId'), 'exclude': lambda f: f is None }})
    r"""The account for accumulated depreciation of fixed assets of this type"""  
    asset_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetTypeId'), 'exclude': lambda f: f is None }})
    r"""Xero generated unique identifier for asset types"""  
    depreciation_expense_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciationExpenseAccountId'), 'exclude': lambda f: f is None }})
    r"""The expense account for the depreciation of fixed assets of this type"""  
    fixed_asset_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedAssetAccountId'), 'exclude': lambda f: f is None }})
    r"""The asset account for fixed assets of this type"""  
    locks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locks'), 'exclude': lambda f: f is None }})
    r"""All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed."""  
    