"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class CommentsReadRequest:
    
    comment_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'comment_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the comment you wish to retrieve."""  
    

@dataclasses.dataclass
class CommentsReadCommentAttributes:
    r"""The properties of the comment entity."""
    
    can_edit: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the current user has permission to edit this comment"""  
    content: Optional[str] = dataclasses.field(default=None)
    r"""The content of the comment."""  
    date_created: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the comment was created, as an iso8601 formatted timestamp."""  
    date_modified: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the comment was last modified, as an iso8601 formatted timestamp."""  
    deleted: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the comment is deleted."""  
    has_children: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the comment has replies."""  
    has_report: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the comment the current user reported this as spam."""  
    is_abuse: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the comment is flagged or confirmed spam."""  
    is_ham: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not an admin checked the legitimacy of this comment."""  
    modified: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the comment has been edited."""  
    page: Optional[str] = dataclasses.field(default=None)
    r"""The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`."""  
    

@dataclasses.dataclass
class CommentsReadCommentLinks:
    r"""URLs to alternative representations of the comment entity."""
    
    self_: Optional[str] = dataclasses.field(default=None)
    r"""A link to the detail page for the comment."""  
    

@dataclasses.dataclass
class CommentsReadCommentRelationships:
    r"""URLs to other entities or entity collections that have a relationship to the comment entity."""
    
    node: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the node the comment is on."""  
    replies: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the replies to the comment."""  
    reports: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the reports connected to the comment."""  
    target: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the target of the comment."""  
    user: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the user who created the comment."""  
    

@dataclasses.dataclass
class CommentsReadComment:
    r"""OK"""
    
    id: str = dataclasses.field()
    r"""The identifier of the comment entity."""  
    attributes: Optional[CommentsReadCommentAttributes] = dataclasses.field(default=None)
    r"""The properties of the comment entity."""  
    links: Optional[CommentsReadCommentLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the comment entity."""  
    relationships: Optional[CommentsReadCommentRelationships] = dataclasses.field(default=None)
    r"""URLs to other entities or entity collections that have a relationship to the comment entity."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type identifier of the comment entity (`comments`)."""  
    

@dataclasses.dataclass
class CommentsReadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    