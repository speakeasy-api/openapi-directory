/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Order - Contains all information related to a single order to process with Square,
 * including line items that specify the products to purchase. `Order` objects also
 * include information about any associated tenders, refunds, and returns.
 * 
 * All Connect V2 Transactions have all been converted to Orders including all associated
 * itemization data.
 */
public class Order {
    /**
     * The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_at")
    public String closedAt;

    public Order withClosedAt(String closedAt) {
        this.closedAt = closedAt;
        return this;
    }
    
    /**
     * The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Order withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
     * 
     * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
     * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the 
     * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the 
     * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public Order withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The list of all discounts associated with the order.
     * 
     * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
     * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
     * For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
     * for every line item.
     * 
     * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
     * `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
     * instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    public OrderLineItemDiscount[] discounts;

    public Order withDiscounts(OrderLineItemDiscount[] discounts) {
        this.discounts = discounts;
        return this;
    }
    
    /**
     * Details about order fulfillment.
     * 
     * Orders can only be created with at most one fulfillment. However, orders returned
     * by the API might contain multiple fulfillments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillments")
    public OrderFulfillment[] fulfillments;

    public Order withFulfillments(OrderFulfillment[] fulfillments) {
        this.fulfillments = fulfillments;
        return this;
    }
    
    /**
     * The order's unique ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Order withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The line items included in the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    public OrderLineItem[] lineItems;

    public Order withLineItems(OrderLineItem[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    /**
     * The ID of the seller location that this order is associated with.
     */
    @JsonProperty("location_id")
    public String locationId;

    public Order withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Application-defined data attached to this order. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public Order withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * A collection of various money amounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_amounts")
    public OrderMoneyAmounts netAmounts;

    public Order withNetAmounts(OrderMoneyAmounts netAmounts) {
        this.netAmounts = netAmounts;
        return this;
    }
    
    /**
     * Pricing options for an order. The options affect how the order's price is calculated.
     * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
     * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_options")
    public OrderPricingOptions pricingOptions;

    public Order withPricingOptions(OrderPricingOptions pricingOptions) {
        this.pricingOptions = pricingOptions;
        return this;
    }
    
    /**
     * A client-specified ID to associate an entity in another system
     * with this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public String referenceId;

    public Order withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * The refunds that are part of this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    public Refund[] refunds;

    public Order withRefunds(Refund[] refunds) {
        this.refunds = refunds;
        return this;
    }
    
    /**
     * A collection of various money amounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_amounts")
    public OrderMoneyAmounts returnAmounts;

    public Order withReturnAmounts(OrderMoneyAmounts returnAmounts) {
        this.returnAmounts = returnAmounts;
        return this;
    }
    
    /**
     * A collection of items from sale orders being returned in this one. Normally part of an
     * itemized return or exchange. There is exactly one `Return` object per sale `Order` being
     * referenced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returns")
    public OrderReturn[] returns;

    public Order withReturns(OrderReturn[] returns) {
        this.returns = returns;
        return this;
    }
    
    /**
     * A set-like list of Rewards that have been added to the Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewards")
    public OrderReward[] rewards;

    public Order withRewards(OrderReward[] rewards) {
        this.rewards = rewards;
        return this;
    }
    
    /**
     * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
     * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rounding_adjustment")
    public OrderRoundingAdjustment roundingAdjustment;

    public Order withRoundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
        this.roundingAdjustment = roundingAdjustment;
        return this;
    }
    
    /**
     * A list of service charges applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charges")
    public OrderServiceCharge[] serviceCharges;

    public Order withServiceCharges(OrderServiceCharge[] serviceCharges) {
        this.serviceCharges = serviceCharges;
        return this;
    }
    
    /**
     * Represents the origination details of an order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public OrderSource source;

    public Order withSource(OrderSource source) {
        this.source = source;
        return this;
    }
    
    /**
     * The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public Order withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The list of all taxes associated with the order.
     * 
     * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
     * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
     * with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
     * 
     * On reads, each tax in the list includes the total amount of that tax applied to the order.
     * 
     * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
     * `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
     * instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    public OrderLineItemTax[] taxes;

    public Order withTaxes(OrderLineItemTax[] taxes) {
        this.taxes = taxes;
        return this;
    }
    
    /**
     * The tenders that were used to pay for the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenders")
    public Tender[] tenders;

    public Order withTenders(Tender[] tenders) {
        this.tenders = tenders;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount_money")
    public Money totalDiscountMoney;

    public Order withTotalDiscountMoney(Money totalDiscountMoney) {
        this.totalDiscountMoney = totalDiscountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public Money totalMoney;

    public Order withTotalMoney(Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_service_charge_money")
    public Money totalServiceChargeMoney;

    public Order withTotalServiceChargeMoney(Money totalServiceChargeMoney) {
        this.totalServiceChargeMoney = totalServiceChargeMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_money")
    public Money totalTaxMoney;

    public Order withTotalTaxMoney(Money totalTaxMoney) {
        this.totalTaxMoney = totalTaxMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tip_money")
    public Money totalTipMoney;

    public Order withTotalTipMoney(Money totalTipMoney) {
        this.totalTipMoney = totalTipMoney;
        return this;
    }
    
    /**
     * The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public Order withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The version number, which is incremented each time an update is committed to the order.
     * Orders not created through the API do not include a version number and
     * therefore cannot be updated.
     * 
     * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public Order withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    public Order(@JsonProperty("location_id") String locationId) {
        this.locationId = locationId;
  }
}
