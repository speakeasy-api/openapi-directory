// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DlpProjectsLocationsDlpJobsListSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// DlpProjectsLocationsDlpJobsListTypeEnum - The type of job. Defaults to `DlpJobType.INSPECT`
type DlpProjectsLocationsDlpJobsListTypeEnum string

const (
	DlpProjectsLocationsDlpJobsListTypeEnumDlpJobTypeUnspecified DlpProjectsLocationsDlpJobsListTypeEnum = "DLP_JOB_TYPE_UNSPECIFIED"
	DlpProjectsLocationsDlpJobsListTypeEnumInspectJob            DlpProjectsLocationsDlpJobsListTypeEnum = "INSPECT_JOB"
	DlpProjectsLocationsDlpJobsListTypeEnumRiskAnalysisJob       DlpProjectsLocationsDlpJobsListTypeEnum = "RISK_ANALYSIS_JOB"
)

func (e *DlpProjectsLocationsDlpJobsListTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DLP_JOB_TYPE_UNSPECIFIED":
		fallthrough
	case "INSPECT_JOB":
		fallthrough
	case "RISK_ANALYSIS_JOB":
		*e = DlpProjectsLocationsDlpJobsListTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DlpProjectsLocationsDlpJobsListTypeEnum: %s", s)
	}
}

type DlpProjectsLocationsDlpJobsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * Supported fields/values for inspect jobs: - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY - `trigger_name` - The name of the trigger that created the job. - 'end_time` - Corresponds to the time the job finished. - 'start_time` - Corresponds to the time the job finished. * Supported fields for risk analysis jobs: - `state` - RUNNING|CANCELED|FINISHED|FAILED - 'end_time` - Corresponds to the time the job finished. - 'start_time` - Corresponds to the time the job finished. * The operator must be `=` or `!=`. Examples: * inspected_storage = cloud_storage AND state = done * inspected_storage = cloud_storage OR inspected_storage = bigquery * inspected_storage = cloud_storage AND (state = done OR state = canceled) * end_time > \"2017-12-12T00:00:00+00:00\" The length of this field should be no more than 500 characters.
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Deprecated. This field has no effect.
	LocationID *string `queryParam:"style=form,explode=true,name=locationId"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Comma separated list of fields to order by, followed by `asc` or `desc` postfix. This list is case-insensitive, default sorting order is ascending, redundant space characters are insignificant. Example: `name asc, end_time asc, create_time desc` Supported fields are: - `create_time`: corresponds to the time the job was created. - `end_time`: corresponds to the time the job ended. - `name`: corresponds to the job's name. - `state`: corresponds to `state`
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// The standard list page size.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// The standard list page token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Required. Parent resource name. The format of this value varies depending on whether you have [specified a processing location](https://cloud.google.com/dlp/docs/specifying-location): + Projects scope, location specified: `projects/`PROJECT_ID`/locations/`LOCATION_ID + Projects scope, no location specified (defaults to global): `projects/`PROJECT_ID The following example `parent` string specifies a parent project with the identifier `example-project`, and specifies the `europe-west3` location for processing data: parent=projects/example-project/locations/europe-west3
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The type of job. Defaults to `DlpJobType.INSPECT`
	Type *DlpProjectsLocationsDlpJobsListTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type DlpProjectsLocationsDlpJobsListResponse struct {
	ContentType string
	// Successful response
	GooglePrivacyDlpV2ListDlpJobsResponse *shared.GooglePrivacyDlpV2ListDlpJobsResponse
	StatusCode                            int
	RawResponse                           *http.Response
}
