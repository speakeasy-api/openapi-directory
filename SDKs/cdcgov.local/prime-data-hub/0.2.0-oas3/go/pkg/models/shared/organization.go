// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OrganizationJurisdictionEnum string

const (
	OrganizationJurisdictionEnumNational OrganizationJurisdictionEnum = "National"
	OrganizationJurisdictionEnumState    OrganizationJurisdictionEnum = "State"
	OrganizationJurisdictionEnumCounty   OrganizationJurisdictionEnum = "County"
)

func (e *OrganizationJurisdictionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "National":
		fallthrough
	case "State":
		fallthrough
	case "County":
		*e = OrganizationJurisdictionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationJurisdictionEnum: %s", s)
	}
}

// OrganizationInput - An organization connected to data hub
type OrganizationInput struct {
	// the county name (must match FIPS name)
	CountyName *string `json:"countyName,omitempty"`
	// the displayable description of the organization
	Description  string                       `json:"description"`
	Jurisdiction OrganizationJurisdictionEnum `json:"jurisdiction"`
	// the unique id for the organization
	Name string `json:"name"`
	// the two letter code for the organization
	StateCode *string `json:"stateCode,omitempty"`
}

// Organization - An organization connected to data hub
type Organization struct {
	// the county name (must match FIPS name)
	CountyName *string `json:"countyName,omitempty"`
	// the displayable description of the organization
	Description  string                       `json:"description"`
	Jurisdiction OrganizationJurisdictionEnum `json:"jurisdiction"`
	// The metadata associated with an setting
	Meta *SettingMetadata `json:"meta,omitempty"`
	// the unique id for the organization
	Name string `json:"name"`
	// the two letter code for the organization
	StateCode *string `json:"stateCode,omitempty"`
}
