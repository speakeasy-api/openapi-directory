/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PostSearchResult - An offer, wanted, admin, taken or received post.
 */
public class PostSearchResult {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;

    public PostSearchResult withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The UTC date and time when the post was published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;

    public PostSearchResult withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    /**
     * The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration")
    public OffsetDateTime expiration;

    public PostSearchResult withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footer")
    public String footer;

    public PostSearchResult withFooter(String footer) {
        this.footer = footer;
        return this;
    }
    
    /**
     * The group ID of the post.  For public posts, this is always null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    public String groupId;

    public PostSearchResult withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }
    
    /**
     * May be null if a post hasn't been mapped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Double latitude;

    public PostSearchResult withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * May be null if a post hasn't been mapped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Double longitude;

    public PostSearchResult withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   &lt;br /&gt;&lt;br /&gt; Offer post outcomes will be one of: satisfied, withdrawn, promised, expired &lt;br /&gt;&lt;br /&gt; Wanted post outcomes will be one of: satisfied, withdrawn, expired &lt;br /&gt;&lt;br /&gt; For all other posts, outcome is always null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outcome")
    public String outcome;

    public PostSearchResult withOutcome(String outcome) {
        this.outcome = outcome;
        return this;
    }
    
    /**
     * Details about the photos associated with this post (may be null if there are no photos).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photos")
    public Photo[] photos;

    public PostSearchResult withPhotos(Photo[] photos) {
        this.photos = photos;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_id")
    public String postId;

    public PostSearchResult withPostId(String postId) {
        this.postId = postId;
        return this;
    }
    
    /**
     * The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repost_count")
    public Long repostCount;

    public PostSearchResult withRepostCount(Long repostCount) {
        this.repostCount = repostCount;
        return this;
    }
    
    /**
     * For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reselling")
    public Boolean reselling;

    public PostSearchResult withReselling(Boolean reselling) {
        this.reselling = reselling;
        return this;
    }
    
    /**
     * A snippet of the post content as HTML with the parts of the content that matched the search query (if any) wrapped in an HTML span tags with the class 'highlight' (eg. &amp;lt;span class="highlight"&amp;gt;matched words&amp;lt;/span&amp;gt;). May be null if none of the words in the post content matched the search query. &lt;br /&gt;&lt;br /&gt; NOTE: This is not the full content of the post  It is just a snippet of around 200 characters that can be used to display the parts of the post content relevant to the search query.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_content")
    public String searchContent;

    public PostSearchResult withSearchContent(String searchContent) {
        this.searchContent = searchContent;
        return this;
    }
    
    /**
     * The post subject as HTML with the parts of the subject that matched the search query (if any) wrapped in HTML span tags with the class 'highlight'. (eg. &amp;lt;span class="highlight"&amp;gt;matched words&amp;lt;/span&amp;gt;). May be null if none of the words in the subject matched the search query.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_title")
    public String searchTitle;

    public PostSearchResult withSearchTitle(String searchTitle) {
        this.searchTitle = searchTitle;
        return this;
    }
    
    /**
     * The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;

    public PostSearchResult withSource(String source) {
        this.source = source;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public PostSearchResult withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of post.  One of: offer, taken, wanted, received, admin
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public PostSearchResult withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The link to use to view the post on the trash nothing site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public PostSearchResult withUrl(String url) {
        this.url = url;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;

    public PostSearchResult withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    public PostSearchResult(){}
}
