"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardIssueDetailZoomRoomSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DashboardIssueDetailZoomRoomRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    zoomroom_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'zoomroomId', 'style': 'simple', 'explode': False }})
    r"""The Zoom room ID."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class DashboardIssueDetailZoomRoom200ApplicationXMLIssueDetails:
    
    issue: Optional[str] = dataclasses.field(default=None)
    r"""Zoom Room Issue Detail.<br> The value of the this field could be one of the following:<br>
    * `Room Controller disconnected`<br>
    * `Room Controller connected`
    * `Selected camera has disconnected`
    * `Selected camera is reconnected`
    * `Selected microphone has disconnected`
    * `Selected microphone is reconnected`
    * `Selected speaker has disconnected`
    * `Selected speaker is reconnected`
    * `Zoom room is offline`
    * `Zoom room is online`
    * `High CPU usage is detected`
    * `Low bandwidth network is detected`
    * `{name} battery is low`
    * `{name} battery is normal`
    * `{name} disconnected`
    * `{name} connected`
    * `{name} is not charging`
    
    Possible values for {name}: <br>
    * Zoom Rooms Computer 
    * Controller
    * Scheduling Display
    """  
    time: Optional[datetime] = dataclasses.field(default=None)
    r"""Time at which the issue was encountered."""  
    

@dataclasses.dataclass
class DashboardIssueDetailZoomRoom200ApplicationXML:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report"""  
    issue_details: Optional[list[DashboardIssueDetailZoomRoom200ApplicationXMLIssueDetails]] = dataclasses.field(default=None)  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report"""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The number of all records available across pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIssueDetailZoomRoom200ApplicationJSONIssueDetails:
    
    issue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""Zoom Room Issue Detail.<br> The value of the this field could be one of the following:<br>
    * `Room Controller disconnected`<br>
    * `Room Controller connected`
    * `Selected camera has disconnected`
    * `Selected camera is reconnected`
    * `Selected microphone has disconnected`
    * `Selected microphone is reconnected`
    * `Selected speaker has disconnected`
    * `Selected speaker is reconnected`
    * `Zoom room is offline`
    * `Zoom room is online`
    * `High CPU usage is detected`
    * `Low bandwidth network is detected`
    * `{name} battery is low`
    * `{name} battery is normal`
    * `{name} disconnected`
    * `{name} connected`
    * `{name} is not charging`
    
    Possible values for {name}: <br>
    * Zoom Rooms Computer 
    * Controller
    * Scheduling Display
    """  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time at which the issue was encountered."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIssueDetailZoomRoom200ApplicationJSON:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report"""  
    issue_details: Optional[list[DashboardIssueDetailZoomRoom200ApplicationJSONIssueDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_details'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report"""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages."""  
    

@dataclasses.dataclass
class DashboardIssueDetailZoomRoomResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_issue_detail_zoom_room_200_application_json_object: Optional[DashboardIssueDetailZoomRoom200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Zoom Room with issue details returned
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    