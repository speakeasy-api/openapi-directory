/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SessionController {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Change the password of a customer given their existing and new password.
   */
  sessionControllerChangePassword(
    req: operations.SessionControllerChangePasswordRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerChangePasswordResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerChangePasswordRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session/password",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerChangePasswordResponse =
        new operations.SessionControllerChangePasswordResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Send a request to the in-tray to create a landlord login.
   */
  sessionControllerCreateLandlordLogin(
    req: operations.SessionControllerCreateLandlordLoginRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerCreateLandlordLoginResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerCreateLandlordLoginRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session/createlandlordlogin",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerCreateLandlordLoginResponse =
        new operations.SessionControllerCreateLandlordLoginResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about the currently logged on customer.
   */
  sessionControllerGetSessionInfo(
    req: operations.SessionControllerGetSessionInfoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerGetSessionInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerGetSessionInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerGetSessionInfoResponse =
        new operations.SessionControllerGetSessionInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sessionControllerGetSessionInfo200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.sessionControllerGetSessionInfo200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.sessionControllerGetSessionInfo200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.sessionControllerGetSessionInfo200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Login as a customer given their username and password.
   */
  sessionControllerLogin(
    req: operations.SessionControllerLoginRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerLoginResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerLoginRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerLoginResponse =
        new operations.SessionControllerLoginResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sessionControllerLogin200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.sessionControllerLogin200ApplicationXMLString = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.sessionControllerLogin200TextJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.sessionControllerLogin200TextXMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Logout a customer previously logged in via the Login endpoint.
   */
  sessionControllerLogout(
    req: operations.SessionControllerLogoutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerLogoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerLogoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerLogoutResponse =
        new operations.SessionControllerLogoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Reset the customer's password. An email will be sent out to reset.
   */
  sessionControllerResetPassword(
    req: operations.SessionControllerResetPasswordRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SessionControllerResetPasswordResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SessionControllerResetPasswordRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customer/{shortName}/session/resetpassword",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SessionControllerResetPasswordResponse =
        new operations.SessionControllerResetPasswordResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
