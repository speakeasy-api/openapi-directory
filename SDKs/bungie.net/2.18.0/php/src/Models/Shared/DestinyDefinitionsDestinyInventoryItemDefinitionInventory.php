<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyDefinitionsDestinyInventoryItemDefinitionInventory - If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyDefinitionsDestinyInventoryItemDefinitionInventory
{
    /**
     * The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.
     * 
     * @var ?int $bucketTypeHash
     */
	
    public ?int $bucketTypeHash = null;
    
    /**
     * The tooltip message to show, if any, when the item expires.
     * 
     * @var ?string $expirationTooltip
     */
	
    public ?string $expirationTooltip = null;
    
    /**
     * If the item expires while playing in an activity, we show a different message.
     * 
     * @var ?string $expiredInActivityMessage
     */
	
    public ?string $expiredInActivityMessage = null;
    
    /**
     * If the item expires in orbit, we show a... more different message. ("Consummate V's, consummate!")
     * 
     * @var ?string $expiredInOrbitMessage
     */
	
    public ?string $expiredInOrbitMessage = null;
    
    /**
     * If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
     * 
     * @var ?bool $isInstanceItem
     */
	
    public ?bool $isInstanceItem = null;
    
    /**
     * The maximum quantity of this item that can exist in a stack.
     * 
     * @var ?int $maxStackSize
     */
	
    public ?int $maxStackSize = null;
    
    /**
     * A reference to the associated crafting 'recipe' item definition, if this item can be crafted.
     * 
     * @var ?int $recipeItemHash
     */
	
    public ?int $recipeItemHash = null;
    
    /**
     * If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
     * 
     * @var ?int $recoveryBucketTypeHash
     */
	
    public ?int $recoveryBucketTypeHash = null;
    
    /**
     * If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
     * 
     * @var ?string $stackUniqueLabel
     */
	
    public ?string $stackUniqueLabel = null;
    
	
    public ?bool $suppressExpirationWhenObjectivesComplete = null;
    
    /**
     * The enumeration matching the tier type of the item to known values, again for convenience sake.
     * 
     * @var ?int $tierType
     */
	
    public ?int $tierType = null;
    
    /**
     * The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
     * 
     * @var ?int $tierTypeHash
     */
	
    public ?int $tierTypeHash = null;
    
    /**
     * The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
     * 
     * @var ?string $tierTypeName
     */
	
    public ?string $tierTypeName = null;
    
	public function __construct()
	{
		$this->bucketTypeHash = null;
		$this->expirationTooltip = null;
		$this->expiredInActivityMessage = null;
		$this->expiredInOrbitMessage = null;
		$this->isInstanceItem = null;
		$this->maxStackSize = null;
		$this->recipeItemHash = null;
		$this->recoveryBucketTypeHash = null;
		$this->stackUniqueLabel = null;
		$this->suppressExpirationWhenObjectivesComplete = null;
		$this->tierType = null;
		$this->tierTypeHash = null;
		$this->tierTypeName = null;
	}
}
