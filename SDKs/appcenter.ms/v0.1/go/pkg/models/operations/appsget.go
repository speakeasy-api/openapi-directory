// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppsGetDefaultApplicationJSONErrorCodeEnum string

const (
	AppsGetDefaultApplicationJSONErrorCodeEnumBadRequest          AppsGetDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsGetDefaultApplicationJSONErrorCodeEnumConflict            AppsGetDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsGetDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsGetDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsGetDefaultApplicationJSONErrorCodeEnumNotFound            AppsGetDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsGetDefaultApplicationJSONErrorCodeEnumInternalServerError AppsGetDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsGetDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsGetDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsGetDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsGetDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsGetDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsGetDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsGetDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsGetDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsGetDefaultApplicationJSONError struct {
	Code    AppsGetDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                     `json:"message"`
}

// AppsGetDefaultApplicationJSON - Error
type AppsGetDefaultApplicationJSON struct {
	Error AppsGetDefaultApplicationJSONError `json:"error"`
}

type AppsGet200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsGet200ApplicationJSONMemberPermissionsEnum string

const (
	AppsGet200ApplicationJSONMemberPermissionsEnumManager   AppsGet200ApplicationJSONMemberPermissionsEnum = "manager"
	AppsGet200ApplicationJSONMemberPermissionsEnumDeveloper AppsGet200ApplicationJSONMemberPermissionsEnum = "developer"
	AppsGet200ApplicationJSONMemberPermissionsEnumViewer    AppsGet200ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsGet200ApplicationJSONMemberPermissionsEnumTester    AppsGet200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e AppsGet200ApplicationJSONMemberPermissionsEnum) ToPointer() *AppsGet200ApplicationJSONMemberPermissionsEnum {
	return &e
}

func (e *AppsGet200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsGet200ApplicationJSONMemberPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGet200ApplicationJSONMemberPermissionsEnum: %v", v)
	}
}

// AppsGet200ApplicationJSONOriginEnum - The creation origin of this app
type AppsGet200ApplicationJSONOriginEnum string

const (
	AppsGet200ApplicationJSONOriginEnumAppcenter AppsGet200ApplicationJSONOriginEnum = "appcenter"
	AppsGet200ApplicationJSONOriginEnumHockeyapp AppsGet200ApplicationJSONOriginEnum = "hockeyapp"
	AppsGet200ApplicationJSONOriginEnumCodepush  AppsGet200ApplicationJSONOriginEnum = "codepush"
)

func (e AppsGet200ApplicationJSONOriginEnum) ToPointer() *AppsGet200ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsGet200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGet200ApplicationJSONOriginEnum: %v", v)
	}
}

// AppsGet200ApplicationJSONOsEnum - The OS the app will be running on
type AppsGet200ApplicationJSONOsEnum string

const (
	AppsGet200ApplicationJSONOsEnumAndroid AppsGet200ApplicationJSONOsEnum = "Android"
	AppsGet200ApplicationJSONOsEnumIOs     AppsGet200ApplicationJSONOsEnum = "iOS"
	AppsGet200ApplicationJSONOsEnumMacOs   AppsGet200ApplicationJSONOsEnum = "macOS"
	AppsGet200ApplicationJSONOsEnumTizen   AppsGet200ApplicationJSONOsEnum = "Tizen"
	AppsGet200ApplicationJSONOsEnumTvOs    AppsGet200ApplicationJSONOsEnum = "tvOS"
	AppsGet200ApplicationJSONOsEnumWindows AppsGet200ApplicationJSONOsEnum = "Windows"
	AppsGet200ApplicationJSONOsEnumLinux   AppsGet200ApplicationJSONOsEnum = "Linux"
	AppsGet200ApplicationJSONOsEnumCustom  AppsGet200ApplicationJSONOsEnum = "Custom"
)

func (e AppsGet200ApplicationJSONOsEnum) ToPointer() *AppsGet200ApplicationJSONOsEnum {
	return &e
}

func (e *AppsGet200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsGet200ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGet200ApplicationJSONOsEnum: %v", v)
	}
}

// AppsGet200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsGet200ApplicationJSONOwnerTypeEnum string

const (
	AppsGet200ApplicationJSONOwnerTypeEnumOrg  AppsGet200ApplicationJSONOwnerTypeEnum = "org"
	AppsGet200ApplicationJSONOwnerTypeEnumUser AppsGet200ApplicationJSONOwnerTypeEnum = "user"
)

func (e AppsGet200ApplicationJSONOwnerTypeEnum) ToPointer() *AppsGet200ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *AppsGet200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = AppsGet200ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGet200ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// AppsGet200ApplicationJSONOwner - The information about the app's owner
type AppsGet200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsGet200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsGet200ApplicationJSONPlatformEnum - The platform of the app
type AppsGet200ApplicationJSONPlatformEnum string

const (
	AppsGet200ApplicationJSONPlatformEnumJava            AppsGet200ApplicationJSONPlatformEnum = "Java"
	AppsGet200ApplicationJSONPlatformEnumObjectiveCSwift AppsGet200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsGet200ApplicationJSONPlatformEnumUwp             AppsGet200ApplicationJSONPlatformEnum = "UWP"
	AppsGet200ApplicationJSONPlatformEnumCordova         AppsGet200ApplicationJSONPlatformEnum = "Cordova"
	AppsGet200ApplicationJSONPlatformEnumReactNative     AppsGet200ApplicationJSONPlatformEnum = "React-Native"
	AppsGet200ApplicationJSONPlatformEnumUnity           AppsGet200ApplicationJSONPlatformEnum = "Unity"
	AppsGet200ApplicationJSONPlatformEnumElectron        AppsGet200ApplicationJSONPlatformEnum = "Electron"
	AppsGet200ApplicationJSONPlatformEnumXamarin         AppsGet200ApplicationJSONPlatformEnum = "Xamarin"
	AppsGet200ApplicationJSONPlatformEnumWpf             AppsGet200ApplicationJSONPlatformEnum = "WPF"
	AppsGet200ApplicationJSONPlatformEnumWinForms        AppsGet200ApplicationJSONPlatformEnum = "WinForms"
	AppsGet200ApplicationJSONPlatformEnumUnknown         AppsGet200ApplicationJSONPlatformEnum = "Unknown"
	AppsGet200ApplicationJSONPlatformEnumCustom          AppsGet200ApplicationJSONPlatformEnum = "Custom"
)

func (e AppsGet200ApplicationJSONPlatformEnum) ToPointer() *AppsGet200ApplicationJSONPlatformEnum {
	return &e
}

func (e *AppsGet200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsGet200ApplicationJSONPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGet200ApplicationJSONPlatformEnum: %v", v)
	}
}

// AppsGet200ApplicationJSON - Success
type AppsGet200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                      `json:"app_secret"`
	AzureSubscription *AppsGet200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsGet200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsGet200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsGet200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsGet200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsGet200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsGet200ApplicationJSONObject *AppsGet200ApplicationJSON
	// Error
	AppsGetDefaultApplicationJSONObject *AppsGetDefaultApplicationJSON
}
