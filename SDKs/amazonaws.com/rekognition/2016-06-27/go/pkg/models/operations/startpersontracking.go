// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartPersonTrackingXAmzTargetEnum
type StartPersonTrackingXAmzTargetEnum string

const (
	StartPersonTrackingXAmzTargetEnumRekognitionServiceStartPersonTracking StartPersonTrackingXAmzTargetEnum = "RekognitionService.StartPersonTracking"
)

func (e *StartPersonTrackingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RekognitionService.StartPersonTracking":
		*e = StartPersonTrackingXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartPersonTrackingXAmzTargetEnum: %s", s)
	}
}

type StartPersonTrackingRequest struct {
	StartPersonTrackingRequest shared.StartPersonTrackingRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 StartPersonTrackingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartPersonTrackingResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// Success
	StartPersonTrackingResponse *shared.StartPersonTrackingResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// VideoTooLargeException
	VideoTooLargeException interface{}
}
