"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryptionkey as shared_encryptionkey
from ..shared import namespacednames as shared_namespacednames
from ..shared import namespaces as shared_namespaces
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackupConfig:
    r"""BackupConfig defines the configuration of Backups created via this BackupPlan."""
    
    all_namespaces: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allNamespaces'), 'exclude': lambda f: f is None }})
    r"""If True, include all namespaced resources"""  
    encryption_key: Optional[shared_encryptionkey.EncryptionKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionKey'), 'exclude': lambda f: f is None }})
    r"""Defined a customer managed encryption key that will be used to encrypt Backup artifacts."""  
    include_secrets: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeSecrets'), 'exclude': lambda f: f is None }})
    r"""This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False"""  
    include_volume_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeVolumeData'), 'exclude': lambda f: f is None }})
    r"""This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False"""  
    selected_applications: Optional[shared_namespacednames.NamespacedNames] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedApplications'), 'exclude': lambda f: f is None }})
    r"""A list of namespaced Kubernetes resources."""  
    selected_namespaces: Optional[shared_namespaces.Namespaces] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedNamespaces'), 'exclude': lambda f: f is None }})
    r"""A list of Kubernetes Namespaces"""  
    