"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Merchants:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def list_merchants(self, request: operations.ListMerchantsRequest, security: operations.ListMerchantsSecurity) -> operations.ListMerchantsResponse:
        r"""ListMerchants
        Returns `Merchant` information for a given access token.
        
        If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
        You can specify your personal access token to get your own merchant information or specify an OAuth token
        to get the information for the  merchant that granted you access.
        
        If you know the merchant ID, you can also use the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant)
        endpoint to get the merchant information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/merchants'
        
        query_params = utils.get_query_params(operations.ListMerchantsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMerchantsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMerchantsResponse])
                res.list_merchants_response = out

        return res

    def retrieve_merchant(self, request: operations.RetrieveMerchantRequest, security: operations.RetrieveMerchantSecurity) -> operations.RetrieveMerchantResponse:
        r"""RetrieveMerchant
        Retrieve a `Merchant` object for the given `merchant_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveMerchantRequest, base_url, '/v2/merchants/{merchant_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveMerchantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveMerchantResponse])
                res.retrieve_merchant_response = out

        return res

    