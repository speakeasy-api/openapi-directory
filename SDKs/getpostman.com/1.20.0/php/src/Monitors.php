<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Monitors 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * All Monitors
     * 
     * The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.
     * 
     * The response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AllMonitorsResponse
     */
	public function allMonitors(
    ): \OpenAPI\OpenAPI\Models\Operations\AllMonitorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllMonitorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allMonitors200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AllMonitors200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Monitor
     * 
     * This endpoint allows you to create a monitor.
     * 
     * Some sample `cron` values are:
     * 
     * | Frequency                  | Cron Pattern   |
     * |-----------------------|----------------|
     * | Every 5 minutes       | `* /5 * * * *`  |
     * | Every 30 minutes     | `* /30 * * * *` |
     * | Every Hour         | `0 * /1 * * *`  |
     * | Every 6 Hours      | `0 * /6 * * *`  |
     * | Every day at 5pm    | `0 17 * * *`   |
     * | Every Monday at 12pm  | `0 12 * * MON` |
     * | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |
     * 
     * Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 
     * 
     * For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     * 
     * You can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.
     * 
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMonitorRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMonitorResponse
     */
	public function createMonitor(
        \OpenAPI\OpenAPI\Models\Operations\CreateMonitorRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMonitorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMonitorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createMonitor200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateMonitor200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createMonitor400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateMonitor400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Monitor
     * 
     * This endpoint can be used to delete an existing monitor using its `uid`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorResponse
     */
	public function deleteMonitor(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors/{monitor_uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMonitorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteMonitor200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteMonitor200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteMonitor404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteMonitor404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run a Monitor
     * 
     * This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunAMonitorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RunAMonitorResponse
     */
	public function runAMonitor(
        \OpenAPI\OpenAPI\Models\Operations\RunAMonitorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RunAMonitorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors/{monitor_uid}/run', \OpenAPI\OpenAPI\Models\Operations\RunAMonitorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunAMonitorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runAMonitor200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RunAMonitor200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Single Monitor
     * 
     * This endpoint fetches you basic information about the monitor using its `uid`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SingleMonitorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SingleMonitorResponse
     */
	public function singleMonitor(
        \OpenAPI\OpenAPI\Models\Operations\SingleMonitorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SingleMonitorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors/{monitor_uid}', \OpenAPI\OpenAPI\Models\Operations\SingleMonitorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SingleMonitorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->singleMonitor200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SingleMonitor200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->singleMonitor404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SingleMonitor404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Monitor
     * 
     * This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.
     * 
     * Some example `cron` values are:
     * 
     * | Frequency                  | Cron Pattern   |
     * |-----------------------|----------------|
     * | Every 5 minutes       | `* /5 * * * *`  |
     * | Every 30 minutes     | `* /30 * * * *` |
     * | Every Hour         | `0 * /1 * * *`  |
     * | Every 6 Hours      | `0 * /6 * * *`  |
     * | Every day at 5pm    | `0 17 * * *`   |
     * | Every Monday at 12pm  | `0 12 * * MON` |
     * | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |
     * 
     * Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 
     * 
     * For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorResponse
     */
	public function updateMonitor(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/monitors/{monitor_uid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMonitorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateMonitor200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateMonitor200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}