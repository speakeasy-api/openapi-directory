// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type NetworkUnblock422ApplicationJSONType string

const (
	NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseUnprocessableNetwork NetworkUnblock422ApplicationJSONType = "networkUnblockResponseUnprocessableNetwork"
	NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseInvalidDuration      NetworkUnblock422ApplicationJSONType = "networkUnblockResponseInvalidDuration"
)

type NetworkUnblock422ApplicationJSON struct {
	NetworkUnblockResponseUnprocessableNetwork *shared.NetworkUnblockResponseUnprocessableNetwork
	NetworkUnblockResponseInvalidDuration      *shared.NetworkUnblockResponseInvalidDuration

	Type NetworkUnblock422ApplicationJSONType
}

func CreateNetworkUnblock422ApplicationJSONNetworkUnblockResponseUnprocessableNetwork(networkUnblockResponseUnprocessableNetwork shared.NetworkUnblockResponseUnprocessableNetwork) NetworkUnblock422ApplicationJSON {
	typ := NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseUnprocessableNetwork

	return NetworkUnblock422ApplicationJSON{
		NetworkUnblockResponseUnprocessableNetwork: &networkUnblockResponseUnprocessableNetwork,
		Type: typ,
	}
}

func CreateNetworkUnblock422ApplicationJSONNetworkUnblockResponseInvalidDuration(networkUnblockResponseInvalidDuration shared.NetworkUnblockResponseInvalidDuration) NetworkUnblock422ApplicationJSON {
	typ := NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseInvalidDuration

	return NetworkUnblock422ApplicationJSON{
		NetworkUnblockResponseInvalidDuration: &networkUnblockResponseInvalidDuration,
		Type:                                  typ,
	}
}

func (u *NetworkUnblock422ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	networkUnblockResponseUnprocessableNetwork := new(shared.NetworkUnblockResponseUnprocessableNetwork)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&networkUnblockResponseUnprocessableNetwork); err == nil {
		u.NetworkUnblockResponseUnprocessableNetwork = networkUnblockResponseUnprocessableNetwork
		u.Type = NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseUnprocessableNetwork
		return nil
	}

	networkUnblockResponseInvalidDuration := new(shared.NetworkUnblockResponseInvalidDuration)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&networkUnblockResponseInvalidDuration); err == nil {
		u.NetworkUnblockResponseInvalidDuration = networkUnblockResponseInvalidDuration
		u.Type = NetworkUnblock422ApplicationJSONTypeNetworkUnblockResponseInvalidDuration
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NetworkUnblock422ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.NetworkUnblockResponseUnprocessableNetwork != nil {
		return json.Marshal(u.NetworkUnblockResponseUnprocessableNetwork)
	}

	if u.NetworkUnblockResponseInvalidDuration != nil {
		return json.Marshal(u.NetworkUnblockResponseInvalidDuration)
	}

	return nil, nil
}

type NetworkUnblockResponse struct {
	ContentType string
	// Rate Limited
	ErrorThrottled *shared.ErrorThrottled
	StatusCode     int
	RawResponse    *http.Response
	// Forbidden
	NetworkUnblockResponseForbidden *shared.NetworkUnblockResponseForbidden
	// Not Found
	NetworkUnblockResponseNotFound *shared.NetworkUnblockResponseNotFound
	// Accepted
	NetworkUnblockResponseOk *shared.NetworkUnblockResponseOk
	// Unprocessable Entity
	NetworkUnblock422ApplicationJSONOneOf *NetworkUnblock422ApplicationJSON
}
