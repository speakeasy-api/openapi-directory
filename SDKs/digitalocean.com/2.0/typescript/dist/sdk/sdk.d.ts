import { AxiosInstance } from "axios";
import { Security } from "./models/shared";
import { OneClickApplications } from "./oneclickapplications";
import { Account } from "./account";
import { Actions } from "./actions";
import { Apps } from "./apps";
import { Billing } from "./billing";
import { BlockStorage } from "./blockstorage";
import { BlockStorageActions } from "./blockstorageactions";
import { CdnEndpoints } from "./cdnendpoints";
import { Certificates } from "./certificates";
import { ContainerRegistry } from "./containerregistry";
import { Databases } from "./databases";
import { DomainRecords } from "./domainrecords";
import { Domains } from "./domains";
import { DropletActions } from "./dropletactions";
import { Droplets } from "./droplets";
import { Firewalls } from "./firewalls";
import { FloatingIpActions } from "./floatingipactions";
import { FloatingIPs } from "./floatingips";
import { ImageActions } from "./imageactions";
import { Images } from "./images";
import { Kubernetes } from "./kubernetes";
import { LoadBalancers } from "./loadbalancers";
import { Monitoring } from "./monitoring";
import { ProjectResources } from "./projectresources";
import { Projects } from "./projects";
import { Regions } from "./regions";
import { SshKeys } from "./sshkeys";
import { Sizes } from "./sizes";
import { Snapshots } from "./snapshots";
import { Tags } from "./tags";
import { VpCs } from "./vpcs";
export declare const ServerList: readonly ["https://api.digitalocean.com"];
export type SDKProps = {
    defaultClient?: AxiosInstance;
    security?: Security;
    serverUrl?: string;
};
export declare class SDK {
    oneClickApplications: OneClickApplications;
    account: Account;
    actions: Actions;
    apps: Apps;
    billing: Billing;
    blockStorage: BlockStorage;
    blockStorageActions: BlockStorageActions;
    cdnEndpoints: CdnEndpoints;
    certificates: Certificates;
    containerRegistry: ContainerRegistry;
    databases: Databases;
    domainRecords: DomainRecords;
    domains: Domains;
    dropletActions: DropletActions;
    droplets: Droplets;
    firewalls: Firewalls;
    floatingIPActions: FloatingIpActions;
    floatingIPs: FloatingIPs;
    imageActions: ImageActions;
    images: Images;
    kubernetes: Kubernetes;
    loadBalancers: LoadBalancers;
    monitoring: Monitoring;
    projectResources: ProjectResources;
    projects: Projects;
    regions: Regions;
    sshKeys: SshKeys;
    sizes: Sizes;
    snapshots: Snapshots;
    tags: Tags;
    vpCs: VpCs;
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(props: SDKProps);
}
