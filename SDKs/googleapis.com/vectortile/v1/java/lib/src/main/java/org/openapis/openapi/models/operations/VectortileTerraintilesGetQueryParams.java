/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class VectortileTerraintilesGetQueryParams {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public VectortileTerraintilesGetQueryParams withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public VectortileTerraintilesGetQueryParams withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public VectortileTerraintilesGetQueryParams withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=altitudePrecisionCentimeters")
    public Long altitudePrecisionCentimeters;
    public VectortileTerraintilesGetQueryParams withAltitudePrecisionCentimeters(Long altitudePrecisionCentimeters) {
        this.altitudePrecisionCentimeters = altitudePrecisionCentimeters;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public VectortileTerraintilesGetQueryParams withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * API client name and version. For example, the SDK calling the API. The exact format is up to the client.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.apiClient")
    public String clientInfoApiClient;
    public VectortileTerraintilesGetQueryParams withClientInfoApiClient(String clientInfoApiClient) {
        this.clientInfoApiClient = clientInfoApiClient;
        return this;
    }
    
    /**
     * Application ID, such as the package name on Android and the bundle identifier on iOS platforms.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.applicationId")
    public String clientInfoApplicationId;
    public VectortileTerraintilesGetQueryParams withClientInfoApplicationId(String clientInfoApplicationId) {
        this.clientInfoApplicationId = clientInfoApplicationId;
        return this;
    }
    
    /**
     * Application version number, such as "1.2.3". The exact format is application-dependent.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.applicationVersion")
    public String clientInfoApplicationVersion;
    public VectortileTerraintilesGetQueryParams withClientInfoApplicationVersion(String clientInfoApplicationVersion) {
        this.clientInfoApplicationVersion = clientInfoApplicationVersion;
        return this;
    }
    
    /**
     * Device model as reported by the device. The exact format is platform-dependent.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.deviceModel")
    public String clientInfoDeviceModel;
    public VectortileTerraintilesGetQueryParams withClientInfoDeviceModel(String clientInfoDeviceModel) {
        this.clientInfoDeviceModel = clientInfoDeviceModel;
        return this;
    }
    
    /**
     * Operating system name and version as reported by the OS. For example, "Mac OS X 10.10.4". The exact format is platform-dependent.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.operatingSystem")
    public String clientInfoOperatingSystem;
    public VectortileTerraintilesGetQueryParams withClientInfoOperatingSystem(String clientInfoOperatingSystem) {
        this.clientInfoOperatingSystem = clientInfoOperatingSystem;
        return this;
    }
    
    /**
     * Platform where the application is running.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.platform")
    public VectortileTerraintilesGetClientInfoPlatformEnum clientInfoPlatform;
    public VectortileTerraintilesGetQueryParams withClientInfoPlatform(VectortileTerraintilesGetClientInfoPlatformEnum clientInfoPlatform) {
        this.clientInfoPlatform = clientInfoPlatform;
        return this;
    }
    
    /**
     * Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientInfo.userId")
    public String clientInfoUserId;
    public VectortileTerraintilesGetQueryParams withClientInfoUserId(String clientInfoUserId) {
        this.clientInfoUserId = clientInfoUserId;
        return this;
    }
    
    /**
     * Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enableModeledVolumes")
    public Boolean enableModeledVolumes;
    public VectortileTerraintilesGetQueryParams withEnableModeledVolumes(Boolean enableModeledVolumes) {
        this.enableModeledVolumes = enableModeledVolumes;
        return this;
    }
    
    /**
     * Flag indicating whether political features should be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enablePoliticalFeatures")
    public Boolean enablePoliticalFeatures;
    public VectortileTerraintilesGetQueryParams withEnablePoliticalFeatures(Boolean enablePoliticalFeatures) {
        this.enablePoliticalFeatures = enablePoliticalFeatures;
        return this;
    }
    
    /**
     * Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enablePrivateRoads")
    public Boolean enablePrivateRoads;
    public VectortileTerraintilesGetQueryParams withEnablePrivateRoads(Boolean enablePrivateRoads) {
        this.enablePrivateRoads = enablePrivateRoads;
        return this;
    }
    
    /**
     * Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enableUnclippedBuildings")
    public Boolean enableUnclippedBuildings;
    public VectortileTerraintilesGetQueryParams withEnableUnclippedBuildings(Boolean enableUnclippedBuildings) {
        this.enableUnclippedBuildings = enableUnclippedBuildings;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public VectortileTerraintilesGetQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public VectortileTerraintilesGetQueryParams withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Required. The BCP-47 language code corresponding to the language in which the name was requested, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=languageCode")
    public String languageCode;
    public VectortileTerraintilesGetQueryParams withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxElevationResolutionCells")
    public Long maxElevationResolutionCells;
    public VectortileTerraintilesGetQueryParams withMaxElevationResolutionCells(Long maxElevationResolutionCells) {
        this.maxElevationResolutionCells = maxElevationResolutionCells;
        return this;
    }
    
    /**
     *  api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=minElevationResolutionCells")
    public Long minElevationResolutionCells;
    public VectortileTerraintilesGetQueryParams withMinElevationResolutionCells(Long minElevationResolutionCells) {
        this.minElevationResolutionCells = minElevationResolutionCells;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public VectortileTerraintilesGetQueryParams withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public VectortileTerraintilesGetQueryParams withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public VectortileTerraintilesGetQueryParams withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as "US" and "419". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=regionCode")
    public String regionCode;
    public VectortileTerraintilesGetQueryParams withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * Terrain formats that the client understands.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=terrainFormats")
    public VectortileTerraintilesGetTerrainFormatsEnum[] terrainFormats;
    public VectortileTerraintilesGetQueryParams withTerrainFormats(VectortileTerraintilesGetTerrainFormatsEnum[] terrainFormats) {
        this.terrainFormats = terrainFormats;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public VectortileTerraintilesGetQueryParams withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public VectortileTerraintilesGetQueryParams withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
}
