// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SegmentMetricFilterOperatorEnum - Specifies is the operation to perform to compare the metric. The default is `EQUAL`.
type SegmentMetricFilterOperatorEnum string

const (
	SegmentMetricFilterOperatorEnumUnspecifiedOperator SegmentMetricFilterOperatorEnum = "UNSPECIFIED_OPERATOR"
	SegmentMetricFilterOperatorEnumLessThan            SegmentMetricFilterOperatorEnum = "LESS_THAN"
	SegmentMetricFilterOperatorEnumGreaterThan         SegmentMetricFilterOperatorEnum = "GREATER_THAN"
	SegmentMetricFilterOperatorEnumEqual               SegmentMetricFilterOperatorEnum = "EQUAL"
	SegmentMetricFilterOperatorEnumBetween             SegmentMetricFilterOperatorEnum = "BETWEEN"
)

func (e SegmentMetricFilterOperatorEnum) ToPointer() *SegmentMetricFilterOperatorEnum {
	return &e
}

func (e *SegmentMetricFilterOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED_OPERATOR":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "EQUAL":
		fallthrough
	case "BETWEEN":
		*e = SegmentMetricFilterOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SegmentMetricFilterOperatorEnum: %v", v)
	}
}

// SegmentMetricFilterScopeEnum - Scope for a metric defines the level at which that metric is defined. The specified metric scope must be equal to or greater than its primary scope as defined in the data model. The primary scope is defined by if the segment is selecting users or sessions.
type SegmentMetricFilterScopeEnum string

const (
	SegmentMetricFilterScopeEnumUnspecifiedScope SegmentMetricFilterScopeEnum = "UNSPECIFIED_SCOPE"
	SegmentMetricFilterScopeEnumProduct          SegmentMetricFilterScopeEnum = "PRODUCT"
	SegmentMetricFilterScopeEnumHit              SegmentMetricFilterScopeEnum = "HIT"
	SegmentMetricFilterScopeEnumSession          SegmentMetricFilterScopeEnum = "SESSION"
	SegmentMetricFilterScopeEnumUser             SegmentMetricFilterScopeEnum = "USER"
)

func (e SegmentMetricFilterScopeEnum) ToPointer() *SegmentMetricFilterScopeEnum {
	return &e
}

func (e *SegmentMetricFilterScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED_SCOPE":
		fallthrough
	case "PRODUCT":
		fallthrough
	case "HIT":
		fallthrough
	case "SESSION":
		fallthrough
	case "USER":
		*e = SegmentMetricFilterScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SegmentMetricFilterScopeEnum: %v", v)
	}
}

// SegmentMetricFilter - Metric filter to be used in a segment filter clause.
type SegmentMetricFilter struct {
	// The value to compare against. If the operator is `BETWEEN`, this value is treated as minimum comparison value.
	ComparisonValue *string `json:"comparisonValue,omitempty"`
	// Max comparison value is only used for `BETWEEN` operator.
	MaxComparisonValue *string `json:"maxComparisonValue,omitempty"`
	// The metric that will be filtered on. A `metricFilter` must contain a metric name.
	MetricName *string `json:"metricName,omitempty"`
	// Specifies is the operation to perform to compare the metric. The default is `EQUAL`.
	Operator *SegmentMetricFilterOperatorEnum `json:"operator,omitempty"`
	// Scope for a metric defines the level at which that metric is defined. The specified metric scope must be equal to or greater than its primary scope as defined in the data model. The primary scope is defined by if the segment is selecting users or sessions.
	Scope *SegmentMetricFilterScopeEnum `json:"scope,omitempty"`
}
