"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pages:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_pages_id_json(self, request: operations.DeletePagesIDJSONRequest) -> operations.DeletePagesIDJSONResponse:
        r"""Delete an existing Page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePagesIDJSONRequest, base_url, '/pages/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeletePagesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_pages_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_pages_json(self, request: operations.GetPagesJSONRequest) -> operations.GetPagesJSONResponse:
        r"""Retrieve all Pages."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pages.json'
        
        query_params = utils.get_query_params(operations.GetPagesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPagesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Page]])
                res.pages = out

        return res

    def get_pages_count_json(self, request: operations.GetPagesCountJSONRequest) -> operations.GetPagesCountJSONResponse:
        r"""Count all Pages."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pages/count.json'
        
        query_params = utils.get_query_params(operations.GetPagesCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPagesCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_pages_id_json(self, request: operations.GetPagesIDJSONRequest) -> operations.GetPagesIDJSONResponse:
        r"""Retrieve a single Page by id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPagesIDJSONRequest, base_url, '/pages/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetPagesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_pages_json(self, request: operations.PostPagesJSONRequest) -> operations.PostPagesJSONResponse:
        r"""Create a new Page."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pages.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page_modify", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostPagesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPagesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def put_pages_id_json(self, request: operations.PutPagesIDJSONRequest) -> operations.PutPagesIDJSONResponse:
        r"""Update a Page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPagesIDJSONRequest, base_url, '/pages/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page_modify", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutPagesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    