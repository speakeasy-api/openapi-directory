"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import committeehistory as shared_committeehistory
from ..shared import efilings as shared_efilings
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleBEfile:
    
    file_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_number') }})  
    related_line_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related_line_number') }})  
    amendment_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator'), 'exclude': lambda f: f is None }})  
    back_reference_schedule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_reference_schedule_name'), 'exclude': lambda f: f is None }})  
    back_reference_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_reference_transaction_id'), 'exclude': lambda f: f is None }})  
    beginning_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginning_image_number'), 'exclude': lambda f: f is None }})  
    beneficiary_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficiary_committee_name'), 'exclude': lambda f: f is None }})  
    candidate_office: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office'), 'exclude': lambda f: f is None }})  
    candidate_office_district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office_district'), 'exclude': lambda f: f is None }})  
    committee: Optional[shared_committeehistory.CommitteeHistory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee'), 'exclude': lambda f: f is None }})  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    csv_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csv_url'), 'exclude': lambda f: f is None }})  
    disbursement_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disbursement_amount'), 'exclude': lambda f: f is None }})  
    disbursement_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disbursement_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    disbursement_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disbursement_description'), 'exclude': lambda f: f is None }})  
    disbursement_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disbursement_type'), 'exclude': lambda f: f is None }})  
    entity_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type'), 'exclude': lambda f: f is None }})  
    fec_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_url'), 'exclude': lambda f: f is None }})  
    filing: Optional[shared_efilings.EFilings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing'), 'exclude': lambda f: f is None }})  
    image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_number'), 'exclude': lambda f: f is None }})
    r"""An unique identifier for each page where the electronic or paper filing is reported."""  
    is_notice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_notice'), 'exclude': lambda f: f is None }})  
    line_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_number'), 'exclude': lambda f: f is None }})  
    load_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    memo_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo_code'), 'exclude': lambda f: f is None }})  
    memo_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo_text'), 'exclude': lambda f: f is None }})  
    payee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee_name'), 'exclude': lambda f: f is None }})  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf_url'), 'exclude': lambda f: f is None }})  
    recipient_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_city'), 'exclude': lambda f: f is None }})  
    recipient_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_name'), 'exclude': lambda f: f is None }})  
    recipient_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_prefix'), 'exclude': lambda f: f is None }})  
    recipient_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_state'), 'exclude': lambda f: f is None }})  
    recipient_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_suffix'), 'exclude': lambda f: f is None }})  
    recipient_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_zip'), 'exclude': lambda f: f is None }})  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})  
    semi_annual_bundled_refund: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('semi_annual_bundled_refund'), 'exclude': lambda f: f is None }})  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id'), 'exclude': lambda f: f is None }})  
    