"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Snowmonkey:
    r"""Everything about Otoroshi Snow Monkey"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_snow_monkey_config(self) -> operations.GetSnowMonkeyConfigResponse:
        r"""Get current Snow Monkey config
        Get current Snow Monkey config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/config'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSnowMonkeyConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnowMonkeyConfig])
                res.snow_monkey_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def get_snow_monkey_outages(self) -> operations.GetSnowMonkeyOutagesResponse:
        r"""Get all current Snow Monkey ourages
        Get all current Snow Monkey ourages
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/outages'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSnowMonkeyOutagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Outage]])
                res.outages = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_snow_monkey(self, request: shared.Group, security: operations.PatchSnowMonkeySecurity) -> operations.PatchSnowMonkeyResponse:
        r"""Update current Snow Monkey config
        Update current Snow Monkey config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/config'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSnowMonkeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnowMonkeyConfig])
                res.snow_monkey_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def reset_snow_monkey(self) -> operations.ResetSnowMonkeyResponse:
        r"""Reset Snow Monkey Outages for the day
        Reset Snow Monkey Outages for the day
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/outages'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetSnowMonkeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Done])
                res.done = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def start_snow_monkey(self) -> operations.StartSnowMonkeyResponse:
        r"""Start the Snow Monkey
        Start the Snow Monkey
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/_start'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartSnowMonkeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Done])
                res.done = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def stop_snow_monkey(self) -> operations.StopSnowMonkeyResponse:
        r"""Stop the Snow Monkey
        Stop the Snow Monkey
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/_stop'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StopSnowMonkeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Done])
                res.done = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_snow_monkey(self, request: shared.Group, security: operations.UpdateSnowMonkeySecurity) -> operations.UpdateSnowMonkeyResponse:
        r"""Update current Snow Monkey config
        Update current Snow Monkey config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/snowmonkey/config'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSnowMonkeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnowMonkeyConfig])
                res.snow_monkey_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    