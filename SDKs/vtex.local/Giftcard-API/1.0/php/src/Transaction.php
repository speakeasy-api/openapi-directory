<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Transaction 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel GiftCard Transaction
     * 
     * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionResponse
     */
	public function cancelGiftCardTransaction(
        \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cancelGiftCardTransactionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelGiftCardTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response6', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create GiftCard Transaction
     * 
     * Register a new giftcard transaction and authorize the item reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionResponse
     */
	public function createGiftCardTransaction(
        \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions', \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createGiftCardTransactionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateGiftCardTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response3', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GiftCard Transaction by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDResponse
     */
	public function getGiftCardTransactionbyID(
        \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}', \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionbyIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response5', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GiftCard Transactions
     * 
     * Returns all transaction of a giftcard.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsResponse
     */
	public function getGiftCardTransactions(
        \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions', \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGiftCardTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response3s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Response3>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Transaction Authorizations
     * 
     * Returns the giftcard transaction authorizations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsResponse
     */
	public function getTransactionAuthorizations(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}/authorization', \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionAuthorizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response6', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Transaction Cancellations
     * 
     * Returns the giftcard transaction cancellations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsResponse
     */
	public function getTransactionCancellations(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionCancellationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response7s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Response7>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Transaction Settlements
     * 
     * Returns the giftcard transaction settlements.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsResponse
     */
	public function getTransactionSettlements(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionSettlementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response6s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Response6>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Settle GiftCard Transaction
     * 
     * Creates a giftcard transaction settlement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionResponse
     */
	public function settleGiftCardTransaction(
        \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "settleGiftCardTransactionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SettleGiftCardTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response6', 'json');
            }
        }

        return $response;
    }
}