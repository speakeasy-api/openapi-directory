/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudDocumentaiV1beta3DocumentPageBlock } from "./googleclouddocumentaiv1beta3documentpageblock";
import { GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode } from "./googleclouddocumentaiv1beta3documentpagedetectedbarcode";
import { GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage } from "./googleclouddocumentaiv1beta3documentpagedetectedlanguage";
import { GoogleCloudDocumentaiV1beta3DocumentPageDimension } from "./googleclouddocumentaiv1beta3documentpagedimension";
import { GoogleCloudDocumentaiV1beta3DocumentPageFormField } from "./googleclouddocumentaiv1beta3documentpageformfield";
import { GoogleCloudDocumentaiV1beta3DocumentPageImage } from "./googleclouddocumentaiv1beta3documentpageimage";
import { GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores } from "./googleclouddocumentaiv1beta3documentpageimagequalityscores";
import { GoogleCloudDocumentaiV1beta3DocumentPageLayout } from "./googleclouddocumentaiv1beta3documentpagelayout";
import { GoogleCloudDocumentaiV1beta3DocumentPageLine } from "./googleclouddocumentaiv1beta3documentpageline";
import { GoogleCloudDocumentaiV1beta3DocumentPageMatrix } from "./googleclouddocumentaiv1beta3documentpagematrix";
import { GoogleCloudDocumentaiV1beta3DocumentPageParagraph } from "./googleclouddocumentaiv1beta3documentpageparagraph";
import { GoogleCloudDocumentaiV1beta3DocumentPageSymbol } from "./googleclouddocumentaiv1beta3documentpagesymbol";
import { GoogleCloudDocumentaiV1beta3DocumentPageTable } from "./googleclouddocumentaiv1beta3documentpagetable";
import { GoogleCloudDocumentaiV1beta3DocumentPageToken } from "./googleclouddocumentaiv1beta3documentpagetoken";
import { GoogleCloudDocumentaiV1beta3DocumentPageVisualElement } from "./googleclouddocumentaiv1beta3documentpagevisualelement";
import { GoogleCloudDocumentaiV1beta3DocumentProvenance } from "./googleclouddocumentaiv1beta3documentprovenance";
import { Expose, Type } from "class-transformer";

/**
 * A page in a Document.
 */
export class GoogleCloudDocumentaiV1beta3DocumentPage extends SpeakeasyBase {
  /**
   * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageBlock,
  })
  @Expose({ name: "blocks" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageBlock)
  blocks?: GoogleCloudDocumentaiV1beta3DocumentPageBlock[];

  /**
   * A list of detected barcodes.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode,
  })
  @Expose({ name: "detectedBarcodes" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode)
  detectedBarcodes?: GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode[];

  /**
   * A list of detected languages together with confidence.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage,
  })
  @Expose({ name: "detectedLanguages" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage)
  detectedLanguages?: GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage[];

  /**
   * Dimension for the page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimension" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageDimension)
  dimension?: GoogleCloudDocumentaiV1beta3DocumentPageDimension;

  /**
   * A list of visually detected form fields on the page.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageFormField,
  })
  @Expose({ name: "formFields" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageFormField)
  formFields?: GoogleCloudDocumentaiV1beta3DocumentPageFormField[];

  /**
   * Rendered image contents for this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageImage)
  image?: GoogleCloudDocumentaiV1beta3DocumentPageImage;

  /**
   * Image Quality Scores for the page image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageQualityScores" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores)
  imageQualityScores?: GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores;

  /**
   * Visual element describing a layout unit on a page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "layout" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageLayout)
  layout?: GoogleCloudDocumentaiV1beta3DocumentPageLayout;

  /**
   * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudDocumentaiV1beta3DocumentPageLine })
  @Expose({ name: "lines" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageLine)
  lines?: GoogleCloudDocumentaiV1beta3DocumentPageLine[];

  /**
   * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageNumber" })
  pageNumber?: number;

  /**
   * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageParagraph,
  })
  @Expose({ name: "paragraphs" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageParagraph)
  paragraphs?: GoogleCloudDocumentaiV1beta3DocumentPageParagraph[];

  /**
   * Structure to identify provenance relationships between annotations in different revisions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provenance" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentProvenance)
  provenance?: GoogleCloudDocumentaiV1beta3DocumentProvenance;

  /**
   * A list of visually detected symbols on the page.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageSymbol,
  })
  @Expose({ name: "symbols" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageSymbol)
  symbols?: GoogleCloudDocumentaiV1beta3DocumentPageSymbol[];

  /**
   * A list of visually detected tables on the page.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageTable,
  })
  @Expose({ name: "tables" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageTable)
  tables?: GoogleCloudDocumentaiV1beta3DocumentPageTable[];

  /**
   * A list of visually detected tokens on the page.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageToken,
  })
  @Expose({ name: "tokens" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageToken)
  tokens?: GoogleCloudDocumentaiV1beta3DocumentPageToken[];

  /**
   * Transformation matrices that were applied to the original document image to produce Page.image.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageMatrix,
  })
  @Expose({ name: "transforms" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageMatrix)
  transforms?: GoogleCloudDocumentaiV1beta3DocumentPageMatrix[];

  /**
   * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudDocumentaiV1beta3DocumentPageVisualElement,
  })
  @Expose({ name: "visualElements" })
  @Type(() => GoogleCloudDocumentaiV1beta3DocumentPageVisualElement)
  visualElements?: GoogleCloudDocumentaiV1beta3DocumentPageVisualElement[];
}
