"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ErrorModelErrorModelErrorCategoryEnum(str, Enum):
    r"""The error models' error category"""
    GENERAL = 'General'
    NOT_FOUND = 'NotFound'
    NOT_AUTHORISED = 'NotAuthorised'
    VALIDATION_FAILURE = 'ValidationFailure'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorModelErrorModelErrors:
    r"""The error models' errors"""
    
    error: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Error'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorModelErrorModel:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The error models' description"""  
    error_category: Optional[ErrorModelErrorModelErrorCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorCategory'), 'exclude': lambda f: f is None }})
    r"""The error models' error category"""  
    errors: Optional[ErrorModelErrorModelErrors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Errors'), 'exclude': lambda f: f is None }})
    r"""The error models' errors"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorModel:
    r"""Bad Request"""
    
    error_model: Optional[ErrorModelErrorModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorModel'), 'exclude': lambda f: f is None }})  
    