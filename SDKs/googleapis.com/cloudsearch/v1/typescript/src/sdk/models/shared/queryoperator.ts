/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The type of the operator.
 */
export enum QueryOperatorTypeEnum {
  Unknown = "UNKNOWN",
  Integer = "INTEGER",
  Double = "DOUBLE",
  Timestamp = "TIMESTAMP",
  Boolean = "BOOLEAN",
  Enum = "ENUM",
  Date = "DATE",
  Text = "TEXT",
  Html = "HTML",
}

/**
 * The definition of a operator that can be used in a Search/Suggest request.
 */
export class QueryOperator extends SpeakeasyBase {
  /**
   * Display name of the operator
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enumValues" })
  enumValues?: string[];

  /**
   * Indicates the operator name that can be used to isolate the property using the greater-than operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "greaterThanOperatorName" })
  greaterThanOperatorName?: string;

  /**
   * Can this operator be used to get facets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFacetable" })
  isFacetable?: boolean;

  /**
   * Indicates if multiple values can be set for this property.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRepeatable" })
  isRepeatable?: boolean;

  /**
   * Will the property associated with this facet be returned as part of search results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isReturnable" })
  isReturnable?: boolean;

  /**
   * Can this operator be used to sort results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSortable" })
  isSortable?: boolean;

  /**
   * Can get suggestions for this field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSuggestable" })
  isSuggestable?: boolean;

  /**
   * Indicates the operator name that can be used to isolate the property using the less-than operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lessThanOperatorName" })
  lessThanOperatorName?: string;

  /**
   * The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectType" })
  objectType?: string;

  /**
   * The name of the operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operatorName" })
  operatorName?: string;

  /**
   * The type of the operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: QueryOperatorTypeEnum;
}
