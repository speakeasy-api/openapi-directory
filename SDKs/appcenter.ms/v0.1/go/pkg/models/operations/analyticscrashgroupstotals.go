// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsCrashGroupsTotalsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsCrashGroupsTotalsRequestBodyCrashGroups struct {
	AppVersion   *string `json:"app_version,omitempty"`
	CrashGroupID *string `json:"crash_group_id,omitempty"`
}

type AnalyticsCrashGroupsTotalsRequestBody struct {
	CrashGroups []AnalyticsCrashGroupsTotalsRequestBodyCrashGroups `json:"crash_groups"`
}

type AnalyticsCrashGroupsTotalsRequest struct {
	RequestBody AnalyticsCrashGroupsTotalsRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum = "400"
	AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum = "403"
	AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum = "500"
)

func (e *AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "403":
		fallthrough
	case "500":
		*e = AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsCrashGroupsTotalsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashGroupsTotalsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashGroupsTotalsDefaultApplicationJSON - Error
type AnalyticsCrashGroupsTotalsDefaultApplicationJSON struct {
	Error *AnalyticsCrashGroupsTotalsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashGroupsTotals200ApplicationJSONOverall struct {
	CrashCount  *int64 `json:"crash_count,omitempty"`
	DeviceCount *int64 `json:"device_count,omitempty"`
}

type AnalyticsCrashGroupsTotals200ApplicationJSON struct {
	AppVersion   *string                                              `json:"app_version,omitempty"`
	CrashGroupID *string                                              `json:"crash_group_id,omitempty"`
	Overall      *AnalyticsCrashGroupsTotals200ApplicationJSONOverall `json:"overall,omitempty"`
}

type AnalyticsCrashGroupsTotalsResponse struct {
	// Overall crashes and affected users count for all selected crash groups.
	AnalyticsCrashGroupsTotals200ApplicationJSONObjects []AnalyticsCrashGroupsTotals200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashGroupsTotalsDefaultApplicationJSONObject *AnalyticsCrashGroupsTotalsDefaultApplicationJSON
	ContentType                                            string
	StatusCode                                             int
	RawResponse                                            *http.Response
}
