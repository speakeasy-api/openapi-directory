"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Account = void 0;
var utils_1 = require("../../../internal/utils");
var emoji_1 = require("./emoji");
var field_1 = require("./field");
var source_1 = require("./source");
var class_transformer_1 = require("class-transformer");
/**
 * Represents a user of Mastodon and their associated profile.
 *
 * @see {@link https://docs.joinmastodon.org/entities/account/}
 */
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acct" }),
        __metadata("design:type", String)
    ], Account.prototype, "acct", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "avatar" }),
        __metadata("design:type", String)
    ], Account.prototype, "avatar", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "avatar_static" }),
        __metadata("design:type", String)
    ], Account.prototype, "avatarStatic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bot" }),
        __metadata("design:type", Boolean)
    ], Account.prototype, "bot", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Account.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "discoverable" }),
        __metadata("design:type", Boolean)
    ], Account.prototype, "discoverable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "display_name" }),
        __metadata("design:type", String)
    ], Account.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: emoji_1.Emoji }),
        (0, class_transformer_1.Expose)({ name: "emojis" }),
        (0, class_transformer_1.Type)(function () { return emoji_1.Emoji; }),
        __metadata("design:type", Array)
    ], Account.prototype, "emojis", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: field_1.Field }),
        (0, class_transformer_1.Expose)({ name: "fields" }),
        (0, class_transformer_1.Type)(function () { return field_1.Field; }),
        __metadata("design:type", Array)
    ], Account.prototype, "fields", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "followers_count" }),
        __metadata("design:type", Number)
    ], Account.prototype, "followersCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "following_count" }),
        __metadata("design:type", Number)
    ], Account.prototype, "followingCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "header" }),
        __metadata("design:type", String)
    ], Account.prototype, "header", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "header_static" }),
        __metadata("design:type", String)
    ], Account.prototype, "headerStatic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Account.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "last_status_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Account.prototype, "lastStatusAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "locked" }),
        __metadata("design:type", Boolean)
    ], Account.prototype, "locked", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "moved" }),
        (0, class_transformer_1.Type)(function () { return Account; }),
        __metadata("design:type", Account)
    ], Account.prototype, "moved", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mute_expires_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Account.prototype, "muteExpiresAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "note" }),
        __metadata("design:type", String)
    ], Account.prototype, "note", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        (0, class_transformer_1.Type)(function () { return source_1.Source; }),
        __metadata("design:type", source_1.Source)
    ], Account.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statuses_count" }),
        __metadata("design:type", Number)
    ], Account.prototype, "statusesCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "suspended" }),
        __metadata("design:type", Boolean)
    ], Account.prototype, "suspended", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Account.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "username" }),
        __metadata("design:type", String)
    ], Account.prototype, "username", void 0);
    return Account;
}(utils_1.SpeakeasyBase));
exports.Account = Account;
