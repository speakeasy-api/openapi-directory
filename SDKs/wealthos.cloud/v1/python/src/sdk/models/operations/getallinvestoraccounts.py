"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetAllinvestorAccountsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetAllinvestorAccountsRequest:
    
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_id', 'style': 'form', 'explode': True }})
    r"""multiple account ids as comma seperated string"""  
    financial_product_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'financial_product_id', 'style': 'form', 'explode': True }})
    r"""multiple financial product ids as comma seperated string"""  
    investor_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'investor_id', 'style': 'form', 'explode': True }})
    r"""multiple investor ids as comma seperated string"""  
    page_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""multiple statuses as comma seperated string"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetAllinvestorAccounts409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: GetAllinvestorAccounts409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetAllinvestorAccounts200ApplicationJSONInvestorAccountsAccountTypeEnum(str, Enum):
    X = 'X'
    Z = 'Z'
    B = 'B'
    G = 'G'

class GetAllinvestorAccounts200ApplicationJSONInvestorAccountsStatusEnum(str, Enum):
    r"""account status"""
    ACTIVE = 'active'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts200ApplicationJSONInvestorAccounts:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""investor account id"""  
    financial_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financial_product_id') }})  
    investor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investor_id') }})  
    status: GetAllinvestorAccounts200ApplicationJSONInvestorAccountsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""account status"""  
    account_type: Optional[GetAllinvestorAccounts200ApplicationJSONInvestorAccountsAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_type'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    current_year_subscription: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_year_subscription'), 'exclude': lambda f: f is None }})
    r"""does the Account have contributions for the current tax year"""  
    current_year_total_contribution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_year_total_contribution'), 'exclude': lambda f: f is None }})
    r"""total contribution by investor for account for the current tax year"""  
    current_year_total_withdrawals: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_year_total_withdrawals'), 'exclude': lambda f: f is None }})
    r"""total withdrawal by investor for account for the current tax year"""  
    date_of_account_activation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_account_activation'), 'exclude': lambda f: f is None }})
    r"""the first date the account was opened by the investor"""  
    first_subscription_date_for_current_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_subscription_date_for_current_year'), 'exclude': lambda f: f is None }})
    r"""date of the first subscription received for the current tax year"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllinvestorAccounts200ApplicationJSON:
    r"""Array of investor accounts"""
    
    investor_accounts: Optional[list[GetAllinvestorAccounts200ApplicationJSONInvestorAccounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investor_accounts'), 'exclude': lambda f: f is None }})  
    next_page_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_available'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAllinvestorAccountsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_allinvestor_accounts_200_application_json_object: Optional[GetAllinvestorAccounts200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_allinvestor_accounts_400_application_json_object: Optional[GetAllinvestorAccounts400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_allinvestor_accounts_401_application_json_object: Optional[GetAllinvestorAccounts401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_allinvestor_accounts_403_application_json_object: Optional[GetAllinvestorAccounts403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_allinvestor_accounts_404_application_json_object: Optional[GetAllinvestorAccounts404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_allinvestor_accounts_409_application_json_object: Optional[GetAllinvestorAccounts409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    get_allinvestor_accounts_429_application_json_object: Optional[GetAllinvestorAccounts429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_allinvestor_accounts_500_application_json_object: Optional[GetAllinvestorAccounts500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    