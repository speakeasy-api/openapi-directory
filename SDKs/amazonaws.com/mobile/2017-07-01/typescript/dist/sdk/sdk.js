"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * The AWS Mobile multi-region endpoint
     */
    "http://mobile.{region}.amazonaws.com",
    /**
     * The AWS Mobile multi-region endpoint
     */
    "https://mobile.{region}.amazonaws.com",
    /**
     * The AWS Mobile endpoint for China (Beijing) and China (Ningxia)
     */
    "http://mobile.{region}.amazonaws.com.cn",
    /**
     * The AWS Mobile endpoint for China (Beijing) and China (Ningxia)
     */
    "https://mobile.{region}.amazonaws.com.cn",
];
/**
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources.
 *
 * @see {@link https://docs.aws.amazon.com/mobile/} - Amazon Web Services documentation
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     *  Creates an AWS Mobile Hub project.
     */
    SDK.prototype.createProject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateProjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/projects";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateProjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createProjectResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CreateProjectResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Delets a project in AWS Mobile Hub.
     */
    SDK.prototype.deleteProject = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteProjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/projects/{projectId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteProjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteProjectResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DeleteProjectResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Get the bundle details for the requested bundle id.
     */
    SDK.prototype.describeBundle = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DescribeBundleRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/bundles/{bundleId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DescribeBundleResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.describeBundleResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DescribeBundleResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Gets details about a project in AWS Mobile Hub.
     */
    SDK.prototype.describeProject = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DescribeProjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/project#projectId";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DescribeProjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.describeProjectResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DescribeProjectResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Generates customized software development kit (SDK) and or tool packages used to integrate mobile web or mobile app clients with backend AWS resources.
     */
    SDK.prototype.exportBundle = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExportBundleRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/bundles/{bundleId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ExportBundleResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.exportBundleResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ExportBundleResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Exports project configuration to a snapshot which can be downloaded and shared. Note that mobile app push credentials are encrypted in exported projects, so they can only be shared successfully within the same AWS account.
     */
    SDK.prototype.exportProject = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExportProjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/exports/{projectId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ExportProjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.exportProjectResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ExportProjectResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  List all available bundles.
     */
    SDK.prototype.listBundles = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListBundlesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/bundles";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListBundlesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listBundlesResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListBundlesResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Lists projects in AWS Mobile Hub.
     */
    SDK.prototype.listProjects = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListProjectsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/projects";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListProjectsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listProjectsResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListProjectsResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     *  Update an existing project.
     */
    SDK.prototype.updateProject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateProjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/update#projectId";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateProjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateProjectResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UpdateProjectResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalFailureException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalFailureException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceUnavailableException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceUnavailableException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthorizedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnauthorizedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tooManyRequestsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TooManyRequestsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.badRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BadRequestException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accountActionRequiredException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccountActionRequiredException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
