/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a custom class.
   */
  speechProjectsLocationsCustomClassesCreate(
    req: operations.SpeechProjectsLocationsCustomClassesCreateRequest,
    security: operations.SpeechProjectsLocationsCustomClassesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsCustomClassesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsCustomClassesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/customClasses",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createCustomClassRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SpeechProjectsLocationsCustomClassesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsCustomClassesCreateResponse =
        new operations.SpeechProjectsLocationsCustomClassesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customClass = utils.objectToClass(
              httpRes?.data,
              shared.CustomClass
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List custom classes.
   */
  speechProjectsLocationsCustomClassesList(
    req: operations.SpeechProjectsLocationsCustomClassesListRequest,
    security: operations.SpeechProjectsLocationsCustomClassesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsCustomClassesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsCustomClassesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/customClasses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SpeechProjectsLocationsCustomClassesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsCustomClassesListResponse =
        new operations.SpeechProjectsLocationsCustomClassesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCustomClassesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCustomClassesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
   */
  speechProjectsLocationsPhraseSetsCreate(
    req: operations.SpeechProjectsLocationsPhraseSetsCreateRequest,
    security: operations.SpeechProjectsLocationsPhraseSetsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsPhraseSetsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsPhraseSetsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/phraseSets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createPhraseSetRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpeechProjectsLocationsPhraseSetsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsPhraseSetsCreateResponse =
        new operations.SpeechProjectsLocationsPhraseSetsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.phraseSet = utils.objectToClass(
              httpRes?.data,
              shared.PhraseSet
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a phrase set.
   */
  speechProjectsLocationsPhraseSetsDelete(
    req: operations.SpeechProjectsLocationsPhraseSetsDeleteRequest,
    security: operations.SpeechProjectsLocationsPhraseSetsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsPhraseSetsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsPhraseSetsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpeechProjectsLocationsPhraseSetsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsPhraseSetsDeleteResponse =
        new operations.SpeechProjectsLocationsPhraseSetsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a phrase set.
   */
  speechProjectsLocationsPhraseSetsGet(
    req: operations.SpeechProjectsLocationsPhraseSetsGetRequest,
    security: operations.SpeechProjectsLocationsPhraseSetsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsPhraseSetsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsPhraseSetsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpeechProjectsLocationsPhraseSetsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsPhraseSetsGetResponse =
        new operations.SpeechProjectsLocationsPhraseSetsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.phraseSet = utils.objectToClass(
              httpRes?.data,
              shared.PhraseSet
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List phrase sets.
   */
  speechProjectsLocationsPhraseSetsList(
    req: operations.SpeechProjectsLocationsPhraseSetsListRequest,
    security: operations.SpeechProjectsLocationsPhraseSetsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsPhraseSetsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsPhraseSetsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/phraseSets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpeechProjectsLocationsPhraseSetsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsPhraseSetsListResponse =
        new operations.SpeechProjectsLocationsPhraseSetsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPhraseSetResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPhraseSetResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a phrase set.
   */
  speechProjectsLocationsPhraseSetsPatch(
    req: operations.SpeechProjectsLocationsPhraseSetsPatchRequest,
    security: operations.SpeechProjectsLocationsPhraseSetsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpeechProjectsLocationsPhraseSetsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpeechProjectsLocationsPhraseSetsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "phraseSet",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpeechProjectsLocationsPhraseSetsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpeechProjectsLocationsPhraseSetsPatchResponse =
        new operations.SpeechProjectsLocationsPhraseSetsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.phraseSet = utils.objectToClass(
              httpRes?.data,
              shared.PhraseSet
            );
          }
          break;
      }

      return res;
    });
  }
}
