// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteUserProfileXAmzTargetEnum
type DeleteUserProfileXAmzTargetEnum string

const (
	DeleteUserProfileXAmzTargetEnumOpsWorks20130218DeleteUserProfile DeleteUserProfileXAmzTargetEnum = "OpsWorks_20130218.DeleteUserProfile"
)

func (e *DeleteUserProfileXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OpsWorks_20130218.DeleteUserProfile":
		*e = DeleteUserProfileXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteUserProfileXAmzTargetEnum: %s", s)
	}
}

type DeleteUserProfileHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteUserProfileXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteUserProfileRequest struct {
	Headers DeleteUserProfileHeaders
	Request shared.DeleteUserProfileRequest `request:"mediaType=application/json"`
}

type DeleteUserProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ValidationException
	ValidationException interface{}
}
