// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyClientVpnEndpointActionEnum
type GETModifyClientVpnEndpointActionEnum string

const (
	GETModifyClientVpnEndpointActionEnumModifyClientVpnEndpoint GETModifyClientVpnEndpointActionEnum = "ModifyClientVpnEndpoint"
)

func (e *GETModifyClientVpnEndpointActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyClientVpnEndpoint":
		*e = GETModifyClientVpnEndpointActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyClientVpnEndpointActionEnum: %s", s)
	}
}

// GETModifyClientVpnEndpointClientConnectOptions - The options for managing connection authorization for new client connections.
type GETModifyClientVpnEndpointClientConnectOptions struct {
	Enabled           *bool   `queryParam:"name=Enabled"`
	LambdaFunctionArn *string `queryParam:"name=LambdaFunctionArn"`
}

// GETModifyClientVpnEndpointClientLoginBannerOptions - Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
type GETModifyClientVpnEndpointClientLoginBannerOptions struct {
	BannerText *string `queryParam:"name=BannerText"`
	Enabled    *bool   `queryParam:"name=Enabled"`
}

// GETModifyClientVpnEndpointConnectionLogOptions - Describes the client connection logging options for the Client VPN endpoint.
type GETModifyClientVpnEndpointConnectionLogOptions struct {
	CloudwatchLogGroup  *string `queryParam:"name=CloudwatchLogGroup"`
	CloudwatchLogStream *string `queryParam:"name=CloudwatchLogStream"`
	Enabled             *bool   `queryParam:"name=Enabled"`
}

// GETModifyClientVpnEndpointDNSServers - Information about the DNS server to be used.
type GETModifyClientVpnEndpointDNSServers struct {
	CustomDNSServers []string `queryParam:"name=CustomDnsServers"`
	Enabled          *bool    `queryParam:"name=Enabled"`
}

// GETModifyClientVpnEndpointSelfServicePortalEnum - Specify whether to enable the self-service portal for the Client VPN endpoint.
type GETModifyClientVpnEndpointSelfServicePortalEnum string

const (
	GETModifyClientVpnEndpointSelfServicePortalEnumEnabled  GETModifyClientVpnEndpointSelfServicePortalEnum = "enabled"
	GETModifyClientVpnEndpointSelfServicePortalEnumDisabled GETModifyClientVpnEndpointSelfServicePortalEnum = "disabled"
)

func (e *GETModifyClientVpnEndpointSelfServicePortalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		*e = GETModifyClientVpnEndpointSelfServicePortalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyClientVpnEndpointSelfServicePortalEnum: %s", s)
	}
}

// GETModifyClientVpnEndpointVersionEnum
type GETModifyClientVpnEndpointVersionEnum string

const (
	GETModifyClientVpnEndpointVersionEnumTwoThousandAndSixteen1115 GETModifyClientVpnEndpointVersionEnum = "2016-11-15"
)

func (e *GETModifyClientVpnEndpointVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyClientVpnEndpointVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyClientVpnEndpointVersionEnum: %s", s)
	}
}

type GETModifyClientVpnEndpointQueryParams struct {
	Action GETModifyClientVpnEndpointActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions *GETModifyClientVpnEndpointClientConnectOptions `queryParam:"style=form,explode=true,name=ClientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
	ClientLoginBannerOptions *GETModifyClientVpnEndpointClientLoginBannerOptions `queryParam:"style=form,explode=true,name=ClientLoginBannerOptions"`
	// The ID of the Client VPN endpoint to modify.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// <p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul>
	ConnectionLogOptions *GETModifyClientVpnEndpointConnectionLogOptions `queryParam:"style=form,explode=true,name=ConnectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.
	DNSServers *GETModifyClientVpnEndpointDNSServers `queryParam:"style=form,explode=true,name=DnsServers"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IDs of one or more security groups to apply to the target network.
	SecurityGroupID []string `queryParam:"style=form,explode=true,name=SecurityGroupId"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint.
	SelfServicePortal *GETModifyClientVpnEndpointSelfServicePortalEnum `queryParam:"style=form,explode=true,name=SelfServicePortal"`
	// The ARN of the server certificate to be used. The server certificate must be provisioned in Certificate Manager (ACM).
	ServerCertificateArn *string `queryParam:"style=form,explode=true,name=ServerCertificateArn"`
	// <p>The maximum VPN session duration time in hours.</p> <p>Valid values: <code>8 | 10 | 12 | 24</code> </p> <p>Default value: <code>24</code> </p>
	SessionTimeoutHours *int64 `queryParam:"style=form,explode=true,name=SessionTimeoutHours"`
	// <p>Indicates whether the VPN is split-tunnel.</p> <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.</p>
	SplitTunnel *bool                                 `queryParam:"style=form,explode=true,name=SplitTunnel"`
	Version     GETModifyClientVpnEndpointVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC to associate with the Client VPN endpoint.
	VpcID *string `queryParam:"style=form,explode=true,name=VpcId"`
	// <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p> <p>Valid Values: <code>443</code> | <code>1194</code> </p> <p>Default Value: <code>443</code> </p>
	VpnPort *int64 `queryParam:"style=form,explode=true,name=VpnPort"`
}

type GETModifyClientVpnEndpointHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyClientVpnEndpointRequest struct {
	QueryParams GETModifyClientVpnEndpointQueryParams
	Headers     GETModifyClientVpnEndpointHeaders
}

type GETModifyClientVpnEndpointResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
