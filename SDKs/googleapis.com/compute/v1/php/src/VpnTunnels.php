<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VpnTunnels 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of VPN tunnels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListResponse
     */
	public function computeVpnTunnelsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/vpnTunnels', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnTunnelAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnTunnelAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified VpnTunnel resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteResponse
     */
	public function computeVpnTunnelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified VpnTunnel resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetResponse
     */
	public function computeVpnTunnelsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnTunnel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnTunnel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a VpnTunnel resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertResponse
     */
	public function computeVpnTunnelsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnTunnels', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vpnTunnel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of VpnTunnel resources contained in the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListResponse
     */
	public function computeVpnTunnelsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnTunnels', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnTunnelList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnTunnelList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsResponse
     */
	public function computeVpnTunnelsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnTunnelsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}