// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallRecordingStateEnum - Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
type CallRecordingStateEnum string

const (
	CallRecordingStateEnumRecording CallRecordingStateEnum = "RECORDING"
	CallRecordingStateEnumReady     CallRecordingStateEnum = "READY"
	CallRecordingStateEnumError     CallRecordingStateEnum = "ERROR"
)

func (e *CallRecordingStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RECORDING":
		fallthrough
	case "READY":
		fallthrough
	case "ERROR":
		*e = CallRecordingStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallRecordingStateEnum: %s", s)
	}
}

// CallRecording - Represents a recording of a voice call
type CallRecording struct {
	// An id of a call action
	CallID *int64 `json:"callId,omitempty"`
	// Contains broadcast id if call was sent as a part of voice broadcast
	CampaignID *int64 `json:"campaignId,omitempty"`
	// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	Created *int64 `json:"created,omitempty"`
	// A unique string hash identifier of a recording
	Hash *string `json:"hash,omitempty"`
	// An id of a call recording
	ID *int64 `json:"id,omitempty"`
	// A size of a recording file in bytes
	LengthInBytes *int64 `json:"lengthInBytes,omitempty"`
	// Duration of a recording in seconds
	LengthInSeconds *int `json:"lengthInSeconds,omitempty"`
	// A public URL of a call recording
	Mp3URL *string `json:"mp3Url,omitempty"`
	// A name of a recording
	Name *string `json:"name,omitempty"`
	// Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
	State *CallRecordingStateEnum `json:"state,omitempty"`
}
