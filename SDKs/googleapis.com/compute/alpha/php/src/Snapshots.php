<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Snapshots 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteResponse
     */
	public function computeSnapshotsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{snapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified Snapshot resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetResponse
     */
	public function computeSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{snapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Snapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyResponse
     */
	public function computeSnapshotsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a snapshot in the specified project using the data included in the request. For regular snapshot creation, consider using this method instead of disks.createSnapshot, as this method supports more features, such as creating snapshots in a project different from the source disk project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertResponse
     */
	public function computeSnapshotsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshot", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of Snapshot resources contained within the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListResponse
     */
	public function computeSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyResponse
     */
	public function computeSnapshotsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsResponse
     */
	public function computeSnapshotsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsResponse
     */
	public function computeSnapshotsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/snapshots/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSnapshotsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}