"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authorizationcodelink as shared_authorizationcodelink
from ..shared import enumoption as shared_enumoption
from ..shared import rolegrant as shared_rolegrant
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConfigVariableTemplateStateEnum(str, Enum):
    r"""State of the config variable."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    DEPRECATED = 'DEPRECATED'

class ConfigVariableTemplateValueTypeEnum(str, Enum):
    r"""Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation."""
    VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED'
    STRING = 'STRING'
    INT = 'INT'
    BOOL = 'BOOL'
    SECRET = 'SECRET'
    ENUM = 'ENUM'
    AUTHORIZATION_CODE = 'AUTHORIZATION_CODE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigVariableTemplate:
    r"""ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection."""
    
    authorization_code_link: Optional[shared_authorizationcodelink.AuthorizationCodeLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationCodeLink'), 'exclude': lambda f: f is None }})
    r"""This configuration captures the details required to render an authorization link for the OAuth Authorization Code Flow."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the parameter."""  
    enum_options: Optional[list[shared_enumoption.EnumOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumOptions'), 'exclude': lambda f: f is None }})
    r"""Enum options. To be populated if `ValueType` is `ENUM`"""  
    is_advanced: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAdvanced'), 'exclude': lambda f: f is None }})
    r"""Indicates if current template is part of advanced settings"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Key of the config variable."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Flag represents that this `ConfigVariable` must be provided for a connection."""  
    role_grant: Optional[shared_rolegrant.RoleGrant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleGrant'), 'exclude': lambda f: f is None }})
    r"""This configuration defines all the Cloud IAM roles that needs to be granted to a particular GCP resource for the selected prinicpal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user."""  
    state: Optional[ConfigVariableTemplateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the config variable."""  
    validation_regex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationRegex'), 'exclude': lambda f: f is None }})
    r"""Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`."""  
    value_type: Optional[ConfigVariableTemplateValueTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueType'), 'exclude': lambda f: f is None }})
    r"""Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation."""  
    