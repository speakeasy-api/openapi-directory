/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Organizations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Search Catalog resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  cloudprivatecatalogOrganizationsCatalogsSearch(
    req: operations.CloudprivatecatalogOrganizationsCatalogsSearchRequest,
    security: operations.CloudprivatecatalogOrganizationsCatalogsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudprivatecatalogOrganizationsCatalogsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudprivatecatalogOrganizationsCatalogsSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}/catalogs:search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudprivatecatalogOrganizationsCatalogsSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudprivatecatalogOrganizationsCatalogsSearchResponse =
        new operations.CloudprivatecatalogOrganizationsCatalogsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search Product resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  cloudprivatecatalogOrganizationsProductsSearch(
    req: operations.CloudprivatecatalogOrganizationsProductsSearchRequest,
    security: operations.CloudprivatecatalogOrganizationsProductsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudprivatecatalogOrganizationsProductsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudprivatecatalogOrganizationsProductsSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}/products:search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudprivatecatalogOrganizationsProductsSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudprivatecatalogOrganizationsProductsSearchResponse =
        new operations.CloudprivatecatalogOrganizationsProductsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search Version resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  cloudprivatecatalogOrganizationsVersionsSearch(
    req: operations.CloudprivatecatalogOrganizationsVersionsSearchRequest,
    security: operations.CloudprivatecatalogOrganizationsVersionsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudprivatecatalogOrganizationsVersionsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudprivatecatalogOrganizationsVersionsSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}/versions:search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudprivatecatalogOrganizationsVersionsSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudprivatecatalogOrganizationsVersionsSearchResponse =
        new operations.CloudprivatecatalogOrganizationsVersionsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
