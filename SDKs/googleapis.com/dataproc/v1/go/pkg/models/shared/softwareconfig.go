// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SoftwareConfigOptionalComponentsEnum string

const (
	SoftwareConfigOptionalComponentsEnumComponentUnspecified SoftwareConfigOptionalComponentsEnum = "COMPONENT_UNSPECIFIED"
	SoftwareConfigOptionalComponentsEnumAnaconda             SoftwareConfigOptionalComponentsEnum = "ANACONDA"
	SoftwareConfigOptionalComponentsEnumDocker               SoftwareConfigOptionalComponentsEnum = "DOCKER"
	SoftwareConfigOptionalComponentsEnumDruid                SoftwareConfigOptionalComponentsEnum = "DRUID"
	SoftwareConfigOptionalComponentsEnumFlink                SoftwareConfigOptionalComponentsEnum = "FLINK"
	SoftwareConfigOptionalComponentsEnumHbase                SoftwareConfigOptionalComponentsEnum = "HBASE"
	SoftwareConfigOptionalComponentsEnumHiveWebhcat          SoftwareConfigOptionalComponentsEnum = "HIVE_WEBHCAT"
	SoftwareConfigOptionalComponentsEnumHudi                 SoftwareConfigOptionalComponentsEnum = "HUDI"
	SoftwareConfigOptionalComponentsEnumJupyter              SoftwareConfigOptionalComponentsEnum = "JUPYTER"
	SoftwareConfigOptionalComponentsEnumPresto               SoftwareConfigOptionalComponentsEnum = "PRESTO"
	SoftwareConfigOptionalComponentsEnumTrino                SoftwareConfigOptionalComponentsEnum = "TRINO"
	SoftwareConfigOptionalComponentsEnumRanger               SoftwareConfigOptionalComponentsEnum = "RANGER"
	SoftwareConfigOptionalComponentsEnumSolr                 SoftwareConfigOptionalComponentsEnum = "SOLR"
	SoftwareConfigOptionalComponentsEnumZeppelin             SoftwareConfigOptionalComponentsEnum = "ZEPPELIN"
	SoftwareConfigOptionalComponentsEnumZookeeper            SoftwareConfigOptionalComponentsEnum = "ZOOKEEPER"
)

func (e SoftwareConfigOptionalComponentsEnum) ToPointer() *SoftwareConfigOptionalComponentsEnum {
	return &e
}

func (e *SoftwareConfigOptionalComponentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPONENT_UNSPECIFIED":
		fallthrough
	case "ANACONDA":
		fallthrough
	case "DOCKER":
		fallthrough
	case "DRUID":
		fallthrough
	case "FLINK":
		fallthrough
	case "HBASE":
		fallthrough
	case "HIVE_WEBHCAT":
		fallthrough
	case "HUDI":
		fallthrough
	case "JUPYTER":
		fallthrough
	case "PRESTO":
		fallthrough
	case "TRINO":
		fallthrough
	case "RANGER":
		fallthrough
	case "SOLR":
		fallthrough
	case "ZEPPELIN":
		fallthrough
	case "ZOOKEEPER":
		*e = SoftwareConfigOptionalComponentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SoftwareConfigOptionalComponentsEnum: %v", v)
	}
}

// SoftwareConfig - Specifies the selection and config of software inside the cluster.
type SoftwareConfig struct {
	// Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
	ImageVersion *string `json:"imageVersion,omitempty"`
	// Optional. The set of components to activate on the cluster.
	OptionalComponents []SoftwareConfigOptionalComponentsEnum `json:"optionalComponents,omitempty"`
	// Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
	Properties map[string]string `json:"properties,omitempty"`
}
