// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BacerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BacerRequestBodyCertificateParameters struct {
	// Applicant Name
	Name string `json:"Name"`
	// Certificate Id
	RefNo string `json:"RefNo"`
}

// BacerRequestBodyFormatEnum - The format of the certificate in response.
type BacerRequestBodyFormatEnum string

const (
	BacerRequestBodyFormatEnumPdf BacerRequestBodyFormatEnum = "pdf"
)

func (e BacerRequestBodyFormatEnum) ToPointer() *BacerRequestBodyFormatEnum {
	return &e
}

func (e *BacerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = BacerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BacerRequestBodyFormatEnum: %v", v)
	}
}

// BacerRequestBody - Request format
type BacerRequestBody struct {
	CertificateParameters *BacerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BacerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Bacer504ApplicationJSONErrorEnum string

const (
	Bacer504ApplicationJSONErrorEnumGatewayTimeout Bacer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Bacer504ApplicationJSONErrorEnum) ToPointer() *Bacer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Bacer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer504ApplicationJSONErrorDescriptionEnum string

const (
	Bacer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Bacer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Bacer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Bacer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer504ApplicationJSON - Gateway timeout
type Bacer504ApplicationJSON struct {
	Error            *Bacer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer503ApplicationJSONErrorEnum string

const (
	Bacer503ApplicationJSONErrorEnumServiceUnavailable Bacer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Bacer503ApplicationJSONErrorEnum) ToPointer() *Bacer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Bacer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer503ApplicationJSONErrorDescriptionEnum string

const (
	Bacer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Bacer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Bacer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Bacer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer503ApplicationJSON - Service unavailable
type Bacer503ApplicationJSON struct {
	Error            *Bacer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer502ApplicationJSONErrorEnum string

const (
	Bacer502ApplicationJSONErrorEnumBadGatewy Bacer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Bacer502ApplicationJSONErrorEnum) ToPointer() *Bacer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Bacer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer502ApplicationJSONErrorDescriptionEnum string

const (
	Bacer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Bacer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Bacer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Bacer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer502ApplicationJSON - Bad gateway
type Bacer502ApplicationJSON struct {
	Error            *Bacer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer500ApplicationJSONErrorEnum string

const (
	Bacer500ApplicationJSONErrorEnumInternalServerError Bacer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Bacer500ApplicationJSONErrorEnum) ToPointer() *Bacer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Bacer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer500ApplicationJSONErrorDescriptionEnum string

const (
	Bacer500ApplicationJSONErrorDescriptionEnumInternalServerError Bacer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Bacer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Bacer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer500ApplicationJSON - Internal server error
type Bacer500ApplicationJSON struct {
	Error            *Bacer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer404ApplicationJSONErrorEnum string

const (
	Bacer404ApplicationJSONErrorEnumRecordNotFound Bacer404ApplicationJSONErrorEnum = "record_not_found"
	Bacer404ApplicationJSONErrorEnumURLNotFound    Bacer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Bacer404ApplicationJSONErrorEnum) ToPointer() *Bacer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Bacer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer404ApplicationJSONErrorDescriptionEnum string

const (
	Bacer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Bacer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Bacer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Bacer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Bacer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Bacer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer404ApplicationJSON - No record found
type Bacer404ApplicationJSON struct {
	Error            *Bacer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer401ApplicationJSONErrorEnum string

const (
	Bacer401ApplicationJSONErrorEnumInvalidAuthentication Bacer401ApplicationJSONErrorEnum = "invalid_authentication"
	Bacer401ApplicationJSONErrorEnumInvalidAuthorization  Bacer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Bacer401ApplicationJSONErrorEnum) ToPointer() *Bacer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Bacer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer401ApplicationJSONErrorDescriptionEnum string

const (
	Bacer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Bacer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Bacer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Bacer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Bacer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Bacer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer401ApplicationJSON - Unauthorized access
type Bacer401ApplicationJSON struct {
	Error            *Bacer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bacer400ApplicationJSONErrorEnum string

const (
	Bacer400ApplicationJSONErrorEnumMissingParameter Bacer400ApplicationJSONErrorEnum = "missing_parameter"
	Bacer400ApplicationJSONErrorEnumInvalidParameter Bacer400ApplicationJSONErrorEnum = "invalid_parameter"
	Bacer400ApplicationJSONErrorEnumInvalidFormat    Bacer400ApplicationJSONErrorEnum = "invalid_format"
	Bacer400ApplicationJSONErrorEnumInvalidTxnid     Bacer400ApplicationJSONErrorEnum = "invalid_txnid"
	Bacer400ApplicationJSONErrorEnumInvalidConsentid Bacer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Bacer400ApplicationJSONErrorEnum) ToPointer() *Bacer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Bacer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Bacer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Bacer400ApplicationJSONErrorDescriptionEnum string

const (
	Bacer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Bacer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Bacer400ApplicationJSONErrorDescriptionEnumBadRequest                              Bacer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Bacer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Bacer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Bacer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Bacer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Bacer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Bacer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Bacer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Bacer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bacer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Bacer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bacer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bacer400ApplicationJSON - Bad request
type Bacer400ApplicationJSON struct {
	Error            *Bacer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bacer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BacerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Bacer400ApplicationJSONObject *Bacer400ApplicationJSON
	// Unauthorized access
	Bacer401ApplicationJSONObject *Bacer401ApplicationJSON
	// No record found
	Bacer404ApplicationJSONObject *Bacer404ApplicationJSON
	// Internal server error
	Bacer500ApplicationJSONObject *Bacer500ApplicationJSON
	// Bad gateway
	Bacer502ApplicationJSONObject *Bacer502ApplicationJSON
	// Service unavailable
	Bacer503ApplicationJSONObject *Bacer503ApplicationJSON
	// Gateway timeout
	Bacer504ApplicationJSONObject *Bacer504ApplicationJSON
}
