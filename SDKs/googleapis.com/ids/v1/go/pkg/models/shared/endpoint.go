// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EndpointSeverityEnum - Required. Lowest threat severity that this endpoint will alert on.
type EndpointSeverityEnum string

const (
	EndpointSeverityEnumSeverityUnspecified EndpointSeverityEnum = "SEVERITY_UNSPECIFIED"
	EndpointSeverityEnumInformational       EndpointSeverityEnum = "INFORMATIONAL"
	EndpointSeverityEnumLow                 EndpointSeverityEnum = "LOW"
	EndpointSeverityEnumMedium              EndpointSeverityEnum = "MEDIUM"
	EndpointSeverityEnumHigh                EndpointSeverityEnum = "HIGH"
	EndpointSeverityEnumCritical            EndpointSeverityEnum = "CRITICAL"
)

func (e *EndpointSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "INFORMATIONAL":
		fallthrough
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = EndpointSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EndpointSeverityEnum: %s", s)
	}
}

// EndpointInput - Endpoint describes a single IDS endpoint. It defines a forwarding rule to which packets can be sent for IDS inspection.
type EndpointInput struct {
	// User-provided description of the endpoint
	Description *string `json:"description,omitempty"`
	// The labels of the endpoint.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network *string `json:"network,omitempty"`
	// Required. Lowest threat severity that this endpoint will alert on.
	Severity *EndpointSeverityEnum `json:"severity,omitempty"`
	// List of threat IDs to be excepted from generating alerts.
	ThreatExceptions []string `json:"threatExceptions,omitempty"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs *bool `json:"trafficLogs,omitempty"`
}

// EndpointStateEnum - Output only. Current state of the endpoint.
type EndpointStateEnum string

const (
	EndpointStateEnumStateUnspecified EndpointStateEnum = "STATE_UNSPECIFIED"
	EndpointStateEnumCreating         EndpointStateEnum = "CREATING"
	EndpointStateEnumReady            EndpointStateEnum = "READY"
	EndpointStateEnumDeleting         EndpointStateEnum = "DELETING"
	EndpointStateEnumUpdating         EndpointStateEnum = "UPDATING"
)

func (e *EndpointStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "READY":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPDATING":
		*e = EndpointStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EndpointStateEnum: %s", s)
	}
}

// Endpoint - Endpoint describes a single IDS endpoint. It defines a forwarding rule to which packets can be sent for IDS inspection.
type Endpoint struct {
	// Output only. The create time timestamp.
	CreateTime *string `json:"createTime,omitempty"`
	// User-provided description of the endpoint
	Description *string `json:"description,omitempty"`
	// Output only. The fully qualified URL of the endpoint's ILB Forwarding Rule.
	EndpointForwardingRule *string `json:"endpointForwardingRule,omitempty"`
	// Output only. The IP address of the IDS Endpoint's ILB.
	EndpointIP *string `json:"endpointIp,omitempty"`
	// The labels of the endpoint.
	Labels map[string]string `json:"labels,omitempty"`
	// Output only. The name of the endpoint.
	Name *string `json:"name,omitempty"`
	// Required. The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network *string `json:"network,omitempty"`
	// Required. Lowest threat severity that this endpoint will alert on.
	Severity *EndpointSeverityEnum `json:"severity,omitempty"`
	// Output only. Current state of the endpoint.
	State *EndpointStateEnum `json:"state,omitempty"`
	// List of threat IDs to be excepted from generating alerts.
	ThreatExceptions []string `json:"threatExceptions,omitempty"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs *bool `json:"trafficLogs,omitempty"`
	// Output only. The update time timestamp.
	UpdateTime *string `json:"updateTime,omitempty"`
}
