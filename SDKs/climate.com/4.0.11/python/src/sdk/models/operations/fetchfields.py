"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import fields_ as shared_fields_
from typing import Any, Optional


@dataclasses.dataclass
class FetchFieldsSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Api-Key' }})  
    oauth2_authorization_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class FetchFieldsRequest:
    
    field_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fieldName', 'style': 'form', 'explode': True }})
    r"""Optional prefix filter for field name. Must be at least 3 characters."""  
    x_limit: Optional[int] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Limit', 'style': 'simple', 'explode': False }})
    r"""Max number of results to return per batch.  Must be between 1 and 100 inclusive.  Defaults to 100."""  
    x_next_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Next-Token', 'style': 'simple', 'explode': False }})
    r"""Opaque string which allows for fetching the next batch of results.  Can be used to poll for changes."""  
    

@dataclasses.dataclass
class FetchFieldsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    empty: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Not Modified"""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Bad Input"""  
    fields_: Optional[shared_fields_.Fields] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    