// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EpfscSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type EpfscRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// SC_NO
	Scno string `json:"SCNO"`
}

// EpfscRequestBodyFormatEnum - The format of the certificate in response.
type EpfscRequestBodyFormatEnum string

const (
	EpfscRequestBodyFormatEnumPdf EpfscRequestBodyFormatEnum = "pdf"
)

func (e EpfscRequestBodyFormatEnum) ToPointer() *EpfscRequestBodyFormatEnum {
	return &e
}

func (e *EpfscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = EpfscRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EpfscRequestBodyFormatEnum: %v", v)
	}
}

// EpfscRequestBody - Request format
type EpfscRequestBody struct {
	CertificateParameters *EpfscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EpfscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Epfsc504ApplicationJSONErrorEnum string

const (
	Epfsc504ApplicationJSONErrorEnumGatewayTimeout Epfsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Epfsc504ApplicationJSONErrorEnum) ToPointer() *Epfsc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Epfsc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc504ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Epfsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Epfsc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Epfsc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc504ApplicationJSON - Gateway timeout
type Epfsc504ApplicationJSON struct {
	Error            *Epfsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc503ApplicationJSONErrorEnum string

const (
	Epfsc503ApplicationJSONErrorEnumServiceUnavailable Epfsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Epfsc503ApplicationJSONErrorEnum) ToPointer() *Epfsc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Epfsc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc503ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Epfsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Epfsc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Epfsc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc503ApplicationJSON - Service unavailable
type Epfsc503ApplicationJSON struct {
	Error            *Epfsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc502ApplicationJSONErrorEnum string

const (
	Epfsc502ApplicationJSONErrorEnumBadGatewy Epfsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Epfsc502ApplicationJSONErrorEnum) ToPointer() *Epfsc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Epfsc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc502ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Epfsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Epfsc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Epfsc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc502ApplicationJSON - Bad gateway
type Epfsc502ApplicationJSON struct {
	Error            *Epfsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc500ApplicationJSONErrorEnum string

const (
	Epfsc500ApplicationJSONErrorEnumInternalServerError Epfsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Epfsc500ApplicationJSONErrorEnum) ToPointer() *Epfsc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Epfsc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc500ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc500ApplicationJSONErrorDescriptionEnumInternalServerError Epfsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Epfsc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Epfsc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc500ApplicationJSON - Internal server error
type Epfsc500ApplicationJSON struct {
	Error            *Epfsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc404ApplicationJSONErrorEnum string

const (
	Epfsc404ApplicationJSONErrorEnumRecordNotFound Epfsc404ApplicationJSONErrorEnum = "record_not_found"
	Epfsc404ApplicationJSONErrorEnumURLNotFound    Epfsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Epfsc404ApplicationJSONErrorEnum) ToPointer() *Epfsc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Epfsc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc404ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Epfsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Epfsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Epfsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Epfsc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Epfsc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc404ApplicationJSON - No record found
type Epfsc404ApplicationJSON struct {
	Error            *Epfsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc401ApplicationJSONErrorEnum string

const (
	Epfsc401ApplicationJSONErrorEnumInvalidAuthentication Epfsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Epfsc401ApplicationJSONErrorEnumInvalidAuthorization  Epfsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Epfsc401ApplicationJSONErrorEnum) ToPointer() *Epfsc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Epfsc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc401ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Epfsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Epfsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Epfsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Epfsc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Epfsc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc401ApplicationJSON - Unauthorized access
type Epfsc401ApplicationJSON struct {
	Error            *Epfsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Epfsc400ApplicationJSONErrorEnum string

const (
	Epfsc400ApplicationJSONErrorEnumMissingParameter Epfsc400ApplicationJSONErrorEnum = "missing_parameter"
	Epfsc400ApplicationJSONErrorEnumInvalidParameter Epfsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Epfsc400ApplicationJSONErrorEnumInvalidFormat    Epfsc400ApplicationJSONErrorEnum = "invalid_format"
	Epfsc400ApplicationJSONErrorEnumInvalidTxnid     Epfsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Epfsc400ApplicationJSONErrorEnumInvalidConsentid Epfsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Epfsc400ApplicationJSONErrorEnum) ToPointer() *Epfsc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Epfsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Epfsc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Epfsc400ApplicationJSONErrorDescriptionEnum string

const (
	Epfsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Epfsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Epfsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Epfsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Epfsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Epfsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Epfsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Epfsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Epfsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Epfsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Epfsc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Epfsc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Epfsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Epfsc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Epfsc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Epfsc400ApplicationJSON - Bad request
type Epfsc400ApplicationJSON struct {
	Error            *Epfsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Epfsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EpfscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Epfsc400ApplicationJSONObject *Epfsc400ApplicationJSON
	// Unauthorized access
	Epfsc401ApplicationJSONObject *Epfsc401ApplicationJSON
	// No record found
	Epfsc404ApplicationJSONObject *Epfsc404ApplicationJSON
	// Internal server error
	Epfsc500ApplicationJSONObject *Epfsc500ApplicationJSON
	// Bad gateway
	Epfsc502ApplicationJSONObject *Epfsc502ApplicationJSON
	// Service unavailable
	Epfsc503ApplicationJSONObject *Epfsc503ApplicationJSON
	// Gateway timeout
	Epfsc504ApplicationJSONObject *Epfsc504ApplicationJSON
}
