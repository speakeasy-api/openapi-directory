"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import algorithmvalidationspecification as shared_algorithmvalidationspecification
from ..shared import inferencespecification as shared_inferencespecification
from ..shared import tag as shared_tag
from ..shared import trainingspecification as shared_trainingspecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAlgorithmInput:
    
    algorithm_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmName') }})  
    training_specification: shared_trainingspecification.TrainingSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingSpecification') }})  
    algorithm_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmDescription'), 'exclude': lambda f: f is None }})  
    certify_for_marketplace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertifyForMarketplace'), 'exclude': lambda f: f is None }})  
    inference_specification: Optional[shared_inferencespecification.InferenceSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceSpecification'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    validation_specification: Optional[shared_algorithmvalidationspecification.AlgorithmValidationSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationSpecification'), 'exclude': lambda f: f is None }})  
    