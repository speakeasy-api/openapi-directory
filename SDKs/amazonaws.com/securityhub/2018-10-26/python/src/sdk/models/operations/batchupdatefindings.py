"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import awssecurityfindingidentifier as shared_awssecurityfindingidentifier
from ..shared import batchupdatefindingsresponse as shared_batchupdatefindingsresponse
from ..shared import relatedfinding as shared_relatedfinding
from ..shared import severitylabel_enum as shared_severitylabel_enum
from ..shared import workflowstatus_enum as shared_workflowstatus_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchUpdateFindingsRequestBodyNote:
    r"""The updated note."""
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Text'), 'exclude': lambda f: f is None }})  
    updated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedBy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchUpdateFindingsRequestBodySeverity:
    r"""Updates to the severity information for a finding."""
    
    label: Optional[shared_severitylabel_enum.SeverityLabelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Label'), 'exclude': lambda f: f is None }})  
    normalized: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Normalized'), 'exclude': lambda f: f is None }})  
    product: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Product'), 'exclude': lambda f: f is None }})  
    
class BatchUpdateFindingsRequestBodyVerificationStateEnum(str, Enum):
    r"""<p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>"""
    UNKNOWN = 'UNKNOWN'
    TRUE_POSITIVE = 'TRUE_POSITIVE'
    FALSE_POSITIVE = 'FALSE_POSITIVE'
    BENIGN_POSITIVE = 'BENIGN_POSITIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchUpdateFindingsRequestBodyWorkflow:
    r"""Used to update information about the investigation into the finding."""
    
    status: Optional[shared_workflowstatus_enum.WorkflowStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchUpdateFindingsRequestBody:
    
    finding_identifiers: list[shared_awssecurityfindingidentifier.AwsSecurityFindingIdentifier] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FindingIdentifiers') }})
    r"""<p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p> <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>"""  
    confidence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Confidence'), 'exclude': lambda f: f is None }})
    r"""<p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p> <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>"""  
    criticality: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Criticality'), 'exclude': lambda f: f is None }})
    r"""<p>The updated value for the level of importance assigned to the resources associated with the findings.</p> <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>"""  
    note: Optional[BatchUpdateFindingsRequestBodyNote] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Note'), 'exclude': lambda f: f is None }})
    r"""The updated note."""  
    related_findings: Optional[list[shared_relatedfinding.RelatedFinding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelatedFindings'), 'exclude': lambda f: f is None }})
    r"""A list of findings that are related to the updated findings."""  
    severity: Optional[BatchUpdateFindingsRequestBodySeverity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Severity'), 'exclude': lambda f: f is None }})
    r"""Updates to the severity information for a finding."""  
    types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Types'), 'exclude': lambda f: f is None }})
    r"""<p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p> <p>Valid namespace values are as follows.</p> <ul> <li> <p>Software and Configuration Checks</p> </li> <li> <p>TTPs</p> </li> <li> <p>Effects</p> </li> <li> <p>Unusual Behaviors</p> </li> <li> <p>Sensitive Data Identifications </p> </li> </ul>"""  
    user_defined_fields: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserDefinedFields'), 'exclude': lambda f: f is None }})
    r"""A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding."""  
    verification_state: Optional[BatchUpdateFindingsRequestBodyVerificationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationState'), 'exclude': lambda f: f is None }})
    r"""<p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>"""  
    workflow: Optional[BatchUpdateFindingsRequestBodyWorkflow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Workflow'), 'exclude': lambda f: f is None }})
    r"""Used to update information about the investigation into the finding."""  
    

@dataclasses.dataclass
class BatchUpdateFindingsRequest:
    
    request_body: BatchUpdateFindingsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class BatchUpdateFindingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_update_findings_response: Optional[shared_batchupdatefindingsresponse.BatchUpdateFindingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalException"""  
    invalid_access_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAccessException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    