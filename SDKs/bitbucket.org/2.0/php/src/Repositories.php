<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Repositories 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a repository
     * 
     * Deletes the repository. This is an irreversible operation.
     * 
     * This does not affect its forks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugResponse
     */
	public function deleteRepositoriesWorkspaceRepoSlug(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a webhook for a repository
     * 
     * Deletes the specified webhook subscription from the given
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function deleteRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an explicit group permission for a repository
     * 
     * Deletes the repository group permission between the requested repository and group, if one exists.
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * Example:
     * 
     * $ curl -X DELETE https://api.bitbucket.org/2.0/repositories/atlassian_tutorial
     * /geordi/permissions-config/groups/developers
     * 
     * 
     * HTTP/1.1 204
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
     */
	public function deleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an explicit user permission for a repository
     * 
     * Deletes the repository user permission between the requested repository and user, if one exists.
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * The only authentication method for this endpoint is via app passwords.
     * 
     * ```
     * $ curl -X DELETE https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     * permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a
     * 
     * 
     * HTTP/1.1 204
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
     */
	public function deleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public repositories
     * 
     * Returns a paginated list of all public repositories.
     * 
     * This endpoint also supports filtering and sorting of the results. See
     * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesResponse
     */
	public function getRepositories(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositories', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories in a workspace
     * 
     * Returns a paginated list of all repositories owned by the specified
     * workspace.
     * 
     * The result can be narrowed down based on the authenticated user's role.
     * 
     * E.g. with `?role=contributor`, only those repositories that the
     * authenticated user has write access to are returned (this includes any
     * repo the user is an admin on, as that implies write access).
     * 
     * This endpoint also supports filtering and sorting of the results. See
     * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceResponse
     */
	public function getRepositoriesWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositories', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a repository
     * 
     * Returns the object describing this repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugResponse
     */
	public function getRepositoriesWorkspaceRepoSlug(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repository = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List commits that modified a file
     * 
     * Returns a paginated list of commits that modified the specified file.
     * 
     * Commits are returned in reverse chronological order. This is roughly
     * equivalent to the following commands:
     * 
     *     $ git log --follow --date-order <sha> <path>
     * 
     * By default, Bitbucket will follow renames and the path name in the
     * returned entries reflects that. This can be turned off using the
     * `?renames=false` query parameter.
     * 
     * Results are returned in descending chronological order by default, and
     * like most endpoints you can
     * [filter and sort](/cloud/bitbucket/rest/intro/#filtering) the response to
     * only provide exactly the data you want.
     * 
     * For example, if you wanted to find commits made before 2011-05-18
     * against a file named `README.rst`, but you only wanted the path and
     * date, your query would look like this:
     * 
     * ```
     * $ curl 'https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/filehistory/master/README.rst'\
     *   '?fields=values.next,values.path,values.commit.date&q=commit.date<=2011-05-18'
     * {
     *   "values": [
     *     {
     *       "commit": {
     *         "date": "2011-05-17T07:32:09+00:00"
     *       },
     *       "path": "README.rst"
     *     },
     *     {
     *       "commit": {
     *         "date": "2011-05-16T06:33:28+00:00"
     *       },
     *       "path": "README.txt"
     *     },
     *     {
     *       "commit": {
     *         "date": "2011-05-16T06:15:39+00:00"
     *       },
     *       "path": "README.txt"
     *     }
     *   ]
     * }
     * ```
     * 
     * In the response you can see that the file was renamed to `README.rst`
     * by the commit made on 2011-05-16, and was previously named `README.txt`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse
     */
	public function getRepositoriesWorkspaceRepoSlugFilehistoryCommitPath(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/filehistory/{commit}/{path}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedFiles', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository forks
     * 
     * Returns a paginated list of all the forks of the specified
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksResponse
     */
	public function getRepositoriesWorkspaceRepoSlugForks(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/forks', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugForksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositories', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List webhooks for a repository
     * 
     * Returns a paginated list of webhooks installed on this repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse
     */
	public function getRepositoriesWorkspaceRepoSlugHooks(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWebhookSubscriptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWebhookSubscriptions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook for a repository
     * 
     * Returns the webhook with the specified id installed on the specified
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function getRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the inheritance state for repository settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
     */
	public function getRepositoriesWorkspaceRepoSlugOverrideSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/override-settings', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryInheritanceState = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List explicit group permissions for a repository
     * 
     * Returns a paginated list of explicit group permissions for the given repository.
     * This endpoint does not support BBQL features.
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups
     * 
     * HTTP/1.1 200
     * Location: https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups
     * 
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *       "type": "repository_group_permission",
     *       "group": {
     *         "type": "group",
     *         "name": "Administrators",
     *         "slug": "administrators"
     *       },
     *       "permission": "admin",
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/
     *                    geordi/permissions-config/groups/administrators"
     *         }
     *       }
     *     },
     *     {
     *       "type": "repository_group_permission",
     *       "group": {
     *         "type": "group",
     *         "name": "Developers",
     *         "slug": "developers"
     *       },
     *       "permission": "read",
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/
     *                    geordi/permissions-config/groups/developers"
     *         }
     *       }
     *     }
     *   ],
     *   "page": 1,
     *   "size": 2
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse
     */
	public function getRepositoriesWorkspaceRepoSlugPermissionsConfigGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/groups', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositoryGroupPermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositoryGroupPermissions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an explicit group permission for a repository
     * 
     * Returns the group permission for a given group slug and repository
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * * `none`
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
     * 
     * HTTP/1.1 200
     * Location:
     * https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
     * 
     * {
     *     "type": "repository_group_permission",
     *     "group": {
     *         "type": "group",
     *         "name": "Developers",
     *         "slug": "developers"
     *     },
     *     "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "permission": "read",
     *     "links": {
     *       "self": {
     *         "href":
     *         "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers"
     *       }
     *     }
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
     */
	public function getRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryGroupPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List explicit user permissions for a repository
     * 
     * Returns a paginated list of explicit user permissions for the given repository.
     * This endpoint does not support BBQL features.
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/users
     * 
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *         "type": "repository_user_permission",
     *         "user": {
     *             "type": "user",
     *             "display_name": "Colin Cameron",
     *             "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
     *             "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *         },
     *         "permission": "admin",
     *         "links": {
     *           "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     *                      permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *           }
     *         }
     *     },
     *     {
     *       "type": "repository_user_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Sean Conaty",
     *         "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}",
     *         "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324c"
     *       },
     *       "permission": "write",
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0//repositories/atlassian_tutorial/geordi/
     *                    permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324c"
     *         }
     *       }
     *     }
     *   ],
     *   "page": 1,
     *   "size": 2
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse
     */
	public function getRepositoriesWorkspaceRepoSlugPermissionsConfigUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/users', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositoryUserPermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositoryUserPermissions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an explicit user permission for a repository
     * 
     * Returns the explicit user permission for a given user and repository.
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * * `none`
     * 
     * Example:
     * 
     * ```
     * $ curl 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     *         permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
     * 
     * HTTP/1.1 200
     * Location: 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     *            permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
     * 
     * {
     *     "type": "repository_user_permission",
     *     "user": {
     *         "type": "user",
     *         "display_name": "Colin Cameron",
     *         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
     *         "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *     },
     *     "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "permission": "admin",
     *     "links": {
     *         "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     *                      permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *         }
     *     }
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
     */
	public function getRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryUserPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the root directory of the main branch
     * 
     * This endpoint redirects the client to the directory listing of the
     * root directory on the main branch.
     * 
     * This is equivalent to directly hitting
     * [/2.0/repositories/{username}/{repo_slug}/src/{commit}/{path}](src/%7Bcommit%7D/%7Bpath%7D)
     * without having to know the name or SHA1 of the repo's main branch.
     * 
     * To create new commits, [POST to this endpoint](#post)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcResponse
     */
	public function getRepositoriesWorkspaceRepoSlugSrc(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/src', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedTreeentries = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedTreeentries', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get file or directory contents
     * 
     * This endpoints is used to retrieve the contents of a single file,
     * or the contents of a directory at a specified revision.
     * 
     * #### Raw file contents
     * 
     * When `path` points to a file, this endpoint returns the raw contents.
     * The response's Content-Type is derived from the filename
     * extension (not from the contents). The file contents are not processed
     * and no character encoding/recoding is performed and as a result no
     * character encoding is included as part of the Content-Type.
     * 
     * The `Content-Disposition` header will be "attachment" to prevent
     * browsers from running executable files.
     * 
     * If the file is managed by LFS, then a 301 redirect pointing to
     * Atlassian's media services platform is returned.
     * 
     * The response includes an ETag that is based on the contents of the file
     * and its attributes. This means that an empty `__init__.py` always
     * returns the same ETag, regardless on the directory it lives in, or the
     * commit it is on.
     * 
     * #### File meta data
     * 
     * When the request for a file path includes the query parameter
     * `?format=meta`, instead of returning the file's raw contents, Bitbucket
     * instead returns the JSON object describing the file's properties:
     * 
     * ```javascript
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef/tests/__init__.py?format=meta
     * {
     *   "links": {
     *     "self": {
     *       "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py"
     *     },
     *     "meta": {
     *       "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py?format=meta"
     *     }
     *   },
     *   "path": "tests/__init__.py",
     *   "commit": {
     *     "type": "commit",
     *     "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
     *     "links": {
     *       "self": {
     *         "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *       },
     *       "html": {
     *         "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *       }
     *     }
     *   },
     *   "attributes": [],
     *   "type": "commit_file",
     *   "size": 0
     * }
     * ```
     * 
     * File objects contain an `attributes` element that contains a list of
     * possible modifiers. Currently defined values are:
     * 
     * * `link` -- indicates that the entry is a symbolic link. The contents
     *     of the file represent the path the link points to.
     * * `executable` -- indicates that the file has the executable bit set.
     * * `subrepository` -- indicates that the entry points to a submodule or
     *     subrepo. The contents of the file is the SHA1 of the repository
     *     pointed to.
     * * `binary` -- indicates whether Bitbucket thinks the file is binary.
     * 
     * This endpoint can provide an alternative to how a HEAD request can be
     * used to check for the existence of a file, or a file's size without
     * incurring the overhead of receiving its full contents.
     * 
     * 
     * #### Directory listings
     * 
     * When `path` points to a directory instead of a file, the response is a
     * paginated list of directory and file objects in the same order as the
     * underlying SCM system would return them.
     * 
     * For example:
     * 
     * ```javascript
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef/tests
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *       "path": "tests/test_project",
     *       "type": "commit_directory",
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/"
     *         },
     *         "meta": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/?format=meta"
     *         }
     *       },
     *       "commit": {
     *         "type": "commit",
     *         "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
     *         "links": {
     *           "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *           },
     *           "html": {
     *             "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *           }
     *         }
     *       }
     *     },
     *     {
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py"
     *         },
     *         "meta": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py?format=meta"
     *         }
     *       },
     *       "path": "tests/__init__.py",
     *       "commit": {
     *         "type": "commit",
     *         "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
     *         "links": {
     *           "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *           },
     *           "html": {
     *             "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
     *           }
     *         }
     *       },
     *       "attributes": [],
     *       "type": "commit_file",
     *       "size": 0
     *     }
     *   ],
     *   "page": 1,
     *   "size": 2
     * }
     * ```
     * 
     * When listing the contents of the repo's root directory, the use of a
     * trailing slash at the end of the URL is required.
     * 
     * The response by default is not recursive, meaning that only the direct contents of
     * a path are returned. The response does not recurse down into
     * subdirectories. In order to "walk" the entire directory tree, the
     * client can either parse each response and follow the `self` links of each
     * `commit_directory` object, or can specify a `max_depth` to recurse to.
     * 
     * The max_depth parameter will do a breadth-first search to return the contents of the subdirectories
     * up to the depth specified. Breadth-first search was chosen as it leads to the least amount of
     * file system operations for git. If the `max_depth` parameter is specified to be too
     * large, the call will time out and return a 555.
     * 
     * Each returned object is either a `commit_file`, or a `commit_directory`,
     * both of which contain a `path` element. This path is the absolute path
     * from the root of the repository. Each object also contains a `commit`
     * object which embeds the commit the file is on. Note that this is merely
     * the commit that was used in the URL. It is *not* the commit that last
     * modified the file.
     * 
     * Directory objects have 2 representations. Their `self` link returns the
     * paginated contents of the directory. The `meta` link on the other hand
     * returns the actual `directory` object itself, e.g.:
     * 
     * ```javascript
     * {
     *   "path": "tests/test_project",
     *   "type": "commit_directory",
     *   "links": {
     *     "self": {
     *       "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/"
     *     },
     *     "meta": {
     *       "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/?format=meta"
     *     }
     *   },
     *   "commit": { ... }
     * }
     * ```
     * 
     * #### Querying, filtering and sorting
     * 
     * Like most API endpoints, this API supports the Bitbucket
     * querying/filtering syntax and so you could filter a directory listing
     * to only include entries that match certain criteria. For instance, to
     * list all binary files over 1kb use the expression:
     * 
     * `size > 1024 and attributes = "binary"`
     * 
     * which after urlencoding yields the query string:
     * 
     * `?q=size%3E1024+and+attributes%3D%22binary%22`
     * 
     * To change the ordering of the response, use the `?sort` parameter:
     * 
     * `.../src/eefd5ef/?sort=-size`
     * 
     * See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more
     * details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse
     */
	public function getRepositoriesWorkspaceRepoSlugSrcCommitPath(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/src/{commit}/{path}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedTreeentries = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedTreeentries', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 555) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories watchers
     * 
     * Returns a paginated list of all the watchers on the specified
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersResponse
     */
	public function getRepositoriesWorkspaceRepoSlugWatchers(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/watchers', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugWatchersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedAccounts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository permissions for a user
     * 
     * Returns an object for each repository the caller has explicit access
     * to and their effective permission — the highest level of permission the
     * caller has. This does not return public repositories that the user was
     * not granted any specific permission in, and does not distinguish between
     * explicit and implicit privileges.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/user/permissions/repositories
     * 
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "nickname": "evzijst",
     *         "display_name": "Erik van Zijst",
     *         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "bitbucket/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *       },
     *       "permission": "admin"
     *     }
     *   ],
     *   "page": 1,
     *   "size": 1
     * }
     * ```
     * 
     * Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by
     * repository or permission by adding the following query string
     * parameters:
     * 
     * * `q=repository.name="geordi"` or `q=permission>"read"`
     * * `sort=repository.name`
     * 
     * Note that the query parameter values need to be URL escaped so that `=`
     * would become `%3D`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesResponse
     */
	public function getUserPermissionsRepositories(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/permissions/repositories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRepositoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositoryPermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositoryPermissions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a repository
     * 
     * Creates a new repository.
     * 
     * Note: In order to set the project for the newly created repository,
     * pass in either the project key or the project UUID as part of the
     * request body as shown in the examples below:
     * 
     * ```
     * $ curl -X POST -H "Content-Type: application/json" -d '{
     *     "scm": "git",
     *     "project": {
     *         "key": "MARS"
     *     }
     * }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
     * ```
     * 
     * or
     * 
     * ```
     * $ curl -X POST -H "Content-Type: application/json" -d '{
     *     "scm": "git",
     *     "project": {
     *         "key": "{ba516952-992a-4c2d-acbd-17d502922f96}"
     *     }
     * }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
     * ```
     * 
     * The project must be assigned for all repositories. If the project is not provided,
     * the repository is automatically assigned to the oldest project in the workspace.
     * 
     * Note: In the examples above, the workspace ID `teamsinspace`,
     * and/or the repository name `hablanding` can be replaced by UUIDs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugResponse
     */
	public function postRepositoriesWorkspaceRepoSlug(
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}', \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repository = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fork a repository
     * 
     * Creates a new fork of the specified repository.
     * 
     * #### Forking a repository
     * 
     * To create a fork, specify the workspace explicitly as part of the
     * request body:
     * 
     * ```
     * $ curl -X POST -u jdoe https://api.bitbucket.org/2.0/repositories/atlassian/bbql/forks \
     *   -H 'Content-Type: application/json' -d '{
     *     "name": "bbql_fork",
     *     "workspace": {
     *       "slug": "atlassian"
     *     }
     * }'
     * ```
     * 
     * To fork a repository into the same workspace, also specify a new `name`.
     * 
     * When you specify a value for `name`, it will also affect the `slug`.
     * The `slug` is reflected in the repository URL of the new fork. It is
     * derived from `name` by substituting non-ASCII characters, removes
     * whitespace, and changes characters to lower case. For example,
     * `My repo` would turn into `my_repo`.
     * 
     * You need contributor access to create new forks within a workspace.
     * 
     * 
     * #### Change the properties of a new fork
     * 
     * By default the fork inherits most of its properties from the parent.
     * However, since the optional POST body document follows the normal
     * `repository` JSON schema and you can override the new fork's
     * properties.
     * 
     * Properties that can be overridden include:
     * 
     * * description
     * * fork_policy
     * * language
     * * mainbranch
     * * is_private (note that a private repo's fork_policy might prohibit
     *   the creation of public forks, in which `is_private=False` would fail)
     * * has_issues (to initialize or disable the new repo's issue tracker --
     *   note that the actual contents of the parent repository's issue
     *   tracker are not copied during forking)
     * * has_wiki (to initialize or disable the new repo's wiki --
     *   note that the actual contents of the parent repository's wiki are not
     *   copied during forking)
     * * project (when forking into a private project, the fork's `is_private`
     *   must be `true`)
     * 
     * Properties that cannot be modified include:
     * 
     * * scm
     * * parent
     * * full_name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksResponse
     */
	public function postRepositoriesWorkspaceRepoSlugForks(
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/forks', \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugForksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repository = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook for a repository
     * 
     * Creates a new webhook on the specified repository.
     * 
     * Example:
     * 
     * ```
     * $ curl -X POST -u credentials -H 'Content-Type: application/json'
     *   https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks
     *   -d '
     *     {
     *       "description": "Webhook Description",
     *       "url": "https://example.com/",
     *       "active": true,
     *       "events": [
     *         "repo:push",
     *         "issue:created",
     *         "issue:updated"
     *       ]
     *     }'
     * ```
     * 
     * Note that this call requires the webhook scope, as well as any scope
     * that applies to the events that the webhook subscribes to. In the
     * example above that means: `webhook`, `repository` and `issue`.
     * 
     * Also note that the `url` must properly resolve and cannot be an
     * internal, non-routed address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse
     */
	public function postRepositoriesWorkspaceRepoSlugHooks(
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks', \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a commit by uploading a file
     * 
     * This endpoint is used to create new commits in the repository by
     * uploading files.
     * 
     * To add a new file to a repository:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/username/slug/src \
     *   -F /repo/path/to/image.png=@image.png
     * ```
     * 
     * This will create a new commit on top of the main branch, inheriting the
     * contents of the main branch, but adding (or overwriting) the
     * `image.png` file to the repository in the `/repo/path/to` directory.
     * 
     * To create a commit that deletes files, use the `files` parameter:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/username/slug/src \
     *   -F files=/file/to/delete/1.txt \
     *   -F files=/file/to/delete/2.txt
     * ```
     * 
     * You can add/modify/delete multiple files in a request. Rename/move a
     * file by deleting the old path and adding the content at the new path.
     * 
     * This endpoint accepts `multipart/form-data` (as in the examples above),
     * as well as `application/x-www-form-urlencoded`.
     * 
     * #### multipart/form-data
     * 
     * A `multipart/form-data` post contains a series of "form fields" that
     * identify both the individual files that are being uploaded, as well as
     * additional, optional meta data.
     * 
     * Files are uploaded in file form fields (those that have a
     * `Content-Disposition` parameter) whose field names point to the remote
     * path in the repository where the file should be stored. Path field
     * names are always interpreted to be absolute from the root of the
     * repository, regardless whether the client uses a leading slash (as the
     * above `curl` example did).
     * 
     * File contents are treated as bytes and are not decoded as text.
     * 
     * The commit message, as well as other non-file meta data for the
     * request, is sent along as normal form field elements. Meta data fields
     * share the same namespace as the file objects. For `multipart/form-data`
     * bodies that should not lead to any ambiguity, as the
     * `Content-Disposition` header will contain the `filename` parameter to
     * distinguish between a file named "message" and the commit message field.
     * 
     * #### application/x-www-form-urlencoded
     * 
     * It is also possible to upload new files using a simple
     * `application/x-www-form-urlencoded` POST. This can be convenient when
     * uploading pure text files:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src \
     *   --data-urlencode "/path/to/me.txt=Lorem ipsum." \
     *   --data-urlencode "message=Initial commit" \
     *   --data-urlencode "author=Erik van Zijst <erik.van.zijst@gmail.com>"
     * ```
     * 
     * There could be a field name clash if a client were to upload a file
     * named "message", as this filename clashes with the meta data property
     * for the commit message. To avoid this and to upload files whose names
     * clash with the meta data properties, use a leading slash for the files,
     * e.g. `curl --data-urlencode "/message=file contents"`.
     * 
     * When an explicit slash is omitted for a file whose path matches that of
     * a meta data parameter, then it is interpreted as meta data, not as a
     * file.
     * 
     * #### Executables and links
     * 
     * While this API aims to facilitate the most common use cases, it is
     * possible to perform some more advanced operations like creating a new
     * symlink in the repository, or creating an executable file.
     * 
     * Files can be supplied with a `x-attributes` value in the
     * `Content-Disposition` header. For example, to upload an executable
     * file, as well as create a symlink from `README.txt` to `README`:
     * 
     * ```
     * --===============1438169132528273974==
     * Content-Type: text/plain; charset="us-ascii"
     * MIME-Version: 1.0
     * Content-Transfer-Encoding: 7bit
     * Content-ID: "bin/shutdown.sh"
     * Content-Disposition: attachment; filename="shutdown.sh"; x-attributes:"executable"
     * 
     * #!/bin/sh
     * halt
     * 
     * --===============1438169132528273974==
     * Content-Type: text/plain; charset="us-ascii"
     * MIME-Version: 1.0
     * Content-Transfer-Encoding: 7bit
     * Content-ID: "/README.txt"
     * Content-Disposition: attachment; filename="README.txt"; x-attributes:"link"
     * 
     * README
     * --===============1438169132528273974==--
     * ```
     * 
     * Links are files that contain the target path and have
     * `x-attributes:"link"` set.
     * 
     * When overwriting links with files, or vice versa, the newly uploaded
     * file determines both the new contents, as well as the attributes. That
     * means uploading a file without specifying `x-attributes="link"` will
     * create a regular file, even if the parent commit hosted a symlink at
     * the same path.
     * 
     * The same applies to executables. When modifying an existing executable
     * file, the form-data file element must include
     * `x-attributes="executable"` in order to preserve the executable status
     * of the file.
     * 
     * Note that this API does not support the creation or manipulation of
     * subrepos / submodules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcResponse
     */
	public function postRepositoriesWorkspaceRepoSlugSrc(
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/src', \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugSrcResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a repository
     * 
     * Since this endpoint can be used to both update and to create a
     * repository, the request body depends on the intent.
     * 
     * #### Creation
     * 
     * See the POST documentation for the repository endpoint for an example
     * of the request body.
     * 
     * #### Update
     * 
     * Note: Changing the `name` of the repository will cause the location to
     * be changed. This is because the URL of the repo is derived from the
     * name (a process called slugification). In such a scenario, it is
     * possible for the request to fail if the newly created slug conflicts
     * with an existing repository's slug. But if there is no conflict,
     * the new location will be returned in the `Location` header of the
     * response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugResponse
     */
	public function putRepositoriesWorkspaceRepoSlug(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repository = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook for a repository
     * 
     * Updates the specified webhook subscription.
     * 
     * The following properties can be mutated:
     * 
     * * `description`
     * * `url`
     * * `active`
     * * `events`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function putRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the inheritance state for repository settings
     *                 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
     */
	public function putRepositoriesWorkspaceRepoSlugOverrideSettings(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/override-settings', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an explicit group permission for a repository
     * 
     * Updates the group permission if it exists.
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * The only authentication method supported for this endpoint is via app passwords.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * 
     * Example:
     * ```
     * $ curl -X PUT -H "Content-Type: application/json"
     * https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
     * -d
     * '{
     *     "permission": "write"
     * }'
     * 
     * HTTP/1.1 200
     * Location:
     * https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
     * 
     * {
     *     "type": "repository_group_permission",
     *     "group": {
     *         "type": "group",
     *         "name": "Developers",
     *         "slug": "developers"
     *     },
     *     "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "permission": "write",
     *     "links": {
     *       "self": {
     *         "href":
     *         "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers"
     *       }
     *     }
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
     */
	public function putRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryGroupPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an explicit user permission for a repository
     * 
     * Updates the explicit user permission for a given user and repository. The selected user must be a member of
     * the workspace, and cannot be the workspace owner.
     * Only users with admin permission for the repository may access this resource.
     * 
     * The only authentication method for this endpoint is via app passwords.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * 
     * Example:
     * 
     * ```
     * $ curl -X PUT -H "Content-Type: application/json" 'https://api.bitbucket.org/2.0/repositories/
     * atlassian_tutorial/geordi/permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
     * -d         '{
     *     "permission": "write"
     * }'
     * 
     * HTTP/1.1 200
     * Location: 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     * permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
     * 
     * 
     * {
     *     "type": "repository_user_permission",
     *     "user": {
     *         "type": "user",
     *         "display_name": "Colin Cameron",
     *         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
     *         "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *     },
     *     "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "permission": "write",
     *     "links": {
     *         "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
     *                      permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
     *         }
     *     }
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
     */
	public function putRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryUserPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}