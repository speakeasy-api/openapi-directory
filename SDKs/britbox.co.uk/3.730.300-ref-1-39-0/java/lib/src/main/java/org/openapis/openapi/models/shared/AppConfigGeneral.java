/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AppConfigGeneral {
    /**
     * The currency code to target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public AppConfigGeneral withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * A map of custom configuration fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public AppConfigGeneral withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The default time zone of the site. e.g. "Etc/GMT"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultTimeZone")
    public String defaultTimeZone;
    public AppConfigGeneral withDefaultTimeZone(String defaultTimeZone) {
        this.defaultTimeZone = defaultTimeZone;
        return this;
    }
    
    /**
     * The Facebook application id associated with an environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facebookAppId")
    public String facebookAppId;
    public AppConfigGeneral withFacebookAppId(String facebookAppId) {
        this.facebookAppId = facebookAppId;
        return this;
    }
    
    /**
     * A Google Analytics token to track applicaton user events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gaToken")
    public String gaToken;
    public AppConfigGeneral withGaToken(String gaToken) {
        this.gaToken = gaToken;
        return this;
    }
    
    /**
     * A map of default item image types where the key is the item types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemImageTypes")
    public java.util.Map<String, String> itemImageTypes;
    public AppConfigGeneral withItemImageTypes(java.util.Map<String, String> itemImageTypes) {
        this.itemImageTypes = itemImageTypes;
        return this;
    }
    
    /**
     * Whether to require sign in for customers to access content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandatorySignIn")
    public Boolean mandatorySignIn;
    public AppConfigGeneral withMandatorySignIn(Boolean mandatorySignIn) {
        this.mandatorySignIn = mandatorySignIn;
        return this;
    }
    
    /**
     * The maximum value allowed for user ratings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUserRating")
    public Integer maxUserRating;
    public AppConfigGeneral withMaxUserRating(Integer maxUserRating) {
        this.maxUserRating = maxUserRating;
        return this;
    }
    
    /**
     * The public Stripe key to use for payment transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripeKey")
    public String stripeKey;
    public AppConfigGeneral withStripeKey(String stripeKey) {
        this.stripeKey = stripeKey;
        return this;
    }
    
    /**
     * The url of the primary website.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websiteUrl")
    public String websiteUrl;
    public AppConfigGeneral withWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }
    
}
