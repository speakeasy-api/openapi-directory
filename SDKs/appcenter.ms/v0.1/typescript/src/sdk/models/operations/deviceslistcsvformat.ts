/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class DevicesListCsvFormatSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class DevicesListCsvFormatRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the distribution group.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=distribution_group_name",
  })
  distributionGroupName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * multiple UDIDs which should be part of the resulting CSV.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=udids",
  })
  udids?: string[];

  /**
   * when true, filters out provisioned devices
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=unprovisioned_only",
  })
  unprovisionedOnly?: boolean;
}

export enum DevicesListCsvFormat400TextCsvCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * <b>bad_request</b>: Devices information can only be requested for iOS apps.
 *
 * @remarks
 *
 */
export class DevicesListCsvFormat400TextCsv extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code: DevicesListCsvFormat400TextCsvCodeEnum;

  @SpeakeasyMetadata()
  message: string;
}

export class DevicesListCsvFormatResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
