"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error401 as shared_error401
from ..shared import error500 as shared_error500
from ..shared import nhclothing as shared_nhclothing
from enum import Enum
from typing import Optional

class GetNhClothingCategoryEnum(str, Enum):
    r"""Specify the category of clothing to return."""
    TOPS = 'Tops'
    BOTTOMS = 'Bottoms'
    DRESS_UP = 'Dress-up'
    HEADWEAR = 'Headwear'
    ACCESSORIES = 'Accessories'
    SOCKS = 'Socks'
    SHOES = 'Shoes'
    BAGS = 'Bags'
    UMBRELLAS = 'Umbrellas'

class GetNhClothingColorEnum(str, Enum):
    AQUA = 'Aqua'
    BEIGE = 'Beige'
    BLACK = 'Black'
    BLUE = 'Blue'
    BROWN = 'Brown'
    COLORFUL = 'Colorful'
    GRAY = 'Gray'
    GREEN = 'Green'
    ORANGE = 'Orange'
    PINK = 'Pink'
    PURPLE = 'Purple'
    RED = 'Red'
    WHITE = 'White'
    YELLOW = 'Yellow'

class GetNhClothingLabelthemeEnum(str, Enum):
    r"""Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island."""
    COMFY = 'Comfy'
    EVERYDAY = 'Everyday'
    FAIRY_TALE = 'Fairy tale'
    FORMAL = 'Formal'
    GOTH = 'Goth'
    OUTDOORSY = 'Outdoorsy'
    PARTY = 'Party'
    SPORTY = 'Sporty'
    THEATRICAL = 'Theatrical'
    VACATION = 'Vacation'
    WORK = 'Work'

class GetNhClothingStyleEnum(str, Enum):
    ACTIVE = 'Active'
    COOL = 'Cool'
    CUTE = 'Cute'
    ELEGANT = 'Elegant'
    GORGEOUS = 'Gorgeous'
    SIMPLE = 'Simple'


@dataclasses.dataclass
class GetNhClothingRequest:
    
    accept_version: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Version', 'style': 'simple', 'explode': False }})
    r"""The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes."""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-API-KEY', 'style': 'simple', 'explode': False }})
    r"""Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API."""  
    category: Optional[GetNhClothingCategoryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""Specify the category of clothing to return."""  
    color: Optional[list[GetNhClothingColorEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'color', 'style': 'form', 'explode': True }})
    r"""Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers."""  
    excludedetails: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludedetails', 'style': 'form', 'explode': True }})
    r"""When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings."""  
    labeltheme: Optional[GetNhClothingLabelthemeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'labeltheme', 'style': 'form', 'explode': True }})
    r"""Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island."""  
    style: Optional[list[GetNhClothingStyleEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'style', 'style': 'form', 'explode': True }})
    r"""Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers."""  
    

@dataclasses.dataclass
class GetNhClothingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error401: Optional[shared_error401.Error401] = dataclasses.field(default=None)
    r"""Failed to authenticate user from `X-API-KEY`."""  
    error500: Optional[shared_error500.Error500] = dataclasses.field(default=None)
    r"""There was an error fetching the requested data."""  
    nh_clothings: Optional[list[shared_nhclothing.NHClothing]] = dataclasses.field(default=None)
    r"""A JSON array of clothing."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    