/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.
 */
export class CreateFlowRequestBodyMetadataCatalogConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "glueDataCatalog" })
  @Type(() => shared.GlueDataCatalogConfig)
  glueDataCatalog?: shared.GlueDataCatalogConfig;
}

/**
 *  Contains information about the configuration of the source connector used in the flow.
 */
export class CreateFlowRequestBodySourceFlowConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "apiVersion" })
  apiVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileName" })
  connectorProfileName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connectorType" })
  connectorType?: shared.ConnectorTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "incrementalPullConfig" })
  @Type(() => shared.IncrementalPullConfig)
  incrementalPullConfig?: shared.IncrementalPullConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceConnectorProperties" })
  @Type(() => shared.SourceConnectorProperties)
  sourceConnectorProperties?: shared.SourceConnectorProperties;
}

/**
 *  The trigger settings that determine how and when Amazon AppFlow runs the specified flow.
 */
export class CreateFlowRequestBodyTriggerConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "triggerProperties" })
  @Type(() => shared.TriggerProperties)
  triggerProperties?: shared.TriggerProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "triggerType" })
  triggerType?: shared.TriggerTypeEnum;
}

export class CreateFlowRequestBody extends SpeakeasyBase {
  /**
   *  A description of the flow you want to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   *  The configuration that controls how Amazon AppFlow places data in the destination connector.
   */
  @SpeakeasyMetadata({ elemType: shared.DestinationFlowConfig })
  @Expose({ name: "destinationFlowConfigList" })
  @Type(() => shared.DestinationFlowConfig)
  destinationFlowConfigList: shared.DestinationFlowConfig[];

  /**
   *  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flowName" })
  flowName: string;

  /**
   *  The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsArn" })
  kmsArn?: string;

  /**
   * Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadataCatalogConfig" })
  @Type(() => CreateFlowRequestBodyMetadataCatalogConfig)
  metadataCatalogConfig?: CreateFlowRequestBodyMetadataCatalogConfig;

  /**
   *  Contains information about the configuration of the source connector used in the flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceFlowConfig" })
  @Type(() => CreateFlowRequestBodySourceFlowConfig)
  sourceFlowConfig: CreateFlowRequestBodySourceFlowConfig;

  /**
   *  The tags used to organize, track, or control access for your flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   *  A list of tasks that Amazon AppFlow performs while transferring the data in the flow run.
   */
  @SpeakeasyMetadata({ elemType: shared.Task })
  @Expose({ name: "tasks" })
  @Type(() => shared.Task)
  tasks: shared.Task[];

  /**
   *  The trigger settings that determine how and when Amazon AppFlow runs the specified flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerConfig" })
  @Type(() => CreateFlowRequestBodyTriggerConfig)
  triggerConfig: CreateFlowRequestBodyTriggerConfig;
}

export class CreateFlowRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateFlowRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateFlowResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  /**
   * ConnectorAuthenticationException
   */
  @SpeakeasyMetadata()
  connectorAuthenticationException?: any;

  /**
   * ConnectorServerException
   */
  @SpeakeasyMetadata()
  connectorServerException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createFlowResponse?: shared.CreateFlowResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
