/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TextStyle - Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
 */
public class TextStyle {
    /**
     * A color that can either be fully opaque or fully transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    public OptionalColor backgroundColor;
    public TextStyle withBackgroundColor(OptionalColor backgroundColor) {
        this.backgroundColor = backgroundColor;
        return this;
    }
    
    /**
     * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baselineOffset")
    public TextStyleBaselineOffsetEnum baselineOffset;
    public TextStyle withBaselineOffset(TextStyleBaselineOffsetEnum baselineOffset) {
        this.baselineOffset = baselineOffset;
        return this;
    }
    
    /**
     * Whether or not the text is rendered as bold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bold")
    public Boolean bold;
    public TextStyle withBold(Boolean bold) {
        this.bold = bold;
        return this;
    }
    
    /**
     * The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontFamily")
    public String fontFamily;
    public TextStyle withFontFamily(String fontFamily) {
        this.fontFamily = fontFamily;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontSize")
    public Dimension fontSize;
    public TextStyle withFontSize(Dimension fontSize) {
        this.fontSize = fontSize;
        return this;
    }
    
    /**
     * A color that can either be fully opaque or fully transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foregroundColor")
    public OptionalColor foregroundColor;
    public TextStyle withForegroundColor(OptionalColor foregroundColor) {
        this.foregroundColor = foregroundColor;
        return this;
    }
    
    /**
     * Whether or not the text is italicized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("italic")
    public Boolean italic;
    public TextStyle withItalic(Boolean italic) {
        this.italic = italic;
        return this;
    }
    
    /**
     * A hypertext link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    public Link link;
    public TextStyle withLink(Link link) {
        this.link = link;
        return this;
    }
    
    /**
     * Whether or not the text is in small capital letters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smallCaps")
    public Boolean smallCaps;
    public TextStyle withSmallCaps(Boolean smallCaps) {
        this.smallCaps = smallCaps;
        return this;
    }
    
    /**
     * Whether or not the text is struck through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strikethrough")
    public Boolean strikethrough;
    public TextStyle withStrikethrough(Boolean strikethrough) {
        this.strikethrough = strikethrough;
        return this;
    }
    
    /**
     * Whether or not the text is underlined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("underline")
    public Boolean underline;
    public TextStyle withUnderline(Boolean underline) {
        this.underline = underline;
        return this;
    }
    
    /**
     * Represents a font family and weight used to style a TextRun.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weightedFontFamily")
    public WeightedFontFamily weightedFontFamily;
    public TextStyle withWeightedFontFamily(WeightedFontFamily weightedFontFamily) {
        this.weightedFontFamily = weightedFontFamily;
        return this;
    }
    
}
