<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Search 
{
	
	public const PRODUCT_SEARCH_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const PRODUCT_SEARCH_FILTEREDAND_ORDERED_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const SEARCHBYPRODUCTURL_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Search for Products
     * 
     * Retrieves general information about the products related to the term searched. 
     * This is the main search used by the store. The user can type anything to be searched.  
     * 
     * For example, if they search for a "decanter", this is the URL: `https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter`. 
     * 
     * Note that maybe the response can be HTTP 200 or 206, 206 means that it's a partial content response.
     * 
     * If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse
     */
	public function productSearch(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse
    {
        $baseUrl = Search::PRODUCT_SEARCH_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/search/{search}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearch200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for Products with Filter, Order and Pagination
     * 
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered. 
     * 
     * ## Filters  
     * 
     * - **Filter by full text** - `ft={searchWord}`  
     * E.g.: `ft=television`
     * 
     * - **Filter by category** - `fq=C:/{a}/{b}`  
     * `{a}` and `{b}` are Category IDs   
     * E.g.: `fq=C:/1000041/1000049/`
     * 
     * - **Filter by brand** - `fq=B:/{a}/{b}`  
     * `{a}` and `{b}` are Brand IDs
     * E.g.: `fq=B:/189385/189387/`
     * 
     * - **Filter by specification** - `fq=specificationFilter_{a}:{b}`  
     * `{a}` is the specification ID
     * `{b}` is the specification value
     * E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: `fq=specificationFilter_123:Blue`
     * 
     * - **Filter by price range** - `fq=P:[{a} TO {b}]`  
     * `{a}`  is the minimum price "from"
     * `{b}` is the highest price "to"  
     * E.g.: `fq=P:[0 TO 20]` will search products between 0.00 and 20.00.  
     * 
     * - **Filter by collection** - `fq=productClusterIds:{{productClusterId}}` 
     * `productClusterId` is the same as `collectionId`  
     * For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).
     * 
     * - **Filter by product ID** - `fq=productId:{{productId}}`
     * 
     * - **Filter by SKU ID** - `fq=skuId:{{skuId}}`
     * 
     * - **Filter by referenceId** - `fq=alternateIds_RefId:{{referenceId}}`
     * 
     * - **Filter by EAN13** - `fq=alternateIds_Ean:{{ean13}}`
     * 
     * - **Filter by availability at a specific sales channel** - `fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`  
     * `{{sc}}` is the desired sales channel  
     * `{{bool}}` is true ou false, 1 or 0.  
     * E.g.: seaching available products for the sales channel 4 would be `fq=isAvailablePerSalesChannel_4:1`
     * 
     * - **Filter by available at a specific seller** - `fq=sellerId:{{sellerId}}`
     * The search does not include White Label Sellers.
     * 
     * ## Pagination
     * 
     * - **Initial item number** - `_from={{first}}`
     * - **Final item number** - `_to={{last}}`
     * 
     * >⚠️ This endpoint returns a maximum of 50 items per response, so the difference between `_from` and `_to` should not exceed this number. The result order is descending, from the highest product ID to the lowest.
     * 
     * ## Sorting
     * 
     * - **Price**  
     * `O=OrderByPriceDESC`  
     * `O=OrderByPriceASC`
     * 
     * - **Top Selling Products**  
     * `O=OrderByTopSaleDESC`
     * 
     * - **Best Reviews**  
     * `O=OrderByReviewRateDESC`
     * 
     * - **Name**  
     * `O=OrderByNameASC`  
     * `O=OrderByNameDESC`
     * 
     * - **Release Date**  
     * `O=OrderByReleaseDateDESC`
     * 
     * - **Best Discounts**  
     * `O=OrderByBestDiscountDESC`
     * 
     * - **Score**  
     * `O=OrderByScoreDESC`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedResponse
     */
	public function productSearchFilteredandOrdered(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedResponse
    {
        $baseUrl = Search::PRODUCT_SEARCH_FILTEREDAND_ORDERED_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrderedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearchFilteredandOrdered200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearchFilteredandOrdered200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search Product by Product URL
     * 
     * Retrieves general information about the product of the URL you searched for.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlResponse
     */
	public function searchbyproducturl(
        \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlResponse
    {
        $baseUrl = Search::SEARCHBYPRODUCTURL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/search/{product-text-link}/p', \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchbyproducturlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchbyproducturl200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\Searchbyproducturl200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
}