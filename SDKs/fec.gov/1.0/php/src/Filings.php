<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Filings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * All official records and reports filed by or delivered to the FEC.
     * 
     * Note: because the filings data includes many records, counts for large
     * result sets are approximate; you will want to page through the records until no records are returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsResponse
     */
	public function getCandidateCandidateIdFilings(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/filings/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdFilingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filingsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilingsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * All official records and reports filed by or delivered to the FEC.
     * 
     * Note: because the filings data includes many records, counts for large
     * result sets are approximate; you will want to page through the records until no records are returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsResponse
     */
	public function getCommitteeCommitteeIdFilings(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/filings/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdFilingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filingsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilingsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * All official records and reports filed by or delivered to the FEC.
     * 
     * Note: because the filings data includes many records, counts for large
     * result sets are approximate; you will want to page through the records until no records are returned.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilingsResponse
     */
	public function getFilings(
        \OpenAPI\OpenAPI\Models\Operations\GetFilingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/filings/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFilingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filingsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilingsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * The Operations log contains details of each report loaded into the database. It is primarily
     * used as status check to determine when all of the data processes, from initial entry through
     * review are complete.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOperationsLogRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOperationsLogResponse
     */
	public function getOperationsLog(
        \OpenAPI\OpenAPI\Models\Operations\GetOperationsLogRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOperationsLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/operations-log/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOperationsLogRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOperationsLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationsLogPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationsLogPage', 'json');
            }
        }

        return $response;
    }
}