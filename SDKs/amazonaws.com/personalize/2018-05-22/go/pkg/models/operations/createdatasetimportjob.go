// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDatasetImportJobXAmzTargetEnum
type CreateDatasetImportJobXAmzTargetEnum string

const (
	CreateDatasetImportJobXAmzTargetEnumAmazonPersonalizeCreateDatasetImportJob CreateDatasetImportJobXAmzTargetEnum = "AmazonPersonalize.CreateDatasetImportJob"
)

func (e CreateDatasetImportJobXAmzTargetEnum) ToPointer() *CreateDatasetImportJobXAmzTargetEnum {
	return &e
}

func (e *CreateDatasetImportJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonPersonalize.CreateDatasetImportJob":
		*e = CreateDatasetImportJobXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDatasetImportJobXAmzTargetEnum: %v", v)
	}
}

type CreateDatasetImportJobRequest struct {
	CreateDatasetImportJobRequest shared.CreateDatasetImportJobRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    CreateDatasetImportJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateDatasetImportJobResponse struct {
	ContentType string
	// Success
	CreateDatasetImportJobResponse *shared.CreateDatasetImportJobResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
