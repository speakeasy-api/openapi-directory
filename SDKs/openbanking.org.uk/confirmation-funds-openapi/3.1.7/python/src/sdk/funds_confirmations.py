"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FundsConfirmations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_funds_confirmation_consents(self, request: operations.CreateFundsConfirmationConsentsRequest, security: operations.CreateFundsConfirmationConsentsSecurity) -> operations.CreateFundsConfirmationConsentsResponse:
        r"""Create Funds Confirmation Consent"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/funds-confirmation-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_funds_confirmation_consent1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFundsConfirmationConsentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBFundsConfirmationConsentResponse1])
                res.ob_funds_confirmation_consent_response1 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_funds_confirmations(self, request: operations.CreateFundsConfirmationsRequest, security: operations.CreateFundsConfirmationsSecurity) -> operations.CreateFundsConfirmationsResponse:
        r"""Create Funds Confirmation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/funds-confirmations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_funds_confirmation1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFundsConfirmationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBFundsConfirmationResponse1])
                res.ob_funds_confirmation_response1 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def delete_funds_confirmation_consents_consent_id(self, request: operations.DeleteFundsConfirmationConsentsConsentIDRequest, security: operations.DeleteFundsConfirmationConsentsConsentIDSecurity) -> operations.DeleteFundsConfirmationConsentsConsentIDResponse:
        r"""Delete Funds Confirmation Consent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFundsConfirmationConsentsConsentIDRequest, base_url, '/funds-confirmation-consents/{ConsentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFundsConfirmationConsentsConsentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 405, 406]:
            pass
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_funds_confirmation_consents_consent_id(self, request: operations.GetFundsConfirmationConsentsConsentIDRequest, security: operations.GetFundsConfirmationConsentsConsentIDSecurity) -> operations.GetFundsConfirmationConsentsConsentIDResponse:
        r"""Get Funds Confirmation Consent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFundsConfirmationConsentsConsentIDRequest, base_url, '/funds-confirmation-consents/{ConsentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFundsConfirmationConsentsConsentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBFundsConfirmationConsentResponse1])
                res.ob_funds_confirmation_consent_response1 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    