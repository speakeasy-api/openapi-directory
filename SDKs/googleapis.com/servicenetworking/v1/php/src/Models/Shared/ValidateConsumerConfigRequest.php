<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ValidateConsumerConfigRequest
{
    /**
     * Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.
     * 
     * @var ?bool $checkServiceNetworkingUsePermission
     */
	#[\JMS\Serializer\Annotation\SerializedName('checkServiceNetworkingUsePermission')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $checkServiceNetworkingUsePermission = null;
    
    /**
     * Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
     * 
     * @var ?string $consumerNetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('consumerNetwork')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $consumerNetwork = null;
    
    /**
     * Represents a consumer project.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ConsumerProject $consumerProject
     */
	#[\JMS\Serializer\Annotation\SerializedName('consumerProject')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ConsumerProject')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConsumerProject $consumerProject = null;
    
    /**
     * Represents a range reservation.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RangeReservation $rangeReservation
     */
	#[\JMS\Serializer\Annotation\SerializedName('rangeReservation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RangeReservation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RangeReservation $rangeReservation = null;
    
    /**
     * The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.
     * 
     * @var ?bool $validateNetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('validateNetwork')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $validateNetwork = null;
    
	public function __construct()
	{
		$this->checkServiceNetworkingUsePermission = null;
		$this->consumerNetwork = null;
		$this->consumerProject = null;
		$this->rangeReservation = null;
		$this->validateNetwork = null;
	}
}
