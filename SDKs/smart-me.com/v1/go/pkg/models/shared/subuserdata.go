// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SubUserDataPermissionLevelEnum - The permission level of the user
type SubUserDataPermissionLevelEnum string

const (
	SubUserDataPermissionLevelEnumSelectedFolderAndSubfoldersMeters SubUserDataPermissionLevelEnum = "SelectedFolderAndSubfoldersMeters"
	SubUserDataPermissionLevelEnumSelectedFolderOnly                SubUserDataPermissionLevelEnum = "SelectedFolderOnly"
)

func (e *SubUserDataPermissionLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SelectedFolderAndSubfoldersMeters":
		fallthrough
	case "SelectedFolderOnly":
		*e = SubUserDataPermissionLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubUserDataPermissionLevelEnum: %s", s)
	}
}

// SubUserData - Container data for the sub user
type SubUserData struct {
	// The end date. until this date the user has access
	AccessEndDate *time.Time `json:"AccessEndDate,omitempty" form:"name=AccessEndDate"`
	// The start date. From this date the user has access
	AccessTimeStartDate *time.Time `json:"AccessTimeStartDate,omitempty" form:"name=AccessTimeStartDate"`
	// The Email adress
	Email *string `json:"Email,omitempty" form:"name=Email"`
	// The ID of the user
	ID *string `json:"Id,omitempty" form:"name=Id"`
	// If set this is used a new password
	NewPassword *string `json:"NewPassword,omitempty" form:"name=NewPassword"`
	// The permission level of the user
	PermissionLevel *SubUserDataPermissionLevelEnum `json:"PermissionLevel,omitempty" form:"name=PermissionLevel"`
	// The username
	Username *string `json:"Username,omitempty" form:"name=Username"`
}
