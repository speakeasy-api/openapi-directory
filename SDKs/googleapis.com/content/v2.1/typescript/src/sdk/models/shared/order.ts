/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OrderAddress } from "./orderaddress";
import { OrderCustomer } from "./ordercustomer";
import { OrderDeliveryDetails } from "./orderdeliverydetails";
import { OrderLineItem } from "./orderlineitem";
import { OrderOrderAnnotation } from "./orderorderannotation";
import { OrderPickupDetails } from "./orderpickupdetails";
import { OrderPromotion } from "./orderpromotion";
import { OrderRefund } from "./orderrefund";
import { OrderShipment } from "./ordershipment";
import { Price } from "./price";
import { Expose, Type } from "class-transformer";

/**
 * Order. Production access (all methods) requires the order manager role. Sandbox access does not.
 */
export class Order extends SpeakeasyBase {
  /**
   * Whether the order was acknowledged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "acknowledged" })
  acknowledged?: boolean;

  /**
   * List of key-value pairs that are attached to a given order.
   */
  @SpeakeasyMetadata({ elemType: OrderOrderAnnotation })
  @Expose({ name: "annotations" })
  @Type(() => OrderOrderAnnotation)
  annotations?: OrderOrderAnnotation[];

  @SpeakeasyMetadata()
  @Expose({ name: "billingAddress" })
  @Type(() => OrderAddress)
  billingAddress?: OrderAddress;

  @SpeakeasyMetadata()
  @Expose({ name: "customer" })
  @Type(() => OrderCustomer)
  customer?: OrderCustomer;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveryDetails" })
  @Type(() => OrderDeliveryDetails)
  deliveryDetails?: OrderDeliveryDetails;

  /**
   * The REST ID of the order. Globally unique.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "`content#order`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Line items that are ordered.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItem })
  @Expose({ name: "lineItems" })
  @Type(() => OrderLineItem)
  lineItems?: OrderLineItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "merchantId" })
  merchantId?: string;

  /**
   * Merchant-provided ID of the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantOrderId" })
  merchantOrderId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "netPriceAmount" })
  @Type(() => Price)
  netPriceAmount?: Price;

  @SpeakeasyMetadata()
  @Expose({ name: "netTaxAmount" })
  @Type(() => Price)
  netTaxAmount?: Price;

  /**
   * The status of the payment. Acceptable values are: - "`paymentCaptured`" - "`paymentRejected`" - "`paymentSecured`" - "`pendingAuthorization`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentStatus" })
  paymentStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pickupDetails" })
  @Type(() => OrderPickupDetails)
  pickupDetails?: OrderPickupDetails;

  /**
   * The date when the order was placed, in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placedDate" })
  placedDate?: string;

  /**
   * Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
   */
  @SpeakeasyMetadata({ elemType: OrderPromotion })
  @Expose({ name: "promotions" })
  @Type(() => OrderPromotion)
  promotions?: OrderPromotion[];

  /**
   * Refunds for the order.
   */
  @SpeakeasyMetadata({ elemType: OrderRefund })
  @Expose({ name: "refunds" })
  @Type(() => OrderRefund)
  refunds?: OrderRefund[];

  /**
   * Shipments of the order.
   */
  @SpeakeasyMetadata({ elemType: OrderShipment })
  @Expose({ name: "shipments" })
  @Type(() => OrderShipment)
  shipments?: OrderShipment[];

  @SpeakeasyMetadata()
  @Expose({ name: "shippingCost" })
  @Type(() => Price)
  shippingCost?: Price;

  @SpeakeasyMetadata()
  @Expose({ name: "shippingCostTax" })
  @Type(() => Price)
  shippingCostTax?: Price;

  /**
   * The status of the order. Acceptable values are: - "`canceled`" - "`delivered`" - "`inProgress`" - "`partiallyDelivered`" - "`partiallyReturned`" - "`partiallyShipped`" - "`pendingShipment`" - "`returned`" - "`shipped`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * The party responsible for collecting and remitting taxes. Acceptable values are: - "`marketplaceFacilitator`" - "`merchant`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxCollector" })
  taxCollector?: string;
}
