// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecurringPerUnitPricingOverrideListPriceBaseEnum - Specifies the duration of each recurring period.
type RecurringPerUnitPricingOverrideListPriceBaseEnum string

const (
	RecurringPerUnitPricingOverrideListPriceBaseEnumPerBillingPeriod RecurringPerUnitPricingOverrideListPriceBaseEnum = "Per_Billing_Period"
	RecurringPerUnitPricingOverrideListPriceBaseEnumPerMonth         RecurringPerUnitPricingOverrideListPriceBaseEnum = "Per_Month"
	RecurringPerUnitPricingOverrideListPriceBaseEnumPerWeek          RecurringPerUnitPricingOverrideListPriceBaseEnum = "Per_Week"
)

func (e *RecurringPerUnitPricingOverrideListPriceBaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Per_Billing_Period":
		fallthrough
	case "Per_Month":
		fallthrough
	case "Per_Week":
		*e = RecurringPerUnitPricingOverrideListPriceBaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringPerUnitPricingOverrideListPriceBaseEnum: %s", s)
	}
}

// RecurringPerUnitPricingOverridePriceChangeOptionEnum - Specifies how Zuora changes the price of the charge each time the subscription renews.
//
// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
type RecurringPerUnitPricingOverridePriceChangeOptionEnum string

const (
	RecurringPerUnitPricingOverridePriceChangeOptionEnumNoChange                       RecurringPerUnitPricingOverridePriceChangeOptionEnum = "NoChange"
	RecurringPerUnitPricingOverridePriceChangeOptionEnumSpecificPercentageValue        RecurringPerUnitPricingOverridePriceChangeOptionEnum = "SpecificPercentageValue"
	RecurringPerUnitPricingOverridePriceChangeOptionEnumUseLatestProductCatalogPricing RecurringPerUnitPricingOverridePriceChangeOptionEnum = "UseLatestProductCatalogPricing"
)

func (e *RecurringPerUnitPricingOverridePriceChangeOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoChange":
		fallthrough
	case "SpecificPercentageValue":
		fallthrough
	case "UseLatestProductCatalogPricing":
		*e = RecurringPerUnitPricingOverridePriceChangeOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringPerUnitPricingOverridePriceChangeOptionEnum: %s", s)
	}
}

// RecurringPerUnitPricingOverride - Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
type RecurringPerUnitPricingOverride struct {
	// Per-unit price of the charge in each recurring period.
	//
	ListPrice *float64 `json:"listPrice,omitempty"`
	// Specifies the duration of each recurring period.
	//
	ListPriceBase *RecurringPerUnitPricingOverrideListPriceBaseEnum `json:"listPriceBase,omitempty"`
	// Specifies how Zuora changes the price of the charge each time the subscription renews.
	//
	// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
	//
	PriceChangeOption *RecurringPerUnitPricingOverridePriceChangeOptionEnum `json:"priceChangeOption,omitempty"`
	// Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
	//
	PriceIncreasePercentage *float64 `json:"priceIncreasePercentage,omitempty"`
	// Number of units purchased.
	//
	Quantity *float64 `json:"quantity,omitempty"`
}
