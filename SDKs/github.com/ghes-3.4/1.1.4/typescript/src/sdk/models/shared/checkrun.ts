/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DeploymentSimple } from "./deploymentsimple";
import { NullableIntegration } from "./nullableintegration";
import { PullRequestMinimal } from "./pullrequestminimal";
import { Expose, Transform, Type } from "class-transformer";

export class CheckRunCheckSuite extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

export enum CheckRunConclusionEnum {
  Success = "success",
  Failure = "failure",
  Neutral = "neutral",
  Cancelled = "cancelled",
  Skipped = "skipped",
  TimedOut = "timed_out",
  ActionRequired = "action_required",
}

export class CheckRunOutput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "annotations_count" })
  annotationsCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "annotations_url" })
  annotationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary: string;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

/**
 * The phase of the lifecycle that the check is currently in.
 */
export enum CheckRunStatusEnum {
  Queued = "queued",
  InProgress = "in_progress",
  Completed = "completed",
}

/**
 * A check performed on the code of a given code change
 */
export class CheckRun extends SpeakeasyBase {
  /**
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app" })
  @Type(() => NullableIntegration)
  app: NullableIntegration;

  @SpeakeasyMetadata()
  @Expose({ name: "check_suite" })
  @Type(() => CheckRunCheckSuite)
  checkSuite: CheckRunCheckSuite;

  @SpeakeasyMetadata()
  @Expose({ name: "completed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "conclusion" })
  conclusion: CheckRunConclusionEnum;

  /**
   * A deployment created as the result of an Actions check run from a workflow that references an environment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deployment" })
  @Type(() => DeploymentSimple)
  deployment?: DeploymentSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "details_url" })
  detailsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "external_id" })
  externalId: string;

  /**
   * The SHA of the commit that is being checked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "head_sha" })
  headSha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * The id of the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The name of the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "output" })
  @Type(() => CheckRunOutput)
  output: CheckRunOutput;

  @SpeakeasyMetadata({ elemType: PullRequestMinimal })
  @Expose({ name: "pull_requests" })
  @Type(() => PullRequestMinimal)
  pullRequests: PullRequestMinimal[];

  @SpeakeasyMetadata()
  @Expose({ name: "started_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt: Date;

  /**
   * The phase of the lifecycle that the check is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: CheckRunStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
