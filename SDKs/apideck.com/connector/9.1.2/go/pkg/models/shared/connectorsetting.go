// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectorSettingTypeEnum string

const (
	ConnectorSettingTypeEnumText           ConnectorSettingTypeEnum = "text"
	ConnectorSettingTypeEnumCheckbox       ConnectorSettingTypeEnum = "checkbox"
	ConnectorSettingTypeEnumTel            ConnectorSettingTypeEnum = "tel"
	ConnectorSettingTypeEnumEmail          ConnectorSettingTypeEnum = "email"
	ConnectorSettingTypeEnumURL            ConnectorSettingTypeEnum = "url"
	ConnectorSettingTypeEnumTextarea       ConnectorSettingTypeEnum = "textarea"
	ConnectorSettingTypeEnumSelect         ConnectorSettingTypeEnum = "select"
	ConnectorSettingTypeEnumFilteredSelect ConnectorSettingTypeEnum = "filtered-select"
	ConnectorSettingTypeEnumMultiSelect    ConnectorSettingTypeEnum = "multi-select"
	ConnectorSettingTypeEnumDatetime       ConnectorSettingTypeEnum = "datetime"
	ConnectorSettingTypeEnumDate           ConnectorSettingTypeEnum = "date"
	ConnectorSettingTypeEnumTime           ConnectorSettingTypeEnum = "time"
	ConnectorSettingTypeEnumNumber         ConnectorSettingTypeEnum = "number"
	ConnectorSettingTypeEnumPassword       ConnectorSettingTypeEnum = "password"
)

func (e *ConnectorSettingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "text":
		fallthrough
	case "checkbox":
		fallthrough
	case "tel":
		fallthrough
	case "email":
		fallthrough
	case "url":
		fallthrough
	case "textarea":
		fallthrough
	case "select":
		fallthrough
	case "filtered-select":
		fallthrough
	case "multi-select":
		fallthrough
	case "datetime":
		fallthrough
	case "date":
		fallthrough
	case "time":
		fallthrough
	case "number":
		fallthrough
	case "password":
		*e = ConnectorSettingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorSettingTypeEnum: %s", s)
	}
}

type ConnectorSetting struct {
	ID    *string                   `json:"id,omitempty"`
	Label *string                   `json:"label,omitempty"`
	Type  *ConnectorSettingTypeEnum `json:"type,omitempty"`
}
