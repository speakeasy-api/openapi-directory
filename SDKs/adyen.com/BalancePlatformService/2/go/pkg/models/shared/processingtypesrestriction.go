// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProcessingTypesRestrictionValueEnum string

const (
	ProcessingTypesRestrictionValueEnumAtmWithdraw    ProcessingTypesRestrictionValueEnum = "atmWithdraw"
	ProcessingTypesRestrictionValueEnumBalanceInquiry ProcessingTypesRestrictionValueEnum = "balanceInquiry"
	ProcessingTypesRestrictionValueEnumEcommerce      ProcessingTypesRestrictionValueEnum = "ecommerce"
	ProcessingTypesRestrictionValueEnumMoto           ProcessingTypesRestrictionValueEnum = "moto"
	ProcessingTypesRestrictionValueEnumPos            ProcessingTypesRestrictionValueEnum = "pos"
	ProcessingTypesRestrictionValueEnumRecurring      ProcessingTypesRestrictionValueEnum = "recurring"
	ProcessingTypesRestrictionValueEnumToken          ProcessingTypesRestrictionValueEnum = "token"
	ProcessingTypesRestrictionValueEnumUnknown        ProcessingTypesRestrictionValueEnum = "unknown"
)

func (e *ProcessingTypesRestrictionValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "atmWithdraw":
		fallthrough
	case "balanceInquiry":
		fallthrough
	case "ecommerce":
		fallthrough
	case "moto":
		fallthrough
	case "pos":
		fallthrough
	case "recurring":
		fallthrough
	case "token":
		fallthrough
	case "unknown":
		*e = ProcessingTypesRestrictionValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProcessingTypesRestrictionValueEnum: %s", s)
	}
}

type ProcessingTypesRestriction struct {
	// Defines how the condition must be evaluated.
	Operation string `json:"operation"`
	// List of processing types.
	//
	// Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **recurring**, **token**.
	//
	//
	Value []ProcessingTypesRestrictionValueEnum `json:"value,omitempty"`
}
