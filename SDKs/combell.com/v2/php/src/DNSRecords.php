<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DNSRecords 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a record
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdResponse
     */
	public function deleteDnsDomainNameRecordsRecordId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/{domainName}/records/{recordId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDnsDomainNameRecordsRecordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsResponse
     */
	public function getDnsDomainNameRecords(
        \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/{domainName}/records', \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dnsRecords = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DnsRecord>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get specific record
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdResponse
     */
	public function getDnsDomainNameRecordsRecordId(
        \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/{domainName}/records/{recordId}', \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDnsDomainNameRecordsRecordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dnsRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DnsRecord', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a record
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsResponse
     */
	public function postDnsDomainNameRecords(
        \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/{domainName}/records', \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dnsRecord", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDnsDomainNameRecordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Edit a record
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdResponse
     */
	public function putDnsDomainNameRecordsRecordId(
        \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/{domainName}/records/{recordId}', \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dnsRecord", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutDnsDomainNameRecordsRecordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}