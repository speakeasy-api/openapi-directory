<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PUTPublicNotificationDefinitionRequest - The request body of the notification definition to be updated.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PUTPublicNotificationDefinitionRequest
{
    /**
     * The status of the notification definition. The default value is true.
     * 
     * @var ?bool $active
     */
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $active = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('callout')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PUTPublicNotificationDefinitionRequestCallout')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicNotificationDefinitionRequestCallout $callout = null;
    
    /**
     * The status of the callout action. The default value is false.
     * 
     * @var ?bool $calloutActive
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutActive')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $calloutActive = null;
    
    /**
     * The profile that notification definition belongs to. If you want to
     * 
     * update the notification to a system notification, you should pass
     * 'SystemNotification'. '
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, comunicationProfileId can be 'SystemNotification'/Empty/UUID. 
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not  associated to Account, comunicationProfileId can be 'SystemNotification'/Empty. 
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, comunicationProfileId can be 'SystemNotification'/Empty.
     * 
     * 
     * @var ?string $communicationProfileId
     */
	#[\JMS\Serializer\Annotation\SerializedName('communicationProfileId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $communicationProfileId = null;
    
    /**
     * The description of the notification definition.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The status of the email action. The default is false.
     * 
     * @var ?bool $emailActive
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailActive')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailActive = null;
    
    /**
     * The ID of the email template. If emailActive is updated from
     * 
     * false to true, an email template is required, and the EventType of
     * the email template MUST be the same as the EventType of the notification definition.
     * 
     * 
     * @var ?string $emailTemplateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailTemplateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailTemplateId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('filterRule')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PUTPublicNotificationDefinitionRequestFilterRule')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicNotificationDefinitionRequestFilterRule $filterRule = null;
    
    /**
     * The parameter values used to configure the filter rule.
     * 
     * 
     * 
     * @var ?array<string, string> $filterRuleParams
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterRuleParams')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterRuleParams = null;
    
    /**
     * The name of the notification definition, which is unique in the profile.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	public function __construct()
	{
		$this->active = null;
		$this->callout = null;
		$this->calloutActive = null;
		$this->communicationProfileId = null;
		$this->description = null;
		$this->emailActive = null;
		$this->emailTemplateId = null;
		$this->filterRule = null;
		$this->filterRuleParams = null;
		$this->name = null;
	}
}
