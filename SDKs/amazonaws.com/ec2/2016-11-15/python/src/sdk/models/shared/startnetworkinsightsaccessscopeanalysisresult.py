"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from enum import Enum
from typing import Optional

class StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum(str, Enum):
    r"""Indicates whether there are findings."""
    TRUE = 'true'
    FALSE = 'false'
    UNKNOWN = 'unknown'

class StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum(str, Enum):
    r"""The status."""
    RUNNING = 'running'
    SUCCEEDED = 'succeeded'
    FAILED = 'failed'


@dataclasses.dataclass
class StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysis:
    r"""The Network Access Scope analysis."""
    
    analyzed_eni_count: Optional[int] = dataclasses.field(default=None)  
    end_date: Optional[datetime] = dataclasses.field(default=None)  
    findings_found: Optional[StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum] = dataclasses.field(default=None)  
    network_insights_access_scope_analysis_arn: Optional[str] = dataclasses.field(default=None)  
    network_insights_access_scope_analysis_id: Optional[str] = dataclasses.field(default=None)  
    network_insights_access_scope_id: Optional[str] = dataclasses.field(default=None)  
    start_date: Optional[datetime] = dataclasses.field(default=None)  
    status: Optional[StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum] = dataclasses.field(default=None)  
    status_message: Optional[str] = dataclasses.field(default=None)  
    tags: Optional[list[StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisTags]] = dataclasses.field(default=None)  
    warning_message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class StartNetworkInsightsAccessScopeAnalysisResult:
    r"""Success"""
    
    network_insights_access_scope_analysis: Optional[StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysis] = dataclasses.field(default=None)  
    