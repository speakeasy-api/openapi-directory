"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyPrivateDNSNameOptionsActionEnum(str, Enum):
    MODIFY_PRIVATE_DNS_NAME_OPTIONS = 'ModifyPrivateDnsNameOptions'

class GETModifyPrivateDNSNameOptionsPrivateDNSHostnameTypeEnum(str, Enum):
    r"""The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID."""
    IP_NAME = 'ip-name'
    RESOURCE_NAME = 'resource-name'

class GETModifyPrivateDNSNameOptionsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyPrivateDNSNameOptionsRequest:
    
    action: GETModifyPrivateDNSNameOptionsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    instance_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'InstanceId', 'style': 'form', 'explode': True }})
    r"""The ID of the instance."""  
    version: GETModifyPrivateDNSNameOptionsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    enable_resource_name_dns_aaaa_record: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableResourceNameDnsAAAARecord', 'style': 'form', 'explode': True }})
    r"""Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records."""  
    enable_resource_name_dns_a_record: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableResourceNameDnsARecord', 'style': 'form', 'explode': True }})
    r"""Indicates whether to respond to DNS queries for instance hostnames with DNS A records."""  
    private_dns_hostname_type: Optional[GETModifyPrivateDNSNameOptionsPrivateDNSHostnameTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PrivateDnsHostnameType', 'style': 'form', 'explode': True }})
    r"""The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyPrivateDNSNameOptionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    