"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import labelcounters as shared_labelcounters
from ..shared import labelingjobinputconfig as shared_labelingjobinputconfig
from ..shared import labelingjoboutput as shared_labelingjoboutput
from ..shared import labelingjobstatus_enum as shared_labelingjobstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabelingJobSummary:
    r"""Provides summary information about a labeling job."""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    label_counters: shared_labelcounters.LabelCounters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelCounters') }})  
    labeling_job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobArn') }})  
    labeling_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobName') }})  
    labeling_job_status: shared_labelingjobstatus_enum.LabelingJobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobStatus') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    pre_human_task_lambda_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreHumanTaskLambdaArn') }})  
    workteam_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkteamArn') }})  
    annotation_consolidation_lambda_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnotationConsolidationLambdaArn'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    input_config: Optional[shared_labelingjobinputconfig.LabelingJobInputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig'), 'exclude': lambda f: f is None }})  
    labeling_job_output: Optional[shared_labelingjoboutput.LabelingJobOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobOutput'), 'exclude': lambda f: f is None }})  
    