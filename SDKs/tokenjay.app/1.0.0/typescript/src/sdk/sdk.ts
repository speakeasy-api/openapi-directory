/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AgeUsd } from "./ageusd";
import { BabelFeeController } from "./babelfeecontroller";
import { BabelFeeNewOfferController } from "./babelfeenewoffercontroller";
import { BoxConsolidationController } from "./boxconsolidationcontroller";
import { PaymentPortal } from "./paymentportal";
import { PeerDetection } from "./peerdetection";
import { TokenBurnController } from "./tokenburncontroller";
import { TokenPrices } from "./tokenprices";
import { TokenVerification } from "./tokenverification";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.tokenjay.app/"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Please see usage policies on tokenjay.app
 */
export class SDK {
  public ageUsd: AgeUsd;
  public babelFeeController: BabelFeeController;
  public babelFeeNewOfferController: BabelFeeNewOfferController;
  public boxConsolidationController: BoxConsolidationController;
  /**
   * ErgoPay payment portal
   */
  public paymentPortal: PaymentPortal;
  /**
   * Detecting nodes to use for submitting transactions
   */
  public peerDetection: PeerDetection;
  public tokenBurnController: TokenBurnController;
  public tokenPrices: TokenPrices;
  /**
   * Ergo Platform Genuine Tokens Verification
   *
   * @see {@link https://github.com/ergoplatform/eips/blob/master/eip-0021.md} - EIP-21
   */
  public tokenVerification: TokenVerification;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.ageUsd = new AgeUsd(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.babelFeeController = new BabelFeeController(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.babelFeeNewOfferController = new BabelFeeNewOfferController(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.boxConsolidationController = new BoxConsolidationController(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.paymentPortal = new PaymentPortal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.peerDetection = new PeerDetection(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tokenBurnController = new TokenBurnController(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tokenPrices = new TokenPrices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tokenVerification = new TokenVerification(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
