// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum - The file format name extension used to represent the geomark download.
type GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum string

const (
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumJSON    GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "json"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumXML     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "xml"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumKml     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "kml"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumKmz     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "kmz"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumShp     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "shp"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumShpz    GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "shpz"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumGeojson GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "geojson"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumGml     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "gml"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumGpkg    GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "gpkg"
	GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnumWkt     GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum = "wkt"
)

func (e *GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "kmz":
		fallthrough
	case "shp":
		fallthrough
	case "shpz":
		fallthrough
	case "geojson":
		fallthrough
	case "gml":
		fallthrough
	case "gpkg":
		fallthrough
	case "wkt":
		*e = GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum: %s", s)
	}
}

// GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum - The srid of the coordinate system the geometry should be converted to.
type GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum string

const (
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumFourThousandThreeHundredAndTwentySix   GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "4326"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumThreeThousandAndFive                   GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "3005"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumThreeThousandEightHundredAndFiftySeven GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "3857"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumTwentySixThousandNineHundredAndSeven   GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "26907"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEight   GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "26908"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumTwentySixThousandNineHundredAndNine    GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "26909"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumTwentySixThousandNineHundredAndTen     GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "26910"
	GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEleven  GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum = "26911"
)

func (e *GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDPartsFileFormatExtensionRequest struct {
	// The file format name extension used to represent the geomark download.
	FileFormatExtension GetGeomarksGeomarkIDPartsFileFormatExtensionFileFormatExtensionEnum `pathParam:"style=simple,explode=false,name=fileFormatExtension"`
	// The unique identifier for the geomark
	GeomarkID string `pathParam:"style=simple,explode=false,name=geomarkId"`
	// The srid of the coordinate system the geometry should be converted to.
	Srid *GetGeomarksGeomarkIDPartsFileFormatExtensionSridEnum `queryParam:"style=form,explode=true,name=srid"`
}

type GetGeomarksGeomarkIDPartsFileFormatExtensionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
