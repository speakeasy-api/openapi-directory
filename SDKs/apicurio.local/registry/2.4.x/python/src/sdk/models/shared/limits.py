"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Limits:
    r"""List of limitations on used resources, that are applied on the current instance of Registry.
    Keys represent the resource type and are suffixed by the corresponding unit.
    Values are integers. Only non-negative values are allowed, with the exception of -1, which means that the limit is not applied.
    """
    
    max_artifact_description_length_chars: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxArtifactDescriptionLengthChars'), 'exclude': lambda f: f is None }})  
    max_artifact_labels_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxArtifactLabelsCount'), 'exclude': lambda f: f is None }})  
    max_artifact_name_length_chars: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxArtifactNameLengthChars'), 'exclude': lambda f: f is None }})  
    max_artifact_properties_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxArtifactPropertiesCount'), 'exclude': lambda f: f is None }})  
    max_artifacts_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxArtifactsCount'), 'exclude': lambda f: f is None }})  
    max_label_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxLabelSizeBytes'), 'exclude': lambda f: f is None }})  
    max_property_key_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPropertyKeySizeBytes'), 'exclude': lambda f: f is None }})  
    max_property_value_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPropertyValueSizeBytes'), 'exclude': lambda f: f is None }})  
    max_requests_per_second_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRequestsPerSecondCount'), 'exclude': lambda f: f is None }})  
    max_schema_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSchemaSizeBytes'), 'exclude': lambda f: f is None }})  
    max_total_schemas_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTotalSchemasCount'), 'exclude': lambda f: f is None }})  
    max_versions_per_artifact_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxVersionsPerArtifactCount'), 'exclude': lambda f: f is None }})  
    