/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AudioConfig - Description of audio data to be synthesized.
 */
public class AudioConfig {
    /**
     * Required. The format of the audio byte stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioEncoding")
    public AudioConfigAudioEncodingEnum audioEncoding;

    public AudioConfig withAudioEncoding(AudioConfigAudioEncodingEnum audioEncoding) {
        this.audioEncoding = audioEncoding;
        return this;
    }
    
    /**
     * Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectsProfileId")
    public String[] effectsProfileId;

    public AudioConfig withEffectsProfileId(String[] effectsProfileId) {
        this.effectsProfileId = effectsProfileId;
        return this;
    }
    
    /**
     * Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pitch")
    public Double pitch;

    public AudioConfig withPitch(Double pitch) {
        this.pitch = pitch;
        return this;
    }
    
    /**
     * Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sampleRateHertz")
    public Integer sampleRateHertz;

    public AudioConfig withSampleRateHertz(Integer sampleRateHertz) {
        this.sampleRateHertz = sampleRateHertz;
        return this;
    }
    
    /**
     * Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values &lt; 0.25 or &gt; 4.0 will return an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speakingRate")
    public Double speakingRate;

    public AudioConfig withSpeakingRate(Double speakingRate) {
        this.speakingRate = speakingRate;
        return this;
    }
    
    /**
     * Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeGainDb")
    public Double volumeGainDb;

    public AudioConfig withVolumeGainDb(Double volumeGainDb) {
        this.volumeGainDb = volumeGainDb;
        return this;
    }
    
    public AudioConfig(){}
}
