// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SasPortalDeviceConfigCategoryEnum - FCC category of the device.
type SasPortalDeviceConfigCategoryEnum string

const (
	SasPortalDeviceConfigCategoryEnumDeviceCategoryUnspecified SasPortalDeviceConfigCategoryEnum = "DEVICE_CATEGORY_UNSPECIFIED"
	SasPortalDeviceConfigCategoryEnumDeviceCategoryA           SasPortalDeviceConfigCategoryEnum = "DEVICE_CATEGORY_A"
	SasPortalDeviceConfigCategoryEnumDeviceCategoryB           SasPortalDeviceConfigCategoryEnum = "DEVICE_CATEGORY_B"
)

func (e *SasPortalDeviceConfigCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEVICE_CATEGORY_UNSPECIFIED":
		fallthrough
	case "DEVICE_CATEGORY_A":
		fallthrough
	case "DEVICE_CATEGORY_B":
		*e = SasPortalDeviceConfigCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceConfigCategoryEnum: %s", s)
	}
}

type SasPortalDeviceConfigMeasurementCapabilitiesEnum string

const (
	SasPortalDeviceConfigMeasurementCapabilitiesEnumMeasurementCapabilityUnspecified               SasPortalDeviceConfigMeasurementCapabilitiesEnum = "MEASUREMENT_CAPABILITY_UNSPECIFIED"
	SasPortalDeviceConfigMeasurementCapabilitiesEnumMeasurementCapabilityReceivedPowerWithGrant    SasPortalDeviceConfigMeasurementCapabilitiesEnum = "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT"
	SasPortalDeviceConfigMeasurementCapabilitiesEnumMeasurementCapabilityReceivedPowerWithoutGrant SasPortalDeviceConfigMeasurementCapabilitiesEnum = "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT"
)

func (e *SasPortalDeviceConfigMeasurementCapabilitiesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MEASUREMENT_CAPABILITY_UNSPECIFIED":
		fallthrough
	case "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT":
		fallthrough
	case "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT":
		*e = SasPortalDeviceConfigMeasurementCapabilitiesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceConfigMeasurementCapabilitiesEnum: %s", s)
	}
}

// SasPortalDeviceConfigStateEnum - State of the configuration.
type SasPortalDeviceConfigStateEnum string

const (
	SasPortalDeviceConfigStateEnumDeviceConfigStateUnspecified SasPortalDeviceConfigStateEnum = "DEVICE_CONFIG_STATE_UNSPECIFIED"
	SasPortalDeviceConfigStateEnumDraft                        SasPortalDeviceConfigStateEnum = "DRAFT"
	SasPortalDeviceConfigStateEnumFinal                        SasPortalDeviceConfigStateEnum = "FINAL"
)

func (e *SasPortalDeviceConfigStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEVICE_CONFIG_STATE_UNSPECIFIED":
		fallthrough
	case "DRAFT":
		fallthrough
	case "FINAL":
		*e = SasPortalDeviceConfigStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceConfigStateEnum: %s", s)
	}
}

// SasPortalDeviceConfig - Information about the device configuration.
type SasPortalDeviceConfig struct {
	// Information about the device's air interface.
	AirInterface *SasPortalDeviceAirInterface `json:"airInterface,omitempty"`
	// The call sign of the device operator.
	CallSign *string `json:"callSign,omitempty"`
	// FCC category of the device.
	Category *SasPortalDeviceConfigCategoryEnum `json:"category,omitempty"`
	// Information about the device installation parameters.
	InstallationParams *SasPortalInstallationParams `json:"installationParams,omitempty"`
	// Output only. Whether the configuration has been signed by a CPI.
	IsSigned *bool `json:"isSigned,omitempty"`
	// Measurement reporting capabilities of the device.
	MeasurementCapabilities []SasPortalDeviceConfigMeasurementCapabilitiesEnum `json:"measurementCapabilities,omitempty"`
	// Information about the model of the device.
	Model *SasPortalDeviceModel `json:"model,omitempty"`
	// State of the configuration.
	State *SasPortalDeviceConfigStateEnum `json:"state,omitempty"`
	// Output only. The last time the device configuration was edited.
	UpdateTime *string `json:"updateTime,omitempty"`
	// The identifier of a device user.
	UserID *string `json:"userId,omitempty"`
}
