"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Wkhtmltopdf:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def wkhtmltopdf_from_html_post(self, request: shared.WkHTMLToPdfHTMLToPdfRequest) -> operations.WkhtmltopdfFromHTMLPostResponse:
        r"""Convert raw HTML to PDF
        Convert HTML to a PDF using WkHtmlToPdf on AWS Lambda.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/wkhtmltopdf/html'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WkhtmltopdfFromHTMLPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseSuccess])
                res.api_response_success = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseFailure])
                res.api_response_failure = out

        return res

    def wkhtmltopdf_from_url_get(self, request: operations.WkhtmltopdfFromURLGETRequest, security: operations.WkhtmltopdfFromURLGETSecurity) -> operations.WkhtmltopdfFromURLGETResponse:
        r"""Convert URL to PDF
        Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
        ### Authorize via Query String Parameter
        **apikey=YOUR-API-KEY**
        ### Example
        ``` https://v2018.api2pdf.com/wkhtmltopdf/url?url={UrlToConvert}&apikey={YourApiKey} ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/wkhtmltopdf/url'
        
        query_params = utils.get_query_params(operations.WkhtmltopdfFromURLGETRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WkhtmltopdfFromURLGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseSuccess])
                res.api_response_success = out
            if utils.match_content_type(content_type, 'application/pdf'):
                res.wkhtmltopdf_from_url_get_200_application_pdf_binary_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseFailure])
                res.api_response_failure = out

        return res

    def wkhtmltopdf_from_url_post(self, request: shared.WkHTMLToPdfURLToPdfRequest) -> operations.WkhtmltopdfFromURLPostResponse:
        r"""Convert URL to PDF
        Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda..
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/wkhtmltopdf/url'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WkhtmltopdfFromURLPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseSuccess])
                res.api_response_success = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponseFailure])
                res.api_response_failure = out

        return res

    