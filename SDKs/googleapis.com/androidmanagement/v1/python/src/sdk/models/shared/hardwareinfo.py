"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HardwareInfo:
    r"""Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy."""
    
    battery_shutdown_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryShutdownTemperatures'), 'exclude': lambda f: f is None }})
    r"""Battery shutdown temperature thresholds in Celsius for each battery on the device."""  
    battery_throttling_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryThrottlingTemperatures'), 'exclude': lambda f: f is None }})
    r"""Battery throttling temperature thresholds in Celsius for each battery on the device."""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Brand of the device. For example, Google."""  
    cpu_shutdown_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuShutdownTemperatures'), 'exclude': lambda f: f is None }})
    r"""CPU shutdown temperature thresholds in Celsius for each CPU on the device."""  
    cpu_throttling_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuThrottlingTemperatures'), 'exclude': lambda f: f is None }})
    r"""CPU throttling temperature thresholds in Celsius for each CPU on the device."""  
    device_baseband_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceBasebandVersion'), 'exclude': lambda f: f is None }})
    r"""Baseband version. For example, MDM9625_104662.22.05.34p."""  
    enterprise_specific_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterpriseSpecificId'), 'exclude': lambda f: f is None }})
    r"""Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above."""  
    gpu_shutdown_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpuShutdownTemperatures'), 'exclude': lambda f: f is None }})
    r"""GPU shutdown temperature thresholds in Celsius for each GPU on the device."""  
    gpu_throttling_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpuThrottlingTemperatures'), 'exclude': lambda f: f is None }})
    r"""GPU throttling temperature thresholds in Celsius for each GPU on the device."""  
    hardware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardware'), 'exclude': lambda f: f is None }})
    r"""Name of the hardware. For example, Angler."""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Manufacturer. For example, Motorola."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""The model of the device. For example, Asus Nexus 7."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""The device serial number."""  
    skin_shutdown_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skinShutdownTemperatures'), 'exclude': lambda f: f is None }})
    r"""Device skin shutdown temperature thresholds in Celsius."""  
    skin_throttling_temperatures: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skinThrottlingTemperatures'), 'exclude': lambda f: f is None }})
    r"""Device skin throttling temperature thresholds in Celsius."""  
    