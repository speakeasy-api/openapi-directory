"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import feedback as shared_feedback
from ..shared import post as shared_post
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetUserAndRelatedDataRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""A user ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserAndRelatedData200ApplicationJSON:
    r"""The user and related data."""
    
    feedback: Optional[list[shared_feedback.Feedback]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedback'), 'exclude': lambda f: f is None }})
    r"""Feedback the current user has left on the user."""  
    offer_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offer_count'), 'exclude': lambda f: f is None }})
    r"""Count of offer posts made by the user in the last 90 days."""  
    posts: Optional[list[shared_post.Post]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts'), 'exclude': lambda f: f is None }})
    r"""Other active posts from the user in the last 90 days. A maximum of 30 posts will be returned."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    wanted_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wanted_count'), 'exclude': lambda f: f is None }})
    r"""Count of wanted posts made by the user in the last 90 days."""  
    

@dataclasses.dataclass
class GetUserAndRelatedDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_user_and_related_data_200_application_json_object: Optional[GetUserAndRelatedData200ApplicationJSON] = dataclasses.field(default=None)
    r"""The user and related data."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    