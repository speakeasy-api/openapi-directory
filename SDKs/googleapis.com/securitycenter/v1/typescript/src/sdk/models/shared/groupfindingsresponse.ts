/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GroupResult } from "./groupresult";
import { Expose, Type } from "class-transformer";

/**
 * Response message for group by findings.
 */
export class GroupFindingsResponse extends SpeakeasyBase {
  /**
   * Group results. There exists an element for each existing unique combination of property/values. The element contains a count for the number of times those specific property/values appear.
   */
  @SpeakeasyMetadata({ elemType: GroupResult })
  @Expose({ name: "groupByResults" })
  @Type(() => GroupResult)
  groupByResults?: GroupResult[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPageToken" })
  nextPageToken?: string;

  /**
   * Time used for executing the groupBy request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "readTime" })
  readTime?: string;

  /**
   * The total number of results matching the query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalSize" })
  totalSize?: number;
}
