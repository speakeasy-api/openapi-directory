"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointRequestBodyAddressCountry:
    
    acronym: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acronym') }})
    r"""Three letter ISO code of the address country."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Address country name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointRequestBodyAddressLocation:
    
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""latitude"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointRequestBodyAddress:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""Address city."""  
    complement: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement') }})
    r"""Address complement."""  
    country: CreateUpdatePickupPointRequestBodyAddressCountry = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    location: CreateUpdatePickupPointRequestBodyAddressLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    neighborhood: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood') }})
    r"""Address neighborhood."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""Address street number."""  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode') }})
    r"""Postal code."""  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""Address state."""  
    street: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street') }})
    r"""Address street name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointRequestBodyBusinessHour:
    
    closing_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closingTime') }})  
    day_of_week: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek') }})  
    opening_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openingTime') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointRequestBody:
    
    address: CreateUpdatePickupPointRequestBodyAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    business_hours: list[CreateUpdatePickupPointRequestBodyBusinessHour] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessHours') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Pickup point description."""  
    formatted_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatted_address') }})
    r"""Formated address."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Pickup Point ID. Cannot contain spaces."""  
    instructions: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions') }})
    r"""Pickup point instructions."""  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Pickup point name."""  
    tags_label: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagsLabel') }})  
    is_third_party_pickup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isThirdPartyPickup'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateUpdatePickupPointRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    pickup_point_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'pickupPointId', 'style': 'simple', 'explode': False }})
    r"""Pickup Point ID. Cannot contain spaces."""  
    request_body: CreateUpdatePickupPointRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointCreateUpdateAddress2Country:
    
    acronym: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acronym') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointCreateUpdateAddress2Location5:
    
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointCreateUpdateAddress2:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})  
    complement: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement') }})  
    country: CreateUpdatePickupPointCreateUpdateAddress2Country = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    location: CreateUpdatePickupPointCreateUpdateAddress2Location5 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    neighborhood: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood') }})  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode') }})  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    street: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointCreateUpdateBusinessHour:
    
    closing_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closingTime') }})  
    day_of_week: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek') }})  
    opening_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openingTime') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePickupPointCreateUpdate:
    
    address: CreateUpdatePickupPointCreateUpdateAddress2 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    business_hours: list[CreateUpdatePickupPointCreateUpdateBusinessHour] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessHours') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    formatted_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatted_address') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    instructions: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions') }})  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    pickup_holidays: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupHolidays') }})  
    tags_label: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagsLabel') }})  
    

@dataclasses.dataclass
class CreateUpdatePickupPointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_update: Optional[CreateUpdatePickupPointCreateUpdate] = dataclasses.field(default=None)  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    