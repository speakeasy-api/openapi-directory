/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderReturnLineItem - The line item being returned in an order.
 */
public class OrderReturnLineItem {
    /**
     * The list of references to `OrderReturnDiscount` entities applied to the return line item. Each
     * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
     * `OrderReturnDiscount` applied to the return line item. On reads, the applied amount
     * is populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_discounts")
    public OrderLineItemAppliedDiscount[] appliedDiscounts;
    public OrderReturnLineItem withAppliedDiscounts(OrderLineItemAppliedDiscount[] appliedDiscounts) {
        this.appliedDiscounts = appliedDiscounts;
        return this;
    }
    
    /**
     * The list of references to `OrderReturnTax` entities applied to the return line item. Each
     * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
     * `OrderReturnTax` applied to the return line item. On reads, the applied amount
     * is populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_taxes")
    public OrderLineItemAppliedTax[] appliedTaxes;
    public OrderReturnLineItem withAppliedTaxes(OrderLineItemAppliedTax[] appliedTaxes) {
        this.appliedTaxes = appliedTaxes;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_price_money")
    public Money basePriceMoney;
    public OrderReturnLineItem withBasePriceMoney(Money basePriceMoney) {
        this.basePriceMoney = basePriceMoney;
        return this;
    }
    
    /**
     * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_object_id")
    public String catalogObjectId;
    public OrderReturnLineItem withCatalogObjectId(String catalogObjectId) {
        this.catalogObjectId = catalogObjectId;
        return this;
    }
    
    /**
     * The version of the catalog object that this line item references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_version")
    public Long catalogVersion;
    public OrderReturnLineItem withCatalogVersion(Long catalogVersion) {
        this.catalogVersion = catalogVersion;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_return_money")
    public Money grossReturnMoney;
    public OrderReturnLineItem withGrossReturnMoney(Money grossReturnMoney) {
        this.grossReturnMoney = grossReturnMoney;
        return this;
    }
    
    /**
     * The type of line item: an itemized return, a non-itemized return (custom amount),
     * or the return of an unactivated gift card sale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_type")
    public String itemType;
    public OrderReturnLineItem withItemType(String itemType) {
        this.itemType = itemType;
        return this;
    }
    
    /**
     * The name of the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrderReturnLineItem withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The note of the return line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public OrderReturnLineItem withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The quantity returned, formatted as a decimal number.
     * For example, `"3"`.
     * 
     * Line items with a `quantity_unit` can have non-integer quantities.
     * For example, `"1.70000"`.
     */
    @JsonProperty("quantity")
    public String quantity;
    public OrderReturnLineItem withQuantity(String quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Contains the measurement unit for a quantity and a precision that
     * specifies the number of digits after the decimal point for decimal quantities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity_unit")
    public OrderQuantityUnit quantityUnit;
    public OrderReturnLineItem withQuantityUnit(OrderQuantityUnit quantityUnit) {
        this.quantityUnit = quantityUnit;
        return this;
    }
    
    /**
     * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_modifiers")
    public OrderReturnLineItemModifier[] returnModifiers;
    public OrderReturnLineItem withReturnModifiers(OrderReturnLineItemModifier[] returnModifiers) {
        this.returnModifiers = returnModifiers;
        return this;
    }
    
    /**
     * The `uid` of the line item in the original sale order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_line_item_uid")
    public String sourceLineItemUid;
    public OrderReturnLineItem withSourceLineItemUid(String sourceLineItemUid) {
        this.sourceLineItemUid = sourceLineItemUid;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount_money")
    public Money totalDiscountMoney;
    public OrderReturnLineItem withTotalDiscountMoney(Money totalDiscountMoney) {
        this.totalDiscountMoney = totalDiscountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public Money totalMoney;
    public OrderReturnLineItem withTotalMoney(Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_money")
    public Money totalTaxMoney;
    public OrderReturnLineItem withTotalTaxMoney(Money totalTaxMoney) {
        this.totalTaxMoney = totalTaxMoney;
        return this;
    }
    
    /**
     * A unique ID for this return line-item entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderReturnLineItem withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * The name of the variation applied to this return line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variation_name")
    public String variationName;
    public OrderReturnLineItem withVariationName(String variationName) {
        this.variationName = variationName;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variation_total_price_money")
    public Money variationTotalPriceMoney;
    public OrderReturnLineItem withVariationTotalPriceMoney(Money variationTotalPriceMoney) {
        this.variationTotalPriceMoney = variationTotalPriceMoney;
        return this;
    }
    
}
