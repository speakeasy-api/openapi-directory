/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Account } from "./account";
import { Status } from "./status";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Admin-level information about a filed report.
 *
 * @see {@link https://docs.joinmastodon.org/entities/admin-report/}
 */
export class AdminReport extends SpeakeasyBase {
  /**
   * Represents a user of Mastodon and their associated profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => Account)
  account?: Account;

  /**
   * The action taken to resolve this report. Enumerable oneOf.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action_taken" })
  actionTaken?: string;

  /**
   * Represents a user of Mastodon and their associated profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assigned_account" })
  @Type(() => Account)
  assignedAccount?: Account;

  /**
   * An optional reason for reporting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The time the report was filed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Statuses attached to the report, for context.
   */
  @SpeakeasyMetadata({ elemType: Status })
  @Expose({ name: "statuses" })
  @Type(() => Status)
  statuses?: Status[];

  /**
   * Represents a user of Mastodon and their associated profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target_account" })
  @Type(() => Account)
  targetAccount?: Account;

  /**
   * The time of last action on this report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}
