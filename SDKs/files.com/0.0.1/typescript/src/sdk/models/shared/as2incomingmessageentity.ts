/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Result of processing.
 */
export enum As2IncomingMessageEntityProcessingResultEnum {
  NotStarted = "not_started",
  UnableToFindStation = "unable_to_find_station",
  UnableToFindPartner = "unable_to_find_partner",
  UnableToValidateSignature = "unable_to_validate_signature",
  DecryptFail = "decrypt_fail",
  FileSaveFail = "file_save_fail",
  Success = "success",
}

/**
 * List As2 Incoming Messages
 */
export class As2IncomingMessageEntity extends SpeakeasyBase {
  /**
   * JSON Structure of the activity log.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activity_log" })
  activityLog?: string;

  /**
   * AS2 FROM header of message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_from" })
  as2From?: string;

  /**
   * Id of the AS2 Partner associated with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_partner_id" })
  as2PartnerId?: number;

  /**
   * Id of the AS2 Station associated with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_station_id" })
  as2StationId?: number;

  /**
   * AS2 TO header of message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_to" })
  as2To?: string;

  /**
   * Filename of the file being received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attachment_filename" })
  attachmentFilename?: string;

  /**
   * Encrypted Payload Body Size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body_size" })
  bodySize?: string;

  /**
   * Content Type header of the incoming message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_type" })
  contentType?: string;

  /**
   * Message creation date/time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Date Header
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date?: string;

  /**
   * URL to download the encrypted signed smime that is to sent as AS2 body
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encrypted_uri" })
  encryptedUri?: string;

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hex_recipient_serial" })
  hexRecipientSerial?: string;

  /**
   * HTTP Headers sent with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_headers" })
  httpHeaders?: Record<string, any>;

  /**
   * HTTP Response Code sent for this message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_response_code" })
  httpResponseCode?: string;

  /**
   * HTTP Headers sent for this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_response_headers" })
  httpResponseHeaders?: Record<string, any>;

  /**
   * Id of the AS2 Partner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP Address of the Sender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  /**
   * URL to download the http response body
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_response_uri" })
  mdnResponseUri?: string;

  /**
   * Message decrypted successfully?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_decrypted" })
  messageDecrypted?: boolean;

  /**
   * AS2 Message Id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_id" })
  messageId?: string;

  /**
   * MDN returned?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_mdn_returned" })
  messageMdnReturned?: boolean;

  /**
   * Message processed successfully?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_processing_success" })
  messageProcessingSuccess?: boolean;

  /**
   * Message body received?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_received" })
  messageReceived?: boolean;

  /**
   * Message signature verified?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_signature_verified" })
  messageSignatureVerified?: boolean;

  /**
   * AS2 Message Integrity Check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mic" })
  mic?: string;

  /**
   * AS2 Message Integrity Check Algorithm Used
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mic_algo" })
  micAlgo?: string;

  /**
   * Result of processing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processing_result" })
  processingResult?: As2IncomingMessageEntityProcessingResultEnum;

  /**
   * Result of processing description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processing_result_description" })
  processingResultDescription?: string;

  /**
   * URL to download the original file contents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "raw_uri" })
  rawUri?: string;

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_issuer" })
  recipientIssuer?: string;

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_serial" })
  recipientSerial?: string;

  /**
   * URL to download the file contents as smime with signature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smime_signed_uri" })
  smimeSignedUri?: string;

  /**
   * URL to download the file contents encoded as smime
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smime_uri" })
  smimeUri?: string;

  /**
   * AS2 Subject Header
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subject" })
  subject?: string;

  /**
   * UUID assigned to this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}
