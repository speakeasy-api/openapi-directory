// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateOrganizationXAmzTargetEnum
type CreateOrganizationXAmzTargetEnum string

const (
	CreateOrganizationXAmzTargetEnumWorkMailServiceCreateOrganization CreateOrganizationXAmzTargetEnum = "WorkMailService.CreateOrganization"
)

func (e *CreateOrganizationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WorkMailService.CreateOrganization":
		*e = CreateOrganizationXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationXAmzTargetEnum: %s", s)
	}
}

type CreateOrganizationRequest struct {
	CreateOrganizationRequest shared.CreateOrganizationRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                CreateOrganizationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateOrganizationResponse struct {
	ContentType string
	// Success
	CreateOrganizationResponse *shared.CreateOrganizationResponse
	// DirectoryInUseException
	DirectoryInUseException interface{}
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NameAvailabilityException
	NameAvailabilityException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
