/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CsrRequest {
    /**
     * The city where the provided organization is located, for example, New York or London.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public CsrRequest withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The two-letter ISO code for the country where the provided organization is located, for example US, GB, or FR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public CsrRequest withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * An email address associated with the organization, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    public String emailAddress;

    public CsrRequest withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.
     */
    @JsonProperty("hostnames")
    public String[] hostnames;

    public CsrRequest withHostnames(String[] hostnames) {
        this.hostnames = hostnames;
        return this;
    }
    
    /**
     * The name of the organization associated with the certificate, for example 'Rubrik, Inc.'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;

    public CsrRequest withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * The name of the organizational unit associated with the certificate, for example, Engineering.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationUnit")
    public String organizationUnit;

    public CsrRequest withOrganizationUnit(String organizationUnit) {
        this.organizationUnit = organizationUnit;
        return this;
    }
    
    /**
     * If applicable, the name of the state where the provided organization is located, for example, California.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public CsrRequest withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The surname associated with the certificate, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surname")
    public String surname;

    public CsrRequest withSurname(String surname) {
        this.surname = surname;
        return this;
    }
    
    /**
     * The user ID associated with the certificate, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public CsrRequest withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    public CsrRequest(@JsonProperty("hostnames") String[] hostnames) {
        this.hostnames = hostnames;
  }
}
