/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This API allows you to interact with Ethereum, Binance smart chain, Polygon and Tron blockchain. If you ever looked for a possibility to automate token or payments this is the right place.  
 * You still have no idea for real use cases? Let me give you some examples: Accept your own token as payment method for your shop, distribute airdrop tokens of your ICO, convert your site currency to a token that can be traded on exchanges and many more.  
 * There are a lot of use cases which are not only limited to sending tokens but also receiving them. You could even create a secure wallet for your token which only the wallet owner has access to. Additionally we offer a lot of functions for retrieving blockchain data, including transactions. Using our webhook system, it is possible to receive notifications when events on the blockchain occur, for example when a transfer to a specific address is happening.
 * 
 * # Registering
 * 
 * To use this Blockchain API, you need to register for a free account on [Chaingateway.io](https://chaingateway.io)
 * 
 * Once you have created your account, you can create an API key in your Account panel to use with our API.
 * 
 * # Postman
 * 
 * Postman is a great software to test APIs, it helped us a lot when developing this API. If you haven't installed it yet, we recommend to do so
 * 
 * We have created a Postman collection that allows to import all functions and their settings, including descriptions in Postman. This way you can test all functions with the click of a button (just change the parameters before).
 * 
 * # API Specifications
 * 
 * For many API clients, websites and development projects you may need a file which specifies all function endpoints of our API. These files can be found in our [Github repository](https://github.com/chaingateway/api-specification), always updated in the formats "Postman Collection" and "OPENAPI/SWAGGER".
 * 
 * # Authorization
 * 
 * You can get your personal API Key from your account dashboard. It is used by us to determine who is accessing the API and to count the requests by that account. There are 2 possibilities to use it in your requests:
 * 
 * Add it in the HTTP header as
 * 
 * `Authorization: q9PdaWuD4j6DK6vsUgehhL8pgarSrS9m`
 * 
 * Please do not share your api key! If you did so by mistake, immediately regenerate it in your account panel!
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://dev.api.chaingateway.io",
	};
  	
    public AddressRequests addressRequests;
    public AddressRequests1 addressRequests1;
    public AddressRequests12 addressRequests12;
    public AddressRequests123 addressRequests123;
    public BinanceSmartChain binanceSmartChain;
    public Bitcoin bitcoin;
    public Ethereum ethereum;
    public InfoRequests infoRequests;
    public InfoRequests1 infoRequests1;
    public InfoRequests12 infoRequests12;
    public InfoRequests123 infoRequests123;
    public InfoRequests1234 infoRequests1234;
    public Market market;
    public Polygon polygon;
    public TransactionRequests transactionRequests;
    public TransactionRequests1 transactionRequests1;
    public TransactionRequests12 transactionRequests12;
    public TransactionRequests123 transactionRequests123;
    public TransactionRequests1234 transactionRequests1234;
    public Tron tron;
    public WalletRequests walletRequests;
    /**
     * With webhooks, you can get notified about various events in the blockchain. E.g:
     * 
     * Receipt of payment to a specific address  
     * Outgoing payment from a specific address  
     * Exchange of sats between two specific addresses  
     * Execution of a contract  
     * Change of ownership of a token
     * 
     * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
     * 
     * from: Outgoing address  
     * to: Incoming address  
     * contract: Contract that should be monitored  
     * tokenid: ID of a token that should be monitored.  
     * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
     * 
     * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
     * 
     * ``` json
     * {
     *   "id": "63a1ae0887ca3625b82b4924",
     *   "webhook_id": "63a1ad0e87ca3625b82b4923",
     *   "from": "0x0000000000000000000000000000000000000000",
     *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
     *   "blocknumber": "123",
     *   "datetime": "22-12-20 13:43:52",
     *   "tokenid": "0x0000000000000000000000000000000000000000",
     *   "type": null,
     *   "txid": "000000000000000000000000000000000000000000000000000",
     *   "amount": "000000000000000000000000000000000000000000000000000"
     * }
     * 
     * ```
     */
    public WebhooksIPNRequests webhooksIPNRequests;
    /**
     * With webhooks, you can get notified about various events in the blockchain. E.g:
     * 
     * Receipt of payment to a specific address  
     * Outgoing payment from a specific address  
     * Exchange of sats between two specific addresses  
     * Execution of a contract  
     * Change of ownership of a token
     * 
     * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
     * 
     * from: Outgoing address  
     * to: Incoming address  
     * contract: Contract that should be monitored  
     * tokenid: ID of a token that should be monitored.  
     * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
     * 
     * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
     * 
     * ``` json
     * {
     *   "id": "63a1ae0887ca3625b82b4924",
     *   "webhook_id": "63a1ad0e87ca3625b82b4923",
     *   "from": "0x0000000000000000000000000000000000000000",
     *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
     *   "blocknumber": "123",
     *   "datetime": "22-12-20 13:43:52",
     *   "tokenid": "0x0000000000000000000000000000000000000000",
     *   "type": null,
     *   "txid": "000000000000000000000000000000000000000000000000000",
     *   "amount": "000000000000000000000000000000000000000000000000000"
     * }
     * 
     * ```
     */
    public WebhooksIPNRequests1 webhooksIPNRequests1;
    /**
     * With webhooks, you can get notified about various events in the blockchain. E.g:
     * 
     * Receipt of payment to a specific address  
     * Outgoing payment from a specific address  
     * Exchange of sats between two specific addresses  
     * Execution of a contract  
     * Change of ownership of a token
     * 
     * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
     * 
     * from: Outgoing address  
     * to: Incoming address  
     * contract: Contract that should be monitored  
     * tokenid: ID of a token that should be monitored.  
     * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
     * 
     * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
     * 
     * ``` json
     * {
     *  "id": "63a1ae0887ca3625b82b4924",
     *   "webhook_id": "63a1ad0e87ca3625b82b4923",
     *   "from": "0x0000000000000000000000000000000000000000",
     *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
     *   "blocknumber": "123",
     *   "datetime": "22-12-20 13:43:52",
     *   "tokenid": "0x0000000000000000000000000000000000000000",
     *   "type": null,
     *   "txid": "000000000000000000000000000000000000000000000000000",
     *   "amount": "000000000000000000000000000000000000000000000000000"
     * }
     * 
     * ```
     */
    public WebhooksIPNRequests12 webhooksIPNRequests12;
    /**
     * With webhooks, you can get notified about various events in the blockchain. E.g:
     * 
     * Receipt of payment to a specific address  
     * Outgoing payment from a specific address  
     * Exchange of sats between two specific addresses  
     * Execution of a contract  
     * Change of ownership of a token
     * 
     * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
     * 
     * from: Outgoing address  
     * to: Incoming address  
     * contract: Contract that should be monitored  
     * tokenid: ID of a token that should be monitored.  
     * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
     * 
     * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
     * 
     * ``` json
     * {
     *   "id": "63a1ae0887ca3625b82b4924",
     *   "webhook_id": "63a1ad0e87ca3625b82b4923",
     *   "from": "0x0000000000000000000000000000000000000000",
     *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
     *   "blocknumber": "123",
     *   "datetime": "22-12-20 13:43:52",
     *   "tokenid": "0x0000000000000000000000000000000000000000",
     *   "type": null,
     *   "txid": "000000000000000000000000000000000000000000000000000",
     *   "amount": "000000000000000000000000000000000000000000000000000"
     * }
     * 
     * ```
     */
    public WebhooksIPNRequests123 webhooksIPNRequests123;
    /**
     * With webhooks, you can get notified about various events in the blockchain. E.g:
     * 
     * Receipt of payment to a specific address  
     * Outgoing payment from a specific address  
     * Exchange of sats between two specific addresses  
     * Execution of a contract  
     * Change of ownership of a token
     * 
     * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
     * 
     * from: Outgoing address  
     * to: Incoming address  
     * contract: Contract that should be monitored  
     * tokenid: ID of a token that should be monitored.  
     * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
     * 
     * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
     * 
     * ``` json
     * {
     *   "id": "63a1ae0887ca3625b82b4924",
     *   "webhook_id": "63a1ad0e87ca3625b82b4923",
     *   "from": "0x0000000000000000000000000000000000000000",
     *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
     *   "blocknumber": "123",
     *   "datetime": "22-12-20 13:43:52",
     *   "tokenid": "0x0000000000000000000000000000000000000000",
     *   "type": null,
     *   "txid": "000000000000000000000000000000000000000000000000000",
     *   "amount": "000000000000000000000000000000000000000000000000000"
     * }
     * 
     * ```
     */
    public WebhooksIPNRequests1234 webhooksIPNRequests1234;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.addressRequests = new AddressRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.addressRequests1 = new AddressRequests1(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.addressRequests12 = new AddressRequests12(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.addressRequests123 = new AddressRequests123(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.binanceSmartChain = new BinanceSmartChain(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bitcoin = new Bitcoin(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ethereum = new Ethereum(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.infoRequests = new InfoRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.infoRequests1 = new InfoRequests1(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.infoRequests12 = new InfoRequests12(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.infoRequests123 = new InfoRequests123(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.infoRequests1234 = new InfoRequests1234(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.market = new Market(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.polygon = new Polygon(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactionRequests = new TransactionRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactionRequests1 = new TransactionRequests1(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactionRequests12 = new TransactionRequests12(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactionRequests123 = new TransactionRequests123(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactionRequests1234 = new TransactionRequests1234(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tron = new Tron(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.walletRequests = new WalletRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooksIPNRequests = new WebhooksIPNRequests(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooksIPNRequests1 = new WebhooksIPNRequests1(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooksIPNRequests12 = new WebhooksIPNRequests12(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooksIPNRequests123 = new WebhooksIPNRequests123(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooksIPNRequests1234 = new WebhooksIPNRequests1234(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}