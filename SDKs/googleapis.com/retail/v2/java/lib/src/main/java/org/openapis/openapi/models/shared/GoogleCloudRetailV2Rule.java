/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRetailV2Rule - A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently rules only work for controls with SOLUTION_TYPE_SEARCH.
 */
public class GoogleCloudRetailV2Rule {
    /**
     * A boost action to apply to results matching condition specified above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boostAction")
    public GoogleCloudRetailV2RuleBoostAction boostAction;
    public GoogleCloudRetailV2Rule withBoostAction(GoogleCloudRetailV2RuleBoostAction boostAction) {
        this.boostAction = boostAction;
        return this;
    }
    
    /**
     * Metadata that is used to define a condition that triggers an action. A valid condition must specify at least one of 'query_terms' or 'products_filter'. If multiple fields are specified, the condition is met if all the fields are satisfied e.g. if a set of query terms and product_filter are set, then only items matching the product_filter for requests with a query matching the query terms wil get boosted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public GoogleCloudRetailV2Condition condition;
    public GoogleCloudRetailV2Rule withCondition(GoogleCloudRetailV2Condition condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * Prevents `query_term` from being associated with specified terms during search. Example: Don't associate "gShoe" and "cheap".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doNotAssociateAction")
    public GoogleCloudRetailV2RuleDoNotAssociateAction doNotAssociateAction;
    public GoogleCloudRetailV2Rule withDoNotAssociateAction(GoogleCloudRetailV2RuleDoNotAssociateAction doNotAssociateAction) {
        this.doNotAssociateAction = doNotAssociateAction;
        return this;
    }
    
    /**
     * * Rule Condition: - No Condition.query_terms provided is a global match. - 1 or more Condition.query_terms provided are combined with OR operator. * Action Input: The request query and filter that are applied to the retrieved products, in addition to any filters already provided with the SearchRequest. The AND operator is used to combine the query's existing filters with the filter rule(s). NOTE: May result in 0 results when filters conflict. * Action Result: Filters the returned objects to be ONLY those that passed the filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterAction")
    public GoogleCloudRetailV2RuleFilterAction filterAction;
    public GoogleCloudRetailV2Rule withFilterAction(GoogleCloudRetailV2RuleFilterAction filterAction) {
        this.filterAction = filterAction;
        return this;
    }
    
    /**
     * Prevents a term in the query from being used in search. Example: Don't search for "shoddy".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreAction")
    public GoogleCloudRetailV2RuleIgnoreAction ignoreAction;
    public GoogleCloudRetailV2Rule withIgnoreAction(GoogleCloudRetailV2RuleIgnoreAction ignoreAction) {
        this.ignoreAction = ignoreAction;
        return this;
    }
    
    /**
     * Maps a set of terms to a set of synonyms. Set of synonyms will be treated as synonyms of each query term only. `query_terms` will not be treated as synonyms of each other. Example: "sneakers" will use a synonym of "shoes". "shoes" will not use a synonym of "sneakers".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onewaySynonymsAction")
    public GoogleCloudRetailV2RuleOnewaySynonymsAction onewaySynonymsAction;
    public GoogleCloudRetailV2Rule withOnewaySynonymsAction(GoogleCloudRetailV2RuleOnewaySynonymsAction onewaySynonymsAction) {
        this.onewaySynonymsAction = onewaySynonymsAction;
        return this;
    }
    
    /**
     * Redirects a shopper to a specific page. * Rule Condition: - Must specify Condition.query_terms. * Action Input: Request Query * Action Result: Redirects shopper to provided uri.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectAction")
    public GoogleCloudRetailV2RuleRedirectAction redirectAction;
    public GoogleCloudRetailV2Rule withRedirectAction(GoogleCloudRetailV2RuleRedirectAction redirectAction) {
        this.redirectAction = redirectAction;
        return this;
    }
    
    /**
     * Replaces a term in the query. Multiple replacement candidates can be specified. All `query_terms` will be replaced with the replacement term. Example: Replace "gShoe" with "google shoe".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replacementAction")
    public GoogleCloudRetailV2RuleReplacementAction replacementAction;
    public GoogleCloudRetailV2Rule withReplacementAction(GoogleCloudRetailV2RuleReplacementAction replacementAction) {
        this.replacementAction = replacementAction;
        return this;
    }
    
    /**
     * Creates a set of terms that will be treated as synonyms of each other. Example: synonyms of "sneakers" and "shoes": * "sneakers" will use a synonym of "shoes". * "shoes" will use a synonym of "sneakers".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twowaySynonymsAction")
    public GoogleCloudRetailV2RuleTwowaySynonymsAction twowaySynonymsAction;
    public GoogleCloudRetailV2Rule withTwowaySynonymsAction(GoogleCloudRetailV2RuleTwowaySynonymsAction twowaySynonymsAction) {
        this.twowaySynonymsAction = twowaySynonymsAction;
        return this;
    }
    
}
