// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type RunnerDefinitionStatusEnum string

const (
	RunnerDefinitionStatusEnumActive        RunnerDefinitionStatusEnum = "ACTIVE"
	RunnerDefinitionStatusEnumWinner        RunnerDefinitionStatusEnum = "WINNER"
	RunnerDefinitionStatusEnumLoser         RunnerDefinitionStatusEnum = "LOSER"
	RunnerDefinitionStatusEnumRemoved       RunnerDefinitionStatusEnum = "REMOVED"
	RunnerDefinitionStatusEnumRemovedVacant RunnerDefinitionStatusEnum = "REMOVED_VACANT"
	RunnerDefinitionStatusEnumHidden        RunnerDefinitionStatusEnum = "HIDDEN"
	RunnerDefinitionStatusEnumPlaced        RunnerDefinitionStatusEnum = "PLACED"
)

func (e *RunnerDefinitionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACTIVE":
		fallthrough
	case "WINNER":
		fallthrough
	case "LOSER":
		fallthrough
	case "REMOVED":
		fallthrough
	case "REMOVED_VACANT":
		fallthrough
	case "HIDDEN":
		fallthrough
	case "PLACED":
		*e = RunnerDefinitionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RunnerDefinitionStatusEnum: %s", s)
	}
}

type RunnerDefinition struct {
	AdjustmentFactor *float64 `json:"adjustmentFactor,omitempty"`
	Bsp              *float64 `json:"bsp,omitempty"`
	// Handicap - the handicap of the runner (selection) (null if not applicable)
	Hc *float64 `json:"hc,omitempty"`
	// Selection Id - the id of the runner (selection)
	ID           *int64                      `json:"id,omitempty"`
	RemovalDate  *time.Time                  `json:"removalDate,omitempty"`
	SortPriority *int                        `json:"sortPriority,omitempty"`
	Status       *RunnerDefinitionStatusEnum `json:"status,omitempty"`
}
