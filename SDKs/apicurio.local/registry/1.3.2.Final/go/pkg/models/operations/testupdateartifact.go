// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TestUpdateArtifactPathParams struct {
	// The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
	ArtifactID string `pathParam:"style=simple,explode=false,name=artifactId"`
}

// TestUpdateArtifactXRegistryArtifactTypeEnum - This header parameter can be used to indicate the type of the artifact being added.  Possible values include:
// * Avro (`AVRO`)
// * Protobuf (`PROTOBUF`)
// * Protobuf File Descriptor (`PROTOBUF_FD`)
// * JSON Schema (`JSON`)
// * Kafka Connect (`KCONNECT`)
// * OpenAPI (`OPENAPI`)
// * AsyncAPI (`ASYNCAPI`)
// * GraphQL (`GRAPHQL`)
// * Web Services Description Language (`WSDL`)
// * XML Schema (`XSD`)
type TestUpdateArtifactXRegistryArtifactTypeEnum string

const (
	TestUpdateArtifactXRegistryArtifactTypeEnumAvro       TestUpdateArtifactXRegistryArtifactTypeEnum = "AVRO"
	TestUpdateArtifactXRegistryArtifactTypeEnumProtobuf   TestUpdateArtifactXRegistryArtifactTypeEnum = "PROTOBUF"
	TestUpdateArtifactXRegistryArtifactTypeEnumProtobufFd TestUpdateArtifactXRegistryArtifactTypeEnum = "PROTOBUF_FD"
	TestUpdateArtifactXRegistryArtifactTypeEnumJSON       TestUpdateArtifactXRegistryArtifactTypeEnum = "JSON"
	TestUpdateArtifactXRegistryArtifactTypeEnumOpenapi    TestUpdateArtifactXRegistryArtifactTypeEnum = "OPENAPI"
	TestUpdateArtifactXRegistryArtifactTypeEnumAsyncapi   TestUpdateArtifactXRegistryArtifactTypeEnum = "ASYNCAPI"
	TestUpdateArtifactXRegistryArtifactTypeEnumGraphql    TestUpdateArtifactXRegistryArtifactTypeEnum = "GRAPHQL"
	TestUpdateArtifactXRegistryArtifactTypeEnumKconnect   TestUpdateArtifactXRegistryArtifactTypeEnum = "KCONNECT"
	TestUpdateArtifactXRegistryArtifactTypeEnumWsdl       TestUpdateArtifactXRegistryArtifactTypeEnum = "WSDL"
	TestUpdateArtifactXRegistryArtifactTypeEnumXsd        TestUpdateArtifactXRegistryArtifactTypeEnum = "XSD"
	TestUpdateArtifactXRegistryArtifactTypeEnumXML        TestUpdateArtifactXRegistryArtifactTypeEnum = "XML"
)

func (e *TestUpdateArtifactXRegistryArtifactTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AVRO":
		fallthrough
	case "PROTOBUF":
		fallthrough
	case "PROTOBUF_FD":
		fallthrough
	case "JSON":
		fallthrough
	case "OPENAPI":
		fallthrough
	case "ASYNCAPI":
		fallthrough
	case "GRAPHQL":
		fallthrough
	case "KCONNECT":
		fallthrough
	case "WSDL":
		fallthrough
	case "XSD":
		fallthrough
	case "XML":
		*e = TestUpdateArtifactXRegistryArtifactTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestUpdateArtifactXRegistryArtifactTypeEnum: %s", s)
	}
}

type TestUpdateArtifactHeaders struct {
	// This header parameter can be used to indicate the type of the artifact being added.  Possible values include:
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *TestUpdateArtifactXRegistryArtifactTypeEnum `header:"style=simple,explode=false,name=X-Registry-ArtifactType"`
}

type TestUpdateArtifactRequest struct {
	PathParams TestUpdateArtifactPathParams
	Headers    TestUpdateArtifactHeaders
	// The content of the artifact being tested. This is often, but not always, JSON data
	// representing one of the supported artifact types:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	//
	Request []byte `request:"mediaType=*/*"`
}

type TestUpdateArtifactResponse struct {
	ContentType string
	// Common response for all operations that can return a `404` error.
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
}
