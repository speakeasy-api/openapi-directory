/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * If you only require a small number of active targets at a time but don't
 *
 * @remarks
 * want to lose their history by deleting one to add another it is now
 * possible to archive targets.
 * This feature is still experimental, please contact our support if you
 * are interested.
 *
 */
export class Archive {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Activate targets
   */
  postTargetsActivate(
    req: string[],
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsActivateResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/activate/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsActivateResponse =
        new operations.PostTargetsActivateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targetIds = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsActivate400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsActivate400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsActivate401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsActivate401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsActivate403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsActivate403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Archive targets
   */
  postTargetsArchive(
    req: string[],
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsArchiveResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/archive/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsArchiveResponse =
        new operations.PostTargetsArchiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targetIds = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchive400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchive400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchive401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchive401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchive403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchive403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List archived targets
   */
  postTargetsArchived(
    req: string[],
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsArchivedResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/archived/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsArchivedResponse =
        new operations.PostTargetsArchivedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchived200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchived200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchived400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchived400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchived401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchived401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsArchived403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsArchived403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
