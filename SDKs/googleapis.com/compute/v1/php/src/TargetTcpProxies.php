<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetTcpProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all TargetTcpProxy resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListResponse
     */
	public function computeTargetTcpProxiesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/targetTcpProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetTcpProxyAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetTcpProxyAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified TargetTcpProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteResponse
     */
	public function computeTargetTcpProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies/{targetTcpProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetTcpProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetResponse
     */
	public function computeTargetTcpProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies/{targetTcpProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetTcpProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetTcpProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetTcpProxy resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertResponse
     */
	public function computeTargetTcpProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetTcpProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of TargetTcpProxy resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListResponse
     */
	public function computeTargetTcpProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetTcpProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetTcpProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the BackendService for TargetTcpProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceResponse
     */
	public function computeTargetTcpProxiesSetBackendService(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetTcpProxiesSetBackendServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetBackendServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the ProxyHeaderType for TargetTcpProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderResponse
     */
	public function computeTargetTcpProxiesSetProxyHeader(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetTcpProxiesSetProxyHeaderRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetTcpProxiesSetProxyHeaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}