"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apierror as shared_apierror
from typing import Optional


@dataclasses.dataclass
class ImageWatermarkRequestBody:
    
    image_url: str = dataclasses.field(metadata={'form': { 'field_name': 'image-url' }})
    r"""The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data"""  
    watermark_url: str = dataclasses.field(metadata={'form': { 'field_name': 'watermark-url' }})
    r"""The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data"""  
    bg_color: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'bg-color' }})
    r"""The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of 'transparent' can also be used. For JPG output the default is black (#000000)"""  
    format: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'format' }})
    r"""The output image format, can be either png or jpg"""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'height' }})
    r"""If set resize the resulting image to this height (in px)"""  
    opacity: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'opacity' }})
    r"""The opacity of the watermark (0 to 100)"""  
    position: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'position' }})
    r"""The position of the watermark image, possible values are: <br>center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right"""  
    resize_mode: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'resize-mode' }})
    r"""The resize mode to use, we support 3 main resizing modes: <ul> <li><b>scale</b><br>Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio</li> <li><b>pad</b><br>Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the 'bg-color' value</li> <li><b>crop</b><br>Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image</li> </ul>"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'width' }})
    r"""If set resize the resulting image to this width (in px)"""  
    

@dataclasses.dataclass
class ImageWatermarkResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_error: Optional[shared_apierror.APIError] = dataclasses.field(default=None)
    r"""Your API request has been rejected. Check error code for details"""  
    image_watermark_200_application_json_binary_string: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    