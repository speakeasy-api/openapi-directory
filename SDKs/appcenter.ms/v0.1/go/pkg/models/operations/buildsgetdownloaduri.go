// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BuildsGetDownloadURISecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

// BuildsGetDownloadURIDownloadTypeEnum - The download type
type BuildsGetDownloadURIDownloadTypeEnum string

const (
	BuildsGetDownloadURIDownloadTypeEnumBuild   BuildsGetDownloadURIDownloadTypeEnum = "build"
	BuildsGetDownloadURIDownloadTypeEnumSymbols BuildsGetDownloadURIDownloadTypeEnum = "symbols"
	BuildsGetDownloadURIDownloadTypeEnumLogs    BuildsGetDownloadURIDownloadTypeEnum = "logs"
	BuildsGetDownloadURIDownloadTypeEnumMapping BuildsGetDownloadURIDownloadTypeEnum = "mapping"
	BuildsGetDownloadURIDownloadTypeEnumBundle  BuildsGetDownloadURIDownloadTypeEnum = "bundle"
)

func (e *BuildsGetDownloadURIDownloadTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "build":
		fallthrough
	case "symbols":
		fallthrough
	case "logs":
		fallthrough
	case "mapping":
		fallthrough
	case "bundle":
		*e = BuildsGetDownloadURIDownloadTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsGetDownloadURIDownloadTypeEnum: %s", s)
	}
}

type BuildsGetDownloadURIPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The build ID
	BuildID int64 `pathParam:"style=simple,explode=false,name=build_id"`
	// The download type
	DownloadType BuildsGetDownloadURIDownloadTypeEnum `pathParam:"style=simple,explode=false,name=download_type"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type BuildsGetDownloadURIRequest struct {
	PathParams BuildsGetDownloadURIPathParams
	Security   BuildsGetDownloadURISecurity
}

// BuildsGetDownloadURI200ApplicationJSON - A download reference
type BuildsGetDownloadURI200ApplicationJSON struct {
	// Download URI
	URI string `json:"uri"`
}

type BuildsGetDownloadURIResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BuildsGetDownloadURI200ApplicationJSONObject *BuildsGetDownloadURI200ApplicationJSON
}
