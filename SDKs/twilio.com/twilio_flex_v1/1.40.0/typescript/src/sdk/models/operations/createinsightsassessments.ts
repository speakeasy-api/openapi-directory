/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateInsightsAssessmentsServerList = [
  "https://flex-api.twilio.com",
] as const;

export class CreateInsightsAssessmentsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateInsightsAssessmentsCreateInsightsAssessmentsRequest extends SpeakeasyBase {
  /**
   * The id of the Agent
   */
  @SpeakeasyMetadata({ data: "form, name=AgentId" })
  agentId: string;

  /**
   * The id of the answer selected by user
   */
  @SpeakeasyMetadata({ data: "form, name=AnswerId" })
  answerId: string;

  /**
   * The answer text selected by user
   */
  @SpeakeasyMetadata({ data: "form, name=AnswerText" })
  answerText: string;

  /**
   * The id of the category
   */
  @SpeakeasyMetadata({ data: "form, name=CategoryId" })
  categoryId: string;

  /**
   * The name of the category
   */
  @SpeakeasyMetadata({ data: "form, name=CategoryName" })
  categoryName: string;

  /**
   * The question Id selected for assessment
   */
  @SpeakeasyMetadata({ data: "form, name=MetricId" })
  metricId: string;

  /**
   * The question name of the assessment
   */
  @SpeakeasyMetadata({ data: "form, name=MetricName" })
  metricName: string;

  /**
   * The offset of the conversation.
   */
  @SpeakeasyMetadata({ data: "form, name=Offset" })
  offset: number;

  /**
   * Questionnaire Id of the associated question
   */
  @SpeakeasyMetadata({ data: "form, name=QuestionnaireId" })
  questionnaireId: string;

  /**
   * Segment Id of the conversation
   */
  @SpeakeasyMetadata({ data: "form, name=SegmentId" })
  segmentId: string;

  /**
   * Email of the user assessing conversation
   */
  @SpeakeasyMetadata({ data: "form, name=UserEmail" })
  userEmail: string;

  /**
   * Name of the user assessing conversation
   */
  @SpeakeasyMetadata({ data: "form, name=UserName" })
  userName: string;
}

export class CreateInsightsAssessmentsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateInsightsAssessmentsCreateInsightsAssessmentsRequest;

  /**
   * The Token HTTP request header
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Token" })
  token?: string;
}

export class CreateInsightsAssessmentsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  flexV1InsightsAssessments?: shared.FlexV1InsightsAssessments;
}
