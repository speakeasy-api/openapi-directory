/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
 */
export enum AppPermissionsActionsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
 */
export enum AppPermissionsAdministrationEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
 */
export enum AppPermissionsChecksEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
 */
export enum AppPermissionsContentReferencesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
 */
export enum AppPermissionsContentsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
 */
export enum AppPermissionsDeploymentsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
 */
export enum AppPermissionsEnvironmentsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
 */
export enum AppPermissionsIssuesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
 */
export enum AppPermissionsMembersEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
 */
export enum AppPermissionsMetadataEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationAdministrationEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationHooksEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationPackagesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
 */
export enum AppPermissionsOrganizationPlanEnum {
  Read = "read",
}

/**
 * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 */
export enum AppPermissionsOrganizationProjectsEnum {
  Read = "read",
  Write = "write",
  Admin = "admin",
}

/**
 * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationSecretsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationSelfHostedRunnersEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
 */
export enum AppPermissionsOrganizationUserBlockingEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
 */
export enum AppPermissionsPackagesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
 */
export enum AppPermissionsPagesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
 */
export enum AppPermissionsPullRequestsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
 */
export enum AppPermissionsRepositoryHooksEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 */
export enum AppPermissionsRepositoryProjectsEnum {
  Read = "read",
  Write = "write",
  Admin = "admin",
}

/**
 * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
 */
export enum AppPermissionsSecretScanningAlertsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
 */
export enum AppPermissionsSecretsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
 */
export enum AppPermissionsSecurityEventsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
 */
export enum AppPermissionsSingleFileEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
 */
export enum AppPermissionsStatusesEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
 */
export enum AppPermissionsTeamDiscussionsEnum {
  Read = "read",
  Write = "write",
}

/**
 * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
 */
export enum AppPermissionsVulnerabilityAlertsEnum {
  Read = "read",
}

/**
 * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
 */
export enum AppPermissionsWorkflowsEnum {
  Write = "write",
}

/**
 * The permissions granted to the user-to-server access token.
 */
export class AppPermissions extends SpeakeasyBase {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actions" })
  actions?: AppPermissionsActionsEnum;

  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "administration" })
  administration?: AppPermissionsAdministrationEnum;

  /**
   * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checks" })
  checks?: AppPermissionsChecksEnum;

  /**
   * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_references" })
  contentReferences?: AppPermissionsContentReferencesEnum;

  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contents" })
  contents?: AppPermissionsContentsEnum;

  /**
   * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deployments" })
  deployments?: AppPermissionsDeploymentsEnum;

  /**
   * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environments" })
  environments?: AppPermissionsEnvironmentsEnum;

  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issues" })
  issues?: AppPermissionsIssuesEnum;

  /**
   * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "members" })
  members?: AppPermissionsMembersEnum;

  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: AppPermissionsMetadataEnum;

  /**
   * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_administration" })
  organizationAdministration?: AppPermissionsOrganizationAdministrationEnum;

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_hooks" })
  organizationHooks?: AppPermissionsOrganizationHooksEnum;

  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_packages" })
  organizationPackages?: AppPermissionsOrganizationPackagesEnum;

  /**
   * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_plan" })
  organizationPlan?: AppPermissionsOrganizationPlanEnum;

  /**
   * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_projects" })
  organizationProjects?: AppPermissionsOrganizationProjectsEnum;

  /**
   * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_secrets" })
  organizationSecrets?: AppPermissionsOrganizationSecretsEnum;

  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_self_hosted_runners" })
  organizationSelfHostedRunners?: AppPermissionsOrganizationSelfHostedRunnersEnum;

  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_user_blocking" })
  organizationUserBlocking?: AppPermissionsOrganizationUserBlockingEnum;

  /**
   * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packages" })
  packages?: AppPermissionsPackagesEnum;

  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pages" })
  pages?: AppPermissionsPagesEnum;

  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_requests" })
  pullRequests?: AppPermissionsPullRequestsEnum;

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository_hooks" })
  repositoryHooks?: AppPermissionsRepositoryHooksEnum;

  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository_projects" })
  repositoryProjects?: AppPermissionsRepositoryProjectsEnum;

  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret_scanning_alerts" })
  secretScanningAlerts?: AppPermissionsSecretScanningAlertsEnum;

  /**
   * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secrets" })
  secrets?: AppPermissionsSecretsEnum;

  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "security_events" })
  securityEvents?: AppPermissionsSecurityEventsEnum;

  /**
   * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "single_file" })
  singleFile?: AppPermissionsSingleFileEnum;

  /**
   * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statuses" })
  statuses?: AppPermissionsStatusesEnum;

  /**
   * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "team_discussions" })
  teamDiscussions?: AppPermissionsTeamDiscussionsEnum;

  /**
   * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vulnerability_alerts" })
  vulnerabilityAlerts?: AppPermissionsVulnerabilityAlertsEnum;

  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflows" })
  workflows?: AppPermissionsWorkflowsEnum;
}
