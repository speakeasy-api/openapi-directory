/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListResponse recommenderProjectsLocationsInsightTypesInsightsList(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListRequest.class, baseUrl, "/v1beta1/{parent}/insights", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1ListInsightsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1ListInsightsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1ListInsightsResponse.class);
                res.googleCloudRecommenderV1beta1ListInsightsResponse = out;
            }
        }

        return res;
    }

    /**
     * Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse recommenderProjectsLocationsInsightTypesInsightsMarkAccepted(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest.class, baseUrl, "/v1beta1/{name}:markAccepted", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1MarkInsightAcceptedRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Insight = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Insight out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Insight.class);
                res.googleCloudRecommenderV1beta1Insight = out;
            }
        }

        return res;
    }

    /**
     * Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetResponse recommenderProjectsLocationsRecommendersRecommendationsGet(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetRequest.class, baseUrl, "/v1beta1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsGetResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Recommendation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation.class);
                res.googleCloudRecommenderV1beta1Recommendation = out;
            }
        }

        return res;
    }

    /**
     * Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListResponse recommenderProjectsLocationsRecommendersRecommendationsList(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListRequest.class, baseUrl, "/v1beta1/{parent}/recommendations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1ListRecommendationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1ListRecommendationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1ListRecommendationsResponse.class);
                res.googleCloudRecommenderV1beta1ListRecommendationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest.class, baseUrl, "/v1beta1/{name}:markClaimed", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1MarkRecommendationClaimedRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Recommendation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation.class);
                res.googleCloudRecommenderV1beta1Recommendation = out;
            }
        }

        return res;
    }

    /**
     * Mark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest.class, baseUrl, "/v1beta1/{name}:markDismissed", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1MarkRecommendationDismissedRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Recommendation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation.class);
                res.googleCloudRecommenderV1beta1Recommendation = out;
            }
        }

        return res;
    }

    /**
     * Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse recommenderProjectsLocationsRecommendersRecommendationsMarkFailed(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest.class, baseUrl, "/v1beta1/{name}:markFailed", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1MarkRecommendationFailedRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Recommendation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation.class);
                res.googleCloudRecommenderV1beta1Recommendation = out;
            }
        }

        return res;
    }

    /**
     * Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest.class, baseUrl, "/v1beta1/{name}:markSucceeded", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1MarkRecommendationSucceededRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1Recommendation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1Recommendation.class);
                res.googleCloudRecommenderV1beta1Recommendation = out;
            }
        }

        return res;
    }

    /**
     * Updates a Recommender Config. This will create a new revision of the config.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigResponse recommenderProjectsLocationsRecommendersUpdateConfig(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigRequest request, org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigRequest.class, baseUrl, "/v1beta1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudRecommenderV1beta1RecommenderConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigResponse res = new org.openapis.openapi.models.operations.RecommenderProjectsLocationsRecommendersUpdateConfigResponse(contentType, httpRes.statusCode()) {{
            googleCloudRecommenderV1beta1RecommenderConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1RecommenderConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecommenderV1beta1RecommenderConfig.class);
                res.googleCloudRecommenderV1beta1RecommenderConfig = out;
            }
        }

        return res;
    }
}