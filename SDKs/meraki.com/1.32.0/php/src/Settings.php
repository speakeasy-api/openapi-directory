<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Settings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return the uplink settings for an MX appliance
     * 
     * Return the uplink settings for an MX appliance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse
     */
	public function getDeviceApplianceUplinksSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/uplinks/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceApplianceUplinksSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns video settings for the given camera
     * 
     * Returns video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
     */
	public function getDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the bluetooth settings for a wireless device
     * 
     * Return the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
     */
	public function getDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the radio settings of a device
     * 
     * Return the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
     */
	public function getDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the alert configuration for this network
     * 
     * Return the alert configuration for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse
     */
	public function getNetworkAlertsSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/alerts/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAlertsSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the firewall settings for this network
     * 
     * Return the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
     */
	public function getNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the appliance settings for a network
     * 
     * Return the appliance settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse
     */
	public function getNetworkApplianceSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the enabled status of VLANs for the network
     * 
     * Returns the enabled status of VLANs for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse
     */
	public function getNetworkApplianceVlansSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVlansSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the settings for a network
     * 
     * Return the settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse
     */
	public function getNetworkSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the switch network settings
     * 
     * Returns the switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
     */
	public function getNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
     */
	public function getNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the wireless settings for a network
     * 
     * Return the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
     */
	public function getNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the splash page settings for the given SSID
     * 
     * Display the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
     */
	public function getNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns global adaptive policy settings in an organization
     * 
     * Returns global adaptive policy settings in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
     */
	public function getOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the uplink settings for an MX appliance
     * 
     * Update the uplink settings for an MX appliance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse
     */
	public function updateDeviceApplianceUplinksSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/uplinks/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceApplianceUplinksSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update video settings for the given camera
     * 
     * Update video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
     */
	public function updateDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the bluetooth settings for a wireless device
     * 
     * Update the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
     */
	public function updateDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the radio settings of a device
     * 
     * Update the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
     */
	public function updateDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the alert configuration for this network
     * 
     * Update the alert configuration for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse
     */
	public function updateNetworkAlertsSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/alerts/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkAlertsSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the firewall settings for this network
     * 
     * Update the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
     */
	public function updateNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the appliance settings for a network
     * 
     * Update the appliance settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse
     */
	public function updateNetworkApplianceSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable/Disable VLANs for the given network
     * 
     * Enable/Disable VLANs for the given network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse
     */
	public function updateNetworkApplianceVlansSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceVlansSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the settings for a network
     * 
     * Update the settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse
     */
	public function updateNetworkSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update switch network settings
     * 
     * Update switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
     */
	public function updateNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Bluetooth settings for a network
     * 
     * Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
     */
	public function updateNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the wireless settings for a network
     * 
     * Update the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
     */
	public function updateNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the splash page settings for the given SSID
     * 
     * Modify the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
     */
	public function updateNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update global adaptive policy settings
     * 
     * Update global adaptive policy settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
     */
	public function updateOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}