// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetInvestorSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type GetInvestorRequest struct {
	// Investor Id
	InvestorID string `pathParam:"style=simple,explode=false,name=investor_id"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// GetInvestor500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetInvestor500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestor429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetInvestor429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestor404ApplicationJSON - The specified resource was not found
type GetInvestor404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestor403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetInvestor403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestor401ApplicationJSON - You do not have permissions to access this resource.
type GetInvestor401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestor400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetInvestor400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type GetInvestorRootTypeForInvestorAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    string  `json:"country"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

type GetInvestorRootTypeForInvestorDateOfBirth struct {
	// two digit string `DD`
	Day *string `json:"day,omitempty"`
	// two digit string `MM`
	Month *string `json:"month,omitempty"`
	// four digit string `YYYY`
	Year *string `json:"year,omitempty"`
}

type GetInvestorRootTypeForInvestorDealingStatusEnum string

const (
	GetInvestorRootTypeForInvestorDealingStatusEnumInactive GetInvestorRootTypeForInvestorDealingStatusEnum = "inactive"
	GetInvestorRootTypeForInvestorDealingStatusEnumActive   GetInvestorRootTypeForInvestorDealingStatusEnum = "active"
)

func (e GetInvestorRootTypeForInvestorDealingStatusEnum) ToPointer() *GetInvestorRootTypeForInvestorDealingStatusEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inactive":
		fallthrough
	case "active":
		*e = GetInvestorRootTypeForInvestorDealingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorDealingStatusEnum: %v", v)
	}
}

// GetInvestorRootTypeForInvestorEmploymentStatusEnum - Status of an investor best describes their personal circumstances.
type GetInvestorRootTypeForInvestorEmploymentStatusEnum string

const (
	GetInvestorRootTypeForInvestorEmploymentStatusEnumEmployed                GetInvestorRootTypeForInvestorEmploymentStatusEnum = "employed"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumSelfEmployed            GetInvestorRootTypeForInvestorEmploymentStatusEnum = "self_employed"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumPensioner               GetInvestorRootTypeForInvestorEmploymentStatusEnum = "pensioner"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumChildUnder16            GetInvestorRootTypeForInvestorEmploymentStatusEnum = "child_under_16"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumInFullTimeEducation     GetInvestorRootTypeForInvestorEmploymentStatusEnum = "in_full_time_education"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumUnemployed              GetInvestorRootTypeForInvestorEmploymentStatusEnum = "unemployed"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumCaringForAPersonOver16  GetInvestorRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_over_16"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumCaringForAPersonUnder16 GetInvestorRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_under_16"
	GetInvestorRootTypeForInvestorEmploymentStatusEnumOther                   GetInvestorRootTypeForInvestorEmploymentStatusEnum = "other"
)

func (e GetInvestorRootTypeForInvestorEmploymentStatusEnum) ToPointer() *GetInvestorRootTypeForInvestorEmploymentStatusEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = GetInvestorRootTypeForInvestorEmploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorEmploymentStatusEnum: %v", v)
	}
}

type GetInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type GetInvestorRootTypeForInvestorExpressionOfWishSippNominees struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// GetInvestorRootTypeForInvestorExpressionOfWish - Beneficiary and nominee list of the expression of wish.
type GetInvestorRootTypeForInvestorExpressionOfWish struct {
	SippBeneficiaries []GetInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	SippNominees      []GetInvestorRootTypeForInvestorExpressionOfWishSippNominees      `json:"sipp_nominees,omitempty"`
}

type GetInvestorRootTypeForInvestorIDNumbers struct {
	IDNumber string `json:"id_number"`
	IDType   string `json:"id_type"`
}

type GetInvestorRootTypeForInvestorKycAmlStatusEnum string

const (
	GetInvestorRootTypeForInvestorKycAmlStatusEnumSubmitted      GetInvestorRootTypeForInvestorKycAmlStatusEnum = "submitted"
	GetInvestorRootTypeForInvestorKycAmlStatusEnumKycFailedError GetInvestorRootTypeForInvestorKycAmlStatusEnum = "kyc_failed_error"
	GetInvestorRootTypeForInvestorKycAmlStatusEnumPending        GetInvestorRootTypeForInvestorKycAmlStatusEnum = "pending"
	GetInvestorRootTypeForInvestorKycAmlStatusEnumClear          GetInvestorRootTypeForInvestorKycAmlStatusEnum = "clear"
	GetInvestorRootTypeForInvestorKycAmlStatusEnumNotStarted     GetInvestorRootTypeForInvestorKycAmlStatusEnum = "not_started"
)

func (e GetInvestorRootTypeForInvestorKycAmlStatusEnum) ToPointer() *GetInvestorRootTypeForInvestorKycAmlStatusEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = GetInvestorRootTypeForInvestorKycAmlStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorKycAmlStatusEnum: %v", v)
	}
}

type GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumPrimary  GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumEnhanced GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp12     GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp14     GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp14     GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp16     GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp16     GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) ToPointer() *GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum: %v", v)
	}
}

type GetInvestorRootTypeForInvestorLtaProtectionDetails struct {
	// Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Required only when the lta_protection_type is primary
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionSchemeAdministratorReference *string                                                                 `json:"lta_protection_scheme_administrator_reference,omitempty"`
	LtaProtectionType                         GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

type GetInvestorRootTypeForInvestorStatusEnum string

const (
	GetInvestorRootTypeForInvestorStatusEnumKycPending GetInvestorRootTypeForInvestorStatusEnum = "kyc_pending"
	GetInvestorRootTypeForInvestorStatusEnumKycFailed  GetInvestorRootTypeForInvestorStatusEnum = "kyc_failed"
	GetInvestorRootTypeForInvestorStatusEnumInactive   GetInvestorRootTypeForInvestorStatusEnum = "inactive"
	GetInvestorRootTypeForInvestorStatusEnumActive     GetInvestorRootTypeForInvestorStatusEnum = "active"
)

func (e GetInvestorRootTypeForInvestorStatusEnum) ToPointer() *GetInvestorRootTypeForInvestorStatusEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kyc_pending":
		fallthrough
	case "kyc_failed":
		fallthrough
	case "inactive":
		fallthrough
	case "active":
		*e = GetInvestorRootTypeForInvestorStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorStatusEnum: %v", v)
	}
}

// GetInvestorRootTypeForInvestorTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
type GetInvestorRootTypeForInvestorTaxResidenceEnum string

const (
	GetInvestorRootTypeForInvestorTaxResidenceEnumGbEng GetInvestorRootTypeForInvestorTaxResidenceEnum = "GB-ENG"
	GetInvestorRootTypeForInvestorTaxResidenceEnumGbNir GetInvestorRootTypeForInvestorTaxResidenceEnum = "GB-NIR"
	GetInvestorRootTypeForInvestorTaxResidenceEnumGbSct GetInvestorRootTypeForInvestorTaxResidenceEnum = "GB-SCT"
	GetInvestorRootTypeForInvestorTaxResidenceEnumGbWls GetInvestorRootTypeForInvestorTaxResidenceEnum = "GB-WLS"
)

func (e GetInvestorRootTypeForInvestorTaxResidenceEnum) ToPointer() *GetInvestorRootTypeForInvestorTaxResidenceEnum {
	return &e
}

func (e *GetInvestorRootTypeForInvestorTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = GetInvestorRootTypeForInvestorTaxResidenceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestorRootTypeForInvestorTaxResidenceEnum: %v", v)
	}
}

// GetInvestorRootTypeForInvestor - JSON for the Investor resource type
type GetInvestorRootTypeForInvestor struct {
	Address GetInvestorRootTypeForInvestorAddress `json:"address"`
	// Array of bank account IDs
	BankAccounts  []string                                         `json:"bank_accounts,omitempty"`
	CreatedAt     *time.Time                                       `json:"created_at,omitempty"`
	DateOfBirth   GetInvestorRootTypeForInvestorDateOfBirth        `json:"date_of_birth"`
	DealingStatus *GetInvestorRootTypeForInvestorDealingStatusEnum `json:"dealing_status,omitempty"`
	Email         *string                                          `json:"email,omitempty"`
	// Status of an investor best describes their personal circumstances.
	EmploymentStatus *GetInvestorRootTypeForInvestorEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Beneficiary and nominee list of the expression of wish.
	ExpressionOfWish        *GetInvestorRootTypeForInvestorExpressionOfWish `json:"expression_of_wish,omitempty"`
	FirstName               string                                          `json:"first_name"`
	Gender                  *string                                         `json:"gender,omitempty"`
	HomeNumber              *string                                         `json:"home_number,omitempty"`
	IDNumbers               []GetInvestorRootTypeForInvestorIDNumbers       `json:"id_numbers,omitempty"`
	InvestorID              string                                          `json:"investor_id"`
	KycAmlStatus            *GetInvestorRootTypeForInvestorKycAmlStatusEnum `json:"kyc_aml_status,omitempty"`
	KycAmlStatusLastUpdated *time.Time                                      `json:"kyc_aml_status_last_updated,omitempty"`
	LastName                string                                          `json:"last_name"`
	// Additional details of the lifetime allowance protections of the investor
	LtaProtectionDetails []GetInvestorRootTypeForInvestorLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID           *string                                              `json:"mifid_tax_id,omitempty"`
	MobileNumber         *string                                              `json:"mobile_number,omitempty"`
	// Whether the investor has triggered the Money Purchase Annual Allowance.
	MpaaTriggered *bool `json:"mpaa_triggered,omitempty"`
	// Date of triggering the Money Purchase Annual Allowance. It is required if mpaa_triggered is true.
	MpaaTriggeredDate *string `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality      string  `json:"nationality"`
	OfficeNumber     *string `json:"office_number,omitempty"`
	ReferenceVersion *int64  `json:"reference_version,omitempty"`
	// Intended retirement age of the investor
	RetirementAge *float64                                  `json:"retirement_age,omitempty"`
	Status        *GetInvestorRootTypeForInvestorStatusEnum `json:"status,omitempty"`
	TaxID         string                                    `json:"tax_id"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
	TaxResidence          *GetInvestorRootTypeForInvestorTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant bool                                            `json:"tax_residency_compliant"`
	Title                 *string                                         `json:"title,omitempty"`
	UpdatedAt             *time.Time                                      `json:"updated_at,omitempty"`
}

type GetInvestorResponse struct {
	ContentType string
	// success
	RootTypeForInvestor *GetInvestorRootTypeForInvestor
	StatusCode          int
	RawResponse         *http.Response
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetInvestor400ApplicationJSONObject *GetInvestor400ApplicationJSON
	// You do not have permissions to access this resource.
	GetInvestor401ApplicationJSONObject *GetInvestor401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetInvestor403ApplicationJSONObject *GetInvestor403ApplicationJSON
	// The specified resource was not found
	GetInvestor404ApplicationJSONObject *GetInvestor404ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetInvestor429ApplicationJSONObject *GetInvestor429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetInvestor500ApplicationJSONObject *GetInvestor500ApplicationJSON
}
