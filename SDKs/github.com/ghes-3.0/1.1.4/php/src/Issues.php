<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Issues 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add assignees to an issue
     * 
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-assignees-to-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-assignees-to-an-issue
     */
	public function issuesAddAssignees(
        \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/assignees', \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesAddAssigneesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Issue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add labels to an issue
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-labels-to-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-labels-to-an-issue
     */
	public function issuesAddLabels(
        \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesAddLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a user can be assigned
     * 
     * Checks if a user has permission to be assigned to an issue in this repository.
     * 
     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     * 
     * Otherwise a `404` status code is returned.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#check-if-a-user-can-be-assigned - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#check-if-a-user-can-be-assigned
     */
	public function issuesCheckUserCanBeAssigned(
        \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/assignees/{assignee}', \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesCheckUserCanBeAssignedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an issue
     * 
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
     * 
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesCreateResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue
     */
	public function issuesCreate(
        \OpenAPI\OpenAPI\Models\Operations\IssuesCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues', \OpenAPI\OpenAPI\Models\Operations\IssuesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Issue', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issuesCreate503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IssuesCreate503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an issue comment
     * 
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment
     */
	public function issuesCreateComment(
        \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/comments', \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesCreateCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IssueComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a label
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-label - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-label
     */
	public function issuesCreateLabel(
        \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesCreateLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->label = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Label', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a milestone
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-milestone - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-milestone
     */
	public function issuesCreateMilestone(
        \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones', \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesCreateMilestoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->milestone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Milestone', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an issue comment
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-an-issue-comment
     */
	public function issuesDeleteComment(
        \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a label
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-label - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-label
     */
	public function issuesDeleteLabel(
        \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/labels/{name}', \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a milestone
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-milestone - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-milestone
     */
	public function issuesDeleteMilestone(
        \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones/{milestone_number}', \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesDeleteMilestoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an issue
     * 
     * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
     * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
     * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
     * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
     * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
     * to the [`issues`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#issues) webhook.
     * 
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesGetResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue
     */
	public function issuesGet(
        \OpenAPI\OpenAPI\Models\Operations\IssuesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}', \OpenAPI\OpenAPI\Models\Operations\IssuesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Issue', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 301 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * Get an issue comment
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-comment
     */
	public function issuesGetComment(
        \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesGetCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IssueComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an issue event
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-event - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-event
     */
	public function issuesGetEvent(
        \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/events/{event_id}', \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesGetEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IssueEvent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a label
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-label - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-label
     */
	public function issuesGetLabel(
        \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/labels/{name}', \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesGetLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->label = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Label', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a milestone
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-milestone - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-milestone
     */
	public function issuesGetMilestone(
        \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones/{milestone_number}', \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesGetMilestoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->milestone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Milestone', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List issues assigned to the authenticated user
     * 
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
     * necessarily assigned to you.
     * 
     * 
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issues-assigned-to-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issues-assigned-to-the-authenticated-user
     */
	public function issuesList(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/issues');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Issue>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List assignees
     * 
     * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-assignees - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-assignees
     */
	public function issuesListAssignees(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/assignees', \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListAssigneesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List issue comments
     * 
     * Issue Comments are ordered by ascending ID.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments
     */
	public function issuesListComments(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/comments', \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueComments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IssueComment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List issue comments for a repository
     * 
     * By default, Issue Comments are ordered by ascending ID.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments-for-a-repository
     */
	public function issuesListCommentsForRepo(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments', \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListCommentsForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueComments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IssueComment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List issue events
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events
     */
	public function issuesListEvents(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/events', \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueEventForIssues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List issue events for a repository
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events-for-a-repository
     */
	public function issuesListEventsForRepo(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/events', \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueEvents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IssueEvent>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List timeline events for an issue
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-timeline-events-for-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-timeline-events-for-an-issue
     */
	public function issuesListEventsForTimeline(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/timeline', \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListEventsForTimelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timelineIssueEvents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List user account issues assigned to the authenticated user
     * 
     * List issues across owned and member repositories assigned to the authenticated user.
     * 
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user
     */
	public function issuesListForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/issues');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Issue>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List organization issues assigned to the authenticated user
     * 
     * List issues in an organization assigned to the authenticated user.
     * 
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user
     */
	public function issuesListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/issues', \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Issue>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository issues
     * 
     * List issues in a repository.
     * 
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-repository-issues - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-repository-issues
     */
	public function issuesListForRepo(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues', \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Issue>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 301 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List labels for issues in a milestone
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-issues-in-a-milestone - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-issues-in-a-milestone
     */
	public function issuesListLabelsForMilestone(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones/{milestone_number}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForMilestoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List labels for a repository
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-a-repository
     */
	public function issuesListLabelsForRepo(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List labels for an issue
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-an-issue
     */
	public function issuesListLabelsOnIssue(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListLabelsOnIssueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List milestones
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-milestones - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-milestones
     */
	public function issuesListMilestones(
        \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones', \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesListMilestonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->milestones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Milestone>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock an issue
     * 
     * Users with push access can lock an issue or pull request's conversation.
     * 
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#lock-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesLockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesLockResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#lock-an-issue
     */
	public function issuesLock(
        \OpenAPI\OpenAPI\Models\Operations\IssuesLockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesLockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/lock', \OpenAPI\OpenAPI\Models\Operations\IssuesLockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesLockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove all labels from an issue
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-all-labels-from-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-all-labels-from-an-issue
     */
	public function issuesRemoveAllLabels(
        \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAllLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove assignees from an issue
     * 
     * Removes one or more assignees from an issue.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-assignees-from-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-assignees-from-an-issue
     */
	public function issuesRemoveAssignees(
        \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/assignees', \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveAssigneesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Issue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a label from an issue
     * 
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-a-label-from-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-a-label-from-an-issue
     */
	public function issuesRemoveLabel(
        \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}', \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesRemoveLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set labels for an issue
     * 
     * Removes any previous labels and sets the new labels for an issue.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#set-labels-for-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#set-labels-for-an-issue
     */
	public function issuesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/labels', \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Label>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unlock an issue
     * 
     * Users with push access can unlock an issue's conversation.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#unlock-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#unlock-an-issue
     */
	public function issuesUnlock(
        \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}/lock', \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesUnlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an issue
     * 
     * Issue owners and users with push access can edit an issue.
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues/#update-an-issue - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues/#update-an-issue
     */
	public function issuesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/{issue_number}', \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Issue', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 301 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issuesUpdate503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IssuesUpdate503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an issue comment
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-an-issue-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-an-issue-comment
     */
	public function issuesUpdateComment(
        \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/issues/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->issueComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IssueComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a label
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-label - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-label
     */
	public function issuesUpdateLabel(
        \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/labels/{name}', \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->label = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Label', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a milestone
     * 
     * https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-milestone - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneResponse
     * @see https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-milestone
     */
	public function issuesUpdateMilestone(
        \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/milestones/{milestone_number}', \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IssuesUpdateMilestoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->milestone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Milestone', 'json');
            }
        }

        return $response;
    }
}