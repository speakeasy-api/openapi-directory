/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ApiVersion } from "./apiversion";
import { Expose, Transform } from "class-transformer";

/**
 * Meta information about API
 */
export class Api extends SpeakeasyBase {
  /**
   * Timestamp when the API was first added to the directory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  added: Date;

  /**
   * Recommended version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred" })
  preferred: string;

  /**
   * List of supported versions of the API
   */
  @SpeakeasyMetadata({ elemType: ApiVersion })
  @Expose({ name: "versions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ApiVersion> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ApiVersion);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  versions: Record<string, ApiVersion>;
}
