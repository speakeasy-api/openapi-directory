// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobStateEnum - Output only. The current state of the job.
type JobStateEnum string

const (
	JobStateEnumProcessingStateUnspecified JobStateEnum = "PROCESSING_STATE_UNSPECIFIED"
	JobStateEnumPending                    JobStateEnum = "PENDING"
	JobStateEnumRunning                    JobStateEnum = "RUNNING"
	JobStateEnumSucceeded                  JobStateEnum = "SUCCEEDED"
	JobStateEnumFailed                     JobStateEnum = "FAILED"
)

func (e *JobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING_STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = JobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStateEnum: %s", s)
	}
}

// Job - Transcoding job resource.
type Job struct {
	// Job configuration
	Config *JobConfig `json:"config,omitempty"`
	// Output only. The time the job was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The time the transcoding finished.
	EndTime *string `json:"endTime,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	InputURI *string `json:"inputUri,omitempty"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	Labels map[string]string `json:"labels,omitempty"`
	// The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`
	Name *string `json:"name,omitempty"`
	// Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	OutputURI *string `json:"outputUri,omitempty"`
	// Output only. The time the transcoding started.
	StartTime *string `json:"startTime,omitempty"`
	// Output only. The current state of the job.
	State *JobStateEnum `json:"state,omitempty"`
	// Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
	TemplateID *string `json:"templateId,omitempty"`
	// Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
	TTLAfterCompletionDays *int `json:"ttlAfterCompletionDays,omitempty"`
}

// JobInput - Transcoding job resource.
type JobInput struct {
	// Job configuration
	Config *JobConfig `json:"config,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	InputURI *string `json:"inputUri,omitempty"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	Labels map[string]string `json:"labels,omitempty"`
	// The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`
	Name *string `json:"name,omitempty"`
	// Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	OutputURI *string `json:"outputUri,omitempty"`
	// Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
	TemplateID *string `json:"templateId,omitempty"`
	// Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
	TTLAfterCompletionDays *int `json:"ttlAfterCompletionDays,omitempty"`
}
