// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type StartPaymentAuthorisationSecurity struct {
	BearerAuthOAuth *shared.SchemeBearerAuthOAuth `security:"scheme,type=http,subtype=bearer"`
}

type StartPaymentAuthorisationPathParams struct {
	// The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).
	// The ASPSP will publish which of the payment products/endpoints will be supported.
	//
	// The following payment products are supported:
	//   - domestic-swiss-credit-transfers-isr
	//   - domestic-swiss-credit-transfers
	//   - domestic-swiss-credit-transfers-qr
	//   - domestic-swiss-foreign-credit-transfers
	//   - swiss-sepa-credit-transfers
	//   - swiss-cross-border-credit-transfers
	//   - pain.001-sepa-credit-transfers
	//   - pain.001-cross-border-credit-transfers
	//   - pain.001-swiss-six-credit-transfers
	//
	// **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,
	// the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.
	// Further XML schemes might be supported by some communities.
	//
	// **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.
	// There are plenty of country specificic scheme variants.
	//
	PaymentProduct shared.PaymentProductEnum `pathParam:"style=simple,explode=false,name=payment-product"`
	// Payment service:
	//
	// Possible values are:
	// * payments
	// * bulk-payments
	// * periodic-payments
	//
	PaymentService shared.PaymentServiceEnum `pathParam:"style=simple,explode=false,name=payment-service"`
	// Resource identification of the generated payment initiation resource.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
}

type StartPaymentAuthorisationHeaders struct {
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateID *string `header:"style=simple,explode=false,name=PSU-Corporate-ID"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateIDType *string `header:"style=simple,explode=false,name=PSU-Corporate-ID-Type"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Client ID of the PSU in the ASPSP client interface.
	//
	// Might be mandated in the ASPSP's documentation.
	//
	// It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
	// AIS service in the same session.
	// In this case the ASPSP might check whether PSU-ID and token match,
	// according to ASPSP documentation.
	//
	PsuID *string `header:"style=simple,explode=false,name=PSU-ID"`
	// Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
	//
	// In this case, the mean and use are then defined in the ASPSP's documentation.
	//
	PSUIDType *string `header:"style=simple,explode=false,name=PSU-ID-Type"`
	// The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case
	// of a negative result of the redirect SCA method. This might be ignored by the ASPSP.
	//
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// The string has the form
	//
	// status=X1, ..., Xn
	//
	// where Xi is one of the constants SCA, PROCESS, LAST and where constants are not
	// repeated.
	// The usage of the constants supports the of following semantics:
	//
	//   SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.
	//
	//   PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.
	//   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.
	//
	// This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.
	//
	TPPNotificationContentPreferred *string `header:"style=simple,explode=false,name=TPP-Notification-Content-Preferred"`
	// URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent.
	// This header field may by ignored by the ASPSP.
	//
	// For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:
	//
	// URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.
	//
	// Wildcard definitions shall be taken into account for compliance checks by the ASPSP.
	//  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.
	//
	TPPNotificationURI *string `header:"style=simple,explode=false,name=TPP-Notification-URI"`
	// If it equals "true", the TPP prefers a redirect over an embedded SCA approach.
	// If it equals "false", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled
	// SCA approach, depending on the choice of the SCA procedure by the TPP/PSU.
	// If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the
	// TPP/PSU.
	//
	TPPRedirectPreferred *bool `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI of the TPP, where the transaction flow shall be redirected to after a Redirect.
	//
	// Mandated for the Redirect SCA Approach, specifically
	// when TPP-Redirect-Preferred equals "true".
	// It is recommended to always use this header field.
	//
	// **Remark for Future:**
	// This field might be changed to mandatory in the next version of the specification.
	//
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
}

type StartPaymentAuthorisationRequestBodyType string

const (
	StartPaymentAuthorisationRequestBodyTypeAny                           StartPaymentAuthorisationRequestBodyType = "any"
	StartPaymentAuthorisationRequestBodyTypeUpdatePsuAuthentication       StartPaymentAuthorisationRequestBodyType = "updatePsuAuthentication"
	StartPaymentAuthorisationRequestBodyTypeSelectPsuAuthenticationMethod StartPaymentAuthorisationRequestBodyType = "selectPsuAuthenticationMethod"
	StartPaymentAuthorisationRequestBodyTypeTransactionAuthorisation      StartPaymentAuthorisationRequestBodyType = "transactionAuthorisation"
)

type StartPaymentAuthorisationRequestBody struct {
	Any                           interface{}
	UpdatePsuAuthentication       *shared.UpdatePsuAuthentication
	SelectPsuAuthenticationMethod *shared.SelectPsuAuthenticationMethod
	TransactionAuthorisation      *shared.TransactionAuthorisation

	Type StartPaymentAuthorisationRequestBodyType
}

func CreateStartPaymentAuthorisationRequestBodyAny(any interface{}) StartPaymentAuthorisationRequestBody {
	typ := StartPaymentAuthorisationRequestBodyTypeAny

	return StartPaymentAuthorisationRequestBody{
		Any:  &any,
		Type: typ,
	}
}

func CreateStartPaymentAuthorisationRequestBodyUpdatePsuAuthentication(updatePsuAuthentication shared.UpdatePsuAuthentication) StartPaymentAuthorisationRequestBody {
	typ := StartPaymentAuthorisationRequestBodyTypeUpdatePsuAuthentication

	return StartPaymentAuthorisationRequestBody{
		UpdatePsuAuthentication: &updatePsuAuthentication,
		Type:                    typ,
	}
}

func CreateStartPaymentAuthorisationRequestBodySelectPsuAuthenticationMethod(selectPsuAuthenticationMethod shared.SelectPsuAuthenticationMethod) StartPaymentAuthorisationRequestBody {
	typ := StartPaymentAuthorisationRequestBodyTypeSelectPsuAuthenticationMethod

	return StartPaymentAuthorisationRequestBody{
		SelectPsuAuthenticationMethod: &selectPsuAuthenticationMethod,
		Type:                          typ,
	}
}

func CreateStartPaymentAuthorisationRequestBodyTransactionAuthorisation(transactionAuthorisation shared.TransactionAuthorisation) StartPaymentAuthorisationRequestBody {
	typ := StartPaymentAuthorisationRequestBodyTypeTransactionAuthorisation

	return StartPaymentAuthorisationRequestBody{
		TransactionAuthorisation: &transactionAuthorisation,
		Type:                     typ,
	}
}

func (u *StartPaymentAuthorisationRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = StartPaymentAuthorisationRequestBodyTypeAny
		return nil
	}

	updatePsuAuthentication := new(shared.UpdatePsuAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuAuthentication); err == nil {
		u.UpdatePsuAuthentication = updatePsuAuthentication
		u.Type = StartPaymentAuthorisationRequestBodyTypeUpdatePsuAuthentication
		return nil
	}

	selectPsuAuthenticationMethod := new(shared.SelectPsuAuthenticationMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectPsuAuthenticationMethod); err == nil {
		u.SelectPsuAuthenticationMethod = selectPsuAuthenticationMethod
		u.Type = StartPaymentAuthorisationRequestBodyTypeSelectPsuAuthenticationMethod
		return nil
	}

	transactionAuthorisation := new(shared.TransactionAuthorisation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionAuthorisation); err == nil {
		u.TransactionAuthorisation = transactionAuthorisation
		u.Type = StartPaymentAuthorisationRequestBodyTypeTransactionAuthorisation
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StartPaymentAuthorisationRequestBody) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.UpdatePsuAuthentication != nil {
		return json.Marshal(u.UpdatePsuAuthentication)
	}

	if u.SelectPsuAuthenticationMethod != nil {
		return json.Marshal(u.SelectPsuAuthenticationMethod)
	}

	if u.TransactionAuthorisation != nil {
		return json.Marshal(u.TransactionAuthorisation)
	}

	return nil, nil
}

type StartPaymentAuthorisationRequest struct {
	PathParams StartPaymentAuthorisationPathParams
	Headers    StartPaymentAuthorisationHeaders
	Request    *StartPaymentAuthorisationRequestBody `request:"mediaType=application/json"`
	Security   StartPaymentAuthorisationSecurity
}

type StartPaymentAuthorisationResponse struct {
	ContentType string
	// Bad Request
	Error400NGPIS *shared.Error400NGPIS
	// Bad Request
	Error400PIS *shared.Error400PIS
	// Unauthorized
	Error401NGPIS *shared.Error401NGPIS
	// Unauthorized
	Error401PIS *shared.Error401PIS
	// Forbidden
	Error403NGPIS *shared.Error403NGPIS
	// Forbidden
	Error403PIS *shared.Error403PIS
	// Not found
	Error404NGPIS *shared.Error404NGPIS
	// Not found
	Error404PIS *shared.Error404PIS
	// Method Not Allowed
	Error405NGPIS *shared.Error405NGPIS
	// Method Not Allowed
	Error405PIS *shared.Error405PIS
	// Conflict
	Error409NGPIS *shared.Error409NGPIS
	// Conflict
	Error409PIS *shared.Error409PIS
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Created
	StartScaprocessResponse *shared.StartScaprocessResponse
}
