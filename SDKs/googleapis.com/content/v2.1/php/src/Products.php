<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Products 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves, inserts, and deletes multiple products in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchResponse
     */
	public function contentProductsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "productsCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a product from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteResponse
     */
	public function contentProductsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/products/{productId}', \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a product from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetResponse
     */
	public function contentProductsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/products/{productId}', \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertResponse
     */
	public function contentProductsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/products', \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "product", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsListResponse
     */
	public function contentProductsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/products', \OpenAPI\OpenAPI\Models\Operations\ContentProductsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing product in your Merchant Center account. Only updates attributes provided in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateResponse
     */
	public function contentProductsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/products/{productId}', \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "product", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentProductsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }

        return $response;
    }
}