// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateUserPoolClientXAmzTargetEnum
type CreateUserPoolClientXAmzTargetEnum string

const (
	CreateUserPoolClientXAmzTargetEnumAwsCognitoIdentityProviderServiceCreateUserPoolClient CreateUserPoolClientXAmzTargetEnum = "AWSCognitoIdentityProviderService.CreateUserPoolClient"
)

func (e CreateUserPoolClientXAmzTargetEnum) ToPointer() *CreateUserPoolClientXAmzTargetEnum {
	return &e
}

func (e *CreateUserPoolClientXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSCognitoIdentityProviderService.CreateUserPoolClient":
		*e = CreateUserPoolClientXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserPoolClientXAmzTargetEnum: %v", v)
	}
}

type CreateUserPoolClientRequest struct {
	CreateUserPoolClientRequest shared.CreateUserPoolClientRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateUserPoolClientXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateUserPoolClientResponse struct {
	ContentType string
	// Success
	CreateUserPoolClientResponse *shared.CreateUserPoolClientResponse
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidOAuthFlowException
	InvalidOAuthFlowException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ScopeDoesNotExistException
	ScopeDoesNotExistException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
