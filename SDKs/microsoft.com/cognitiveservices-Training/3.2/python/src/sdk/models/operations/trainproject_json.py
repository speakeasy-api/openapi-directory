"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import customvisionerror as shared_customvisionerror
from ..shared import iteration as shared_iteration
from ..shared import trainingparameters as shared_trainingparameters
from enum import Enum
from typing import Optional

class TrainProjectJSONTrainingTypeEnum(str, Enum):
    r"""The type of training to use to train the project (default: Regular)."""
    REGULAR = 'Regular'
    ADVANCED = 'Advanced'


@dataclasses.dataclass
class TrainProjectJSONRequest:
    
    project_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""The project id."""  
    force_train: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'forceTrain', 'style': 'form', 'explode': True }})
    r"""Whether to force train even if dataset and configuration does not change (default: false)."""  
    notification_email_address: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'notificationEmailAddress', 'style': 'form', 'explode': True }})
    r"""The email address to send notification to when training finishes (default: null)."""  
    reserved_budget_in_hours: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reservedBudgetInHours', 'style': 'form', 'explode': True }})
    r"""The number of hours reserved as budget for training (if applicable)."""  
    training_parameters: Optional[shared_trainingparameters.TrainingParameters] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Additional training parameters passed in to control how the project is trained."""  
    training_type: Optional[TrainProjectJSONTrainingTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'trainingType', 'style': 'form', 'explode': True }})
    r"""The type of training to use to train the project (default: Regular)."""  
    

@dataclasses.dataclass
class TrainProjectJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    custom_vision_error: Optional[shared_customvisionerror.CustomVisionError] = dataclasses.field(default=None)
    r"""Error response"""  
    iteration: Optional[shared_iteration.Iteration] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    