"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import formfieldentity as shared_formfieldentity
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FormFieldSetEntity:
    r"""List Form Field Sets"""
    
    form_fields: Optional[list[shared_formfieldentity.FormFieldEntity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_fields'), 'exclude': lambda f: f is None }})
    r"""Associated form fields"""  
    form_layout: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_layout'), 'exclude': lambda f: f is None }})
    r"""Layout of the form"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Form field set id"""  
    skip_company: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_company'), 'exclude': lambda f: f is None }})
    r"""Any associated InboxRegistrations or BundleRegistrations can be saved without providing company"""  
    skip_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_email'), 'exclude': lambda f: f is None }})
    r"""Any associated InboxRegistrations or BundleRegistrations can be saved without providing email"""  
    skip_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_name'), 'exclude': lambda f: f is None }})
    r"""Any associated InboxRegistrations or BundleRegistrations can be saved without providing name"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title to be displayed"""  
    