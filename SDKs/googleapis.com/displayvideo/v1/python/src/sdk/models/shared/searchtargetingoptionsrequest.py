"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import businesschainsearchterms as shared_businesschainsearchterms
from ..shared import georegionsearchterms as shared_georegionsearchterms
from ..shared import poisearchterms as shared_poisearchterms
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchTargetingOptionsRequest:
    r"""Request message for SearchTargetingOptions."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Required. The Advertiser this request is being made in the context of."""  
    business_chain_search_terms: Optional[shared_businesschainsearchterms.BusinessChainSearchTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessChainSearchTerms'), 'exclude': lambda f: f is None }})
    r"""Search terms for Business Chain targeting options. At least one of the field should be populated."""  
    geo_region_search_terms: Optional[shared_georegionsearchterms.GeoRegionSearchTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoRegionSearchTerms'), 'exclude': lambda f: f is None }})
    r"""Search terms for geo region targeting options."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize'), 'exclude': lambda f: f is None }})
    r"""Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageToken'), 'exclude': lambda f: f is None }})
    r"""A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `SearchTargetingOptions` method. If not specified, the first page of results will be returned."""  
    poi_search_terms: Optional[shared_poisearchterms.PoiSearchTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poiSearchTerms'), 'exclude': lambda f: f is None }})
    r"""Search terms for POI targeting options."""  
    