// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetPhrasesPathParams struct {
	// Word to fetch phrases for
	Word string `pathParam:"style=simple,explode=false,name=word"`
}

// GetPhrasesUseCanonicalEnum - If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
type GetPhrasesUseCanonicalEnum string

const (
	GetPhrasesUseCanonicalEnumFalse GetPhrasesUseCanonicalEnum = "false"
	GetPhrasesUseCanonicalEnumTrue  GetPhrasesUseCanonicalEnum = "true"
)

func (e *GetPhrasesUseCanonicalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = GetPhrasesUseCanonicalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPhrasesUseCanonicalEnum: %s", s)
	}
}

type GetPhrasesQueryParams struct {
	// Maximum number of results to return
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
	UseCanonical *GetPhrasesUseCanonicalEnum `queryParam:"style=form,explode=true,name=useCanonical"`
	// Minimum WLMI for the phrase
	Wlmi *int `queryParam:"style=form,explode=true,name=wlmi"`
}

type GetPhrasesRequest struct {
	PathParams  GetPhrasesPathParams
	QueryParams GetPhrasesQueryParams
}

type GetPhrasesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
