"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autotext as shared_autotext
from ..shared import columnbreak as shared_columnbreak
from ..shared import equation as shared_equation
from ..shared import footnotereference as shared_footnotereference
from ..shared import horizontalrule as shared_horizontalrule
from ..shared import inlineobjectelement as shared_inlineobjectelement
from ..shared import pagebreak as shared_pagebreak
from ..shared import person as shared_person
from ..shared import richlink as shared_richlink
from ..shared import textrun as shared_textrun
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParagraphElement:
    r"""A ParagraphElement describes content within a Paragraph."""
    
    auto_text: Optional[shared_autotext.AutoText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoText'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number."""  
    column_break: Optional[shared_columnbreak.ColumnBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnBreak'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column."""  
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-base end index of this paragraph element, exclusive, in UTF-16 code units."""  
    equation: Optional[shared_equation.Equation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equation'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing an equation."""  
    footnote_reference: Optional[shared_footnotereference.FootnoteReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('footnoteReference'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote."""  
    horizontal_rule: Optional[shared_horizontalrule.HorizontalRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontalRule'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a horizontal line."""  
    inline_object_element: Optional[shared_inlineobjectelement.InlineObjectElement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inlineObjectElement'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement that contains an InlineObject."""  
    page_break: Optional[shared_pagebreak.PageBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreak'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page."""  
    person: Optional[shared_person.Person] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person'), 'exclude': lambda f: f is None }})
    r"""A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address."""  
    rich_link: Optional[shared_richlink.RichLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richLink'), 'exclude': lambda f: f is None }})
    r"""A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event)."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based start index of this paragraph element, in UTF-16 code units."""  
    text_run: Optional[shared_textrun.TextRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textRun'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement that represents a run of text that all has the same styling."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParagraphElementInput:
    r"""A ParagraphElement describes content within a Paragraph."""
    
    auto_text: Optional[shared_autotext.AutoText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoText'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number."""  
    column_break: Optional[shared_columnbreak.ColumnBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnBreak'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column."""  
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-base end index of this paragraph element, exclusive, in UTF-16 code units."""  
    equation: Optional[shared_equation.Equation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equation'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing an equation."""  
    footnote_reference: Optional[shared_footnotereference.FootnoteReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('footnoteReference'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote."""  
    horizontal_rule: Optional[shared_horizontalrule.HorizontalRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontalRule'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a horizontal line."""  
    inline_object_element: Optional[shared_inlineobjectelement.InlineObjectElement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inlineObjectElement'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement that contains an InlineObject."""  
    page_break: Optional[shared_pagebreak.PageBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreak'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page."""  
    person: Optional[shared_person.PersonInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person'), 'exclude': lambda f: f is None }})
    r"""A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address."""  
    rich_link: Optional[shared_richlink.RichLinkInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richLink'), 'exclude': lambda f: f is None }})
    r"""A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event)."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based start index of this paragraph element, in UTF-16 code units."""  
    text_run: Optional[shared_textrun.TextRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textRun'), 'exclude': lambda f: f is None }})
    r"""A ParagraphElement that represents a run of text that all has the same styling."""  
    