<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Mailboxes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change password for mailbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordResponse
     */
	public function changeMailboxPassword(
        \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes/{mailboxName}/password', \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMailboxPasswordRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeMailboxPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Configure auto-forward for mailbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardResponse
     */
	public function configureMailboxAutoForward(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes/{mailboxName}/autoforward', \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoForward", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoForwardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Configure auto-reply for mailbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyResponse
     */
	public function configureMailboxAutoReply(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes/{mailboxName}/autoreply', \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoReply", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureMailboxAutoReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a new mailbox.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateMailboxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMailboxResponse
     */
	public function createMailbox(
        \OpenAPI\OpenAPI\Models\Shared\CreateMailboxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMailboxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMailboxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Delete a mailbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxResponse
     */
	public function deleteMailbox(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes/{mailboxName}', \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteMailboxRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMailboxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get a specific mailbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMailboxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMailboxResponse
     */
	public function getMailbox(
        \OpenAPI\OpenAPI\Models\Operations\GetMailboxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMailboxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes/{mailboxName}', \OpenAPI\OpenAPI\Models\Operations\GetMailboxRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMailboxRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMailboxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mailboxDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MailboxDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets your mailboxes.
     * 
     * Currently only supports getting the mailboxes filtered by domain name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMailboxesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMailboxesResponse
     */
	public function getMailboxes(
        \OpenAPI\OpenAPI\Models\Operations\GetMailboxesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMailboxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailboxes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMailboxesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMailboxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mailboxes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Mailbox>', 'json');
            }
        }

        return $response;
    }
}