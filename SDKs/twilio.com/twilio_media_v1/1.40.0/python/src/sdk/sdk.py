"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://media.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_media_processor(self, request: operations.CreateMediaProcessorCreateMediaProcessorRequest, security: operations.CreateMediaProcessorSecurity, server_url: Optional[str] = None) -> operations.CreateMediaProcessorResponse:
        base_url = operations.CREATE_MEDIA_PROCESSOR_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/MediaProcessors'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMediaProcessorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1MediaProcessor])
                res.media_v1_media_processor = out

        return res

    def create_player_streamer(self, request: operations.CreatePlayerStreamerCreatePlayerStreamerRequest, security: operations.CreatePlayerStreamerSecurity, server_url: Optional[str] = None) -> operations.CreatePlayerStreamerResponse:
        base_url = operations.CREATE_PLAYER_STREAMER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/PlayerStreamers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePlayerStreamerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1PlayerStreamer])
                res.media_v1_player_streamer = out

        return res

    def create_player_streamer_playback_grant(self, request: operations.CreatePlayerStreamerPlaybackGrantRequest, security: operations.CreatePlayerStreamerPlaybackGrantSecurity, server_url: Optional[str] = None) -> operations.CreatePlayerStreamerPlaybackGrantResponse:
        base_url = operations.CREATE_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreatePlayerStreamerPlaybackGrantRequest, base_url, '/v1/PlayerStreamers/{Sid}/PlaybackGrant', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePlayerStreamerPlaybackGrantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant])
                res.media_v1_player_streamer_player_streamer_playback_grant = out

        return res

    def delete_media_recording(self, request: operations.DeleteMediaRecordingRequest, security: operations.DeleteMediaRecordingSecurity, server_url: Optional[str] = None) -> operations.DeleteMediaRecordingResponse:
        r"""Deletes a MediaRecording resource identified by a SID."""
        base_url = operations.DELETE_MEDIA_RECORDING_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteMediaRecordingRequest, base_url, '/v1/MediaRecordings/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMediaRecordingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_media_processor(self, request: operations.FetchMediaProcessorRequest, security: operations.FetchMediaProcessorSecurity, server_url: Optional[str] = None) -> operations.FetchMediaProcessorResponse:
        r"""Returns a single MediaProcessor resource identified by a SID."""
        base_url = operations.FETCH_MEDIA_PROCESSOR_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchMediaProcessorRequest, base_url, '/v1/MediaProcessors/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchMediaProcessorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1MediaProcessor])
                res.media_v1_media_processor = out

        return res

    def fetch_media_recording(self, request: operations.FetchMediaRecordingRequest, security: operations.FetchMediaRecordingSecurity, server_url: Optional[str] = None) -> operations.FetchMediaRecordingResponse:
        r"""Returns a single MediaRecording resource identified by a SID."""
        base_url = operations.FETCH_MEDIA_RECORDING_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchMediaRecordingRequest, base_url, '/v1/MediaRecordings/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchMediaRecordingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1MediaRecording])
                res.media_v1_media_recording = out

        return res

    def fetch_player_streamer(self, request: operations.FetchPlayerStreamerRequest, security: operations.FetchPlayerStreamerSecurity, server_url: Optional[str] = None) -> operations.FetchPlayerStreamerResponse:
        r"""Returns a single PlayerStreamer resource identified by a SID."""
        base_url = operations.FETCH_PLAYER_STREAMER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPlayerStreamerRequest, base_url, '/v1/PlayerStreamers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPlayerStreamerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1PlayerStreamer])
                res.media_v1_player_streamer = out

        return res

    def fetch_player_streamer_playback_grant(self, request: operations.FetchPlayerStreamerPlaybackGrantRequest, security: operations.FetchPlayerStreamerPlaybackGrantSecurity, server_url: Optional[str] = None) -> operations.FetchPlayerStreamerPlaybackGrantResponse:
        r"""**This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID."""
        base_url = operations.FETCH_PLAYER_STREAMER_PLAYBACK_GRANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPlayerStreamerPlaybackGrantRequest, base_url, '/v1/PlayerStreamers/{Sid}/PlaybackGrant', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPlayerStreamerPlaybackGrantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant])
                res.media_v1_player_streamer_player_streamer_playback_grant = out

        return res

    def list_media_processor(self, request: operations.ListMediaProcessorRequest, security: operations.ListMediaProcessorSecurity, server_url: Optional[str] = None) -> operations.ListMediaProcessorResponse:
        r"""Returns a list of MediaProcessors."""
        base_url = operations.LIST_MEDIA_PROCESSOR_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/MediaProcessors'
        
        query_params = utils.get_query_params(operations.ListMediaProcessorRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMediaProcessorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMediaProcessorListMediaProcessorResponse])
                res.list_media_processor_response = out

        return res

    def list_media_recording(self, request: operations.ListMediaRecordingRequest, security: operations.ListMediaRecordingSecurity, server_url: Optional[str] = None) -> operations.ListMediaRecordingResponse:
        r"""Returns a list of MediaRecordings."""
        base_url = operations.LIST_MEDIA_RECORDING_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/MediaRecordings'
        
        query_params = utils.get_query_params(operations.ListMediaRecordingRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMediaRecordingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMediaRecordingListMediaRecordingResponse])
                res.list_media_recording_response = out

        return res

    def list_player_streamer(self, request: operations.ListPlayerStreamerRequest, security: operations.ListPlayerStreamerSecurity, server_url: Optional[str] = None) -> operations.ListPlayerStreamerResponse:
        r"""Returns a list of PlayerStreamers."""
        base_url = operations.LIST_PLAYER_STREAMER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/PlayerStreamers'
        
        query_params = utils.get_query_params(operations.ListPlayerStreamerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPlayerStreamerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPlayerStreamerListPlayerStreamerResponse])
                res.list_player_streamer_response = out

        return res

    def update_media_processor(self, request: operations.UpdateMediaProcessorRequest, security: operations.UpdateMediaProcessorSecurity, server_url: Optional[str] = None) -> operations.UpdateMediaProcessorResponse:
        r"""Updates a MediaProcessor resource identified by a SID."""
        base_url = operations.UPDATE_MEDIA_PROCESSOR_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateMediaProcessorRequest, base_url, '/v1/MediaProcessors/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateMediaProcessorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1MediaProcessor])
                res.media_v1_media_processor = out

        return res

    def update_player_streamer(self, request: operations.UpdatePlayerStreamerRequest, security: operations.UpdatePlayerStreamerSecurity, server_url: Optional[str] = None) -> operations.UpdatePlayerStreamerResponse:
        r"""Updates a PlayerStreamer resource identified by a SID."""
        base_url = operations.UPDATE_PLAYER_STREAMER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdatePlayerStreamerRequest, base_url, '/v1/PlayerStreamers/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePlayerStreamerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaV1PlayerStreamer])
                res.media_v1_player_streamer = out

        return res

    