<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Disputes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * AcceptDispute
     * 
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
     * updates the dispute state to ACCEPTED.
     * 
     * Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
     * does not have sufficient funds, Square debits the associated bank account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeResponse
     */
	public function acceptDispute(
        \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/accept', \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AcceptDisputeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->acceptDisputeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AcceptDisputeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateDisputeEvidenceText
     * 
     * Uploads text to use as evidence for a dispute challenge.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextResponse
     */
	public function createDisputeEvidenceText(
        \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/evidence-text', \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createDisputeEvidenceTextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDisputeEvidenceTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDisputeEvidenceTextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateDisputeEvidenceTextResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteDisputeEvidence
     * 
     * Removes specified evidence from a dispute.
     * 
     * Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after
     * submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceResponse
     */
	public function deleteDisputeEvidence(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/evidence/{evidence_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDisputeEvidenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteDisputeEvidenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteDisputeEvidenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListDisputeEvidence
     * 
     * Returns a list of evidence associated with a dispute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceResponse
     */
	public function listDisputeEvidence(
        \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/evidence', \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDisputeEvidenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDisputeEvidenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDisputeEvidenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListDisputes
     * 
     * Returns a list of disputes associated with a particular account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDisputesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDisputesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDisputesResponse
     */
	public function listDisputes(
        \OpenAPI\OpenAPI\Models\Operations\ListDisputesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDisputesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDisputesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDisputesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDisputesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDisputesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDisputesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveDispute
     * 
     * Returns details about a specific dispute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeResponse
     */
	public function retrieveDispute(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveDisputeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveDisputeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveDisputeEvidence
     * 
     * Returns the evidence metadata specified by the evidence ID in the request URL path
     * 
     * You must maintain a copy of the evidence you upload if you want to reference it later. You cannot
     * download the evidence after you upload it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceResponse
     */
	public function retrieveDisputeEvidence(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/evidence/{evidence_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveDisputeEvidenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveDisputeEvidenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveDisputeEvidenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SubmitEvidence
     * 
     * Submits evidence to the cardholder's bank.
     * 
     * Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded
     * using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and
     * [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and
     * evidence automatically provided by Square, when available.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceResponse
     */
	public function submitEvidence(
        \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/disputes/{dispute_id}/submit-evidence', \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubmitEvidenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->submitEvidenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubmitEvidenceResponse', 'json');
            }
        }

        return $response;
    }
}