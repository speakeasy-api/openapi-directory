"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoProcessingDetailsProcessingProgress:
    r"""Video processing progress and completion time estimate."""
    
    parts_processed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partsProcessed'), 'exclude': lambda f: f is None }})
    r"""The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video."""  
    parts_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partsTotal'), 'exclude': lambda f: f is None }})
    r"""An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video."""  
    time_left_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeLeftMs'), 'exclude': lambda f: f is None }})
    r"""An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video."""  
    