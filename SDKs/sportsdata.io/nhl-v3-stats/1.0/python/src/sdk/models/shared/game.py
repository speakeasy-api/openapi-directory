"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import period as shared_period
from ..shared import series as shared_series
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Game:
    
    attendance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attendance'), 'exclude': lambda f: f is None }})  
    away_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayRotationNumber'), 'exclude': lambda f: f is None }})  
    away_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeam'), 'exclude': lambda f: f is None }})  
    away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamID'), 'exclude': lambda f: f is None }})  
    away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    away_team_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamScore'), 'exclude': lambda f: f is None }})  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Channel'), 'exclude': lambda f: f is None }})  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTime'), 'exclude': lambda f: f is None }})  
    date_time_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTimeUTC'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    game_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameEndDateTime'), 'exclude': lambda f: f is None }})  
    game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameID'), 'exclude': lambda f: f is None }})  
    global_away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalAwayTeamID'), 'exclude': lambda f: f is None }})  
    global_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalGameID'), 'exclude': lambda f: f is None }})  
    global_home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalHomeTeamID'), 'exclude': lambda f: f is None }})  
    home_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRotationNumber'), 'exclude': lambda f: f is None }})  
    home_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeam'), 'exclude': lambda f: f is None }})  
    home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamID'), 'exclude': lambda f: f is None }})  
    home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    home_team_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamScore'), 'exclude': lambda f: f is None }})  
    is_closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsClosed'), 'exclude': lambda f: f is None }})  
    last_play: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastPlay'), 'exclude': lambda f: f is None }})  
    neutral_venue: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NeutralVenue'), 'exclude': lambda f: f is None }})  
    over_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverPayout'), 'exclude': lambda f: f is None }})  
    over_under: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverUnder'), 'exclude': lambda f: f is None }})  
    period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Period'), 'exclude': lambda f: f is None }})  
    periods: Optional[list[shared_period.Period]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Periods'), 'exclude': lambda f: f is None }})  
    point_spread: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpread'), 'exclude': lambda f: f is None }})  
    point_spread_away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadAwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    point_spread_home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadHomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    series_info: Optional[shared_series.Series] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeriesInfo'), 'exclude': lambda f: f is None }})  
    stadium_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StadiumID'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    time_remaining_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRemainingMinutes'), 'exclude': lambda f: f is None }})  
    time_remaining_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRemainingSeconds'), 'exclude': lambda f: f is None }})  
    under_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnderPayout'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Updated'), 'exclude': lambda f: f is None }})  
    