/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AutoText } from "./autotext";
import { ColumnBreak } from "./columnbreak";
import { Equation } from "./equation";
import { FootnoteReference } from "./footnotereference";
import { HorizontalRule } from "./horizontalrule";
import { InlineObjectElement } from "./inlineobjectelement";
import { PageBreak } from "./pagebreak";
import { Person, PersonInput } from "./person";
import { RichLink, RichLinkInput } from "./richlink";
import { TextRun } from "./textrun";
import { Expose, Type } from "class-transformer";

/**
 * A ParagraphElement describes content within a Paragraph.
 */
export class ParagraphElement extends SpeakeasyBase {
  /**
   * A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoText" })
  @Type(() => AutoText)
  autoText?: AutoText;

  /**
   * A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "columnBreak" })
  @Type(() => ColumnBreak)
  columnBreak?: ColumnBreak;

  /**
   * The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endIndex" })
  endIndex?: number;

  /**
   * A ParagraphElement representing an equation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "equation" })
  @Type(() => Equation)
  equation?: Equation;

  /**
   * A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "footnoteReference" })
  @Type(() => FootnoteReference)
  footnoteReference?: FootnoteReference;

  /**
   * A ParagraphElement representing a horizontal line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "horizontalRule" })
  @Type(() => HorizontalRule)
  horizontalRule?: HorizontalRule;

  /**
   * A ParagraphElement that contains an InlineObject.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inlineObjectElement" })
  @Type(() => InlineObjectElement)
  inlineObjectElement?: InlineObjectElement;

  /**
   * A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageBreak" })
  @Type(() => PageBreak)
  pageBreak?: PageBreak;

  /**
   * A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "person" })
  @Type(() => Person)
  person?: Person;

  /**
   * A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "richLink" })
  @Type(() => RichLink)
  richLink?: RichLink;

  /**
   * The zero-based start index of this paragraph element, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startIndex" })
  startIndex?: number;

  /**
   * A ParagraphElement that represents a run of text that all has the same styling.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "textRun" })
  @Type(() => TextRun)
  textRun?: TextRun;
}

/**
 * A ParagraphElement describes content within a Paragraph.
 */
export class ParagraphElementInput extends SpeakeasyBase {
  /**
   * A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoText" })
  @Type(() => AutoText)
  autoText?: AutoText;

  /**
   * A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "columnBreak" })
  @Type(() => ColumnBreak)
  columnBreak?: ColumnBreak;

  /**
   * The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endIndex" })
  endIndex?: number;

  /**
   * A ParagraphElement representing an equation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "equation" })
  @Type(() => Equation)
  equation?: Equation;

  /**
   * A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "footnoteReference" })
  @Type(() => FootnoteReference)
  footnoteReference?: FootnoteReference;

  /**
   * A ParagraphElement representing a horizontal line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "horizontalRule" })
  @Type(() => HorizontalRule)
  horizontalRule?: HorizontalRule;

  /**
   * A ParagraphElement that contains an InlineObject.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inlineObjectElement" })
  @Type(() => InlineObjectElement)
  inlineObjectElement?: InlineObjectElement;

  /**
   * A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageBreak" })
  @Type(() => PageBreak)
  pageBreak?: PageBreak;

  /**
   * A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "person" })
  @Type(() => PersonInput)
  person?: PersonInput;

  /**
   * A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "richLink" })
  @Type(() => RichLinkInput)
  richLink?: RichLinkInput;

  /**
   * The zero-based start index of this paragraph element, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startIndex" })
  startIndex?: number;

  /**
   * A ParagraphElement that represents a run of text that all has the same styling.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "textRun" })
  @Type(() => TextRun)
  textRun?: TextRun;
}
