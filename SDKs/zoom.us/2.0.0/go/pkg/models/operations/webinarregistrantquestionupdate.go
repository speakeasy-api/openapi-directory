// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WebinarRegistrantQuestionUpdateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarRegistrantQuestionUpdatePathParams struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

// WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum - The question-answer type.
type WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnumShort          WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnumSingleRadio    WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "single_radio"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnumSingleDropdown WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "single_dropdown"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnumMultiple       WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "multiple"
)

func (e *WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single_radio":
		fallthrough
	case "single_dropdown":
		fallthrough
	case "multiple":
		*e = WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions struct {
	// An array of answer choices. Can't be used for short answer type.
	Answers []string `json:"answers,omitempty"`
	// State whether or not the custom question is required to be answered by a registrant.
	Required *bool `json:"required,omitempty"`
	// Custom question.
	Title *string `json:"title,omitempty"`
	// The question-answer type.
	Type *WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum - Field name
type WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum string

const (
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumLastName              WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "last_name"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumAddress               WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "address"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumCity                  WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "city"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumCountry               WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "country"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumZip                   WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumState                 WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "state"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumPhone                 WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumIndustry              WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumOrg                   WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "org"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumJobTitle              WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnumComments              WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "last_name":
		fallthrough
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions struct {
	// Field name
	FieldName *WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// State whether the selected fields are required or optional.
	Required *bool `json:"required,omitempty"`
}

// WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions - Webinar Registrant Questions
type WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions struct {
	// Array of Registrant Custom Questions.
	CustomQuestions []WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty" multipartForm:"name=custom_questions,json"`
	// Array of registration fields whose values should be provided by registrants during registration.
	Questions []WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
}

type WebinarRegistrantQuestionUpdateRequest struct {
	PathParams WebinarRegistrantQuestionUpdatePathParams
	// Webinar Registrant Questions
	Request  WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions `request:"mediaType=application/json"`
	Security WebinarRegistrantQuestionUpdateSecurity
}

type WebinarRegistrantQuestionUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
