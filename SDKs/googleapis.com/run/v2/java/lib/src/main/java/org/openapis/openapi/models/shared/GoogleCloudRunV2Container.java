/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRunV2Container - A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 */
public class GoogleCloudRunV2Container {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("args")
    public String[] args;
    public GoogleCloudRunV2Container withArgs(String[] args) {
        this.args = args;
        return this;
    }
    
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    public String[] command;
    public GoogleCloudRunV2Container withCommand(String[] command) {
        this.command = command;
        return this;
    }
    
    /**
     * List of environment variables to set in the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("env")
    public GoogleCloudRunV2EnvVar[] env;
    public GoogleCloudRunV2Container withEnv(GoogleCloudRunV2EnvVar[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed. More info: https://kubernetes.io/docs/concepts/containers/images
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;
    public GoogleCloudRunV2Container withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("livenessProbe")
    public GoogleCloudRunV2Probe livenessProbe;
    public GoogleCloudRunV2Container withLivenessProbe(GoogleCloudRunV2Probe livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }
    
    /**
     * Name of the container specified as a DNS_LABEL (RFC 1123).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GoogleCloudRunV2Container withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ports")
    public GoogleCloudRunV2ContainerPort[] ports;
    public GoogleCloudRunV2Container withPorts(GoogleCloudRunV2ContainerPort[] ports) {
        this.ports = ports;
        return this;
    }
    
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public GoogleCloudRunV2ResourceRequirements resources;
    public GoogleCloudRunV2Container withResources(GoogleCloudRunV2ResourceRequirements resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startupProbe")
    public GoogleCloudRunV2Probe startupProbe;
    public GoogleCloudRunV2Container withStartupProbe(GoogleCloudRunV2Probe startupProbe) {
        this.startupProbe = startupProbe;
        return this;
    }
    
    /**
     * Volume to mount into the container's filesystem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeMounts")
    public GoogleCloudRunV2VolumeMount[] volumeMounts;
    public GoogleCloudRunV2Container withVolumeMounts(GoogleCloudRunV2VolumeMount[] volumeMounts) {
        this.volumeMounts = volumeMounts;
        return this;
    }
    
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workingDir")
    public String workingDir;
    public GoogleCloudRunV2Container withWorkingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }
    
}
