// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAcceleratorsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListAcceleratorsXAmzTargetEnum
type ListAcceleratorsXAmzTargetEnum string

const (
	ListAcceleratorsXAmzTargetEnumGlobalAcceleratorV20180706ListAccelerators ListAcceleratorsXAmzTargetEnum = "GlobalAccelerator_V20180706.ListAccelerators"
)

func (e *ListAcceleratorsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.ListAccelerators":
		*e = ListAcceleratorsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAcceleratorsXAmzTargetEnum: %s", s)
	}
}

type ListAcceleratorsHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListAcceleratorsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAcceleratorsRequest struct {
	QueryParams ListAcceleratorsQueryParams
	Headers     ListAcceleratorsHeaders
	Request     shared.ListAcceleratorsRequest `request:"mediaType=application/json"`
}

type ListAcceleratorsResponse struct {
	ContentType string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListAcceleratorsResponse *shared.ListAcceleratorsResponse
	StatusCode               int
	RawResponse              *http.Response
}
