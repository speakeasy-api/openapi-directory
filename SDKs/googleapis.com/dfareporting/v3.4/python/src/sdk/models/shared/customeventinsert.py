"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import campaignmanagerids as shared_campaignmanagerids
from ..shared import dv3ids as shared_dv3ids
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomEventInsertInsertEventTypeEnum(str, Enum):
    r"""The type of event to insert."""
    UNKNOWN = 'UNKNOWN'
    IMPRESSION = 'IMPRESSION'
    CLICK = 'CLICK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomEventInsert:
    r"""Custom event to be inserted."""
    
    cm_dimensions: Optional[shared_campaignmanagerids.CampaignManagerIds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cmDimensions'), 'exclude': lambda f: f is None }})
    r"""Campaign Manager IDs related to the custom event."""  
    dv3_dimensions: Optional[shared_dv3ids.Dv3Ids] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dv3Dimensions'), 'exclude': lambda f: f is None }})
    r"""DV360 IDs related to the custom event."""  
    insert_event_type: Optional[CustomEventInsertInsertEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertEventType'), 'exclude': lambda f: f is None }})
    r"""The type of event to insert."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#customEventInsert\\"."""  
    match_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchId'), 'exclude': lambda f: f is None }})
    r"""The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required."""  
    mobile_device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileDeviceId'), 'exclude': lambda f: f is None }})
    r"""The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required."""  
    