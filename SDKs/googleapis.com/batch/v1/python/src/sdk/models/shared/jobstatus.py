"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import statusevent as shared_statusevent
from ..shared import taskgroupstatus as shared_taskgroupstatus
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class JobStatusStateEnum(str, Enum):
    r"""Job state"""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    QUEUED = 'QUEUED'
    SCHEDULED = 'SCHEDULED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    DELETION_IN_PROGRESS = 'DELETION_IN_PROGRESS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobStatus:
    r"""Job status."""
    
    run_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runDuration'), 'exclude': lambda f: f is None }})
    r"""The duration of time that the Job spent in status RUNNING."""  
    state: Optional[JobStatusStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Job state"""  
    status_events: Optional[list[shared_statusevent.StatusEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusEvents'), 'exclude': lambda f: f is None }})
    r"""Job status events"""  
    task_groups: Optional[dict[str, shared_taskgroupstatus.TaskGroupStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskGroups'), 'exclude': lambda f: f is None }})
    r"""Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID."""  
    