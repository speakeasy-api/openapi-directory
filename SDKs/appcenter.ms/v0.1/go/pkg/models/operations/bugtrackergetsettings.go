// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BugtrackerGetSettingsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type BugtrackerGetSettingsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// BugtrackerGetSettingsDefaultApplicationJSONCodeEnum - The status code return by the API. It can be 400 or 404 or 409 or 500.
type BugtrackerGetSettingsDefaultApplicationJSONCodeEnum string

const (
	BugtrackerGetSettingsDefaultApplicationJSONCodeEnumFourHundred        BugtrackerGetSettingsDefaultApplicationJSONCodeEnum = "400"
	BugtrackerGetSettingsDefaultApplicationJSONCodeEnumFourHundredAndFour BugtrackerGetSettingsDefaultApplicationJSONCodeEnum = "404"
	BugtrackerGetSettingsDefaultApplicationJSONCodeEnumFourHundredAndNine BugtrackerGetSettingsDefaultApplicationJSONCodeEnum = "409"
	BugtrackerGetSettingsDefaultApplicationJSONCodeEnumFiveHundred        BugtrackerGetSettingsDefaultApplicationJSONCodeEnum = "500"
)

func (e *BugtrackerGetSettingsDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "404":
		fallthrough
	case "409":
		fallthrough
	case "500":
		*e = BugtrackerGetSettingsDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugtrackerGetSettingsDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// BugtrackerGetSettingsDefaultApplicationJSON - Generic result for any alerting API operation
type BugtrackerGetSettingsDefaultApplicationJSON struct {
	// The status code return by the API. It can be 400 or 404 or 409 or 500.
	Code BugtrackerGetSettingsDefaultApplicationJSONCodeEnum `json:"code"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
}

// BugtrackerGetSettings200ApplicationJSONEventTypesEnum - Alerting EventTypes enum
type BugtrackerGetSettings200ApplicationJSONEventTypesEnum string

const (
	BugtrackerGetSettings200ApplicationJSONEventTypesEnumNewCrashGroupCreated BugtrackerGetSettings200ApplicationJSONEventTypesEnum = "newCrashGroupCreated"
	BugtrackerGetSettings200ApplicationJSONEventTypesEnumNewAppReleased       BugtrackerGetSettings200ApplicationJSONEventTypesEnum = "newAppReleased"
)

func (e *BugtrackerGetSettings200ApplicationJSONEventTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newCrashGroupCreated":
		fallthrough
	case "newAppReleased":
		*e = BugtrackerGetSettings200ApplicationJSONEventTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugtrackerGetSettings200ApplicationJSONEventTypesEnum: %s", s)
	}
}

// BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum - type of bugtracker
type BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum string

const (
	BugtrackerGetSettings200ApplicationJSONSettingsTypeEnumGithub BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum = "github"
	BugtrackerGetSettings200ApplicationJSONSettingsTypeEnumVsts   BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum = "vsts"
	BugtrackerGetSettings200ApplicationJSONSettingsTypeEnumJira   BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum = "jira"
)

func (e *BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "github":
		fallthrough
	case "vsts":
		fallthrough
	case "jira":
		*e = BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum: %s", s)
	}
}

// BugtrackerGetSettings200ApplicationJSONSettings - Bugtracker specific settings
type BugtrackerGetSettings200ApplicationJSONSettings struct {
	CallbackURL *string `json:"callback_url,omitempty"`
	OwnerName   string  `json:"owner_name"`
	// type of bugtracker
	Type BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum `json:"type"`
}

// BugtrackerGetSettings200ApplicationJSONStateEnum - bugtracker state
type BugtrackerGetSettings200ApplicationJSONStateEnum string

const (
	BugtrackerGetSettings200ApplicationJSONStateEnumEnabled      BugtrackerGetSettings200ApplicationJSONStateEnum = "enabled"
	BugtrackerGetSettings200ApplicationJSONStateEnumDisabled     BugtrackerGetSettings200ApplicationJSONStateEnum = "disabled"
	BugtrackerGetSettings200ApplicationJSONStateEnumUnauthorized BugtrackerGetSettings200ApplicationJSONStateEnum = "unauthorized"
)

func (e *BugtrackerGetSettings200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "unauthorized":
		*e = BugtrackerGetSettings200ApplicationJSONStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugtrackerGetSettings200ApplicationJSONStateEnum: %s", s)
	}
}

// BugtrackerGetSettings200ApplicationJSONTypeEnum - type of bugtracker
type BugtrackerGetSettings200ApplicationJSONTypeEnum string

const (
	BugtrackerGetSettings200ApplicationJSONTypeEnumGithub BugtrackerGetSettings200ApplicationJSONTypeEnum = "github"
	BugtrackerGetSettings200ApplicationJSONTypeEnumVsts   BugtrackerGetSettings200ApplicationJSONTypeEnum = "vsts"
	BugtrackerGetSettings200ApplicationJSONTypeEnumJira   BugtrackerGetSettings200ApplicationJSONTypeEnum = "jira"
)

func (e *BugtrackerGetSettings200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "github":
		fallthrough
	case "vsts":
		fallthrough
	case "jira":
		*e = BugtrackerGetSettings200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugtrackerGetSettings200ApplicationJSONTypeEnum: %s", s)
	}
}

// BugtrackerGetSettings200ApplicationJSON - Alerting bugtracker resource
type BugtrackerGetSettings200ApplicationJSON struct {
	// Event types enabled for bugtracker
	EventTypes []BugtrackerGetSettings200ApplicationJSONEventTypesEnum `json:"event_types,omitempty"`
	// Bugtracker specific settings
	Settings *BugtrackerGetSettings200ApplicationJSONSettings `json:"settings,omitempty"`
	// bugtracker state
	State *BugtrackerGetSettings200ApplicationJSONStateEnum `json:"state,omitempty"`
	// ID of OAuth token
	TokenID *string `json:"token_id,omitempty"`
	// type of bugtracker
	Type *BugtrackerGetSettings200ApplicationJSONTypeEnum `json:"type,omitempty"`
}

type BugtrackerGetSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BugtrackerGetSettings200ApplicationJSONObject *BugtrackerGetSettings200ApplicationJSON
	// Error code with reason
	BugtrackerGetSettingsDefaultApplicationJSONObject *BugtrackerGetSettingsDefaultApplicationJSON
}
