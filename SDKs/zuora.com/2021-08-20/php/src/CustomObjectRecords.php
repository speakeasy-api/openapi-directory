<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomObjectRecords 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a custom object record
     * 
     * Deletes a custom object record of the given type and ID.
     * 
     * Note that 200 response will be returned under either of the following conditions:
     * * The record is identified and successfully deleted
     * * The record could not be found
     * 
     * Note that the record is deleted immediately and, therefore, will not be retained upon successful deletion.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDResponse
     */
	public function deleteCustomObjectRecordByID(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomObjectRecordByIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $response->deleteCustomObjectRecordByID200ApplicationJSONUriString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List records for a custom object
     * 
     * Lists all object records of the given type. You can also use the `q` query parameter to filter the output records.
     * 
     * ## Limitations 
     * 
     * This call has the following limitations:
     * * When a record is created, there will be a delay before it is available for search. For example, if you create 5 records and perform a query that these 5 records satisfy the query conditions, there will be a delay between when the 5 records are created, and when all the 5 records can be returned in the query result.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeResponse
     */
	public function getAllRecordsForCustomObjectType(
        \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}', \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllRecordsForCustomObjectTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryCustomObjectRecordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryCustomObjectRecordsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a custom object record
     * 
     * Retrieves a record of a given type by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDResponse
     */
	public function getCustomObjectRecordByID(
        \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}/{id}', \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectRecordByIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordWithAllFields = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordWithAllFields', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create custom object records
     * 
     * Creates custom object records with the given type. 
     * 
     * Upon creating records of a custom object type, the 200 response contains a list of records that have been successfully processed and stored.
     * 
     * 
     * ## Limitations 
     * 
     * This call has the following limitations:
     * * The maximum number of records that you can create by one call is 1,000.
     * * The storage of empty strings in records is not supported.
     * * Null values must be formatted as the following example: 
     *   ```
     *   {
     *     "records": [
     *       {
     *         "fieldName__c": null
     *       }
     *     ]
     *   }
     *   ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsResponse
     */
	public function postCustomObjectRecords(
        \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}', \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postCustomObjectRecordsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postCustomObjectRecordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PostCustomObjectRecordsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordsErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordsErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse401Record = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse401Record', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordsThrottledResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordsThrottledResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update or delete custom object records
     * 
     * Makes a batch update or delete of custom object records.
     * ## Limitations 
     * 
     * This call has the following limitations:
     * * The maximum number of records that you can update by one call is 1,000.
     * * The maximum number of records that you can delete by one call is 1,000.
     * * The storage of empty strings in records is not supported.
     * * Null values must be formatted as the following example: 
     *   ```
     *   {
     *       "action": {
     *           "type": "update",
     *           "records": {
     *               "64edb2a5-2796-4e95-9559-846f8636a01b": {
     *                   "fieldName__c": null
     *             }
     *           }
     *       }
     *   }
     *   ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteResponse
     */
	public function postCustomObjectRecordsBatchUpdateOrDelete(
        \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/batch/default/{object}', \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customObjectRecordBatchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectRecordsBatchUpdateOrDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordsBatchUpdatePartialSuccessResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordsBatchUpdatePartialSuccessResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordsErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordsErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse401Record = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse401Record', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordsThrottledResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordsThrottledResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a custom object record
     * 
     * Updates a record of the given type and ID.
     * 
     * ## Limitations 
     * 
     * * The storage of empty strings in records is not supported.
     * * Null values must be formatted as the following example: 
     *   ```
     *   {
     *     "records": [
     *       {
     *         "fieldName__c": null
     *       }
     *     ]
     *   }
     *   ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordResponse
     */
	public function putCustomObjectRecord(
        \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}/{id}', \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTCustomObjectRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordWithAllFields = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordWithAllFields', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partially update a custom object record
     * 
     * Updates one or many fields of a custom object record. Patch update uses JSON Merge Patch as specified in [RFC 7386](https://tools.ietf.org/html/rfc7386).
     * 
     * ## Limitations 
     * 
     * * The storage of empty strings in records is not supported.
     * * Null values must be formatted as the following example: 
     *   ```
     *   {
     *     "records": [
     *       {
     *         "fieldName__c": null
     *       }
     *     ]
     *   }
     *   ```
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordResponse
     */
	public function patchPartialUpdateCustomObjectRecord(
        \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/records/default/{object}/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchPartialUpdateCustomObjectRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectRecordWithAllFields = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectRecordWithAllFields', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
}