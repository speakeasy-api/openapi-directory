"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class StyleGuide:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_style_guide_json(self, request: operations.CreateStyleGuideJSONRequest) -> operations.CreateStyleGuideJSONResponse:
        r"""Upload a new style guide
        Upload a new style guide
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateStyleGuideJSONRequest, base_url, '/projects/{projectId}/styleguides', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "style_guide_upload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateStyleGuideJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuideList])
                res.style_guide_list = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_style_guide_multipart(self, request: operations.CreateStyleGuideMultipartRequest) -> operations.CreateStyleGuideMultipartResponse:
        r"""Upload a new style guide
        Upload a new style guide
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateStyleGuideMultipartRequest, base_url, '/projects/{projectId}/styleguides', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "style_guide_upload_request1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateStyleGuideMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuideList])
                res.style_guide_list = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_style_guide(self, request: operations.DeleteStyleGuideRequest) -> operations.DeleteStyleGuideResponse:
        r"""Delete a style guide
        Delete the existing style guide from the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteStyleGuideRequest, base_url, '/projects/{projectId}/styleguides/{styleGuideId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteStyleGuideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_global_style_guide(self) -> operations.DownloadGlobalStyleGuideResponse:
        r"""Download account style guide
        Download your account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/styleguide'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadGlobalStyleGuideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.download_global_style_guide_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_style_guide(self, request: operations.DownloadStyleGuideRequest) -> operations.DownloadStyleGuideResponse:
        r"""Download a style guide
        Download a previously uploaded style guide file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadStyleGuideRequest, base_url, '/projects/{projectId}/styleguides/{styleGuideId}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadStyleGuideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.download_style_guide_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_style_guide(self, request: operations.GetStyleGuideRequest) -> operations.GetStyleGuideResponse:
        r"""View a style guide
        View the details of a style guide uploaded to a project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStyleGuideRequest, base_url, '/projects/{projectId}/styleguides/{styleGuideId}', request)
        
        query_params = utils.get_query_params(operations.GetStyleGuideRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStyleGuideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuide])
                res.style_guide = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_style_guides(self, request: operations.GetStyleGuidesRequest) -> operations.GetStyleGuidesResponse:
        r"""View style guides
        View a list of style guides in your project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStyleGuidesRequest, base_url, '/projects/{projectId}/styleguides', request)
        
        query_params = utils.get_query_params(operations.GetStyleGuidesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStyleGuidesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuideList])
                res.style_guide_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_global_style_guide_json(self, request: shared.AccountStyleGuideUploadRequest) -> operations.UpdateGlobalStyleGuideJSONResponse:
        r"""Create or update the account style guide
        Update your corporate account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/styleguide'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalStyleGuideJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 405]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_global_style_guide_multipart(self, request: shared.AccountStyleGuideUploadRequest1) -> operations.UpdateGlobalStyleGuideMultipartResponse:
        r"""Create or update the account style guide
        Update your corporate account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/styleguide'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalStyleGuideMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 405]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_style_guide_json(self, request: operations.UpdateStyleGuideJSONRequest) -> operations.UpdateStyleGuideJSONResponse:
        r"""Update a style guide
        Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateStyleGuideJSONRequest, base_url, '/projects/{projectId}/styleguides/{styleGuideId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "style_guide_upload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateStyleGuideJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuide])
                res.style_guide = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_style_guide_multipart(self, request: operations.UpdateStyleGuideMultipartRequest) -> operations.UpdateStyleGuideMultipartResponse:
        r"""Update a style guide
        Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateStyleGuideMultipartRequest, base_url, '/projects/{projectId}/styleguides/{styleGuideId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "style_guide_upload_request1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateStyleGuideMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StyleGuide])
                res.style_guide = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    