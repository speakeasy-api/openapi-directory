/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ItemSummary {
    /**
     * Advisory text about this item, related to the classification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advisoryText")
    public String advisoryText;
    public ItemSummary withAdvisoryText(String advisoryText) {
        this.advisoryText = advisoryText;
        return this;
    }
    
    /**
     * The number of available episodes in the season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableEpisodeCount")
    public Integer availableEpisodeCount;
    public ItemSummary withAvailableEpisodeCount(Integer availableEpisodeCount) {
        this.availableEpisodeCount = availableEpisodeCount;
        return this;
    }
    
    /**
     * The number of available seasons in the show, if the item is a show.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableSeasonCount")
    public Integer availableSeasonCount;
    public ItemSummary withAvailableSeasonCount(Integer availableSeasonCount) {
        this.availableSeasonCount = availableSeasonCount;
        return this;
    }
    
    /**
     * The average user rating.
     * When based on user ratings from our system this will be out of 10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageUserRating")
    public Double averageUserRating;
    public ItemSummary withAverageUserRating(Double averageUserRating) {
        this.averageUserRating = averageUserRating;
        return this;
    }
    
    /**
     * The badge this item has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badge")
    public String badge;
    public ItemSummary withBadge(String badge) {
        this.badge = badge;
        return this;
    }
    
    /**
     * The channel short code, if the item is a channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelShortCode")
    public String channelShortCode;
    public ItemSummary withChannelShortCode(String channelShortCode) {
        this.channelShortCode = channelShortCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    public ClassificationSummary classification;
    public ItemSummary withClassification(ClassificationSummary classification) {
        this.classification = classification;
        return this;
    }
    
    /**
     * A contextually relative title to display after a parent title.
     * Mostly applicable to Season, Episode and Trailer.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contextualTitle")
    public String contextualTitle;
    public ItemSummary withContextualTitle(String contextualTitle) {
        this.contextualTitle = contextualTitle;
        return this;
    }
    
    /**
     * A map of custom fields defined by a curator for an item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public ItemSummary withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * A custom identifier for this item.
     * For example the id for this item under a different content system.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customId")
    public String customId;
    public ItemSummary withCustomId(String customId) {
        this.customId = customId;
        return this;
    }
    
    /**
     * The duration of the media in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Integer duration;
    public ItemSummary withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The number of episodes in the season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeCount")
    public Integer episodeCount;
    public ItemSummary withEpisodeCount(Integer episodeCount) {
        this.episodeCount = episodeCount;
        return this;
    }
    
    /**
     * The full name of an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeName")
    public String episodeName;
    public ItemSummary withEpisodeName(String episodeName) {
        this.episodeName = episodeName;
        return this;
    }
    
    /**
     * The number of an episode, if the item is an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeNumber")
    public Integer episodeNumber;
    public ItemSummary withEpisodeNumber(Integer episodeNumber) {
        this.episodeNumber = episodeNumber;
        return this;
    }
    
    /**
     * The array of genres this item belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genres")
    public String[] genres;
    public ItemSummary withGenres(String[] genres) {
        this.genres = genres;
        return this;
    }
    
    /**
     * Whether closed captioning is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasClosedCaptions")
    public Boolean hasClosedCaptions;
    public ItemSummary withHasClosedCaptions(Boolean hasClosedCaptions) {
        this.hasClosedCaptions = hasClosedCaptions;
        return this;
    }
    
    /**
     * Unique identifier for an Item
     */
    @JsonProperty("id")
    public String id;
    public ItemSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public java.util.Map<String, String> images;
    public ItemSummary withImages(java.util.Map<String, String> images) {
        this.images = images;
        return this;
    }
    
    /**
     * The array of available offers for this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offers")
    public Offer[] offers;
    public ItemSummary withOffers(Offer[] offers) {
        this.offers = offers;
        return this;
    }
    
    /**
     * The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
     */
    @JsonProperty("path")
    public String path;
    public ItemSummary withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The year this item was released
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseYear")
    public Integer releaseYear;
    public ItemSummary withReleaseYear(Integer releaseYear) {
        this.releaseYear = releaseYear;
        return this;
    }
    
    /**
     * The scopes for this item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;
    public ItemSummary withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * The identifier of the season this item belongs to, if the item is an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasonId")
    public String seasonId;
    public ItemSummary withSeasonId(String seasonId) {
        this.seasonId = seasonId;
        return this;
    }
    
    /**
     * The number of a season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasonNumber")
    public Integer seasonNumber;
    public ItemSummary withSeasonNumber(Integer seasonNumber) {
        this.seasonNumber = seasonNumber;
        return this;
    }
    
    /**
     * A truncated description of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;
    public ItemSummary withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * The identifier of the show this item belongs to, if the item is a season or episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showId")
    public String showId;
    public ItemSummary withShowId(String showId) {
        this.showId = showId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showTitle")
    public String showTitle;
    public ItemSummary withShowTitle(String showTitle) {
        this.showTitle = showTitle;
        return this;
    }
    
    /**
     * Subtype of the item. Mainly used to identify different types when `type`
     * is `customAsset`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    public String subtype;
    public ItemSummary withSubtype(String subtype) {
        this.subtype = subtype;
        return this;
    }
    
    /**
     * The tagline of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    public String tagline;
    public ItemSummary withTagline(String tagline) {
        this.tagline = tagline;
        return this;
    }
    
    /**
     * Gets themes associated with the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    public Theme[] themes;
    public ItemSummary withThemes(Theme[] themes) {
        this.themes = themes;
        return this;
    }
    
    /**
     * The display title of the item.
     */
    @JsonProperty("title")
    public String title;
    public ItemSummary withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of item
     */
    @JsonProperty("type")
    public ItemSummaryTypeEnum type;
    public ItemSummary withType(ItemSummaryTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watchPath")
    public String watchPath;
    public ItemSummary withWatchPath(String watchPath) {
        this.watchPath = watchPath;
        return this;
    }
    
}
