<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateRoomRequestBody
{
    /**
     * Array of logging-configuration identifiers attached to the room.
     * 
     * @var ?array<string> $loggingConfigurationIdentifiers
     */
	#[\JMS\Serializer\Annotation\SerializedName('loggingConfigurationIdentifiers')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $loggingConfigurationIdentifiers = null;
    
    /**
     * Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.
     * 
     * @var ?int $maximumMessageLength
     */
	#[\JMS\Serializer\Annotation\SerializedName('maximumMessageLength')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maximumMessageLength = null;
    
    /**
     * Maximum number of messages per second that can be sent to the room (by all clients). Default: 10. 
     * 
     * @var ?int $maximumMessageRatePerSecond
     */
	#[\JMS\Serializer\Annotation\SerializedName('maximumMessageRatePerSecond')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maximumMessageRatePerSecond = null;
    
    /**
     * Configuration information for optional message review.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateRoomRequestBodyMessageReviewHandler $messageReviewHandler
     */
	#[\JMS\Serializer\Annotation\SerializedName('messageReviewHandler')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateRoomRequestBodyMessageReviewHandler')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateRoomRequestBodyMessageReviewHandler $messageReviewHandler = null;
    
    /**
     * Room name. The value does not need to be unique.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no constraints beyond what is documented there.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->loggingConfigurationIdentifiers = null;
		$this->maximumMessageLength = null;
		$this->maximumMessageRatePerSecond = null;
		$this->messageReviewHandler = null;
		$this->name = null;
		$this->tags = null;
	}
}
