"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import cancelbookingresponse as shared_cancelbookingresponse
from ..shared import cancellationrequest as shared_cancellationrequest
from ..shared import five_hundred_and_three_service_unavailable as shared_five_hundred_and_three_service_unavailable
from ..shared import five_hundred_internal_server_error as shared_five_hundred_internal_server_error
from ..shared import four_hundred_and_one_unauthorized as shared_four_hundred_and_one_unauthorized
from ..shared import four_hundred_and_six_not_acceptable as shared_four_hundred_and_six_not_acceptable
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

CANCEL_BOOKING_SERVERS = [
	"https://api.sandbox.viator.com/partner",
    r"""Sandbox server (uses test data)"""
]


@dataclasses.dataclass
class CancelBookingRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    booking_reference: str = dataclasses.field(metadata={'path_param': { 'field_name': 'booking-reference', 'style': 'simple', 'explode': False }})
    r"""The ID of the booking"""  
    cancellation_request: Optional[shared_cancellationrequest.CancellationRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class CancelBooking404ApplicationJSONCodeEnum(str, Enum):
    NOT_FOUND = 'NOT_FOUND'

class CancelBooking404ApplicationJSONMessageEnum(str, Enum):
    r"""The specified booking was not found; or, it was not created with this API key"""
    BOOKING_NOT_FOUND = 'Booking not found'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CancelBooking404ApplicationJSON:
    r"""Not found"""
    
    code: Optional[CancelBooking404ApplicationJSONCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[CancelBooking404ApplicationJSONMessageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The specified booking was not found; or, it was not created with this API key"""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the request"""  
    tracking_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingId'), 'exclude': lambda f: f is None }})
    r"""Tracking identifier for this error response (useful when seeking support)"""  
    
class CancelBooking400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BAD_REQUEST'

class CancelBooking400ApplicationJSONMessageEnum(str, Enum):
    MISSING_CANCELLATION_REASON = 'Missing cancellation reason'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CancelBooking400ApplicationJSON:
    r"""Bad request"""
    
    code: Optional[CancelBooking400ApplicationJSONCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[CancelBooking400ApplicationJSONMessageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the request"""  
    tracking_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingId'), 'exclude': lambda f: f is None }})
    r"""Tracking identifier for this error response (useful when seeking support)"""  
    

@dataclasses.dataclass
class CancelBookingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_one_unauthorized: Optional[shared_four_hundred_and_one_unauthorized.FourHundredAndOneUNAUTHORIZED] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    four_hundred_and_six_not_acceptable: Optional[shared_four_hundred_and_six_not_acceptable.FourHundredAndSixNOTACCEPTABLE] = dataclasses.field(default=None)
    r"""Not Acceptable"""  
    five_hundred_internal_server_error: Optional[shared_five_hundred_internal_server_error.FiveHundredINTERNALSERVERERROR] = dataclasses.field(default=None)
    r"""Internal Server Error"""  
    five_hundred_and_three_service_unavailable: Optional[shared_five_hundred_and_three_service_unavailable.FiveHundredAndThreeSERVICEUNAVAILABLE] = dataclasses.field(default=None)
    r"""Service Unavailable"""  
    cancel_booking_400_application_json_object: Optional[CancelBooking400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad request"""  
    cancel_booking_404_application_json_object: Optional[CancelBooking404ApplicationJSON] = dataclasses.field(default=None)
    r"""Not found"""  
    cancel_booking_response: Optional[shared_cancelbookingresponse.CancelBookingResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    