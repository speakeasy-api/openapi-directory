"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Objects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def storage_objects_compose(self, request: operations.StorageObjectsComposeRequest, security: operations.StorageObjectsComposeSecurity) -> operations.StorageObjectsComposeResponse:
        r"""Concatenates a list of existing objects into a new object in the same bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsComposeRequest, base_url, '/b/{destinationBucket}/o/{destinationObject}/compose', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "compose_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsComposeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsComposeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_copy(self, request: operations.StorageObjectsCopyRequest, security: operations.StorageObjectsCopySecurity) -> operations.StorageObjectsCopyResponse:
        r"""Copies an object to a destination in the same location. Optionally overrides metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsCopyRequest, base_url, '/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsCopyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsCopyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_delete(self, request: operations.StorageObjectsDeleteRequest, security: operations.StorageObjectsDeleteSecurity) -> operations.StorageObjectsDeleteResponse:
        r"""Deletes data blobs and associated metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsDeleteRequest, base_url, '/b/{bucket}/o/{object}', request)
        
        query_params = utils.get_query_params(operations.StorageObjectsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def storage_objects_get(self, request: operations.StorageObjectsGetRequest, security: operations.StorageObjectsGetSecurity) -> operations.StorageObjectsGetResponse:
        r"""Retrieves objects or their associated metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsGetRequest, base_url, '/b/{bucket}/o/{object}', request)
        
        query_params = utils.get_query_params(operations.StorageObjectsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_insert(self, request: operations.StorageObjectsInsertRequest, security: operations.StorageObjectsInsertSecurity) -> operations.StorageObjectsInsertResponse:
        r"""Stores new data blobs and associated metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsInsertRequest, base_url, '/b/{bucket}/o', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_list(self, request: operations.StorageObjectsListRequest, security: operations.StorageObjectsListSecurity) -> operations.StorageObjectsListResponse:
        r"""Retrieves a list of objects matching the criteria."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsListRequest, base_url, '/b/{bucket}/o', request)
        
        query_params = utils.get_query_params(operations.StorageObjectsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Objects])
                res.objects = out

        return res

    def storage_objects_patch(self, request: operations.StorageObjectsPatchRequest, security: operations.StorageObjectsPatchSecurity) -> operations.StorageObjectsPatchResponse:
        r"""Updates a data blob's associated metadata. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsPatchRequest, base_url, '/b/{bucket}/o/{object}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_update(self, request: operations.StorageObjectsUpdateRequest, security: operations.StorageObjectsUpdateSecurity) -> operations.StorageObjectsUpdateResponse:
        r"""Updates a data blob's associated metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsUpdateRequest, base_url, '/b/{bucket}/o/{object}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Object])
                res.object = out

        return res

    def storage_objects_watch_all(self, request: operations.StorageObjectsWatchAllRequest, security: operations.StorageObjectsWatchAllSecurity) -> operations.StorageObjectsWatchAllResponse:
        r"""Watch for changes on all objects in a bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectsWatchAllRequest, base_url, '/b/{bucket}/o/watch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectsWatchAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectsWatchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    