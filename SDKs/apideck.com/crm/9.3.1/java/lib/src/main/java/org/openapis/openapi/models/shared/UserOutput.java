/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UserOutput {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public Address[] addresses;

    public UserOutput withAddresses(Address[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;

    public UserOutput withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public UserOutput withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    public String department;

    public UserOutput withDepartment(String department) {
        this.department = department;
        return this;
    }
    
    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public UserOutput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    public String division;

    public UserOutput withDivision(String division) {
        this.division = division;
        return this;
    }
    
    @JsonProperty("emails")
    public Email[] emails;

    public UserOutput withEmails(Email[] emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    public String employeeNumber;

    public UserOutput withEmployeeNumber(String employeeNumber) {
        this.employeeNumber = employeeNumber;
        return this;
    }
    
    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;

    public UserOutput withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public UserOutput withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public UserOutput withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public UserOutput withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;

    public UserOutput withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public String parentId;

    public UserOutput withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    public PhoneNumber[] phoneNumbers;

    public UserOutput withPhoneNumbers(PhoneNumber[] phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public UserOutput withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public UserOutput withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public UserOutput withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public UserOutput withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public UserOutput(@JsonProperty("emails") Email[] emails) {
        this.emails = emails;
  }
}
