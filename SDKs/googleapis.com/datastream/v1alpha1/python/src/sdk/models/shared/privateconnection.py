"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import error as shared_error
from ..shared import vpcpeeringconfig as shared_vpcpeeringconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PrivateConnectionStateEnum(str, Enum):
    r"""Output only. The state of the Private Connection."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    FAILED_TO_DELETE = 'FAILED_TO_DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrivateConnection:
    r"""The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The create time of the resource."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Represent a user-facing Error."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource's name."""  
    state: Optional[PrivateConnectionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the Private Connection."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The update time of the resource."""  
    vpc_peering_config: Optional[shared_vpcpeeringconfig.VpcPeeringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcPeeringConfig'), 'exclude': lambda f: f is None }})
    r"""The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrivateConnectionInput:
    r"""The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Represent a user-facing Error."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    vpc_peering_config: Optional[shared_vpcpeeringconfig.VpcPeeringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcPeeringConfig'), 'exclude': lambda f: f is None }})
    r"""The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC."""  
    