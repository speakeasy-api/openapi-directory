"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import naokresponse as shared_naokresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class SetthermpointSecurity:
    
    code_oauth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    password_oauth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class SetthermpointSetpointModeEnum(str, Enum):
    r"""Chosen setpoint_mode"""
    PROGRAM = 'program'
    AWAY = 'away'
    HG = 'hg'
    MANUAL = 'manual'
    OFF = 'off'
    MAX = 'max'


@dataclasses.dataclass
class SetthermpointRequest:
    
    device_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'device_id', 'style': 'form', 'explode': True }})
    r"""The relay id"""  
    module_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'module_id', 'style': 'form', 'explode': True }})
    r"""The thermostat id"""  
    setpoint_mode: SetthermpointSetpointModeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'setpoint_mode', 'style': 'form', 'explode': True }})
    r"""Chosen setpoint_mode"""  
    setpoint_endtime: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'setpoint_endtime', 'style': 'form', 'explode': True }})
    r"""When using the manual or max setpoint_mode, this parameter defines when the setpoint expires."""  
    setpoint_temp: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'setpoint_temp', 'style': 'form', 'explode': True }})
    r"""When using the manual setpoint_mode, this parameter defines the temperature setpoint (in Celcius) to use."""  
    

@dataclasses.dataclass
class SetthermpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    na_ok_response: Optional[shared_naokresponse.NAOkResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    