"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import alarms as shared_alarms
from ..shared import authmode_enum as shared_authmode_enum
from ..shared import imagelocation as shared_imagelocation
from ..shared import portalstatus as shared_portalstatus
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribePortalResponse:
    r"""Success"""
    
    portal_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalArn') }})  
    portal_client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalClientId') }})  
    portal_contact_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalContactEmail') }})  
    portal_creation_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalCreationDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    portal_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalId') }})  
    portal_last_update_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalLastUpdateDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    portal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalName') }})  
    portal_start_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalStartUrl') }})  
    portal_status: shared_portalstatus.PortalStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalStatus') }})  
    alarms: Optional[shared_alarms.Alarms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarms'), 'exclude': lambda f: f is None }})  
    notification_sender_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationSenderEmail'), 'exclude': lambda f: f is None }})  
    portal_auth_mode: Optional[shared_authmode_enum.AuthModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalAuthMode'), 'exclude': lambda f: f is None }})  
    portal_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalDescription'), 'exclude': lambda f: f is None }})  
    portal_logo_image_location: Optional[shared_imagelocation.ImageLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalLogoImageLocation'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn'), 'exclude': lambda f: f is None }})  
    