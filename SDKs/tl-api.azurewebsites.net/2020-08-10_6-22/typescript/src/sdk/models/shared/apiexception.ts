/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ValidationError } from "./validationerror";
import { Expose, Type } from "class-transformer";

export class ApiException extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "InnerException" })
  innerException?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Source" })
  source?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StackTrace" })
  stackTrace?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "customError" })
  customError?: any;

  @SpeakeasyMetadata({ elemType: ValidationError })
  @Expose({ name: "errors" })
  @Type(() => ValidationError)
  errors?: ValidationError[];

  @SpeakeasyMetadata()
  @Expose({ name: "isCustomErrorObject" })
  isCustomErrorObject?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isModelValidatonError" })
  isModelValidatonError?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "referenceDocumentLink" })
  referenceDocumentLink?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "referenceErrorCode" })
  referenceErrorCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: number;
}
