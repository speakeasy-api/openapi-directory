/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new Network Connectivity Center hub in the specified project.
   */
  networkconnectivityProjectsLocationsGlobalHubsCreate(
    req: operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest,
    security: operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/hubs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "hubInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the Network Connectivity Center hubs associated with a given project.
   */
  networkconnectivityProjectsLocationsGlobalHubsList(
    req: operations.NetworkconnectivityProjectsLocationsGlobalHubsListRequest,
    security: operations.NetworkconnectivityProjectsLocationsGlobalHubsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsGlobalHubsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/hubs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsGlobalHubsListResponse =
        new operations.NetworkconnectivityProjectsLocationsGlobalHubsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listHubsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListHubsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new internal range in a given project and location.
   */
  networkconnectivityProjectsLocationsInternalRangesCreate(
    req: operations.NetworkconnectivityProjectsLocationsInternalRangesCreateRequest,
    security: operations.NetworkconnectivityProjectsLocationsInternalRangesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsInternalRangesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/internalRanges",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "internalRangeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsInternalRangesCreateResponse =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists internal ranges in a given project and location.
   */
  networkconnectivityProjectsLocationsInternalRangesList(
    req: operations.NetworkconnectivityProjectsLocationsInternalRangesListRequest,
    security: operations.NetworkconnectivityProjectsLocationsInternalRangesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsInternalRangesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/internalRanges",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsInternalRangesListResponse =
        new operations.NetworkconnectivityProjectsLocationsInternalRangesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInternalRangesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInternalRangesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  networkconnectivityProjectsLocationsList(
    req: operations.NetworkconnectivityProjectsLocationsListRequest,
    security: operations.NetworkconnectivityProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworkconnectivityProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsListResponse =
        new operations.NetworkconnectivityProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  networkconnectivityProjectsLocationsOperationsCancel(
    req: operations.NetworkconnectivityProjectsLocationsOperationsCancelRequest,
    security: operations.NetworkconnectivityProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsOperationsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsOperationsCancelResponse =
        new operations.NetworkconnectivityProjectsLocationsOperationsCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  networkconnectivityProjectsLocationsOperationsList(
    req: operations.NetworkconnectivityProjectsLocationsOperationsListRequest,
    security: operations.NetworkconnectivityProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsOperationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsOperationsListResponse =
        new operations.NetworkconnectivityProjectsLocationsOperationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Network Connectivity Center spoke.
   */
  networkconnectivityProjectsLocationsSpokesCreate(
    req: operations.NetworkconnectivityProjectsLocationsSpokesCreateRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/spokes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "spokeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesCreateResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Network Connectivity Center spoke.
   */
  networkconnectivityProjectsLocationsSpokesDelete(
    req: operations.NetworkconnectivityProjectsLocationsSpokesDeleteRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesDeleteResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details about a Network Connectivity Center spoke.
   */
  networkconnectivityProjectsLocationsSpokesGet(
    req: operations.NetworkconnectivityProjectsLocationsSpokesGetRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworkconnectivityProjectsLocationsSpokesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesGetResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spoke = utils.objectToClass(httpRes?.data, shared.Spoke);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  networkconnectivityProjectsLocationsSpokesGetIamPolicy(
    req: operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the Network Connectivity Center spokes in a specified project and location.
   */
  networkconnectivityProjectsLocationsSpokesList(
    req: operations.NetworkconnectivityProjectsLocationsSpokesListRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/spokes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesListResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSpokesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSpokesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a Network Connectivity Center spoke.
   */
  networkconnectivityProjectsLocationsSpokesPatch(
    req: operations.NetworkconnectivityProjectsLocationsSpokesPatchRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "spokeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesPatchResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  networkconnectivityProjectsLocationsSpokesSetIamPolicy(
    req: operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  networkconnectivityProjectsLocationsSpokesTestIamPermissions(
    req: operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest,
    security: operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse =
        new operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
