/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Connection - A connection represents the link between a `company` and a source of data.
 */
public class Connection {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalProperties")
    public Object additionalProperties;

    public Connection withAdditionalProperties(Object additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionInfo")
    public java.util.Map<String, String> connectionInfo;

    public Connection withConnectionInfo(java.util.Map<String, String> connectionInfo) {
        this.connectionInfo = connectionInfo;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonProperty("created")
    public String created;

    public Connection withCreated(String created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataConnectionErrors")
    public DataConnectionError[] dataConnectionErrors;

    public Connection withDataConnectionErrors(DataConnectionError[] dataConnectionErrors) {
        this.dataConnectionErrors = dataConnectionErrors;
        return this;
    }
    
    /**
     * Unique identifier for a company's data connection.
     */
    @JsonProperty("id")
    public String id;

    public Connection withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A Codat ID representing the integration.
     */
    @JsonProperty("integrationId")
    public String integrationId;

    public Connection withIntegrationId(String integrationId) {
        this.integrationId = integrationId;
        return this;
    }
    
    /**
     * A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.
     */
    @JsonProperty("integrationKey")
    public String integrationKey;

    public Connection withIntegrationKey(String integrationKey) {
        this.integrationKey = integrationKey;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastSync")
    public String lastSync;

    public Connection withLastSync(String lastSync) {
        this.lastSync = lastSync;
        return this;
    }
    
    @JsonProperty("linkUrl")
    public String linkUrl;

    public Connection withLinkUrl(String linkUrl) {
        this.linkUrl = linkUrl;
        return this;
    }
    
    @JsonProperty("platformName")
    public String platformName;

    public Connection withPlatformName(String platformName) {
        this.platformName = platformName;
        return this;
    }
    
    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    @JsonProperty("sourceId")
    public String sourceId;

    public Connection withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }
    
    /**
     * The type of platform of the connection.
     */
    @JsonProperty("sourceType")
    public ConnectionSourceTypeEnum sourceType;

    public Connection withSourceType(ConnectionSourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     * The current authorization status of the data connection.
     */
    @JsonProperty("status")
    public DataConnectionStatusEnum status;

    public Connection withStatus(DataConnectionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public Connection(@JsonProperty("created") String created, @JsonProperty("id") String id, @JsonProperty("integrationId") String integrationId, @JsonProperty("integrationKey") String integrationKey, @JsonProperty("linkUrl") String linkUrl, @JsonProperty("platformName") String platformName, @JsonProperty("sourceId") String sourceId, @JsonProperty("sourceType") ConnectionSourceTypeEnum sourceType, @JsonProperty("status") DataConnectionStatusEnum status) {
        this.created = created;
        this.id = id;
        this.integrationId = integrationId;
        this.integrationKey = integrationKey;
        this.linkUrl = linkUrl;
        this.platformName = platformName;
        this.sourceId = sourceId;
        this.sourceType = sourceType;
        this.status = status;
  }
}
