/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * On this day historical events for birth, death and other events.
 *
 * @see {@link http://fungenerators.com/api/facts#number} - Find out more
 */
export class OnThisDay {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns a random ( famous/ relatively famous ) person born on a given day and month
   */
  getFactOnthisdayBorn(
    req: operations.GetFactOnthisdayBornRequest,
    security: operations.GetFactOnthisdayBornSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFactOnthisdayBornResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFactOnthisdayBornRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/fact/onthisday/born";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFactOnthisdayBornSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFactOnthisdayBornResponse =
        new operations.GetFactOnthisdayBornResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Returns a random ( famous/ relatively famous ) person died on a given day and month
   */
  getFactOnthisdayDied(
    req: operations.GetFactOnthisdayDiedRequest,
    security: operations.GetFactOnthisdayDiedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFactOnthisdayDiedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFactOnthisdayDiedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/fact/onthisday/died";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFactOnthisdayDiedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFactOnthisdayDiedResponse =
        new operations.GetFactOnthisdayDiedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Returns a random ( famous/ relatively famous ) historic event on a given day and month
   */
  getFactOnthisdayEvent(
    req: operations.GetFactOnthisdayEventRequest,
    security: operations.GetFactOnthisdayEventSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFactOnthisdayEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFactOnthisdayEventRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/fact/onthisday/event";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFactOnthisdayEventSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFactOnthisdayEventResponse =
        new operations.GetFactOnthisdayEventResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
