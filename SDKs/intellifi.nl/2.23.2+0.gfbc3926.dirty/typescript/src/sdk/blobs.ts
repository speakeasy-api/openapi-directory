/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
 *
 * @remarks
 * Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
 *
 * See also the `kvpairs` resource.
 *
 */
export class Blobs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create binary large object (blob) metadata
   */
  addBlob(
    req: shared.BlobInput,
    config?: AxiosRequestConfig
  ): Promise<operations.AddBlobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BlobInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/blobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddBlobResponse = new operations.AddBlobResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseDefaultResource = utils.objectToClass(
              httpRes?.data,
              shared.ResponseDefaultResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete binary large object (blob)
   */
  deleteBlob(
    req: operations.DeleteBlobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteBlobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteBlobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/blobs/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteBlobResponse =
        new operations.DeleteBlobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseDefaultResource = utils.objectToClass(
              httpRes?.data,
              shared.ResponseDefaultResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download a binary large object (blob)
   */
  getBlobById(
    req: operations.GetBlobByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBlobByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBlobByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/blobs/{id}/download/{filename}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBlobByIdResponse =
        new operations.GetBlobByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `image/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getBlobById200ImageWildcardBinaryString = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get binary large object (blob)
   */
  getBlobMetadataById(
    req: operations.GetBlobMetadataByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBlobMetadataByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBlobMetadataByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/blobs/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBlobMetadataByIdResponse =
        new operations.GetBlobMetadataByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.blob = utils.objectToClass(httpRes?.data, shared.Blob);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all binary large objects (blob)
   */
  getBlobs(
    req: operations.GetBlobsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBlobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBlobsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/blobs";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBlobsResponse = new operations.GetBlobsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBlobs200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBlobs200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create binary large object (blob)
   */
  uploadBlobById(
    req: operations.UploadBlobByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UploadBlobByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UploadBlobByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/blobs/{id}/upload", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UploadBlobByIdResponse =
        new operations.UploadBlobByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
