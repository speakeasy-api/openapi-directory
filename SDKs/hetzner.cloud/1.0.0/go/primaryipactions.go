// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

type primaryIPActions struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPrimaryIPActions(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *primaryIPActions {
	return &primaryIPActions{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// PostPrimaryIpsIDActionsAssign - Assign a Primary IP to a resource
// Assigns a Primary IP to a Server.
//
// A Server can only have one Primary IP of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use Floating IPs.
//
// The Server must be powered off (status `off`) in order for this operation to succeed.
//
// #### Call specific error codes
//
// | Code                          | Description                                                   |
// |------------------------------ |-------------------------------------------------------------- |
// | `server_not_stopped`          | The server is running, but needs to be powered off            |
// | `primary_ip_already_assigned` | Primary ip is already assigned to a different server          |
// | `server_has_ipv4`             | The server already has an ipv4 address                        |
// | `server_has_ipv6`             | The server already has an ipv6 address                        |
func (s *primaryIPActions) PostPrimaryIpsIDActionsAssign(ctx context.Context, request operations.PostPrimaryIpsIDActionsAssignRequest) (*operations.PostPrimaryIpsIDActionsAssignResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/primary_ips/{id}/actions/assign", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPrimaryIpsIDActionsAssignResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPrimaryIpsIDActionsAssignActionResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ActionResponse = out
		}
	}

	return res, nil
}

// PostPrimaryIpsIDActionsChangeDNSPtr - Change reverse DNS entry for a Primary IP
// Changes the hostname that will appear when getting the hostname belonging to this Primary IP.
func (s *primaryIPActions) PostPrimaryIpsIDActionsChangeDNSPtr(ctx context.Context, request operations.PostPrimaryIpsIDActionsChangeDNSPtrRequest) (*operations.PostPrimaryIpsIDActionsChangeDNSPtrResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/primary_ips/{id}/actions/change_dns_ptr", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPrimaryIpsIDActionsChangeDNSPtrResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPrimaryIpsIDActionsChangeDNSPtrActionResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ActionResponse = out
		}
	}

	return res, nil
}

// PostPrimaryIpsIDActionsChangeProtection - Change Primary IP Protection
// Changes the protection configuration of a Primary IP.
//
// A Primary IP can only be delete protected if its `auto_delete` property is set to `false`.
func (s *primaryIPActions) PostPrimaryIpsIDActionsChangeProtection(ctx context.Context, request operations.PostPrimaryIpsIDActionsChangeProtectionRequest) (*operations.PostPrimaryIpsIDActionsChangeProtectionResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/primary_ips/{id}/actions/change_protection", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPrimaryIpsIDActionsChangeProtectionResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPrimaryIpsIDActionsChangeProtectionActionResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ActionResponse = out
		}
	}

	return res, nil
}

// PostPrimaryIpsIDActionsUnassign - Unassign a Primary IP from a resource
// Unassigns a Primary IP from a Server.
//
// The Server must be powered off (status `off`) in order for this operation to succeed.
//
// Note that only Servers that have at least one network interface (public or private) attached can be powered on.
//
// #### Call specific error codes
//
// | Code                              | Description                                                   |
// |---------------------------------- |-------------------------------------------------------------- |
// | `server_not_stopped`              | The server is running, but needs to be powered off            |
// | `server_is_load_balancer_target`  | The server ipv4 address is a loadbalancer target              |
func (s *primaryIPActions) PostPrimaryIpsIDActionsUnassign(ctx context.Context, request operations.PostPrimaryIpsIDActionsUnassignRequest) (*operations.PostPrimaryIpsIDActionsUnassignResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/primary_ips/{id}/actions/unassign", request, nil)

	req, err := http.NewRequestWithContext(ctx, "POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostPrimaryIpsIDActionsUnassignResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostPrimaryIpsIDActionsUnassignActionResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ActionResponse = out
		}
	}

	return res, nil
}
