// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum - An enumeration.
type MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum string

const (
	MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnumCity     MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum = "city"
	MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnumCountry  MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum = "country"
	MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnumLocation MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum = "location"
	MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnumDatetime MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum = "datetime"
)

func (e MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum) ToPointer() *MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum {
	return &e
}

func (e *MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "location":
		fallthrough
	case "datetime":
		*e = MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum: %v", v)
	}
}

// MeasurementsGetV1V1MeasurementsGetSortSortEnum - An enumeration.
type MeasurementsGetV1V1MeasurementsGetSortSortEnum string

const (
	MeasurementsGetV1V1MeasurementsGetSortSortEnumAsc  MeasurementsGetV1V1MeasurementsGetSortSortEnum = "asc"
	MeasurementsGetV1V1MeasurementsGetSortSortEnumDesc MeasurementsGetV1V1MeasurementsGetSortSortEnum = "desc"
)

func (e MeasurementsGetV1V1MeasurementsGetSortSortEnum) ToPointer() *MeasurementsGetV1V1MeasurementsGetSortSortEnum {
	return &e
}

func (e *MeasurementsGetV1V1MeasurementsGetSortSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = MeasurementsGetV1V1MeasurementsGetSortSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementsGetV1V1MeasurementsGetSortSortEnum: %v", v)
	}
}

type MeasurementsGetV1V1MeasurementsGetRequest struct {
	//         Limit results by a certain city or cities.
	//         (ex. ?city=Chicago or ?city=Chicago&city=Boston)
	//
	City        []string `queryParam:"style=form,explode=true,name=city"`
	Coordinates *string  `queryParam:"style=form,explode=true,name=coordinates"`
	//         Limit results by a certain country using two letter country code.
	//         (ex. ?country=US or ?country=US&country=MX)
	//
	Country []string `queryParam:"style=form,explode=true,name=country"`
	//         Limit results by a certain country using two letter country code.
	//         (ex. /US)
	//
	CountryID *string     `queryParam:"style=form,explode=true,name=country_id"`
	DateFrom  interface{} `queryParam:"style=form,explode=true,name=date_from"`
	DateTo    interface{} `queryParam:"style=form,explode=true,name=date_to"`
	// An enumeration.
	Entity        *shared.EntityTypesEnum `queryParam:"style=form,explode=true,name=entity"`
	Format        *string                 `queryParam:"style=form,explode=true,name=format"`
	HasGeo        *bool                   `queryParam:"style=form,explode=true,name=has_geo"`
	IncludeFields *string                 `queryParam:"style=form,explode=true,name=include_fields"`
	IsAnalysis    *bool                   `queryParam:"style=form,explode=true,name=isAnalysis"`
	IsMobile      *bool                   `queryParam:"style=form,explode=true,name=isMobile"`
	// Change the number of results returned.
	Limit      *int64        `queryParam:"style=form,explode=true,name=limit"`
	Location   []interface{} `queryParam:"style=form,explode=true,name=location"`
	LocationID *int64        `queryParam:"style=form,explode=true,name=location_id"`
	Offset     *int64        `queryParam:"style=form,explode=true,name=offset"`
	// An enumeration.
	OrderBy *MeasurementsGetV1V1MeasurementsGetOrderByMeasOrderEnum `queryParam:"style=form,explode=true,name=order_by"`
	// Paginate through results.
	Page        *int64        `queryParam:"style=form,explode=true,name=page"`
	Parameter   []interface{} `queryParam:"style=form,explode=true,name=parameter"`
	ParameterID *int64        `queryParam:"style=form,explode=true,name=parameter_id"`
	Project     *int64        `queryParam:"style=form,explode=true,name=project"`
	Radius      *int64        `queryParam:"style=form,explode=true,name=radius"`
	// An enumeration.
	SensorType *shared.SensorTypesEnum `queryParam:"style=form,explode=true,name=sensorType"`
	// An enumeration.
	Sort      *MeasurementsGetV1V1MeasurementsGetSortSortEnum `queryParam:"style=form,explode=true,name=sort"`
	Unit      []string                                        `queryParam:"style=form,explode=true,name=unit"`
	ValueFrom *float64                                        `queryParam:"style=form,explode=true,name=value_from"`
	ValueTo   *float64                                        `queryParam:"style=form,explode=true,name=value_to"`
}

type MeasurementsGetV1V1MeasurementsGetResponse struct {
	ContentType string
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	StatusCode          int
	RawResponse         *http.Response
	// Successful Response
	MeasurementsGetV1V1MeasurementsGet200ApplicationJSONAny interface{}
}
