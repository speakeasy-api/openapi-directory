// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// IndividualNameDirectionEnum - The direction used to render the individual's name.
type IndividualNameDirectionEnum string

const (
	IndividualNameDirectionEnumLeftToRight IndividualNameDirectionEnum = "left-to-right"
	IndividualNameDirectionEnumRightToLeft IndividualNameDirectionEnum = "right-to-left"
)

func (e *IndividualNameDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-to-right":
		fallthrough
	case "right-to-left":
		*e = IndividualNameDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualNameDirectionEnum: %s", s)
	}
}

// IndividualNameNamePrefixEnum - The individual's name prefix.
type IndividualNameNamePrefixEnum string

const (
	IndividualNameNamePrefixEnumMr IndividualNameNamePrefixEnum = "Mr"
	IndividualNameNamePrefixEnumMs IndividualNameNamePrefixEnum = "Ms"
)

func (e *IndividualNameNamePrefixEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Mr":
		fallthrough
	case "Ms":
		*e = IndividualNameNamePrefixEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualNameNamePrefixEnum: %s", s)
	}
}

// IndividualNameNameTypeEnum - The name type.
type IndividualNameNameTypeEnum string

const (
	IndividualNameNameTypeEnumAlias         IndividualNameNameTypeEnum = "Alias"
	IndividualNameNameTypeEnumPrincipalName IndividualNameNameTypeEnum = "Principal Name"
)

func (e *IndividualNameNameTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Alias":
		fallthrough
	case "Principal Name":
		*e = IndividualNameNameTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualNameNameTypeEnum: %s", s)
	}
}

// IndividualNameInput - The Individual Name resource.
type IndividualNameInput struct {
	// The direction used to render the individual's name.
	Direction *IndividualNameDirectionEnum `json:"direction,omitempty"`
	// The individual's family name.
	FamilyName *string `json:"familyName,omitempty"`
	// The individual's formal salutation, for example, "Mr William Smith".
	FormalSalutation *string `json:"formalSalutation,omitempty"`
	// The individual's given name.
	GivenName *string `json:"givenName,omitempty"`
	// The individual's informal salutation, for example, "Bill".
	InformalSalutation *string `json:"informalSalutation,omitempty"`
	// The individual's middle name.
	MiddleName *string `json:"middleName,omitempty"`
	// The individual's name prefix.
	NamePrefix *IndividualNameNamePrefixEnum `json:"namePrefix,omitempty"`
	// The individual's name suffix, for example, "Jr" or "Sr".
	NameSuffix *string `json:"nameSuffix,omitempty"`
	// The name type.
	NameType *IndividualNameNameTypeEnum `json:"nameType,omitempty"`
}

// IndividualName - The Individual Name resource.
type IndividualName struct {
	// The direction used to render the individual's name.
	Direction *IndividualNameDirectionEnum `json:"direction,omitempty"`
	// The individual's family name.
	FamilyName *string `json:"familyName,omitempty"`
	// The individual's formal salutation, for example, "Mr William Smith".
	FormalSalutation *string `json:"formalSalutation,omitempty"`
	// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	FromDate *time.Time `json:"fromDate,omitempty"`
	// The individual's given name.
	GivenName *string `json:"givenName,omitempty"`
	// The resource's unique identifier.
	ID *string `json:"id,omitempty"`
	// The individual's informal salutation, for example, "Bill".
	InformalSalutation *string `json:"informalSalutation,omitempty"`
	// The individual's middle name.
	MiddleName *string `json:"middleName,omitempty"`
	// The individual's name prefix.
	NamePrefix *IndividualNameNamePrefixEnum `json:"namePrefix,omitempty"`
	// The individual's name suffix, for example, "Jr" or "Sr".
	NameSuffix *string `json:"nameSuffix,omitempty"`
	// The name type.
	NameType *IndividualNameNameTypeEnum `json:"nameType,omitempty"`
	// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	ToDate *time.Time `json:"toDate,omitempty"`
}
