// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PresetsMetadataConnectionsVideos - Information about the videos in this preset.
type PresetsMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsMetadataConnections - A list of resource URIs related to the album.
type PresetsMetadataConnections struct {
	// Information about the videos in this preset.
	Videos PresetsMetadataConnectionsVideos `json:"videos"`
}

// PresetsMetadata - Metadata about the album.
type PresetsMetadata struct {
	// A list of resource URIs related to the album.
	Connections PresetsMetadataConnections `json:"connections"`
}

type PresetsSettingsButtons struct {
	// Whether the preset includes Embed button settings.
	Embed bool `json:"embed"`
	// Whether the preset includes HD button settings.
	Hd bool `json:"hd"`
	// Whether the preset includes Like button settings.
	Like bool `json:"like"`
	// Whether the present includes Share button settings.
	Share bool `json:"share"`
	// Whether the preset includes Vote button settings.
	Vote bool `json:"vote"`
	// Whether the preset includes Watch Later button settings.
	Watchlater bool `json:"watchlater"`
}

type PresetsSettingsLogos struct {
	// Whether the preset includes custom logo settings.
	Custom bool `json:"custom"`
	// Whether the present includes sticky custom logo settings.
	StickyCustom bool `json:"sticky_custom"`
	// Whether the preset includes Vimeo logo settings.
	Vimeo bool `json:"vimeo"`
}

// PresetsSettingsOutroLink - The outro link settings. Present only if the type is `link`.
type PresetsSettingsOutroLink struct {
	// The name of the outro link.
	Name *string `json:"name,omitempty"`
	// The URL of the outro link.
	URL *string `json:"url,omitempty"`
}

// PresetsSettingsOutroTypeEnum - The preset outro type:
type PresetsSettingsOutroTypeEnum string

const (
	PresetsSettingsOutroTypeEnumLink           PresetsSettingsOutroTypeEnum = "link"
	PresetsSettingsOutroTypeEnumNoIdea         PresetsSettingsOutroTypeEnum = "no idea"
	PresetsSettingsOutroTypeEnumText           PresetsSettingsOutroTypeEnum = "text"
	PresetsSettingsOutroTypeEnumUploadedClips  PresetsSettingsOutroTypeEnum = "uploaded_clips"
	PresetsSettingsOutroTypeEnumUploadedVideos PresetsSettingsOutroTypeEnum = "uploaded_videos"
)

func (e *PresetsSettingsOutroTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "link":
		fallthrough
	case "no idea":
		fallthrough
	case "text":
		fallthrough
	case "uploaded_clips":
		fallthrough
	case "uploaded_videos":
		*e = PresetsSettingsOutroTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsSettingsOutroTypeEnum: %s", s)
	}
}

type PresetsSettingsOutro struct {
	// A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.
	Clips *string `json:"clips,omitempty"`
	// The outro link settings. Present only if the type is `link`.
	Link *PresetsSettingsOutroLink `json:"link,omitempty"`
	// The outro text. Present only if the type is `text`.
	Text *string `json:"text,omitempty"`
	// The preset outro type:
	Type PresetsSettingsOutroTypeEnum `json:"type"`
	// A comma-separated list of video URIs. Present only if type is `no idea`.
	Videos *string `json:"videos,omitempty"`
}

// PresetsSettings - The contents of the presets group.
type PresetsSettings struct {
	Buttons PresetsSettingsButtons `json:"buttons"`
	Logos   PresetsSettingsLogos   `json:"logos"`
	Outro   PresetsSettingsOutro   `json:"outro"`
}

// PresetsUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type PresetsUserAccountEnum string

const (
	PresetsUserAccountEnumBasic        PresetsUserAccountEnum = "basic"
	PresetsUserAccountEnumBusiness     PresetsUserAccountEnum = "business"
	PresetsUserAccountEnumLiveBusiness PresetsUserAccountEnum = "live_business"
	PresetsUserAccountEnumLivePremium  PresetsUserAccountEnum = "live_premium"
	PresetsUserAccountEnumLivePro      PresetsUserAccountEnum = "live_pro"
	PresetsUserAccountEnumPlus         PresetsUserAccountEnum = "plus"
	PresetsUserAccountEnumPro          PresetsUserAccountEnum = "pro"
	PresetsUserAccountEnumProUnlimited PresetsUserAccountEnum = "pro_unlimited"
	PresetsUserAccountEnumProducer     PresetsUserAccountEnum = "producer"
)

func (e *PresetsUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = PresetsUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserAccountEnum: %s", s)
	}
}

// PresetsUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type PresetsUserContentFilterEnum string

const (
	PresetsUserContentFilterEnumDrugs    PresetsUserContentFilterEnum = "drugs"
	PresetsUserContentFilterEnumLanguage PresetsUserContentFilterEnum = "language"
	PresetsUserContentFilterEnumNudity   PresetsUserContentFilterEnum = "nudity"
	PresetsUserContentFilterEnumSafe     PresetsUserContentFilterEnum = "safe"
	PresetsUserContentFilterEnumUnrated  PresetsUserContentFilterEnum = "unrated"
	PresetsUserContentFilterEnumViolence PresetsUserContentFilterEnum = "violence"
)

func (e *PresetsUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = PresetsUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserContentFilterEnum: %s", s)
	}
}

// PresetsUserMetadataConnectionsAlbums - Information about the albums created by this user.
type PresetsUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type PresetsUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type PresetsUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsCategories - Information about this user's followed categories.
type PresetsUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type PresetsUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsFeed - Information about this user's feed.
type PresetsUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsFolders - Information about this user's folders.
type PresetsUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsFollowers - Information about the user's followers.
type PresetsUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type PresetsUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsGroups - Information about the groups created by this user.
type PresetsUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type PresetsUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type PresetsUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsPictures - Information about this user's portraits.
type PresetsUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type PresetsUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type PresetsUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type PresetsUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type PresetsUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type PresetsUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type PresetsUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type PresetsUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// PresetsUserMetadataConnections - The list of resource URIs related to the user.
type PresetsUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums PresetsUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances PresetsUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block PresetsUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories PresetsUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels PresetsUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed PresetsUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders PresetsUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers PresetsUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following PresetsUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups PresetsUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes PresetsUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels PresetsUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures PresetsUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios PresetsUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels PresetsUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers PresetsUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared PresetsUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos PresetsUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos PresetsUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater PresetsUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type PresetsUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// PresetsUserMetadataInteractionsBlock - Information related to the block status of this user.
type PresetsUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// PresetsUserMetadataInteractionsFollow - Information related to the followed status of this user.
type PresetsUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// PresetsUserMetadataInteractionsReport - Information regarding where and how to report a user.
type PresetsUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type PresetsUserMetadataInteractions struct {
	AddPrivacyUser *PresetsUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block PresetsUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow PresetsUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report PresetsUserMetadataInteractionsReport `json:"report"`
}

// PresetsUserMetadata - The user's metadata.
type PresetsUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  PresetsUserMetadataConnections  `json:"connections"`
	Interactions PresetsUserMetadataInteractions `json:"interactions"`
}

// PresetsUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type PresetsUserPreferencesVideosPrivacyCommentsEnum string

const (
	PresetsUserPreferencesVideosPrivacyCommentsEnumAnybody  PresetsUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	PresetsUserPreferencesVideosPrivacyCommentsEnumContacts PresetsUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	PresetsUserPreferencesVideosPrivacyCommentsEnumNobody   PresetsUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *PresetsUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = PresetsUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// PresetsUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type PresetsUserPreferencesVideosPrivacyEmbedEnum string

const (
	PresetsUserPreferencesVideosPrivacyEmbedEnumPrivate   PresetsUserPreferencesVideosPrivacyEmbedEnum = "private"
	PresetsUserPreferencesVideosPrivacyEmbedEnumPublic    PresetsUserPreferencesVideosPrivacyEmbedEnum = "public"
	PresetsUserPreferencesVideosPrivacyEmbedEnumWhitelist PresetsUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *PresetsUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = PresetsUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// PresetsUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type PresetsUserPreferencesVideosPrivacyViewEnum string

const (
	PresetsUserPreferencesVideosPrivacyViewEnumAnybody  PresetsUserPreferencesVideosPrivacyViewEnum = "anybody"
	PresetsUserPreferencesVideosPrivacyViewEnumContacts PresetsUserPreferencesVideosPrivacyViewEnum = "contacts"
	PresetsUserPreferencesVideosPrivacyViewEnumDisable  PresetsUserPreferencesVideosPrivacyViewEnum = "disable"
	PresetsUserPreferencesVideosPrivacyViewEnumNobody   PresetsUserPreferencesVideosPrivacyViewEnum = "nobody"
	PresetsUserPreferencesVideosPrivacyViewEnumPassword PresetsUserPreferencesVideosPrivacyViewEnum = "password"
	PresetsUserPreferencesVideosPrivacyViewEnumUnlisted PresetsUserPreferencesVideosPrivacyViewEnum = "unlisted"
	PresetsUserPreferencesVideosPrivacyViewEnumUsers    PresetsUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *PresetsUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = PresetsUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type PresetsUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *PresetsUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *PresetsUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *PresetsUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type PresetsUserPreferencesVideos struct {
	Privacy *PresetsUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type PresetsUserPreferences struct {
	Videos *PresetsUserPreferencesVideos `json:"videos,omitempty"`
}

// PresetsUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type PresetsUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// PresetsUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type PresetsUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// PresetsUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type PresetsUserUploadQuotaSpaceShowingEnum string

const (
	PresetsUserUploadQuotaSpaceShowingEnumLifetime PresetsUserUploadQuotaSpaceShowingEnum = "lifetime"
	PresetsUserUploadQuotaSpaceShowingEnumPeriodic PresetsUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *PresetsUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = PresetsUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetsUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// PresetsUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type PresetsUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing PresetsUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// PresetsUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type PresetsUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime PresetsUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic PresetsUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space PresetsUserUploadQuotaSpace `json:"space"`
}

type PresetsUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// PresetsUser - The owner of the preset.
type PresetsUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account PresetsUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *PresetsUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata PresetsUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                 `json:"pictures"`
	Preferences *PresetsUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota PresetsUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []PresetsUserWebsites `json:"websites"`
}

// Presets - The embed preset was returned.
type Presets struct {
	// Metadata about the album.
	Metadata PresetsMetadata `json:"metadata"`
	// The display name of the presets group.
	Name string `json:"name"`
	// The contents of the presets group.
	Settings PresetsSettings `json:"settings"`
	// The canonical relative URI of the presets object.
	URI string `json:"uri"`
	// The owner of the preset.
	User PresetsUser `json:"user"`
}
