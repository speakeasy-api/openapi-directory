// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum string

const (
	PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnumWaiting   PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum = "waiting"
	PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnumEnded     PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum = "ended"
	PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnumValidated PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum = "validated"
)

func (e PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum) ToPointer() *PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum {
	return &e
}

func (e *PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "waiting":
		fallthrough
	case "ended":
		fallthrough
	case "validated":
		*e = PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum: %v", v)
	}
}

// PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBody - Status to modify
type PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBody struct {
	Status *PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBodyStatusEnum `json:"Status,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequest struct {
	// Status to modify
	RequestBody PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequestBody `request:"mediaType=application/json"`
	// Id of the folder exchange or followup
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the requireddocument
	Requireddocumentid string `pathParam:"style=simple,explode=false,name=requireddocumentid"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
