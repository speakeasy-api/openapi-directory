// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetV2PeopleJSONRequest struct {
	// For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name.
	Query *string `queryParam:"style=form,explode=true,name=_query"`
	// Filters people by the account they are linked to. Multiple account ids can be applied
	AccountID []int64 `queryParam:"style=form,explode=false,name=account_id"`
	// Filters people by whether an email that was sent to them bounced or not.
	Bounced *bool `queryParam:"style=form,explode=true,name=bounced"`
	// Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of "_is_null" can be passed to filter people that are not on a cadence.
	CadenceID []int64 `queryParam:"style=form,explode=false,name=cadence_id"`
	// Includes people that can be called given do_not_contact and contact_restrictions property
	CanCall *bool `queryParam:"style=form,explode=true,name=can_call"`
	// Includes people that can be emailed given do_not_contact and contact_restrictions property
	CanEmail *bool `queryParam:"style=form,explode=true,name=can_email"`
	// Includes people that can be sent a text message given do_not_contact and contact_restrictions property
	CanText *bool `queryParam:"style=form,explode=true,name=can_text"`
	// Filters people by their city by exact match. Supports partial matching
	City []string `queryParam:"style=form,explode=false,name=city"`
	// Filters people by their country by exact match. Supports partial matching
	Country []string `queryParam:"style=form,explode=false,name=country"`
	// Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	CreatedAt map[string]interface{} `queryParam:"style=form,explode=true,name=created_at"`
	// Filters people by crm_id. Multiple crm ids can be applied
	CrmID []string `queryParam:"style=form,explode=false,name=crm_id"`
	// Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]=custom_field_value
	CustomFields map[string]interface{} `queryParam:"style=form,explode=true,name=custom_fields"`
	// Includes people that have a given do_not_contact property
	DoNotContact *bool `queryParam:"style=form,explode=true,name=do_not_contact"`
	// Filters people by email address. Multiple emails can be applied. An additional value of "_is_null" can be passed to filter people that do not have an email address.
	EmailAddresses []string `queryParam:"style=form,explode=false,name=email_addresses"`
	// Filters people by whether or not they are marked as an European Union Resident or not.
	EuResident *bool `queryParam:"style=form,explode=true,name=eu_resident"`
	// IDs of people to fetch. If a record can't be found, that record won't be returned and your request will be successful
	Ids []int64 `queryParam:"style=form,explode=false,name=ids"`
	// Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of "_is_null" can be passed to filter people that were not imported.
	ImportID []int64 `queryParam:"style=form,explode=false,name=import_id"`
	// Whether to include total_pages and total_count in the metadata. Defaults to false
	IncludePagingCounts *bool `queryParam:"style=form,explode=true,name=include_paging_counts"`
	// Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of "_is_null" can be passed to filter people do not have a job_seniority.
	JobSeniority []string `queryParam:"style=form,explode=false,name=job_seniority"`
	// Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
	// Additional values of "_is_null" or "_is_not_null" can be passed to filter records that either have no timestamp value or any timestamp value.
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	LastContacted map[string]interface{} `queryParam:"style=form,explode=true,name=last_contacted"`
	// Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
	LimitPagingCounts *bool `queryParam:"style=form,explode=true,name=limit_paging_counts"`
	// Filters people by locales. Multiple locales can be applied. An additional value of "Null" can be passed to filter people that do not have a locale.
	Locales []string `queryParam:"style=form,explode=false,name=locales"`
	// Filters people by whether or not that person is on a cadence or if they have been contacted in any way.
	New *bool `queryParam:"style=form,explode=true,name=new"`
	// Filters people by the owner's guid. Multiple owner guids can be applied
	OwnedByGUID []string `queryParam:"style=form,explode=false,name=owned_by_guid"`
	// Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of "_is_null" can be passed to filter people that are unowned. A "_not_in" modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]=id
	OwnerCrmID []string `queryParam:"style=form,explode=false,name=owner_crm_id"`
	// Filters people by owner_id. Multiple owner_ids can be applied.
	OwnerID []int64 `queryParam:"style=form,explode=false,name=owner_id"`
	// Filters people by whether the owner is active or not.
	OwnerIsActive *bool `queryParam:"style=form,explode=true,name=owner_is_active"`
	// The current page to fetch results from. Defaults to 1
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// How many records to show per page in the range [1, 100]. Defaults to 25
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of "_is_null" can be passed to filter people that do not have a stage set.
	PersonStageID []int64 `queryParam:"style=form,explode=false,name=person_stage_id"`
	// Filter people by whether or not they have a phone number or not
	PhoneNumber *bool `queryParam:"style=form,explode=true,name=phone_number"`
	// Filters people by whether or not they have replied to an email or not.
	Replied *bool `queryParam:"style=form,explode=true,name=replied"`
	// Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at
	SortBy *string `queryParam:"style=form,explode=true,name=sort_by"`
	// Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
	SortDirection *string `queryParam:"style=form,explode=true,name=sort_direction"`
	// Filters people who have been starred by the user guids given.
	StarredByGUID []string `queryParam:"style=form,explode=false,name=starred_by_guid"`
	// Filters people by their state by exact match. Supports partial matching
	State []string `queryParam:"style=form,explode=false,name=state"`
	// Filters people by whether or not they have been marked as a success or not.
	Success *bool `queryParam:"style=form,explode=true,name=success"`
	// Filters people by the tag ids applied to the person. Multiple tag ids can be applied.
	TagID []int64 `queryParam:"style=form,explode=false,name=tag_id"`
	// Filters people by their title by exact match. Supports partial matching
	Title []string `queryParam:"style=form,explode=false,name=title"`
	// Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	UpdatedAt []string `queryParam:"style=form,explode=false,name=updated_at"`
}

type GetV2PeopleJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
