"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PathQueryOptionsFilterMatchEnum(str, Enum):
    r"""Match logic of the filter."""
    UNKNOWN = 'UNKNOWN'
    EXACT = 'EXACT'
    PARTIAL = 'PARTIAL'
    BEGINS_WITH = 'BEGINS_WITH'
    WILDCARD_EXPRESSION = 'WILDCARD_EXPRESSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PathQueryOptionsFilter:
    r"""Dimension filter on path events."""
    
    filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""Dimension the filter is applied to."""  
    match: Optional[PathQueryOptionsFilterMatchEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match'), 'exclude': lambda f: f is None }})
    r"""Match logic of the filter."""  
    values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})
    r"""Values to filter on."""  
    