"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsGroupModelCountsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class ErrorsGroupModelCountsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    error_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'errorGroupId', 'style': 'simple', 'explode': False }})
    r"""The id of the error group"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    dollar_top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$top', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return. (0 will fetch all results till the max number.)"""  
    
class ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsGroupModelCountsDefaultApplicationJSONError:
    
    code: ErrorsGroupModelCountsDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsGroupModelCountsDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsGroupModelCountsDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsGroupModelCounts200ApplicationJSONModels:
    
    error_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCount'), 'exclude': lambda f: f is None }})
    r"""count of errors in a model"""  
    model_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelCode'), 'exclude': lambda f: f is None }})
    r"""model code"""  
    model_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelName'), 'exclude': lambda f: f is None }})
    r"""model name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsGroupModelCounts200ApplicationJSON:
    r"""Top Models with percentage in descending order"""
    
    error_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCount'), 'exclude': lambda f: f is None }})  
    models: Optional[list[ErrorsGroupModelCounts200ApplicationJSONModels]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('models'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ErrorsGroupModelCountsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_group_model_counts_200_application_json_object: Optional[ErrorsGroupModelCounts200ApplicationJSON] = dataclasses.field(default=None)
    r"""Top Models with percentage in descending order"""  
    errors_group_model_counts_default_application_json_object: Optional[ErrorsGroupModelCountsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    