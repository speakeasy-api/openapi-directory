/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetPostAndRelatedData200ApplicationJSON - The post and related data.
 */
public class GetPostAndRelatedData200ApplicationJSON {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public org.openapis.openapi.models.shared.User author;
    public GetPostAndRelatedData200ApplicationJSON withAuthor(org.openapis.openapi.models.shared.User author) {
        this.author = author;
        return this;
    }
    
    /**
     * Count of offer posts made by the post author in the last 90 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_offer_count")
    public Long authorOfferCount;
    public GetPostAndRelatedData200ApplicationJSON withAuthorOfferCount(Long authorOfferCount) {
        this.authorOfferCount = authorOfferCount;
        return this;
    }
    
    /**
     * Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_posts")
    public org.openapis.openapi.models.shared.Post[] authorPosts;
    public GetPostAndRelatedData200ApplicationJSON withAuthorPosts(org.openapis.openapi.models.shared.Post[] authorPosts) {
        this.authorPosts = authorPosts;
        return this;
    }
    
    /**
     * Count of wanted posts made by the post author in the last 90 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_wanted_count")
    public Long authorWantedCount;
    public GetPostAndRelatedData200ApplicationJSON withAuthorWantedCount(Long authorWantedCount) {
        this.authorWantedCount = authorWantedCount;
        return this;
    }
    
    /**
     * Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookmarked")
    public Boolean bookmarked;
    public GetPostAndRelatedData200ApplicationJSON withBookmarked(Boolean bookmarked) {
        this.bookmarked = bookmarked;
        return this;
    }
    
    /**
     * Feedback the current user has left on the post author.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedback")
    public org.openapis.openapi.models.shared.Feedback[] feedback;
    public GetPostAndRelatedData200ApplicationJSON withFeedback(org.openapis.openapi.models.shared.Feedback[] feedback) {
        this.feedback = feedback;
        return this;
    }
    
    /**
     * The groups the post is published on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    public org.openapis.openapi.models.shared.Group[] groups;
    public GetPostAndRelatedData200ApplicationJSON withGroups(org.openapis.openapi.models.shared.Group[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * An offer, wanted, admin, taken or received post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post")
    public org.openapis.openapi.models.shared.Post post;
    public GetPostAndRelatedData200ApplicationJSON withPost(org.openapis.openapi.models.shared.Post post) {
        this.post = post;
        return this;
    }
    
    /**
     * Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replied")
    public Boolean replied;
    public GetPostAndRelatedData200ApplicationJSON withReplied(Boolean replied) {
        this.replied = replied;
        return this;
    }
    
    /**
     * Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_can_reply")
    public Boolean userCanReply;
    public GetPostAndRelatedData200ApplicationJSON withUserCanReply(Boolean userCanReply) {
        this.userCanReply = userCanReply;
        return this;
    }
    
    /**
     * Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewed")
    public Boolean viewed;
    public GetPostAndRelatedData200ApplicationJSON withViewed(Boolean viewed) {
        this.viewed = viewed;
        return this;
    }
    
}
