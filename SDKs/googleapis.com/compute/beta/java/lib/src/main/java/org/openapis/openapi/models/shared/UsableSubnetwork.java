/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UsableSubnetwork - Subnetwork which the current user has compute.subnetworks.use permission on.
 */
public class UsableSubnetwork {
    /**
     * [Output Only] The external IPv6 address range that is assigned to this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalIpv6Prefix")
    public String externalIpv6Prefix;
    public UsableSubnetwork withExternalIpv6Prefix(String externalIpv6Prefix) {
        this.externalIpv6Prefix = externalIpv6Prefix;
        return this;
    }
    
    /**
     * [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internalIpv6Prefix")
    public String internalIpv6Prefix;
    public UsableSubnetwork withInternalIpv6Prefix(String internalIpv6Prefix) {
        this.internalIpv6Prefix = internalIpv6Prefix;
        return this;
    }
    
    /**
     * The range of internal addresses that are owned by this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipCidrRange")
    public String ipCidrRange;
    public UsableSubnetwork withIpCidrRange(String ipCidrRange) {
        this.ipCidrRange = ipCidrRange;
        return this;
    }
    
    /**
     * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6AccessType")
    public UsableSubnetworkIpv6AccessTypeEnum ipv6AccessType;
    public UsableSubnetwork withIpv6AccessType(UsableSubnetworkIpv6AccessTypeEnum ipv6AccessType) {
        this.ipv6AccessType = ipv6AccessType;
        return this;
    }
    
    /**
     * Network URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public UsableSubnetwork withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose")
    public UsableSubnetworkPurposeEnum purpose;
    public UsableSubnetwork withPurpose(UsableSubnetworkPurposeEnum purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public UsableSubnetworkRoleEnum role;
    public UsableSubnetwork withRole(UsableSubnetworkRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * Secondary IP ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryIpRanges")
    public UsableSubnetworkSecondaryRange[] secondaryIpRanges;
    public UsableSubnetwork withSecondaryIpRanges(UsableSubnetworkSecondaryRange[] secondaryIpRanges) {
        this.secondaryIpRanges = secondaryIpRanges;
        return this;
    }
    
    /**
     * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackType")
    public UsableSubnetworkStackTypeEnum stackType;
    public UsableSubnetwork withStackType(UsableSubnetworkStackTypeEnum stackType) {
        this.stackType = stackType;
        return this;
    }
    
    /**
     * Subnetwork URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetwork")
    public String subnetwork;
    public UsableSubnetwork withSubnetwork(String subnetwork) {
        this.subnetwork = subnetwork;
        return this;
    }
    
}
