// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

type pricingConfiguration struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPricingConfiguration(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *pricingConfiguration {
	return &pricingConfiguration{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GetPricingConfig - Get Pricing Configuration
// Retrieves Pricing Configuration.
// ## Response body example
//
// ```json
//
//	{
//	    "hasMigrated": true,
//	    "migrationStatus": "Completed",
//	    "defaultMarkup": 100,
//	    "priceVariation": {
//	        "upperLimit": null,
//	        "lowerLimit": null
//	    },
//	    "minimumMarkups": {
//	        "1": 100,
//	        "2": 90
//	    },
//	    "tradePolicyConfigs": [],
//	    "sellersToOverride": [],
//	    "hasPriceInheritance": false,
//	    "priceInheritance": "never",
//	    "hasOptionalBasePrice": false,
//	    "blockAccount": false,
//	    "blockedRoutes": null,
//	    "priceTableSelectionStrategy": "first",
//	    "priceTableLimit": null
//	}
//
// ```
func (s *pricingConfiguration) GetPricingConfig(ctx context.Context, request operations.GetPricingConfigRequest) (*operations.GetPricingConfigResponse, error) {
	baseURL := operations.GetPricingConfigServerList[0]
	if request.ServerURL != nil {
		baseURL = *request.ServerURL
	}

	url := strings.TrimSuffix(baseURL, "/") + "/pricing/config"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request.Headers)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetPricingConfigResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json; charset=utf-8`):
			var out *shared.PricingConfiguration
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PricingConfiguration = out
		}
	}

	return res, nil
}

// GetPricingv2Status - Get Pricing v2 Status
// Retrieves Pricing v2 Status.
// ## Response body example
//
// ```json
//
//	{
//	    "isActive": true,
//	    "hasMigrated": true
//	}
//
// ```
func (s *pricingConfiguration) GetPricingv2Status(ctx context.Context, request operations.GetPricingv2StatusRequest) (*operations.GetPricingv2StatusResponse, error) {
	baseURL := operations.GetPricingv2StatusServerList[0]
	if request.ServerURL != nil {
		baseURL = *request.ServerURL
	}

	url := strings.TrimSuffix(baseURL, "/") + "/pricing/migration"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request.Headers)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetPricingv2StatusResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json; charset=utf-8`):
			var out *operations.GetPricingv2Status200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GetPricingv2Status200ApplicationJSONObject = out
		}
	}

	return res, nil
}
