<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Chromeosdevices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionResponse
     */
	public function directoryChromeosdevicesAction(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "chromeOsDeviceAction", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a Chrome OS device's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetResponse
     */
	public function directoryChromeosdevicesGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chromeOsDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChromeOsDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a paginated list of Chrome OS devices within an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListResponse
     */
	public function directoryChromeosdevicesList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chromeOsDevices = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChromeOsDevices', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuResponse
     */
	public function directoryChromeosdevicesMoveDevicesToOu(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "chromeOsMoveDevicesToOu", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesMoveDevicesToOuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchResponse
     */
	public function directoryChromeosdevicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "chromeOsDevice", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chromeOsDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChromeOsDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateResponse
     */
	public function directoryChromeosdevicesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "chromeOsDevice", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryChromeosdevicesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chromeOsDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChromeOsDevice', 'json');
            }
        }

        return $response;
    }
}