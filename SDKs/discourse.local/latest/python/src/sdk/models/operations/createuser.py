"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUserRequestBody:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""This param requires an api key in the request header
    or it will be ignored
    """  
    approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved'), 'exclude': lambda f: f is None }})  
    external_ids: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_ids'), 'exclude': lambda f: f is None }})  
    user_fields_1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_fields[1]'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateUserRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateUserRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUser200ApplicationJSON:
    r"""user created"""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_user_200_application_json_object: Optional[CreateUser200ApplicationJSON] = dataclasses.field(default=None)
    r"""user created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    