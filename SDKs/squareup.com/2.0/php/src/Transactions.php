<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Transactions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CaptureTransaction
     * 
     * Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
     * endpoint with a `delay_capture` value of `true`.
     * 
     * 
     * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
     * for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionResponse
     */
	public function captureTransaction(
        \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions/{transaction_id}/capture', \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CaptureTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->captureTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaptureTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Charge
     * 
     * Charges a card represented by a card nonce or a customer's card on file.
     * 
     * Your request to this endpoint must include _either_:
     * 
     * - A value for the `card_nonce` parameter (to charge a card payment token generated
     * with the Web Payments SDK)
     * - Values for the `customer_card_id` and `customer_id` parameters (to charge
     * a customer's card on file)
     * 
     * In order for an eCommerce payment to potentially qualify for
     * [Square chargeback protection](https://squareup.com/help/article/5394), you
     * _must_ provide values for the following parameters in your request:
     * 
     * - `buyer_email_address`
     * - At least one of `billing_address` or `shipping_address`
     * 
     * When this response is returned, the amount of Square's processing fee might not yet be
     * calculated. To obtain the processing fee, wait about ten seconds and call
     * [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money`
     * field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChargeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChargeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChargeResponse
     */
	public function charge(
        \OpenAPI\OpenAPI\Models\Operations\ChargeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChargeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChargeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions', \OpenAPI\OpenAPI\Models\Operations\ChargeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "chargeRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChargeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chargeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChargeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListTransactions
     * 
     * Lists transactions for a particular location.
     * 
     * Transactions include payment information from sales and exchanges and refund
     * information from returns and exchanges.
     * 
     * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTransactionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTransactionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTransactionsResponse
     */
	public function listTransactions(
        \OpenAPI\OpenAPI\Models\Operations\ListTransactionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTransactionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions', \OpenAPI\OpenAPI\Models\Operations\ListTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTransactionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTransactionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTransactionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveTransaction
     * 
     * Retrieves details for a single transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionResponse
     */
	public function retrieveTransaction(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions/{transaction_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * VoidTransaction
     * 
     * Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
     * endpoint with a `delay_capture` value of `true`.
     * 
     * 
     * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
     * for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VoidTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VoidTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VoidTransactionResponse
     */
	public function voidTransaction(
        \OpenAPI\OpenAPI\Models\Operations\VoidTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VoidTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VoidTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions/{transaction_id}/void', \OpenAPI\OpenAPI\Models\Operations\VoidTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VoidTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voidTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoidTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListRefunds
     * 
     * Lists refunds for one of a business's locations.
     * 
     * In addition to full or partial tender refunds processed through Square APIs,
     * refunds may result from itemized returns or exchanges through Square's
     * Point of Sale applications.
     * 
     * Refunds with a `status` of `PENDING` are not currently included in this
     * endpoint's response.
     * 
     * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsResponse
     */
	public function getV2LocationsLocationIdRefunds(
        \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/refunds', \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2LocationsLocationIdRefundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRefundsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRefundsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateRefund
     * 
     * Initiates a refund for a previously charged tender.
     * 
     * You must issue a refund within 120 days of the associated payment. See
     * [this article](https://squareup.com/help/us/en/article/5060) for more information
     * on refund behavior.
     * 
     * NOTE: Card-present transactions with Interac credit cards **cannot be
     * refunded using the Connect API**. Interac transactions must refunded
     * in-person (e.g., dipping the card using POS app).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse
     */
	public function postV2LocationsLocationIdTransactionsTransactionIdRefund(
        \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}/transactions/{transaction_id}/refund', \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createRefundRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2LocationsLocationIdTransactionsTransactionIdRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateRefundResponse', 'json');
            }
        }

        return $response;
    }
}