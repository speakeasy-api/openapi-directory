/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Image } from "./image";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object containing data for various available formats and sizes of this GIF.
 */
export class GifImages extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "downsized" })
  @Type(() => Image)
  downsized?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "downsized_large" })
  @Type(() => Image)
  downsizedLarge?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "downsized_medium" })
  @Type(() => Image)
  downsizedMedium?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "downsized_small" })
  @Type(() => Image)
  downsizedSmall?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "downsized_still" })
  @Type(() => Image)
  downsizedStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_height" })
  @Type(() => Image)
  fixedHeight?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_height_downsampled" })
  @Type(() => Image)
  fixedHeightDownsampled?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_height_small" })
  @Type(() => Image)
  fixedHeightSmall?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_height_small_still" })
  @Type(() => Image)
  fixedHeightSmallStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_height_still" })
  @Type(() => Image)
  fixedHeightStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_width" })
  @Type(() => Image)
  fixedWidth?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_width_downsampled" })
  @Type(() => Image)
  fixedWidthDownsampled?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_width_small" })
  @Type(() => Image)
  fixedWidthSmall?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_width_small_still" })
  @Type(() => Image)
  fixedWidthSmallStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "fixed_width_still" })
  @Type(() => Image)
  fixedWidthStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "looping" })
  @Type(() => Image)
  looping?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "original" })
  @Type(() => Image)
  original?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "original_still" })
  @Type(() => Image)
  originalStill?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "preview" })
  @Type(() => Image)
  preview?: Image;

  @SpeakeasyMetadata()
  @Expose({ name: "preview_gif" })
  @Type(() => Image)
  previewGif?: Image;
}

/**
 * Type of the gif. By default, this is almost always gif
 */
export enum GifTypeEnum {
  Gif = "gif",
}

export class Gif extends SpeakeasyBase {
  /**
   * The unique bit.ly URL for this GIF
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bitly_url" })
  bitlyUrl?: string;

  /**
   * Currently unused
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_url" })
  contentUrl?: string;

  /**
   * The date this GIF was added to the GIPHY database.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "create_datetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createDatetime?: Date;

  /**
   * A URL used for embedding this GIF
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embded_url" })
  embdedUrl?: string;

  /**
   * An array of featured tags for this GIF (Note: Not available when using the Public Beta Key)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "featured_tags" })
  featuredTags?: string[];

  /**
   * This GIF's unique ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * An object containing data for various available formats and sizes of this GIF.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "images" })
  @Type(() => GifImages)
  images?: GifImages;

  /**
   * The creation or upload date from this GIF's source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_datetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  importDatetime?: Date;

  /**
   * The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating?: string;

  /**
   * The unique slug used in this GIF's URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: string;

  /**
   * The page on which this GIF was found
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * The URL of the webpage on which this GIF was found.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_post_url" })
  sourcePostUrl?: string;

  /**
   * The top level domain of the source URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_tld" })
  sourceTld?: string;

  /**
   * An array of tags for this GIF (Note: Not available when using the Public Beta Key)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * The date on which this gif was marked trending, if applicable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trending_datetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  trendingDatetime?: Date;

  /**
   * Type of the gif. By default, this is almost always gif
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GifTypeEnum;

  /**
   * The date on which this GIF was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "update_datetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updateDatetime?: Date;

  /**
   * The unique URL for this GIF
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user?: User;

  /**
   * The username this GIF is attached to, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}
