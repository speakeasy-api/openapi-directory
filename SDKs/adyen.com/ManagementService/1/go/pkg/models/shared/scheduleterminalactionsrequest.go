// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ScheduleTerminalActionsRequestActionDetailsType string

const (
	ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidAppDetails           ScheduleTerminalActionsRequestActionDetailsType = "InstallAndroidAppDetails"
	ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidCertificateDetails   ScheduleTerminalActionsRequestActionDetailsType = "InstallAndroidCertificateDetails"
	ScheduleTerminalActionsRequestActionDetailsTypeReleaseUpdateDetails               ScheduleTerminalActionsRequestActionDetailsType = "ReleaseUpdateDetails"
	ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidAppDetails         ScheduleTerminalActionsRequestActionDetailsType = "UninstallAndroidAppDetails"
	ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidCertificateDetails ScheduleTerminalActionsRequestActionDetailsType = "UninstallAndroidCertificateDetails"
)

type ScheduleTerminalActionsRequestActionDetails struct {
	InstallAndroidAppDetails           *InstallAndroidAppDetails
	InstallAndroidCertificateDetails   *InstallAndroidCertificateDetails
	ReleaseUpdateDetails               *ReleaseUpdateDetails
	UninstallAndroidAppDetails         *UninstallAndroidAppDetails
	UninstallAndroidCertificateDetails *UninstallAndroidCertificateDetails

	Type ScheduleTerminalActionsRequestActionDetailsType
}

func CreateScheduleTerminalActionsRequestActionDetailsInstallAndroidAppDetails(installAndroidAppDetails InstallAndroidAppDetails) ScheduleTerminalActionsRequestActionDetails {
	typ := ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidAppDetails

	return ScheduleTerminalActionsRequestActionDetails{
		InstallAndroidAppDetails: &installAndroidAppDetails,
		Type:                     typ,
	}
}

func CreateScheduleTerminalActionsRequestActionDetailsInstallAndroidCertificateDetails(installAndroidCertificateDetails InstallAndroidCertificateDetails) ScheduleTerminalActionsRequestActionDetails {
	typ := ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidCertificateDetails

	return ScheduleTerminalActionsRequestActionDetails{
		InstallAndroidCertificateDetails: &installAndroidCertificateDetails,
		Type:                             typ,
	}
}

func CreateScheduleTerminalActionsRequestActionDetailsReleaseUpdateDetails(releaseUpdateDetails ReleaseUpdateDetails) ScheduleTerminalActionsRequestActionDetails {
	typ := ScheduleTerminalActionsRequestActionDetailsTypeReleaseUpdateDetails

	return ScheduleTerminalActionsRequestActionDetails{
		ReleaseUpdateDetails: &releaseUpdateDetails,
		Type:                 typ,
	}
}

func CreateScheduleTerminalActionsRequestActionDetailsUninstallAndroidAppDetails(uninstallAndroidAppDetails UninstallAndroidAppDetails) ScheduleTerminalActionsRequestActionDetails {
	typ := ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidAppDetails

	return ScheduleTerminalActionsRequestActionDetails{
		UninstallAndroidAppDetails: &uninstallAndroidAppDetails,
		Type:                       typ,
	}
}

func CreateScheduleTerminalActionsRequestActionDetailsUninstallAndroidCertificateDetails(uninstallAndroidCertificateDetails UninstallAndroidCertificateDetails) ScheduleTerminalActionsRequestActionDetails {
	typ := ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidCertificateDetails

	return ScheduleTerminalActionsRequestActionDetails{
		UninstallAndroidCertificateDetails: &uninstallAndroidCertificateDetails,
		Type:                               typ,
	}
}

func (u *ScheduleTerminalActionsRequestActionDetails) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	installAndroidAppDetails := new(InstallAndroidAppDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&installAndroidAppDetails); err == nil {
		u.InstallAndroidAppDetails = installAndroidAppDetails
		u.Type = ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidAppDetails
		return nil
	}

	installAndroidCertificateDetails := new(InstallAndroidCertificateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&installAndroidCertificateDetails); err == nil {
		u.InstallAndroidCertificateDetails = installAndroidCertificateDetails
		u.Type = ScheduleTerminalActionsRequestActionDetailsTypeInstallAndroidCertificateDetails
		return nil
	}

	releaseUpdateDetails := new(ReleaseUpdateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&releaseUpdateDetails); err == nil {
		u.ReleaseUpdateDetails = releaseUpdateDetails
		u.Type = ScheduleTerminalActionsRequestActionDetailsTypeReleaseUpdateDetails
		return nil
	}

	uninstallAndroidAppDetails := new(UninstallAndroidAppDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uninstallAndroidAppDetails); err == nil {
		u.UninstallAndroidAppDetails = uninstallAndroidAppDetails
		u.Type = ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidAppDetails
		return nil
	}

	uninstallAndroidCertificateDetails := new(UninstallAndroidCertificateDetails)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uninstallAndroidCertificateDetails); err == nil {
		u.UninstallAndroidCertificateDetails = uninstallAndroidCertificateDetails
		u.Type = ScheduleTerminalActionsRequestActionDetailsTypeUninstallAndroidCertificateDetails
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ScheduleTerminalActionsRequestActionDetails) MarshalJSON() ([]byte, error) {
	if u.InstallAndroidAppDetails != nil {
		return json.Marshal(u.InstallAndroidAppDetails)
	}

	if u.InstallAndroidCertificateDetails != nil {
		return json.Marshal(u.InstallAndroidCertificateDetails)
	}

	if u.ReleaseUpdateDetails != nil {
		return json.Marshal(u.ReleaseUpdateDetails)
	}

	if u.UninstallAndroidAppDetails != nil {
		return json.Marshal(u.UninstallAndroidAppDetails)
	}

	if u.UninstallAndroidCertificateDetails != nil {
		return json.Marshal(u.UninstallAndroidCertificateDetails)
	}

	return nil, nil
}

type ScheduleTerminalActionsRequest struct {
	// Information about the action to take.
	ActionDetails *ScheduleTerminalActionsRequestActionDetails `json:"actionDetails,omitempty"`
	// The date and time when the action should happen.
	// Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00**
	// The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal.
	// An empty value causes the action to be sent as soon as possible: at the next maintenance call.
	ScheduledAt *string `json:"scheduledAt,omitempty"`
	// The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store.
	StoreID *string `json:"storeId,omitempty"`
	// A list of unique IDs of the terminals to apply the action to. You can extract the IDs from the [GET `/terminals`](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminals) response. Maximum length: 100 IDs.
	TerminalIds []string `json:"terminalIds,omitempty"`
}
