"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .address_requests import AddressRequests
from .info_requests import InfoRequests
from .subscription_ipn_requests import SubscriptionIPNRequests
from .transaction_requests import TransactionRequests

SERVERS = [
    "https://eu.eth.chaingateway.io/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Chaingateway.io
    
    REST API to build the bridge between Ethereum and the real world
    
    Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.
    
    To use our API, you need an API Key (Described as Authorization header in the examples below).
    To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).
    
    For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).
    
    If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
    """
    address_requests: AddressRequests
    r"""Requests to create, list and delete addresses"""
    info_requests: InfoRequests
    r"""Requests that return information on balances, transactions, gas price, exchange rates, ..."""
    subscription_ipn_requests: SubscriptionIPNRequests
    r"""Requests for creating, deleting and listing existing subscriptions"""
    transaction_requests: TransactionRequests
    r"""Requests to send Tokens, Ethereum and clear addresses"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.address_requests = AddressRequests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.info_requests = InfoRequests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.subscription_ipn_requests = SubscriptionIPNRequests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.transaction_requests = TransactionRequests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    