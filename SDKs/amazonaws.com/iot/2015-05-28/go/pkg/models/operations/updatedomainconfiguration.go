// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateDomainConfigurationRequestBodyAuthorizerConfig - An object that specifies the authorization service for a domain.
type UpdateDomainConfigurationRequestBodyAuthorizerConfig struct {
	AllowAuthorizerOverride *bool   `json:"allowAuthorizerOverride,omitempty"`
	DefaultAuthorizerName   *string `json:"defaultAuthorizerName,omitempty"`
}

// UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum - The status to which the domain configuration should be updated.
type UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum string

const (
	UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnumEnabled  UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum = "ENABLED"
	UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnumDisabled UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum = "DISABLED"
)

func (e UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum) ToPointer() *UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum {
	return &e
}

func (e *UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum: %v", v)
	}
}

type UpdateDomainConfigurationRequestBody struct {
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig *UpdateDomainConfigurationRequestBodyAuthorizerConfig `json:"authorizerConfig,omitempty"`
	// The status to which the domain configuration should be updated.
	DomainConfigurationStatus *UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum `json:"domainConfigurationStatus,omitempty"`
	// Removes the authorization configuration from a domain.
	RemoveAuthorizerConfig *bool `json:"removeAuthorizerConfig,omitempty"`
}

type UpdateDomainConfigurationRequest struct {
	RequestBody       UpdateDomainConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the domain configuration to be updated.
	DomainConfigurationName string `pathParam:"style=simple,explode=false,name=domainConfigurationName"`
}

type UpdateDomainConfigurationResponse struct {
	// CertificateValidationException
	CertificateValidationException interface{}
	ContentType                    string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
	// Success
	UpdateDomainConfigurationResponse *shared.UpdateDomainConfigurationResponse
}
