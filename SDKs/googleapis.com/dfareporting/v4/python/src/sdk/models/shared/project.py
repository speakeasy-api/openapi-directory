"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lastmodifiedinfo as shared_lastmodifiedinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProjectAudienceAgeGroupEnum(str, Enum):
    r"""Audience age group of this project."""
    PLANNING_AUDIENCE_AGE_18_24 = 'PLANNING_AUDIENCE_AGE_18_24'
    PLANNING_AUDIENCE_AGE_25_34 = 'PLANNING_AUDIENCE_AGE_25_34'
    PLANNING_AUDIENCE_AGE_35_44 = 'PLANNING_AUDIENCE_AGE_35_44'
    PLANNING_AUDIENCE_AGE_45_54 = 'PLANNING_AUDIENCE_AGE_45_54'
    PLANNING_AUDIENCE_AGE_55_64 = 'PLANNING_AUDIENCE_AGE_55_64'
    PLANNING_AUDIENCE_AGE_65_OR_MORE = 'PLANNING_AUDIENCE_AGE_65_OR_MORE'
    PLANNING_AUDIENCE_AGE_UNKNOWN = 'PLANNING_AUDIENCE_AGE_UNKNOWN'

class ProjectAudienceGenderEnum(str, Enum):
    r"""Audience gender of this project."""
    PLANNING_AUDIENCE_GENDER_MALE = 'PLANNING_AUDIENCE_GENDER_MALE'
    PLANNING_AUDIENCE_GENDER_FEMALE = 'PLANNING_AUDIENCE_GENDER_FEMALE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Project:
    r"""Contains properties of a Planning project."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this project."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of this project."""  
    audience_age_group: Optional[ProjectAudienceAgeGroupEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceAgeGroup'), 'exclude': lambda f: f is None }})
    r"""Audience age group of this project."""  
    audience_gender: Optional[ProjectAudienceGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceGender'), 'exclude': lambda f: f is None }})
    r"""Audience gender of this project."""  
    budget: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget'), 'exclude': lambda f: f is None }})
    r"""Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar."""  
    client_billing_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientBillingCode'), 'exclude': lambda f: f is None }})
    r"""Client billing code of this project."""  
    client_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientName'), 'exclude': lambda f: f is None }})
    r"""Name of the project client."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this project. This is a read-only, auto-generated field."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#project\\"."""  
    last_modified_info: Optional[shared_lastmodifiedinfo.LastModifiedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedInfo'), 'exclude': lambda f: f is None }})
    r"""Modification timestamp."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this project."""  
    overview: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overview'), 'exclude': lambda f: f is None }})
    r"""Overview of this project."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this project."""  
    target_clicks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetClicks'), 'exclude': lambda f: f is None }})
    r"""Number of clicks that the advertiser is targeting."""  
    target_conversions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetConversions'), 'exclude': lambda f: f is None }})
    r"""Number of conversions that the advertiser is targeting."""  
    target_cpa_nanos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetCpaNanos'), 'exclude': lambda f: f is None }})
    r"""CPA that the advertiser is targeting."""  
    target_cpc_nanos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetCpcNanos'), 'exclude': lambda f: f is None }})
    r"""CPC that the advertiser is targeting."""  
    target_cpm_active_view_nanos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetCpmActiveViewNanos'), 'exclude': lambda f: f is None }})
    r"""vCPM from Active View that the advertiser is targeting."""  
    target_cpm_nanos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetCpmNanos'), 'exclude': lambda f: f is None }})
    r"""CPM that the advertiser is targeting."""  
    target_impressions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetImpressions'), 'exclude': lambda f: f is None }})
    r"""Number of impressions that the advertiser is targeting."""  
    