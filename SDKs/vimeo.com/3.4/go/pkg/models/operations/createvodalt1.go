// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateVodAlt1RequestBodyAcceptedCurrenciesEnum - An array of accepted currencies.
//
// Option descriptions:
//   - `AUD` - Australian Dollar
//   - `CAD` - Canadian Dollar
//   - `CHF` - Swiss Franc
//   - `DKK` - Danish Krone
//   - `EUR` - Euro
//   - `GBP` - British Pound
//   - `JPY` - Japanese Yen
//   - `KRW` - South Korean Won
//   - `NOK` - Norwegian Krone
//   - `PLN` - Polish Zloty
//   - `SEK` - Swedish Krona
//   - `USD` - US Dollar
type CreateVodAlt1RequestBodyAcceptedCurrenciesEnum string

const (
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumAud CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "AUD"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumCad CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "CAD"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumChf CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "CHF"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumDkk CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "DKK"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumEur CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "EUR"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumGbp CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "GBP"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumJpy CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "JPY"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumKrw CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "KRW"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumNok CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "NOK"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumPln CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "PLN"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumSek CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "SEK"
	CreateVodAlt1RequestBodyAcceptedCurrenciesEnumUsd CreateVodAlt1RequestBodyAcceptedCurrenciesEnum = "USD"
)

func (e *CreateVodAlt1RequestBodyAcceptedCurrenciesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AUD":
		fallthrough
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "DKK":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "KRW":
		fallthrough
	case "NOK":
		fallthrough
	case "PLN":
		fallthrough
	case "SEK":
		fallthrough
	case "USD":
		*e = CreateVodAlt1RequestBodyAcceptedCurrenciesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVodAlt1RequestBodyAcceptedCurrenciesEnum: %s", s)
	}
}

type CreateVodAlt1RequestBodyBuyPrice struct {
	// The purchase price of this video in AUD.
	Aud *float64 `json:"AUD,omitempty"`
	// The purchase price of this video in CAD.
	Cad *float64 `json:"CAD,omitempty"`
	// The purchase price of this video in CHF.
	Chf *float64 `json:"CHF,omitempty"`
	// The purchase price of this video in DKK.
	Dkk *float64 `json:"DKK,omitempty"`
	// The purchase price of this video in EUR.
	Eur *float64 `json:"EUR,omitempty"`
	// The purchase price of this video in GBP.
	Gbp *float64 `json:"GBP,omitempty"`
	// The purchase price of this video in JPY.
	Jpy *float64 `json:"JPY,omitempty"`
	// The purchase price of this video in KRW.
	Krw *float64 `json:"KRW,omitempty"`
	// The purchase price of this video in NOK.
	Nok *float64 `json:"NOK,omitempty"`
	// The purchase price of this video in PLN.
	Pln *float64 `json:"PLN,omitempty"`
	// The purchase price of this video in SEK.
	Sek *float64 `json:"SEK,omitempty"`
	// The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.
	Usd *float64 `json:"USD,omitempty"`
}

type CreateVodAlt1RequestBodyBuy struct {
	// Whether the Buy action is active. *Required if `rent.active` is false.
	Active *bool `json:"active,omitempty"`
	// Whether people who buy the video can download it. To use this field, `type` must be `film`.
	Download *bool                             `json:"download,omitempty"`
	Price    *CreateVodAlt1RequestBodyBuyPrice `json:"price,omitempty"`
}

// CreateVodAlt1RequestBodyContentRatingEnum - One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
type CreateVodAlt1RequestBodyContentRatingEnum string

const (
	CreateVodAlt1RequestBodyContentRatingEnumDrugs    CreateVodAlt1RequestBodyContentRatingEnum = "drugs"
	CreateVodAlt1RequestBodyContentRatingEnumLanguage CreateVodAlt1RequestBodyContentRatingEnum = "language"
	CreateVodAlt1RequestBodyContentRatingEnumNudity   CreateVodAlt1RequestBodyContentRatingEnum = "nudity"
	CreateVodAlt1RequestBodyContentRatingEnumSafe     CreateVodAlt1RequestBodyContentRatingEnum = "safe"
	CreateVodAlt1RequestBodyContentRatingEnumUnrated  CreateVodAlt1RequestBodyContentRatingEnum = "unrated"
	CreateVodAlt1RequestBodyContentRatingEnumViolence CreateVodAlt1RequestBodyContentRatingEnum = "violence"
)

func (e *CreateVodAlt1RequestBodyContentRatingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = CreateVodAlt1RequestBodyContentRatingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVodAlt1RequestBodyContentRatingEnum: %s", s)
	}
}

type CreateVodAlt1RequestBodyEpisodesBuyPrice struct {
	// The purchase price per episode. *Required if `episodes.buy.active` is true.
	Usd *float64 `json:"USD,omitempty"`
}

type CreateVodAlt1RequestBodyEpisodesBuy struct {
	// Whether episodes can be bought.
	Active *bool `json:"active,omitempty"`
	// Whether people who buy the episode can download it. To use this field, `type` must be `series`.
	Download *bool                                     `json:"download,omitempty"`
	Price    *CreateVodAlt1RequestBodyEpisodesBuyPrice `json:"price,omitempty"`
}

// CreateVodAlt1RequestBodyEpisodesRentPeriodEnum - The period in which this episode can be rented for.
type CreateVodAlt1RequestBodyEpisodesRentPeriodEnum string

const (
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumOneWeek        CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "1 week"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumOneYear        CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "1 year"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumTwentyFourHour CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "24 hour"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumThreeMonth     CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "3 month"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumThirtyDay      CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "30 day"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumFortyEightHour CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "48 hour"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumSixMonth       CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "6 month"
	CreateVodAlt1RequestBodyEpisodesRentPeriodEnumSeventyTwoHour CreateVodAlt1RequestBodyEpisodesRentPeriodEnum = "72 hour"
)

func (e *CreateVodAlt1RequestBodyEpisodesRentPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1 week":
		fallthrough
	case "1 year":
		fallthrough
	case "24 hour":
		fallthrough
	case "3 month":
		fallthrough
	case "30 day":
		fallthrough
	case "48 hour":
		fallthrough
	case "6 month":
		fallthrough
	case "72 hour":
		*e = CreateVodAlt1RequestBodyEpisodesRentPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVodAlt1RequestBodyEpisodesRentPeriodEnum: %s", s)
	}
}

type CreateVodAlt1RequestBodyEpisodesRentPrice struct {
	// The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.
	Usd *float64 `json:"USD,omitempty"`
}

type CreateVodAlt1RequestBodyEpisodesRent struct {
	// Whether episodes can be rented
	Active *bool `json:"active,omitempty"`
	// The period in which this episode can be rented for.
	Period *CreateVodAlt1RequestBodyEpisodesRentPeriodEnum `json:"period,omitempty"`
	Price  *CreateVodAlt1RequestBodyEpisodesRentPrice      `json:"price,omitempty"`
}

type CreateVodAlt1RequestBodyEpisodes struct {
	Buy  *CreateVodAlt1RequestBodyEpisodesBuy  `json:"buy,omitempty"`
	Rent *CreateVodAlt1RequestBodyEpisodesRent `json:"rent,omitempty"`
}

// CreateVodAlt1RequestBodyRentPeriodEnum - The period in which this can be rented for.
type CreateVodAlt1RequestBodyRentPeriodEnum string

const (
	CreateVodAlt1RequestBodyRentPeriodEnumOneWeek        CreateVodAlt1RequestBodyRentPeriodEnum = "1 week"
	CreateVodAlt1RequestBodyRentPeriodEnumOneYear        CreateVodAlt1RequestBodyRentPeriodEnum = "1 year"
	CreateVodAlt1RequestBodyRentPeriodEnumTwentyFourHour CreateVodAlt1RequestBodyRentPeriodEnum = "24 hour"
	CreateVodAlt1RequestBodyRentPeriodEnumThreeMonth     CreateVodAlt1RequestBodyRentPeriodEnum = "3 month"
	CreateVodAlt1RequestBodyRentPeriodEnumThirtyDay      CreateVodAlt1RequestBodyRentPeriodEnum = "30 day"
	CreateVodAlt1RequestBodyRentPeriodEnumFortyEightHour CreateVodAlt1RequestBodyRentPeriodEnum = "48 hour"
	CreateVodAlt1RequestBodyRentPeriodEnumSixMonth       CreateVodAlt1RequestBodyRentPeriodEnum = "6 month"
	CreateVodAlt1RequestBodyRentPeriodEnumSeventyTwoHour CreateVodAlt1RequestBodyRentPeriodEnum = "72 hour"
)

func (e *CreateVodAlt1RequestBodyRentPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1 week":
		fallthrough
	case "1 year":
		fallthrough
	case "24 hour":
		fallthrough
	case "3 month":
		fallthrough
	case "30 day":
		fallthrough
	case "48 hour":
		fallthrough
	case "6 month":
		fallthrough
	case "72 hour":
		*e = CreateVodAlt1RequestBodyRentPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVodAlt1RequestBodyRentPeriodEnum: %s", s)
	}
}

type CreateVodAlt1RequestBodyRentPrice struct {
	// The rental price of this video in AUD.
	Aud *float64 `json:"AUD,omitempty"`
	// The rental price of this video in CAD.
	Cad *float64 `json:"CAD,omitempty"`
	// The rental price of this video in CHF.
	Chf *float64 `json:"CHF,omitempty"`
	// The rental price of this video in DKK.
	Dkk *float64 `json:"DKK,omitempty"`
	// The rental price of this video in EUR.
	Eur *float64 `json:"EUR,omitempty"`
	// The rental price of this video in GBP.
	Gbp *float64 `json:"GBP,omitempty"`
	// The rental price of this video in JPY.
	Jpy *float64 `json:"JPY,omitempty"`
	// The rental price of this video in KRW.
	Krw *float64 `json:"KRW,omitempty"`
	// The rental price of this video in NOK.
	Nok *float64 `json:"NOK,omitempty"`
	// The rental price of this video in PLN.
	Pln *float64 `json:"PLN,omitempty"`
	// The rental price of this video in SEK.
	Sek *float64 `json:"SEK,omitempty"`
	// The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.
	Usd *float64 `json:"USD,omitempty"`
}

type CreateVodAlt1RequestBodyRent struct {
	// Whether the video can be rented. *Required if `buy.active` is false.
	Active *bool `json:"active,omitempty"`
	// The period in which this can be rented for.
	Period *CreateVodAlt1RequestBodyRentPeriodEnum `json:"period,omitempty"`
	Price  *CreateVodAlt1RequestBodyRentPrice      `json:"price,omitempty"`
}

type CreateVodAlt1RequestBodySubscriptionMonthlyPrice struct {
	// The monthly subscription price in USD. *Required if `subscription.active` is true.
	Usd *float64 `json:"USD,omitempty"`
}

type CreateVodAlt1RequestBodySubscriptionMonthly struct {
	// Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.
	Active *bool                                             `json:"active,omitempty"`
	Price  *CreateVodAlt1RequestBodySubscriptionMonthlyPrice `json:"price,omitempty"`
}

type CreateVodAlt1RequestBodySubscription struct {
	Monthly *CreateVodAlt1RequestBodySubscriptionMonthly `json:"monthly,omitempty"`
}

// CreateVodAlt1RequestBodyTypeEnum - The type of On Demand page.
type CreateVodAlt1RequestBodyTypeEnum string

const (
	CreateVodAlt1RequestBodyTypeEnumFilm   CreateVodAlt1RequestBodyTypeEnum = "film"
	CreateVodAlt1RequestBodyTypeEnumSeries CreateVodAlt1RequestBodyTypeEnum = "series"
)

func (e *CreateVodAlt1RequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "film":
		fallthrough
	case "series":
		*e = CreateVodAlt1RequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVodAlt1RequestBodyTypeEnum: %s", s)
	}
}

type CreateVodAlt1RequestBody struct {
	// An array of accepted currencies.
	//
	// Option descriptions:
	//  * `AUD` - Australian Dollar
	//  * `CAD` - Canadian Dollar
	//  * `CHF` - Swiss Franc
	//  * `DKK` - Danish Krone
	//  * `EUR` - Euro
	//  * `GBP` - British Pound
	//  * `JPY` - Japanese Yen
	//  * `KRW` - South Korean Won
	//  * `NOK` - Norwegian Krone
	//  * `PLN` - Polish Zloty
	//  * `SEK` - Swedish Krona
	//  * `USD` - US Dollar
	//
	AcceptedCurrencies *CreateVodAlt1RequestBodyAcceptedCurrenciesEnum `json:"accepted_currencies,omitempty"`
	Buy                *CreateVodAlt1RequestBodyBuy                    `json:"buy,omitempty"`
	// One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
	ContentRating CreateVodAlt1RequestBodyContentRatingEnum `json:"content_rating"`
	// The description of the On Demand page.
	Description string `json:"description"`
	// The custom domain of the On Demand page.
	DomainLink *string                           `json:"domain_link,omitempty"`
	Episodes   *CreateVodAlt1RequestBodyEpisodes `json:"episodes,omitempty"`
	// The custom string to use in this On Demand page's Vimeo URL.
	Link *string `json:"link,omitempty"`
	// The name of the On Demand page.
	Name         string                                `json:"name"`
	Rent         *CreateVodAlt1RequestBodyRent         `json:"rent,omitempty"`
	Subscription *CreateVodAlt1RequestBodySubscription `json:"subscription,omitempty"`
	// The type of On Demand page.
	Type CreateVodAlt1RequestBodyTypeEnum `json:"type"`
}

type CreateVodAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The On Demand page was created.
	OnDemandPage *shared.OnDemandPage
}
