/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Provides information about sorting a list of exports.
 */
export class ListExportsRequestBodySortBy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attribute" })
  attribute?: shared.ExportSortAttributeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "order" })
  order?: shared.SortOrderEnum;
}

export class ListExportsRequestBody extends SpeakeasyBase {
  /**
   * The unique identifier that Amazon Lex assigned to the bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botId" })
  botId?: string;

  /**
   * The version of the bot to list exports for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botVersion" })
  botVersion?: string;

  /**
   * Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
   */
  @SpeakeasyMetadata({ elemType: shared.ExportFilter })
  @Expose({ name: "filters" })
  @Type(() => shared.ExportFilter)
  filters?: shared.ExportFilter[];

  /**
   * Specifies the resources that should be exported. If you don't specify a resource type in the <code>filters</code> parameter, both bot locales and custom vocabularies are exported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localeId" })
  localeId?: string;

  /**
   * The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * <p>If the response from the <code>ListExports</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListExports</code> request to return the next page of results. For a complete set of results, call the <code>ListExports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * Provides information about sorting a list of exports.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortBy" })
  @Type(() => ListExportsRequestBodySortBy)
  sortBy?: ListExportsRequestBodySortBy;
}

export class ListExportsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListExportsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListExportsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listExportsResponse?: shared.ListExportsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
