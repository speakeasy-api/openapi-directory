/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists constraints that could be applied on the specified resource.
   */
  orgpolicyProjectsConstraintsList(
    req: operations.OrgpolicyProjectsConstraintsListRequest,
    security: operations.OrgpolicyProjectsConstraintsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsConstraintsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsConstraintsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/constraints",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsConstraintsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsConstraintsListResponse =
        new operations.OrgpolicyProjectsConstraintsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2ListConstraintsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudOrgpolicyV2ListConstraintsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
   */
  orgpolicyProjectsPoliciesCreate(
    req: operations.OrgpolicyProjectsPoliciesCreateRequest,
    security: operations.OrgpolicyProjectsPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/policies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudOrgpolicyV2PolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsPoliciesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesCreateResponse =
        new operations.OrgpolicyProjectsPoliciesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudOrgpolicyV2Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
   */
  orgpolicyProjectsPoliciesDelete(
    req: operations.OrgpolicyProjectsPoliciesDeleteRequest,
    security: operations.OrgpolicyProjectsPoliciesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsPoliciesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesDeleteResponse =
        new operations.OrgpolicyProjectsPoliciesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
   */
  orgpolicyProjectsPoliciesGet(
    req: operations.OrgpolicyProjectsPoliciesGetRequest,
    security: operations.OrgpolicyProjectsPoliciesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsPoliciesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesGetResponse =
        new operations.OrgpolicyProjectsPoliciesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudOrgpolicyV2Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
   */
  orgpolicyProjectsPoliciesGetEffectivePolicy(
    req: operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest,
    security: operations.OrgpolicyProjectsPoliciesGetEffectivePolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}:getEffectivePolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OrgpolicyProjectsPoliciesGetEffectivePolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse =
        new operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudOrgpolicyV2Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves all of the policies that exist on a particular resource.
   */
  orgpolicyProjectsPoliciesList(
    req: operations.OrgpolicyProjectsPoliciesListRequest,
    security: operations.OrgpolicyProjectsPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/policies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsPoliciesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesListResponse =
        new operations.OrgpolicyProjectsPoliciesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2ListPoliciesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudOrgpolicyV2ListPoliciesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
   */
  orgpolicyProjectsPoliciesPatch(
    req: operations.OrgpolicyProjectsPoliciesPatchRequest,
    security: operations.OrgpolicyProjectsPoliciesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrgpolicyProjectsPoliciesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrgpolicyProjectsPoliciesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudOrgpolicyV2PolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrgpolicyProjectsPoliciesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrgpolicyProjectsPoliciesPatchResponse =
        new operations.OrgpolicyProjectsPoliciesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudOrgpolicyV2Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudOrgpolicyV2Policy
            );
          }
          break;
      }

      return res;
    });
  }
}
