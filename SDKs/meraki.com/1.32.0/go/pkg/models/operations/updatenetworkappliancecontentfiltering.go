// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum - URL category list size which is either 'topSites' or 'fullList'
type UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum string

const (
	UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnumFullList UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum = "fullList"
	UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnumTopSites UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum = "topSites"
)

func (e UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum) ToPointer() *UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum {
	return &e
}

func (e *UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fullList":
		fallthrough
	case "topSites":
		*e = UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum: %v", v)
	}
}

type UpdateNetworkApplianceContentFilteringRequestBody struct {
	// A list of URL patterns that are allowed
	AllowedURLPatterns []string `json:"allowedUrlPatterns,omitempty"`
	// A list of URL categories to block
	BlockedURLCategories []string `json:"blockedUrlCategories,omitempty"`
	// A list of URL patterns that are blocked
	BlockedURLPatterns []string `json:"blockedUrlPatterns,omitempty"`
	// URL category list size which is either 'topSites' or 'fullList'
	URLCategoryListSize *UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum `json:"urlCategoryListSize,omitempty"`
}

type UpdateNetworkApplianceContentFilteringRequest struct {
	RequestBody *UpdateNetworkApplianceContentFilteringRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                             `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkApplianceContentFilteringResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceContentFiltering200ApplicationJSONObject map[string]interface{}
}
