/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateSubscriptionRequest - Defines parameters in a
 * [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
 */
public class CreateSubscriptionRequest {
    /**
     * The date when the subscription should be canceled, in
     * YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration
     * if it comes before the date the subscription would otherwise end.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_date")
    public String canceledDate;

    public CreateSubscriptionRequest withCanceledDate(String canceledDate) {
        this.canceledDate = canceledDate;
        return this;
    }
    
    /**
     * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge.
     * If not specified, Square sends an invoice via email. For an example to
     * create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_id")
    public String cardId;

    public CreateSubscriptionRequest withCardId(String cardId) {
        this.cardId = cardId;
        return this;
    }
    
    /**
     * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
     */
    @JsonProperty("customer_id")
    public String customerId;

    public CreateSubscriptionRequest withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * A unique string that identifies this `CreateSubscription` request.
     * If you do not provide a unique string (or provide an empty string as the value),
     * the endpoint treats each request as independent.
     * 
     * For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    public String idempotencyKey;

    public CreateSubscriptionRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * The ID of the location the subscription is associated with.
     */
    @JsonProperty("location_id")
    public String locationId;

    public CreateSubscriptionRequest withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * The ID of the subscription plan created using the Catalog API.
     * For more information, see
     * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and 
     * [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
     */
    @JsonProperty("plan_id")
    public String planId;

    public CreateSubscriptionRequest withPlanId(String planId) {
        this.planId = planId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_override_money")
    public Money priceOverrideMoney;

    public CreateSubscriptionRequest withPriceOverrideMoney(Money priceOverrideMoney) {
        this.priceOverrideMoney = priceOverrideMoney;
        return this;
    }
    
    /**
     * The start date of the subscription, in YYYY-MM-DD format. For example,
     * 2013-01-15. If the start date is left empty, the subscription begins
     * immediately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    public String startDate;

    public CreateSubscriptionRequest withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * The tax to add when billing the subscription.
     * The percentage is expressed in decimal form, using a `'.'` as the decimal
     * separator and without a `'%'` sign. For example, a value of 7.5
     * corresponds to 7.5%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_percentage")
    public String taxPercentage;

    public CreateSubscriptionRequest withTaxPercentage(String taxPercentage) {
        this.taxPercentage = taxPercentage;
        return this;
    }
    
    /**
     * The timezone that is used in date calculations for the subscription. If unset, defaults to
     * the location timezone. If a timezone is not configured for the location, defaults to "America/New_York".
     * Format: the IANA Timezone Database identifier for the location timezone. For
     * a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public CreateSubscriptionRequest withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    public CreateSubscriptionRequest(@JsonProperty("customer_id") String customerId, @JsonProperty("location_id") String locationId, @JsonProperty("plan_id") String planId) {
        this.customerId = customerId;
        this.locationId = locationId;
        this.planId = planId;
  }
}
