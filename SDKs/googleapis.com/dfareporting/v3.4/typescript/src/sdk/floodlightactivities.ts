/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class FloodlightActivities {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes an existing floodlight activity.
   */
  dfareportingFloodlightActivitiesDelete(
    req: operations.DfareportingFloodlightActivitiesDeleteRequest,
    security: operations.DfareportingFloodlightActivitiesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesDeleteResponse =
        new operations.DfareportingFloodlightActivitiesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Generates a tag for a floodlight activity.
   */
  dfareportingFloodlightActivitiesGeneratetag(
    req: operations.DfareportingFloodlightActivitiesGeneratetagRequest,
    security: operations.DfareportingFloodlightActivitiesGeneratetagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesGeneratetagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesGeneratetagRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities/generatetag",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DfareportingFloodlightActivitiesGeneratetagSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesGeneratetagResponse =
        new operations.DfareportingFloodlightActivitiesGeneratetagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivitiesGenerateTagResponse = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivitiesGenerateTagResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets one floodlight activity by ID.
   */
  dfareportingFloodlightActivitiesGet(
    req: operations.DfareportingFloodlightActivitiesGetRequest,
    security: operations.DfareportingFloodlightActivitiesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesGetResponse =
        new operations.DfareportingFloodlightActivitiesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivity = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivity
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new floodlight activity.
   */
  dfareportingFloodlightActivitiesInsert(
    req: operations.DfareportingFloodlightActivitiesInsertRequest,
    security: operations.DfareportingFloodlightActivitiesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "floodlightActivity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesInsertResponse =
        new operations.DfareportingFloodlightActivitiesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivity = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivity
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
   */
  dfareportingFloodlightActivitiesList(
    req: operations.DfareportingFloodlightActivitiesListRequest,
    security: operations.DfareportingFloodlightActivitiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesListResponse =
        new operations.DfareportingFloodlightActivitiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivitiesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivitiesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing floodlight activity. This method supports patch semantics.
   */
  dfareportingFloodlightActivitiesPatch(
    req: operations.DfareportingFloodlightActivitiesPatchRequest,
    security: operations.DfareportingFloodlightActivitiesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "floodlightActivity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesPatchResponse =
        new operations.DfareportingFloodlightActivitiesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivity = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivity
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing floodlight activity.
   */
  dfareportingFloodlightActivitiesUpdate(
    req: operations.DfareportingFloodlightActivitiesUpdateRequest,
    security: operations.DfareportingFloodlightActivitiesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DfareportingFloodlightActivitiesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfareportingFloodlightActivitiesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/userprofiles/{profileId}/floodlightActivities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "floodlightActivity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DfareportingFloodlightActivitiesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfareportingFloodlightActivitiesUpdateResponse =
        new operations.DfareportingFloodlightActivitiesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.floodlightActivity = utils.objectToClass(
              httpRes?.data,
              shared.FloodlightActivity
            );
          }
          break;
      }

      return res;
    });
  }
}
