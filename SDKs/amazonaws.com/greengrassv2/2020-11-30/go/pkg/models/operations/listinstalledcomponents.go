// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListInstalledComponentsTopologyFilterEnum - <p>The filter for the list of components. Choose from the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li> <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li> </ul> <p>Default: <code>ROOT</code> </p>
type ListInstalledComponentsTopologyFilterEnum string

const (
	ListInstalledComponentsTopologyFilterEnumAll  ListInstalledComponentsTopologyFilterEnum = "ALL"
	ListInstalledComponentsTopologyFilterEnumRoot ListInstalledComponentsTopologyFilterEnum = "ROOT"
)

func (e *ListInstalledComponentsTopologyFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "ROOT":
		*e = ListInstalledComponentsTopologyFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListInstalledComponentsTopologyFilterEnum: %s", s)
	}
}

type ListInstalledComponentsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the core device. This is also the name of the IoT thing.
	CoreDeviceThingName string `pathParam:"style=simple,explode=false,name=coreDeviceThingName"`
	// The maximum number of results to be returned per paginated request.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to be used for the next set of paginated results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// <p>The filter for the list of components. Choose from the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li> <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li> </ul> <p>Default: <code>ROOT</code> </p>
	TopologyFilter *ListInstalledComponentsTopologyFilterEnum `queryParam:"style=form,explode=true,name=topologyFilter"`
}

type ListInstalledComponentsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListInstalledComponentsResponse *shared.ListInstalledComponentsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
