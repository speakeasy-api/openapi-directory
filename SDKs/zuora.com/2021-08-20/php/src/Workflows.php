<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Workflows 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a workflow
     * 
     * Deletes a specific workflow by its ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowResponse
     */
	public function deleteWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/{workflow_id}', \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkflowSuccess = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteWorkflowSuccess', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkflowError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteWorkflowError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a workflow
     * 
     * Retrieves information about a specific workflow by its ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowResponse
     */
	public function getWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/{workflow_id}', \OpenAPI\OpenAPI\Models\Operations\GETWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWorkflowResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetWorkflowResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export a workflow
     * 
     * Export a Workflow in a JSON document. This document can be used to create a copy of this workflow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportResponse
     */
	public function getWorkflowExport(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/{workflow_id}/export', \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWorkflowExport200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETWorkflowExport200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List workflows
     * 
     * Retrieves a list of workflows available in your Zuora tenant.      
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsResponse
     */
	public function getWorkflows(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETWorkflowsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWorkflowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetWorkflowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a workflow task
     * 
     * Retrieves a specific workflow task by its ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskResponse
     */
	public function getWorkflowsTask(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/tasks/{task_id}', \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List workflow tasks
     * 
     * Retrieves a list of workflow tasks available in your Zuora tenant.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksResponse
     */
	public function getWorkflowsTasks(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/tasks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsTasksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TasksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve workflow task usage
     * 
     * Gets workflow task usage sorted by day within a specified time frame.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesResponse
     */
	public function getWorkflowsUsages(
        \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/metrics.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETWorkflowsUsagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UsagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a workflow definition
     * 
     * Updates the definition of a specific workflow by its ID, which allows you to [configure the settings of a workflow](https://knowledgecenter.zuora.com/CE_Workflow/Using_Workflow/B_Configure_a_Workflow) via API.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowResponse
     */
	public function patchUpdateWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/{workflow_id}', \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PATCHUpdateWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWorkflowSetupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetWorkflowSetupResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkflowError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteWorkflowError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrors = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrors', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run a workflow
     * 
     * Run a specified workflow. In the request body, you can include parameters that you want to pass to the workflow. For the parameters to be recognized and picked up by tasks in the workflow, you need to define the parameters first. 
     * 
     * To learn about how to define parameters, see [Configure the settings of a workflow](https://knowledgecenter.zuora.com/CE_Workflow/Using_Workflow/B_Configure_a_Workflow).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowResponse
     */
	public function postRunWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/{workflow_id}/run', \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowInstance', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRunWorkflow400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflow400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 406) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRunWorkflow406ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflow406ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRunWorkflow409ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\POSTRunWorkflow409ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Import a workflow
     * 
     * Creates a copy of a workflow using the exported JSON document of the original workflow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowImportResponse
     */
	public function postWorkflowImport(
        \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/import');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workflow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rerun a workflow task
     * 
     * Reruns a specific workflow task by its ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunResponse
     */
	public function postWorkflowsTaskRerun(
        \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/tasks/{task_id}/rerun', \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTWorkflowsTaskRerunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update workflow tasks
     * 
     * Updates a group of workflow tasks.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTWorkflowsTasksUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTWorkflowsTasksUpdateResponse
     */
	public function putWorkflowsTasksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PUTWorkflowsTasksUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTWorkflowsTasksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workflows/tasks/batch_update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putTasksRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTWorkflowsTasksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TasksResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
}