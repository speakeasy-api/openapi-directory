"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Roles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_clients_id_roles_role_name_(self, request: operations.DeleteRealmClientsIDRolesRoleNameRequest) -> operations.DeleteRealmClientsIDRolesRoleNameResponse:
        r"""Delete a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDRolesRoleNameRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_roles_role_name_composites(self, request: operations.DeleteRealmClientsIDRolesRoleNameCompositesRequest) -> operations.DeleteRealmClientsIDRolesRoleNameCompositesResponse:
        r"""Remove roles from the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDRolesRoleNameCompositesRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_roles_role_name_(self, request: operations.DeleteRealmRolesRoleNameRequest) -> operations.DeleteRealmRolesRoleNameResponse:
        r"""Delete a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmRolesRoleNameRequest, base_url, '/{realm}/roles/{role-name}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_roles_role_name_composites(self, request: operations.DeleteRealmRolesRoleNameCompositesRequest) -> operations.DeleteRealmRolesRoleNameCompositesResponse:
        r"""Remove roles from the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmRolesRoleNameCompositesRequest, base_url, '/{realm}/roles/{role-name}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_clients_id_roles(self, request: operations.GetRealmClientsIDRolesRequest) -> operations.GetRealmClientsIDRolesResponse:
        r"""Get all roles for the realm or client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRequest, base_url, '/{realm}/clients/{id}/roles', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDRolesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_roles_role_name_(self, request: operations.GetRealmClientsIDRolesRoleNameRequest) -> operations.GetRealmClientsIDRolesRoleNameResponse:
        r"""Get a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleRepresentation])
                res.role_representation = out

        return res

    def get_realm_clients_id_roles_role_name_composites(self, request: operations.GetRealmClientsIDRolesRoleNameCompositesRequest) -> operations.GetRealmClientsIDRolesRoleNameCompositesResponse:
        r"""Get composites of the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameCompositesRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/composites', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_roles_role_name_composites_clients_client_(self, request: operations.GetRealmClientsIDRolesRoleNameCompositesClientsClientRequest) -> operations.GetRealmClientsIDRolesRoleNameCompositesClientsClientResponse:
        r"""An app-level roles for the specified app for the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameCompositesClientsClientRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameCompositesClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_roles_role_name_composites_realm(self, request: operations.GetRealmClientsIDRolesRoleNameCompositesRealmRequest) -> operations.GetRealmClientsIDRolesRoleNameCompositesRealmResponse:
        r"""Get realm-level roles of the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameCompositesRealmRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/composites/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameCompositesRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_roles_role_name_groups(self, request: operations.GetRealmClientsIDRolesRoleNameGroupsRequest) -> operations.GetRealmClientsIDRolesRoleNameGroupsResponse:
        r"""Return List of Groups that have the specified role name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameGroupsRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/groups', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDRolesRoleNameGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupRepresentation]])
                res.group_representations = out

        return res

    def get_realm_clients_id_roles_role_name_management_permissions(self, request: operations.GetRealmClientsIDRolesRoleNameManagementPermissionsRequest) -> operations.GetRealmClientsIDRolesRoleNameManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameManagementPermissionsRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/management/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def get_realm_clients_id_roles_role_name_users(self, request: operations.GetRealmClientsIDRolesRoleNameUsersRequest) -> operations.GetRealmClientsIDRolesRoleNameUsersResponse:
        r"""Return List of Users that have the specified role name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRolesRoleNameUsersRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/users', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDRolesRoleNameUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDRolesRoleNameUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRepresentation]])
                res.user_representations = out

        return res

    def get_realm_roles(self, request: operations.GetRealmRolesRequest) -> operations.GetRealmRolesResponse:
        r"""Get all roles for the realm or client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRequest, base_url, '/{realm}/roles', request)
        
        query_params = utils.get_query_params(operations.GetRealmRolesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_role_name_(self, request: operations.GetRealmRolesRoleNameRequest) -> operations.GetRealmRolesRoleNameResponse:
        r"""Get a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameRequest, base_url, '/{realm}/roles/{role-name}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleRepresentation])
                res.role_representation = out

        return res

    def get_realm_roles_role_name_composites(self, request: operations.GetRealmRolesRoleNameCompositesRequest) -> operations.GetRealmRolesRoleNameCompositesResponse:
        r"""Get composites of the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameCompositesRequest, base_url, '/{realm}/roles/{role-name}/composites', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_role_name_composites_clients_client_(self, request: operations.GetRealmRolesRoleNameCompositesClientsClientRequest) -> operations.GetRealmRolesRoleNameCompositesClientsClientResponse:
        r"""An app-level roles for the specified app for the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameCompositesClientsClientRequest, base_url, '/{realm}/roles/{role-name}/composites/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameCompositesClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_role_name_composites_realm(self, request: operations.GetRealmRolesRoleNameCompositesRealmRequest) -> operations.GetRealmRolesRoleNameCompositesRealmResponse:
        r"""Get realm-level roles of the role’s composite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameCompositesRealmRequest, base_url, '/{realm}/roles/{role-name}/composites/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameCompositesRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_roles_role_name_groups(self, request: operations.GetRealmRolesRoleNameGroupsRequest) -> operations.GetRealmRolesRoleNameGroupsResponse:
        r"""Return List of Groups that have the specified role name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameGroupsRequest, base_url, '/{realm}/roles/{role-name}/groups', request)
        
        query_params = utils.get_query_params(operations.GetRealmRolesRoleNameGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupRepresentation]])
                res.group_representations = out

        return res

    def get_realm_roles_role_name_management_permissions(self, request: operations.GetRealmRolesRoleNameManagementPermissionsRequest) -> operations.GetRealmRolesRoleNameManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameManagementPermissionsRequest, base_url, '/{realm}/roles/{role-name}/management/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def get_realm_roles_role_name_users(self, request: operations.GetRealmRolesRoleNameUsersRequest) -> operations.GetRealmRolesRoleNameUsersResponse:
        r"""Return List of Users that have the specified role name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmRolesRoleNameUsersRequest, base_url, '/{realm}/roles/{role-name}/users', request)
        
        query_params = utils.get_query_params(operations.GetRealmRolesRoleNameUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmRolesRoleNameUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserRepresentation]])
                res.user_representations = out

        return res

    def post_realm_clients_id_roles(self, request: operations.PostRealmClientsIDRolesRequest) -> operations.PostRealmClientsIDRolesResponse:
        r"""Create a new role for the realm or client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDRolesRequest, base_url, '/{realm}/clients/{id}/roles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_roles_role_name_composites(self, request: operations.PostRealmClientsIDRolesRoleNameCompositesRequest) -> operations.PostRealmClientsIDRolesRoleNameCompositesResponse:
        r"""Add a composite to the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDRolesRoleNameCompositesRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_roles(self, request: operations.PostRealmRolesRequest) -> operations.PostRealmRolesResponse:
        r"""Create a new role for the realm or client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmRolesRequest, base_url, '/{realm}/roles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_roles_role_name_composites(self, request: operations.PostRealmRolesRoleNameCompositesRequest) -> operations.PostRealmRolesRoleNameCompositesResponse:
        r"""Add a composite to the role"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmRolesRoleNameCompositesRequest, base_url, '/{realm}/roles/{role-name}/composites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmRolesRoleNameCompositesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_clients_id_roles_role_name_(self, request: operations.PutRealmClientsIDRolesRoleNameRequest) -> operations.PutRealmClientsIDRolesRoleNameResponse:
        r"""Update a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDRolesRoleNameRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_clients_id_roles_role_name_management_permissions(self, request: operations.PutRealmClientsIDRolesRoleNameManagementPermissionsRequest) -> operations.PutRealmClientsIDRolesRoleNameManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDRolesRoleNameManagementPermissionsRequest, base_url, '/{realm}/clients/{id}/roles/{role-name}/management/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "management_permission_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDRolesRoleNameManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def put_realm_roles_role_name_(self, request: operations.PutRealmRolesRoleNameRequest) -> operations.PutRealmRolesRoleNameResponse:
        r"""Update a role by name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmRolesRoleNameRequest, base_url, '/{realm}/roles/{role-name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmRolesRoleNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_roles_role_name_management_permissions(self, request: operations.PutRealmRolesRoleNameManagementPermissionsRequest) -> operations.PutRealmRolesRoleNameManagementPermissionsResponse:
        r"""Return object stating whether role Authoirzation permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmRolesRoleNameManagementPermissionsRequest, base_url, '/{realm}/roles/{role-name}/management/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "management_permission_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmRolesRoleNameManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    