"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LivingAreaFeaturesAirConditioningExceptionEnum(str, Enum):
    r"""Air conditioning exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesBathtubExceptionEnum(str, Enum):
    r"""Bathtub exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesBidetExceptionEnum(str, Enum):
    r"""Bidet exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesDryerExceptionEnum(str, Enum):
    r"""Dryer exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesElectronicRoomKeyExceptionEnum(str, Enum):
    r"""Electronic room key exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesFireplaceExceptionEnum(str, Enum):
    r"""Fireplace exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesHairdryerExceptionEnum(str, Enum):
    r"""Hairdryer exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesHeatingExceptionEnum(str, Enum):
    r"""Heating exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesInunitSafeExceptionEnum(str, Enum):
    r"""In-unit safe exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesInunitWifiAvailableExceptionEnum(str, Enum):
    r"""In-unit Wifi available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesIroningEquipmentExceptionEnum(str, Enum):
    r"""Ironing equipment exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesPayPerViewMoviesExceptionEnum(str, Enum):
    r"""Pay per view movies exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesPrivateBathroomExceptionEnum(str, Enum):
    r"""Private bathroom exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesShowerExceptionEnum(str, Enum):
    r"""Shower exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesToiletExceptionEnum(str, Enum):
    r"""Toilet exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesTvCastingExceptionEnum(str, Enum):
    r"""TV exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesTvExceptionEnum(str, Enum):
    r"""TV exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesTvStreamingExceptionEnum(str, Enum):
    r"""TV streaming exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum(str, Enum):
    r"""Universal power adapters exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaFeaturesWasherExceptionEnum(str, Enum):
    r"""Washer exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LivingAreaFeatures:
    r"""Features in the living area."""
    
    air_conditioning: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('airConditioning'), 'exclude': lambda f: f is None }})
    r"""Air conditioning. An electrical machine used to cool the temperature of the guestroom."""  
    air_conditioning_exception: Optional[LivingAreaFeaturesAirConditioningExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('airConditioningException'), 'exclude': lambda f: f is None }})
    r"""Air conditioning exception."""  
    bathtub: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bathtub'), 'exclude': lambda f: f is None }})
    r"""Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining."""  
    bathtub_exception: Optional[LivingAreaFeaturesBathtubExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bathtubException'), 'exclude': lambda f: f is None }})
    r"""Bathtub exception."""  
    bidet: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidet'), 'exclude': lambda f: f is None }})
    r"""Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use."""  
    bidet_exception: Optional[LivingAreaFeaturesBidetExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidetException'), 'exclude': lambda f: f is None }})
    r"""Bidet exception."""  
    dryer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryer'), 'exclude': lambda f: f is None }})
    r"""Dryer. An electrical machine designed to dry clothing."""  
    dryer_exception: Optional[LivingAreaFeaturesDryerExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryerException'), 'exclude': lambda f: f is None }})
    r"""Dryer exception."""  
    electronic_room_key: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicRoomKey'), 'exclude': lambda f: f is None }})
    r"""Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry."""  
    electronic_room_key_exception: Optional[LivingAreaFeaturesElectronicRoomKeyExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicRoomKeyException'), 'exclude': lambda f: f is None }})
    r"""Electronic room key exception."""  
    fireplace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fireplace'), 'exclude': lambda f: f is None }})
    r"""Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone."""  
    fireplace_exception: Optional[LivingAreaFeaturesFireplaceExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fireplaceException'), 'exclude': lambda f: f is None }})
    r"""Fireplace exception."""  
    hairdryer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hairdryer'), 'exclude': lambda f: f is None }})
    r"""Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet."""  
    hairdryer_exception: Optional[LivingAreaFeaturesHairdryerExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hairdryerException'), 'exclude': lambda f: f is None }})
    r"""Hairdryer exception."""  
    heating: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heating'), 'exclude': lambda f: f is None }})
    r"""Heating. An electrical machine used to warm the temperature of the guestroom."""  
    heating_exception: Optional[LivingAreaFeaturesHeatingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heatingException'), 'exclude': lambda f: f is None }})
    r"""Heating exception."""  
    inunit_safe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inunitSafe'), 'exclude': lambda f: f is None }})
    r"""In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet."""  
    inunit_safe_exception: Optional[LivingAreaFeaturesInunitSafeExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inunitSafeException'), 'exclude': lambda f: f is None }})
    r"""In-unit safe exception."""  
    inunit_wifi_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inunitWifiAvailable'), 'exclude': lambda f: f is None }})
    r"""In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee."""  
    inunit_wifi_available_exception: Optional[LivingAreaFeaturesInunitWifiAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inunitWifiAvailableException'), 'exclude': lambda f: f is None }})
    r"""In-unit Wifi available exception."""  
    ironing_equipment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ironingEquipment'), 'exclude': lambda f: f is None }})
    r"""Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked."""  
    ironing_equipment_exception: Optional[LivingAreaFeaturesIroningEquipmentExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ironingEquipmentException'), 'exclude': lambda f: f is None }})
    r"""Ironing equipment exception."""  
    pay_per_view_movies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payPerViewMovies'), 'exclude': lambda f: f is None }})
    r"""Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment."""  
    pay_per_view_movies_exception: Optional[LivingAreaFeaturesPayPerViewMoviesExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payPerViewMoviesException'), 'exclude': lambda f: f is None }})
    r"""Pay per view movies exception."""  
    private_bathroom: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateBathroom'), 'exclude': lambda f: f is None }})
    r"""Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom."""  
    private_bathroom_exception: Optional[LivingAreaFeaturesPrivateBathroomExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateBathroomException'), 'exclude': lambda f: f is None }})
    r"""Private bathroom exception."""  
    shower: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shower'), 'exclude': lambda f: f is None }})
    r"""Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor."""  
    shower_exception: Optional[LivingAreaFeaturesShowerExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showerException'), 'exclude': lambda f: f is None }})
    r"""Shower exception."""  
    toilet: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toilet'), 'exclude': lambda f: f is None }})
    r"""Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste."""  
    toilet_exception: Optional[LivingAreaFeaturesToiletExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toiletException'), 'exclude': lambda f: f is None }})
    r"""Toilet exception."""  
    tv: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tv'), 'exclude': lambda f: f is None }})
    r"""TV. A television is available in the guestroom."""  
    tv_casting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvCasting'), 'exclude': lambda f: f is None }})
    r"""TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television."""  
    tv_casting_exception: Optional[LivingAreaFeaturesTvCastingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvCastingException'), 'exclude': lambda f: f is None }})
    r"""TV exception."""  
    tv_exception: Optional[LivingAreaFeaturesTvExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvException'), 'exclude': lambda f: f is None }})
    r"""TV exception."""  
    tv_streaming: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvStreaming'), 'exclude': lambda f: f is None }})
    r"""TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps."""  
    tv_streaming_exception: Optional[LivingAreaFeaturesTvStreamingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvStreamingException'), 'exclude': lambda f: f is None }})
    r"""TV streaming exception."""  
    universal_power_adapters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('universalPowerAdapters'), 'exclude': lambda f: f is None }})
    r"""Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger."""  
    universal_power_adapters_exception: Optional[LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('universalPowerAdaptersException'), 'exclude': lambda f: f is None }})
    r"""Universal power adapters exception."""  
    washer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('washer'), 'exclude': lambda f: f is None }})
    r"""Washer. An electrical machine connected to a running water source designed to launder clothing."""  
    washer_exception: Optional[LivingAreaFeaturesWasherExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('washerException'), 'exclude': lambda f: f is None }})
    r"""Washer exception."""  
    