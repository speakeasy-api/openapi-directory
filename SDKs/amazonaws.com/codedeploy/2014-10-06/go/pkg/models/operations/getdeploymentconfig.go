// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDeploymentConfigXAmzTargetEnum
type GetDeploymentConfigXAmzTargetEnum string

const (
	GetDeploymentConfigXAmzTargetEnumCodeDeploy20141006GetDeploymentConfig GetDeploymentConfigXAmzTargetEnum = "CodeDeploy_20141006.GetDeploymentConfig"
)

func (e *GetDeploymentConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetDeploymentConfig":
		*e = GetDeploymentConfigXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentConfigXAmzTargetEnum: %s", s)
	}
}

type GetDeploymentConfigRequest struct {
	GetDeploymentConfigInput shared.GetDeploymentConfigInput   `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               GetDeploymentConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDeploymentConfigResponse struct {
	ContentType string
	// DeploymentConfigDoesNotExistException
	DeploymentConfigDoesNotExistException interface{}
	// DeploymentConfigNameRequiredException
	DeploymentConfigNameRequiredException interface{}
	// Success
	GetDeploymentConfigOutput *shared.GetDeploymentConfigOutput
	// InvalidComputePlatformException
	InvalidComputePlatformException interface{}
	// InvalidDeploymentConfigNameException
	InvalidDeploymentConfigNameException interface{}
	StatusCode                           int
	RawResponse                          *http.Response
}
