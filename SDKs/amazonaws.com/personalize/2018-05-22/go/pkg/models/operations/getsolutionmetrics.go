// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSolutionMetricsXAmzTargetEnum
type GetSolutionMetricsXAmzTargetEnum string

const (
	GetSolutionMetricsXAmzTargetEnumAmazonPersonalizeGetSolutionMetrics GetSolutionMetricsXAmzTargetEnum = "AmazonPersonalize.GetSolutionMetrics"
)

func (e *GetSolutionMetricsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.GetSolutionMetrics":
		*e = GetSolutionMetricsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSolutionMetricsXAmzTargetEnum: %s", s)
	}
}

type GetSolutionMetricsHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetSolutionMetricsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetSolutionMetricsRequest struct {
	Headers GetSolutionMetricsHeaders
	Request shared.GetSolutionMetricsRequest `request:"mediaType=application/json"`
}

type GetSolutionMetricsResponse struct {
	ContentType string
	// Success
	GetSolutionMetricsResponse *shared.GetSolutionMetricsResponse
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
