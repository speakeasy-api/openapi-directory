// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetStatementXAmzTargetEnum
type GetStatementXAmzTargetEnum string

const (
	GetStatementXAmzTargetEnumAwsGlueGetStatement GetStatementXAmzTargetEnum = "AWSGlue.GetStatement"
)

func (e GetStatementXAmzTargetEnum) ToPointer() *GetStatementXAmzTargetEnum {
	return &e
}

func (e *GetStatementXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.GetStatement":
		*e = GetStatementXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStatementXAmzTargetEnum: %v", v)
	}
}

type GetStatementRequest struct {
	GetStatementRequest shared.GetStatementRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetStatementXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetStatementResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetStatementResponse *shared.GetStatementResponse
	// IllegalSessionStateException
	IllegalSessionStateException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
