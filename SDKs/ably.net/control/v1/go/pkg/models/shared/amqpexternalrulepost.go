// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AmqpExternalRulePostRuleTypeEnum string

const (
	AmqpExternalRulePostRuleTypeEnumAmqpExternal AmqpExternalRulePostRuleTypeEnum = "amqp/external"
)

func (e AmqpExternalRulePostRuleTypeEnum) ToPointer() *AmqpExternalRulePostRuleTypeEnum {
	return &e
}

func (e *AmqpExternalRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amqp/external":
		*e = AmqpExternalRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmqpExternalRulePostRuleTypeEnum: %v", v)
	}
}

type AmqpExternalRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AmqpExternalRulePostTarget struct {
	Enveloped          *bool                               `json:"enveloped,omitempty"`
	Exchange           *string                             `json:"exchange,omitempty"`
	Format             *string                             `json:"format,omitempty"`
	Headers            []AmqpExternalRulePostTargetHeaders `json:"headers,omitempty"`
	MandatoryRoute     bool                                `json:"mandatoryRoute"`
	MessageTTL         *int64                              `json:"messageTtl,omitempty"`
	PersistentMessages bool                                `json:"persistentMessages"`
	RoutingKey         string                              `json:"routingKey"`
	URL                string                              `json:"url"`
}

type AmqpExternalRulePost struct {
	RequestMode string                           `json:"requestMode"`
	RuleType    AmqpExternalRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                       `json:"source"`
	Status      *string                          `json:"status,omitempty"`
	Target      AmqpExternalRulePostTarget       `json:"target"`
}
