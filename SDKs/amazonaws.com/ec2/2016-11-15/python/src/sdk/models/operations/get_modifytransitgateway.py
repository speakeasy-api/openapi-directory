"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import autoacceptsharedattachmentsvalue_enum as shared_autoacceptsharedattachmentsvalue_enum
from ..shared import defaultroutetableassociationvalue_enum as shared_defaultroutetableassociationvalue_enum
from ..shared import defaultroutetablepropagationvalue_enum as shared_defaultroutetablepropagationvalue_enum
from ..shared import dnssupportvalue_enum as shared_dnssupportvalue_enum
from ..shared import vpnecmpsupportvalue_enum as shared_vpnecmpsupportvalue_enum
from enum import Enum
from typing import Optional

class GETModifyTransitGatewayActionEnum(str, Enum):
    MODIFY_TRANSIT_GATEWAY = 'ModifyTransitGateway'


@dataclasses.dataclass
class GETModifyTransitGatewayOptions:
    r"""The transit gateway options."""
    
    add_transit_gateway_cidr_blocks: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AddTransitGatewayCidrBlocks' }})  
    amazon_side_asn: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AmazonSideAsn' }})  
    association_default_route_table_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AssociationDefaultRouteTableId' }})  
    auto_accept_shared_attachments: Optional[shared_autoacceptsharedattachmentsvalue_enum.AutoAcceptSharedAttachmentsValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AutoAcceptSharedAttachments' }})  
    default_route_table_association: Optional[shared_defaultroutetableassociationvalue_enum.DefaultRouteTableAssociationValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DefaultRouteTableAssociation' }})  
    default_route_table_propagation: Optional[shared_defaultroutetablepropagationvalue_enum.DefaultRouteTablePropagationValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DefaultRouteTablePropagation' }})  
    dns_support: Optional[shared_dnssupportvalue_enum.DNSSupportValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DnsSupport' }})  
    propagation_default_route_table_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PropagationDefaultRouteTableId' }})  
    remove_transit_gateway_cidr_blocks: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveTransitGatewayCidrBlocks' }})  
    vpn_ecmp_support: Optional[shared_vpnecmpsupportvalue_enum.VpnEcmpSupportValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpnEcmpSupport' }})  
    
class GETModifyTransitGatewayVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyTransitGatewayRequest:
    
    action: GETModifyTransitGatewayActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    transit_gateway_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'TransitGatewayId', 'style': 'form', 'explode': True }})
    r"""The ID of the transit gateway."""  
    version: GETModifyTransitGatewayVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""The description for the transit gateway."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    options: Optional[GETModifyTransitGatewayOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Options', 'style': 'form', 'explode': True }})
    r"""The options to modify."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyTransitGatewayResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    