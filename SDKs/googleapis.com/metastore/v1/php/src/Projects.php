<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a metastore federation in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateResponse
     */
	public function metastoreProjectsLocationsFederationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/federations', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "federationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists federations in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListResponse
     */
	public function metastoreProjectsLocationsFederationsList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/federations', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsFederationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFederationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFederationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListResponse
     */
	public function metastoreProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelResponse
     */
	public function metastoreProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListResponse
     */
	public function metastoreProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new backup in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateResponse
     */
	public function metastoreProjectsLocationsServicesBackupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single backup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteResponse
     */
	public function metastoreProjectsLocationsServicesBackupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyResponse
     */
	public function metastoreProjectsLocationsServicesBackupsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists backups in a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListResponse
     */
	public function metastoreProjectsLocationsServicesBackupsList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBackupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBackupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyResponse
     */
	public function metastoreProjectsLocationsServicesBackupsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesBackupsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a metastore service in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateResponse
     */
	public function metastoreProjectsLocationsServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports metadata from a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataResponse
     */
	public function metastoreProjectsLocationsServicesExportMetadata(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{service}:exportMetadata', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "exportMetadataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesExportMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists services in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListResponse
     */
	public function metastoreProjectsLocationsServicesList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new MetadataImport in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateResponse
     */
	public function metastoreProjectsLocationsServicesMetadataImportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/metadataImports', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "metadataImportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single import.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetResponse
     */
	public function metastoreProjectsLocationsServicesMetadataImportsGet(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metadataImport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MetadataImport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists imports in a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListResponse
     */
	public function metastoreProjectsLocationsServicesMetadataImportsList(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/metadataImports', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMetadataImportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMetadataImportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a single import. Only the description field of MetadataImport is supported to be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchResponse
     */
	public function metastoreProjectsLocationsServicesMetadataImportsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "metadataImportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesMetadataImportsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores a service from a backup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreResponse
     */
	public function metastoreProjectsLocationsServicesRestore(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{service}:restore', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restoreServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsResponse
     */
	public function metastoreProjectsLocationsServicesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetastoreProjectsLocationsServicesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}