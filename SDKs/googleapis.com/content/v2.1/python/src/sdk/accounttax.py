"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounttax:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_accounttax_custombatch(self, request: operations.ContentAccounttaxCustombatchRequest, security: operations.ContentAccounttaxCustombatchSecurity) -> operations.ContentAccounttaxCustombatchResponse:
        r"""Retrieves and updates tax settings of multiple accounts in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounttax/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accounttax_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccounttaxCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccounttaxCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccounttaxCustomBatchResponse])
                res.accounttax_custom_batch_response = out

        return res

    def content_accounttax_get(self, request: operations.ContentAccounttaxGetRequest, security: operations.ContentAccounttaxGetSecurity) -> operations.ContentAccounttaxGetResponse:
        r"""Retrieves the tax settings of the account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccounttaxGetRequest, base_url, '/{merchantId}/accounttax/{accountId}', request)
        
        query_params = utils.get_query_params(operations.ContentAccounttaxGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccounttaxGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountTax])
                res.account_tax = out

        return res

    def content_accounttax_list(self, request: operations.ContentAccounttaxListRequest, security: operations.ContentAccounttaxListSecurity) -> operations.ContentAccounttaxListResponse:
        r"""Lists the tax settings of the sub-accounts in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccounttaxListRequest, base_url, '/{merchantId}/accounttax', request)
        
        query_params = utils.get_query_params(operations.ContentAccounttaxListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccounttaxListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccounttaxListResponse])
                res.accounttax_list_response = out

        return res

    def content_accounttax_update(self, request: operations.ContentAccounttaxUpdateRequest, security: operations.ContentAccounttaxUpdateSecurity) -> operations.ContentAccounttaxUpdateResponse:
        r"""Updates the tax settings of the account. Any fields that are not provided are deleted from the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccounttaxUpdateRequest, base_url, '/{merchantId}/accounttax/{accountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_tax", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccounttaxUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccounttaxUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountTax])
                res.account_tax = out

        return res

    