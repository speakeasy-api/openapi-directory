// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IncerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type IncerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// IncerRequestBodyFormatEnum - The format of the certificate in response.
type IncerRequestBodyFormatEnum string

const (
	IncerRequestBodyFormatEnumPdf IncerRequestBodyFormatEnum = "pdf"
)

func (e *IncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = IncerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IncerRequestBodyFormatEnum: %s", s)
	}
}

// IncerRequestBody - Request format
type IncerRequestBody struct {
	CertificateParameters *IncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type IncerRequest struct {
	// Request format
	Request  *IncerRequestBody `request:"mediaType=application/json"`
	Security IncerSecurity
}

type Incer504ApplicationJSONErrorEnum string

const (
	Incer504ApplicationJSONErrorEnumGatewayTimeout Incer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Incer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Incer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer504ApplicationJSONErrorDescriptionEnum string

const (
	Incer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Incer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Incer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Incer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer504ApplicationJSON - Gateway timeout
type Incer504ApplicationJSON struct {
	Error            *Incer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer503ApplicationJSONErrorEnum string

const (
	Incer503ApplicationJSONErrorEnumServiceUnavailable Incer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Incer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Incer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer503ApplicationJSONErrorDescriptionEnum string

const (
	Incer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Incer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Incer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Incer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer503ApplicationJSON - Service unavailable
type Incer503ApplicationJSON struct {
	Error            *Incer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer502ApplicationJSONErrorEnum string

const (
	Incer502ApplicationJSONErrorEnumBadGatewy Incer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Incer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Incer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer502ApplicationJSONErrorDescriptionEnum string

const (
	Incer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Incer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Incer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Incer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer502ApplicationJSON - Bad gateway
type Incer502ApplicationJSON struct {
	Error            *Incer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer500ApplicationJSONErrorEnum string

const (
	Incer500ApplicationJSONErrorEnumInternalServerError Incer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Incer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Incer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer500ApplicationJSONErrorDescriptionEnum string

const (
	Incer500ApplicationJSONErrorDescriptionEnumInternalServerError Incer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Incer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Incer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer500ApplicationJSON - Internal server error
type Incer500ApplicationJSON struct {
	Error            *Incer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer404ApplicationJSONErrorEnum string

const (
	Incer404ApplicationJSONErrorEnumRecordNotFound Incer404ApplicationJSONErrorEnum = "record_not_found"
	Incer404ApplicationJSONErrorEnumURLNotFound    Incer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Incer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Incer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer404ApplicationJSONErrorDescriptionEnum string

const (
	Incer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Incer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Incer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Incer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Incer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Incer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer404ApplicationJSON - No record found
type Incer404ApplicationJSON struct {
	Error            *Incer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer401ApplicationJSONErrorEnum string

const (
	Incer401ApplicationJSONErrorEnumInvalidAuthentication Incer401ApplicationJSONErrorEnum = "invalid_authentication"
	Incer401ApplicationJSONErrorEnumInvalidAuthorization  Incer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Incer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Incer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer401ApplicationJSONErrorDescriptionEnum string

const (
	Incer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Incer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Incer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Incer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Incer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Incer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer401ApplicationJSON - Unauthorized access
type Incer401ApplicationJSON struct {
	Error            *Incer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Incer400ApplicationJSONErrorEnum string

const (
	Incer400ApplicationJSONErrorEnumMissingParameter Incer400ApplicationJSONErrorEnum = "missing_parameter"
	Incer400ApplicationJSONErrorEnumInvalidParameter Incer400ApplicationJSONErrorEnum = "invalid_parameter"
	Incer400ApplicationJSONErrorEnumInvalidFormat    Incer400ApplicationJSONErrorEnum = "invalid_format"
	Incer400ApplicationJSONErrorEnumInvalidTxnid     Incer400ApplicationJSONErrorEnum = "invalid_txnid"
	Incer400ApplicationJSONErrorEnumInvalidConsentid Incer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Incer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Incer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Incer400ApplicationJSONErrorDescriptionEnum string

const (
	Incer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Incer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Incer400ApplicationJSONErrorDescriptionEnumBadRequest                              Incer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Incer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Incer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Incer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Incer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Incer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Incer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Incer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Incer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Incer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Incer400ApplicationJSON - Bad request
type Incer400ApplicationJSON struct {
	Error            *Incer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Incer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IncerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Incer400ApplicationJSONObject *Incer400ApplicationJSON
	// Unauthorized access
	Incer401ApplicationJSONObject *Incer401ApplicationJSON
	// No record found
	Incer404ApplicationJSONObject *Incer404ApplicationJSON
	// Internal server error
	Incer500ApplicationJSONObject *Incer500ApplicationJSON
	// Bad gateway
	Incer502ApplicationJSONObject *Incer502ApplicationJSON
	// Service unavailable
	Incer503ApplicationJSONObject *Incer503ApplicationJSON
	// Gateway timeout
	Incer504ApplicationJSONObject *Incer504ApplicationJSON
}
