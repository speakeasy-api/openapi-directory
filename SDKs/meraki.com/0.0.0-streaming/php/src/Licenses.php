<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Licenses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Assign SM seats to a network
     * 
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
     */
	public function assignOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/assignSeats', \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display a license
     * 
     * Display a license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
     */
	public function getOrganizationLicense(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/{licenseId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of the license state for an organization
     * 
     * Return an overview of the license state for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateResponse
     */
	public function getOrganizationLicenseState(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenseState', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicenseState200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the licenses for an organization
     * 
     * List the licenses for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
     */
	public function getOrganizationLicenses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicenses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move SM seats to another organization
     * 
     * Move SM seats to another organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
     */
	public function moveOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/moveSeats', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renew SM seats of a license
     * 
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
     */
	public function renewOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/renewSeats', \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->renewOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}