/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class DashboardZoomRoomSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class DashboardZoomRoomRequest extends SpeakeasyBase {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=from;dateTimeFormat=YYYY-MM-DD",
  })
  from: Date;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * End date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to;dateTimeFormat=YYYY-MM-DD",
  })
  to: Date;

  /**
   * The Zoom room ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=zoomroomId",
  })
  zoomroomId: string;
}

export class DashboardZoomRoomZoomRoomMeetingMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the meetinh.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Meeting metric details.
 */
export class DashboardZoomRoomZoomRoomMeetingMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardZoomRoomZoomRoomMeetingMetricsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => DashboardZoomRoomZoomRoomMeetingMetricsCustomKeys)
  customKeys?: DashboardZoomRoomZoomRoomMeetingMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * Email address of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_3rd_party_audio" })
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not the PSTN was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_pstn" })
  hasPstn?: boolean;

  /**
   * Indicates whether or not the recording feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_recording" })
  hasRecording?: boolean;

  /**
   * Indicates whether or not screenshare feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_screen_share" })
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not someone joined the meeting using SIP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_sip" })
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_video" })
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_voip" })
  hasVoip?: boolean;

  /**
   * Host display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The number of Zoom Room participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_room_participants" })
  inRoomParticipants?: number;

  /**
   * Meeting participant count.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * License type of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_type" })
  userType?: string;

  /**
   * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class DashboardZoomRoomZoomRoomPastMeetingsMeetingMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the meetinh.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Meeting metric details.
 */
export class DashboardZoomRoomZoomRoomPastMeetingsMeetingMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardZoomRoomZoomRoomPastMeetingsMeetingMetricsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => DashboardZoomRoomZoomRoomPastMeetingsMeetingMetricsCustomKeys)
  customKeys?: DashboardZoomRoomZoomRoomPastMeetingsMeetingMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * Email address of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_3rd_party_audio" })
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not the PSTN was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_pstn" })
  hasPstn?: boolean;

  /**
   * Indicates whether or not the recording feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_recording" })
  hasRecording?: boolean;

  /**
   * Indicates whether or not screenshare feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_screen_share" })
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not someone joined the meeting using SIP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_sip" })
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_video" })
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_voip" })
  hasVoip?: boolean;

  /**
   * Host display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The number of Zoom Room participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_room_participants" })
  inRoomParticipants?: number;

  /**
   * Meeting participant count.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * License type of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_type" })
  userType?: string;

  /**
   * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * Pagination object.
 */
export class DashboardZoomRoomZoomRoomPastMeetings extends SpeakeasyBase {
  /**
   * Start date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  from?: Date;

  /**
   * Array of meeting objects.
   */
  @SpeakeasyMetadata({
    elemType: DashboardZoomRoomZoomRoomPastMeetingsMeetingMetrics,
  })
  @Expose({ name: "meetings" })
  @Type(() => DashboardZoomRoomZoomRoomPastMeetingsMeetingMetrics)
  meetings?: DashboardZoomRoomZoomRoomPastMeetingsMeetingMetrics[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_count" })
  pageCount?: number;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * End date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  to?: Date;

  /**
   * The number of all records available across pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

/**
 * Zoom room.
 */
export class DashboardZoomRoomZoomRoom extends SpeakeasyBase {
  /**
   * Zoom room email type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_type" })
  accountType?: string;

  /**
   * Zoom calendar name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "calender_name" })
  calenderName?: string;

  /**
   * Zoom room camera.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "camera" })
  camera?: string;

  /**
   * Zoom room device IP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "device_ip" })
  deviceIp?: string;

  /**
   * Zoom room email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Health of the Zoom Room.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "health" })
  health?: string;

  /**
   * Zoom room ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Issues encountered by the Zoom Room.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issues" })
  issues?: string[];

  /**
   * Zoom room last start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_start_time" })
  lastStartTime?: string;

  /**
   * Meeting metric details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "live_meeting" })
  @Type(() => DashboardZoomRoomZoomRoomMeetingMetrics)
  liveMeeting?: DashboardZoomRoomZoomRoomMeetingMetrics;

  /**
   * Zoom room location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Zoom room microphone.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "microphone" })
  microphone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "past_meetings" })
  @Type(() => DashboardZoomRoomZoomRoomPastMeetings)
  pastMeetings?: DashboardZoomRoomZoomRoomPastMeetings;

  /**
   * Zoom room name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "room_name" })
  roomName?: string;

  /**
   * Zoom room speaker.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "speaker" })
  speaker?: string;

  /**
   * Zoom room status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

export class DashboardZoomRoomResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Zoom room returned.<br>
   * Only available for paid accounts that have enabled the Dashboard feature.
   */
  @SpeakeasyMetadata()
  zoomRoom?: DashboardZoomRoomZoomRoom;
}
