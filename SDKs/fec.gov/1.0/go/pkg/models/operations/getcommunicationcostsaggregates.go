// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum - Support or opposition
type GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum string

const (
	GetCommunicationCostsAggregatesSupportOpposeIndicatorEnumS GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum = "S"
	GetCommunicationCostsAggregatesSupportOpposeIndicatorEnumO GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum = "O"
)

func (e GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum) ToPointer() *GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum {
	return &e
}

func (e *GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S":
		fallthrough
	case "O":
		*e = GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum: %v", v)
	}
}

type GetCommunicationCostsAggregatesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// Support or opposition
	SupportOpposeIndicator *GetCommunicationCostsAggregatesSupportOpposeIndicatorEnum `queryParam:"style=form,explode=true,name=support_oppose_indicator"`
}

type GetCommunicationCostsAggregatesResponse struct {
	CommunicationCostByCandidatePage *shared.CommunicationCostByCandidatePage
	ContentType                      string
	StatusCode                       int
	RawResponse                      *http.Response
}
