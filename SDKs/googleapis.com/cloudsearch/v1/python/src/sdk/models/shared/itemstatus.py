"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import processingerror as shared_processingerror
from ..shared import repositoryerror as shared_repositoryerror
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ItemStatusCodeEnum(str, Enum):
    r"""Status code."""
    CODE_UNSPECIFIED = 'CODE_UNSPECIFIED'
    ERROR = 'ERROR'
    MODIFIED = 'MODIFIED'
    NEW_ITEM = 'NEW_ITEM'
    ACCEPTED = 'ACCEPTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemStatus:
    r"""This contains item's status and any errors."""
    
    code: Optional[ItemStatusCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Status code."""  
    processing_errors: Optional[list[shared_processingerror.ProcessingError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingErrors'), 'exclude': lambda f: f is None }})
    r"""Error details in case the item is in ERROR state."""  
    repository_errors: Optional[list[shared_repositoryerror.RepositoryError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryErrors'), 'exclude': lambda f: f is None }})
    r"""Repository error reported by connector."""  
    