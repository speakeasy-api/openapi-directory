"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import mediastorageconfigurationstatus_enum as shared_mediastorageconfigurationstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMediaStorageConfigurationRequestBodyMediaStorageConfiguration:
    r"""A structure that encapsulates, or contains, the media storage configuration properties."""
    
    status: Optional[shared_mediastorageconfigurationstatus_enum.MediaStorageConfigurationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    stream_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamARN'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMediaStorageConfigurationRequestBody:
    
    channel_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelARN') }})
    r"""The Amazon Resource Name (ARN) of the channel."""  
    media_storage_configuration: UpdateMediaStorageConfigurationRequestBodyMediaStorageConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MediaStorageConfiguration') }})
    r"""A structure that encapsulates, or contains, the media storage configuration properties."""  
    

@dataclasses.dataclass
class UpdateMediaStorageConfigurationRequest:
    
    request_body: UpdateMediaStorageConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateMediaStorageConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    client_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientLimitExceededException"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    no_data_retention_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NoDataRetentionException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_media_storage_configuration_output: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    