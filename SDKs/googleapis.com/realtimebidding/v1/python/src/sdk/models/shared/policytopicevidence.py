"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destinationnotcrawlableevidence as shared_destinationnotcrawlableevidence
from ..shared import destinationnotworkingevidence as shared_destinationnotworkingevidence
from ..shared import destinationurlevidence as shared_destinationurlevidence
from ..shared import domaincallevidence as shared_domaincallevidence
from ..shared import downloadsizeevidence as shared_downloadsizeevidence
from ..shared import httpcallevidence as shared_httpcallevidence
from ..shared import httpcookieevidence as shared_httpcookieevidence
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyTopicEvidence:
    r"""Evidence associated with a policy topic entry."""
    
    destination_not_crawlable: Optional[shared_destinationnotcrawlableevidence.DestinationNotCrawlableEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationNotCrawlable'), 'exclude': lambda f: f is None }})
    r"""Evidence that the creative's destination URL was not crawlable by Google."""  
    destination_not_working: Optional[shared_destinationnotworkingevidence.DestinationNotWorkingEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationNotWorking'), 'exclude': lambda f: f is None }})
    r"""Evidence of the creative's destination URL not functioning properly or having been incorrectly set up."""  
    destination_url: Optional[shared_destinationurlevidence.DestinationURLEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationUrl'), 'exclude': lambda f: f is None }})
    r"""The full landing page URL of the destination."""  
    domain_call: Optional[shared_domaincallevidence.DomainCallEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainCall'), 'exclude': lambda f: f is None }})
    r"""Number of HTTP calls made by a creative, broken down by domain."""  
    download_size: Optional[shared_downloadsizeevidence.DownloadSizeEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadSize'), 'exclude': lambda f: f is None }})
    r"""Total download size and URL-level download size breakdown for resources in a creative."""  
    http_call: Optional[shared_httpcallevidence.HTTPCallEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpCall'), 'exclude': lambda f: f is None }})
    r"""HTTP calls made by a creative that resulted in policy violations."""  
    http_cookie: Optional[shared_httpcookieevidence.HTTPCookieEvidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpCookie'), 'exclude': lambda f: f is None }})
    r"""Evidence for HTTP cookie-related policy violations."""  
    