"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlechromemanagementv1telemetrydeviceinfo as shared_googlechromemanagementv1telemetrydeviceinfo
from ..shared import googlechromemanagementv1telemetryhttpslatencychangeevent as shared_googlechromemanagementv1telemetryhttpslatencychangeevent
from ..shared import googlechromemanagementv1telemetryusbperipheralsevent as shared_googlechromemanagementv1telemetryusbperipheralsevent
from ..shared import googlechromemanagementv1telemetryuserinfo as shared_googlechromemanagementv1telemetryuserinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GoogleChromeManagementV1TelemetryEventEventTypeEnum(str, Enum):
    r"""The event type of the current event."""
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    AUDIO_SEVERE_UNDERRUN = 'AUDIO_SEVERE_UNDERRUN'
    USB_ADDED = 'USB_ADDED'
    USB_REMOVED = 'USB_REMOVED'
    NETWORK_HTTPS_LATENCY_CHANGE = 'NETWORK_HTTPS_LATENCY_CHANGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1TelemetryEvent:
    r"""Telemetry data reported by a managed device."""
    
    audio_severe_underrun_event: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioSevereUnderrunEvent'), 'exclude': lambda f: f is None }})
    r"""`TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds."""  
    device: Optional[shared_googlechromemanagementv1telemetrydeviceinfo.GoogleChromeManagementV1TelemetryDeviceInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""Information about a device associated with telemetry data."""  
    event_type: Optional[GoogleChromeManagementV1TelemetryEventEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""The event type of the current event."""  
    https_latency_change_event: Optional[shared_googlechromemanagementv1telemetryhttpslatencychangeevent.GoogleChromeManagementV1TelemetryHTTPSLatencyChangeEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpsLatencyChangeEvent'), 'exclude': lambda f: f is None }})
    r"""Https latency routine is run periodically and `TelemetryHttpsLatencyChangeEvent` is triggered if a latency problem was detected or if the device has recovered from a latency problem.."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the event."""  
    report_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp that represents when the event was reported."""  
    usb_peripherals_event: Optional[shared_googlechromemanagementv1telemetryusbperipheralsevent.GoogleChromeManagementV1TelemetryUsbPeripheralsEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usbPeripheralsEvent'), 'exclude': lambda f: f is None }})
    r"""`TelemetryUsbPeripheralsEvent` is triggered USB devices are either added or removed."""  
    user: Optional[shared_googlechromemanagementv1telemetryuserinfo.GoogleChromeManagementV1TelemetryUserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Information about a user associated with telemetry data."""  
    