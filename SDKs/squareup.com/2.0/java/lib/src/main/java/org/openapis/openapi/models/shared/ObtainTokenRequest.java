/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ObtainTokenRequest - An object containing the fields to POST for the request.
 * 
 * See the corresponding object definition for field details.
 */
public class ObtainTokenRequest {
    /**
     * The Square-issued ID of your application, available from the
     * [developer dashboard](https://developer.squareup.com/apps).
     */
    @JsonProperty("client_id")
    public String clientId;

    public ObtainTokenRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The Square-issued application secret for your application, available
     * from the [developer dashboard](https://developer.squareup.com/apps).
     */
    @JsonProperty("client_secret")
    public String clientSecret;

    public ObtainTokenRequest withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * The authorization code to exchange.
     * This is required if `grant_type` is set to `authorization_code`, to indicate that
     * the application wants to exchange an authorization code for an OAuth access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public ObtainTokenRequest withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Specifies the method to request an OAuth access token.
     * Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
     */
    @JsonProperty("grant_type")
    public String grantType;

    public ObtainTokenRequest withGrantType(String grantType) {
        this.grantType = grantType;
        return this;
    }
    
    /**
     * Legacy OAuth access token obtained using a Connect API version prior
     * to 2019-03-13. This parameter is required if `grant_type` is set to
     * `migration_token` to indicate that the application wants to get a replacement
     * OAuth access token. The response also returns a refresh token.
     * For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migration_token")
    public String migrationToken;

    public ObtainTokenRequest withMigrationToken(String migrationToken) {
        this.migrationToken = migrationToken;
        return this;
    }
    
    /**
     * The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uri")
    public String redirectUri;

    public ObtainTokenRequest withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }
    
    /**
     * A valid refresh token for generating a new OAuth access token.
     * A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    public String refreshToken;

    public ObtainTokenRequest withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
    /**
     * A JSON list of strings representing the permissions the application is requesting.
     * For example: "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`"
     * The access token returned in the response is granted the permissions
     * that comprise the intersection between the requested list of permissions, and those
     * that belong to the provided refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;

    public ObtainTokenRequest withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * A boolean indicating a request for a short-lived access token.
     * The short-lived access token returned in the response will expire in 24 hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("short_lived")
    public Boolean shortLived;

    public ObtainTokenRequest withShortLived(Boolean shortLived) {
        this.shortLived = shortLived;
        return this;
    }
    
    public ObtainTokenRequest(@JsonProperty("client_id") String clientId, @JsonProperty("client_secret") String clientSecret, @JsonProperty("grant_type") String grantType) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.grantType = grantType;
  }
}
