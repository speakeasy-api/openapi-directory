"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2vpnconnectionoptionsdetails as shared_awsec2vpnconnectionoptionsdetails
from ..shared import awsec2vpnconnectionroutesdetails as shared_awsec2vpnconnectionroutesdetails
from ..shared import awsec2vpnconnectionvgwtelemetrydetails as shared_awsec2vpnconnectionvgwtelemetrydetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2VpnConnectionDetails:
    r"""Details about an Amazon EC2 VPN connection."""
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Category'), 'exclude': lambda f: f is None }})  
    customer_gateway_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerGatewayConfiguration'), 'exclude': lambda f: f is None }})  
    customer_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerGatewayId'), 'exclude': lambda f: f is None }})  
    options: Optional[shared_awsec2vpnconnectionoptionsdetails.AwsEc2VpnConnectionOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Options'), 'exclude': lambda f: f is None }})  
    routes: Optional[list[shared_awsec2vpnconnectionroutesdetails.AwsEc2VpnConnectionRoutesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Routes'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    transit_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransitGatewayId'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    vgw_telemetry: Optional[list[shared_awsec2vpnconnectionvgwtelemetrydetails.AwsEc2VpnConnectionVgwTelemetryDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VgwTelemetry'), 'exclude': lambda f: f is None }})  
    vpn_connection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpnConnectionId'), 'exclude': lambda f: f is None }})  
    vpn_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpnGatewayId'), 'exclude': lambda f: f is None }})  
    