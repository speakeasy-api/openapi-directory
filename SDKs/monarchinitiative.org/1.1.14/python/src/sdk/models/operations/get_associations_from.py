"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import associationresults as shared_associationresults
from typing import Optional


@dataclasses.dataclass
class GetAssociationsFromRequest:
    
    subject: str = dataclasses.field(metadata={'path_param': { 'field_name': 'subject', 'style': 'simple', 'explode': False }})
    r"""Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default)"""  
    evidence: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'evidence', 'style': 'form', 'explode': True }})
    r"""Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2"""  
    exclude_automatic_assertions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_automatic_assertions', 'style': 'form', 'explode': True }})
    r"""If true, excludes associations that involve IEAs (ECO:0000501)"""  
    object_taxon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'object_taxon', 'style': 'form', 'explode': True }})
    r"""Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)"""  
    relation: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relation', 'style': 'form', 'explode': True }})
    r"""Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc."""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""number of rows"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""beginning row"""  
    unselect_evidence: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unselect_evidence', 'style': 'form', 'explode': True }})
    r"""If true, excludes evidence objects in response"""  
    use_compact_associations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'use_compact_associations', 'style': 'form', 'explode': True }})
    r"""If true, returns results in compact associations format"""  
    

@dataclasses.dataclass
class GetAssociationsFromResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    association_results: Optional[list[shared_associationresults.AssociationResults]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    