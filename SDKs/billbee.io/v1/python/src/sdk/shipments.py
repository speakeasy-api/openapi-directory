"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Shipments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def shipment_get_list(self, request: operations.ShipmentGetListRequest) -> operations.ShipmentGetListResponse:
        r"""Get a list of all shipments optionally filtered by date. All parameters are optional."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipments'
        
        query_params = utils.get_query_params(operations.ShipmentGetListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentGetListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment])
                res.rechnungsdruck_web_app_controllers_api_api_paged_result_system_collections_generic_list_billbee_interfaces_billbee_api_model_shipment = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment])
                res.rechnungsdruck_web_app_controllers_api_api_paged_result_system_collections_generic_list_billbee_interfaces_billbee_api_model_shipment = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def shipment_get_ping(self) -> operations.ShipmentGetPingResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/ping'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentGetPingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_ping_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_ping_200_text_json_object = out

        return res

    def shipment_get_shipping_carrier(self) -> operations.ShipmentGetShippingCarrierResponse:
        r"""Queries the currently available shipping carriers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shippingcarriers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentGetShippingCarrierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_shipping_carrier_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_shipping_carrier_200_text_json_object = out

        return res

    def shipment_get_shippingproviders(self) -> operations.ShipmentGetShippingprovidersResponse:
        r"""Query all defined shipping providers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shippingproviders'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentGetShippingprovidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_shippingproviders_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_get_shippingproviders_200_text_json_object = out

        return res

    def shipment_post_shipment_form(self, request: shared.BillbeeInterfacesBillbeeAPIModelCreateShipmentAPIModelInput) -> operations.ShipmentPostShipmentFormResponse:
        r"""Creates a new shipment with the selected Shippingprovider"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentPostShipmentFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_form_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_form_200_text_json_object = out

        return res

    def shipment_post_shipment_json(self, request: shared.BillbeeInterfacesBillbeeAPIModelCreateShipmentAPIModelInput) -> operations.ShipmentPostShipmentJSONResponse:
        r"""Creates a new shipment with the selected Shippingprovider"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentPostShipmentJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_json_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_json_200_text_json_object = out

        return res

    def shipment_post_shipment_raw(self, request: bytes) -> operations.ShipmentPostShipmentRawResponse:
        r"""Creates a new shipment with the selected Shippingprovider"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentPostShipmentRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_raw_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.shipment_post_shipment_raw_200_text_json_object = out

        return res

    def shipment_ship_with_label_form(self, request: shared.RechnungsdruckWebAppControllersAPIShipmentWithLabel) -> operations.ShipmentShipWithLabelFormResponse:
        r"""Creates a shipment for an order in billbee"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipwithlabel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentShipWithLabelFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def shipment_ship_with_label_json(self, request: shared.RechnungsdruckWebAppControllersAPIShipmentWithLabel) -> operations.ShipmentShipWithLabelJSONResponse:
        r"""Creates a shipment for an order in billbee"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipwithlabel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentShipWithLabelJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def shipment_ship_with_label_raw(self, request: bytes) -> operations.ShipmentShipWithLabelRawResponse:
        r"""Creates a shipment for an order in billbee"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/shipment/shipwithlabel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShipmentShipWithLabelRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIAPIResultRechnungsdruckWebAppControllersAPIShipmentWithLabelResult])
                res.rechnungsdruck_web_app_controllers_api_api_result_rechnungsdruck_web_app_controllers_api_shipment_with_label_result = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    