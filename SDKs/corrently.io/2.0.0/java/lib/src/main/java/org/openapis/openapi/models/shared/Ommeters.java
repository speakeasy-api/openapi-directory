/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Ommeters {
    /**
     * Factor imposed on metered current by a transducer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentScalingFactor")
    public Long currentScalingFactor;

    public Ommeters withCurrentScalingFactor(Long currentScalingFactor) {
        this.currentScalingFactor = currentScalingFactor;
        return this;
    }
    
    /**
     * Metering load profile type associated with the meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadProfileType")
    public String loadProfileType;

    public Ommeters withLoadProfileType(String loadProfileType) {
        this.loadProfileType = loadProfileType;
        return this;
    }
    
    /**
     * Basic address information for geo coding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public Ommeters withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * DLMS manufacturerId
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturerId")
    public String manufacturerId;

    public Ommeters withManufacturerId(String manufacturerId) {
        this.manufacturerId = manufacturerId;
        return this;
    }
    
    /**
     * Physical quantity being measured by the meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measurementType")
    public String measurementType;

    public Ommeters withMeasurementType(String measurementType) {
        this.measurementType = measurementType;
        return this;
    }
    
    /**
     * Statistical metadata for this household
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    public String meta;

    public Ommeters withMeta(String meta) {
        this.meta = meta;
        return this;
    }
    
    /**
     * identifier to be used in other methods like readings or activities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meterId")
    public String meterId;

    public Ommeters withMeterId(String meterId) {
        this.meterId = meterId;
        return this;
    }
    
    /**
     * Factor imposed on metered current AND voltage by a transducer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scalingFactor")
    public Long scalingFactor;

    public Ommeters withScalingFactor(Long scalingFactor) {
        this.scalingFactor = scalingFactor;
        return this;
    }
    
    /**
     * Device type of the meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Ommeters withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Factor imposed on metered voltage by a transducer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voltageScalingFactor")
    public Long voltageScalingFactor;

    public Ommeters withVoltageScalingFactor(Long voltageScalingFactor) {
        this.voltageScalingFactor = voltageScalingFactor;
        return this;
    }
    
    public Ommeters(){}
}
