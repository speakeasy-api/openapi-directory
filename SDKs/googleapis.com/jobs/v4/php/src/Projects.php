<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateResponse
     */
	public function jobsProjectsTenantsClientEventsCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/clientEvents', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientEvent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsClientEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new company entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateResponse
     */
	public function jobsProjectsTenantsCompaniesCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/companies', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "companyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->company = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Company', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all companies associated with the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListResponse
     */
	public function jobsProjectsTenantsCompaniesList(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/companies', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompaniesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompaniesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCompaniesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryResponse
     */
	public function jobsProjectsTenantsCompleteQuery(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{tenant}:completeQuery', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCompleteQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new tenant entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateResponse
     */
	public function jobsProjectsTenantsCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/tenants', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tenant", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tenant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins executing a batch create jobs operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateResponse
     */
	public function jobsProjectsTenantsJobsBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs:batchCreate', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchCreateJobsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins executing a batch delete jobs operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteResponse
     */
	public function jobsProjectsTenantsJobsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs:batchDelete', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeleteJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins executing a batch update jobs operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateResponse
     */
	public function jobsProjectsTenantsJobsBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchUpdateJobsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateResponse
     */
	public function jobsProjectsTenantsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteResponse
     */
	public function jobsProjectsTenantsJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetResponse
     */
	public function jobsProjectsTenantsJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists jobs by filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListResponse
     */
	public function jobsProjectsTenantsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchResponse
     */
	public function jobsProjectsTenantsJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchResponse
     */
	public function jobsProjectsTenantsJobsSearch(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs:search', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), it has different algorithmic adjustments that are designed to specifically target passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertResponse
     */
	public function jobsProjectsTenantsJobsSearchForAlert(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/jobs:searchForAlert', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsJobsSearchForAlertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all tenants associated with the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListResponse
     */
	public function jobsProjectsTenantsList(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/tenants', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsTenantsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTenantsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTenantsResponse', 'json');
            }
        }

        return $response;
    }
}