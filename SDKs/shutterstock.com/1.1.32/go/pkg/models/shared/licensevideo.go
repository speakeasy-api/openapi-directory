// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LicenseVideoSizeEnum - Size of the video being licensed
type LicenseVideoSizeEnum string

const (
	LicenseVideoSizeEnumWeb   LicenseVideoSizeEnum = "web"
	LicenseVideoSizeEnumSd    LicenseVideoSizeEnum = "sd"
	LicenseVideoSizeEnumHd    LicenseVideoSizeEnum = "hd"
	LicenseVideoSizeEnumFourk LicenseVideoSizeEnum = "4k"
)

func (e *LicenseVideoSizeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "web":
		fallthrough
	case "sd":
		fallthrough
	case "hd":
		fallthrough
	case "4k":
		*e = LicenseVideoSizeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseVideoSizeEnum: %s", s)
	}
}

// LicenseVideo - Data required to license a video
type LicenseVideo struct {
	// Cookie object
	AuthCookie *Cookie `json:"auth_cookie,omitempty"`
	// Whether or not this item is editorial content
	EditorialAcknowledgement *bool `json:"editorial_acknowledgement,omitempty"`
	// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Retail price amount as a floating-point number in the transaction currency, such as 12.34; only for rev-share partners
	Price *float64 `json:"price,omitempty"`
	// ID of the search that led to this licensing event
	SearchID *string `json:"search_id,omitempty"`
	// (Deprecated)
	ShowModal *bool `json:"show_modal,omitempty"`
	// Size of the video being licensed
	Size *LicenseVideoSizeEnum `json:"size,omitempty"`
	// ID of the subscription used for this license
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// ID of the video being licensed
	VideoID string `json:"video_id"`
}
