/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CertificateSummary - Summary of the certificate.
 */
public class CertificateSummary {
    /**
     * ID of the certificate.
     */
    @JsonProperty("certId")
    public String certId;

    public CertificateSummary withCertId(String certId) {
        this.certId = certId;
        return this;
    }
    
    /**
     * User-friendly description for the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CertificateSummary withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The expiration date for the certificate.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration")
    public OffsetDateTime expiration;

    public CertificateSummary withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.
     */
    @JsonProperty("hasKey")
    public Boolean hasKey;

    public CertificateSummary withHasKey(Boolean hasKey) {
        this.hasKey = hasKey;
        return this;
    }
    
    /**
     * Display name for the certificate.
     */
    @JsonProperty("name")
    public String name;

    public CertificateSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The certificates, in PEM format.
     */
    @JsonProperty("pemFile")
    public String pemFile;

    public CertificateSummary withPemFile(String pemFile) {
        this.pemFile = pemFile;
        return this;
    }
    
    /**
     * A list of components using the certificate.
     */
    @JsonProperty("usedBy")
    public String usedBy;

    public CertificateSummary withUsedBy(String usedBy) {
        this.usedBy = usedBy;
        return this;
    }
    
    public CertificateSummary(@JsonProperty("certId") String certId, @JsonProperty("expiration") OffsetDateTime expiration, @JsonProperty("hasKey") Boolean hasKey, @JsonProperty("name") String name, @JsonProperty("pemFile") String pemFile, @JsonProperty("usedBy") String usedBy) {
        this.certId = certId;
        this.expiration = expiration;
        this.hasKey = hasKey;
        this.name = name;
        this.pemFile = pemFile;
        this.usedBy = usedBy;
  }
}
