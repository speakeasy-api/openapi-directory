"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceTables = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var PriceTables = /** @class */ (function () {
    function PriceTables(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Get rules for a price table
     *
     * @remarks
     * This method will retrieve the rules from a specific Price Table.
     *
     * ## Response body example
     *
     * ```json
     * {
     *     "tradePolicyId": "b2c",
     *     "rules": [{
     *         "id": 0,
     *         "context": {
     *             "categories": {},
     *             "brands": {
     *                 "2000009": "Whiskas"
     *             },
     *             "stockStatuses": null,
     *             "internalCategories": null,
     *             "markupRange": null,
     *             "dateRange": null
     *         },
     *         "percentualModifier": 15
     *     }]
     * }
     * ```
     */
    PriceTables.prototype.getrulesforapricetable = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetrulesforapricetableRequest(req);
        }
        var baseURL = operations.GetrulesforapricetableServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/pricing/pipeline/catalog/{priceTableId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetrulesforapricetableResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getrulesforapricetable200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.Getrulesforapricetable200ApplicationJSON);
                    }
                    break;
                case [401, 403, 429].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * List price tables
     *
     * @remarks
     * This method will list all price tables.
     *
     * ## Response body example
     *
     * ```json
     * [
     *     "1",
     *     "2",
     *     "3",
     *     "b2c",
     *     "b2b",
     *     "gold"
     * ]
     * ```
     */
    PriceTables.prototype.listpricetables = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListpricetablesRequest(req);
        }
        var baseURL = operations.ListpricetablesServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/pricing/tables";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListpricetablesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listpricetables200ApplicationJSONStrings = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get all price tables and their rules
     *
     * @remarks
     * This method will retrieve all price tables and their rules.
     *
     * ## Response body example
     *
     * ```json
     * [
     *     {
     *         "tradePolicyId": "2",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {},
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 20
     *             }
     *         ]
     *     },
     *     {
     *         "tradePolicyId": "b2c",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {
     *                         "2000009": "Whiskas"
     *                     },
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 15
     *             }
     *         ]
     *     }
     * ]
     * ```
     */
    PriceTables.prototype.getallpricetablesandrules = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetallpricetablesandrulesRequest(req);
        }
        var baseURL = operations.GetallpricetablesandrulesServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/pricing/pipeline/catalog";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetallpricetablesandrulesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getallpricetablesandrules200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.getallpricetablesandrules200ApplicationJSONObjects =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.Getallpricetablesandrules200ApplicationJSON, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update rules for a price table
     *
     * @remarks
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
     *
     * ## Request body example
     *
     * ```json
     * {
     *     "rules": [
     *           {
     *                "id": 1,
     *                "context": {
     *                     "categories": {
     *                          "Category ID": "1",
     *                          "Category Name": "Alimentação"
     *                     },
     *                     "brands": {
     *                          "Brand ID": "2000002",
     *                          "Brand Name": "Whiskas"
     *                     },
     *                     "markupRange": {
     *                          "from": 0,
     *                          "to": 200
     *                     },
     *                     "dateRange": {
     *                          "from": "2022-01-23T19:00:00.000Z",
     *                          "to": "2023-10-26T00:00:00.000Z"
     *                     }
     *                },
     *                "percentualModifier": 0
     *           }
     *     ]
     * }
     * ```
     */
    PriceTables.prototype.putPricingPipelineCatalogPriceTableId = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutPricingPipelineCatalogPriceTableIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/pipeline/catalog/{priceTableId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PutPricingPipelineCatalogPriceTableIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    break;
            }
            return res;
        });
    };
    return PriceTables;
}());
exports.PriceTables = PriceTables;
