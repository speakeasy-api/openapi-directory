"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appdevexperiencefeaturestate as shared_appdevexperiencefeaturestate
from ..shared import configmanagementmembershipstate as shared_configmanagementmembershipstate
from ..shared import featurestate as shared_featurestate
from ..shared import identityservicemembershipstate as shared_identityservicemembershipstate
from ..shared import servicemeshmembershipstate as shared_servicemeshmembershipstate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MembershipFeatureState:
    r"""MembershipFeatureState contains Feature status information for a single Membership."""
    
    appdevexperience: Optional[shared_appdevexperiencefeaturestate.AppDevExperienceFeatureState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appdevexperience'), 'exclude': lambda f: f is None }})
    r"""State for App Dev Exp Feature."""  
    configmanagement: Optional[shared_configmanagementmembershipstate.ConfigManagementMembershipState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configmanagement'), 'exclude': lambda f: f is None }})
    r"""**Anthos Config Management**: State for a single cluster."""  
    fleetobservability: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleetobservability'), 'exclude': lambda f: f is None }})
    r"""**FleetObservability**: An empty state left as an example membership-specific Feature state."""  
    identityservice: Optional[shared_identityservicemembershipstate.IdentityServiceMembershipState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityservice'), 'exclude': lambda f: f is None }})
    r"""**Anthos Identity Service**: State for a single Membership."""  
    servicemesh: Optional[shared_servicemeshmembershipstate.ServiceMeshMembershipState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicemesh'), 'exclude': lambda f: f is None }})
    r"""**Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller."""  
    state: Optional[shared_featurestate.FeatureState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context."""  
    