"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConstraintViolationConstraintTypeEnum(str, Enum):
    MUST_BE_FALSE = 'MUST_BE_FALSE'
    MUST_BE_TRUE = 'MUST_BE_TRUE'
    MUST_BE_LESS_THAN = 'MUST_BE_LESS_THAN'
    MUST_BE_GREATER_THAN = 'MUST_BE_GREATER_THAN'
    DIGIT_OUT_OF_BOUNDS = 'DIGIT_OUT_OF_BOUNDS'
    DATE_MUST_BE_IN_THE_FUTURE = 'DATE_MUST_BE_IN_THE_FUTURE'
    MUST_BE_LESS_OR_EQUAL_THAN = 'MUST_BE_LESS_OR_EQUAL_THAN'
    MUST_BE_GREATER_OR_EQUAL_TO = 'MUST_BE_GREATER_OR_EQUAL_TO'
    MUST_NOT_BE_NULL = 'MUST_NOT_BE_NULL'
    MUST_BE_NULL = 'MUST_BE_NULL'
    DATE_MUST_BE_IN_THE_PAST = 'DATE_MUST_BE_IN_THE_PAST'
    MUST_MATCH_PATTERN = 'MUST_MATCH_PATTERN'
    INVALID_SIZE = 'INVALID_SIZE'
    INVALID_EMAIL = 'INVALID_EMAIL'
    MUST_NOT_BE_EMPTY = 'MUST_NOT_BE_EMPTY'
    INVALID_RANGE = 'INVALID_RANGE'
    UNKNOWN = 'UNKNOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConstraintViolation:
    
    constraint_type: Optional[ConstraintViolationConstraintTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraintType'), 'exclude': lambda f: f is None }})  
    developer_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('developerMessage'), 'exclude': lambda f: f is None }})  
    expected: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expected'), 'exclude': lambda f: f is None }})  
    property_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyName'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    