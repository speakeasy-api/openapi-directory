/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MeetingsGroupListMeetings {
    /**
     * Meeting description. The length of agenda gets truncated to 250 characters when you list all meetings for a user. To view the complete agenda of a meeting, retrieve details for a single meeting [here](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agenda")
    public String agenda;
    public MeetingsGroupListMeetings withAgenda(String agenda) {
        this.agenda = agenda;
        return this;
    }
    
    /**
     * Time of creation. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public MeetingsGroupListMeetings withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public MeetingsGroupListMeetings withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ID of the user who is set as the host of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_id")
    public String hostId;
    public MeetingsGroupListMeetings withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Meeting ID - also known as the meeting number in long (int64) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public MeetingsGroupListMeetings withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL using which participants can join a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_url")
    public String joinUrl;
    public MeetingsGroupListMeetings withJoinUrl(String joinUrl) {
        this.joinUrl = joinUrl;
        return this;
    }
    
    /**
     * [Personal meeting ID](https://support.zoom.us/hc/en-us/articles/201362843-What-is-Personal-Meeting-ID-PMI-and-Personal-Link-). This field is only returned if PMI was used to schedule the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pmi")
    public String pmi;
    public MeetingsGroupListMeetings withPmi(String pmi) {
        this.pmi = pmi;
        return this;
    }
    
    /**
     * Meeting start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public MeetingsGroupListMeetings withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Timezone to format the meeting start time. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public MeetingsGroupListMeetings withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public MeetingsGroupListMeetings withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Meeting Types:&lt;br&gt;`1` - Instant meeting.&lt;br&gt;`2` - Scheduled meeting.&lt;br&gt;`3` - Recurring meeting with no fixed time.&lt;br&gt;`8` - Recurring meeting with fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public MeetingsGroupListMeetingsTypeEnum type;
    public MeetingsGroupListMeetings withType(MeetingsGroupListMeetingsTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Unique Meeting ID. Each meeting instance will generate its own Meeting UUID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public MeetingsGroupListMeetings withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
