<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PricesLegacyV1 
{
	
	public const DELETEBYSKU_ID_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];
	
	public const GETALLPAGED_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];
	
	public const PRICEBYCONTEXT_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];
	
	public const PRICEBYSKU_ID_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];
	
	public const PRICEBYSKU_IDANDTRADE_POLICY_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];
	
	public const SAVEPRICE_SERVERS = [
		'https://rnb.{environment}.com.br/api/pricing/pvt',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Price by SKU Id
     * 
     * Delete all prices from an SKU. 
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
     * 
     * > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdResponse
     */
	public function deletebyskuId(
        \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdResponse
    {
        $baseUrl = PricesLegacyV1::DELETEBYSKU_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet/{skuId}', \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletebyskuIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get all paged prices
     * 
     * Get all paged prices. 
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
     * 
     * > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetallpagedRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\GetallpagedResponse
     */
	public function getallpaged(
        \OpenAPI\OpenAPI\Models\Operations\GetallpagedRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\GetallpagedResponse
    {
        $baseUrl = PricesLegacyV1::GETALLPAGED_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet/all/{page}/{pageSize}', \OpenAPI\OpenAPI\Models\Operations\GetallpagedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetallpagedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetallpagedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Price by context
     * 
     * Get price by context. 
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
     * 
     * > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PricebycontextRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PricebycontextResponse
     */
	public function pricebycontext(
        \OpenAPI\OpenAPI\Models\Operations\PricebycontextRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PricebycontextResponse
    {
        $baseUrl = PricesLegacyV1::PRICEBYCONTEXT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet/context');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pricebycontextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PricebycontextRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PricebycontextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Price by SKU ID
     * 
     * Price by SKU ID              
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://developers.vtex.com/docs/api-reference/pricing-api)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdResponse
     */
	public function pricebyskuId(
        \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdResponse
    {
        $baseUrl = PricesLegacyV1::PRICEBYSKU_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet/{skuId}', \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PricebyskuIdRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Price by SKU ID and Trade Policy
     * 
     * Retrieve price by SKU ID and Trade Policy. 
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
     * 
     * > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyResponse
     */
	public function pricebyskuIdandtradePolicy(
        \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyResponse
    {
        $baseUrl = PricesLegacyV1::PRICEBYSKU_IDANDTRADE_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet/{skuId}/{tradePolicy}', \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PricebyskuIdandtradePolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Save Price
     * 
     * Save price. 
     * > If your account is using Pricing v2, you should avoid using these routes. Please refer directly to the [Pricing v2 API](https://documenter.getpostman.com/view/101975/vtex-pricing-api/6YsWxKT) 
     * 
     * > If you are still using Pricing v1, please [check if your store is able to migrate to take advantage of many more features](https://help.vtex.com/en/faq/how-to-migrate-a-store-to-pricing-v2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SavepriceRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\SavepriceResponse
     */
	public function saveprice(
        \OpenAPI\OpenAPI\Models\Operations\SavepriceRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\SavepriceResponse
    {
        $baseUrl = PricesLegacyV1::SAVEPRICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/price-sheet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SavepriceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SavepriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}