<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Telnet 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Changes the connection's current logon.
     * 
     * Logon change allows (hidden) commands for a different access mode to run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonResponse
     */
	public function protocolTelnetConnectionLogon(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionLogonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetConnectionLogon200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Executes the command asynchronously .
     * 
     * Equivalent of the command typed in by the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestResponse
     */
	public function protocolTelnetConnectionRequest(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetConnectionRequest200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Triggers the asynchronous signal event with the specified signal name
     * 
     * Signal name is either connect or idle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalResponse
     */
	public function protocolTelnetConnectionSignal(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetConnectionSignalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetConnectionSignal200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET argument structure
     * 
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsResponse
     */
	public function protocolTelnetGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET configuration
     * 
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigResponse
     */
	public function protocolTelnetGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTELNET = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTELNET', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsResponse
     */
	public function protocolTelnetGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the TELNET statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatsHdrResponse
     */
	public function protocolTelnetGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/telnet/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceResponse
     */
	public function protocolTelnetGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTELNET = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTELNET', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Disable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableResponse
     */
	public function protocolTelnetIpaliasDisable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTelnetIpaliasDisable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Enable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableResponse
     */
	public function protocolTelnetIpaliasEnable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTelnetIpaliasEnable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Check individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledResponse
     */
	public function protocolTelnetIpaliasIsenabled(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasIsenabledResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTelnetIpaliasIsenabled200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List all IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListResponse
     */
	public function protocolTelnetIpaliasList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetIpaliasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipAliases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IPAlias>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET connections
     * 
     * IDs of all connected connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsResponse
     */
	public function protocolTelnetServerGetConnections(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetServerGetConnections200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET keymap file name
     * 
     * Keymap file name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapResponse
     */
	public function protocolTelnetServerGetKeymap(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetKeymapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetServerGetKeymap200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET rules db file name
     * 
     * Rules db file name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbResponse
     */
	public function protocolTelnetServerGetRulesdb(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetRulesdbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetServerGetRulesdb200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET server state
     * 
     * Return 1 means accepting connections, 0 not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateResponse
     */
	public function protocolTelnetServerGetState(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetServerGetState200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET user db file name
     * 
     * User db file name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbResponse
     */
	public function protocolTelnetServerGetUserdb(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUserdbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTelnetServerGetUserdb200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TELNET users
     * 
     * List of users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersResponse
     */
	public function protocolTelnetServerGetUsers(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetServerGetUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->telnetUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TelnetUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TELNET configuration
     * 
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigResponse
     */
	public function protocolTelnetSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTelnetSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TELNET traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceResponse
     */
	public function protocolTelnetSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTelnetSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTelnetSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}