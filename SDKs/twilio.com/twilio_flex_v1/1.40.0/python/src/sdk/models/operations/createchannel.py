"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flex_v1_channel as shared_flex_v1_channel
from typing import Optional

CREATE_CHANNEL_SERVERS = [
	"https://flex-api.twilio.com",
]


@dataclasses.dataclass
class CreateChannelSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateChannelCreateChannelRequest:
    
    chat_friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'ChatFriendlyName' }})
    r"""The chat channel's friendly name."""  
    chat_user_friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'ChatUserFriendlyName' }})
    r"""The chat participant's friendly name."""  
    flex_flow_sid: str = dataclasses.field(metadata={'form': { 'field_name': 'FlexFlowSid' }})
    r"""The SID of the Flex Flow."""  
    identity: str = dataclasses.field(metadata={'form': { 'field_name': 'Identity' }})
    r"""The `identity` value that uniquely identifies the new resource's chat User."""  
    chat_unique_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ChatUniqueName' }})
    r"""The chat channel's unique name."""  
    long_lived: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'LongLived' }})
    r"""Whether to create the channel as long-lived."""  
    pre_engagement_data: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PreEngagementData' }})
    r"""The pre-engagement data."""  
    target: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Target' }})
    r"""The Target Contact Identity, for example the phone number of an SMS."""  
    task_attributes: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TaskAttributes' }})
    r"""The Task attributes to be added for the TaskRouter Task."""  
    task_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TaskSid' }})
    r"""The SID of the TaskRouter Task. Only valid when integration type is `task`. `null` for integration types `studio` & `external`"""  
    

@dataclasses.dataclass
class CreateChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flex_v1_channel: Optional[shared_flex_v1_channel.FlexV1Channel] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    