<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PresetsUser - The owner of the preset.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PresetsUser
{
    /**
     * The user's account type:
     * 
     * 
     * Option descriptions:
     *  * `basic` - The user has a Vimeo Basic subscription.
     *  * `business` - The user has a Vimeo Business subscription.
     *  * `live_business` - The user has a Vimeo Business Live subscription.
     *  * `live_premium` - The user has a Vimeo Premium subscription.
     *  * `live_pro` - The user has a Vimeo PRO Live subscription.
     *  * `plus` - The user has a Vimeo Plus subscription.
     *  * `pro` - The user has a Vimeo Pro subscription.
     *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     *  * `producer` - The user has a Vimeo Producer subscription.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PresetsUserAccountEnum $account
     */
	#[\JMS\Serializer\Annotation\SerializedName('account')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PresetsUserAccountEnum>')]
    public PresetsUserAccountEnum $account;
    
    /**
     * The user's bio.
     * 
     * @var string $bio
     */
	#[\JMS\Serializer\Annotation\SerializedName('bio')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $bio;
    
    /**
     * The user's content filters:
     * 
     * 
     * Option descriptions:
     *  * `drugs` - Drugs or alcohol use.
     *  * `language` - Profanity or sexually suggestive content.
     *  * `nudity` - Nudity.
     *  * `safe` - Suitable for all audiences.
     *  * `unrated` - No rating.
     *  * `violence` - Violent or graphic content.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PresetsUserContentFilterEnum $contentFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('content_filter')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PresetsUserContentFilterEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PresetsUserContentFilterEnum $contentFilter = null;
    
    /**
     * The time in ISO 8601 format when the user account was created.
     * 
     * @var string $createdTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_time')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $createdTime;
    
    /**
     * The user's email address. This data requires a bearer token with the `email` scope.
     * 
     * @var ?string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $email = null;
    
    /**
     * The absolute URL of this user's profile page.
     * 
     * @var string $link
     */
	#[\JMS\Serializer\Annotation\SerializedName('link')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $link;
    
    /**
     * The user's location.
     * 
     * @var string $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $location;
    
    /**
     * The user's metadata.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PresetsUserMetadata $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PresetsUserMetadata')]
    public PresetsUserMetadata $metadata;
    
    /**
     * The user's display name.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The active portrait of this user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\Picture $pictures
     */
	#[\JMS\Serializer\Annotation\SerializedName('pictures')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Picture')]
    public Picture $pictures;
    
	#[\JMS\Serializer\Annotation\SerializedName('preferences')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PresetsUserPreferences')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PresetsUserPreferences $preferences = null;
    
    /**
     * The user's resource key string.
     * 
     * @var string $resourceKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('resource_key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $resourceKey;
    
    /**
     * Appears only when the user has upload access and is looking at their own user record.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PresetsUserUploadQuota $uploadQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('upload_quota')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PresetsUserUploadQuota')]
    public PresetsUserUploadQuota $uploadQuota;
    
    /**
     * The user's canonical relative URI.
     * 
     * @var string $uri
     */
	#[\JMS\Serializer\Annotation\SerializedName('uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $uri;
    
    /**
     * The user's websites.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\PresetsUserWebsites> $websites
     */
	#[\JMS\Serializer\Annotation\SerializedName('websites')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\PresetsUserWebsites>')]
    public array $websites;
    
	public function __construct()
	{
		$this->account = \OpenAPI\OpenAPI\Models\Shared\PresetsUserAccountEnum::BASIC;
		$this->bio = "";
		$this->contentFilter = null;
		$this->createdTime = "";
		$this->email = null;
		$this->link = "";
		$this->location = "";
		$this->metadata = new \OpenAPI\OpenAPI\Models\Shared\PresetsUserMetadata();
		$this->name = "";
		$this->pictures = new \OpenAPI\OpenAPI\Models\Shared\Picture();
		$this->preferences = null;
		$this->resourceKey = "";
		$this->uploadQuota = new \OpenAPI\OpenAPI\Models\Shared\PresetsUserUploadQuota();
		$this->uri = "";
		$this->websites = [];
	}
}
