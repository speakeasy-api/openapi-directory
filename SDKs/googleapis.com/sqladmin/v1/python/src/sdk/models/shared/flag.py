"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FlagAppliesToEnum(str, Enum):
    SQL_DATABASE_VERSION_UNSPECIFIED = 'SQL_DATABASE_VERSION_UNSPECIFIED'
    MYSQL_5_1 = 'MYSQL_5_1'
    MYSQL_5_5 = 'MYSQL_5_5'
    MYSQL_5_6 = 'MYSQL_5_6'
    MYSQL_5_7 = 'MYSQL_5_7'
    SQLSERVER_2017_STANDARD = 'SQLSERVER_2017_STANDARD'
    SQLSERVER_2017_ENTERPRISE = 'SQLSERVER_2017_ENTERPRISE'
    SQLSERVER_2017_EXPRESS = 'SQLSERVER_2017_EXPRESS'
    SQLSERVER_2017_WEB = 'SQLSERVER_2017_WEB'
    POSTGRES_9_6 = 'POSTGRES_9_6'
    POSTGRES_10 = 'POSTGRES_10'
    POSTGRES_11 = 'POSTGRES_11'
    POSTGRES_12 = 'POSTGRES_12'
    POSTGRES_13 = 'POSTGRES_13'
    POSTGRES_14 = 'POSTGRES_14'
    MYSQL_8_0 = 'MYSQL_8_0'
    MYSQL_8_0_18 = 'MYSQL_8_0_18'
    MYSQL_8_0_26 = 'MYSQL_8_0_26'
    MYSQL_8_0_27 = 'MYSQL_8_0_27'
    MYSQL_8_0_28 = 'MYSQL_8_0_28'
    MYSQL_8_0_29 = 'MYSQL_8_0_29'
    MYSQL_8_0_30 = 'MYSQL_8_0_30'
    MYSQL_8_0_31 = 'MYSQL_8_0_31'
    MYSQL_8_0_32 = 'MYSQL_8_0_32'
    SQLSERVER_2019_STANDARD = 'SQLSERVER_2019_STANDARD'
    SQLSERVER_2019_ENTERPRISE = 'SQLSERVER_2019_ENTERPRISE'
    SQLSERVER_2019_EXPRESS = 'SQLSERVER_2019_EXPRESS'
    SQLSERVER_2019_WEB = 'SQLSERVER_2019_WEB'

class FlagTypeEnum(str, Enum):
    r"""The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags that do not take a value, such as `skip_grant_tables`."""
    SQL_FLAG_TYPE_UNSPECIFIED = 'SQL_FLAG_TYPE_UNSPECIFIED'
    BOOLEAN = 'BOOLEAN'
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    NONE = 'NONE'
    MYSQL_TIMEZONE_OFFSET = 'MYSQL_TIMEZONE_OFFSET'
    FLOAT = 'FLOAT'
    REPEATED_STRING = 'REPEATED_STRING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Flag:
    r"""A flag resource."""
    
    allowed_int_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIntValues'), 'exclude': lambda f: f is None }})
    r"""Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values."""  
    allowed_string_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedStringValues'), 'exclude': lambda f: f is None }})
    r"""For `STRING` flags, a list of strings that the value can be set to."""  
    applies_to: Optional[list[FlagAppliesToEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliesTo'), 'exclude': lambda f: f is None }})
    r"""The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion)."""  
    in_beta: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inBeta'), 'exclude': lambda f: f is None }})
    r"""Whether or not the flag is considered in beta."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#flag`."""  
    max_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValue'), 'exclude': lambda f: f is None }})
    r"""For `INTEGER` flags, the maximum allowed value."""  
    min_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minValue'), 'exclude': lambda f: f is None }})
    r"""For `INTEGER` flags, the minimum allowed value."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`"""  
    requires_restart: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresRestart'), 'exclude': lambda f: f is None }})
    r"""Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances."""  
    type: Optional[FlagTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags that do not take a value, such as `skip_grant_tables`."""  
    