/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MoveAnalysisResult } from "./moveanalysisresult";
import { Status } from "./status";
import { Expose, Type } from "class-transformer";

/**
 * A message to group the analysis information.
 */
export class MoveAnalysis extends SpeakeasyBase {
  /**
   * An analysis result including blockers and warnings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analysis" })
  @Type(() => MoveAnalysisResult)
  analysis?: MoveAnalysisResult;

  /**
   * The user friendly display name of the analysis. E.g. IAM, organization policy etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => Status)
  error?: Status;
}
