// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeCacheClustersActionEnum
type GETDescribeCacheClustersActionEnum string

const (
	GETDescribeCacheClustersActionEnumDescribeCacheClusters GETDescribeCacheClustersActionEnum = "DescribeCacheClusters"
)

func (e *GETDescribeCacheClustersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeCacheClusters":
		*e = GETDescribeCacheClustersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeCacheClustersActionEnum: %s", s)
	}
}

// GETDescribeCacheClustersVersionEnum
type GETDescribeCacheClustersVersionEnum string

const (
	GETDescribeCacheClustersVersionEnumTwoThousandAndFifteen0202 GETDescribeCacheClustersVersionEnum = "2015-02-02"
)

func (e *GETDescribeCacheClustersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = GETDescribeCacheClustersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeCacheClustersVersionEnum: %s", s)
	}
}

type GETDescribeCacheClustersQueryParams struct {
	Action GETDescribeCacheClustersActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
	CacheClusterID *string `queryParam:"style=form,explode=true,name=CacheClusterId"`
	// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
	ShowCacheClustersNotInReplicationGroups *bool `queryParam:"style=form,explode=true,name=ShowCacheClustersNotInReplicationGroups"`
	// An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
	ShowCacheNodeInfo *bool                               `queryParam:"style=form,explode=true,name=ShowCacheNodeInfo"`
	Version           GETDescribeCacheClustersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeCacheClustersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeCacheClustersRequest struct {
	QueryParams GETDescribeCacheClustersQueryParams
	Headers     GETDescribeCacheClustersHeaders
}

type GETDescribeCacheClustersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
