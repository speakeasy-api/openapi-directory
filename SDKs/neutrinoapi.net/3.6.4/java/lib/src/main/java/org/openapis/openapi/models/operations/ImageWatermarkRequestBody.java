/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ImageWatermarkRequestBody {
    /**
     * The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of 'transparent' can also be used. For JPG output the default is black (#000000)
     */
    @SpeakeasyMetadata("form:name=bg-color")
    public String bgColor;

    public ImageWatermarkRequestBody withBgColor(String bgColor) {
        this.bgColor = bgColor;
        return this;
    }
    
    /**
     * The output image format, can be either png or jpg
     */
    @SpeakeasyMetadata("form:name=format")
    public String format;

    public ImageWatermarkRequestBody withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * If set resize the resulting image to this height (in px)
     */
    @SpeakeasyMetadata("form:name=height")
    public Integer height;

    public ImageWatermarkRequestBody withHeight(Integer height) {
        this.height = height;
        return this;
    }
    
    /**
     * The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data
     */
    @SpeakeasyMetadata("form:name=image-url")
    public String imageUrl;

    public ImageWatermarkRequestBody withImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }
    
    /**
     * The opacity of the watermark (0 to 100)
     */
    @SpeakeasyMetadata("form:name=opacity")
    public Integer opacity;

    public ImageWatermarkRequestBody withOpacity(Integer opacity) {
        this.opacity = opacity;
        return this;
    }
    
    /**
     * The position of the watermark image, possible values are: &lt;br&gt;center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right
     */
    @SpeakeasyMetadata("form:name=position")
    public String position;

    public ImageWatermarkRequestBody withPosition(String position) {
        this.position = position;
        return this;
    }
    
    /**
     * The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the 'bg-color' value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("form:name=resize-mode")
    public String resizeMode;

    public ImageWatermarkRequestBody withResizeMode(String resizeMode) {
        this.resizeMode = resizeMode;
        return this;
    }
    
    /**
     * The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data
     */
    @SpeakeasyMetadata("form:name=watermark-url")
    public String watermarkUrl;

    public ImageWatermarkRequestBody withWatermarkUrl(String watermarkUrl) {
        this.watermarkUrl = watermarkUrl;
        return this;
    }
    
    /**
     * If set resize the resulting image to this width (in px)
     */
    @SpeakeasyMetadata("form:name=width")
    public Integer width;

    public ImageWatermarkRequestBody withWidth(Integer width) {
        this.width = width;
        return this;
    }
    
    public ImageWatermarkRequestBody(@JsonProperty("image-url") String imageUrl, @JsonProperty("watermark-url") String watermarkUrl) {
        this.imageUrl = imageUrl;
        this.watermarkUrl = watermarkUrl;
  }
}
