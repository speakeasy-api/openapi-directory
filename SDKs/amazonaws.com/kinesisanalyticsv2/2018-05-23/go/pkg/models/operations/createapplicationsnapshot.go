// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateApplicationSnapshotXAmzTargetEnum
type CreateApplicationSnapshotXAmzTargetEnum string

const (
	CreateApplicationSnapshotXAmzTargetEnumKinesisAnalytics20180523CreateApplicationSnapshot CreateApplicationSnapshotXAmzTargetEnum = "KinesisAnalytics_20180523.CreateApplicationSnapshot"
)

func (e *CreateApplicationSnapshotXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "KinesisAnalytics_20180523.CreateApplicationSnapshot":
		*e = CreateApplicationSnapshotXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationSnapshotXAmzTargetEnum: %s", s)
	}
}

type CreateApplicationSnapshotRequest struct {
	CreateApplicationSnapshotRequest shared.CreateApplicationSnapshotRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       CreateApplicationSnapshotXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateApplicationSnapshotResponse struct {
	ContentType string
	// Success
	CreateApplicationSnapshotResponse map[string]interface{}
	// InvalidApplicationConfigurationException
	InvalidApplicationConfigurationException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
