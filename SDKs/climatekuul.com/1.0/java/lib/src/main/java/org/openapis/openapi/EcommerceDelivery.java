/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class EcommerceDelivery {
	
    /**
	 * CONFIRM_CARBON_OFFSET1_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_CARBON_OFFSET1_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT1_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT1_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT_OF_TRANSACTION1_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT_OF_TRANSACTION1_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRMS_PLANTING2_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRMS_PLANTING2_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * ECOMMERCE_DELIVERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] ECOMMERCE_DELIVERY_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public EcommerceDelivery(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffset1Response confirmCarbonOffset1(org.openapis.openapi.models.operations.ConfirmCarbonOffset1RequestBody request) throws Exception {
        return this.confirmCarbonOffset1(request, null);
    }

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffset1Response confirmCarbonOffset1(org.openapis.openapi.models.operations.ConfirmCarbonOffset1RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_CARBON_OFFSET1_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ecommerceDelivery/confirmCarbonOffset");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmCarbonOffset1Response res = new org.openapis.openapi.models.operations.ConfirmCarbonOffset1Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPayment1Response confirmPayment1(org.openapis.openapi.models.operations.ConfirmPayment1RequestBody request) throws Exception {
        return this.confirmPayment1(request, null);
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPayment1Response confirmPayment1(org.openapis.openapi.models.operations.ConfirmPayment1RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT1_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ecommerceDelivery/confirmPayment");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPayment1Response res = new org.openapis.openapi.models.operations.ConfirmPayment1Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1Response confirmPaymentOfTransaction1(org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1RequestBody request) throws Exception {
        return this.confirmPaymentOfTransaction1(request, null);
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1Response confirmPaymentOfTransaction1(org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT_OF_TRANSACTION1_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ecommerceDelivery/confirmTransaction");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1Response res = new org.openapis.openapi.models.operations.ConfirmPaymentOfTransaction1Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlanting2Response confirmsPlanting2(org.openapis.openapi.models.operations.ConfirmsPlanting2RequestBody request) throws Exception {
        return this.confirmsPlanting2(request, null);
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlanting2Response confirmsPlanting2(org.openapis.openapi.models.operations.ConfirmsPlanting2RequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRMS_PLANTING2_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ecommerceDelivery/confirmPlanting");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmsPlanting2Response res = new org.openapis.openapi.models.operations.ConfirmsPlanting2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * ecommerceDelivery
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.EcommerceDeliveryResponse ecommerceDelivery(org.openapis.openapi.models.operations.EcommerceDeliveryRequest request) throws Exception {
        return this.ecommerceDelivery(request, null);
    }

    /**
     * ecommerceDelivery
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.EcommerceDeliveryResponse ecommerceDelivery(org.openapis.openapi.models.operations.EcommerceDeliveryRequest request, String serverURL) throws Exception {
        String baseUrl = ECOMMERCE_DELIVERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ecommerceDelivery");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.EcommerceDeliveryResponse res = new org.openapis.openapi.models.operations.EcommerceDeliveryResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}