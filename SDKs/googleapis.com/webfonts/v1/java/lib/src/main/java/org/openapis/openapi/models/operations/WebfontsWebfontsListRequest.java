/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class WebfontsWebfontsListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public WebfontsWebfontsListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public WebfontsWebfontsListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public WebfontsWebfontsListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public WebfontsWebfontsListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Controls the font urls in `Webfont.files`, by default, static ttf fonts are sent.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=capability")
    public WebfontsWebfontsListCapabilityEnum[] capability;

    public WebfontsWebfontsListRequest withCapability(WebfontsWebfontsListCapabilityEnum[] capability) {
        this.capability = capability;
        return this;
    }
    
    /**
     * Filters by Webfont.family, using literal match. If not set, returns all families
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=family")
    public String[] family;

    public WebfontsWebfontsListRequest withFamily(String[] family) {
        this.family = family;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public WebfontsWebfontsListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public WebfontsWebfontsListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public WebfontsWebfontsListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public WebfontsWebfontsListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public WebfontsWebfontsListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Enables sorting of the list.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public WebfontsWebfontsListSortEnum sort;

    public WebfontsWebfontsListRequest withSort(WebfontsWebfontsListSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Filters by Webfont.subset, if subset is found in Webfont.subsets. If not set, returns all families.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subset")
    public String subset;

    public WebfontsWebfontsListRequest withSubset(String subset) {
        this.subset = subset;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public WebfontsWebfontsListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public WebfontsWebfontsListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    public WebfontsWebfontsListRequest(){}
}
