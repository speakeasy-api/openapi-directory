// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateBackupXAmzTargetEnum
type CreateBackupXAmzTargetEnum string

const (
	CreateBackupXAmzTargetEnumDynamoDb20120810CreateBackup CreateBackupXAmzTargetEnum = "DynamoDB_20120810.CreateBackup"
)

func (e *CreateBackupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DynamoDB_20120810.CreateBackup":
		*e = CreateBackupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBackupXAmzTargetEnum: %s", s)
	}
}

type CreateBackupHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateBackupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateBackupRequest struct {
	Headers CreateBackupHeaders
	Request shared.CreateBackupInput `request:"mediaType=application/json"`
}

type CreateBackupResponse struct {
	// BackupInUseException
	BackupInUseException interface{}
	ContentType          string
	// ContinuousBackupsUnavailableException
	ContinuousBackupsUnavailableException interface{}
	// Success
	CreateBackupOutput *shared.CreateBackupOutput
	// InternalServerError
	InternalServerError interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TableInUseException
	TableInUseException interface{}
	// TableNotFoundException
	TableNotFoundException interface{}
}
