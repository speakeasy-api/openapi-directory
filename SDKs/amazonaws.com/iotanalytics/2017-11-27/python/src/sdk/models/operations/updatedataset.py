"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import datasetaction as shared_datasetaction
from ..shared import datasetcontentdeliveryrule as shared_datasetcontentdeliveryrule
from ..shared import datasettrigger as shared_datasettrigger
from ..shared import latedatarule as shared_latedatarule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDatasetRequestBodyRetentionPeriod:
    r"""How long, in days, message data is kept."""
    
    number_of_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfDays'), 'exclude': lambda f: f is None }})  
    unlimited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimited'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDatasetRequestBodyVersioningConfiguration:
    r"""Information about the versioning of dataset contents."""
    
    max_versions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxVersions'), 'exclude': lambda f: f is None }})  
    unlimited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimited'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDatasetRequestBody:
    
    actions: list[shared_datasetaction.DatasetAction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})
    r"""A list of <code>DatasetAction</code> objects."""  
    content_delivery_rules: Optional[list[shared_datasetcontentdeliveryrule.DatasetContentDeliveryRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDeliveryRules'), 'exclude': lambda f: f is None }})
    r"""When dataset contents are created, they are delivered to destinations specified here."""  
    late_data_rules: Optional[list[shared_latedatarule.LateDataRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lateDataRules'), 'exclude': lambda f: f is None }})
    r"""A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href=\\"https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html\\">DeltaTimer</a> filter."""  
    retention_period: Optional[UpdateDatasetRequestBodyRetentionPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retentionPeriod'), 'exclude': lambda f: f is None }})
    r"""How long, in days, message data is kept."""  
    triggers: Optional[list[shared_datasettrigger.DatasetTrigger]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggers'), 'exclude': lambda f: f is None }})
    r"""A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to five <code>DatasetTrigger</code> objects."""  
    versioning_configuration: Optional[UpdateDatasetRequestBodyVersioningConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versioningConfiguration'), 'exclude': lambda f: f is None }})
    r"""Information about the versioning of dataset contents."""  
    

@dataclasses.dataclass
class UpdateDatasetRequest:
    
    dataset_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'datasetName', 'style': 'simple', 'explode': False }})
    r"""The name of the dataset to update."""  
    request_body: UpdateDatasetRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDatasetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    