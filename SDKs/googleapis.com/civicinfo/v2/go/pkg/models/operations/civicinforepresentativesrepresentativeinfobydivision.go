// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CivicinfoRepresentativesRepresentativeInfoByDivisionPathParams struct {
	// The Open Civic Data division identifier of the division to look up.
	OcdID string `pathParam:"style=simple,explode=false,name=ocdId"`
}

type CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum string

const (
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumInternational       CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "international"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumCountry             CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "country"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumAdministrativeArea1 CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "administrativeArea1"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumRegional            CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "regional"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumAdministrativeArea2 CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "administrativeArea2"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumLocality            CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "locality"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumSubLocality1        CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "subLocality1"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumSubLocality2        CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "subLocality2"
	CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnumSpecial             CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum = "special"
)

func (e *CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "international":
		fallthrough
	case "country":
		fallthrough
	case "administrativeArea1":
		fallthrough
	case "regional":
		fallthrough
	case "administrativeArea2":
		fallthrough
	case "locality":
		fallthrough
	case "subLocality1":
		fallthrough
	case "subLocality2":
		fallthrough
	case "special":
		*e = CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum: %s", s)
	}
}

type CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum string

const (
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumHeadOfState            CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "headOfState"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumHeadOfGovernment       CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "headOfGovernment"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumDeputyHeadOfGovernment CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "deputyHeadOfGovernment"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumGovernmentOfficer      CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "governmentOfficer"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumExecutiveCouncil       CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "executiveCouncil"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumLegislatorUpperBody    CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "legislatorUpperBody"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumLegislatorLowerBody    CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "legislatorLowerBody"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumHighestCourtJudge      CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "highestCourtJudge"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumJudge                  CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "judge"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumSchoolBoard            CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "schoolBoard"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumSpecialPurposeOfficer  CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "specialPurposeOfficer"
	CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnumOtherRole              CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum = "otherRole"
)

func (e *CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "headOfState":
		fallthrough
	case "headOfGovernment":
		fallthrough
	case "deputyHeadOfGovernment":
		fallthrough
	case "governmentOfficer":
		fallthrough
	case "executiveCouncil":
		fallthrough
	case "legislatorUpperBody":
		fallthrough
	case "legislatorLowerBody":
		fallthrough
	case "highestCourtJudge":
		fallthrough
	case "judge":
		fallthrough
	case "schoolBoard":
		fallthrough
	case "specialPurposeOfficer":
		fallthrough
	case "otherRole":
		*e = CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum: %s", s)
	}
}

type CivicinfoRepresentativesRepresentativeInfoByDivisionQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.
	Levels []CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum `queryParam:"style=form,explode=true,name=levels"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// If true, information about all divisions contained in the division requested will be included as well. For example, if querying ocd-division/country:us/district:dc, this would also return all DC's wards and ANCs.
	Recursive *bool `queryParam:"style=form,explode=true,name=recursive"`
	// A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.
	Roles []CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum `queryParam:"style=form,explode=true,name=roles"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type CivicinfoRepresentativesRepresentativeInfoByDivisionRequest struct {
	PathParams  CivicinfoRepresentativesRepresentativeInfoByDivisionPathParams
	QueryParams CivicinfoRepresentativesRepresentativeInfoByDivisionQueryParams
}

type CivicinfoRepresentativesRepresentativeInfoByDivisionResponse struct {
	ContentType string
	// Successful response
	RepresentativeInfoData *shared.RepresentativeInfoData
	StatusCode             int
	RawResponse            *http.Response
}
