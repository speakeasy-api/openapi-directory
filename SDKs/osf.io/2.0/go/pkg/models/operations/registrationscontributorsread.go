// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RegistrationsContributorsReadPathParams struct {
	// The unique identifier of the registration.
	RegistrationID string `pathParam:"style=simple,explode=false,name=registration_id"`
	// The unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=user_id"`
}

type RegistrationsContributorsReadRequest struct {
	PathParams RegistrationsContributorsReadPathParams
}

// RegistrationsContributorsReadContributorAttributesPermissionEnum - The permission level of the contributor. The default value is 'write'.
type RegistrationsContributorsReadContributorAttributesPermissionEnum string

const (
	RegistrationsContributorsReadContributorAttributesPermissionEnumRead  RegistrationsContributorsReadContributorAttributesPermissionEnum = "read"
	RegistrationsContributorsReadContributorAttributesPermissionEnumWrite RegistrationsContributorsReadContributorAttributesPermissionEnum = "write"
	RegistrationsContributorsReadContributorAttributesPermissionEnumAdmin RegistrationsContributorsReadContributorAttributesPermissionEnum = "admin"
)

func (e *RegistrationsContributorsReadContributorAttributesPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = RegistrationsContributorsReadContributorAttributesPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationsContributorsReadContributorAttributesPermissionEnum: %s", s)
	}
}

// RegistrationsContributorsReadContributorAttributes - The properties of the contributor entity.
type RegistrationsContributorsReadContributorAttributes struct {
	// Whether or not the contributor will be included in citations for the node. The default value is true.
	Bibliographic *bool
	// The position of this contributor in the list of project contributors and in project citations.
	Index *int64
	// The permission level of the contributor. The default value is 'write'.
	Permission *RegistrationsContributorsReadContributorAttributesPermissionEnum
	// The assigned name of the contributor if the contributor has not yet claimed their account.
	UnregisteredContributor *string
}

// RegistrationsContributorsReadContributorLinks - URLs to alternative representations of the contributor entity.
type RegistrationsContributorsReadContributorLinks struct {
	// A link to the the canonical API endpoint for the contributor.
	Self *string
}

// RegistrationsContributorsReadContributorRelationships - URLs to other entities or entity collections that have a relationship to the contributor entity.
type RegistrationsContributorsReadContributorRelationships struct {
	// A relationship to the node that was created for the preprint, or from which the preprint was created.
	Node string
	// A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.
	User string
}

type RegistrationsContributorsReadContributor struct {
	// The properties of the contributor entity.
	Attributes *RegistrationsContributorsReadContributorAttributes
	// The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.
	ID *string
	// URLs to alternative representations of the contributor entity.
	Links *RegistrationsContributorsReadContributorLinks
	// URLs to other entities or entity collections that have a relationship to the contributor entity.
	Relationships RegistrationsContributorsReadContributorRelationships
	// The type identifier of the contributor entity (`contributors`).
	Type string
}

type RegistrationsContributorsReadResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
