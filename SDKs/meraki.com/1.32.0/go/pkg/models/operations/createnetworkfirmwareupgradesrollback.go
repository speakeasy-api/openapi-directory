// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum - Product type to rollback (if the network is a combined network)
type CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum string

const (
	CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnumAppliance       CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum = "appliance"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnumCamera          CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum = "camera"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnumCellularGateway CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum = "cellularGateway"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnumSwitch          CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum = "switch"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnumWireless        CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum = "wireless"
)

func (e CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum) ToPointer() *CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum {
	return &e
}

func (e *CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "switch":
		fallthrough
	case "wireless":
		*e = CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum: %v", v)
	}
}

// CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum - Reason for the rollback
type CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum string

const (
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumBrokeOldFeatures         CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "broke old features"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumOther                    CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "other"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumPerformance              CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "performance"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumStability                CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "stability"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumTesting                  CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "testing"
	CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnumUnifyingNetworksVersions CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = "unifying networks versions"
)

func (e CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum) ToPointer() *CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum {
	return &e
}

func (e *CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "broke old features":
		fallthrough
	case "other":
		fallthrough
	case "performance":
		fallthrough
	case "stability":
		fallthrough
	case "testing":
		fallthrough
	case "unifying networks versions":
		*e = CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum: %v", v)
	}
}

type CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons struct {
	// Reason for the rollback
	Category CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum `json:"category"`
	// Additional comment about the rollback
	Comment string `json:"comment"`
}

// CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion - Version to downgrade to (if the network has firmware flexibility)
type CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

type CreateNetworkFirmwareUpgradesRollbackRequestBody struct {
	// Product type to rollback (if the network is a combined network)
	Product *CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum `json:"product,omitempty"`
	// Reasons for the rollback
	Reasons []CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons `json:"reasons"`
	// Scheduled time for the rollback
	Time *time.Time `json:"time,omitempty"`
	// Version to downgrade to (if the network has firmware flexibility)
	ToVersion *CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion `json:"toVersion,omitempty"`
}

type CreateNetworkFirmwareUpgradesRollbackRequest struct {
	RequestBody CreateNetworkFirmwareUpgradesRollbackRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                           `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum - Product type to rollback (if the network is a combined network)
type CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum string

const (
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnumAppliance       CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum = "appliance"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnumCamera          CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum = "camera"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnumCellularGateway CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum = "cellularGateway"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnumSwitch          CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum = "switch"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnumWireless        CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum = "wireless"
)

func (e CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum) ToPointer() *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum {
	return &e
}

func (e *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "switch":
		fallthrough
	case "wireless":
		*e = CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum: %v", v)
	}
}

// CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum - Reason for the rollback
type CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum string

const (
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumBrokeOldFeatures         CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "broke old features"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumOther                    CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "other"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumPerformance              CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "performance"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumStability                CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "stability"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumTesting                  CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "testing"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnumUnifyingNetworksVersions CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum = "unifying networks versions"
)

func (e CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum) ToPointer() *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum {
	return &e
}

func (e *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "broke old features":
		fallthrough
	case "other":
		fallthrough
	case "performance":
		fallthrough
	case "stability":
		fallthrough
	case "testing":
		fallthrough
	case "unifying networks versions":
		*e = CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum: %v", v)
	}
}

type CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons struct {
	// Reason for the rollback
	Category *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum `json:"category,omitempty"`
	// Additional comment about the rollback
	Comment *string `json:"comment,omitempty"`
}

// CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum - Status of the rollback
type CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum string

const (
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnumCanceled   CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum = "canceled"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnumCompleted  CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum = "completed"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnumInProgress CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum = "in_progress"
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnumPending    CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum = "pending"
)

func (e CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum) ToPointer() *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum {
	return &e
}

func (e *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "completed":
		fallthrough
	case "in_progress":
		fallthrough
	case "pending":
		*e = CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum: %v", v)
	}
}

// CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion - Version to downgrade to (if the network has firmware flexibility)
type CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// CreateNetworkFirmwareUpgradesRollback200ApplicationJSON - Successful operation
type CreateNetworkFirmwareUpgradesRollback200ApplicationJSON struct {
	// Product type to rollback (if the network is a combined network)
	Product *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum `json:"product,omitempty"`
	// Reasons for the rollback
	Reasons []CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons `json:"reasons,omitempty"`
	// Status of the rollback
	Status *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// Scheduled time for the rollback
	Time *time.Time `json:"time,omitempty"`
	// Version to downgrade to (if the network has firmware flexibility)
	ToVersion *CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion `json:"toVersion,omitempty"`
	// Batch ID of the firmware rollback
	UpgradeBatchID *string `json:"upgradeBatchId,omitempty"`
}

type CreateNetworkFirmwareUpgradesRollbackResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkFirmwareUpgradesRollback200ApplicationJSONObject *CreateNetworkFirmwareUpgradesRollback200ApplicationJSON
}
