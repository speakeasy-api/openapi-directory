/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class InvokeWithResponseStreamResponse {
    
    public String contentType;

    public InvokeWithResponseStreamResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EC2AccessDeniedException
     */
    
    public Object ec2AccessDeniedException;

    public InvokeWithResponseStreamResponse withEc2AccessDeniedException(Object ec2AccessDeniedException) {
        this.ec2AccessDeniedException = ec2AccessDeniedException;
        return this;
    }
    
    /**
     * EC2ThrottledException
     */
    
    public Object ec2ThrottledException;

    public InvokeWithResponseStreamResponse withEc2ThrottledException(Object ec2ThrottledException) {
        this.ec2ThrottledException = ec2ThrottledException;
        return this;
    }
    
    /**
     * EC2UnexpectedException
     */
    
    public Object ec2UnexpectedException;

    public InvokeWithResponseStreamResponse withEc2UnexpectedException(Object ec2UnexpectedException) {
        this.ec2UnexpectedException = ec2UnexpectedException;
        return this;
    }
    
    /**
     * EFSIOException
     */
    
    public Object efsioException;

    public InvokeWithResponseStreamResponse withEFSIOException(Object efsioException) {
        this.efsioException = efsioException;
        return this;
    }
    
    /**
     * EFSMountConnectivityException
     */
    
    public Object efsMountConnectivityException;

    public InvokeWithResponseStreamResponse withEFSMountConnectivityException(Object efsMountConnectivityException) {
        this.efsMountConnectivityException = efsMountConnectivityException;
        return this;
    }
    
    /**
     * EFSMountFailureException
     */
    
    public Object efsMountFailureException;

    public InvokeWithResponseStreamResponse withEFSMountFailureException(Object efsMountFailureException) {
        this.efsMountFailureException = efsMountFailureException;
        return this;
    }
    
    /**
     * EFSMountTimeoutException
     */
    
    public Object efsMountTimeoutException;

    public InvokeWithResponseStreamResponse withEFSMountTimeoutException(Object efsMountTimeoutException) {
        this.efsMountTimeoutException = efsMountTimeoutException;
        return this;
    }
    
    /**
     * ENILimitReachedException
     */
    
    public Object eniLimitReachedException;

    public InvokeWithResponseStreamResponse withENILimitReachedException(Object eniLimitReachedException) {
        this.eniLimitReachedException = eniLimitReachedException;
        return this;
    }
    
    /**
     * InvalidParameterValueException
     */
    
    public Object invalidParameterValueException;

    public InvokeWithResponseStreamResponse withInvalidParameterValueException(Object invalidParameterValueException) {
        this.invalidParameterValueException = invalidParameterValueException;
        return this;
    }
    
    /**
     * InvalidRequestContentException
     */
    
    public Object invalidRequestContentException;

    public InvokeWithResponseStreamResponse withInvalidRequestContentException(Object invalidRequestContentException) {
        this.invalidRequestContentException = invalidRequestContentException;
        return this;
    }
    
    /**
     * InvalidRuntimeException
     */
    
    public Object invalidRuntimeException;

    public InvokeWithResponseStreamResponse withInvalidRuntimeException(Object invalidRuntimeException) {
        this.invalidRuntimeException = invalidRuntimeException;
        return this;
    }
    
    /**
     * InvalidSecurityGroupIDException
     */
    
    public Object invalidSecurityGroupIDException;

    public InvokeWithResponseStreamResponse withInvalidSecurityGroupIDException(Object invalidSecurityGroupIDException) {
        this.invalidSecurityGroupIDException = invalidSecurityGroupIDException;
        return this;
    }
    
    /**
     * InvalidSubnetIDException
     */
    
    public Object invalidSubnetIDException;

    public InvokeWithResponseStreamResponse withInvalidSubnetIDException(Object invalidSubnetIDException) {
        this.invalidSubnetIDException = invalidSubnetIDException;
        return this;
    }
    
    /**
     * InvalidZipFileException
     */
    
    public Object invalidZipFileException;

    public InvokeWithResponseStreamResponse withInvalidZipFileException(Object invalidZipFileException) {
        this.invalidZipFileException = invalidZipFileException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.InvokeWithResponseStreamResponse invokeWithResponseStreamResponse;

    public InvokeWithResponseStreamResponse withInvokeWithResponseStreamResponse(org.openapis.openapi.models.shared.InvokeWithResponseStreamResponse invokeWithResponseStreamResponse) {
        this.invokeWithResponseStreamResponse = invokeWithResponseStreamResponse;
        return this;
    }
    
    /**
     * KMSAccessDeniedException
     */
    
    public Object kmsAccessDeniedException;

    public InvokeWithResponseStreamResponse withKMSAccessDeniedException(Object kmsAccessDeniedException) {
        this.kmsAccessDeniedException = kmsAccessDeniedException;
        return this;
    }
    
    /**
     * KMSDisabledException
     */
    
    public Object kmsDisabledException;

    public InvokeWithResponseStreamResponse withKMSDisabledException(Object kmsDisabledException) {
        this.kmsDisabledException = kmsDisabledException;
        return this;
    }
    
    /**
     * KMSInvalidStateException
     */
    
    public Object kmsInvalidStateException;

    public InvokeWithResponseStreamResponse withKMSInvalidStateException(Object kmsInvalidStateException) {
        this.kmsInvalidStateException = kmsInvalidStateException;
        return this;
    }
    
    /**
     * KMSNotFoundException
     */
    
    public Object kmsNotFoundException;

    public InvokeWithResponseStreamResponse withKMSNotFoundException(Object kmsNotFoundException) {
        this.kmsNotFoundException = kmsNotFoundException;
        return this;
    }
    
    /**
     * RequestTooLargeException
     */
    
    public Object requestTooLargeException;

    public InvokeWithResponseStreamResponse withRequestTooLargeException(Object requestTooLargeException) {
        this.requestTooLargeException = requestTooLargeException;
        return this;
    }
    
    /**
     * ResourceConflictException
     */
    
    public Object resourceConflictException;

    public InvokeWithResponseStreamResponse withResourceConflictException(Object resourceConflictException) {
        this.resourceConflictException = resourceConflictException;
        return this;
    }
    
    /**
     * ResourceNotFoundException
     */
    
    public Object resourceNotFoundException;

    public InvokeWithResponseStreamResponse withResourceNotFoundException(Object resourceNotFoundException) {
        this.resourceNotFoundException = resourceNotFoundException;
        return this;
    }
    
    /**
     * ResourceNotReadyException
     */
    
    public Object resourceNotReadyException;

    public InvokeWithResponseStreamResponse withResourceNotReadyException(Object resourceNotReadyException) {
        this.resourceNotReadyException = resourceNotReadyException;
        return this;
    }
    
    /**
     * ServiceException
     */
    
    public Object serviceException;

    public InvokeWithResponseStreamResponse withServiceException(Object serviceException) {
        this.serviceException = serviceException;
        return this;
    }
    
    
    public Integer statusCode;

    public InvokeWithResponseStreamResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public InvokeWithResponseStreamResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * SnapStartException
     */
    
    public Object snapStartException;

    public InvokeWithResponseStreamResponse withSnapStartException(Object snapStartException) {
        this.snapStartException = snapStartException;
        return this;
    }
    
    /**
     * SnapStartNotReadyException
     */
    
    public Object snapStartNotReadyException;

    public InvokeWithResponseStreamResponse withSnapStartNotReadyException(Object snapStartNotReadyException) {
        this.snapStartNotReadyException = snapStartNotReadyException;
        return this;
    }
    
    /**
     * SnapStartTimeoutException
     */
    
    public Object snapStartTimeoutException;

    public InvokeWithResponseStreamResponse withSnapStartTimeoutException(Object snapStartTimeoutException) {
        this.snapStartTimeoutException = snapStartTimeoutException;
        return this;
    }
    
    /**
     * SubnetIPAddressLimitReachedException
     */
    
    public Object subnetIPAddressLimitReachedException;

    public InvokeWithResponseStreamResponse withSubnetIPAddressLimitReachedException(Object subnetIPAddressLimitReachedException) {
        this.subnetIPAddressLimitReachedException = subnetIPAddressLimitReachedException;
        return this;
    }
    
    /**
     * TooManyRequestsException
     */
    
    public Object tooManyRequestsException;

    public InvokeWithResponseStreamResponse withTooManyRequestsException(Object tooManyRequestsException) {
        this.tooManyRequestsException = tooManyRequestsException;
        return this;
    }
    
    /**
     * UnsupportedMediaTypeException
     */
    
    public Object unsupportedMediaTypeException;

    public InvokeWithResponseStreamResponse withUnsupportedMediaTypeException(Object unsupportedMediaTypeException) {
        this.unsupportedMediaTypeException = unsupportedMediaTypeException;
        return this;
    }
    
    public InvokeWithResponseStreamResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
