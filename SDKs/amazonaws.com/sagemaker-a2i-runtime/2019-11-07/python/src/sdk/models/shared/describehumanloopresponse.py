"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import humanloopoutput as shared_humanloopoutput
from ..shared import humanloopstatus_enum as shared_humanloopstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeHumanLoopResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    flow_definition_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlowDefinitionArn') }})  
    human_loop_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopArn') }})  
    human_loop_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopName') }})  
    human_loop_status: shared_humanloopstatus_enum.HumanLoopStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopStatus') }})  
    failure_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureCode'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    human_loop_output: Optional[shared_humanloopoutput.HumanLoopOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLoopOutput'), 'exclude': lambda f: f is None }})  
    