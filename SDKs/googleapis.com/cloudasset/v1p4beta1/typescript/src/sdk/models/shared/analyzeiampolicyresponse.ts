/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudAssetV1p4beta1AnalysisState } from "./googlecloudassetv1p4beta1analysisstate";
import { IamPolicyAnalysis } from "./iampolicyanalysis";
import { Expose, Type } from "class-transformer";

/**
 * A response message for AssetService.AnalyzeIamPolicy.
 */
export class AnalyzeIamPolicyResponse extends SpeakeasyBase {
  /**
   * Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullyExplored" })
  fullyExplored?: boolean;

  /**
   * An analysis message to group the query and results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mainAnalysis" })
  @Type(() => IamPolicyAnalysis)
  mainAnalysis?: IamPolicyAnalysis;

  /**
   * A list of non-critical errors happened during the request handling to explain why `fully_explored` is false, or empty if no error happened.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudAssetV1p4beta1AnalysisState })
  @Expose({ name: "nonCriticalErrors" })
  @Type(() => GoogleCloudAssetV1p4beta1AnalysisState)
  nonCriticalErrors?: GoogleCloudAssetV1p4beta1AnalysisState[];

  /**
   * The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.
   */
  @SpeakeasyMetadata({ elemType: IamPolicyAnalysis })
  @Expose({ name: "serviceAccountImpersonationAnalysis" })
  @Type(() => IamPolicyAnalysis)
  serviceAccountImpersonationAnalysis?: IamPolicyAnalysis[];
}
