/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * To change the description use /examples/TagsDescriptions.json
 */
export class Dictionaries {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns active dictionary entities for all types.
   *
   * @remarks
   * Returns active dictionary entities for all types.
   */
  getActive(
    config?: AxiosRequestConfig
  ): Promise<operations.GetActiveResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dictionaries/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActiveResponse =
        new operations.GetActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.manyValuesPerTypeDTO = utils.objectToClass(
              httpRes?.data,
              shared.ManyValuesPerTypeDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns active values from a given dictionary.
   *
   * @remarks
   * Returns active values from a given dictionary.
   */
  getActiveByType(
    req: operations.GetActiveByTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActiveByTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActiveByTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dictionaries/{type}/active",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActiveByTypeResponse =
        new operations.GetActiveByTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.dictionaryEntity = utils.objectToClass(
              httpRes?.data,
              shared.DictionaryEntity
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns active services list
   *
   * @remarks
   * Returns active workflows list
   */
  getAllActive(
    req: operations.GetAllActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/services/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllActiveResponse =
        new operations.GetAllActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.serviceDTO = utils.objectToClass(
              httpRes?.data,
              shared.ServiceDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all values (both active and not active) from a given dictionary.
   *
   * @remarks
   * Returns all values (both active and not active) from a given dictionary.
   */
  getAllByType(
    req: operations.GetAllByTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllByTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllByTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dictionaries/{type}/all",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllByTypeResponse =
        new operations.GetAllByTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.dictionaryEntity = utils.objectToClass(
              httpRes?.data,
              shared.DictionaryEntity
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns dictionary entities for all types. Both active and not active ones.
   *
   * @remarks
   * <div>
   *   <p>
   *     XTRF holds many user-defined dictionaries (ie. countries).
   *     Each dictionary contains a set of values (ie. Poland or Germany).
   *     A default value may be defined for a dictionary.
   *   </p>
   *   <p>
   *     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.
   *     Please note that name used in dictionary values is presented in the locale of the current identity.
   *     The same dictionary value can have different names, ie. "Poland" for one user, "Polska" for another one.
   *   </p>
   *   <p>
   *     Possible dictionary types with short explanation:
   *     <ul>
   *       <li>calculationUnit - predefined values of how to calculate the volume of work into the price</li>
   *       <li>category - labels to organize data on the platform</li>
   *       <li>country - list of countries used on the platform</li>
   *       <li>currency - currencies used in financial operations in the system</li>
   *       <li>industry - industry sectors which clients specialize in</li>
   *       <li>jobType - services offered by a company used in customized workflows</li>
   *       <li>language - list of languages and its values used on the platform</li>
   *       <li>leadSource - lead/recruitment places where new clients and vendors may be found</li>
   *       <li>personDepartment - departments in which contact person may be assigned to</li>
   *       <li>personPosition - positions in which user may be associated with</li>
   *       <li>province - states and provinces used in various documents on the platform</li>
   *       <li>specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military</li>
   *     </ul>
   *   </p>
   * </div>
   */
  getAll1(config?: AxiosRequestConfig): Promise<operations.GetAll1Response> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dictionaries/all";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAll1Response = new operations.GetAll1Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.manyValuesPerTypeDTO = utils.objectToClass(
              httpRes?.data,
              shared.ManyValuesPerTypeDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns services list
   *
   * @remarks
   * Returns workflows list. Both active and not active ones.
   */
  getAll3(
    req: operations.GetAll3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAll3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAll3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/services/all";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAll3Response = new operations.GetAll3Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.serviceDTO = utils.objectToClass(
              httpRes?.data,
              shared.ServiceDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns specific value from a given dictionary.
   *
   * @remarks
   * Returns specific value from a given dictionary.
   */
  getByTypeAndId(
    req: operations.GetByTypeAndIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetByTypeAndIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetByTypeAndIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dictionaries/{type}/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetByTypeAndIdResponse =
        new operations.GetByTypeAndIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.dictionaryEntity = utils.objectToClass(
              httpRes?.data,
              shared.DictionaryEntity
            );
          }
          break;
      }

      return res;
    });
  }
}
