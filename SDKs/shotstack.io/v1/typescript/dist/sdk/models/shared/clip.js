"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clip = exports.ClipPositionEnum = exports.ClipFitEnum = exports.ClipFilterEnum = exports.ClipEffectEnum = void 0;
var utils_1 = require("../../../internal/utils");
var offset_1 = require("./offset");
var transition_1 = require("./transition");
var class_transformer_1 = require("class-transformer");
/**
 * A motion effect to apply to the Clip. <ul>
 *
 * @remarks
 *   <li>`zoomIn` - slow zoom in</li>
 *   <li>`zoomOut` - slow zoom out</li>
 *   <li>`slideLeft` - slow slide (pan) left</li>
 *   <li>`slideRight` - slow slide (pan) right</li>
 *   <li>`slideUp` - slow slide (pan) up</li>
 *   <li>`slideDown` - slow slide (pan) down</li>
 * </ul>
 */
var ClipEffectEnum;
(function (ClipEffectEnum) {
    ClipEffectEnum["ZoomIn"] = "zoomIn";
    ClipEffectEnum["ZoomOut"] = "zoomOut";
    ClipEffectEnum["SlideLeft"] = "slideLeft";
    ClipEffectEnum["SlideRight"] = "slideRight";
    ClipEffectEnum["SlideUp"] = "slideUp";
    ClipEffectEnum["SlideDown"] = "slideDown";
})(ClipEffectEnum = exports.ClipEffectEnum || (exports.ClipEffectEnum = {}));
/**
 * A filter effect to apply to the Clip. <ul>
 *
 * @remarks
 *   <li>`boost` - boost contrast and saturation</li>
 *   <li>`contrast` - increase contrast</li>
 *   <li>`darken` - darken the scene</li>
 *   <li>`greyscale` - remove colour</li>
 *   <li>`lighten` - lighten the scene</li>
 *   <li>`muted` - reduce saturation and contrast</li>
 *   <li>`invert` - invert colors</li>
 * </ul>
 */
var ClipFilterEnum;
(function (ClipFilterEnum) {
    ClipFilterEnum["Boost"] = "boost";
    ClipFilterEnum["Contrast"] = "contrast";
    ClipFilterEnum["Darken"] = "darken";
    ClipFilterEnum["Greyscale"] = "greyscale";
    ClipFilterEnum["Lighten"] = "lighten";
    ClipFilterEnum["Muted"] = "muted";
    ClipFilterEnum["Negative"] = "negative";
})(ClipFilterEnum = exports.ClipFilterEnum || (exports.ClipFilterEnum = {}));
/**
 * Set how the asset should be scaled to fit the viewport using one of the following options:
 *
 * @remarks
 *   <ul>
 *     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>
 *     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>
 *     <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>
 *     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>
 *   </ul>
 */
var ClipFitEnum;
(function (ClipFitEnum) {
    ClipFitEnum["Cover"] = "cover";
    ClipFitEnum["Contain"] = "contain";
    ClipFitEnum["Crop"] = "crop";
    ClipFitEnum["None"] = "none";
})(ClipFitEnum = exports.ClipFitEnum || (exports.ClipFitEnum = {}));
/**
 * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>
 *
 * @remarks
 *   <li>`top` - top (center)</li>
 *   <li>`topRight` - top right</li>
 *   <li>`right` - right (center)</li>
 *   <li>`bottomRight` - bottom right</li>
 *   <li>`bottom` - bottom (center)</li>
 *   <li>`bottomLeft` - bottom left</li>
 *   <li>`left` - left (center)</li>
 *   <li>`topLeft` - top left</li>
 *   <li>`center` - center</li>
 * </ul>
 */
var ClipPositionEnum;
(function (ClipPositionEnum) {
    ClipPositionEnum["Top"] = "top";
    ClipPositionEnum["TopRight"] = "topRight";
    ClipPositionEnum["Right"] = "right";
    ClipPositionEnum["BottomRight"] = "bottomRight";
    ClipPositionEnum["Bottom"] = "bottom";
    ClipPositionEnum["BottomLeft"] = "bottomLeft";
    ClipPositionEnum["Left"] = "left";
    ClipPositionEnum["TopLeft"] = "topLeft";
    ClipPositionEnum["Center"] = "center";
})(ClipPositionEnum = exports.ClipPositionEnum || (exports.ClipPositionEnum = {}));
/**
 * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
 */
var Clip = /** @class */ (function (_super) {
    __extends(Clip, _super);
    function Clip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "asset" }),
        __metadata("design:type", Object)
    ], Clip.prototype, "asset", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "effect" }),
        __metadata("design:type", String)
    ], Clip.prototype, "effect", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "filter" }),
        __metadata("design:type", String)
    ], Clip.prototype, "filter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fit" }),
        __metadata("design:type", String)
    ], Clip.prototype, "fit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "length" }),
        __metadata("design:type", Number)
    ], Clip.prototype, "length", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "offset" }),
        (0, class_transformer_1.Type)(function () { return offset_1.Offset; }),
        __metadata("design:type", offset_1.Offset)
    ], Clip.prototype, "offset", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "opacity" }),
        __metadata("design:type", Number)
    ], Clip.prototype, "opacity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "position" }),
        __metadata("design:type", String)
    ], Clip.prototype, "position", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scale" }),
        __metadata("design:type", Number)
    ], Clip.prototype, "scale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", Number)
    ], Clip.prototype, "start", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transition" }),
        (0, class_transformer_1.Type)(function () { return transition_1.Transition; }),
        __metadata("design:type", transition_1.Transition)
    ], Clip.prototype, "transition", void 0);
    return Clip;
}(utils_1.SpeakeasyBase));
exports.Clip = Clip;
