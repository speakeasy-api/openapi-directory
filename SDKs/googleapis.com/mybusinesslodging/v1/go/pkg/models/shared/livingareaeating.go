// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LivingAreaEatingCoffeeMakerExceptionEnum - Coffee maker exception.
type LivingAreaEatingCoffeeMakerExceptionEnum string

const (
	LivingAreaEatingCoffeeMakerExceptionEnumExceptionUnspecified LivingAreaEatingCoffeeMakerExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingCoffeeMakerExceptionEnumUnderConstruction    LivingAreaEatingCoffeeMakerExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingCoffeeMakerExceptionEnumDependentOnSeason    LivingAreaEatingCoffeeMakerExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingCoffeeMakerExceptionEnumDependentOnDayOfWeek LivingAreaEatingCoffeeMakerExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingCoffeeMakerExceptionEnum) ToPointer() *LivingAreaEatingCoffeeMakerExceptionEnum {
	return &e
}

func (e *LivingAreaEatingCoffeeMakerExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingCoffeeMakerExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingCoffeeMakerExceptionEnum: %v", v)
	}
}

// LivingAreaEatingCookwareExceptionEnum - Cookware exception.
type LivingAreaEatingCookwareExceptionEnum string

const (
	LivingAreaEatingCookwareExceptionEnumExceptionUnspecified LivingAreaEatingCookwareExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingCookwareExceptionEnumUnderConstruction    LivingAreaEatingCookwareExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingCookwareExceptionEnumDependentOnSeason    LivingAreaEatingCookwareExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingCookwareExceptionEnumDependentOnDayOfWeek LivingAreaEatingCookwareExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingCookwareExceptionEnum) ToPointer() *LivingAreaEatingCookwareExceptionEnum {
	return &e
}

func (e *LivingAreaEatingCookwareExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingCookwareExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingCookwareExceptionEnum: %v", v)
	}
}

// LivingAreaEatingDishwasherExceptionEnum - Dishwasher exception.
type LivingAreaEatingDishwasherExceptionEnum string

const (
	LivingAreaEatingDishwasherExceptionEnumExceptionUnspecified LivingAreaEatingDishwasherExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingDishwasherExceptionEnumUnderConstruction    LivingAreaEatingDishwasherExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingDishwasherExceptionEnumDependentOnSeason    LivingAreaEatingDishwasherExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingDishwasherExceptionEnumDependentOnDayOfWeek LivingAreaEatingDishwasherExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingDishwasherExceptionEnum) ToPointer() *LivingAreaEatingDishwasherExceptionEnum {
	return &e
}

func (e *LivingAreaEatingDishwasherExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingDishwasherExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingDishwasherExceptionEnum: %v", v)
	}
}

// LivingAreaEatingIndoorGrillExceptionEnum - Indoor grill exception.
type LivingAreaEatingIndoorGrillExceptionEnum string

const (
	LivingAreaEatingIndoorGrillExceptionEnumExceptionUnspecified LivingAreaEatingIndoorGrillExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingIndoorGrillExceptionEnumUnderConstruction    LivingAreaEatingIndoorGrillExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingIndoorGrillExceptionEnumDependentOnSeason    LivingAreaEatingIndoorGrillExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingIndoorGrillExceptionEnumDependentOnDayOfWeek LivingAreaEatingIndoorGrillExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingIndoorGrillExceptionEnum) ToPointer() *LivingAreaEatingIndoorGrillExceptionEnum {
	return &e
}

func (e *LivingAreaEatingIndoorGrillExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingIndoorGrillExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingIndoorGrillExceptionEnum: %v", v)
	}
}

// LivingAreaEatingKettleExceptionEnum - Kettle exception.
type LivingAreaEatingKettleExceptionEnum string

const (
	LivingAreaEatingKettleExceptionEnumExceptionUnspecified LivingAreaEatingKettleExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingKettleExceptionEnumUnderConstruction    LivingAreaEatingKettleExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingKettleExceptionEnumDependentOnSeason    LivingAreaEatingKettleExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingKettleExceptionEnumDependentOnDayOfWeek LivingAreaEatingKettleExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingKettleExceptionEnum) ToPointer() *LivingAreaEatingKettleExceptionEnum {
	return &e
}

func (e *LivingAreaEatingKettleExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingKettleExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingKettleExceptionEnum: %v", v)
	}
}

// LivingAreaEatingKitchenAvailableExceptionEnum - Kitchen available exception.
type LivingAreaEatingKitchenAvailableExceptionEnum string

const (
	LivingAreaEatingKitchenAvailableExceptionEnumExceptionUnspecified LivingAreaEatingKitchenAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingKitchenAvailableExceptionEnumUnderConstruction    LivingAreaEatingKitchenAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingKitchenAvailableExceptionEnumDependentOnSeason    LivingAreaEatingKitchenAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingKitchenAvailableExceptionEnumDependentOnDayOfWeek LivingAreaEatingKitchenAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingKitchenAvailableExceptionEnum) ToPointer() *LivingAreaEatingKitchenAvailableExceptionEnum {
	return &e
}

func (e *LivingAreaEatingKitchenAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingKitchenAvailableExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingKitchenAvailableExceptionEnum: %v", v)
	}
}

// LivingAreaEatingMicrowaveExceptionEnum - Microwave exception.
type LivingAreaEatingMicrowaveExceptionEnum string

const (
	LivingAreaEatingMicrowaveExceptionEnumExceptionUnspecified LivingAreaEatingMicrowaveExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingMicrowaveExceptionEnumUnderConstruction    LivingAreaEatingMicrowaveExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingMicrowaveExceptionEnumDependentOnSeason    LivingAreaEatingMicrowaveExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingMicrowaveExceptionEnumDependentOnDayOfWeek LivingAreaEatingMicrowaveExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingMicrowaveExceptionEnum) ToPointer() *LivingAreaEatingMicrowaveExceptionEnum {
	return &e
}

func (e *LivingAreaEatingMicrowaveExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingMicrowaveExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingMicrowaveExceptionEnum: %v", v)
	}
}

// LivingAreaEatingMinibarExceptionEnum - Minibar exception.
type LivingAreaEatingMinibarExceptionEnum string

const (
	LivingAreaEatingMinibarExceptionEnumExceptionUnspecified LivingAreaEatingMinibarExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingMinibarExceptionEnumUnderConstruction    LivingAreaEatingMinibarExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingMinibarExceptionEnumDependentOnSeason    LivingAreaEatingMinibarExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingMinibarExceptionEnumDependentOnDayOfWeek LivingAreaEatingMinibarExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingMinibarExceptionEnum) ToPointer() *LivingAreaEatingMinibarExceptionEnum {
	return &e
}

func (e *LivingAreaEatingMinibarExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingMinibarExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingMinibarExceptionEnum: %v", v)
	}
}

// LivingAreaEatingOutdoorGrillExceptionEnum - Outdoor grill exception.
type LivingAreaEatingOutdoorGrillExceptionEnum string

const (
	LivingAreaEatingOutdoorGrillExceptionEnumExceptionUnspecified LivingAreaEatingOutdoorGrillExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingOutdoorGrillExceptionEnumUnderConstruction    LivingAreaEatingOutdoorGrillExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingOutdoorGrillExceptionEnumDependentOnSeason    LivingAreaEatingOutdoorGrillExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingOutdoorGrillExceptionEnumDependentOnDayOfWeek LivingAreaEatingOutdoorGrillExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingOutdoorGrillExceptionEnum) ToPointer() *LivingAreaEatingOutdoorGrillExceptionEnum {
	return &e
}

func (e *LivingAreaEatingOutdoorGrillExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingOutdoorGrillExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingOutdoorGrillExceptionEnum: %v", v)
	}
}

// LivingAreaEatingOvenExceptionEnum - Oven exception.
type LivingAreaEatingOvenExceptionEnum string

const (
	LivingAreaEatingOvenExceptionEnumExceptionUnspecified LivingAreaEatingOvenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingOvenExceptionEnumUnderConstruction    LivingAreaEatingOvenExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingOvenExceptionEnumDependentOnSeason    LivingAreaEatingOvenExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingOvenExceptionEnumDependentOnDayOfWeek LivingAreaEatingOvenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingOvenExceptionEnum) ToPointer() *LivingAreaEatingOvenExceptionEnum {
	return &e
}

func (e *LivingAreaEatingOvenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingOvenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingOvenExceptionEnum: %v", v)
	}
}

// LivingAreaEatingRefrigeratorExceptionEnum - Refrigerator exception.
type LivingAreaEatingRefrigeratorExceptionEnum string

const (
	LivingAreaEatingRefrigeratorExceptionEnumExceptionUnspecified LivingAreaEatingRefrigeratorExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingRefrigeratorExceptionEnumUnderConstruction    LivingAreaEatingRefrigeratorExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingRefrigeratorExceptionEnumDependentOnSeason    LivingAreaEatingRefrigeratorExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingRefrigeratorExceptionEnumDependentOnDayOfWeek LivingAreaEatingRefrigeratorExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingRefrigeratorExceptionEnum) ToPointer() *LivingAreaEatingRefrigeratorExceptionEnum {
	return &e
}

func (e *LivingAreaEatingRefrigeratorExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingRefrigeratorExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingRefrigeratorExceptionEnum: %v", v)
	}
}

// LivingAreaEatingSinkExceptionEnum - Sink exception.
type LivingAreaEatingSinkExceptionEnum string

const (
	LivingAreaEatingSinkExceptionEnumExceptionUnspecified LivingAreaEatingSinkExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingSinkExceptionEnumUnderConstruction    LivingAreaEatingSinkExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingSinkExceptionEnumDependentOnSeason    LivingAreaEatingSinkExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingSinkExceptionEnumDependentOnDayOfWeek LivingAreaEatingSinkExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingSinkExceptionEnum) ToPointer() *LivingAreaEatingSinkExceptionEnum {
	return &e
}

func (e *LivingAreaEatingSinkExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingSinkExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingSinkExceptionEnum: %v", v)
	}
}

// LivingAreaEatingSnackbarExceptionEnum - Snackbar exception.
type LivingAreaEatingSnackbarExceptionEnum string

const (
	LivingAreaEatingSnackbarExceptionEnumExceptionUnspecified LivingAreaEatingSnackbarExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingSnackbarExceptionEnumUnderConstruction    LivingAreaEatingSnackbarExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingSnackbarExceptionEnumDependentOnSeason    LivingAreaEatingSnackbarExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingSnackbarExceptionEnumDependentOnDayOfWeek LivingAreaEatingSnackbarExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingSnackbarExceptionEnum) ToPointer() *LivingAreaEatingSnackbarExceptionEnum {
	return &e
}

func (e *LivingAreaEatingSnackbarExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingSnackbarExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingSnackbarExceptionEnum: %v", v)
	}
}

// LivingAreaEatingStoveExceptionEnum - Stove exception.
type LivingAreaEatingStoveExceptionEnum string

const (
	LivingAreaEatingStoveExceptionEnumExceptionUnspecified LivingAreaEatingStoveExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingStoveExceptionEnumUnderConstruction    LivingAreaEatingStoveExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingStoveExceptionEnumDependentOnSeason    LivingAreaEatingStoveExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingStoveExceptionEnumDependentOnDayOfWeek LivingAreaEatingStoveExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingStoveExceptionEnum) ToPointer() *LivingAreaEatingStoveExceptionEnum {
	return &e
}

func (e *LivingAreaEatingStoveExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingStoveExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingStoveExceptionEnum: %v", v)
	}
}

// LivingAreaEatingTeaStationExceptionEnum - Tea station exception.
type LivingAreaEatingTeaStationExceptionEnum string

const (
	LivingAreaEatingTeaStationExceptionEnumExceptionUnspecified LivingAreaEatingTeaStationExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingTeaStationExceptionEnumUnderConstruction    LivingAreaEatingTeaStationExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingTeaStationExceptionEnumDependentOnSeason    LivingAreaEatingTeaStationExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingTeaStationExceptionEnumDependentOnDayOfWeek LivingAreaEatingTeaStationExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingTeaStationExceptionEnum) ToPointer() *LivingAreaEatingTeaStationExceptionEnum {
	return &e
}

func (e *LivingAreaEatingTeaStationExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingTeaStationExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingTeaStationExceptionEnum: %v", v)
	}
}

// LivingAreaEatingToasterExceptionEnum - Toaster exception.
type LivingAreaEatingToasterExceptionEnum string

const (
	LivingAreaEatingToasterExceptionEnumExceptionUnspecified LivingAreaEatingToasterExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaEatingToasterExceptionEnumUnderConstruction    LivingAreaEatingToasterExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaEatingToasterExceptionEnumDependentOnSeason    LivingAreaEatingToasterExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaEatingToasterExceptionEnumDependentOnDayOfWeek LivingAreaEatingToasterExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LivingAreaEatingToasterExceptionEnum) ToPointer() *LivingAreaEatingToasterExceptionEnum {
	return &e
}

func (e *LivingAreaEatingToasterExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaEatingToasterExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaEatingToasterExceptionEnum: %v", v)
	}
}

// LivingAreaEating - Information about eating features in the living area.
type LivingAreaEating struct {
	// Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.
	CoffeeMaker *bool `json:"coffeeMaker,omitempty"`
	// Coffee maker exception.
	CoffeeMakerException *LivingAreaEatingCoffeeMakerExceptionEnum `json:"coffeeMakerException,omitempty"`
	// Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
	Cookware *bool `json:"cookware,omitempty"`
	// Cookware exception.
	CookwareException *LivingAreaEatingCookwareExceptionEnum `json:"cookwareException,omitempty"`
	// Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.
	Dishwasher *bool `json:"dishwasher,omitempty"`
	// Dishwasher exception.
	DishwasherException *LivingAreaEatingDishwasherExceptionEnum `json:"dishwasherException,omitempty"`
	// Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.
	IndoorGrill *bool `json:"indoorGrill,omitempty"`
	// Indoor grill exception.
	IndoorGrillException *LivingAreaEatingIndoorGrillExceptionEnum `json:"indoorGrillException,omitempty"`
	// Kettle. A covered container with a handle and a spout used for boiling water.
	Kettle *bool `json:"kettle,omitempty"`
	// Kettle exception.
	KettleException *LivingAreaEatingKettleExceptionEnum `json:"kettleException,omitempty"`
	// Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.
	KitchenAvailable *bool `json:"kitchenAvailable,omitempty"`
	// Kitchen available exception.
	KitchenAvailableException *LivingAreaEatingKitchenAvailableExceptionEnum `json:"kitchenAvailableException,omitempty"`
	// Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.
	Microwave *bool `json:"microwave,omitempty"`
	// Microwave exception.
	MicrowaveException *LivingAreaEatingMicrowaveExceptionEnum `json:"microwaveException,omitempty"`
	// Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
	Minibar *bool `json:"minibar,omitempty"`
	// Minibar exception.
	MinibarException *LivingAreaEatingMinibarExceptionEnum `json:"minibarException,omitempty"`
	// Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.
	OutdoorGrill *bool `json:"outdoorGrill,omitempty"`
	// Outdoor grill exception.
	OutdoorGrillException *LivingAreaEatingOutdoorGrillExceptionEnum `json:"outdoorGrillException,omitempty"`
	// Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.
	Oven *bool `json:"oven,omitempty"`
	// Oven exception.
	OvenException *LivingAreaEatingOvenExceptionEnum `json:"ovenException,omitempty"`
	// Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.
	Refrigerator *bool `json:"refrigerator,omitempty"`
	// Refrigerator exception.
	RefrigeratorException *LivingAreaEatingRefrigeratorExceptionEnum `json:"refrigeratorException,omitempty"`
	// Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.
	Sink *bool `json:"sink,omitempty"`
	// Sink exception.
	SinkException *LivingAreaEatingSinkExceptionEnum `json:"sinkException,omitempty"`
	// Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.
	Snackbar *bool `json:"snackbar,omitempty"`
	// Snackbar exception.
	SnackbarException *LivingAreaEatingSnackbarExceptionEnum `json:"snackbarException,omitempty"`
	// Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.
	Stove *bool `json:"stove,omitempty"`
	// Stove exception.
	StoveException *LivingAreaEatingStoveExceptionEnum `json:"stoveException,omitempty"`
	// Tea station. A small area with the supplies needed to heat water and make tea.
	TeaStation *bool `json:"teaStation,omitempty"`
	// Tea station exception.
	TeaStationException *LivingAreaEatingTeaStationExceptionEnum `json:"teaStationException,omitempty"`
	// Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.
	Toaster *bool `json:"toaster,omitempty"`
	// Toaster exception.
	ToasterException *LivingAreaEatingToasterExceptionEnum `json:"toasterException,omitempty"`
}
