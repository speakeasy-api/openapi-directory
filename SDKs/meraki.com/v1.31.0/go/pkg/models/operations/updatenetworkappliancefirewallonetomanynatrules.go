// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum - 'tcp' or 'udp'
type UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum string

const (
	UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnumTCP UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum = "tcp"
	UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnumUDP UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum: %s", s)
	}
}

type UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRules struct {
	// Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or 'any'
	AllowedIps []string `json:"allowedIps,omitempty"`
	// Local IP address to which traffic will be forwarded
	LocalIP *string `json:"localIp,omitempty"`
	// Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
	LocalPort *string `json:"localPort,omitempty"`
	// A description of the rule
	Name *string `json:"name,omitempty"`
	// 'tcp' or 'udp'
	Protocol *UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum `json:"protocol,omitempty"`
	// Destination port of the traffic that is arriving on the WAN
	PublicPort *string `json:"publicPort,omitempty"`
}

// UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum - The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
type UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum string

const (
	UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnumInternet1 UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum = "internet1"
	UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnumInternet2 UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum = "internet2"
)

func (e *UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internet1":
		fallthrough
	case "internet2":
		*e = UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum: %s", s)
	}
}

type UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRules struct {
	// An array of associated forwarding rules
	PortRules []UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRules `json:"portRules"`
	// The IP address that will be used to access the internal resource from the WAN
	PublicIP string `json:"publicIp"`
	// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
	Uplink UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum `json:"uplink"`
}

type UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBody struct {
	// An array of 1:Many nat rules
	Rules []UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRules `json:"rules"`
}

type UpdateNetworkApplianceFirewallOneToManyNatRulesRequest struct {
	RequestBody UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                                     `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkApplianceFirewallOneToManyNatRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject map[string]interface{}
}
