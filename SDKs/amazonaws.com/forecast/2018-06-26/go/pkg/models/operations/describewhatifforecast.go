// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeWhatIfForecastXAmzTargetEnum
type DescribeWhatIfForecastXAmzTargetEnum string

const (
	DescribeWhatIfForecastXAmzTargetEnumAmazonForecastDescribeWhatIfForecast DescribeWhatIfForecastXAmzTargetEnum = "AmazonForecast.DescribeWhatIfForecast"
)

func (e *DescribeWhatIfForecastXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonForecast.DescribeWhatIfForecast":
		*e = DescribeWhatIfForecastXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeWhatIfForecastXAmzTargetEnum: %s", s)
	}
}

type DescribeWhatIfForecastHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeWhatIfForecastXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeWhatIfForecastRequest struct {
	Headers DescribeWhatIfForecastHeaders
	Request shared.DescribeWhatIfForecastRequest `request:"mediaType=application/json"`
}

type DescribeWhatIfForecastResponse struct {
	ContentType string
	// Success
	DescribeWhatIfForecastResponse *shared.DescribeWhatIfForecastResponse
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
