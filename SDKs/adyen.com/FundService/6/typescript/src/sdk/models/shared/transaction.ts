/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Amount } from "./amount";
import { BankAccountDetail } from "./bankaccountdetail";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The status of the transaction.
 *
 * @remarks
 * >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
 */
export enum TransactionTransactionStatusEnum {
  BalanceNotPaidOutTransfer = "BalanceNotPaidOutTransfer",
  BalancePlatformSweep = "BalancePlatformSweep",
  BalancePlatformSweepReturned = "BalancePlatformSweepReturned",
  Chargeback = "Chargeback",
  ChargebackCorrection = "ChargebackCorrection",
  ChargebackCorrectionReceived = "ChargebackCorrectionReceived",
  ChargebackReceived = "ChargebackReceived",
  ChargebackReversed = "ChargebackReversed",
  ChargebackReversedCorrection = "ChargebackReversedCorrection",
  ChargebackReversedCorrectionReceived = "ChargebackReversedCorrectionReceived",
  ChargebackReversedReceived = "ChargebackReversedReceived",
  Converted = "Converted",
  CreditClosed = "CreditClosed",
  CreditFailed = "CreditFailed",
  CreditReversed = "CreditReversed",
  CreditReversedReceived = "CreditReversedReceived",
  CreditSuspended = "CreditSuspended",
  Credited = "Credited",
  DebitFailed = "DebitFailed",
  DebitReversedReceived = "DebitReversedReceived",
  Debited = "Debited",
  DebitedReversed = "DebitedReversed",
  DepositCorrectionCredited = "DepositCorrectionCredited",
  DepositCorrectionDebited = "DepositCorrectionDebited",
  Fee = "Fee",
  FundTransfer = "FundTransfer",
  FundTransferReversed = "FundTransferReversed",
  InvoiceDeductionCredited = "InvoiceDeductionCredited",
  InvoiceDeductionDebited = "InvoiceDeductionDebited",
  ManualCorrected = "ManualCorrected",
  ManualCorrectionCredited = "ManualCorrectionCredited",
  ManualCorrectionDebited = "ManualCorrectionDebited",
  MerchantPayin = "MerchantPayin",
  MerchantPayinReversed = "MerchantPayinReversed",
  Payout = "Payout",
  PayoutReversed = "PayoutReversed",
  PendingCredit = "PendingCredit",
  PendingDebit = "PendingDebit",
  PendingFundTransfer = "PendingFundTransfer",
  ReCredited = "ReCredited",
  ReCreditedReceived = "ReCreditedReceived",
  SecondChargeback = "SecondChargeback",
  SecondChargebackCorrection = "SecondChargebackCorrection",
  SecondChargebackCorrectionReceived = "SecondChargebackCorrectionReceived",
  SecondChargebackReceived = "SecondChargebackReceived",
}

export class Transaction extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => Amount)
  amount?: Amount;

  @SpeakeasyMetadata()
  @Expose({ name: "bankAccountDetail" })
  @Type(() => BankAccountDetail)
  bankAccountDetail?: BankAccountDetail;

  /**
   * The merchant reference of a related capture.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captureMerchantReference" })
  captureMerchantReference?: string;

  /**
   * The psp reference of a related capture.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "capturePspReference" })
  capturePspReference?: string;

  /**
   * The date on which the transaction was performed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  /**
   * A description of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The code of the account to which funds were credited during an outgoing fund transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationAccountCode" })
  destinationAccountCode?: string;

  /**
   * The psp reference of the related dispute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disputePspReference" })
  disputePspReference?: string;

  /**
   * The reason code of a dispute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disputeReasonCode" })
  disputeReasonCode?: string;

  /**
   * The merchant reference of a transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantReference" })
  merchantReference?: string;

  /**
   * The psp reference of the related authorisation or transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentPspReference" })
  paymentPspReference?: string;

  /**
   * The psp reference of the related payout.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payoutPspReference" })
  payoutPspReference?: string;

  /**
   * The psp reference of a transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pspReference" })
  pspReference?: string;

  /**
   * The code of the account from which funds were debited during an incoming fund transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceAccountCode" })
  sourceAccountCode?: string;

  /**
   * The status of the transaction.
   *
   * @remarks
   * >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionStatus" })
  transactionStatus?: TransactionTransactionStatusEnum;

  /**
   * The transfer code of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferCode" })
  transferCode?: string;
}
