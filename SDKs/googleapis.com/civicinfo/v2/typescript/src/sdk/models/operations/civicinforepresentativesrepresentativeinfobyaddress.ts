/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum {
  International = "international",
  Country = "country",
  AdministrativeArea1 = "administrativeArea1",
  Regional = "regional",
  AdministrativeArea2 = "administrativeArea2",
  Locality = "locality",
  SubLocality1 = "subLocality1",
  SubLocality2 = "subLocality2",
  Special = "special",
}

export enum CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum {
  HeadOfState = "headOfState",
  HeadOfGovernment = "headOfGovernment",
  DeputyHeadOfGovernment = "deputyHeadOfGovernment",
  GovernmentOfficer = "governmentOfficer",
  ExecutiveCouncil = "executiveCouncil",
  LegislatorUpperBody = "legislatorUpperBody",
  LegislatorLowerBody = "legislatorLowerBody",
  HighestCourtJudge = "highestCourtJudge",
  Judge = "judge",
  SchoolBoard = "schoolBoard",
  SpecialPurposeOfficer = "specialPurposeOfficer",
  OtherRole = "otherRole",
}

export class CivicinfoRepresentativesRepresentativeInfoByAddressRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * The address to look up. May only be specified if the field ocdId is not given in the URL
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=address",
  })
  address?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Whether to return information about offices and officials. If false, only the top-level district information will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeOffices",
  })
  includeOffices?: boolean;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=levels",
  })
  levels?: CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum[];

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=roles" })
  roles?: CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum[];

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class CivicinfoRepresentativesRepresentativeInfoByAddressResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  representativeInfoResponse?: shared.RepresentativeInfoResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
