/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EntityTypeEnum } from "./entitytypeenum";
import { Reference } from "./reference";
import { Expose, Type } from "class-transformer";

export enum ProblemEventAdminStateEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

export enum ProblemEventSeverityEnum {
  Critical = "CRITICAL",
  Moderate = "MODERATE",
  Warning = "WARNING",
  Info = "INFO",
}

/**
 * OK
 */
export class ProblemEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin_state" })
  adminState?: ProblemEventAdminStateEnum;

  @SpeakeasyMetadata({ elemType: Reference })
  @Expose({ name: "anchor_entities" })
  @Type(() => Reference)
  anchorEntities?: Reference[];

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "entity_id" })
  entityId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "entity_type" })
  entityType?: EntityTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "event_close_time_epoch_ms" })
  eventCloseTimeEpochMs?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "event_tags" })
  eventTags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "event_time_epoch_ms" })
  eventTimeEpochMs?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: Reference })
  @Expose({ name: "related_entities" })
  @Type(() => Reference)
  relatedEntities?: Reference[];

  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: ProblemEventSeverityEnum;
}
