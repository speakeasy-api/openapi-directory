"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyVpnTunnelCertificateResult = exports.ModifyVpnTunnelCertificateResultVpnConnection = exports.ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry = exports.ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionTags = exports.ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutes = exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptions = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The current state of the gateway association.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum["Associated"] = "associated";
    ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum["NotAssociated"] = "not-associated";
    ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum["Associating"] = "associating";
    ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum["Disassociating"] = "disassociating";
})(ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = {}));
/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv4"] = "ipv4";
    ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv6"] = "ipv6";
})(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIpVersionEnum = {}));
/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions;
/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logGroupArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logOutputFormat", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
/**
 * Options for logging VPN tunnel activity.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions.prototype, "cloudWatchLogOptions", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions;
/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
/**
 * The VPN tunnel options.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideIpv6Cidr", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions;
/**
 * The VPN connection options.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionOptions, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "enableAcceleration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "localIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "localIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "outsideIpAddressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "remoteIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "remoteIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "staticRoutesOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "transportTransitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "tunnelInsideIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnectionOptions.prototype, "tunnelOptions", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionOptions = ModifyVpnTunnelCertificateResultVpnConnectionOptions;
/**
 * Indicates how the routes were provided.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum["Static"] = "Static";
})(ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum = {}));
/**
 * The current state of the static route.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum["Pending"] = "pending";
    ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum["Available"] = "available";
    ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum["Deleting"] = "deleting";
    ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum["Deleted"] = "deleted";
})(ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = {}));
/**
 * Describes a static route for a VPN connection.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionRoutes = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionRoutes, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionRoutes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionRoutes.prototype, "destinationCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionRoutes.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionRoutes.prototype, "state", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionRoutes;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionRoutes = ModifyVpnTunnelCertificateResultVpnConnectionRoutes;
/**
 * The current state of the VPN connection.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionStateEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionStateEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionStateEnum["Pending"] = "pending";
    ModifyVpnTunnelCertificateResultVpnConnectionStateEnum["Available"] = "available";
    ModifyVpnTunnelCertificateResultVpnConnectionStateEnum["Deleting"] = "deleting";
    ModifyVpnTunnelCertificateResultVpnConnectionStateEnum["Deleted"] = "deleted";
})(ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionStateEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = {}));
/**
 * Describes a tag.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionTags = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionTags, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionTags.prototype, "value", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionTags;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionTags = ModifyVpnTunnelCertificateResultVpnConnectionTags;
/**
 * The type of VPN connection.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum["Ipsec1"] = "ipsec.1";
})(ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum = {}));
/**
 * The status of the VPN tunnel.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum;
(function (ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum) {
    ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum["Up"] = "UP";
    ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum["Down"] = "DOWN";
})(ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum || (exports.ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum = {}));
/**
 * Describes telemetry for a VPN tunnel.
 */
var ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry, _super);
    function ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "acceptedRouteCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "certificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "lastStatusChange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry.prototype, "statusMessage", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry = ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry;
/**
 * Information about the VPN connection.
 */
var ModifyVpnTunnelCertificateResultVpnConnection = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResultVpnConnection, _super);
    function ModifyVpnTunnelCertificateResultVpnConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "coreNetworkArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "coreNetworkAttachmentArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "customerGatewayConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "customerGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "gatewayAssociationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelCertificateResultVpnConnectionOptions)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionRoutes,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "routes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionTags,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "vgwTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "vpnConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelCertificateResultVpnConnection.prototype, "vpnGatewayId", void 0);
    return ModifyVpnTunnelCertificateResultVpnConnection;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResultVpnConnection = ModifyVpnTunnelCertificateResultVpnConnection;
/**
 * Success
 */
var ModifyVpnTunnelCertificateResult = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelCertificateResult, _super);
    function ModifyVpnTunnelCertificateResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelCertificateResultVpnConnection)
    ], ModifyVpnTunnelCertificateResult.prototype, "vpnConnection", void 0);
    return ModifyVpnTunnelCertificateResult;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelCertificateResult = ModifyVpnTunnelCertificateResult;
