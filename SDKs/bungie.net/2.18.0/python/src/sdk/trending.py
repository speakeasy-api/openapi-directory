"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Trending:
    r"""trending"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def trending_get_trending_categories(self) -> operations.TrendingGetTrendingCategoriesResponse:
        r"""Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Trending/Categories/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrendingGetTrendingCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def trending_get_trending_category(self, request: operations.TrendingGetTrendingCategoryRequest) -> operations.TrendingGetTrendingCategoryResponse:
        r"""Returns paginated lists of trending items for a category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrendingGetTrendingCategoryRequest, base_url, '/Trending/Categories/{categoryId}/{pageNumber}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrendingGetTrendingCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def trending_get_trending_entry_detail(self, request: operations.TrendingGetTrendingEntryDetailRequest) -> operations.TrendingGetTrendingEntryDetailResponse:
        r"""Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrendingGetTrendingEntryDetailRequest, base_url, '/Trending/Details/{trendingEntryType}/{identifier}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrendingGetTrendingEntryDetailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    