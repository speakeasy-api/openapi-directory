"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import create_twitter as shared_create_twitter
from ..shared import five_hundred_error as shared_five_hundred_error
from ..shared import four_hundred_and_one_error as shared_four_hundred_and_one_error
from ..shared import four_hundred_and_three_error as shared_four_hundred_and_three_error
from ..shared import four_hundred_error as shared_four_hundred_error
from typing import Optional


@dataclasses.dataclass
class GetReportsTwitterCreateRequest:
    
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"""  
    twitter_handle: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'twitter_handle', 'style': 'form', 'explode': True }})
    r"""(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas."""  
    twitter_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'twitter_id', 'style': 'form', 'explode': True }})
    r"""(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas."""  
    

@dataclasses.dataclass
class GetReportsTwitterCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error: Optional[shared_four_hundred_error.FourHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Invalid API parameters, error_code_msg: API_INVALID_PARAMS}<br>{success: 0, msg: Error please include the 'action' parameter, error_code_msg: API_MISSING_ACTION_PARAMETER}<br>{success: 0, msg: The twitter account provided has no audience, error_code_msg: API_TWITTER_ERROR_INSUFFICIENT_COUNT}"""  
    four_hundred_and_one_error: Optional[shared_four_hundred_and_one_error.FourHundredAndOneError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Invalid API key, error_code_msg: API_INVALID_KEY}<br>{success: 0, msg: The twitter account provided is private, error_code_msg: API_TWITTER_ERROR_PRIVATE}"""  
    four_hundred_and_three_error: Optional[shared_four_hundred_and_three_error.FourHundredAndThreeError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: you are going too fast}<br>{success: 0, msg: Not enough tokens remaining under your application, error_code_msg: API_INSUFFICIENT_TOKENS_REMAINING}"""  
    five_hundred_error: Optional[shared_five_hundred_error.FiveHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Error requesting twitter info, error_code_msg: API_TWITTER_ERROR}<br>{success: 0, msg: Error inserting new twitter report, error_code_msg: API_ERROR_CREATING_TWITTER_ACCOUNT}<br>{success: 0, msg: Error getting application's credentials, error_code_msg: API_ERROR_GETTING_APPLICATION_INFO}}<br>{success: 0, msg: Internal database error, error_code_msg: API_ERROR_DATABASE_INITIATION_ERROR}"""  
    create_twitter: Optional[shared_create_twitter.CreateTwitter] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    