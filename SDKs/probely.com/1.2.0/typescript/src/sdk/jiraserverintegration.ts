/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Find instructions on how to configure this integration for your Jira
 *
 * @remarks
 * deployment [here](https://help.probely.com/integrations/how-to-integrate-probely-with-jira-server).
 * A short explanation of the sync options can be found
 * [here](https://help.probely.com/integrations/jira-syncronization-settings).
 *
 */
export class JiraServerIntegration {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List Jira Projects
   */
  getIntegrationsJiraServerProjects(
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraServerProjectsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/integrations/jira-server/projects/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraServerProjectsResponse =
        new operations.GetIntegrationsJiraServerProjectsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraProjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraProjects = utils.objectToClass(
              httpRes?.data,
              shared.JiraProject,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjects401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjects401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjects403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjects403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve project issue types
   */
  getIntegrationsJiraServerProjectsProjectIdIssueTypes(
    req: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-server/projects/{project_id}/issue_types/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssueTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssueTypes = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssueType,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypes401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypes401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypes403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypes403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypes404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypes404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve issue priorities
   */
  getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities(
    req: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/priorities/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssuePriorities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssuePriorities = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssuePriority,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve issue statuses
   */
  getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus(
    req: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/status/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse =
        new operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssueStatuses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssueStatuses = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssueStatus,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Jira Server finding configuration
   */
  getTargetsTargetIdFindingsIdIntegrationsJiraServer(
    req: operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse =
        new operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Jira Server Target configuration
   */
  getTargetsTargetIdIntegrationsJiraServer(
    req: operations.GetTargetsTargetIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdIntegrationsJiraServerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-server/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdIntegrationsJiraServerResponse =
        new operations.GetTargetsTargetIdIntegrationsJiraServerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Server finding configuration
   */
  patchTargetsTargetIdFindingsIdIntegrationsJiraServer(
    req: operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraFinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse =
        new operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Server target configuration
   */
  patchTargetsTargetIdIntegrationsJiraServer(
    req: operations.PatchTargetsTargetIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsTargetIdIntegrationsJiraServerRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-server/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraScope",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdIntegrationsJiraServerResponse =
        new operations.PatchTargetsTargetIdIntegrationsJiraServerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraServer404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraServer404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Server finding configuration
   */
  putTargetsTargetIdFindingsIdIntegrationsJiraServer(
    req: operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraFinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse =
        new operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Server target configuration
   */
  putTargetsTargetIdIntegrationsJiraServer(
    req: operations.PutTargetsTargetIdIntegrationsJiraServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdIntegrationsJiraServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsTargetIdIntegrationsJiraServerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-server/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraScope",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdIntegrationsJiraServerResponse =
        new operations.PutTargetsTargetIdIntegrationsJiraServerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraServer401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraServer403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraServer404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraServer404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
