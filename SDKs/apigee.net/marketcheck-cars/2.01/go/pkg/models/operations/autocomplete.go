// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AutoCompleteFieldEnum - Field name for which you want auto-completion
type AutoCompleteFieldEnum string

const (
	AutoCompleteFieldEnumYmm           AutoCompleteFieldEnum = "ymm"
	AutoCompleteFieldEnumMm            AutoCompleteFieldEnum = "mm"
	AutoCompleteFieldEnumMake          AutoCompleteFieldEnum = "make"
	AutoCompleteFieldEnumModel         AutoCompleteFieldEnum = "model"
	AutoCompleteFieldEnumTrim          AutoCompleteFieldEnum = "trim"
	AutoCompleteFieldEnumBodyType      AutoCompleteFieldEnum = "body_type"
	AutoCompleteFieldEnumBodySubtype   AutoCompleteFieldEnum = "body_subtype"
	AutoCompleteFieldEnumVehicleType   AutoCompleteFieldEnum = "vehicle_type"
	AutoCompleteFieldEnumTransmission  AutoCompleteFieldEnum = "transmission"
	AutoCompleteFieldEnumDrivetrain    AutoCompleteFieldEnum = "drivetrain"
	AutoCompleteFieldEnumFuelType      AutoCompleteFieldEnum = "fuel_type"
	AutoCompleteFieldEnumExteriorColor AutoCompleteFieldEnum = "exterior_color"
	AutoCompleteFieldEnumInteriorColor AutoCompleteFieldEnum = "interior_color"
	AutoCompleteFieldEnumEngine        AutoCompleteFieldEnum = "engine"
	AutoCompleteFieldEnumEngineSize    AutoCompleteFieldEnum = "engine_size"
	AutoCompleteFieldEnumEngineBlock   AutoCompleteFieldEnum = "engine_block"
	AutoCompleteFieldEnumState         AutoCompleteFieldEnum = "state"
	AutoCompleteFieldEnumCity          AutoCompleteFieldEnum = "city"
)

func (e *AutoCompleteFieldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ymm":
		fallthrough
	case "mm":
		fallthrough
	case "make":
		fallthrough
	case "model":
		fallthrough
	case "trim":
		fallthrough
	case "body_type":
		fallthrough
	case "body_subtype":
		fallthrough
	case "vehicle_type":
		fallthrough
	case "transmission":
		fallthrough
	case "drivetrain":
		fallthrough
	case "fuel_type":
		fallthrough
	case "exterior_color":
		fallthrough
	case "interior_color":
		fallthrough
	case "engine":
		fallthrough
	case "engine_size":
		fallthrough
	case "engine_block":
		fallthrough
	case "state":
		fallthrough
	case "city":
		*e = AutoCompleteFieldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoCompleteFieldEnum: %s", s)
	}
}

// AutoCompleteIncludeNonVinListingsEnum - Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results
type AutoCompleteIncludeNonVinListingsEnum string

const (
	AutoCompleteIncludeNonVinListingsEnumTrue  AutoCompleteIncludeNonVinListingsEnum = "true"
	AutoCompleteIncludeNonVinListingsEnumFalse AutoCompleteIncludeNonVinListingsEnum = "false"
)

func (e *AutoCompleteIncludeNonVinListingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = AutoCompleteIncludeNonVinListingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoCompleteIncludeNonVinListingsEnum: %s", s)
	}
}

// AutoCompleteSortByEnum - Sort the response, either by index or count(default)
type AutoCompleteSortByEnum string

const (
	AutoCompleteSortByEnumIndex AutoCompleteSortByEnum = "index"
	AutoCompleteSortByEnumCount AutoCompleteSortByEnum = "count"
)

func (e *AutoCompleteSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "index":
		fallthrough
	case "count":
		*e = AutoCompleteSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoCompleteSortByEnum: %s", s)
	}
}

type AutoCompleteRequest struct {
	// The API Authentication Key. Mandatory with all API calls.
	APIKey *string `queryParam:"style=form,explode=true,name=api_key"`
	// Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
	BodySubtype *string `queryParam:"style=form,explode=true,name=body_subtype"`
	// To filter listing on their body type
	BodyType *string `queryParam:"style=form,explode=true,name=body_type"`
	// Car type. Allowed values are - new / used
	CarType *shared.CarTypeEnum `queryParam:"style=form,explode=true,name=car_type"`
	// To filter listing on City in which they are listed
	City *string `queryParam:"style=form,explode=true,name=city"`
	// To filter listing on Country in which they are listed
	Country *shared.CountryEnum `queryParam:"style=form,explode=true,name=country"`
	// Dealer id to filter the listings.
	DealerID *string `queryParam:"style=form,explode=true,name=dealer_id"`
	// To filter listing on their drivetrain
	Drivetrain *string `queryParam:"style=form,explode=true,name=drivetrain"`
	// To filter listing on their engine
	Engine *string `queryParam:"style=form,explode=true,name=engine"`
	// Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
	EngineBlock *string `queryParam:"style=form,explode=true,name=engine_block"`
	// Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
	EngineSize *string `queryParam:"style=form,explode=true,name=engine_size"`
	// A list of dealer ids to exclude from result
	ExcludeDealerIds *string `queryParam:"style=form,explode=true,name=exclude_dealer_ids"`
	// A list of sources to exclude from result
	ExcludeSources *string `queryParam:"style=form,explode=true,name=exclude_sources"`
	// Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
	ExteriorColor *string `queryParam:"style=form,explode=true,name=exterior_color"`
	// Provide minimum count value for facets
	FacetMinCount *float64 `queryParam:"style=form,explode=true,name=facet_min_count"`
	// Field name for which you want auto-completion
	Field AutoCompleteFieldEnum `queryParam:"style=form,explode=true,name=field"`
	// To filter listing on their fuel type
	FuelType *string `queryParam:"style=form,explode=true,name=fuel_type"`
	// Boolean variable to indicate ignore case of current input
	IgnoreCase *bool `queryParam:"style=form,explode=true,name=ignore_case"`
	// A boolean to filter in transit vehicles
	InTransit *shared.InTransitEnum `queryParam:"style=form,explode=true,name=in_transit"`
	// Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results
	IncludeNonVinListings *AutoCompleteIncludeNonVinListingsEnum `queryParam:"style=form,explode=true,name=include_non_vin_listings"`
	// Input entered so far
	Input string `queryParam:"style=form,explode=true,name=input"`
	// Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
	InteriorColor *string `queryParam:"style=form,explode=true,name=interior_color"`
	// Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50
	InventoryCountRange *string `queryParam:"style=form,explode=true,name=inventory_count_range"`
	// To filter listings on their make
	Make *string `queryParam:"style=form,explode=true,name=make"`
	// To filter listings on their model
	Model *string `queryParam:"style=form,explode=true,name=model"`
	// Radius around the search location (Unit - Miles)
	Radius *int `queryParam:"style=form,explode=true,name=radius"`
	// seller type for autocomplete
	SellerType *string `queryParam:"style=form,explode=true,name=seller_type"`
	// Sort the response, either by index or count(default)
	SortBy *AutoCompleteSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// To filter listing on their source only for widget requests
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// To filter listing on State in which they are listed
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Boolean variable to indicate wheather to include term counts as well in response
	TermCounts *bool `queryParam:"style=form,explode=true,name=term_counts"`
	// To filter listing on their transmission
	Transmission *string `queryParam:"style=form,explode=true,name=transmission"`
	// To filter listing on their trim
	Trim *string `queryParam:"style=form,explode=true,name=trim"`
	// To filter listing on their vehicle type
	VehicleType *string `queryParam:"style=form,explode=true,name=vehicle_type"`
	// To filter listing on their year
	Year *string `queryParam:"style=form,explode=true,name=year"`
	// To filter listing on ZIP around which they are listed
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

type AutoCompleteResponse struct {
	ContentType string
	// Error
	Error *shared.Error
	// Unique terms available in given field for auto completion
	SearchAutoCompleteResponse *shared.SearchAutoCompleteResponse
	StatusCode                 int
	RawResponse                *http.Response
}
