"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import autotopupconfigv3 as shared_autotopupconfigv3
from ..shared import notificationsv3 as shared_notificationsv3
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceAccountResponseV3:
    r"""Source account response"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Source Account Id"""  
    rails_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('railsId') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    auto_top_up_config: Optional[shared_autotopupconfigv3.AutoTopUpConfigV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoTopUpConfig'), 'exclude': lambda f: f is None }})  
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""Decimal implied"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Valid ISO 3166 2 character country code. See the <a href=\\"https://www.iso.org/iso-3166-country-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Valid ISO 4217 3 letter currency code. See the <a href=\\"https://www.iso.org/iso-4217-currency-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""An optional flag for whether the source account has been deleted. Only present in the response if true."""  
    deleted_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""An optional timestamp when the source account has been deleted. Only present in the response if deleted."""  
    funding_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundingRef'), 'exclude': lambda f: f is None }})
    r"""The funding reference (will not be set for DECOUPLED accounts)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    notifications: Optional[shared_notificationsv3.NotificationsV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})  
    payor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId'), 'exclude': lambda f: f is None }})  
    physical_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('physicalAccountId'), 'exclude': lambda f: f is None }})
    r"""The physical account id (will not be set for DECOUPLED accounts)."""  
    physical_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('physicalAccountName'), 'exclude': lambda f: f is None }})
    r"""The physical account name (will not be set for DECOUPLED accounts)."""  
    pooled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pooled'), 'exclude': lambda f: f is None }})
    r"""The pooled account flag (will not be set for DECOUPLED accounts)."""  
    user_deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDeleted'), 'exclude': lambda f: f is None }})
    r"""An optional flag for whether the source account has been deleted by a user. Only present in the response if true."""  
    