// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ModifyInvitationClientManagementEnum string

const (
	ModifyInvitationClientManagementEnumNo      ModifyInvitationClientManagementEnum = "no"
	ModifyInvitationClientManagementEnumManager ModifyInvitationClientManagementEnum = "manager"
	ModifyInvitationClientManagementEnumAdn     ModifyInvitationClientManagementEnum = "adn"
)

func (e *ModifyInvitationClientManagementEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "no":
		fallthrough
	case "manager":
		fallthrough
	case "adn":
		*e = ModifyInvitationClientManagementEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInvitationClientManagementEnum: %s", s)
	}
}

type ModifyInvitationFoldersRightEnum string

const (
	ModifyInvitationFoldersRightEnumRead  ModifyInvitationFoldersRightEnum = "read"
	ModifyInvitationFoldersRightEnumWrite ModifyInvitationFoldersRightEnum = "write"
)

func (e *ModifyInvitationFoldersRightEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = ModifyInvitationFoldersRightEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInvitationFoldersRightEnum: %s", s)
	}
}

type ModifyInvitationFolders struct {
	ID    *string                           `json:"Id,omitempty"`
	Right *ModifyInvitationFoldersRightEnum `json:"Right,omitempty"`
}

type ModifyInvitationPlayerEnum string

const (
	ModifyInvitationPlayerEnumGuest        ModifyInvitationPlayerEnum = "guest"
	ModifyInvitationPlayerEnumOwner        ModifyInvitationPlayerEnum = "owner"
	ModifyInvitationPlayerEnumManager      ModifyInvitationPlayerEnum = "manager"
	ModifyInvitationPlayerEnumAssistant    ModifyInvitationPlayerEnum = "assistant"
	ModifyInvitationPlayerEnumCollaborator ModifyInvitationPlayerEnum = "collaborator"
)

func (e *ModifyInvitationPlayerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "guest":
		fallthrough
	case "owner":
		fallthrough
	case "manager":
		fallthrough
	case "assistant":
		fallthrough
	case "collaborator":
		*e = ModifyInvitationPlayerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInvitationPlayerEnum: %s", s)
	}
}

// ModifyInvitation - Infos to invite
type ModifyInvitation struct {
	ClientManagement *ModifyInvitationClientManagementEnum `json:"ClientManagement,omitempty"`
	Folders          []ModifyInvitationFolders             `json:"Folders,omitempty"`
	GroupIds         []string                              `json:"GroupIds,omitempty"`
	IsAdmin          *bool                                 `json:"IsAdmin,omitempty"`
	Player           *ModifyInvitationPlayerEnum           `json:"Player,omitempty"`
	PlayerEnd        *string                               `json:"PlayerEnd,omitempty"`
}
