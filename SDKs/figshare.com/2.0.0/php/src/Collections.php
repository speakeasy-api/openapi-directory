<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Collections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Public Collection Articles
     * 
     * Returns a list of public collection articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesResponse
     */
	public function collectionArticles(
        \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/articles', \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CollectionArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Collection details
     * 
     * View a collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsResponse
     */
	public function collectionDetails(
        \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionComplete = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionComplete', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Collection Version details
     * 
     * View details for a certain version of a collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsResponse
     */
	public function collectionVersionDetails(
        \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/versions/{version_id}', \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionVersionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionComplete = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionComplete', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Collection Versions list
     * 
     * Returns a list of public collection Versions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsResponse
     */
	public function collectionVersions(
        \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/versions', \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionVersions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CollectionVersions>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Collections
     * 
     * Returns a list of public collections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse
     */
	public function collectionsList(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CollectionsListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Collection>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Collections Search
     * 
     * Returns a list of public collections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsSearchResponse
     */
	public function collectionsSearch(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionSearch", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Collection>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete collection article
     * 
     * De-associate article from collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteResponse
     */
	public function privateCollectionArticleDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticleDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add collection articles
     * 
     * Associate new articles with the collection. This will add new articles to the list of already associated articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddResponse
     */
	public function privateCollectionArticlesAdd(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/articles', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articlesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List collection articles
     * 
     * List collection articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListResponse
     */
	public function privateCollectionArticlesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/articles', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace collection articles
     * 
     * Associate new articles with the collection. This will remove all already associated articles and add these new ones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceResponse
     */
	public function privateCollectionArticlesReplace(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/articles', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articlesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionArticlesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete collection author
     * 
     * Delete collection author
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteResponse
     */
	public function privateCollectionAuthorDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/authors/{author_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add collection authors
     * 
     * Associate new authors with the collection. This will add new authors to the list of already associated authors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddResponse
     */
	public function privateCollectionAuthorsAdd(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorsCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List collection authors
     * 
     * List collection authors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListResponse
     */
	public function privateCollectionAuthorsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Author>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace collection authors
     * 
     * Associate new authors with the collection. This will remove all already associated authors and add these new ones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceResponse
     */
	public function privateCollectionAuthorsReplace(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorsCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionAuthorsReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add collection categories
     * 
     * Associate new categories with the collection. This will add new categories to the list of already associated categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddResponse
     */
	public function privateCollectionCategoriesAdd(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "categoriesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List collection categories
     * 
     * List collection categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListResponse
     */
	public function privateCollectionCategoriesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace collection categories
     * 
     * Associate new categories with the collection. This will remove all already associated categories and add these new ones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceResponse
     */
	public function privateCollectionCategoriesReplace(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "categoriesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoriesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete collection category
     * 
     * De-associate category from collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteResponse
     */
	public function privateCollectionCategoryDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/categories/{category_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCategoryDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create collection
     * 
     * Create a new Collection by sending collection information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CollectionCreate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCreateResponse
     */
	public function privateCollectionCreate(
        \OpenAPI\OpenAPI\Models\Shared\CollectionCreate $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarnings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarnings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete collection
     * 
     * Delete n collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteResponse
     */
	public function privateCollectionDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Collection details
     * 
     * View a collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsResponse
     */
	public function privateCollectionDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionCompletePrivate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionCompletePrivate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create collection private link
     * 
     * Create new private link
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateResponse
     */
	public function privateCollectionPrivateLinkCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/private_links', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionPrivateLinkCreator", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateLinkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateLinkResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable private link
     * 
     * Disable/delete private link for this collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteResponse
     */
	public function privateCollectionPrivateLinkDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/private_links/{link_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update collection private link
     * 
     * Update existing private link for this collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateResponse
     */
	public function privateCollectionPrivateLinkUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/private_links/{link_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionPrivateLinkCreator", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinkUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List collection private links
     * 
     * List article private links
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListResponse
     */
	public function privateCollectionPrivateLinksList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/private_links', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPrivateLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PrivateLink>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collection Publish
     * 
     * When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishResponse
     */
	public function privateCollectionPublish(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/publish', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collection Reserve DOI
     * 
     * Reserve DOI for collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiResponse
     */
	public function privateCollectionReserveDoi(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/reserve_doi', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveDoiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionDOI = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionDOI', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collection Reserve Handle
     * 
     * Reserve Handle for collection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleResponse
     */
	public function privateCollectionReserveHandle(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/reserve_handle', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionReserveHandleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionHandle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionHandle', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collection Resource
     * 
     * Edit collection resource data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceResponse
     */
	public function privateCollectionResource(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}/resource', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resource", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Update collection
     * 
     * Update collection details; request can also be made with the PATCH method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateResponse
     */
	public function privateCollectionUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarningsUpdate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarningsUpdate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collections List
     * 
     * List private collections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListResponse
     */
	public function privateCollectionsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Collection>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Collections Search
     * 
     * Returns a list of private Collections
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PrivateCollectionSearch $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsSearchResponse
     */
	public function privateCollectionsSearch(
        \OpenAPI\OpenAPI\Models\Shared\PrivateCollectionSearch $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/collections/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCollectionsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Collection>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
}