/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class POSTDelayAuthorizeCapture {
    /**
     * The ID of the customer account.
     */
    @JsonProperty("accountId")
    public String accountId;
    public POSTDelayAuthorizeCapture withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The number of the customer account.
     */
    @JsonProperty("accountNumber")
    public String accountNumber;
    public POSTDelayAuthorizeCapture withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * The amount of the trasaction.
     */
    @JsonProperty("amount")
    public Double amount;
    public POSTDelayAuthorizeCapture withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The order ID for the specific gateway.
     */
    @JsonProperty("gatewayOrderId")
    public String gatewayOrderId;
    public POSTDelayAuthorizeCapture withGatewayOrderId(String gatewayOrderId) {
        this.gatewayOrderId = gatewayOrderId;
        return this;
    }
    
    /**
     * Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
     *   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
     *   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
     *   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitTransactionSource")
    public POSTDelayAuthorizeCaptureMitTransactionSourceEnum mitTransactionSource;
    public POSTDelayAuthorizeCapture withMitTransactionSource(POSTDelayAuthorizeCaptureMitTransactionSourceEnum mitTransactionSource) {
        this.mitTransactionSource = mitTransactionSource;
        return this;
    }
    
    /**
     * A text, rendered on a cardholder\u2019s statement, describing a particular product or service purchased by the cardholder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptor")
    public String softDescriptor;
    public POSTDelayAuthorizeCapture withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * The phone number that relates to the soft descriptor, usually the phone number of customer service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptorPhone")
    public String softDescriptorPhone;
    public POSTDelayAuthorizeCapture withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
}
