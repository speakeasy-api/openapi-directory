<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tables 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists tables for the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListResponse
     */
	public function area120tablesTablesList(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/tables');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates multiple rows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateResponse
     */
	public function area120tablesTablesRowsBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/rows:batchCreate', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchCreateRowsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchCreateRowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchCreateRowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes multiple rows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteResponse
     */
	public function area120tablesTablesRowsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/rows:batchDelete', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeleteRowsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates multiple rows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateResponse
     */
	public function area120tablesTablesRowsBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/rows:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchUpdateRowsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchUpdateRowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchUpdateRowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a row.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateResponse
     */
	public function area120tablesTablesRowsCreate(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/rows', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "row", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->row = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Row', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a row.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteResponse
     */
	public function area120tablesTablesRowsDelete(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists rows in a table. Returns NOT_FOUND if the table does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListResponse
     */
	public function area120tablesTablesRowsList(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/rows', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a row.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchResponse
     */
	public function area120tablesTablesRowsPatch(
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "row", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Area120tablesTablesRowsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->row = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Row', 'json');
            }
        }

        return $response;
    }
}