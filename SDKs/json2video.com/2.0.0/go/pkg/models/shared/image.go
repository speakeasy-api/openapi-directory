// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImageChromaKey - Allows to define a color (or a range of colors) that will be converted to transparent
type ImageChromaKey struct {
	// Set the color for which alpha will be set to 0 (full transparency)
	Color string `json:"color"`
	// Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas
	Tolerance *int64 `json:"tolerance,omitempty"`
}

// ImageCrop - Crops the element
type ImageCrop struct {
	// Sets the height of the croping
	Height int64 `json:"height"`
	// Sets the width of the croping
	Width int64 `json:"width"`
	// Sets the left point of croping
	X *int64 `json:"x,omitempty"`
	// Sets the top point of croping
	Y *int64 `json:"y,omitempty"`
}

// ImagePanEnum - Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
type ImagePanEnum string

const (
	ImagePanEnumLeft        ImagePanEnum = "left"
	ImagePanEnumTop         ImagePanEnum = "top"
	ImagePanEnumRight       ImagePanEnum = "right"
	ImagePanEnumBottom      ImagePanEnum = "bottom"
	ImagePanEnumTopLeft     ImagePanEnum = "top-left"
	ImagePanEnumTopRight    ImagePanEnum = "top-right"
	ImagePanEnumBottomLeft  ImagePanEnum = "bottom-left"
	ImagePanEnumBottomRight ImagePanEnum = "bottom-right"
)

func (e *ImagePanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left":
		fallthrough
	case "top":
		fallthrough
	case "right":
		fallthrough
	case "bottom":
		fallthrough
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "bottom-right":
		*e = ImagePanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImagePanEnum: %s", s)
	}
}

// ImagePositionEnum - Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
type ImagePositionEnum string

const (
	ImagePositionEnumTopLeft      ImagePositionEnum = "top-left"
	ImagePositionEnumTopRight     ImagePositionEnum = "top-right"
	ImagePositionEnumBottomRight  ImagePositionEnum = "bottom-right"
	ImagePositionEnumBottomLeft   ImagePositionEnum = "bottom-left"
	ImagePositionEnumCenterCenter ImagePositionEnum = "center-center"
	ImagePositionEnumCustom       ImagePositionEnum = "custom"
)

func (e *ImagePositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "center-center":
		fallthrough
	case "custom":
		*e = ImagePositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImagePositionEnum: %s", s)
	}
}

type ImageRotate struct {
	// Sets the angle of rotation
	Angle float64 `json:"angle"`
	// Sets the time it takes to rotate the provided angle. A zero value means no movement
	Speed *float64 `json:"speed,omitempty"`
}

type ImageScale struct {
	// Sets the height for scaling the element
	Height *int64 `json:"height,omitempty"`
	// Sets the width for scaling the element
	Width *int64 `json:"width,omitempty"`
}

type ImageTypeEnum string

const (
	ImageTypeEnumImage ImageTypeEnum = "image"
)

func (e *ImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "image":
		*e = ImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageTypeEnum: %s", s)
	}
}

type Image struct {
	// Allows to define a color (or a range of colors) that will be converted to transparent
	ChromaKey *ImageChromaKey `json:"chroma-key,omitempty"`
	// Crops the element
	Crop *ImageCrop `json:"crop,omitempty"`
	// Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
	Pan *ImagePanEnum `json:"pan,omitempty"`
	// Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
	Position *ImagePositionEnum `json:"position,omitempty"`
	Rotate   *ImageRotate       `json:"rotate,omitempty"`
	Scale    *ImageScale        `json:"scale,omitempty"`
	Src      *string            `json:"src,omitempty"`
	Type     *ImageTypeEnum     `json:"type,omitempty"`
	// Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
	X *float64 `json:"x,omitempty"`
	// Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
	Y *float64 `json:"y,omitempty"`
	// Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
	Zoom *int64 `json:"zoom,omitempty"`
}
