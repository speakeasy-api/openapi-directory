/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueueStats - Statistics for a queue.
 */
public class QueueStats {
    /**
     * Output only. The number of requests that the queue has dispatched but has not received a reply for yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrentDispatchesCount")
    public String concurrentDispatchesCount;

    public QueueStats withConcurrentDispatchesCount(String concurrentDispatchesCount) {
        this.concurrentDispatchesCount = concurrentDispatchesCount;
        return this;
    }
    
    /**
     * Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveExecutionRate")
    public Double effectiveExecutionRate;

    public QueueStats withEffectiveExecutionRate(Double effectiveExecutionRate) {
        this.effectiveExecutionRate = effectiveExecutionRate;
        return this;
    }
    
    /**
     * Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executedLastMinuteCount")
    public String executedLastMinuteCount;

    public QueueStats withExecutedLastMinuteCount(String executedLastMinuteCount) {
        this.executedLastMinuteCount = executedLastMinuteCount;
        return this;
    }
    
    /**
     * Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oldestEstimatedArrivalTime")
    public String oldestEstimatedArrivalTime;

    public QueueStats withOldestEstimatedArrivalTime(String oldestEstimatedArrivalTime) {
        this.oldestEstimatedArrivalTime = oldestEstimatedArrivalTime;
        return this;
    }
    
    /**
     * Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasksCount")
    public String tasksCount;

    public QueueStats withTasksCount(String tasksCount) {
        this.tasksCount = tasksCount;
        return this;
    }
    
    public QueueStats(){}
}
