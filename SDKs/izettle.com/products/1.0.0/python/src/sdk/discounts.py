"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Discounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_discount(self, request: operations.CreateDiscountRequest, security: operations.CreateDiscountSecurity) -> operations.CreateDiscountResponse:
        r"""Create a discount
        Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateDiscountRequest, base_url, '/organizations/{organizationUuid}/discounts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "discount_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDiscountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_discount(self, request: operations.DeleteDiscountRequest, security: operations.DeleteDiscountSecurity) -> operations.DeleteDiscountResponse:
        r"""Delete a single discount"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDiscountRequest, base_url, '/organizations/{organizationUuid}/discounts/{discountUuid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDiscountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_discounts(self, request: operations.GetAllDiscountsRequest, security: operations.GetAllDiscountsSecurity) -> operations.GetAllDiscountsResponse:
        r"""Retrieve all discounts"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllDiscountsRequest, base_url, '/organizations/{organizationUuid}/discounts', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllDiscountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DiscountResponse]])
                res.discount_responses = out

        return res

    def get_discount(self, request: operations.GetDiscountRequest, security: operations.GetDiscountSecurity) -> operations.GetDiscountResponse:
        r"""Retrieve a single discount
        Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDiscountRequest, base_url, '/organizations/{organizationUuid}/discounts/{discountUuid}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DiscountResponse])
                res.discount_response = out
        elif http_res.status_code in [304, 404]:
            pass

        return res

    def update_discount(self, request: operations.UpdateDiscountRequest, security: operations.UpdateDiscountSecurity) -> operations.UpdateDiscountResponse:
        r"""Update a single discount
        Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDiscountRequest, base_url, '/organizations/{organizationUuid}/discounts/{discountUuid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "discount_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDiscountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code == 412:
            pass

        return res

    