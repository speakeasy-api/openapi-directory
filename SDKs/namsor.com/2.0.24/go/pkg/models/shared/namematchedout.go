// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NameMatchedOutMatchStatusEnum - The name matching status.
type NameMatchedOutMatchStatusEnum string

const (
	NameMatchedOutMatchStatusEnumMatch    NameMatchedOutMatchStatusEnum = "Match"
	NameMatchedOutMatchStatusEnumMismatch NameMatchedOutMatchStatusEnum = "Mismatch"
)

func (e NameMatchedOutMatchStatusEnum) ToPointer() *NameMatchedOutMatchStatusEnum {
	return &e
}

func (e *NameMatchedOutMatchStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Match":
		fallthrough
	case "Mismatch":
		*e = NameMatchedOutMatchStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMatchedOutMatchStatusEnum: %v", v)
	}
}

// NameMatchedOut - Classified matched names
type NameMatchedOut struct {
	ID *string `json:"id,omitempty"`
	// The name matching status.
	MatchStatus *NameMatchedOutMatchStatusEnum `json:"matchStatus,omitempty"`
	Score       *float64                       `json:"score,omitempty"`
	Script      *string                        `json:"script,omitempty"`
}
