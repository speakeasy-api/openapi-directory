"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CDDrive:
    r"""ContentDepot Drive functionality for uploading and stating content files for use in other API operations."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_v2_cddrive_files_file_id_(self, request: operations.DeleteAPIV2CddriveFilesFileIDRequest, security: operations.DeleteAPIV2CddriveFilesFileIDSecurity) -> operations.DeleteAPIV2CddriveFilesFileIDResponse:
        r"""Delete a file.
        Delete a file from the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV2CddriveFilesFileIDRequest, base_url, '/api/v2/cddrive/files/{file-id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV2CddriveFilesFileIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_api_v2_cddrive_folders_folder_id_(self, request: operations.DeleteAPIV2CddriveFoldersFolderIDRequest, security: operations.DeleteAPIV2CddriveFoldersFolderIDSecurity) -> operations.DeleteAPIV2CddriveFoldersFolderIDResponse:
        r"""UNDER DEVELOPMENT - Delete a folder.
        Delete a file from the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV2CddriveFoldersFolderIDRequest, base_url, '/api/v2/cddrive/folders/{folder-id}', request)
        
        query_params = utils.get_query_params(operations.DeleteAPIV2CddriveFoldersFolderIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV2CddriveFoldersFolderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v2_cddrive_files_file_id_(self, request: operations.GetAPIV2CddriveFilesFileIDRequest, security: operations.GetAPIV2CddriveFilesFileIDSecurity) -> operations.GetAPIV2CddriveFilesFileIDResponse:
        r"""Get file information.
        Get the information about a file in the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2CddriveFilesFileIDRequest, base_url, '/api/v2/cddrive/files/{file-id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2CddriveFilesFileIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CDDriveFile])
                res.cd_drive_file = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_api_v2_cddrive_files_file_id_content(self, request: operations.GetAPIV2CddriveFilesFileIDContentRequest, security: operations.GetAPIV2CddriveFilesFileIDContentSecurity) -> operations.GetAPIV2CddriveFilesFileIDContentResponse:
        r"""UNDER DEVELOPMENT - Download a file.
        Download a file from the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2CddriveFilesFileIDContentRequest, base_url, '/api/v2/cddrive/files/{file-id}/content', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2CddriveFilesFileIDContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.get_api_v2_cddrive_files_file_id_content_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code == 302:
            res.headers = http_res.headers
            
        elif http_res.status_code == 404:
            pass

        return res

    def get_api_v2_cddrive_folders_folder_id_(self, request: operations.GetAPIV2CddriveFoldersFolderIDRequest, security: operations.GetAPIV2CddriveFoldersFolderIDSecurity) -> operations.GetAPIV2CddriveFoldersFolderIDResponse:
        r"""UNDER DEVELOPMENT - Get folder information.
        Get the information about a folder in the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2CddriveFoldersFolderIDRequest, base_url, '/api/v2/cddrive/folders/{folder-id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2CddriveFoldersFolderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CDDriveFolder])
                res.cd_drive_folder = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_api_v2_cddrive_folders_folder_id_items(self, request: operations.GetAPIV2CddriveFoldersFolderIDItemsRequest, security: operations.GetAPIV2CddriveFoldersFolderIDItemsSecurity) -> operations.GetAPIV2CddriveFoldersFolderIDItemsResponse:
        r"""Get the items in the folder.
        Get the information about a folder in the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2CddriveFoldersFolderIDItemsRequest, base_url, '/api/v2/cddrive/folders/{folder-id}/items', request)
        
        query_params = utils.get_query_params(operations.GetAPIV2CddriveFoldersFolderIDItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2CddriveFoldersFolderIDItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAPIV2CddriveFoldersFolderIDItems200ApplicationJSON])
                res.get_api_v2_cddrive_folders_folder_id_items_200_application_json_object = out
        elif http_res.status_code == 404:
            pass

        return res

    def post_api_v2_cddrive_files_content(self, request: operations.PostAPIV2CddriveFilesContentRequest, security: operations.PostAPIV2CddriveFilesContentSecurity) -> operations.PostAPIV2CddriveFilesContentResponse:
        r"""Upload a file.
        Upload a file to the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/cddrive/files/content'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2CddriveFilesContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CDDriveFile])
                res.cd_drive_file = out
        elif http_res.status_code in [400, 403, 404, 409, 413]:
            pass

        return res

    def post_api_v2_cddrive_folders(self, request: operations.PostAPIV2CddriveFoldersRequestBody, security: operations.PostAPIV2CddriveFoldersSecurity) -> operations.PostAPIV2CddriveFoldersResponse:
        r"""Create a folder.
        Create a new folder in the customer's private CD Drive.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/cddrive/folders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2CddriveFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CDDriveFolder])
                res.cd_drive_folder = out
        elif http_res.status_code in [403, 404, 409]:
            pass

        return res

    