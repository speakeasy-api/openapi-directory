/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Account - Account data
 */
public class Account {
    /**
     * Collection for the next billing period is autommatic/manual
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_collection")
    public AccountAutoCollectionEnum autoCollection;
    public Account withAutoCollection(AccountAutoCollectionEnum autoCollection) {
        this.autoCollection = autoCollection;
        return this;
    }
    
    /**
     * Account balance in cents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public Long balance;
    public Account withBalance(Long balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * 3 letter currency code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_currency_code")
    public String balanceCurrencyCode;
    public Account withBalanceCurrencyCode(String balanceCurrencyCode) {
        this.balanceCurrencyCode = balanceCurrencyCode;
        return this;
    }
    
    /**
     * Number of free targets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_target_quantity")
    public Long freeTargetQuantity;
    public Account withFreeTargetQuantity(Long freeTargetQuantity) {
        this.freeTargetQuantity = freeTargetQuantity;
        return this;
    }
    
    /**
     * Has account used up it's trial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_used_trial")
    public Boolean hasUsedTrial;
    public Account withHasUsedTrial(Boolean hasUsedTrial) {
        this.hasUsedTrial = hasUsedTrial;
        return this;
    }
    
    /**
     * Heroku accounts (for future use)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heroku")
    public Boolean heroku;
    public Account withHeroku(Boolean heroku) {
        this.heroku = heroku;
        return this;
    }
    
    /**
     * Date of next billing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("next_billing_at")
    public LocalDate nextBillingAt;
    public Account withNextBillingAt(LocalDate nextBillingAt) {
        this.nextBillingAt = nextBillingAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    public Plan plan;
    public Account withPlan(Plan plan) {
        this.plan = plan;
        return this;
    }
    
    /**
     * Number of subscribed targets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_target_quantity")
    public Long planTargetQuantity;
    public Account withPlanTargetQuantity(Long planTargetQuantity) {
        this.planTargetQuantity = planTargetQuantity;
        return this;
    }
    
    /**
     * Maximum number of subscribed target for pool plans
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pool_size")
    public Long poolSize;
    public Account withPoolSize(Long poolSize) {
        this.poolSize = poolSize;
        return this;
    }
    
    /**
     * * active - active subscription, either trial or paying
     * * trial_ended - trial ended and subscription was discontinued
     * * canceled - subscription canceled
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public AccountStatusEnum status;
    public Account withStatus(AccountStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Trial termination date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("trialEnd")
    public OffsetDateTime trialEnd;
    public Account withTrialEnd(OffsetDateTime trialEnd) {
        this.trialEnd = trialEnd;
        return this;
    }
    
}
