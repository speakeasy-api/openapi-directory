"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkApplianceSsidRequestBodyAuthModeEnum(str, Enum):
    r"""The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius')."""
    EIGHT_THOUSAND_AND_TWENTY_ONEX_MERAKI = '8021x-meraki'
    EIGHT_THOUSAND_AND_TWENTY_ONEX_RADIUS = '8021x-radius'
    OPEN = 'open'
    PSK = 'psk'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication:
    r"""DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable DCHP Enforced Deauthentication on the SSID."""  
    
class UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum(str, Enum):
    r"""The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'."""
    WEP = 'wep'
    WPA = 'wpa'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSsidRequestBodyRadiusServers:
    
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""The IP address of your RADIUS server."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The UDP port your RADIUS servers listens on for Access-requests."""  
    secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret'), 'exclude': lambda f: f is None }})
    r"""The RADIUS client shared secret."""  
    
class UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum(str, Enum):
    r"""The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'"""
    WPA1_AND_WPA2 = 'WPA1 and WPA2'
    WPA2_ONLY = 'WPA2 only'
    WPA3_TRANSITION_MODE = 'WPA3 Transition Mode'
    WPA3_ONLY = 'WPA3 only'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSsidRequestBody:
    
    auth_mode: Optional[UpdateNetworkApplianceSsidRequestBodyAuthModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMode'), 'exclude': lambda f: f is None }})
    r"""The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius')."""  
    default_vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultVlanId'), 'exclude': lambda f: f is None }})
    r"""The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode."""  
    dhcp_enforced_deauthentication: Optional[UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpEnforcedDeauthentication'), 'exclude': lambda f: f is None }})
    r"""DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not the SSID is enabled."""  
    encryption_mode: Optional[UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionMode'), 'exclude': lambda f: f is None }})
    r"""The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the SSID."""  
    psk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('psk'), 'exclude': lambda f: f is None }})
    r"""The passkey for the SSID. This param is only valid if the authMode is 'psk'."""  
    radius_servers: Optional[list[UpdateNetworkApplianceSsidRequestBodyRadiusServers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radiusServers'), 'exclude': lambda f: f is None }})
    r"""The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'."""  
    visible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether the MX should advertise or hide this SSID."""  
    wpa_encryption_mode: Optional[UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wpaEncryptionMode'), 'exclude': lambda f: f is None }})
    r"""The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSsidRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'number', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkApplianceSsidRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers:
    
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""The IP address of your RADIUS server."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The UDP port your RADIUS servers listens on for Access-requests."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSsid200ApplicationJSON:
    r"""Successful operation"""
    
    auth_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMode'), 'exclude': lambda f: f is None }})
    r"""The association control method for the SSID."""  
    default_vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultVlanId'), 'exclude': lambda f: f is None }})
    r"""The VLAN ID of the VLAN associated to this SSID."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not the SSID is enabled."""  
    encryption_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionMode'), 'exclude': lambda f: f is None }})
    r"""The psk encryption mode for the SSID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the SSID."""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number of the SSID."""  
    radius_servers: Optional[list[UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radiusServers'), 'exclude': lambda f: f is None }})
    r"""The RADIUS 802.1x servers to be used for authentication."""  
    visible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether the MX should advertise or hide this SSID."""  
    wpa_encryption_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wpaEncryptionMode'), 'exclude': lambda f: f is None }})
    r"""WPA encryption mode for the SSID."""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSsidResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_ssid_200_application_json_object: Optional[UpdateNetworkApplianceSsid200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    