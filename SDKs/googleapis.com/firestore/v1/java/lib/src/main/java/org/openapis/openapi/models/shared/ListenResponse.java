/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ListenResponse - The response for Firestore.Listen.
 */
public class ListenResponse {
    /**
     * A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentChange")
    public DocumentChange documentChange;
    public ListenResponse withDocumentChange(DocumentChange documentChange) {
        this.documentChange = documentChange;
        return this;
    }
    
    /**
     * A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentDelete")
    public DocumentDelete documentDelete;
    public ListenResponse withDocumentDelete(DocumentDelete documentDelete) {
        this.documentDelete = documentDelete;
        return this;
    }
    
    /**
     * A Document has been removed from the view of the targets. Sent if the document is no longer relevant to a target and is out of view. Can be sent instead of a DocumentDelete or a DocumentChange if the server can not send the new value of the document. Multiple DocumentRemove messages may be returned for the same logical write or delete, if multiple targets are affected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentRemove")
    public DocumentRemove documentRemove;
    public ListenResponse withDocumentRemove(DocumentRemove documentRemove) {
        this.documentRemove = documentRemove;
        return this;
    }
    
    /**
     * A digest of all the documents that match a given target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public ExistenceFilter filter;
    public ListenResponse withFilter(ExistenceFilter filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * Targets being watched have changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetChange")
    public TargetChange targetChange;
    public ListenResponse withTargetChange(TargetChange targetChange) {
        this.targetChange = targetChange;
        return this;
    }
    
}
