// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsGetAudienceSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsGetAudienceRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the audience
	AudienceName string `pathParam:"style=simple,explode=false,name=audience_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsGetAudienceDefaultApplicationJSONError struct {
	Code    AnalyticsGetAudienceDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                  `json:"message"`
}

// AnalyticsGetAudienceDefaultApplicationJSON - Error code with reason
type AnalyticsGetAudienceDefaultApplicationJSON struct {
	Error AnalyticsGetAudienceDefaultApplicationJSONError `json:"error"`
}

type AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum string

const (
	AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnumString   AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum = "string"
	AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnumNumber   AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum = "number"
	AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnumBoolean  AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum = "boolean"
	AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnumDateTime AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum = "date_time"
)

func (e *AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "date_time":
		*e = AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum: %s", s)
	}
}

// AnalyticsGetAudience200ApplicationJSONStateEnum - Audience state.
type AnalyticsGetAudience200ApplicationJSONStateEnum string

const (
	AnalyticsGetAudience200ApplicationJSONStateEnumCalculating AnalyticsGetAudience200ApplicationJSONStateEnum = "Calculating"
	AnalyticsGetAudience200ApplicationJSONStateEnumReady       AnalyticsGetAudience200ApplicationJSONStateEnum = "Ready"
	AnalyticsGetAudience200ApplicationJSONStateEnumDisabled    AnalyticsGetAudience200ApplicationJSONStateEnum = "Disabled"
)

func (e *AnalyticsGetAudience200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Calculating":
		fallthrough
	case "Ready":
		fallthrough
	case "Disabled":
		*e = AnalyticsGetAudience200ApplicationJSONStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsGetAudience200ApplicationJSONStateEnum: %s", s)
	}
}

// AnalyticsGetAudience200ApplicationJSON - Audience definition.
type AnalyticsGetAudience200ApplicationJSON struct {
	// Custom properties used in the definition.
	CustomProperties map[string]AnalyticsGetAudience200ApplicationJSONCustomPropertiesEnum `json:"custom_properties,omitempty"`
	// Audience definition in OData format.
	Definition *string `json:"definition,omitempty"`
	// Audience description.
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	// Estimated audience size.
	EstimatedCount *int64 `json:"estimated_count,omitempty"`
	// Estimated total audience size.
	EstimatedTotalCount *int64 `json:"estimated_total_count,omitempty"`
	// Audience name.
	Name *string `json:"name,omitempty"`
	// Audience state.
	State *AnalyticsGetAudience200ApplicationJSONStateEnum `json:"state,omitempty"`
	// Date the audience was last refreshed.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type AnalyticsGetAudienceResponse struct {
	// Audiences definition.
	AnalyticsGetAudience200ApplicationJSONObject *AnalyticsGetAudience200ApplicationJSON
	// Error code with reason
	AnalyticsGetAudienceDefaultApplicationJSONObject *AnalyticsGetAudienceDefaultApplicationJSON
	ContentType                                      string
	StatusCode                                       int
	RawResponse                                      *http.Response
}
