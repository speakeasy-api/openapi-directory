// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UsersUpdateOrgRoleSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// UsersUpdateOrgRoleRequestBodyRoleEnum - The user's role in the organizatiion
type UsersUpdateOrgRoleRequestBodyRoleEnum string

const (
	UsersUpdateOrgRoleRequestBodyRoleEnumAdmin        UsersUpdateOrgRoleRequestBodyRoleEnum = "admin"
	UsersUpdateOrgRoleRequestBodyRoleEnumCollaborator UsersUpdateOrgRoleRequestBodyRoleEnum = "collaborator"
	UsersUpdateOrgRoleRequestBodyRoleEnumMember       UsersUpdateOrgRoleRequestBodyRoleEnum = "member"
)

func (e UsersUpdateOrgRoleRequestBodyRoleEnum) ToPointer() *UsersUpdateOrgRoleRequestBodyRoleEnum {
	return &e
}

func (e *UsersUpdateOrgRoleRequestBodyRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "collaborator":
		fallthrough
	case "member":
		*e = UsersUpdateOrgRoleRequestBodyRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersUpdateOrgRoleRequestBodyRoleEnum: %v", v)
	}
}

type UsersUpdateOrgRoleRequestBody struct {
	// The user's role in the organizatiion
	Role *UsersUpdateOrgRoleRequestBodyRoleEnum `json:"role,omitempty"`
}

type UsersUpdateOrgRoleRequest struct {
	RequestBody UsersUpdateOrgRoleRequestBody `request:"mediaType=application/json"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The slug name of the user
	UserName string `pathParam:"style=simple,explode=false,name=user_name"`
}

type UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum string

const (
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumBadRequest          UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumConflict            UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumNotFound            UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumInternalServerError UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnumTooManyRequests     UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum) ToPointer() *UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UsersUpdateOrgRoleDefaultApplicationJSONError struct {
	Code    UsersUpdateOrgRoleDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                `json:"message"`
}

// UsersUpdateOrgRoleDefaultApplicationJSON - Error
type UsersUpdateOrgRoleDefaultApplicationJSON struct {
	Error UsersUpdateOrgRoleDefaultApplicationJSONError `json:"error"`
}

// UsersUpdateOrgRole200ApplicationJSON - Success
type UsersUpdateOrgRole200ApplicationJSON struct {
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The date when the user joined the organization
	JoinedAt string `json:"joined_at"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The role the user has within the organization
	Role string `json:"role"`
}

type UsersUpdateOrgRoleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersUpdateOrgRole200ApplicationJSONObject *UsersUpdateOrgRole200ApplicationJSON
	// Error
	UsersUpdateOrgRoleDefaultApplicationJSONObject *UsersUpdateOrgRoleDefaultApplicationJSON
}
