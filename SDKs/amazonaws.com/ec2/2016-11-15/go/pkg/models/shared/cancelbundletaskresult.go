// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CancelBundleTaskResultBundleTaskBundleTaskError - If the task fails, a description of the error.
type CancelBundleTaskResultBundleTaskBundleTaskError struct {
	Code    *string
	Message *string
}

// CancelBundleTaskResultBundleTaskStateEnum - The state of the task.
type CancelBundleTaskResultBundleTaskStateEnum string

const (
	CancelBundleTaskResultBundleTaskStateEnumPending            CancelBundleTaskResultBundleTaskStateEnum = "pending"
	CancelBundleTaskResultBundleTaskStateEnumWaitingForShutdown CancelBundleTaskResultBundleTaskStateEnum = "waiting-for-shutdown"
	CancelBundleTaskResultBundleTaskStateEnumBundling           CancelBundleTaskResultBundleTaskStateEnum = "bundling"
	CancelBundleTaskResultBundleTaskStateEnumStoring            CancelBundleTaskResultBundleTaskStateEnum = "storing"
	CancelBundleTaskResultBundleTaskStateEnumCancelling         CancelBundleTaskResultBundleTaskStateEnum = "cancelling"
	CancelBundleTaskResultBundleTaskStateEnumComplete           CancelBundleTaskResultBundleTaskStateEnum = "complete"
	CancelBundleTaskResultBundleTaskStateEnumFailed             CancelBundleTaskResultBundleTaskStateEnum = "failed"
)

func (e CancelBundleTaskResultBundleTaskStateEnum) ToPointer() *CancelBundleTaskResultBundleTaskStateEnum {
	return &e
}

func (e *CancelBundleTaskResultBundleTaskStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "waiting-for-shutdown":
		fallthrough
	case "bundling":
		fallthrough
	case "storing":
		fallthrough
	case "cancelling":
		fallthrough
	case "complete":
		fallthrough
	case "failed":
		*e = CancelBundleTaskResultBundleTaskStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelBundleTaskResultBundleTaskStateEnum: %v", v)
	}
}

// CancelBundleTaskResultBundleTaskStorage - The Amazon S3 storage locations.
type CancelBundleTaskResultBundleTaskStorage struct {
	S3 *S3Storage
}

// CancelBundleTaskResultBundleTask - Information about the bundle task.
type CancelBundleTaskResultBundleTask struct {
	BundleID        *string
	BundleTaskError *CancelBundleTaskResultBundleTaskBundleTaskError
	InstanceID      *string
	Progress        *string
	StartTime       *time.Time
	State           *CancelBundleTaskResultBundleTaskStateEnum
	Storage         *CancelBundleTaskResultBundleTaskStorage
	UpdateTime      *time.Time
}

// CancelBundleTaskResult - Contains the output of CancelBundleTask.
type CancelBundleTaskResult struct {
	BundleTask *CancelBundleTaskResultBundleTask
}
