"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Snapshots:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def copy_snapshot_to_existing_game_using_post_1(self, request: operations.CopySnapshotToExistingGameUsingPOST1Request) -> operations.CopySnapshotToExistingGameUsingPOST1Response:
        r"""copySnapshotToExistingGame"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CopySnapshotToExistingGameUsingPOST1Request, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}', request)
        
        query_params = utils.get_query_params(operations.CopySnapshotToExistingGameUsingPOST1Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopySnapshotToExistingGameUsingPOST1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnapshotCreationSuccessModel])
                res.snapshot_creation_success_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def copy_snapshot_to_new_game_using_post(self, request: operations.CopySnapshotToNewGameUsingPOSTRequest) -> operations.CopySnapshotToNewGameUsingPOSTResponse:
        r"""copySnapshotToNewGame"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CopySnapshotToNewGameUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy', request)
        
        query_params = utils.get_query_params(operations.CopySnapshotToNewGameUsingPOSTRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopySnapshotToNewGameUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnapshotCreationSuccessModel])
                res.snapshot_creation_success_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def create_snapshots_using_post(self, request: operations.CreateSnapshotsUsingPOSTRequest) -> operations.CreateSnapshotsUsingPOSTResponse:
        r"""createSnapshots"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSnapshotsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snapshot_creation_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSnapshotsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnapshotModel])
                res.snapshot_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_snapshot_using_delete_1(self, request: operations.DELETESnapshotUsingDELETE1Request) -> operations.DELETESnapshotUsingDELETE1Response:
        r"""deleteSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETESnapshotUsingDELETE1Request, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETESnapshotUsingDELETE1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_live_snapshot_id_using_get(self, request: operations.GETLiveSnapshotIDUsingGETRequest) -> operations.GETLiveSnapshotIDUsingGETResponse:
        r"""getLiveSnapshotId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETLiveSnapshotIDUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETLiveSnapshotIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_snapshot_using_get(self, request: operations.GETSnapshotUsingGETRequest) -> operations.GETSnapshotUsingGETResponse:
        r"""getSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETSnapshotUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSnapshotUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SnapshotModel])
                res.snapshot_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_snapshots_using_get(self, request: operations.GETSnapshotsUsingGETRequest) -> operations.GETSnapshotsUsingGETResponse:
        r"""getSnapshots"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETSnapshotsUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/page/{page}', request)
        
        query_params = utils.get_query_params(operations.GETSnapshotsUsingGETRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSnapshotsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SnapshotModel]])
                res.snapshot_models = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_snapshots_using_get_1(self, request: operations.GETSnapshotsUsingGET1Request) -> operations.GETSnapshotsUsingGET1Response:
        r"""getSnapshots"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETSnapshotsUsingGET1Request, base_url, '/restv2/game/{apiKey}/admin/snapshots', request)
        
        query_params = utils.get_query_params(operations.GETSnapshotsUsingGET1Request, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSnapshotsUsingGET1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SnapshotModel]])
                res.snapshot_models = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def publish_snapshot_using_post_1(self, request: operations.PublishSnapshotUsingPOST1Request) -> operations.PublishSnapshotUsingPOST1Response:
        r"""publishSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishSnapshotUsingPOST1Request, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishSnapshotUsingPOST1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 403, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out

        return res

    def revert_to_snapshot_using_post(self, request: operations.RevertToSnapshotUsingPOSTRequest) -> operations.RevertToSnapshotUsingPOSTResponse:
        r"""revertToSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RevertToSnapshotUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevertToSnapshotUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def unpublish_snapshot_using_post(self, request: operations.UnpublishSnapshotUsingPOSTRequest) -> operations.UnpublishSnapshotUsingPOSTResponse:
        r"""unpublishSnapshot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnpublishSnapshotUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnpublishSnapshotUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    