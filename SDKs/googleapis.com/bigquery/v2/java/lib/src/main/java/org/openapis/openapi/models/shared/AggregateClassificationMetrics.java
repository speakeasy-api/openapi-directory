/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AggregateClassificationMetrics - Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
 */
public class AggregateClassificationMetrics {
    /**
     * Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accuracy")
    public Double accuracy;
    public AggregateClassificationMetrics withAccuracy(Double accuracy) {
        this.accuracy = accuracy;
        return this;
    }
    
    /**
     * The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("f1Score")
    public Double f1Score;
    public AggregateClassificationMetrics withF1Score(Double f1Score) {
        this.f1Score = f1Score;
        return this;
    }
    
    /**
     * Logarithmic Loss. For multiclass this is a macro-averaged metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logLoss")
    public Double logLoss;
    public AggregateClassificationMetrics withLogLoss(Double logLoss) {
        this.logLoss = logLoss;
        return this;
    }
    
    /**
     * Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precision")
    public Double precision;
    public AggregateClassificationMetrics withPrecision(Double precision) {
        this.precision = precision;
        return this;
    }
    
    /**
     * Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recall")
    public Double recall;
    public AggregateClassificationMetrics withRecall(Double recall) {
        this.recall = recall;
        return this;
    }
    
    /**
     * Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rocAuc")
    public Double rocAuc;
    public AggregateClassificationMetrics withRocAuc(Double rocAuc) {
        this.rocAuc = rocAuc;
        return this;
    }
    
    /**
     * Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threshold")
    public Double threshold;
    public AggregateClassificationMetrics withThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }
    
}
