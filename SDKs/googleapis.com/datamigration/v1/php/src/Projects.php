<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new connection profile in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateResponse
     */
	public function datamigrationProjectsLocationsConnectionProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/connectionProfiles', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionProfileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of all connection profiles in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListResponse
     */
	public function datamigrationProjectsLocationsConnectionProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/connectionProfiles', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConnectionProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectionProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies draft tree onto a specific destination database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesApply(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:apply', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applyConversionWorkspaceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesApplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks all the data in the conversion workspace as committed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesCommit(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:commit', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitConversionWorkspaceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a draft tree schema for the destination database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesConvert(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:convert', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "convertConversionWorkspaceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesConvertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new conversion workspace in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversionWorkspaces', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "conversionWorkspaceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of committed revisions of a specific conversion workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisions(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{conversionWorkspace}:describeConversionWorkspaceRevisions', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeConversionWorkspaceRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeConversionWorkspaceRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntities(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{conversionWorkspace}:describeDatabaseEntities', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeDatabaseEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeDatabaseEntitiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists conversion workspaces in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversionWorkspaces', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversionWorkspacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConversionWorkspacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports the mapping rules for a given conversion workspace. Supports various formats of external rules files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesMappingRulesImport(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/mappingRules:import', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importMappingRulesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rolls back a conversion workspace to the last committed snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesRollback(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:rollback', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are a way to expose the data plane jobs log.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobs(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{conversionWorkspace}:searchBackgroundJobs', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchBackgroundJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchBackgroundJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports a snapshot of the source database into the conversion workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedResponse
     */
	public function datamigrationProjectsLocationsConversionWorkspacesSeed(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:seed', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "seedConversionWorkspaceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsConversionWorkspacesSeedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsResponse
     */
	public function datamigrationProjectsLocationsFetchStaticIps(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:fetchStaticIps', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsFetchStaticIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchStaticIpsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchStaticIpsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListResponse
     */
	public function datamigrationProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new migration job in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/migrationJobs', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "migrationJobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a SSH configuration script to configure the reverse SSH connectivity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsGenerateSshScript(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{migrationJob}:generateSshScript', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateSshScriptRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshScript = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SshScript', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists migration jobs in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/migrationJobs', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMigrationJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMigrationJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single migration job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "migrationJobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsPromote(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:promote', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsPromoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsRestart(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:restart', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsRestartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsResume(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:resume', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start an already created migration job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsStart(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:start', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a running migration job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsStop(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyResponse
     */
	public function datamigrationProjectsLocationsMigrationJobsVerify(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:verify', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsMigrationJobsVerifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelResponse
     */
	public function datamigrationProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListResponse
     */
	public function datamigrationProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new private connection in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/privateConnections', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "privateConnectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single Database Migration Service private connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single private connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateConnection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of private connections in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/privateConnections', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPrivateConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPrivateConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsResponse
     */
	public function datamigrationProjectsLocationsPrivateConnectionsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}