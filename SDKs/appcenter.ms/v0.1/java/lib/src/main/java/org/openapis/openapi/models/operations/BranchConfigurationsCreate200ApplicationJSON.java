/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BranchConfigurationsCreate200ApplicationJSON - The branch build configuration
 */
public class BranchConfigurationsCreate200ApplicationJSON {
    /**
     * The versioning configuration for artifacts built for this branch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artifactVersioning")
    public BranchConfigurationsCreate200ApplicationJSONArtifactVersioning artifactVersioning;
    public BranchConfigurationsCreate200ApplicationJSON withArtifactVersioning(BranchConfigurationsCreate200ApplicationJSONArtifactVersioning artifactVersioning) {
        this.artifactVersioning = artifactVersioning;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badgeIsEnabled")
    public Boolean badgeIsEnabled;
    public BranchConfigurationsCreate200ApplicationJSON withBadgeIsEnabled(Boolean badgeIsEnabled) {
        this.badgeIsEnabled = badgeIsEnabled;
        return this;
    }
    
    /**
     * A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloneFromBranch")
    public String cloneFromBranch;
    public BranchConfigurationsCreate200ApplicationJSON withCloneFromBranch(String cloneFromBranch) {
        this.cloneFromBranch = cloneFromBranch;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;
    public BranchConfigurationsCreate200ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signed")
    public Boolean signed;
    public BranchConfigurationsCreate200ApplicationJSON withSigned(Boolean signed) {
        this.signed = signed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testsEnabled")
    public Boolean testsEnabled;
    public BranchConfigurationsCreate200ApplicationJSON withTestsEnabled(Boolean testsEnabled) {
        this.testsEnabled = testsEnabled;
        return this;
    }
    
    /**
     * The branch build configuration for each toolset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toolsets")
    public BranchConfigurationsCreate200ApplicationJSONToolsets toolsets;
    public BranchConfigurationsCreate200ApplicationJSON withToolsets(BranchConfigurationsCreate200ApplicationJSONToolsets toolsets) {
        this.toolsets = toolsets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger")
    public BranchConfigurationsCreate200ApplicationJSONTriggerEnum trigger;
    public BranchConfigurationsCreate200ApplicationJSON withTrigger(BranchConfigurationsCreate200ApplicationJSONTriggerEnum trigger) {
        this.trigger = trigger;
        return this;
    }
    
}
