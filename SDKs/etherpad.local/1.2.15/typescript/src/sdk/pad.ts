/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Pad {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * appends a chat message
   */
  appendChatMessageUsingGET(
    req: operations.AppendChatMessageUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppendChatMessageUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppendChatMessageUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appendChatMessage";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppendChatMessageUsingGETResponse =
        new operations.AppendChatMessageUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * appends a chat message
   */
  appendChatMessageUsingPOST(
    req: operations.AppendChatMessageUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppendChatMessageUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppendChatMessageUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appendChatMessage";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppendChatMessageUsingPOSTResponse =
        new operations.AppendChatMessageUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendChatMessageUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendChatMessageUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns ok when the current api token is valid
   */
  checkTokenUsingGET(
    config?: AxiosRequestConfig
  ): Promise<operations.CheckTokenUsingGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/checkToken";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckTokenUsingGETResponse =
        new operations.CheckTokenUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns ok when the current api token is valid
   */
  checkTokenUsingPOST(
    config?: AxiosRequestConfig
  ): Promise<operations.CheckTokenUsingPOSTResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/checkToken";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckTokenUsingPOSTResponse =
        new operations.CheckTokenUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTokenUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckTokenUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  createDiffHTMLUsingGET(
    req: operations.CreateDiffHTMLUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDiffHTMLUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDiffHTMLUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createDiffHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDiffHTMLUsingGETResponse =
        new operations.CreateDiffHTMLUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  createDiffHTMLUsingPOST(
    req: operations.CreateDiffHTMLUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDiffHTMLUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDiffHTMLUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createDiffHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDiffHTMLUsingPOSTResponse =
        new operations.CreateDiffHTMLUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDiffHTMLUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateDiffHTMLUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
   */
  createPadUsingGET(
    req: operations.CreatePadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePadUsingGETResponse =
        new operations.CreatePadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreatePadUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreatePadUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreatePadUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreatePadUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
   */
  createPadUsingPOST(
    req: operations.CreatePadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePadUsingPOSTResponse =
        new operations.CreatePadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreatePadUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreatePadUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreatePadUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createPadUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreatePadUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a pad
   */
  deletePadUsingGET(
    req: operations.DeletePadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deletePad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePadUsingGETResponse =
        new operations.DeletePadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeletePadUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeletePadUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeletePadUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeletePadUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a pad
   */
  deletePadUsingPOST(
    req: operations.DeletePadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deletePad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePadUsingPOSTResponse =
        new operations.DeletePadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletePadUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletePadUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletePadUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePadUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletePadUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the chatHead (chat-message) of the pad
   */
  getChatHeadUsingGET(
    req: operations.GETChatHeadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETChatHeadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETChatHeadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getChatHead";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETChatHeadUsingGETResponse =
        new operations.GETChatHeadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHeadUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHeadUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHeadUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHeadUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the chatHead (chat-message) of the pad
   */
  getChatHeadUsingPOST(
    req: operations.GetChatHeadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetChatHeadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetChatHeadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getChatHead";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetChatHeadUsingPOSTResponse =
        new operations.GetChatHeadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHeadUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHeadUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHeadUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHeadUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHeadUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the chat history
   */
  getChatHistoryUsingGET(
    req: operations.GETChatHistoryUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETChatHistoryUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETChatHistoryUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getChatHistory";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETChatHistoryUsingGETResponse =
        new operations.GETChatHistoryUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHistoryUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHistoryUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHistoryUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETChatHistoryUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the chat history
   */
  getChatHistoryUsingPOST(
    req: operations.GetChatHistoryUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetChatHistoryUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetChatHistoryUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getChatHistory";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetChatHistoryUsingPOSTResponse =
        new operations.GetChatHistoryUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHistoryUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHistoryUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHistoryUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getChatHistoryUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetChatHistoryUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the text of a pad formatted as HTML
   */
  getHTMLUsingGET(
    req: operations.GETHTMLUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETHTMLUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETHTMLUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETHTMLUsingGETResponse =
        new operations.GETHTMLUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETHTMLUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETHTMLUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETHTMLUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETHTMLUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the text of a pad formatted as HTML
   */
  getHTMLUsingPOST(
    req: operations.GetHTMLUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetHTMLUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetHTMLUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetHTMLUsingPOSTResponse =
        new operations.GetHTMLUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetHTMLUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetHTMLUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetHTMLUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getHTMLUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetHTMLUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the timestamp of the last revision of the pad
   */
  getLastEditedUsingGET(
    req: operations.GETLastEditedUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETLastEditedUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETLastEditedUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getLastEdited";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETLastEditedUsingGETResponse =
        new operations.GETLastEditedUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETLastEditedUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETLastEditedUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETLastEditedUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETLastEditedUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the timestamp of the last revision of the pad
   */
  getLastEditedUsingPOST(
    req: operations.GetLastEditedUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLastEditedUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLastEditedUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getLastEdited";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLastEditedUsingPOSTResponse =
        new operations.GetLastEditedUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLastEditedUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLastEditedUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLastEditedUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLastEditedUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLastEditedUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return true of false
   */
  getPublicStatusUsingGET(
    req: operations.GETPublicStatusUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPublicStatusUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPublicStatusUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getPublicStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPublicStatusUsingGETResponse =
        new operations.GETPublicStatusUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETPublicStatusUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETPublicStatusUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETPublicStatusUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETPublicStatusUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return true of false
   */
  getPublicStatusUsingPOST(
    req: operations.GetPublicStatusUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPublicStatusUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPublicStatusUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getPublicStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPublicStatusUsingPOSTResponse =
        new operations.GetPublicStatusUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPublicStatusUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPublicStatusUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPublicStatusUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPublicStatusUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPublicStatusUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the read only link of a pad
   */
  getReadOnlyIDUsingGET(
    req: operations.GETReadOnlyIDUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETReadOnlyIDUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETReadOnlyIDUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getReadOnlyID";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETReadOnlyIDUsingGETResponse =
        new operations.GETReadOnlyIDUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETReadOnlyIDUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETReadOnlyIDUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETReadOnlyIDUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETReadOnlyIDUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the read only link of a pad
   */
  getReadOnlyIDUsingPOST(
    req: operations.GetReadOnlyIDUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReadOnlyIDUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReadOnlyIDUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getReadOnlyID";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReadOnlyIDUsingPOSTResponse =
        new operations.GetReadOnlyIDUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetReadOnlyIDUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetReadOnlyIDUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetReadOnlyIDUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReadOnlyIDUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetReadOnlyIDUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the number of revisions of this pad
   */
  getRevisionsCountUsingGET(
    req: operations.GETRevisionsCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRevisionsCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRevisionsCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getRevisionsCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRevisionsCountUsingGETResponse =
        new operations.GETRevisionsCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionsCountUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionsCountUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionsCountUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionsCountUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the number of revisions of this pad
   */
  getRevisionsCountUsingPOST(
    req: operations.GetRevisionsCountUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRevisionsCountUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRevisionsCountUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getRevisionsCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRevisionsCountUsingPOSTResponse =
        new operations.GetRevisionsCountUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionsCountUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionsCountUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionsCountUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionsCountUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionsCountUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the text of a pad
   */
  getTextUsingGET(
    req: operations.GETTextUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETTextUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETTextUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETTextUsingGETResponse =
        new operations.GETTextUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETTextUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETTextUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETTextUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETTextUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the text of a pad
   */
  getTextUsingPOST(
    req: operations.GetTextUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTextUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTextUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTextUsingPOSTResponse =
        new operations.GetTextUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTextUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTextUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTextUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTextUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTextUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * list all the pads
   */
  listAllPadsUsingGET(
    config?: AxiosRequestConfig
  ): Promise<operations.ListAllPadsUsingGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAllPads";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAllPadsUsingGETResponse =
        new operations.ListAllPadsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * list all the pads
   */
  listAllPadsUsingPOST(
    config?: AxiosRequestConfig
  ): Promise<operations.ListAllPadsUsingPOSTResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAllPads";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAllPadsUsingPOSTResponse =
        new operations.ListAllPadsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllPadsUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllPadsUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns an array of authors who contributed to this pad
   */
  listAuthorsOfPadUsingGET(
    req: operations.ListAuthorsOfPadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListAuthorsOfPadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListAuthorsOfPadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAuthorsOfPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAuthorsOfPadUsingGETResponse =
        new operations.ListAuthorsOfPadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns an array of authors who contributed to this pad
   */
  listAuthorsOfPadUsingPOST(
    req: operations.ListAuthorsOfPadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListAuthorsOfPadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListAuthorsOfPadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAuthorsOfPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAuthorsOfPadUsingPOSTResponse =
        new operations.ListAuthorsOfPadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorsOfPadUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAuthorsOfPadUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the number of user that are currently editing this pad
   */
  padUsersCountUsingGET(
    req: operations.PadUsersCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PadUsersCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PadUsersCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/padUsersCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PadUsersCountUsingGETResponse =
        new operations.PadUsersCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the number of user that are currently editing this pad
   */
  padUsersCountUsingPOST(
    req: operations.PadUsersCountUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PadUsersCountUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PadUsersCountUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/padUsersCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PadUsersCountUsingPOSTResponse =
        new operations.PadUsersCountUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersCountUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PadUsersCountUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the list of users that are currently editing this pad
   */
  padUsersUsingGET(
    req: operations.PadUsersUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PadUsersUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PadUsersUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/padUsers";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PadUsersUsingGETResponse =
        new operations.PadUsersUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns the list of users that are currently editing this pad
   */
  padUsersUsingPOST(
    req: operations.PadUsersUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PadUsersUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PadUsersUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/padUsers";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PadUsersUsingPOSTResponse =
        new operations.PadUsersUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.padUsersUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PadUsersUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sends a custom message of type msg to the pad
   */
  sendClientsMessageUsingGET(
    req: operations.SendClientsMessageUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SendClientsMessageUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SendClientsMessageUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sendClientsMessage";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SendClientsMessageUsingGETResponse =
        new operations.SendClientsMessageUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sends a custom message of type msg to the pad
   */
  sendClientsMessageUsingPOST(
    req: operations.SendClientsMessageUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SendClientsMessageUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SendClientsMessageUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sendClientsMessage";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SendClientsMessageUsingPOSTResponse =
        new operations.SendClientsMessageUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendClientsMessageUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SendClientsMessageUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets the text of a pad with HTML
   */
  setHTMLUsingGET(
    req: operations.SetHTMLUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetHTMLUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetHTMLUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetHTMLUsingGETResponse =
        new operations.SetHTMLUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets the text of a pad with HTML
   */
  setHTMLUsingPOST(
    req: operations.SetHTMLUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetHTMLUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetHTMLUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setHTML";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetHTMLUsingPOSTResponse =
        new operations.SetHTMLUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setHTMLUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetHTMLUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets a boolean for the public status of a pad
   */
  setPublicStatusUsingGET(
    req: operations.SetPublicStatusUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetPublicStatusUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetPublicStatusUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setPublicStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetPublicStatusUsingGETResponse =
        new operations.SetPublicStatusUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets a boolean for the public status of a pad
   */
  setPublicStatusUsingPOST(
    req: operations.SetPublicStatusUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetPublicStatusUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetPublicStatusUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setPublicStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetPublicStatusUsingPOSTResponse =
        new operations.SetPublicStatusUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setPublicStatusUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetPublicStatusUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets the text of a pad
   */
  setTextUsingGET(
    req: operations.SetTextUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetTextUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetTextUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetTextUsingGETResponse =
        new operations.SetTextUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * sets the text of a pad
   */
  setTextUsingPOST(
    req: operations.SetTextUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetTextUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetTextUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetTextUsingPOSTResponse =
        new operations.SetTextUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setTextUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SetTextUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
