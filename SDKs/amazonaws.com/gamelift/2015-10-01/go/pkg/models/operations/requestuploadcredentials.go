// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestUploadCredentialsXAmzTargetEnum
type RequestUploadCredentialsXAmzTargetEnum string

const (
	RequestUploadCredentialsXAmzTargetEnumGameLiftRequestUploadCredentials RequestUploadCredentialsXAmzTargetEnum = "GameLift.RequestUploadCredentials"
)

func (e RequestUploadCredentialsXAmzTargetEnum) ToPointer() *RequestUploadCredentialsXAmzTargetEnum {
	return &e
}

func (e *RequestUploadCredentialsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.RequestUploadCredentials":
		*e = RequestUploadCredentialsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestUploadCredentialsXAmzTargetEnum: %v", v)
	}
}

type RequestUploadCredentialsRequest struct {
	RequestUploadCredentialsInput shared.RequestUploadCredentialsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    RequestUploadCredentialsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RequestUploadCredentialsResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	RequestUploadCredentialsOutput *shared.RequestUploadCredentialsOutput
	StatusCode                     int
	RawResponse                    *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
