<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sdfdownloadtasks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata. If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download. The state of operation can be retrieved with sdfdownloadtask.operations.get. Any errors can be found in the error.message. Note that error.details is expected to be empty.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateResponse
     */
	public function displayvideoSdfdownloadtasksCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/sdfdownloadtasks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSdfDownloadTaskRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetResponse
     */
	public function displayvideoSdfdownloadtasksOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoSdfdownloadtasksOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}