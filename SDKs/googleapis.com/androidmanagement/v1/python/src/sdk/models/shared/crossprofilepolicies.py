"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CrossProfilePoliciesCrossProfileCopyPasteEnum(str, Enum):
    r"""Whether text copied from one profile (personal or work) can be pasted in the other profile."""
    CROSS_PROFILE_COPY_PASTE_UNSPECIFIED = 'CROSS_PROFILE_COPY_PASTE_UNSPECIFIED'
    COPY_FROM_WORK_TO_PERSONAL_DISALLOWED = 'COPY_FROM_WORK_TO_PERSONAL_DISALLOWED'
    CROSS_PROFILE_COPY_PASTE_ALLOWED = 'CROSS_PROFILE_COPY_PASTE_ALLOWED'

class CrossProfilePoliciesCrossProfileDataSharingEnum(str, Enum):
    r"""Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately."""
    CROSS_PROFILE_DATA_SHARING_UNSPECIFIED = 'CROSS_PROFILE_DATA_SHARING_UNSPECIFIED'
    CROSS_PROFILE_DATA_SHARING_DISALLOWED = 'CROSS_PROFILE_DATA_SHARING_DISALLOWED'
    DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED = 'DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED'
    CROSS_PROFILE_DATA_SHARING_ALLOWED = 'CROSS_PROFILE_DATA_SHARING_ALLOWED'

class CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum(str, Enum):
    r"""Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls."""
    SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED = 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED'
    SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED = 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED'
    SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED = 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED'

class CrossProfilePoliciesWorkProfileWidgetsDefaultEnum(str, Enum):
    r"""Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here."""
    WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED = 'WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED'
    WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED = 'WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED'
    WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED = 'WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrossProfilePolicies:
    r"""Cross-profile policies applied on the device."""
    
    cross_profile_copy_paste: Optional[CrossProfilePoliciesCrossProfileCopyPasteEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossProfileCopyPaste'), 'exclude': lambda f: f is None }})
    r"""Whether text copied from one profile (personal or work) can be pasted in the other profile."""  
    cross_profile_data_sharing: Optional[CrossProfilePoliciesCrossProfileDataSharingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossProfileDataSharing'), 'exclude': lambda f: f is None }})
    r"""Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately."""  
    show_work_contacts_in_personal_profile: Optional[CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showWorkContactsInPersonalProfile'), 'exclude': lambda f: f is None }})
    r"""Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls."""  
    work_profile_widgets_default: Optional[CrossProfilePoliciesWorkProfileWidgetsDefaultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workProfileWidgetsDefault'), 'exclude': lambda f: f is None }})
    r"""Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here."""  
    