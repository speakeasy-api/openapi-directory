// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ListUsersPublicAscEnum
type ListUsersPublicAscEnum string

const (
	ListUsersPublicAscEnumTrue ListUsersPublicAscEnum = "true"
)

func (e *ListUsersPublicAscEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		*e = ListUsersPublicAscEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersPublicAscEnum: %s", s)
	}
}

// ListUsersPublicOrderEnum
type ListUsersPublicOrderEnum string

const (
	ListUsersPublicOrderEnumLikesReceived ListUsersPublicOrderEnum = "likes_received"
	ListUsersPublicOrderEnumLikesGiven    ListUsersPublicOrderEnum = "likes_given"
	ListUsersPublicOrderEnumTopicCount    ListUsersPublicOrderEnum = "topic_count"
	ListUsersPublicOrderEnumPostCount     ListUsersPublicOrderEnum = "post_count"
	ListUsersPublicOrderEnumTopicsEntered ListUsersPublicOrderEnum = "topics_entered"
	ListUsersPublicOrderEnumPostsRead     ListUsersPublicOrderEnum = "posts_read"
	ListUsersPublicOrderEnumDaysVisited   ListUsersPublicOrderEnum = "days_visited"
)

func (e *ListUsersPublicOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "likes_received":
		fallthrough
	case "likes_given":
		fallthrough
	case "topic_count":
		fallthrough
	case "post_count":
		fallthrough
	case "topics_entered":
		fallthrough
	case "posts_read":
		fallthrough
	case "days_visited":
		*e = ListUsersPublicOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersPublicOrderEnum: %s", s)
	}
}

// ListUsersPublicPeriodEnum
type ListUsersPublicPeriodEnum string

const (
	ListUsersPublicPeriodEnumDaily     ListUsersPublicPeriodEnum = "daily"
	ListUsersPublicPeriodEnumWeekly    ListUsersPublicPeriodEnum = "weekly"
	ListUsersPublicPeriodEnumMonthly   ListUsersPublicPeriodEnum = "monthly"
	ListUsersPublicPeriodEnumQuarterly ListUsersPublicPeriodEnum = "quarterly"
	ListUsersPublicPeriodEnumYearly    ListUsersPublicPeriodEnum = "yearly"
	ListUsersPublicPeriodEnumAll       ListUsersPublicPeriodEnum = "all"
)

func (e *ListUsersPublicPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "monthly":
		fallthrough
	case "quarterly":
		fallthrough
	case "yearly":
		fallthrough
	case "all":
		*e = ListUsersPublicPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersPublicPeriodEnum: %s", s)
	}
}

type ListUsersPublicRequest struct {
	Asc    *ListUsersPublicAscEnum   `queryParam:"style=form,explode=true,name=asc"`
	Order  ListUsersPublicOrderEnum  `queryParam:"style=form,explode=true,name=order"`
	Page   *int64                    `queryParam:"style=form,explode=true,name=page"`
	Period ListUsersPublicPeriodEnum `queryParam:"style=form,explode=true,name=period"`
}

type ListUsersPublic200ApplicationJSONDirectoryItemsUser struct {
	AvatarTemplate string `json:"avatar_template"`
	ID             int64  `json:"id"`
	Name           string `json:"name"`
	Title          string `json:"title"`
	Username       string `json:"username"`
}

type ListUsersPublic200ApplicationJSONDirectoryItems struct {
	DaysVisited   int64                                               `json:"days_visited"`
	ID            int64                                               `json:"id"`
	LikesGiven    int64                                               `json:"likes_given"`
	LikesReceived int64                                               `json:"likes_received"`
	PostCount     int64                                               `json:"post_count"`
	PostsRead     int64                                               `json:"posts_read"`
	TopicCount    int64                                               `json:"topic_count"`
	TopicsEntered int64                                               `json:"topics_entered"`
	User          ListUsersPublic200ApplicationJSONDirectoryItemsUser `json:"user"`
}

type ListUsersPublic200ApplicationJSONMeta struct {
	LastUpdatedAt           string `json:"last_updated_at"`
	LoadMoreDirectoryItems  string `json:"load_more_directory_items"`
	TotalRowsDirectoryItems int64  `json:"total_rows_directory_items"`
}

// ListUsersPublic200ApplicationJSON - directory items response
type ListUsersPublic200ApplicationJSON struct {
	DirectoryItems []ListUsersPublic200ApplicationJSONDirectoryItems `json:"directory_items"`
	Meta           ListUsersPublic200ApplicationJSONMeta             `json:"meta"`
}

type ListUsersPublicResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// directory items response
	ListUsersPublic200ApplicationJSONObject *ListUsersPublic200ApplicationJSON
}
