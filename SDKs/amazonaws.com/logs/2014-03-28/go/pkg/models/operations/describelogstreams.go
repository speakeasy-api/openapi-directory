// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeLogStreamsQueryParams struct {
	// Pagination limit
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// DescribeLogStreamsXAmzTargetEnum
type DescribeLogStreamsXAmzTargetEnum string

const (
	DescribeLogStreamsXAmzTargetEnumLogs20140328DescribeLogStreams DescribeLogStreamsXAmzTargetEnum = "Logs_20140328.DescribeLogStreams"
)

func (e *DescribeLogStreamsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Logs_20140328.DescribeLogStreams":
		*e = DescribeLogStreamsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeLogStreamsXAmzTargetEnum: %s", s)
	}
}

type DescribeLogStreamsHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeLogStreamsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeLogStreamsRequest struct {
	QueryParams DescribeLogStreamsQueryParams
	Headers     DescribeLogStreamsHeaders
	Request     shared.DescribeLogStreamsRequest `request:"mediaType=application/json"`
}

type DescribeLogStreamsResponse struct {
	ContentType string
	// Success
	DescribeLogStreamsResponse *shared.DescribeLogStreamsResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
