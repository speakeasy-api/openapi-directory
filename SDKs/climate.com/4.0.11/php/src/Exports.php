<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Exports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve the binary contents of a processed export request.
     * 
     * Downloads larger than `5MiB` (`5242880 bytes`) in size must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdResponse
     */
	public function fetchExportContentsById(
        \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/exports/{exportId}/contents', \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExportContentsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 410 or $httpResponse->getStatusCode() === 416 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the status of an Export.
     * 
     * Check the status of an **Export** by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdResponse
     */
	public function fetchExportStatusById(
        \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/exports/{exportId}/status', \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExportStatusByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExportStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate a new export request.
     * 
     * Step one in requesting a data product. The method will return an **Export** ID which the caller will use in subsequent `GET` requests.
     * The following `contentTypes` may be requested:
     *   * __application/vnd.climate.acrsi.geojson__ (Beta)
     *      Exports the planting activities accessible by the authenticated user and optionally filtered by resource owner
     *      as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
     * 
     *      The export request definition must contain the following properties:
     *        * plantingStartDate
     *        * plantingEndDate
     *        * resourceOwnerId
     * 
     *      Requires `exports:read` and `plantingActivitySummary:read` scope.
     *   
     *   * __application/vnd.climate.harvest.geojson__
     *      Exports the harvesting activities accessible by the authenticated user and optionally filtered by resource owner
     *      as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
     * 
     *      The export request definition must contain the following properties:
     *        * harvestStartDate
     *        * harvestEndDate
     *        * resourceOwnerId
     * 
     *      Requires `exports:read` and `plantingActivitySummary:read` scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Export $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostExportResponse
     */
	public function postExport(
        \OpenAPI\OpenAPI\Models\Shared\Export $request,
        \OpenAPI\OpenAPI\Models\Operations\PostExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/exports');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createdExport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatedExport', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}