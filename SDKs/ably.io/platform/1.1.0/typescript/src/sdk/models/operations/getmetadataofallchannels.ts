/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)
 */
export enum GetMetadataOfAllChannelsByEnum {
  Value = "value",
  Id = "id",
}

export class GetMetadataOfAllChannelsRequest extends SpeakeasyBase {
  /**
   * The version of the API you wish to use.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Ably-Version",
  })
  xAblyVersion?: string;

  /**
   * optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=by" })
  by?: GetMetadataOfAllChannelsByEnum;

  /**
   * The response format you would like
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: shared.ResponseFormatEnum;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Optionally limits the query to only those channels whose name starts with the given prefix
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prefix",
  })
  prefix?: string;
}

export class GetMetadataOfAllChannelsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  getMetadataOfAllChannels2XXApplicationJSONOneOf?: any;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  getMetadataOfAllChannels2XXTextHTMLString?: string;
}
