// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CarePlanPlanTypeEnum - Can be one of the following: `1`(Goal), `2`(Patient education), `3`(Patient decision aid), `4`(Patient clinical instruction), `5`(Referral to other doctor), `6`(Health concerns)
type CarePlanPlanTypeEnum string

const (
	CarePlanPlanTypeEnumOne   CarePlanPlanTypeEnum = "1"
	CarePlanPlanTypeEnumTwo   CarePlanPlanTypeEnum = "2"
	CarePlanPlanTypeEnumThree CarePlanPlanTypeEnum = "3"
	CarePlanPlanTypeEnumFour  CarePlanPlanTypeEnum = "4"
	CarePlanPlanTypeEnumFive  CarePlanPlanTypeEnum = "5"
	CarePlanPlanTypeEnumSix   CarePlanPlanTypeEnum = "6"
)

func (e *CarePlanPlanTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		*e = CarePlanPlanTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CarePlanPlanTypeEnum: %s", s)
	}
}

// CarePlan - OK
type CarePlan struct {
	Appointment  *string `json:"appointment,omitempty"`
	Code         *string `json:"code,omitempty"`
	CodeSystem   *string `json:"code_system,omitempty"`
	CreatedAt    *string `json:"created_at,omitempty"`
	Description  *string `json:"description,omitempty"`
	ID           *int64  `json:"id,omitempty"`
	Instructions *string `json:"instructions,omitempty"`
	Patient      *string `json:"patient,omitempty"`
	// Can be one of the following: `1`(Goal), `2`(Patient education), `3`(Patient decision aid), `4`(Patient clinical instruction), `5`(Referral to other doctor), `6`(Health concerns)
	PlanType      *CarePlanPlanTypeEnum `json:"plan_type,omitempty"`
	ScheduledDate *string               `json:"scheduled_date,omitempty"`
	Title         *string               `json:"title,omitempty"`
	UpdatedAt     *string               `json:"updated_at,omitempty"`
}
