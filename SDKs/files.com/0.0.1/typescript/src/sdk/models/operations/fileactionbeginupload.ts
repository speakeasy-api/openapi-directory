/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class FileActionBeginUploadRequestBody extends SpeakeasyBase {
  /**
   * Create parent directories if they do not exist?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=mkdir_parents" })
  mkdirParents?: boolean;

  /**
   * Part if uploading a part.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=part" })
  part?: number;

  /**
   * How many parts to fetch?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=parts" })
  parts?: number;

  @SpeakeasyMetadata({ data: "multipart_form, name=ref" })
  ref?: string;

  /**
   * File byte offset to restart from.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=restart" })
  restart?: number;

  /**
   * Total bytes of file being uploaded (include bytes being retained if appending/restarting).
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=size" })
  size?: number;

  /**
   * Allow file rename instead of overwrite?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=with_rename" })
  withRename?: boolean;
}

export class FileActionBeginUploadRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=multipart/form-data" })
  requestBody?: FileActionBeginUploadRequestBody;

  /**
   * Path to operate on.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=path",
  })
  path: string;
}

export class FileActionBeginUploadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The FileActions object.
   */
  @SpeakeasyMetadata({ elemType: shared.FileUploadPartEntity })
  fileUploadPartEntities?: shared.FileUploadPartEntity[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
