"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import batchdescribemergeconflictsinput as shared_batchdescribemergeconflictsinput
from ..shared import batchdescribemergeconflictsoutput as shared_batchdescribemergeconflictsoutput
from enum import Enum
from typing import Any, Optional

class BatchDescribeMergeConflictsXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_BATCH_DESCRIBE_MERGE_CONFLICTS = 'CodeCommit_20150413.BatchDescribeMergeConflicts'


@dataclasses.dataclass
class BatchDescribeMergeConflictsRequest:
    
    batch_describe_merge_conflicts_input: shared_batchdescribemergeconflictsinput.BatchDescribeMergeConflictsInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: BatchDescribeMergeConflictsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class BatchDescribeMergeConflictsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_describe_merge_conflicts_output: Optional[shared_batchdescribemergeconflictsoutput.BatchDescribeMergeConflictsOutput] = dataclasses.field(default=None)
    r"""Success"""  
    commit_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitDoesNotExistException"""  
    commit_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitRequiredException"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    invalid_commit_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCommitException"""  
    invalid_conflict_detail_level_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidConflictDetailLevelException"""  
    invalid_conflict_resolution_strategy_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidConflictResolutionStrategyException"""  
    invalid_continuation_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidContinuationTokenException"""  
    invalid_max_conflict_files_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidMaxConflictFilesException"""  
    invalid_max_merge_hunks_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidMaxMergeHunksException"""  
    invalid_merge_option_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidMergeOptionException"""  
    invalid_repository_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryNameException"""  
    maximum_file_content_to_load_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumFileContentToLoadExceededException"""  
    maximum_items_to_compare_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumItemsToCompareExceededException"""  
    merge_option_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MergeOptionRequiredException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryDoesNotExistException"""  
    repository_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNameRequiredException"""  
    tips_divergence_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TipsDivergenceExceededException"""  
    