// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APIKeyDetailsResponseCodeEnum string

const (
	APIKeyDetailsResponseCodeEnumTwoThousand APIKeyDetailsResponseCodeEnum = "2000"
)

func (e *APIKeyDetailsResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = APIKeyDetailsResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyDetailsResponseCodeEnum: %s", s)
	}
}

type APIKeyDetailsResponseMessageEnum string

const (
	APIKeyDetailsResponseMessageEnumSuccess APIKeyDetailsResponseMessageEnum = "Success"
)

func (e *APIKeyDetailsResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = APIKeyDetailsResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyDetailsResponseMessageEnum: %s", s)
	}
}

// APIKeyDetailsResponse - Success
type APIKeyDetailsResponse struct {
	Code    APIKeyDetailsResponseCodeEnum    `json:"code"`
	Message APIKeyDetailsResponseMessageEnum `json:"message"`
	Result  APIKeyDetails                    `json:"result"`
}
