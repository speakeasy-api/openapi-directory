// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodeHealthEnum - The health status of the TPU node.
type NodeHealthEnum string

const (
	NodeHealthEnumHealthUnspecified    NodeHealthEnum = "HEALTH_UNSPECIFIED"
	NodeHealthEnumHealthy              NodeHealthEnum = "HEALTHY"
	NodeHealthEnumTimeout              NodeHealthEnum = "TIMEOUT"
	NodeHealthEnumUnhealthyTensorflow  NodeHealthEnum = "UNHEALTHY_TENSORFLOW"
	NodeHealthEnumUnhealthyMaintenance NodeHealthEnum = "UNHEALTHY_MAINTENANCE"
)

func (e *NodeHealthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEALTH_UNSPECIFIED":
		fallthrough
	case "HEALTHY":
		fallthrough
	case "TIMEOUT":
		fallthrough
	case "UNHEALTHY_TENSORFLOW":
		fallthrough
	case "UNHEALTHY_MAINTENANCE":
		*e = NodeHealthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeHealthEnum: %s", s)
	}
}

// NodeInput - A TPU instance.
type NodeInput struct {
	// A TPU accelerator configuration.
	AcceleratorConfig *AcceleratorConfig `json:"acceleratorConfig,omitempty"`
	// Required. The type of hardware accelerators associated with this node.
	AcceleratorType *string `json:"acceleratorType,omitempty"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock *string `json:"cidrBlock,omitempty"`
	// The additional data disks for the Node.
	DataDisks []AttachedDisk `json:"dataDisks,omitempty"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description *string `json:"description,omitempty"`
	// The health status of the TPU node.
	Health *NodeHealthEnum `json:"health,omitempty"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `json:"labels,omitempty"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `json:"metadata,omitempty"`
	// Network related configurations.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`
	// Required. The runtime version running in the Node.
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
	// Sets the scheduling options for this node.
	SchedulingConfig *SchedulingConfig `json:"schedulingConfig,omitempty"`
	// A service account.
	ServiceAccount *ServiceAccount `json:"serviceAccount,omitempty"`
	// A set of Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `json:"tags,omitempty"`
}

// NodeAPIVersionEnum - Output only. The API version that created this Node.
type NodeAPIVersionEnum string

const (
	NodeAPIVersionEnumAPIVersionUnspecified NodeAPIVersionEnum = "API_VERSION_UNSPECIFIED"
	NodeAPIVersionEnumV1Alpha1              NodeAPIVersionEnum = "V1_ALPHA1"
	NodeAPIVersionEnumV1                    NodeAPIVersionEnum = "V1"
	NodeAPIVersionEnumV2Alpha1              NodeAPIVersionEnum = "V2_ALPHA1"
	NodeAPIVersionEnumV2                    NodeAPIVersionEnum = "V2"
)

func (e *NodeAPIVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "API_VERSION_UNSPECIFIED":
		fallthrough
	case "V1_ALPHA1":
		fallthrough
	case "V1":
		fallthrough
	case "V2_ALPHA1":
		fallthrough
	case "V2":
		*e = NodeAPIVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAPIVersionEnum: %s", s)
	}
}

// NodeStateEnum - Output only. The current state for the TPU Node.
type NodeStateEnum string

const (
	NodeStateEnumStateUnspecified NodeStateEnum = "STATE_UNSPECIFIED"
	NodeStateEnumCreating         NodeStateEnum = "CREATING"
	NodeStateEnumReady            NodeStateEnum = "READY"
	NodeStateEnumRestarting       NodeStateEnum = "RESTARTING"
	NodeStateEnumReimaging        NodeStateEnum = "REIMAGING"
	NodeStateEnumDeleting         NodeStateEnum = "DELETING"
	NodeStateEnumRepairing        NodeStateEnum = "REPAIRING"
	NodeStateEnumStopped          NodeStateEnum = "STOPPED"
	NodeStateEnumStopping         NodeStateEnum = "STOPPING"
	NodeStateEnumStarting         NodeStateEnum = "STARTING"
	NodeStateEnumPreempted        NodeStateEnum = "PREEMPTED"
	NodeStateEnumTerminated       NodeStateEnum = "TERMINATED"
	NodeStateEnumHiding           NodeStateEnum = "HIDING"
	NodeStateEnumHidden           NodeStateEnum = "HIDDEN"
	NodeStateEnumUnhiding         NodeStateEnum = "UNHIDING"
)

func (e *NodeStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "READY":
		fallthrough
	case "RESTARTING":
		fallthrough
	case "REIMAGING":
		fallthrough
	case "DELETING":
		fallthrough
	case "REPAIRING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STARTING":
		fallthrough
	case "PREEMPTED":
		fallthrough
	case "TERMINATED":
		fallthrough
	case "HIDING":
		fallthrough
	case "HIDDEN":
		fallthrough
	case "UNHIDING":
		*e = NodeStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeStateEnum: %s", s)
	}
}

// Node - A TPU instance.
type Node struct {
	// A TPU accelerator configuration.
	AcceleratorConfig *AcceleratorConfig `json:"acceleratorConfig,omitempty"`
	// Required. The type of hardware accelerators associated with this node.
	AcceleratorType *string `json:"acceleratorType,omitempty"`
	// Output only. The API version that created this Node.
	APIVersion *NodeAPIVersionEnum `json:"apiVersion,omitempty"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock *string `json:"cidrBlock,omitempty"`
	// Output only. The time when the node was created.
	CreateTime *string `json:"createTime,omitempty"`
	// The additional data disks for the Node.
	DataDisks []AttachedDisk `json:"dataDisks,omitempty"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description *string `json:"description,omitempty"`
	// The health status of the TPU node.
	Health *NodeHealthEnum `json:"health,omitempty"`
	// Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
	HealthDescription *string `json:"healthDescription,omitempty"`
	// Output only. The unique identifier for the TPU Node.
	ID *string `json:"id,omitempty"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `json:"labels,omitempty"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `json:"metadata,omitempty"`
	// Output only. Immutable. The name of the TPU.
	Name *string `json:"name,omitempty"`
	// Network related configurations.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`
	// Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
	NetworkEndpoints []NetworkEndpoint `json:"networkEndpoints,omitempty"`
	// Required. The runtime version running in the Node.
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
	// Sets the scheduling options for this node.
	SchedulingConfig *SchedulingConfig `json:"schedulingConfig,omitempty"`
	// A service account.
	ServiceAccount *ServiceAccount `json:"serviceAccount,omitempty"`
	// A set of Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`
	// Output only. The current state for the TPU Node.
	State *NodeStateEnum `json:"state,omitempty"`
	// Output only. The Symptoms that have occurred to the TPU Node.
	Symptoms []Symptom `json:"symptoms,omitempty"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `json:"tags,omitempty"`
}
