/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Source - Source describes the location of the source used for the build.
 */
public class Source {
    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalContexts")
    public SourceContext[] additionalContexts;

    public Source withAdditionalContexts(SourceContext[] additionalContexts) {
        this.additionalContexts = additionalContexts;
        return this;
    }
    
    /**
     * If provided, the input binary artifacts for the build came from this location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artifactStorageSourceUri")
    public String artifactStorageSourceUri;

    public Source withArtifactStorageSourceUri(String artifactStorageSourceUri) {
        this.artifactStorageSourceUri = artifactStorageSourceUri;
        return this;
    }
    
    /**
     * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public SourceContext context;

    public Source withContext(SourceContext context) {
        this.context = context;
        return this;
    }
    
    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileHashes")
    public java.util.Map<String, FileHashes> fileHashes;

    public Source withFileHashes(java.util.Map<String, FileHashes> fileHashes) {
        this.fileHashes = fileHashes;
        return this;
    }
    
    public Source(){}
}
