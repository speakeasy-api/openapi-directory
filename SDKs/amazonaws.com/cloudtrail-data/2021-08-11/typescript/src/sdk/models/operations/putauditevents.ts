/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PutAuditEventsRequestBody extends SpeakeasyBase {
  /**
   * The JSON payload of events that you want to ingest. You can also point to the JSON event payload in a file.
   */
  @SpeakeasyMetadata({ elemType: shared.AuditEvent })
  @Expose({ name: "auditEvents" })
  @Type(() => shared.AuditEvent)
  auditEvents: shared.AuditEvent[];
}

export class PutAuditEventsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutAuditEventsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ARN or ID (the ARN suffix) of a channel.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=channelArn",
  })
  channelArn: string;

  /**
   * A unique identifier that is conditionally required when the channel's resource policy includes an external ID. This value can be any string, such as a passphrase or account number.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=externalId",
  })
  externalId?: string;
}

export class PutAuditEventsResponse extends SpeakeasyBase {
  /**
   * ChannelInsufficientPermission
   */
  @SpeakeasyMetadata()
  channelInsufficientPermission?: any;

  /**
   * ChannelNotFound
   */
  @SpeakeasyMetadata()
  channelNotFound?: any;

  /**
   * ChannelUnsupportedSchema
   */
  @SpeakeasyMetadata()
  channelUnsupportedSchema?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DuplicatedAuditEventId
   */
  @SpeakeasyMetadata()
  duplicatedAuditEventId?: any;

  /**
   * InvalidChannelARN
   */
  @SpeakeasyMetadata()
  invalidChannelARN?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putAuditEventsResponse?: shared.PutAuditEventsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnsupportedOperationException
   */
  @SpeakeasyMetadata()
  unsupportedOperationException?: any;
}
