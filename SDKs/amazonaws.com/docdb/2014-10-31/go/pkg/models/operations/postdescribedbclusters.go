// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeDBClustersActionEnum
type POSTDescribeDBClustersActionEnum string

const (
	POSTDescribeDBClustersActionEnumDescribeDbClusters POSTDescribeDBClustersActionEnum = "DescribeDBClusters"
)

func (e *POSTDescribeDBClustersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBClusters":
		*e = POSTDescribeDBClustersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBClustersActionEnum: %s", s)
	}
}

// POSTDescribeDBClustersVersionEnum
type POSTDescribeDBClustersVersionEnum string

const (
	POSTDescribeDBClustersVersionEnumTwoThousandAndFourteen1031 POSTDescribeDBClustersVersionEnum = "2014-10-31"
)

func (e *POSTDescribeDBClustersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = POSTDescribeDBClustersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBClustersVersionEnum: %s", s)
	}
}

type POSTDescribeDBClustersQueryParams struct {
	Action POSTDescribeDBClustersActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                           `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeDBClustersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeDBClustersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeDBClustersRequest struct {
	QueryParams POSTDescribeDBClustersQueryParams
	Headers     POSTDescribeDBClustersHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeDBClustersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
