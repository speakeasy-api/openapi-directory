<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ExecuteStatementRequestBody
{
    /**
     * <p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>
     * 
     * @var ?bool $continueAfterTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('continueAfterTimeout')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $continueAfterTimeout = null;
    
    /**
     * The name of the database.
     * 
     * @var ?string $database
     */
	#[\JMS\Serializer\Annotation\SerializedName('database')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $database = null;
    
    /**
     * <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ExecuteStatementRequestBodyFormatRecordsAsEnum $formatRecordsAs
     */
	#[\JMS\Serializer\Annotation\SerializedName('formatRecordsAs')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ExecuteStatementRequestBodyFormatRecordsAsEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecuteStatementRequestBodyFormatRecordsAsEnum $formatRecordsAs = null;
    
    /**
     * A value that indicates whether to include metadata in the results.
     * 
     * @var ?bool $includeResultMetadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeResultMetadata')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeResultMetadata = null;
    
    /**
     * <p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SqlParameter> $parameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('parameters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SqlParameter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parameters = null;
    
    /**
     * The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
     * 
     * @var string $resourceArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('resourceArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $resourceArn;
    
    /**
     * Options that control how the result set is returned.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ExecuteStatementRequestBodyResultSetOptions $resultSetOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('resultSetOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\ExecuteStatementRequestBodyResultSetOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecuteStatementRequestBodyResultSetOptions $resultSetOptions = null;
    
    /**
     * <p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>
     * 
     * @var ?string $schema
     */
	#[\JMS\Serializer\Annotation\SerializedName('schema')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $schema = null;
    
    /**
     * <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
     * 
     * @var string $secretArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('secretArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $secretArn;
    
    /**
     * The SQL statement to run.
     * 
     * @var string $sql
     */
	#[\JMS\Serializer\Annotation\SerializedName('sql')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sql;
    
    /**
     * <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
     * 
     * @var ?string $transactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transactionId = null;
    
	public function __construct()
	{
		$this->continueAfterTimeout = null;
		$this->database = null;
		$this->formatRecordsAs = null;
		$this->includeResultMetadata = null;
		$this->parameters = null;
		$this->resourceArn = "";
		$this->resultSetOptions = null;
		$this->schema = null;
		$this->secretArn = "";
		$this->sql = "";
		$this->transactionId = null;
	}
}
