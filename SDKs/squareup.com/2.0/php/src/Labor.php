<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Labor 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateBreakType
     * 
     * Creates a new `BreakType`.
     * 
     * A `BreakType` is a template for creating `Break` objects.
     * You must provide the following values in your request to this
     * endpoint:
     * 
     * - `location_id`
     * - `break_name`
     * - `expected_duration`
     * - `is_paid`
     * 
     * You can only have three `BreakType` instances per location. If you attempt to add a fourth
     * `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
     * is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateBreakTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBreakTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBreakTypeResponse
     */
	public function createBreakType(
        \OpenAPI\OpenAPI\Models\Shared\CreateBreakTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBreakTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBreakTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/break-types');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBreakTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBreakTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateBreakTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateShift
     * 
     * Creates a new `Shift`.
     * 
     * A `Shift` represents a complete workday for a single employee.
     * You must provide the following values in your request to this
     * endpoint:
     * 
     * - `location_id`
     * - `employee_id`
     * - `start_at`
     * 
     * An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
     * - The `status` of the new `Shift` is `OPEN` and the employee has another
     * shift with an `OPEN` status.
     * - The `start_at` date is in the future.
     * - The `start_at` or `end_at` date overlaps another shift for the same employee.
     * - The `Break` instances are set in the request and a break `start_at`
     * is before the `Shift.start_at`, a break `end_at` is after
     * the `Shift.end_at`, or both.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateShiftRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShiftSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateShiftResponse
     */
	public function createShift(
        \OpenAPI\OpenAPI\Models\Shared\CreateShiftRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateShiftSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateShiftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/shifts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateShiftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShiftResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateShiftResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteBreakType
     * 
     * Deletes an existing `BreakType`.
     * 
     * A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeResponse
     */
	public function deleteBreakType(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/break-types/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBreakTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteBreakTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteBreakTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteShift
     * 
     * Deletes a `Shift`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShiftRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShiftSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteShiftResponse
     */
	public function deleteShift(
        \OpenAPI\OpenAPI\Models\Operations\DeleteShiftRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteShiftSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteShiftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/shifts/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteShiftRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteShiftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteShiftResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteShiftResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetBreakType
     * 
     * Returns a single `BreakType` specified by `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeResponse
     */
	public function getBreakType(
        \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/break-types/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBreakTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBreakTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBreakTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetEmployeeWage
     * 
     * Returns a single `EmployeeWage` specified by `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageResponse
     */
	public function getEmployeeWage(
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/employee-wages/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmployeeWageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEmployeeWageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetEmployeeWageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetShift
     * 
     * Returns a single `Shift` specified by `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShiftRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShiftSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShiftResponse
     */
	public function getShift(
        \OpenAPI\OpenAPI\Models\Operations\GetShiftRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetShiftSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShiftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/shifts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetShiftRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShiftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShiftResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetShiftResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetTeamMemberWage
     * 
     * Returns a single `TeamMemberWage` specified by `id `.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageResponse
     */
	public function getTeamMemberWage(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/team-member-wages/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMemberWageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamMemberWageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTeamMemberWageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListBreakTypes
     * 
     * Returns a paginated list of `BreakType` instances for a business.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesResponse
     */
	public function listBreakTypes(
        \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/break-types');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBreakTypesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBreakTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBreakTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBreakTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListEmployeeWages
     * 
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesResponse
     */
	public function listEmployeeWages(
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/employee-wages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEmployeeWagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEmployeeWagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEmployeeWagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListTeamMemberWages
     * 
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesResponse
     */
	public function listTeamMemberWages(
        \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/team-member-wages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberWagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTeamMemberWagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTeamMemberWagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListWorkweekConfigs
     * 
     * Returns a list of `WorkweekConfig` instances for a business.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsResponse
     */
	public function listWorkweekConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/workweek-configs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkweekConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkweekConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkweekConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchShifts
     * 
     * Returns a paginated list of `Shift` records for a business.
     * The list to be returned can be filtered by:
     * - Location IDs.
     * - Employee IDs.
     * - Shift status (`OPEN` and `CLOSED`).
     * - Shift start.
     * - Shift end.
     * - Workday details.
     * 
     * The list can be sorted by:
     * - `start_at`.
     * - `end_at`.
     * - `created_at`.
     * - `updated_at`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchShiftsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchShiftsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchShiftsResponse
     */
	public function searchShifts(
        \OpenAPI\OpenAPI\Models\Shared\SearchShiftsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchShiftsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchShiftsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/shifts/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchShiftsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchShiftsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchShiftsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateBreakType
     * 
     * Updates an existing `BreakType`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeResponse
     */
	public function updateBreakType(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/break-types/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateBreakTypeRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBreakTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateBreakTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateBreakTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateShift
     * 
     * Updates an existing `Shift`.
     * 
     * When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
     * the `end_at` property set to a valid RFC-3339 datetime string.
     * 
     * When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
     * set on each `Break`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShiftRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShiftSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateShiftResponse
     */
	public function updateShift(
        \OpenAPI\OpenAPI\Models\Operations\UpdateShiftRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateShiftSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateShiftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/shifts/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateShiftRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateShiftRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateShiftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateShiftResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateShiftResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateWorkweekConfig
     * 
     * Updates a `WorkweekConfig`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigResponse
     */
	public function updateWorkweekConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/labor/workweek-configs/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateWorkweekConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkweekConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateWorkweekConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateWorkweekConfigResponse', 'json');
            }
        }

        return $response;
    }
}