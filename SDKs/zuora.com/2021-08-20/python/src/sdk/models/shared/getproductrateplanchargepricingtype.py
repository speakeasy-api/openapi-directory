"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import getproductrateplanchargepricingtiertype as shared_getproductrateplanchargepricingtiertype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETProductRatePlanChargePricingType:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Currency used by the charge model. For example: USD or EUR"""  
    discount_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountAmount'), 'exclude': lambda f: f is None }})
    r"""Value subtracted from price in currency specified. Used only when the charge model is DiscountFixedAmount."""  
    discount_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountPercentage'), 'exclude': lambda f: f is None }})
    r"""Percent discount applied to the price. Used only when the charge model is DiscountPercentage."""  
    included_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedUnits'), 'exclude': lambda f: f is None }})
    r"""Specifies the number of units in the base set of units when the charge model is Overage."""  
    overage_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overagePrice'), 'exclude': lambda f: f is None }})
    r"""Price per unit when base set of units is exceeded. Used only when charge model is Overage or Tiered with Overage."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The decimal value that applies when the charge model is not tiered"""  
    tiers: Optional[list[shared_getproductrateplanchargepricingtiertype.GETProductRatePlanChargePricingTierType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tiers'), 'exclude': lambda f: f is None }})
    r"""Container for one or many defined tier ranges with distinct pricing.  Applies when model is `Tiered`, `TieredWithOverage`, or `Volume`"""  
    