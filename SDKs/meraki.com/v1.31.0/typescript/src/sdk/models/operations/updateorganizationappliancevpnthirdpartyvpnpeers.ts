/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
 */
export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum {
  One = "1",
  Two = "2",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum {
  Md5 = "md5",
  Sha1 = "sha1",
  Sha256 = "sha256",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum {
  Aes128 = "aes128",
  Aes192 = "aes192",
  Aes256 = "aes256",
  Des = "des",
  Null = "null",
  Tripledes = "tripledes",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum {
  Md5 = "md5",
  Sha1 = "sha1",
  Sha256 = "sha256",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum {
  Aes128 = "aes128",
  Aes192 = "aes192",
  Aes256 = "aes256",
  Des = "des",
  Tripledes = "tripledes",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum {
  Default = "default",
  Prfmd5 = "prfmd5",
  Prfsha1 = "prfsha1",
  Prfsha256 = "prfsha256",
}

/**
 * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 */
export class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies extends SpeakeasyBase {
  /**
   * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childAuthAlgo" })
  childAuthAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum[];

  /**
   * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childCipherAlgo" })
  childCipherAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum[];

  /**
   * The lifetime of the Phase 2 SA in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childLifetime" })
  childLifetime?: number;

  /**
   * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childPfsGroup" })
  childPfsGroup?: string[];

  /**
   * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeAuthAlgo" })
  ikeAuthAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum[];

  /**
   * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeCipherAlgo" })
  ikeCipherAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum[];

  /**
   * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeDiffieHellmanGroup" })
  ikeDiffieHellmanGroup?: string[];

  /**
   * The lifetime of the Phase 1 SA in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeLifetime" })
  ikeLifetime?: number;

  /**
   * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikePrfAlgo" })
  ikePrfAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum[];
}

export class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers extends SpeakeasyBase {
  /**
   * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeVersion" })
  ikeVersion?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum;

  /**
   * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipsecPolicies" })
  @Type(
    () =>
      UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies
  )
  ipsecPolicies?: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies;

  /**
   * One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipsecPoliciesPreset" })
  ipsecPoliciesPreset?: string;

  /**
   * [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localId" })
  localId?: string;

  /**
   * The name of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTags" })
  networkTags?: string[];

  /**
   * The list of the private subnets of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateSubnets" })
  privateSubnets: string[];

  /**
   * [optional] The public IP of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicIp" })
  publicIp?: string;

  /**
   * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteId" })
  remoteId?: string;

  /**
   * The shared secret with the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret: string;
}

export class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody extends SpeakeasyBase {
  /**
   * The list of VPN peers
   */
  @SpeakeasyMetadata({
    elemType: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers,
  })
  @Expose({ name: "peers" })
  @Type(() => UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers)
  peers: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers[];
}

export class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

/**
 * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
 */
export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum {
  One = "1",
  Two = "2",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum {
  Md5 = "md5",
  Sha1 = "sha1",
  Sha256 = "sha256",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum {
  Aes128 = "aes128",
  Aes192 = "aes192",
  Aes256 = "aes256",
  Des = "des",
  Null = "null",
  Tripledes = "tripledes",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum {
  Md5 = "md5",
  Sha1 = "sha1",
  Sha256 = "sha256",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum {
  Aes128 = "aes128",
  Aes192 = "aes192",
  Aes256 = "aes256",
  Des = "des",
  Tripledes = "tripledes",
}

export enum UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum {
  Default = "default",
  Prfmd5 = "prfmd5",
  Prfsha1 = "prfsha1",
  Prfsha256 = "prfsha256",
}

/**
 * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 */
export class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies extends SpeakeasyBase {
  /**
   * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childAuthAlgo" })
  childAuthAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum[];

  /**
   * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childCipherAlgo" })
  childCipherAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum[];

  /**
   * The lifetime of the Phase 2 SA in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childLifetime" })
  childLifetime?: number;

  /**
   * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "childPfsGroup" })
  childPfsGroup?: string[];

  /**
   * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeAuthAlgo" })
  ikeAuthAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum[];

  /**
   * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeCipherAlgo" })
  ikeCipherAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum[];

  /**
   * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeDiffieHellmanGroup" })
  ikeDiffieHellmanGroup?: string[];

  /**
   * The lifetime of the Phase 1 SA in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeLifetime" })
  ikeLifetime?: number;

  /**
   * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikePrfAlgo" })
  ikePrfAlgo?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum[];
}

export class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers extends SpeakeasyBase {
  /**
   * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ikeVersion" })
  ikeVersion?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum;

  /**
   * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipsecPolicies" })
  @Type(
    () =>
      UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies
  )
  ipsecPolicies?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies;

  /**
   * One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipsecPoliciesPreset" })
  ipsecPoliciesPreset?: string;

  /**
   * [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localId" })
  localId?: string;

  /**
   * The name of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTags" })
  networkTags?: string[];

  /**
   * The list of the private subnets of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateSubnets" })
  privateSubnets?: string[];

  /**
   * [optional] The public IP of the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicIp" })
  publicIp?: string;

  /**
   * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remoteId" })
  remoteId?: string;

  /**
   * The shared secret with the VPN peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;
}

/**
 * Successful operation
 */
export class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON extends SpeakeasyBase {
  /**
   * The list of VPN peers
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers,
  })
  @Expose({ name: "peers" })
  @Type(
    () =>
      UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers
  )
  peers?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers[];
}

export class UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject?: UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON;
}
