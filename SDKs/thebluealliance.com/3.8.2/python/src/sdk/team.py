"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Team:
    r"""Calls that return team or team-specific information."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_district_rankings(self, request: operations.GetDistrictRankingsRequest, security: operations.GetDistrictRankingsSecurity) -> operations.GetDistrictRankingsResponse:
        r"""Gets a list of team district rankings for the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictRankingsRequest, base_url, '/district/{district_key}/rankings', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictRankingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DistrictRanking]])
                res.district_rankings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams(self, request: operations.GetDistrictTeamsRequest, security: operations.GetDistrictTeamsSecurity) -> operations.GetDistrictTeamsResponse:
        r"""Gets a list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsRequest, base_url, '/district/{district_key}/teams', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams_keys(self, request: operations.GetDistrictTeamsKeysRequest, security: operations.GetDistrictTeamsKeysSecurity) -> operations.GetDistrictTeamsKeysResponse:
        r"""Gets a list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsKeysRequest, base_url, '/district/{district_key}/teams/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_district_teams_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams_simple(self, request: operations.GetDistrictTeamsSimpleRequest, security: operations.GetDistrictTeamsSimpleSecurity) -> operations.GetDistrictTeamsSimpleResponse:
        r"""Gets a short-form list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsSimpleRequest, base_url, '/district/{district_key}/teams/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSimple]])
                res.team_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_teams(self, request: operations.GetEventTeamsRequest, security: operations.GetEventTeamsSecurity) -> operations.GetEventTeamsResponse:
        r"""Gets a list of `Team` objects that competed in the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventTeamsRequest, base_url, '/event/{event_key}/teams', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_teams_keys(self, request: operations.GetEventTeamsKeysRequest, security: operations.GetEventTeamsKeysSecurity) -> operations.GetEventTeamsKeysResponse:
        r"""Gets a list of `Team` keys that competed in the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventTeamsKeysRequest, base_url, '/event/{event_key}/teams/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventTeamsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_event_teams_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_teams_simple(self, request: operations.GetEventTeamsSimpleRequest, security: operations.GetEventTeamsSimpleSecurity) -> operations.GetEventTeamsSimpleResponse:
        r"""Gets a short-form list of `Team` objects that competed in the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventTeamsSimpleRequest, base_url, '/event/{event_key}/teams/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventTeamsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSimple]])
                res.team_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_teams_statuses(self, request: operations.GetEventTeamsStatusesRequest, security: operations.GetEventTeamsStatusesSecurity) -> operations.GetEventTeamsStatusesResponse:
        r"""Gets a key-value list of the event statuses for teams competing at the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventTeamsStatusesRequest, base_url, '/event/{event_key}/teams/statuses', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventTeamsStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, shared.TeamEventStatus]])
                res.get_event_teams_statuses_200_application_json_object = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team(self, request: operations.GetTeamRequest, security: operations.GetTeamSecurity) -> operations.GetTeamResponse:
        r"""Gets a `Team` object for the team referenced by the given key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamRequest, base_url, '/team/{team_key}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Team])
                res.team = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_awards(self, request: operations.GetTeamAwardsRequest, security: operations.GetTeamAwardsSecurity) -> operations.GetTeamAwardsResponse:
        r"""Gets a list of awards the given team has won."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamAwardsRequest, base_url, '/team/{team_key}/awards', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamAwardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Award]])
                res.awards = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_awards_by_year(self, request: operations.GetTeamAwardsByYearRequest, security: operations.GetTeamAwardsByYearSecurity) -> operations.GetTeamAwardsByYearResponse:
        r"""Gets a list of awards the given team has won in a given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamAwardsByYearRequest, base_url, '/team/{team_key}/awards/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamAwardsByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Award]])
                res.awards = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_districts(self, request: operations.GetTeamDistrictsRequest, security: operations.GetTeamDistrictsSecurity) -> operations.GetTeamDistrictsResponse:
        r"""Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamDistrictsRequest, base_url, '/team/{team_key}/districts', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamDistrictsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DistrictList]])
                res.district_lists = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_awards(self, request: operations.GetTeamEventAwardsRequest, security: operations.GetTeamEventAwardsSecurity) -> operations.GetTeamEventAwardsResponse:
        r"""Gets a list of awards the given team won at the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventAwardsRequest, base_url, '/team/{team_key}/event/{event_key}/awards', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventAwardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Award]])
                res.awards = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches(self, request: operations.GetTeamEventMatchesRequest, security: operations.GetTeamEventMatchesSecurity) -> operations.GetTeamEventMatchesResponse:
        r"""Gets a list of matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesRequest, base_url, '/team/{team_key}/event/{event_key}/matches', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches_keys(self, request: operations.GetTeamEventMatchesKeysRequest, security: operations.GetTeamEventMatchesKeysSecurity) -> operations.GetTeamEventMatchesKeysResponse:
        r"""Gets a list of match keys for matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesKeysRequest, base_url, '/team/{team_key}/event/{event_key}/matches/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_event_matches_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches_simple(self, request: operations.GetTeamEventMatchesSimpleRequest, security: operations.GetTeamEventMatchesSimpleSecurity) -> operations.GetTeamEventMatchesSimpleResponse:
        r"""Gets a short-form list of matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesSimpleRequest, base_url, '/team/{team_key}/event/{event_key}/matches/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_status(self, request: operations.GetTeamEventStatusRequest, security: operations.GetTeamEventStatusSecurity) -> operations.GetTeamEventStatusResponse:
        r"""Gets the competition rank and status of the team at the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventStatusRequest, base_url, '/team/{team_key}/event/{event_key}/status', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeamEventStatus])
                res.team_event_status = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events(self, request: operations.GetTeamEventsRequest, security: operations.GetTeamEventsSecurity) -> operations.GetTeamEventsResponse:
        r"""Gets a list of all events this team has competed at."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsRequest, base_url, '/team/{team_key}/events', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Event]])
                res.events = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_by_year(self, request: operations.GetTeamEventsByYearRequest, security: operations.GetTeamEventsByYearSecurity) -> operations.GetTeamEventsByYearResponse:
        r"""Gets a list of events this team has competed at in the given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsByYearRequest, base_url, '/team/{team_key}/events/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Event]])
                res.events = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_by_year_keys(self, request: operations.GetTeamEventsByYearKeysRequest, security: operations.GetTeamEventsByYearKeysSecurity) -> operations.GetTeamEventsByYearKeysResponse:
        r"""Gets a list of the event keys for events this team has competed at in the given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsByYearKeysRequest, base_url, '/team/{team_key}/events/{year}/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsByYearKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_events_by_year_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_by_year_simple(self, request: operations.GetTeamEventsByYearSimpleRequest, security: operations.GetTeamEventsByYearSimpleSecurity) -> operations.GetTeamEventsByYearSimpleResponse:
        r"""Gets a short-form list of events this team has competed at in the given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsByYearSimpleRequest, base_url, '/team/{team_key}/events/{year}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsByYearSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EventSimple]])
                res.event_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_keys(self, request: operations.GetTeamEventsKeysRequest, security: operations.GetTeamEventsKeysSecurity) -> operations.GetTeamEventsKeysResponse:
        r"""Gets a list of the event keys for all events this team has competed at."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsKeysRequest, base_url, '/team/{team_key}/events/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_events_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_simple(self, request: operations.GetTeamEventsSimpleRequest, security: operations.GetTeamEventsSimpleSecurity) -> operations.GetTeamEventsSimpleResponse:
        r"""Gets a short-form list of all events this team has competed at."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsSimpleRequest, base_url, '/team/{team_key}/events/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EventSimple]])
                res.event_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_events_statuses_by_year(self, request: operations.GetTeamEventsStatusesByYearRequest, security: operations.GetTeamEventsStatusesByYearSecurity) -> operations.GetTeamEventsStatusesByYearResponse:
        r"""Gets a key-value list of the event statuses for events this team has competed at in the given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventsStatusesByYearRequest, base_url, '/team/{team_key}/events/{year}/statuses', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventsStatusesByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, shared.TeamEventStatus]])
                res.get_team_events_statuses_by_year_200_application_json_object = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year(self, request: operations.GetTeamMatchesByYearRequest, security: operations.GetTeamMatchesByYearSecurity) -> operations.GetTeamMatchesByYearResponse:
        r"""Gets a list of matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearRequest, base_url, '/team/{team_key}/matches/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year_keys(self, request: operations.GetTeamMatchesByYearKeysRequest, security: operations.GetTeamMatchesByYearKeysSecurity) -> operations.GetTeamMatchesByYearKeysResponse:
        r"""Gets a list of match keys for matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearKeysRequest, base_url, '/team/{team_key}/matches/{year}/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_matches_by_year_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year_simple(self, request: operations.GetTeamMatchesByYearSimpleRequest, security: operations.GetTeamMatchesByYearSimpleSecurity) -> operations.GetTeamMatchesByYearSimpleResponse:
        r"""Gets a short-form list of matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearSimpleRequest, base_url, '/team/{team_key}/matches/{year}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MatchSimple]])
                res.match_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_media_by_tag(self, request: operations.GetTeamMediaByTagRequest, security: operations.GetTeamMediaByTagSecurity) -> operations.GetTeamMediaByTagResponse:
        r"""Gets a list of Media (videos / pictures) for the given team and tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMediaByTagRequest, base_url, '/team/{team_key}/media/tag/{media_tag}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMediaByTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Media]])
                res.media = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_media_by_tag_year(self, request: operations.GetTeamMediaByTagYearRequest, security: operations.GetTeamMediaByTagYearSecurity) -> operations.GetTeamMediaByTagYearResponse:
        r"""Gets a list of Media (videos / pictures) for the given team, tag and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMediaByTagYearRequest, base_url, '/team/{team_key}/media/tag/{media_tag}/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMediaByTagYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Media]])
                res.media = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_media_by_year(self, request: operations.GetTeamMediaByYearRequest, security: operations.GetTeamMediaByYearSecurity) -> operations.GetTeamMediaByYearResponse:
        r"""Gets a list of Media (videos / pictures) for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMediaByYearRequest, base_url, '/team/{team_key}/media/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMediaByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Media]])
                res.media = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_robots(self, request: operations.GetTeamRobotsRequest, security: operations.GetTeamRobotsSecurity) -> operations.GetTeamRobotsResponse:
        r"""Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamRobotsRequest, base_url, '/team/{team_key}/robots', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamRobotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamRobot]])
                res.team_robots = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_simple(self, request: operations.GetTeamSimpleRequest, security: operations.GetTeamSimpleSecurity) -> operations.GetTeamSimpleResponse:
        r"""Gets a `Team_Simple` object for the team referenced by the given key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamSimpleRequest, base_url, '/team/{team_key}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeamSimple])
                res.team_simple = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_social_media(self, request: operations.GetTeamSocialMediaRequest, security: operations.GetTeamSocialMediaSecurity) -> operations.GetTeamSocialMediaResponse:
        r"""Gets a list of Media (social media) for the given team."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamSocialMediaRequest, base_url, '/team/{team_key}/social_media', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamSocialMediaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Media]])
                res.media = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_years_participated(self, request: operations.GetTeamYearsParticipatedRequest, security: operations.GetTeamYearsParticipatedSecurity) -> operations.GetTeamYearsParticipatedResponse:
        r"""Gets a list of years in which the team participated in at least one competition."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamYearsParticipatedRequest, base_url, '/team/{team_key}/years_participated', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamYearsParticipatedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_team_years_participated_200_application_json_integers = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams(self, request: operations.GetTeamsRequest, security: operations.GetTeamsSecurity) -> operations.GetTeamsResponse:
        r"""Gets a list of `Team` objects, paginated in groups of 500."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsRequest, base_url, '/teams/{page_num}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams_by_year(self, request: operations.GetTeamsByYearRequest, security: operations.GetTeamsByYearSecurity) -> operations.GetTeamsByYearResponse:
        r"""Gets a list of `Team` objects that competed in the given year, paginated in groups of 500."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsByYearRequest, base_url, '/teams/{year}/{page_num}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams_by_year_keys(self, request: operations.GetTeamsByYearKeysRequest, security: operations.GetTeamsByYearKeysSecurity) -> operations.GetTeamsByYearKeysResponse:
        r"""Gets a list Team Keys that competed in the given year, paginated in groups of 500."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsByYearKeysRequest, base_url, '/teams/{year}/{page_num}/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsByYearKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_teams_by_year_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams_by_year_simple(self, request: operations.GetTeamsByYearSimpleRequest, security: operations.GetTeamsByYearSimpleSecurity) -> operations.GetTeamsByYearSimpleResponse:
        r"""Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsByYearSimpleRequest, base_url, '/teams/{year}/{page_num}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsByYearSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSimple]])
                res.team_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams_keys(self, request: operations.GetTeamsKeysRequest, security: operations.GetTeamsKeysSecurity) -> operations.GetTeamsKeysResponse:
        r"""Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsKeysRequest, base_url, '/teams/{page_num}/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_teams_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_teams_simple(self, request: operations.GetTeamsSimpleRequest, security: operations.GetTeamsSimpleSecurity) -> operations.GetTeamsSimpleResponse:
        r"""Gets a list of short form `Team_Simple` objects, paginated in groups of 500."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsSimpleRequest, base_url, '/teams/{page_num}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSimple]])
                res.team_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    