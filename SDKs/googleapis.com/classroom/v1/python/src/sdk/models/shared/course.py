"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import coursematerialset as shared_coursematerialset
from ..shared import drivefolder as shared_drivefolder
from ..shared import gradebooksettings as shared_gradebooksettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CourseCourseStateEnum(str, Enum):
    r"""State of the course. If unspecified, the default state is `PROVISIONED`."""
    COURSE_STATE_UNSPECIFIED = 'COURSE_STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    PROVISIONED = 'PROVISIONED'
    DECLINED = 'DECLINED'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Course:
    r"""A Course in Classroom."""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Absolute link to this course in the Classroom web UI. Read-only."""  
    calendar_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendarId'), 'exclude': lambda f: f is None }})
    r"""The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. Read-only."""  
    course_group_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseGroupEmail'), 'exclude': lambda f: f is None }})
    r"""The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only."""  
    course_material_sets: Optional[list[shared_coursematerialset.CourseMaterialSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseMaterialSets'), 'exclude': lambda f: f is None }})
    r"""Sets of materials that appear on the \\"about\\" page of this course. Read-only."""  
    course_state: Optional[CourseCourseStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseState'), 'exclude': lambda f: f is None }})
    r"""State of the course. If unspecified, the default state is `PROVISIONED`."""  
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""Creation time of the course. Specifying this field in a course update mask results in an error. Read-only."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional description. For example, \\"We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\\" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters."""  
    description_heading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptionHeading'), 'exclude': lambda f: f is None }})
    r"""Optional heading for the description. For example, \\"Welcome to 10th Grade Biology.\\" If set, this field must be a valid UTF-8 string and no longer than 3600 characters."""  
    enrollment_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enrollmentCode'), 'exclude': lambda f: f is None }})
    r"""Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only."""  
    gradebook_settings: Optional[shared_gradebooksettings.GradebookSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradebookSettings'), 'exclude': lambda f: f is None }})
    r"""The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details."""  
    guardians_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guardiansEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not guardian notifications are enabled for this course. Read-only."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the course. For example, \\"10th Grade Biology\\". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\\"me\\"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only."""  
    room: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room'), 'exclude': lambda f: f is None }})
    r"""Optional room location. For example, \\"301\\". If set, this field must be a valid UTF-8 string and no longer than 650 characters."""  
    section: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})
    r"""Section of the course. For example, \\"Period 2\\". If set, this field must be a valid UTF-8 string and no longer than 2800 characters."""  
    teacher_folder: Optional[shared_drivefolder.DriveFolder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teacherFolder'), 'exclude': lambda f: f is None }})
    r"""Representation of a Google Drive folder."""  
    teacher_group_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teacherGroupEmail'), 'exclude': lambda f: f is None }})
    r"""The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only."""  
    