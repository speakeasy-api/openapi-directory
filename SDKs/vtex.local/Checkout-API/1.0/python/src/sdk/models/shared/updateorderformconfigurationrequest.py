"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import paymentconfiguration as shared_paymentconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateorderFormconfigurationRequestApps:
    
    fields_: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""Array of fields available to the app."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""App ID."""  
    major: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('major'), 'exclude': lambda f: f is None }})
    r"""App major version."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateorderFormconfigurationRequestTaxConfiguration:
    r"""External tax service configuration."""
    
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId'), 'exclude': lambda f: f is None }})
    r"""Custom data ID sent to the tax system."""  
    authorization_header: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationHeader'), 'exclude': lambda f: f is None }})
    r"""Authorization header."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Endpoint URL."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateorderFormconfigurationRequest:
    
    allow_manual_price: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowManualPrice') }})
    r"""Allows the editing of SKU prices right in the cart."""  
    allow_multiple_deliveries: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowMultipleDeliveries') }})
    r"""On the same purchase, allows the selection of items from multiple delivery channels."""  
    apps: list[UpdateorderFormconfigurationRequestApps] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apps') }})
    r"""Array of objects containing Apps configuration information."""  
    decimal_digits_precision: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimalDigitsPrecision') }})
    r"""Number of price digits."""  
    minimum_quantity_accumulated_for_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumQuantityAccumulatedForItems') }})
    r"""Minimum SKU quantity by cart."""  
    minimum_value_accumulated: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumValueAccumulated') }})
    r"""Minimum cart value."""  
    payment_configuration: shared_paymentconfiguration.PaymentConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentConfiguration') }})
    r"""Payment Configuration object"""  
    tax_configuration: UpdateorderFormconfigurationRequestTaxConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxConfiguration') }})
    r"""External tax service configuration."""  
    mask_first_purchase_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maskFirstPurchaseData'), 'exclude': lambda f: f is None }})
    r"""Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data."""  
    max_number_of_white_label_sellers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberOfWhiteLabelSellers'), 'exclude': lambda f: f is None }})
    r"""Allows the input of a limit of white label sellers involved on the cart."""  
    payment_system_to_check_first_installment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSystemToCheckFirstInstallment'), 'exclude': lambda f: f is None }})
    r"""If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt)."""  
    recaptcha_validation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recaptchaValidation'), 'exclude': lambda f: f is None }})
    r"""Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)
    
    
    Possible values are:
    
    - `\"never\"`: no purchases are validated with reCAPTCHA.
    
    - `\"always\"`: every purchase is validated with reCAPTCHA.
    
    - `\"vtexCriteria\"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEXâ€™s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.
    """  
    