"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum(str, Enum):
    r"""The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'"""
    MINIMIZE_CLIENT_DOWNTIME = 'minimizeClientDowntime'
    MINIMIZE_UPGRADE_TIME = 'minimizeUpgradeTime'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSettingsRequestBody:
    
    ipv6_bridge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6BridgeEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)"""  
    led_lights_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ledLightsOn'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)"""  
    location_analytics_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationAnalyticsEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling location analytics for your network"""  
    meshing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meshingEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling meshing in a network"""  
    upgrade_strategy: Optional[UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeStrategy'), 'exclude': lambda f: f is None }})
    r"""The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessSettingsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkWirelessSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_settings_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    