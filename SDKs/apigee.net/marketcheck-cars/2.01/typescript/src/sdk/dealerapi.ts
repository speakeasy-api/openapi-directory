/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DealerAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Find car dealers around
   *
   * @remarks
   * The dealers API returns a list of dealers around a given point and radius.
   */
  dealerSearch(
    req: operations.DealerSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DealerSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DealerSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dealers/car";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DealerSearchResponse =
        new operations.DealerSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealersResponse = utils.objectToClass(
              httpRes?.data,
              shared.DealersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dealer by id
   *
   * @remarks
   * Get a particular dealer's information by its id
   */
  getDealer(
    req: operations.GetDealerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/dealer/car/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealerResponse =
        new operations.GetDealerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealer = utils.objectToClass(httpRes?.data, shared.Dealer);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dealer by id
   *
   * @remarks
   * Get a particular dealer's information by its id
   */
  getDealerCarUkId(
    req: operations.GetDealerCarUkIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealerCarUkIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealerCarUkIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/dealer/car/uk/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealerCarUkIdResponse =
        new operations.GetDealerCarUkIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealer = utils.objectToClass(httpRes?.data, shared.Dealer);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dealer by id
   *
   * @remarks
   * Get a particular dealer's information by its id
   */
  getDealerHeavyEquipmentId(
    req: operations.GetDealerHeavyEquipmentIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealerHeavyEquipmentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealerHeavyEquipmentIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dealer/heavy-equipment/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealerHeavyEquipmentIdResponse =
        new operations.GetDealerHeavyEquipmentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealer = utils.objectToClass(httpRes?.data, shared.Dealer);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dealer by id
   *
   * @remarks
   * Get a particular dealer's information by its id
   */
  getDealerMotorcycleId(
    req: operations.GetDealerMotorcycleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealerMotorcycleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealerMotorcycleIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dealer/motorcycle/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealerMotorcycleIdResponse =
        new operations.GetDealerMotorcycleIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealer = utils.objectToClass(httpRes?.data, shared.Dealer);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dealer by id
   *
   * @remarks
   * Get a particular dealer's information by its id
   */
  getDealerRvId(
    req: operations.GetDealerRvIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealerRvIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealerRvIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/dealer/rv/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealerRvIdResponse =
        new operations.GetDealerRvIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealer = utils.objectToClass(httpRes?.data, shared.Dealer);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find car dealers around
   *
   * @remarks
   * The dealers API returns a list of dealers around a given point and radius.
   */
  getDealersCarUk(
    req: operations.GetDealersCarUkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealersCarUkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealersCarUkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dealers/car/uk";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealersCarUkResponse =
        new operations.GetDealersCarUkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealersResponse = utils.objectToClass(
              httpRes?.data,
              shared.DealersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find car dealers around
   *
   * @remarks
   * The dealers API returns a list of dealers around a given point and radius.
   */
  getDealersHeavyEquipment(
    req: operations.GetDealersHeavyEquipmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealersHeavyEquipmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealersHeavyEquipmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dealers/heavy-equipment";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealersHeavyEquipmentResponse =
        new operations.GetDealersHeavyEquipmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealersResponse = utils.objectToClass(
              httpRes?.data,
              shared.DealersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find car dealers around
   *
   * @remarks
   * The dealers API returns a list of dealers around a given point and radius.
   */
  getDealersMotorcycle(
    req: operations.GetDealersMotorcycleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealersMotorcycleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealersMotorcycleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dealers/motorcycle";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealersMotorcycleResponse =
        new operations.GetDealersMotorcycleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealersResponse = utils.objectToClass(
              httpRes?.data,
              shared.DealersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find car dealers around
   *
   * @remarks
   * The dealers API returns a list of dealers around a given point and radius.
   */
  getDealersRv(
    req: operations.GetDealersRvRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDealersRvResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDealersRvRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dealers/rv";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDealersRvResponse =
        new operations.GetDealersRvResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dealersResponse = utils.objectToClass(
              httpRes?.data,
              shared.DealersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
