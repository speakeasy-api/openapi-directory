"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import geocoords as shared_geocoords
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotUpdateAntennaReportLocationsInput:
    
    antenna_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_number'), 'exclude': lambda f: f is None }})
    r"""Antenna number"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotUpdateInput:
    r"""A JSON object containing spot information"""
    
    antenna_report_locations: Optional[list[SpotUpdateAntennaReportLocationsInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_report_locations'), 'exclude': lambda f: f is None }})
    r"""You may configure this field to an object which couples individual antenna ports to locations."""  
    config_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new configuration. This will be applied automatically when the values are valid."""  
    geo_coords: Optional[shared_geocoords.GeoCoordsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo_coords'), 'exclude': lambda f: f is None }})
    r"""Last known geolocation estimate of this object. Not guaranteed to be included in response."""  
    report_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    senses_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    