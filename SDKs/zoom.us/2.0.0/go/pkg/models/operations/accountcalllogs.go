// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type AccountCallLogsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

// AccountCallLogsTimeTypeEnum - Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`.
type AccountCallLogsTimeTypeEnum string

const (
	AccountCallLogsTimeTypeEnumStartTime AccountCallLogsTimeTypeEnum = "startTime"
	AccountCallLogsTimeTypeEnumEndTime   AccountCallLogsTimeTypeEnum = "endTime"
)

func (e *AccountCallLogsTimeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "startTime":
		fallthrough
	case "endTime":
		*e = AccountCallLogsTimeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogsTimeTypeEnum: %s", s)
	}
}

type AccountCallLogsQueryParams struct {
	// Start date from which you would like to get the call logs. The start date should be within past six months. <br>
	//
	// The API only returns data pertaining to a month. Thus, the date range(defined using "from" and "to" fields) for which the call logs are to be returned must not exceed a month.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Filter the API response by [path](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-and-identifying-logs#h_646b46c6-0623-4ab1-8b8b-ea5b8bcef679) of the call. The value of this field can be one of the following: `voiceMail`, `message`, `forward`, `extension`, `callQueue`, `ivrMenu`, `companyDirectory`, `autoReceptionist`, `contactCenter`, `disconnected`, `commonAreaPhone`,
	// `pstn`, `transfer`, `sharedLines`, `sharedLineGroup`, `tollFreeBilling`, `meetingService`, `parkPickup`,
	// `parkTimeout`, `monitor`, `takeover`, `sipGroup`
	Path *string `queryParam:"style=form,explode=true,name=path"`
	// Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites). Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by call logs of a specific phone site.
	SiteID *string `queryParam:"style=form,explode=true,name=site_id"`
	// Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`.
	TimeType *AccountCallLogsTimeTypeEnum `queryParam:"style=form,explode=true,name=time_type"`
	// The end date upto which you would like to get the call logs for. The end date should be within past six months.
	To *string `queryParam:"style=form,explode=true,name=to"`
	// The type of the call logs. The value can be either "all" or "missed".
	Type *string `queryParam:"style=form,explode=true,name=type"`
}

type AccountCallLogsRequest struct {
	QueryParams AccountCallLogsQueryParams
	Security    AccountCallLogsSecurity
}

// AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum - The type of call:
// *`voip` (Voice over IP)
// *`pstn` (Public Switched Telephone Network)
// *`tollfree`
// *`international`
// *`contactCenter`
type AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum string

const (
	AccountCallLogs200ApplicationXMLCallLogsCallTypeEnumVoip          AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum = "voip"
	AccountCallLogs200ApplicationXMLCallLogsCallTypeEnumPstn          AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum = "pstn"
	AccountCallLogs200ApplicationXMLCallLogsCallTypeEnumTollfree      AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum = "tollfree"
	AccountCallLogs200ApplicationXMLCallLogsCallTypeEnumInternational AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum = "international"
	AccountCallLogs200ApplicationXMLCallLogsCallTypeEnumContactCenter AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum = "contactCenter"
)

func (e *AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "voip":
		fallthrough
	case "pstn":
		fallthrough
	case "tollfree":
		fallthrough
	case "international":
		fallthrough
	case "contactCenter":
		*e = AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum: %s", s)
	}
}

// AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum - The owner type:
// *`user`
// *`callQueue`
// *`autoReceptionist`
// *`commonAreaPhone`
// *`sharedLineGroup`
type AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum string

const (
	AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnumUser             AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum = "user"
	AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnumCallQueue        AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum = "callQueue"
	AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnumAutoReceptionist AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum = "autoReceptionist"
	AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnumCommonAreaPhone  AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum = "commonAreaPhone"
	AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnumSharedLineGroup  AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum = "sharedLineGroup"
)

func (e *AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "callQueue":
		fallthrough
	case "autoReceptionist":
		fallthrough
	case "commonAreaPhone":
		fallthrough
	case "sharedLineGroup":
		*e = AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum: %s", s)
	}
}

type AccountCallLogs200ApplicationXMLCallLogsOwner struct {
	// The owner's extension number.
	ExtensionNumber *int64
	// The owner ID.
	ID *string
	// The owner name.
	Name *string
	// The owner type:
	// *`user`
	// *`callQueue`
	// *`autoReceptionist`
	// *`commonAreaPhone`
	// *`sharedLineGroup`
	Type *AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum
}

// AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum - Type of call recording:<br>
// `1` OnDemand<br>
// `2` Automatic
type AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum string

const (
	AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnumOne AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum = "1"
	AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnumTwo AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum = "2"
)

func (e *AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum: %s", s)
	}
}

type AccountCallLogs200ApplicationXMLCallLogsSite struct {
	// Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations.
	ID *string
	// Name of the site where the phone number is assigned.
	Name *string
}

type AccountCallLogs200ApplicationXMLCallLogs struct {
	// GMT date and time at which the inbound call was answered. The value of this field is in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.
	//
	AnswerStartTime *time.Time
	// Unique identifier of the phone call.
	CallID *string
	// The type of call:
	// *`voip` (Voice over IP)
	// *`pstn` (Public Switched Telephone Network)
	// *`tollfree`
	// *`international`
	// *`contactCenter`
	CallType *AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum
	// Contact name of callee
	CalleeName *string
	// Number of callee
	CalleeNumber *string
	// Type of callee's number. 1 - internal | 2 - external
	CalleeNumberType *string
	// Contact name of caller
	CallerName *string
	// Number of caller
	CallerNumber *string
	// Type of caller's number. 1 - internal | 2 - external
	CallerNumberType *string
	// Billing charge for the call.
	Charge *string
	// Client code.
	ClientCode *string
	// Start time of the call
	DateTime *string
	// Direction of the call. "inbound" | "outbound"
	Direction *string
	// Duration of the call in seconds.
	Duration *int64
	// Call Log ID
	ID    *string
	Owner *AccountCallLogs200ApplicationXMLCallLogsOwner
	// Path of the call.
	Path *string
	// Billing rate for the call.
	Rate *string
	// Unique identifier of the call recording.
	RecordingID *string
	// Type of call recording:<br>
	// `1` OnDemand<br>
	// `2` Automatic
	RecordingType *AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum
	// Result of the call. "call_connected" | "recorded" | "no_answer"
	Result *string
	Site   *AccountCallLogs200ApplicationXMLCallLogsSite
	// User ID of the call log owner.
	UserID *string
	// Duration that a  **call queue member** takes to answer a call from the time it started ringing. The value of the duration is in seconds.
	//
	WaitingTime *string
}

// AccountCallLogs200ApplicationXML - Account Call Logs
type AccountCallLogs200ApplicationXML struct {
	// Call Log
	CallLogs []AccountCallLogs200ApplicationXMLCallLogs
	// Date from which you would like to view the logs.
	From *string
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// Total number of pages
	PageCount *int64
	// The number of records returned within a single API call for each page.
	PageSize *int64
	// Date up to which you would like to view the phone log.
	To *string
	// The total number of records returned.
	TotalRecords *int64
}

// AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum - The type of call:
// *`voip` (Voice over IP)
// *`pstn` (Public Switched Telephone Network)
// *`tollfree`
// *`international`
// *`contactCenter`
type AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum string

const (
	AccountCallLogs200ApplicationJSONCallLogsCallTypeEnumVoip          AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum = "voip"
	AccountCallLogs200ApplicationJSONCallLogsCallTypeEnumPstn          AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum = "pstn"
	AccountCallLogs200ApplicationJSONCallLogsCallTypeEnumTollfree      AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum = "tollfree"
	AccountCallLogs200ApplicationJSONCallLogsCallTypeEnumInternational AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum = "international"
	AccountCallLogs200ApplicationJSONCallLogsCallTypeEnumContactCenter AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum = "contactCenter"
)

func (e *AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "voip":
		fallthrough
	case "pstn":
		fallthrough
	case "tollfree":
		fallthrough
	case "international":
		fallthrough
	case "contactCenter":
		*e = AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum: %s", s)
	}
}

// AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum - The owner type:
// *`user`
// *`callQueue`
// *`autoReceptionist`
// *`commonAreaPhone`
// *`sharedLineGroup`
type AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum string

const (
	AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnumUser             AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum = "user"
	AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnumCallQueue        AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum = "callQueue"
	AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnumAutoReceptionist AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum = "autoReceptionist"
	AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnumCommonAreaPhone  AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum = "commonAreaPhone"
	AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnumSharedLineGroup  AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum = "sharedLineGroup"
)

func (e *AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "callQueue":
		fallthrough
	case "autoReceptionist":
		fallthrough
	case "commonAreaPhone":
		fallthrough
	case "sharedLineGroup":
		*e = AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum: %s", s)
	}
}

type AccountCallLogs200ApplicationJSONCallLogsOwner struct {
	// The owner's extension number.
	ExtensionNumber *int64 `json:"extension_number,omitempty"`
	// The owner ID.
	ID *string `json:"id,omitempty"`
	// The owner name.
	Name *string `json:"name,omitempty"`
	// The owner type:
	// *`user`
	// *`callQueue`
	// *`autoReceptionist`
	// *`commonAreaPhone`
	// *`sharedLineGroup`
	Type *AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum `json:"type,omitempty"`
}

// AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum - Type of call recording:<br>
// `1` OnDemand<br>
// `2` Automatic
type AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum string

const (
	AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnumOne AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum = "1"
	AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnumTwo AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum = "2"
)

func (e *AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum: %s", s)
	}
}

type AccountCallLogs200ApplicationJSONCallLogsSite struct {
	// Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations.
	ID *string `json:"id,omitempty"`
	// Name of the site where the phone number is assigned.
	Name *string `json:"name,omitempty"`
}

type AccountCallLogs200ApplicationJSONCallLogs struct {
	// GMT date and time at which the inbound call was answered. The value of this field is in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.
	//
	AnswerStartTime *time.Time `json:"answer_start_time,omitempty"`
	// Unique identifier of the phone call.
	CallID *string `json:"call_id,omitempty"`
	// The type of call:
	// *`voip` (Voice over IP)
	// *`pstn` (Public Switched Telephone Network)
	// *`tollfree`
	// *`international`
	// *`contactCenter`
	CallType *AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum `json:"call_type,omitempty"`
	// Contact name of callee
	CalleeName *string `json:"callee_name,omitempty"`
	// Number of callee
	CalleeNumber *string `json:"callee_number,omitempty"`
	// Type of callee's number. 1 - internal | 2 - external
	CalleeNumberType *string `json:"callee_number_type,omitempty"`
	// Contact name of caller
	CallerName *string `json:"caller_name,omitempty"`
	// Number of caller
	CallerNumber *string `json:"caller_number,omitempty"`
	// Type of caller's number. 1 - internal | 2 - external
	CallerNumberType *string `json:"caller_number_type,omitempty"`
	// Billing charge for the call.
	Charge *string `json:"charge,omitempty"`
	// Client code.
	ClientCode *string `json:"client_code,omitempty"`
	// Start time of the call
	DateTime *string `json:"date_time,omitempty"`
	// Direction of the call. "inbound" | "outbound"
	Direction *string `json:"direction,omitempty"`
	// Duration of the call in seconds.
	Duration *int64 `json:"duration,omitempty"`
	// Call Log ID
	ID    *string                                         `json:"id,omitempty"`
	Owner *AccountCallLogs200ApplicationJSONCallLogsOwner `json:"owner,omitempty"`
	// Path of the call.
	Path *string `json:"path,omitempty"`
	// Billing rate for the call.
	Rate *string `json:"rate,omitempty"`
	// Unique identifier of the call recording.
	RecordingID *string `json:"recording_id,omitempty"`
	// Type of call recording:<br>
	// `1` OnDemand<br>
	// `2` Automatic
	RecordingType *AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum `json:"recording_type,omitempty"`
	// Result of the call. "call_connected" | "recorded" | "no_answer"
	Result *string                                        `json:"result,omitempty"`
	Site   *AccountCallLogs200ApplicationJSONCallLogsSite `json:"site,omitempty"`
	// User ID of the call log owner.
	UserID *string `json:"user_id,omitempty"`
	// Duration that a  **call queue member** takes to answer a call from the time it started ringing. The value of the duration is in seconds.
	//
	WaitingTime *string `json:"waiting_time,omitempty"`
}

// AccountCallLogs200ApplicationJSON - Account Call Logs
type AccountCallLogs200ApplicationJSON struct {
	// Call Log
	CallLogs []AccountCallLogs200ApplicationJSONCallLogs `json:"call_logs,omitempty"`
	// Date from which you would like to view the logs.
	From *string `json:"from,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// Total number of pages
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call for each page.
	PageSize *int64 `json:"page_size,omitempty"`
	// Date up to which you would like to view the phone log.
	To *string `json:"to,omitempty"`
	// The total number of records returned.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type AccountCallLogsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Account's call logs returned.
	AccountCallLogs200ApplicationJSONObject *AccountCallLogs200ApplicationJSON
}
