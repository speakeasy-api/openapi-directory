// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetCommitteesCommitteeTypeEnum string

const (
	GetCommitteesCommitteeTypeEnumUnknown GetCommitteesCommitteeTypeEnum = ""
	GetCommitteesCommitteeTypeEnumC       GetCommitteesCommitteeTypeEnum = "C"
	GetCommitteesCommitteeTypeEnumD       GetCommitteesCommitteeTypeEnum = "D"
	GetCommitteesCommitteeTypeEnumE       GetCommitteesCommitteeTypeEnum = "E"
	GetCommitteesCommitteeTypeEnumH       GetCommitteesCommitteeTypeEnum = "H"
	GetCommitteesCommitteeTypeEnumI       GetCommitteesCommitteeTypeEnum = "I"
	GetCommitteesCommitteeTypeEnumN       GetCommitteesCommitteeTypeEnum = "N"
	GetCommitteesCommitteeTypeEnumO       GetCommitteesCommitteeTypeEnum = "O"
	GetCommitteesCommitteeTypeEnumP       GetCommitteesCommitteeTypeEnum = "P"
	GetCommitteesCommitteeTypeEnumQ       GetCommitteesCommitteeTypeEnum = "Q"
	GetCommitteesCommitteeTypeEnumS       GetCommitteesCommitteeTypeEnum = "S"
	GetCommitteesCommitteeTypeEnumU       GetCommitteesCommitteeTypeEnum = "U"
	GetCommitteesCommitteeTypeEnumV       GetCommitteesCommitteeTypeEnum = "V"
	GetCommitteesCommitteeTypeEnumW       GetCommitteesCommitteeTypeEnum = "W"
	GetCommitteesCommitteeTypeEnumX       GetCommitteesCommitteeTypeEnum = "X"
	GetCommitteesCommitteeTypeEnumY       GetCommitteesCommitteeTypeEnum = "Y"
	GetCommitteesCommitteeTypeEnumZ       GetCommitteesCommitteeTypeEnum = "Z"
)

func (e GetCommitteesCommitteeTypeEnum) ToPointer() *GetCommitteesCommitteeTypeEnum {
	return &e
}

func (e *GetCommitteesCommitteeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "D":
		fallthrough
	case "E":
		fallthrough
	case "H":
		fallthrough
	case "I":
		fallthrough
	case "N":
		fallthrough
	case "O":
		fallthrough
	case "P":
		fallthrough
	case "Q":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "V":
		fallthrough
	case "W":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "Z":
		*e = GetCommitteesCommitteeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteesCommitteeTypeEnum: %v", v)
	}
}

type GetCommitteesDesignationEnum string

const (
	GetCommitteesDesignationEnumUnknown GetCommitteesDesignationEnum = ""
	GetCommitteesDesignationEnumA       GetCommitteesDesignationEnum = "A"
	GetCommitteesDesignationEnumJ       GetCommitteesDesignationEnum = "J"
	GetCommitteesDesignationEnumP       GetCommitteesDesignationEnum = "P"
	GetCommitteesDesignationEnumU       GetCommitteesDesignationEnum = "U"
	GetCommitteesDesignationEnumB       GetCommitteesDesignationEnum = "B"
	GetCommitteesDesignationEnumD       GetCommitteesDesignationEnum = "D"
)

func (e GetCommitteesDesignationEnum) ToPointer() *GetCommitteesDesignationEnum {
	return &e
}

func (e *GetCommitteesDesignationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "J":
		fallthrough
	case "P":
		fallthrough
	case "U":
		fallthrough
	case "B":
		fallthrough
	case "D":
		*e = GetCommitteesDesignationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteesDesignationEnum: %v", v)
	}
}

type GetCommitteesFilingFrequencyEnum string

const (
	GetCommitteesFilingFrequencyEnumUnknown GetCommitteesFilingFrequencyEnum = ""
	GetCommitteesFilingFrequencyEnumA       GetCommitteesFilingFrequencyEnum = "A"
	GetCommitteesFilingFrequencyEnumM       GetCommitteesFilingFrequencyEnum = "M"
	GetCommitteesFilingFrequencyEnumN       GetCommitteesFilingFrequencyEnum = "N"
	GetCommitteesFilingFrequencyEnumQ       GetCommitteesFilingFrequencyEnum = "Q"
	GetCommitteesFilingFrequencyEnumT       GetCommitteesFilingFrequencyEnum = "T"
	GetCommitteesFilingFrequencyEnumW       GetCommitteesFilingFrequencyEnum = "W"
	GetCommitteesFilingFrequencyEnumMinusA  GetCommitteesFilingFrequencyEnum = "-A"
	GetCommitteesFilingFrequencyEnumMinusT  GetCommitteesFilingFrequencyEnum = "-T"
)

func (e GetCommitteesFilingFrequencyEnum) ToPointer() *GetCommitteesFilingFrequencyEnum {
	return &e
}

func (e *GetCommitteesFilingFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "Q":
		fallthrough
	case "T":
		fallthrough
	case "W":
		fallthrough
	case "-A":
		fallthrough
	case "-T":
		*e = GetCommitteesFilingFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteesFilingFrequencyEnum: %v", v)
	}
}

type GetCommitteesOrganizationTypeEnum string

const (
	GetCommitteesOrganizationTypeEnumUnknown GetCommitteesOrganizationTypeEnum = ""
	GetCommitteesOrganizationTypeEnumC       GetCommitteesOrganizationTypeEnum = "C"
	GetCommitteesOrganizationTypeEnumL       GetCommitteesOrganizationTypeEnum = "L"
	GetCommitteesOrganizationTypeEnumM       GetCommitteesOrganizationTypeEnum = "M"
	GetCommitteesOrganizationTypeEnumT       GetCommitteesOrganizationTypeEnum = "T"
	GetCommitteesOrganizationTypeEnumV       GetCommitteesOrganizationTypeEnum = "V"
	GetCommitteesOrganizationTypeEnumW       GetCommitteesOrganizationTypeEnum = "W"
)

func (e GetCommitteesOrganizationTypeEnum) ToPointer() *GetCommitteesOrganizationTypeEnum {
	return &e
}

func (e *GetCommitteesOrganizationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetCommitteesOrganizationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteesOrganizationTypeEnum: %v", v)
	}
}

type GetCommitteesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType []GetCommitteesCommitteeTypeEnum `queryParam:"style=form,explode=true,name=committee_type"`
	// A two year election cycle that the committee was active- (after original registration
	// date but before expiration date in Form 1s) The cycle begins with
	// an odd year and is named for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	Designation []GetCommitteesDesignationEnum `queryParam:"style=form,explode=true,name=designation"`
	// The one-letter
	//     code of the filing frequency:
	//          - A Administratively terminated
	//          - D Debt
	//          - M Monthly filer
	//          - Q Quarterly filer
	//          - T Terminated
	//          - W Waived
	//
	FilingFrequency []GetCommitteesFilingFrequencyEnum `queryParam:"style=form,explode=true,name=filing_frequency"`
	// Filter for committees whose first Form 1 was received on or before this date.
	MaxFirstF1Date *types.Date `queryParam:"style=form,explode=true,name=max_first_f1_date"`
	// Filter for committees whose first filing was received on or before this date.
	MaxFirstFileDate *types.Date `queryParam:"style=form,explode=true,name=max_first_file_date"`
	// Filter for committees whose latest Form 1 was received on or before this date.
	MaxLastF1Date *types.Date `queryParam:"style=form,explode=true,name=max_last_f1_date"`
	// Filter for committees whose first Form 1 was received on or after this date.
	MinFirstF1Date *types.Date `queryParam:"style=form,explode=true,name=min_first_f1_date"`
	// Filter for committees whose first filing was received on or after this date.
	MinFirstFileDate *types.Date `queryParam:"style=form,explode=true,name=min_first_file_date"`
	// Filter for committees whose latest Form 1 was received on or after this date.
	MinLastF1Date *types.Date `queryParam:"style=form,explode=true,name=min_last_f1_date"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationType []GetCommitteesOrganizationTypeEnum `queryParam:"style=form,explode=true,name=organization_type"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party []string `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
	Q []string `queryParam:"style=form,explode=true,name=q"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
	//
	SponsorCandidateID []string `queryParam:"style=form,explode=true,name=sponsor_candidate_id"`
	// US state or territory
	State []string `queryParam:"style=form,explode=true,name=state"`
	// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
	TreasurerName []string `queryParam:"style=form,explode=true,name=treasurer_name"`
	// A year that the committee was active— (after original registration date     or filing but before expiration date)
	Year []int `queryParam:"style=form,explode=true,name=year"`
}

type GetCommitteesResponse struct {
	CommitteePage *shared.CommitteePage
	ContentType   string
	StatusCode    int
	RawResponse   *http.Response
}
