// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectPrivateRoleEnum - Role inside this project
type ProjectPrivateRoleEnum string

const (
	ProjectPrivateRoleEnumOwner        ProjectPrivateRoleEnum = "Owner"
	ProjectPrivateRoleEnumCollaborator ProjectPrivateRoleEnum = "Collaborator"
	ProjectPrivateRoleEnumViewer       ProjectPrivateRoleEnum = "Viewer"
)

func (e *ProjectPrivateRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Owner":
		fallthrough
	case "Collaborator":
		fallthrough
	case "Viewer":
		*e = ProjectPrivateRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectPrivateRoleEnum: %s", s)
	}
}

// ProjectPrivateStorageEnum - Project storage type
type ProjectPrivateStorageEnum string

const (
	ProjectPrivateStorageEnumIndividual ProjectPrivateStorageEnum = "individual"
	ProjectPrivateStorageEnumGroup      ProjectPrivateStorageEnum = "group"
)

func (e *ProjectPrivateStorageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "individual":
		fallthrough
	case "group":
		*e = ProjectPrivateStorageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectPrivateStorageEnum: %s", s)
	}
}

type ProjectPrivate struct {
	// Project id
	ID *int64 `json:"id,omitempty"`
	// Date when project was published
	PublishedDate *string `json:"published_date,omitempty"`
	// Role inside this project
	Role *ProjectPrivateRoleEnum `json:"role,omitempty"`
	// Project storage type
	Storage *ProjectPrivateStorageEnum `json:"storage,omitempty"`
	// Project title
	Title *string `json:"title,omitempty"`
	// Api endpoint
	URL *string `json:"url,omitempty"`
}
