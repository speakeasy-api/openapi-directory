"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import language_enum as shared_language_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PlaceDatasetEnum(str, Enum):
    r"""Indicates the provenance of a place.
    
      - `geonames` GeoNames place
    """
    GEONAMES = 'geonames'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Place:
    r"""Represents a geographical place"""
    
    country_iso: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_iso') }})
    r"""3 letter country code (ISO 3166-1)"""  
    dataset: PlaceDatasetEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset') }})
    r"""Indicates the provenance of a place.
    
      - `geonames` GeoNames place
    """  
    descriptive_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptive_name') }})
    r"""Longer form description of the place."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Global unique internally generated identifier for a place"""  
    language: shared_language_enum.LanguageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""Language represented by 2 letter ISO Code (639-1)"""  
    latitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""The latitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. `51.5083983`.
    
    Returns an empty string if no location data is available.
    """  
    longitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""The longitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. -0.1283983
    
    Returns an empty string if no location data is available.
    """  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Place name"""  
    native: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('native'), 'exclude': lambda f: f is None }})
    r"""Native representation of a place"""  
    