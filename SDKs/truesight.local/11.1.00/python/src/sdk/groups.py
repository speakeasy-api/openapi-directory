"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Groups:
    r"""API operations to interact with the monitored Groups."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_groups(self, request: operations.GetGroupsRequest) -> operations.GetGroupsResponse:
        r"""Gets all group summaries.
        Lists the available GroupSummary instances.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hardware/groups'
        
        query_params = utils.get_query_params(operations.GetGroupsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_one_group(self, request: operations.GetOneGroupRequest) -> operations.GetOneGroupResponse:
        r"""Gets detailed information about a specific group.
        You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOneGroupRequest, base_url, '/hardware/groups/{groupId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOneGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def update_energy_cost(self, request: operations.UpdateEnergyCostRequest) -> operations.UpdateEnergyCostResponse:
        r"""Updates the values of the energy footprint parameter for a specific group.
        You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID.<br><br>If the ID is <em>\"global\"</em>, then the group being updated is the GlobalSummary.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEnergyCostRequest, base_url, '/hardware/groups/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEnergyCostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    