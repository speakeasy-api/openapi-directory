// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateEndpointAccessActionEnum
type GETCreateEndpointAccessActionEnum string

const (
	GETCreateEndpointAccessActionEnumCreateEndpointAccess GETCreateEndpointAccessActionEnum = "CreateEndpointAccess"
)

func (e *GETCreateEndpointAccessActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateEndpointAccess":
		*e = GETCreateEndpointAccessActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateEndpointAccessActionEnum: %s", s)
	}
}

// GETCreateEndpointAccessVersionEnum
type GETCreateEndpointAccessVersionEnum string

const (
	GETCreateEndpointAccessVersionEnumTwoThousandAndTwelve1201 GETCreateEndpointAccessVersionEnum = "2012-12-01"
)

func (e *GETCreateEndpointAccessVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETCreateEndpointAccessVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateEndpointAccessVersionEnum: %s", s)
	}
}

type GETCreateEndpointAccessQueryParams struct {
	Action GETCreateEndpointAccessActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cluster identifier of the cluster to access.
	ClusterIdentifier *string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// <p>The Redshift-managed VPC endpoint name.</p> <p>An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.</p>
	EndpointName string `queryParam:"style=form,explode=true,name=EndpointName"`
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner *string `queryParam:"style=form,explode=true,name=ResourceOwner"`
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName string                             `queryParam:"style=form,explode=true,name=SubnetGroupName"`
	Version         GETCreateEndpointAccessVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds []string `queryParam:"style=form,explode=true,name=VpcSecurityGroupIds"`
}

type GETCreateEndpointAccessHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateEndpointAccessRequest struct {
	QueryParams GETCreateEndpointAccessQueryParams
	Headers     GETCreateEndpointAccessHeaders
}

type GETCreateEndpointAccessResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
