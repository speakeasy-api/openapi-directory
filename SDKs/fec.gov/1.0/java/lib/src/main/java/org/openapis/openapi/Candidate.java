/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Candidate endpoints give you access to information about the people running for office. This information is organized by `candidate_id`. If you're unfamiliar with candidate IDs, using `/candidates/search/` will help you locate a particular candidate. 
 * 
 *  Officially, a candidate is an individual seeking nomination for election to a federal office. People become candidates when they (or agents working on their behalf) raise contributions or make expenditures that exceed $5,000. 
 * 
 *  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/resources/cms-content/documents/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/resources/cms-content/documents/fecfrm2.pdf) for candidate information.
 */
public class Candidate {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Candidate(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     *  - This endpoint is useful for finding detailed information about a particular candidate. Use the - `candidate_id` to find the most recent information about that candidate. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdResponse getCandidateCandidateId(org.openapis.openapi.models.operations.GetCandidateCandidateIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdRequest.class, baseUrl, "/candidate/{candidate_id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdResponse() {{
            candidateDetailPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateDetailPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateDetailPage.class);
                res.candidateDetailPage = out;
            }
        }

        return res;
    }

    /**
     *  - Find out a candidate's characteristics over time. This is particularly useful if the - candidate runs for the same office in different districts or you want to know more about a candidate's - previous races. -  - This information is organized by `candidate_id`, so it won't help you find a candidate - who ran for different offices over time; candidates get a new ID for each office. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryResponse getCandidateCandidateIdHistory(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryRequest.class, baseUrl, "/candidate/{candidate_id}/history/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryResponse() {{
            candidateHistoryPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateHistoryPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateHistoryPage.class);
                res.candidateHistoryPage = out;
            }
        }

        return res;
    }

    /**
     *  - Find out a candidate's characteristics over time. This is particularly useful if the - candidate runs for the same office in different districts or you want to know more about a candidate's - previous races. -  - This information is organized by `candidate_id`, so it won't help you find a candidate - who ran for different offices over time; candidates get a new ID for each office. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleResponse getCandidateCandidateIdHistoryCycle(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleRequest.class, baseUrl, "/candidate/{candidate_id}/history/{cycle}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdHistoryCycleResponse() {{
            candidateHistoryPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateHistoryPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateHistoryPage.class);
                res.candidateHistoryPage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, - which are aggregated by two-year period. We refer to two-year periods as a `cycle`. -  - The cycle is named after the even-numbered year and includes the year before it. To obtain - totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle - is the next year \u2014 for example, in 2015, the current cycle is 2016. -  - For presidential and Senate candidates, multiple two-year cycles exist between elections. -  - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsResponse getCandidateCandidateIdTotals(org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsRequest.class, baseUrl, "/candidate/{candidate_id}/totals/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdTotalsResponse() {{
            committeeTotalsPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeTotalsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeTotalsPage.class);
                res.committeeTotalsPage = out;
            }
        }

        return res;
    }

    /**
     *  - Fetch basic information about candidates, and use parameters to filter results to the - candidates you're looking for. -  - Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a - particular office sought. If a candidate runs for the same office multiple times, the ID - stays the same. If the same person runs for another office \u2014 for example, a House - candidate runs for a Senate office \u2014 that candidate will get a unique ID for each office. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesResponse getCandidates(org.openapis.openapi.models.operations.GetCandidatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesResponse res = new org.openapis.openapi.models.operations.GetCandidatesResponse() {{
            candidatePage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidatePage.class);
                res.candidatePage = out;
            }
        }

        return res;
    }

    /**
     *  - Fetch basic information about candidates and their principal committees. -  - Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a - particular office sought. If a candidate runs for the same office over time, that ID - stays the same. If the same person runs for multiple offices \u2014 for example, a House - candidate runs for a Senate office \u2014 that candidate will get a unique ID for each office. -  - The candidate endpoints primarily use data from FEC registration - [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and - [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesSearchResponse getCandidatesSearch(org.openapis.openapi.models.operations.GetCandidatesSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/search/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesSearchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesSearchResponse res = new org.openapis.openapi.models.operations.GetCandidatesSearchResponse() {{
            candidatePage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidatePage.class);
                res.candidatePage = out;
            }
        }

        return res;
    }

    /**
     *  - Aggregated candidate receipts and disbursements grouped by cycle. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesTotalsResponse getCandidatesTotals(org.openapis.openapi.models.operations.GetCandidatesTotalsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/totals/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesTotalsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesTotalsResponse res = new org.openapis.openapi.models.operations.GetCandidatesTotalsResponse() {{
            candidateHistoryTotalPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateHistoryTotalPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateHistoryTotalPage.class);
                res.candidateHistoryTotalPage = out;
            }
        }

        return res;
    }

    /**
     *  Candidate total receipts and disbursements aggregated by `aggregate_by`. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesTotalsAggregatesResponse getCandidatesTotalsAggregates(org.openapis.openapi.models.operations.GetCandidatesTotalsAggregatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/totals/aggregates/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesTotalsAggregatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesTotalsAggregatesResponse res = new org.openapis.openapi.models.operations.GetCandidatesTotalsAggregatesResponse() {{
            candidateTotalAggregatePage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateTotalAggregatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateTotalAggregatePage.class);
                res.candidateTotalAggregatePage = out;
            }
        }

        return res;
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeResponse getCandidatesTotalsByOffice(org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/totals/by_office/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeResponse res = new org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeResponse() {{
            totalByOfficePage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TotalByOfficePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TotalByOfficePage.class);
                res.totalByOfficePage = out;
            }
        }

        return res;
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeByPartyResponse getCandidatesTotalsByOfficeByParty(org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeByPartyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/candidates/totals/by_office/by_party/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeByPartyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeByPartyResponse res = new org.openapis.openapi.models.operations.GetCandidatesTotalsByOfficeByPartyResponse() {{
            totalByOfficeByPartyPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TotalByOfficeByPartyPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TotalByOfficeByPartyPage.class);
                res.totalByOfficeByPartyPage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint is useful for finding detailed information about a particular candidate. Use the - `candidate_id` to find the most recent information about that candidate. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesResponse getCommitteeCommitteeIdCandidates(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesRequest.class, baseUrl, "/committee/{committee_id}/candidates/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesResponse() {{
            candidateDetailPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateDetailPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateDetailPage.class);
                res.candidateDetailPage = out;
            }
        }

        return res;
    }

    /**
     *  - Find out a candidate's characteristics over time. This is particularly useful if the - candidate runs for the same office in different districts or you want to know more about a candidate's - previous races. -  - This information is organized by `candidate_id`, so it won't help you find a candidate - who ran for different offices over time; candidates get a new ID for each office. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryResponse getCommitteeCommitteeIdCandidatesHistory(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryRequest.class, baseUrl, "/committee/{committee_id}/candidates/history/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryResponse() {{
            candidateHistoryPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateHistoryPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateHistoryPage.class);
                res.candidateHistoryPage = out;
            }
        }

        return res;
    }

    /**
     *  - Find out a candidate's characteristics over time. This is particularly useful if the - candidate runs for the same office in different districts or you want to know more about a candidate's - previous races. -  - This information is organized by `candidate_id`, so it won't help you find a candidate - who ran for different offices over time; candidates get a new ID for each office. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleResponse getCommitteeCommitteeIdCandidatesHistoryCycle(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleRequest.class, baseUrl, "/committee/{committee_id}/candidates/history/{cycle}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdCandidatesHistoryCycleResponse() {{
            candidateHistoryPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CandidateHistoryPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CandidateHistoryPage.class);
                res.candidateHistoryPage = out;
            }
        }

        return res;
    }
}