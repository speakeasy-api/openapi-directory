// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// TransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
type TransactionCurrencyEnum string

const (
	TransactionCurrencyEnumCad TransactionCurrencyEnum = "CAD"
	TransactionCurrencyEnumChf TransactionCurrencyEnum = "CHF"
	TransactionCurrencyEnumEur TransactionCurrencyEnum = "EUR"
	TransactionCurrencyEnumGbp TransactionCurrencyEnum = "GBP"
	TransactionCurrencyEnumJpy TransactionCurrencyEnum = "JPY"
	TransactionCurrencyEnumUsd TransactionCurrencyEnum = "USD"
)

func (e TransactionCurrencyEnum) ToPointer() *TransactionCurrencyEnum {
	return &e
}

func (e *TransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionCurrencyEnum: %v", v)
	}
}

// TransactionRouteTypeEnum - The type of the route this Transaction came through.
type TransactionRouteTypeEnum string

const (
	TransactionRouteTypeEnumAccountNumber TransactionRouteTypeEnum = "account_number"
	TransactionRouteTypeEnumCard          TransactionRouteTypeEnum = "card"
)

func (e TransactionRouteTypeEnum) ToPointer() *TransactionRouteTypeEnum {
	return &e
}

func (e *TransactionRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_number":
		fallthrough
	case "card":
		*e = TransactionRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRouteTypeEnum: %v", v)
	}
}

// TransactionTransactionSourceAccountTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type TransactionTransactionSourceAccountTransferIntentionCurrencyEnum string

const (
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumCad TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CAD"
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumChf TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CHF"
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumEur TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "EUR"
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumGbp TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "GBP"
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumJpy TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "JPY"
	TransactionTransactionSourceAccountTransferIntentionCurrencyEnumUsd TransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceAccountTransferIntentionCurrencyEnum) ToPointer() *TransactionTransactionSourceAccountTransferIntentionCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceAccountTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceAccountTransferIntentionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceAccountTransferIntentionCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceAccountTransferIntention - A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
type TransactionTransactionSourceAccountTransferIntention struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency TransactionTransactionSourceAccountTransferIntentionCurrencyEnum `json:"currency"`
	// The description you chose to give the transfer.
	Description string `json:"description"`
	// The identifier of the Account to where the Account Transfer was sent.
	DestinationAccountID string `json:"destination_account_id"`
	// The identifier of the Account from where the Account Transfer was sent.
	SourceAccountID string `json:"source_account_id"`
	// The identifier of the Account Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceACHCheckConversion - A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
type TransactionTransactionSourceACHCheckConversion struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the File containing an image of the returned check.
	FileID string `json:"file_id"`
}

// TransactionTransactionSourceACHCheckConversionReturn - A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
type TransactionTransactionSourceACHCheckConversionReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// Why the transfer was returned.
	ReturnReasonCode string `json:"return_reason_code"`
}

// TransactionTransactionSourceACHTransferIntention - A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
type TransactionTransactionSourceACHTransferIntention struct {
	AccountNumber string `json:"account_number"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount              int64  `json:"amount"`
	RoutingNumber       string `json:"routing_number"`
	StatementDescriptor string `json:"statement_descriptor"`
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceACHTransferRejection - A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
type TransactionTransactionSourceACHTransferRejection struct {
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum - Why the ACH Transfer was returned.
type TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum string

const (
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInsufficientFund                                          TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "insufficient_fund"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNoAccount                                                 TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "no_account"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountClosed                                             TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_closed"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAccountNumberStructure                             TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_account_number_structure"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountFrozenEntryReturnedPerOfacInstruction              TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_frozen_entry_returned_per_ofac_instruction"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCreditEntryRefusedByReceiver                              TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "credit_entry_refused_by_receiver"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUnauthorizedDebitToConsumerAccountUsingCorporateSecCode   TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "unauthorized_debit_to_consumer_account_using_corporate_sec_code"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCorporateCustomerAdvisedNotAuthorized                     TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "corporate_customer_advised_not_authorized"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumPaymentStopped                                            TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "payment_stopped"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNonTransactionAccount                                     TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "non_transaction_account"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUncollectedFunds                                          TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "uncollected_funds"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumRoutingNumberCheckDigitError                              TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "routing_number_check_digit_error"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "customer_advised_unauthorized_improper_ineligible_or_incomplete"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAmountFieldError                                          TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "amount_field_error"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAuthorizationRevokedByCustomer                            TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "authorization_revoked_by_customer"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAchRoutingNumber                                   TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_ach_routing_number"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumFileRecordEditCriteria                                    TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "file_record_edit_criteria"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumEnrInvalidIndividualName                                  TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "enr_invalid_individual_name"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumReturnedPerOdfiRequest                                    TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "returned_per_odfi_request"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAddendaError                                              TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "addenda_error"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumLimitedParticipationDfi                                   TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "limited_participation_dfi"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumIncorrectlyCodedOutboundInternationalPayment              TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "incorrectly_coded_outbound_international_payment"
	TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumOther                                                     TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "other"
)

func (e TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum) ToPointer() *TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum {
	return &e
}

func (e *TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_fund":
		fallthrough
	case "no_account":
		fallthrough
	case "account_closed":
		fallthrough
	case "invalid_account_number_structure":
		fallthrough
	case "account_frozen_entry_returned_per_ofac_instruction":
		fallthrough
	case "credit_entry_refused_by_receiver":
		fallthrough
	case "unauthorized_debit_to_consumer_account_using_corporate_sec_code":
		fallthrough
	case "corporate_customer_advised_not_authorized":
		fallthrough
	case "payment_stopped":
		fallthrough
	case "non_transaction_account":
		fallthrough
	case "uncollected_funds":
		fallthrough
	case "routing_number_check_digit_error":
		fallthrough
	case "customer_advised_unauthorized_improper_ineligible_or_incomplete":
		fallthrough
	case "amount_field_error":
		fallthrough
	case "authorization_revoked_by_customer":
		fallthrough
	case "invalid_ach_routing_number":
		fallthrough
	case "file_record_edit_criteria":
		fallthrough
	case "enr_invalid_individual_name":
		fallthrough
	case "returned_per_odfi_request":
		fallthrough
	case "addenda_error":
		fallthrough
	case "limited_participation_dfi":
		fallthrough
	case "incorrectly_coded_outbound_international_payment":
		fallthrough
	case "other":
		*e = TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum: %v", v)
	}
}

// TransactionTransactionSourceACHTransferReturn - A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
type TransactionTransactionSourceACHTransferReturn struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// Why the ACH Transfer was returned.
	ReturnReasonCode TransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum `json:"return_reason_code"`
	// The identifier of the Tranasaction associated with this return.
	TransactionID string `json:"transaction_id"`
	// The identifier of the ACH Transfer associated with this return.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceCardDisputeAcceptance - A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
type TransactionTransactionSourceCardDisputeAcceptance struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
	AcceptedAt time.Time `json:"accepted_at"`
	// The identifier of the Card Dispute that was accepted.
	CardDisputeID string `json:"card_dispute_id"`
	// The identifier of the Transaction that was created to return the disputed funds to your account.
	TransactionID string `json:"transaction_id"`
}

// TransactionTransactionSourceCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type TransactionTransactionSourceCardRefundCurrencyEnum string

const (
	TransactionTransactionSourceCardRefundCurrencyEnumCad TransactionTransactionSourceCardRefundCurrencyEnum = "CAD"
	TransactionTransactionSourceCardRefundCurrencyEnumChf TransactionTransactionSourceCardRefundCurrencyEnum = "CHF"
	TransactionTransactionSourceCardRefundCurrencyEnumEur TransactionTransactionSourceCardRefundCurrencyEnum = "EUR"
	TransactionTransactionSourceCardRefundCurrencyEnumGbp TransactionTransactionSourceCardRefundCurrencyEnum = "GBP"
	TransactionTransactionSourceCardRefundCurrencyEnumJpy TransactionTransactionSourceCardRefundCurrencyEnum = "JPY"
	TransactionTransactionSourceCardRefundCurrencyEnumUsd TransactionTransactionSourceCardRefundCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCardRefundCurrencyEnum) ToPointer() *TransactionTransactionSourceCardRefundCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCardRefundCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCardRefundCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceCardRefundTypeEnum - A constant representing the object's type. For this resource it will always be `card_refund`.
type TransactionTransactionSourceCardRefundTypeEnum string

const (
	TransactionTransactionSourceCardRefundTypeEnumCardRefund TransactionTransactionSourceCardRefundTypeEnum = "card_refund"
)

func (e TransactionTransactionSourceCardRefundTypeEnum) ToPointer() *TransactionTransactionSourceCardRefundTypeEnum {
	return &e
}

func (e *TransactionTransactionSourceCardRefundTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_refund":
		*e = TransactionTransactionSourceCardRefundTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCardRefundTypeEnum: %v", v)
	}
}

// TransactionTransactionSourceCardRefund - A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
type TransactionTransactionSourceCardRefund struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier for the Transaction this refunds, if any.
	CardSettlementTransactionID string `json:"card_settlement_transaction_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency TransactionTransactionSourceCardRefundCurrencyEnum `json:"currency"`
	// The Card Refund identifier.
	ID string `json:"id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The 4-digit MCC describing the merchant's business.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The name of the merchant.
	MerchantName string `json:"merchant_name"`
	// The state the merchant resides in.
	MerchantState string `json:"merchant_state"`
	// A constant representing the object's type. For this resource it will always be `card_refund`.
	Type TransactionTransactionSourceCardRefundTypeEnum `json:"type"`
}

// TransactionTransactionSourceCardRevenuePaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type TransactionTransactionSourceCardRevenuePaymentCurrencyEnum string

const (
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumCad TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "CAD"
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumChf TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "CHF"
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumEur TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "EUR"
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumGbp TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "GBP"
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumJpy TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "JPY"
	TransactionTransactionSourceCardRevenuePaymentCurrencyEnumUsd TransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCardRevenuePaymentCurrencyEnum) ToPointer() *TransactionTransactionSourceCardRevenuePaymentCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCardRevenuePaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCardRevenuePaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCardRevenuePaymentCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceCardRevenuePayment - A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
type TransactionTransactionSourceCardRevenuePayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency TransactionTransactionSourceCardRevenuePaymentCurrencyEnum `json:"currency"`
	// The end of the period for which this transaction paid interest.
	PeriodEnd time.Time `json:"period_end"`
	// The start of the period for which this transaction paid interest.
	PeriodStart time.Time `json:"period_start"`
	// The account the card belonged to.
	TransactedOnAccountID string `json:"transacted_on_account_id"`
}

// TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
type TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum string

const (
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumCad TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CAD"
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumChf TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CHF"
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumEur TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "EUR"
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumGbp TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "GBP"
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumJpy TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "JPY"
	TransactionTransactionSourceDeprecatedCardRefundCurrencyEnumUsd TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum) ToPointer() *TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceDeprecatedCardRefund - A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
type TransactionTransactionSourceDeprecatedCardRefund struct {
	// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
	Currency             TransactionTransactionSourceDeprecatedCardRefundCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                       `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                       `json:"merchant_category_code"`
	MerchantCity         string                                                       `json:"merchant_city"`
	MerchantCountry      string                                                       `json:"merchant_country"`
	MerchantDescriptor   string                                                       `json:"merchant_descriptor"`
	MerchantState        string                                                       `json:"merchant_state"`
}

// TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
type TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum string

const (
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumCad TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CAD"
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumChf TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CHF"
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumEur TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "EUR"
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumGbp TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "GBP"
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumJpy TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "JPY"
	TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumUsd TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum) ToPointer() *TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceDeprecatedCardSettlement - A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
type TransactionTransactionSourceDeprecatedCardSettlement struct {
	// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
	Currency             TransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                           `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                           `json:"merchant_category_code"`
	MerchantCity         string                                                           `json:"merchant_city"`
	MerchantCountry      string                                                           `json:"merchant_country"`
	MerchantDescriptor   string                                                           `json:"merchant_descriptor"`
	MerchantState        string                                                           `json:"merchant_state"`
}

// TransactionTransactionSourceCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
type TransactionTransactionSourceCardSettlementCurrencyEnum string

const (
	TransactionTransactionSourceCardSettlementCurrencyEnumCad TransactionTransactionSourceCardSettlementCurrencyEnum = "CAD"
	TransactionTransactionSourceCardSettlementCurrencyEnumChf TransactionTransactionSourceCardSettlementCurrencyEnum = "CHF"
	TransactionTransactionSourceCardSettlementCurrencyEnumEur TransactionTransactionSourceCardSettlementCurrencyEnum = "EUR"
	TransactionTransactionSourceCardSettlementCurrencyEnumGbp TransactionTransactionSourceCardSettlementCurrencyEnum = "GBP"
	TransactionTransactionSourceCardSettlementCurrencyEnumJpy TransactionTransactionSourceCardSettlementCurrencyEnum = "JPY"
	TransactionTransactionSourceCardSettlementCurrencyEnumUsd TransactionTransactionSourceCardSettlementCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCardSettlementCurrencyEnum) ToPointer() *TransactionTransactionSourceCardSettlementCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCardSettlementCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCardSettlementCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceCardSettlementTypeEnum - A constant representing the object's type. For this resource it will always be `card_settlement`.
type TransactionTransactionSourceCardSettlementTypeEnum string

const (
	TransactionTransactionSourceCardSettlementTypeEnumCardSettlement TransactionTransactionSourceCardSettlementTypeEnum = "card_settlement"
)

func (e TransactionTransactionSourceCardSettlementTypeEnum) ToPointer() *TransactionTransactionSourceCardSettlementTypeEnum {
	return &e
}

func (e *TransactionTransactionSourceCardSettlementTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_settlement":
		*e = TransactionTransactionSourceCardSettlementTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCardSettlementTypeEnum: %v", v)
	}
}

// TransactionTransactionSourceCardSettlement - A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
type TransactionTransactionSourceCardSettlement struct {
	// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The Card Authorization that was created prior to this Card Settlement, if on exists.
	CardAuthorization string `json:"card_authorization"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
	Currency TransactionTransactionSourceCardSettlementCurrencyEnum `json:"currency"`
	// The Card Settlement identifier.
	ID string `json:"id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The 4-digit MCC describing the merchant's business.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The name of the merchant.
	MerchantName string `json:"merchant_name"`
	// The state the merchant resides in.
	MerchantState string `json:"merchant_state"`
	// The identifier of the Pending Transaction associated with this Transaction.
	PendingTransactionID string `json:"pending_transaction_id"`
	// The amount in the minor unit of the transaction's presentment currency.
	PresentmentAmount int64 `json:"presentment_amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
	PresentmentCurrency string `json:"presentment_currency"`
	// A constant representing the object's type. For this resource it will always be `card_settlement`.
	Type TransactionTransactionSourceCardSettlementTypeEnum `json:"type"`
}

// TransactionTransactionSourceCategoryEnum - The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type TransactionTransactionSourceCategoryEnum string

const (
	TransactionTransactionSourceCategoryEnumAccountTransferIntention                    TransactionTransactionSourceCategoryEnum = "account_transfer_intention"
	TransactionTransactionSourceCategoryEnumAchCheckConversionReturn                    TransactionTransactionSourceCategoryEnum = "ach_check_conversion_return"
	TransactionTransactionSourceCategoryEnumAchCheckConversion                          TransactionTransactionSourceCategoryEnum = "ach_check_conversion"
	TransactionTransactionSourceCategoryEnumAchTransferIntention                        TransactionTransactionSourceCategoryEnum = "ach_transfer_intention"
	TransactionTransactionSourceCategoryEnumAchTransferRejection                        TransactionTransactionSourceCategoryEnum = "ach_transfer_rejection"
	TransactionTransactionSourceCategoryEnumAchTransferReturn                           TransactionTransactionSourceCategoryEnum = "ach_transfer_return"
	TransactionTransactionSourceCategoryEnumCardDisputeAcceptance                       TransactionTransactionSourceCategoryEnum = "card_dispute_acceptance"
	TransactionTransactionSourceCategoryEnumCardRefund                                  TransactionTransactionSourceCategoryEnum = "card_refund"
	TransactionTransactionSourceCategoryEnumCardSettlement                              TransactionTransactionSourceCategoryEnum = "card_settlement"
	TransactionTransactionSourceCategoryEnumCardRevenuePayment                          TransactionTransactionSourceCategoryEnum = "card_revenue_payment"
	TransactionTransactionSourceCategoryEnumCheckDepositAcceptance                      TransactionTransactionSourceCategoryEnum = "check_deposit_acceptance"
	TransactionTransactionSourceCategoryEnumCheckDepositReturn                          TransactionTransactionSourceCategoryEnum = "check_deposit_return"
	TransactionTransactionSourceCategoryEnumCheckTransferIntention                      TransactionTransactionSourceCategoryEnum = "check_transfer_intention"
	TransactionTransactionSourceCategoryEnumCheckTransferReturn                         TransactionTransactionSourceCategoryEnum = "check_transfer_return"
	TransactionTransactionSourceCategoryEnumCheckTransferRejection                      TransactionTransactionSourceCategoryEnum = "check_transfer_rejection"
	TransactionTransactionSourceCategoryEnumCheckTransferStopPaymentRequest             TransactionTransactionSourceCategoryEnum = "check_transfer_stop_payment_request"
	TransactionTransactionSourceCategoryEnumDisputeResolution                           TransactionTransactionSourceCategoryEnum = "dispute_resolution"
	TransactionTransactionSourceCategoryEnumEmpyrealCashDeposit                         TransactionTransactionSourceCategoryEnum = "empyreal_cash_deposit"
	TransactionTransactionSourceCategoryEnumFeePayment                                  TransactionTransactionSourceCategoryEnum = "fee_payment"
	TransactionTransactionSourceCategoryEnumInboundAchTransfer                          TransactionTransactionSourceCategoryEnum = "inbound_ach_transfer"
	TransactionTransactionSourceCategoryEnumInboundAchTransferReturnIntention           TransactionTransactionSourceCategoryEnum = "inbound_ach_transfer_return_intention"
	TransactionTransactionSourceCategoryEnumInboundCheck                                TransactionTransactionSourceCategoryEnum = "inbound_check"
	TransactionTransactionSourceCategoryEnumInboundInternationalAchTransfer             TransactionTransactionSourceCategoryEnum = "inbound_international_ach_transfer"
	TransactionTransactionSourceCategoryEnumInboundRealTimePaymentsTransferConfirmation TransactionTransactionSourceCategoryEnum = "inbound_real_time_payments_transfer_confirmation"
	TransactionTransactionSourceCategoryEnumInboundWireDrawdownPaymentReversal          TransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment_reversal"
	TransactionTransactionSourceCategoryEnumInboundWireDrawdownPayment                  TransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment"
	TransactionTransactionSourceCategoryEnumInboundWireReversal                         TransactionTransactionSourceCategoryEnum = "inbound_wire_reversal"
	TransactionTransactionSourceCategoryEnumInboundWireTransfer                         TransactionTransactionSourceCategoryEnum = "inbound_wire_transfer"
	TransactionTransactionSourceCategoryEnumInterestPayment                             TransactionTransactionSourceCategoryEnum = "interest_payment"
	TransactionTransactionSourceCategoryEnumInternalGeneralLedgerTransaction            TransactionTransactionSourceCategoryEnum = "internal_general_ledger_transaction"
	TransactionTransactionSourceCategoryEnumInternalSource                              TransactionTransactionSourceCategoryEnum = "internal_source"
	TransactionTransactionSourceCategoryEnumCardRouteRefund                             TransactionTransactionSourceCategoryEnum = "card_route_refund"
	TransactionTransactionSourceCategoryEnumCardRouteSettlement                         TransactionTransactionSourceCategoryEnum = "card_route_settlement"
	TransactionTransactionSourceCategoryEnumRealTimePaymentsTransferAcknowledgement     TransactionTransactionSourceCategoryEnum = "real_time_payments_transfer_acknowledgement"
	TransactionTransactionSourceCategoryEnumSampleFunds                                 TransactionTransactionSourceCategoryEnum = "sample_funds"
	TransactionTransactionSourceCategoryEnumWireDrawdownPaymentIntention                TransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_intention"
	TransactionTransactionSourceCategoryEnumWireDrawdownPaymentRejection                TransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_rejection"
	TransactionTransactionSourceCategoryEnumWireTransferIntention                       TransactionTransactionSourceCategoryEnum = "wire_transfer_intention"
	TransactionTransactionSourceCategoryEnumWireTransferRejection                       TransactionTransactionSourceCategoryEnum = "wire_transfer_rejection"
	TransactionTransactionSourceCategoryEnumOther                                       TransactionTransactionSourceCategoryEnum = "other"
)

func (e TransactionTransactionSourceCategoryEnum) ToPointer() *TransactionTransactionSourceCategoryEnum {
	return &e
}

func (e *TransactionTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_transfer_intention":
		fallthrough
	case "ach_check_conversion_return":
		fallthrough
	case "ach_check_conversion":
		fallthrough
	case "ach_transfer_intention":
		fallthrough
	case "ach_transfer_rejection":
		fallthrough
	case "ach_transfer_return":
		fallthrough
	case "card_dispute_acceptance":
		fallthrough
	case "card_refund":
		fallthrough
	case "card_settlement":
		fallthrough
	case "card_revenue_payment":
		fallthrough
	case "check_deposit_acceptance":
		fallthrough
	case "check_deposit_return":
		fallthrough
	case "check_transfer_intention":
		fallthrough
	case "check_transfer_return":
		fallthrough
	case "check_transfer_rejection":
		fallthrough
	case "check_transfer_stop_payment_request":
		fallthrough
	case "dispute_resolution":
		fallthrough
	case "empyreal_cash_deposit":
		fallthrough
	case "fee_payment":
		fallthrough
	case "inbound_ach_transfer":
		fallthrough
	case "inbound_ach_transfer_return_intention":
		fallthrough
	case "inbound_check":
		fallthrough
	case "inbound_international_ach_transfer":
		fallthrough
	case "inbound_real_time_payments_transfer_confirmation":
		fallthrough
	case "inbound_wire_drawdown_payment_reversal":
		fallthrough
	case "inbound_wire_drawdown_payment":
		fallthrough
	case "inbound_wire_reversal":
		fallthrough
	case "inbound_wire_transfer":
		fallthrough
	case "interest_payment":
		fallthrough
	case "internal_general_ledger_transaction":
		fallthrough
	case "internal_source":
		fallthrough
	case "card_route_refund":
		fallthrough
	case "card_route_settlement":
		fallthrough
	case "real_time_payments_transfer_acknowledgement":
		fallthrough
	case "sample_funds":
		fallthrough
	case "wire_drawdown_payment_intention":
		fallthrough
	case "wire_drawdown_payment_rejection":
		fallthrough
	case "wire_transfer_intention":
		fallthrough
	case "wire_transfer_rejection":
		fallthrough
	case "other":
		*e = TransactionTransactionSourceCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCategoryEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum string

const (
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumCad TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CAD"
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumChf TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CHF"
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumEur TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "EUR"
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumGbp TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "GBP"
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumJpy TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "JPY"
	TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumUsd TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum) ToPointer() *TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckDepositAcceptance - A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
type TransactionTransactionSourceCheckDepositAcceptance struct {
	// The account number printed on the check.
	AccountNumber string `json:"account_number"`
	// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// An additional line of metadata printed on the check. This typically includes the check number for business checks.
	AuxiliaryOnUs string `json:"auxiliary_on_us"`
	// The ID of the Check Deposit that was accepted.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency TransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum `json:"currency"`
	// The routing number printed on the check.
	RoutingNumber string `json:"routing_number"`
	// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
	SerialNumber string `json:"serial_number"`
}

// TransactionTransactionSourceCheckDepositReturnCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type TransactionTransactionSourceCheckDepositReturnCurrencyEnum string

const (
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumCad TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CAD"
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumChf TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CHF"
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumEur TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "EUR"
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumGbp TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "GBP"
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumJpy TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "JPY"
	TransactionTransactionSourceCheckDepositReturnCurrencyEnumUsd TransactionTransactionSourceCheckDepositReturnCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCheckDepositReturnCurrencyEnum) ToPointer() *TransactionTransactionSourceCheckDepositReturnCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckDepositReturnCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCheckDepositReturnCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckDepositReturnCurrencyEnum: %v", v)
	}
}

type TransactionTransactionSourceCheckDepositReturnReturnReasonEnum string

const (
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumAchConversionNotSupported TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "ach_conversion_not_supported"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumClosedAccount             TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "closed_account"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumDuplicateSubmission       TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "duplicate_submission"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumInsufficientFunds         TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "insufficient_funds"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumNoAccount                 TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "no_account"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumNotAuthorized             TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "not_authorized"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumStaleDated                TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stale_dated"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumStopPayment               TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stop_payment"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnknownReason             TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unknown_reason"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnmatchedDetails          TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unmatched_details"
	TransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnreadableImage           TransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unreadable_image"
)

func (e TransactionTransactionSourceCheckDepositReturnReturnReasonEnum) ToPointer() *TransactionTransactionSourceCheckDepositReturnReturnReasonEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckDepositReturnReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ach_conversion_not_supported":
		fallthrough
	case "closed_account":
		fallthrough
	case "duplicate_submission":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "no_account":
		fallthrough
	case "not_authorized":
		fallthrough
	case "stale_dated":
		fallthrough
	case "stop_payment":
		fallthrough
	case "unknown_reason":
		fallthrough
	case "unmatched_details":
		fallthrough
	case "unreadable_image":
		*e = TransactionTransactionSourceCheckDepositReturnReturnReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckDepositReturnReturnReasonEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckDepositReturn - A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
type TransactionTransactionSourceCheckDepositReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the Check Deposit that was returned.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency     TransactionTransactionSourceCheckDepositReturnCurrencyEnum     `json:"currency"`
	ReturnReason TransactionTransactionSourceCheckDepositReturnReturnReasonEnum `json:"return_reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the transaction that reversed the original check deposit transaction.
	TransactionID string `json:"transaction_id"`
}

// TransactionTransactionSourceCheckTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type TransactionTransactionSourceCheckTransferIntentionCurrencyEnum string

const (
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumCad TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CAD"
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumChf TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CHF"
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumEur TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "EUR"
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumGbp TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "GBP"
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumJpy TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "JPY"
	TransactionTransactionSourceCheckTransferIntentionCurrencyEnumUsd TransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceCheckTransferIntentionCurrencyEnum) ToPointer() *TransactionTransactionSourceCheckTransferIntentionCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceCheckTransferIntentionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckTransferIntentionCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckTransferIntention - A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
type TransactionTransactionSourceCheckTransferIntention struct {
	// The city of the check's destination.
	AddressCity string `json:"address_city"`
	// The street address of the check's destination.
	AddressLine1 string `json:"address_line1"`
	// The second line of the address of the check's destination.
	AddressLine2 string `json:"address_line2"`
	// The state of the check's destination.
	AddressState string `json:"address_state"`
	// The postal code of the check's destination.
	AddressZip string `json:"address_zip"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency TransactionTransactionSourceCheckTransferIntentionCurrencyEnum `json:"currency"`
	// The name that will be printed on the check.
	RecipientName string `json:"recipient_name"`
	// The identifier of the Check Transfer with which this is associated.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceCheckTransferRejection - A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
type TransactionTransactionSourceCheckTransferRejection struct {
	// The identifier of the Check Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceCheckTransferReturnReasonEnum - The reason why the check was returned.
type TransactionTransactionSourceCheckTransferReturnReasonEnum string

const (
	TransactionTransactionSourceCheckTransferReturnReasonEnumMailDeliveryFailure TransactionTransactionSourceCheckTransferReturnReasonEnum = "mail_delivery_failure"
	TransactionTransactionSourceCheckTransferReturnReasonEnumRefusedByRecipient  TransactionTransactionSourceCheckTransferReturnReasonEnum = "refused_by_recipient"
)

func (e TransactionTransactionSourceCheckTransferReturnReasonEnum) ToPointer() *TransactionTransactionSourceCheckTransferReturnReasonEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckTransferReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mail_delivery_failure":
		fallthrough
	case "refused_by_recipient":
		*e = TransactionTransactionSourceCheckTransferReturnReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckTransferReturnReasonEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckTransferReturn - A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
type TransactionTransactionSourceCheckTransferReturn struct {
	// If available, a document with additional information about the return.
	FileID string `json:"file_id"`
	// The reason why the check was returned.
	Reason TransactionTransactionSourceCheckTransferReturnReasonEnum `json:"reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the Transaction that was created to credit you for the returned check.
	TransactionID string `json:"transaction_id"`
	// The identifier of the returned Check Transfer.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
type TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum string

const (
	TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnumCheckTransferStopPaymentRequest TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum = "check_transfer_stop_payment_request"
)

func (e TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum) ToPointer() *TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum {
	return &e
}

func (e *TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check_transfer_stop_payment_request":
		*e = TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum: %v", v)
	}
}

// TransactionTransactionSourceCheckTransferStopPaymentRequest - A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
type TransactionTransactionSourceCheckTransferStopPaymentRequest struct {
	// The time the stop-payment was requested.
	RequestedAt time.Time `json:"requested_at"`
	// The transaction ID of the corresponding credit transaction.
	TransactionID string `json:"transaction_id"`
	// The ID of the check transfer that was stopped.
	TransferID string `json:"transfer_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
	Type TransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum `json:"type"`
}

// TransactionTransactionSourceDisputeResolutionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type TransactionTransactionSourceDisputeResolutionCurrencyEnum string

const (
	TransactionTransactionSourceDisputeResolutionCurrencyEnumCad TransactionTransactionSourceDisputeResolutionCurrencyEnum = "CAD"
	TransactionTransactionSourceDisputeResolutionCurrencyEnumChf TransactionTransactionSourceDisputeResolutionCurrencyEnum = "CHF"
	TransactionTransactionSourceDisputeResolutionCurrencyEnumEur TransactionTransactionSourceDisputeResolutionCurrencyEnum = "EUR"
	TransactionTransactionSourceDisputeResolutionCurrencyEnumGbp TransactionTransactionSourceDisputeResolutionCurrencyEnum = "GBP"
	TransactionTransactionSourceDisputeResolutionCurrencyEnumJpy TransactionTransactionSourceDisputeResolutionCurrencyEnum = "JPY"
	TransactionTransactionSourceDisputeResolutionCurrencyEnumUsd TransactionTransactionSourceDisputeResolutionCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceDisputeResolutionCurrencyEnum) ToPointer() *TransactionTransactionSourceDisputeResolutionCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceDisputeResolutionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceDisputeResolutionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceDisputeResolutionCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceDisputeResolution - A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
type TransactionTransactionSourceDisputeResolution struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency TransactionTransactionSourceDisputeResolutionCurrencyEnum `json:"currency"`
	// The identifier of the Transaction that was disputed.
	DisputedTransactionID string `json:"disputed_transaction_id"`
}

// TransactionTransactionSourceEmpyrealCashDeposit - A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
type TransactionTransactionSourceEmpyrealCashDeposit struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount      int64     `json:"amount"`
	BagID       string    `json:"bag_id"`
	DepositDate time.Time `json:"deposit_date"`
}

// TransactionTransactionSourceFeePaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type TransactionTransactionSourceFeePaymentCurrencyEnum string

const (
	TransactionTransactionSourceFeePaymentCurrencyEnumCad TransactionTransactionSourceFeePaymentCurrencyEnum = "CAD"
	TransactionTransactionSourceFeePaymentCurrencyEnumChf TransactionTransactionSourceFeePaymentCurrencyEnum = "CHF"
	TransactionTransactionSourceFeePaymentCurrencyEnumEur TransactionTransactionSourceFeePaymentCurrencyEnum = "EUR"
	TransactionTransactionSourceFeePaymentCurrencyEnumGbp TransactionTransactionSourceFeePaymentCurrencyEnum = "GBP"
	TransactionTransactionSourceFeePaymentCurrencyEnumJpy TransactionTransactionSourceFeePaymentCurrencyEnum = "JPY"
	TransactionTransactionSourceFeePaymentCurrencyEnumUsd TransactionTransactionSourceFeePaymentCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceFeePaymentCurrencyEnum) ToPointer() *TransactionTransactionSourceFeePaymentCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceFeePaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceFeePaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceFeePaymentCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceFeePayment - A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
type TransactionTransactionSourceFeePayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency TransactionTransactionSourceFeePaymentCurrencyEnum `json:"currency"`
}

// TransactionTransactionSourceInboundACHTransfer - A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
type TransactionTransactionSourceInboundACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	OriginatorCompanyDescriptiveDate   string `json:"originator_company_descriptive_date"`
	OriginatorCompanyDiscretionaryData string `json:"originator_company_discretionary_data"`
	OriginatorCompanyEntryDescription  string `json:"originator_company_entry_description"`
	OriginatorCompanyID                string `json:"originator_company_id"`
	OriginatorCompanyName              string `json:"originator_company_name"`
	ReceiverIDNumber                   string `json:"receiver_id_number"`
	ReceiverName                       string `json:"receiver_name"`
	TraceNumber                        string `json:"trace_number"`
}

// TransactionTransactionSourceInboundCheckCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type TransactionTransactionSourceInboundCheckCurrencyEnum string

const (
	TransactionTransactionSourceInboundCheckCurrencyEnumCad TransactionTransactionSourceInboundCheckCurrencyEnum = "CAD"
	TransactionTransactionSourceInboundCheckCurrencyEnumChf TransactionTransactionSourceInboundCheckCurrencyEnum = "CHF"
	TransactionTransactionSourceInboundCheckCurrencyEnumEur TransactionTransactionSourceInboundCheckCurrencyEnum = "EUR"
	TransactionTransactionSourceInboundCheckCurrencyEnumGbp TransactionTransactionSourceInboundCheckCurrencyEnum = "GBP"
	TransactionTransactionSourceInboundCheckCurrencyEnumJpy TransactionTransactionSourceInboundCheckCurrencyEnum = "JPY"
	TransactionTransactionSourceInboundCheckCurrencyEnumUsd TransactionTransactionSourceInboundCheckCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceInboundCheckCurrencyEnum) ToPointer() *TransactionTransactionSourceInboundCheckCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceInboundCheckCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceInboundCheckCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceInboundCheckCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceInboundCheck - A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
type TransactionTransactionSourceInboundCheck struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                int64  `json:"amount"`
	CheckFrontImageFileID string `json:"check_front_image_file_id"`
	CheckNumber           string `json:"check_number"`
	CheckRearImageFileID  string `json:"check_rear_image_file_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency TransactionTransactionSourceInboundCheckCurrencyEnum `json:"currency"`
}

// TransactionTransactionSourceInboundInternationalACHTransfer - A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
type TransactionTransactionSourceInboundInternationalACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                                                 int64  `json:"amount"`
	DestinationCountryCode                                 string `json:"destination_country_code"`
	DestinationCurrencyCode                                string `json:"destination_currency_code"`
	ForeignExchangeIndicator                               string `json:"foreign_exchange_indicator"`
	ForeignExchangeReference                               string `json:"foreign_exchange_reference"`
	ForeignExchangeReferenceIndicator                      string `json:"foreign_exchange_reference_indicator"`
	ForeignPaymentAmount                                   int64  `json:"foreign_payment_amount"`
	ForeignTraceNumber                                     string `json:"foreign_trace_number"`
	InternationalTransactionTypeCode                       string `json:"international_transaction_type_code"`
	OriginatingCurrencyCode                                string `json:"originating_currency_code"`
	OriginatingDepositoryFinancialInstitutionBranchCountry string `json:"originating_depository_financial_institution_branch_country"`
	OriginatingDepositoryFinancialInstitutionID            string `json:"originating_depository_financial_institution_id"`
	OriginatingDepositoryFinancialInstitutionIDQualifier   string `json:"originating_depository_financial_institution_id_qualifier"`
	OriginatingDepositoryFinancialInstitutionName          string `json:"originating_depository_financial_institution_name"`
	OriginatorCity                                         string `json:"originator_city"`
	OriginatorCompanyEntryDescription                      string `json:"originator_company_entry_description"`
	OriginatorCountry                                      string `json:"originator_country"`
	OriginatorIdentification                               string `json:"originator_identification"`
	OriginatorName                                         string `json:"originator_name"`
	OriginatorPostalCode                                   string `json:"originator_postal_code"`
	OriginatorStateOrProvince                              string `json:"originator_state_or_province"`
	OriginatorStreetAddress                                string `json:"originator_street_address"`
	PaymentRelatedInformation                              string `json:"payment_related_information"`
	PaymentRelatedInformation2                             string `json:"payment_related_information2"`
	ReceiverCity                                           string `json:"receiver_city"`
	ReceiverCountry                                        string `json:"receiver_country"`
	ReceiverIdentificationNumber                           string `json:"receiver_identification_number"`
	ReceiverPostalCode                                     string `json:"receiver_postal_code"`
	ReceiverStateOrProvince                                string `json:"receiver_state_or_province"`
	ReceiverStreetAddress                                  string `json:"receiver_street_address"`
	ReceivingCompanyOrIndividualName                       string `json:"receiving_company_or_individual_name"`
	ReceivingDepositoryFinancialInstitutionCountry         string `json:"receiving_depository_financial_institution_country"`
	ReceivingDepositoryFinancialInstitutionID              string `json:"receiving_depository_financial_institution_id"`
	ReceivingDepositoryFinancialInstitutionIDQualifier     string `json:"receiving_depository_financial_institution_id_qualifier"`
	ReceivingDepositoryFinancialInstitutionName            string `json:"receiving_depository_financial_institution_name"`
	TraceNumber                                            string `json:"trace_number"`
}

// TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
type TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum string

const (
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumCad TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CAD"
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumChf TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CHF"
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumEur TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "EUR"
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumGbp TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "GBP"
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumJpy TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "JPY"
	TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumUsd TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum) ToPointer() *TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation - A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
type TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation struct {
	// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The name the sender of the transfer specified as the recipient of the transfer.
	CreditorName string `json:"creditor_name"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
	Currency TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum `json:"currency"`
	// The account number of the account that sent the transfer.
	DebtorAccountNumber string `json:"debtor_account_number"`
	// The name provided by the sender of the transfer.
	DebtorName string `json:"debtor_name"`
	// The routing number of the account that sent the transfer.
	DebtorRoutingNumber string `json:"debtor_routing_number"`
	// Additional information included with the transfer.
	RemittanceInformation string `json:"remittance_information"`
	// The Real Time Payments network identification of the transfer
	TransactionIdentification string `json:"transaction_identification"`
}

// TransactionTransactionSourceInboundWireDrawdownPayment - A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
type TransactionTransactionSourceInboundWireDrawdownPayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	BeneficiaryAddressLine1            string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2            string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3            string `json:"beneficiary_address_line3"`
	BeneficiaryName                    string `json:"beneficiary_name"`
	BeneficiaryReference               string `json:"beneficiary_reference"`
	Description                        string `json:"description"`
	InputMessageAccountabilityData     string `json:"input_message_accountability_data"`
	OriginatorAddressLine1             string `json:"originator_address_line1"`
	OriginatorAddressLine2             string `json:"originator_address_line2"`
	OriginatorAddressLine3             string `json:"originator_address_line3"`
	OriginatorName                     string `json:"originator_name"`
	OriginatorToBeneficiaryInformation string `json:"originator_to_beneficiary_information"`
}

// TransactionTransactionSourceInboundWireDrawdownPaymentReversal - A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
type TransactionTransactionSourceInboundWireDrawdownPaymentReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
}

// TransactionTransactionSourceInboundWireReversal - A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
type TransactionTransactionSourceInboundWireReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
	CreatedAt time.Time `json:"created_at"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// Additional financial institution information included in the wire reversal.
	FinancialInstitutionToFinancialInstitutionInformation string `json:"financial_institution_to_financial_institution_information"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
	// Information included in the wire reversal for the receiving financial institution.
	ReceiverFinancialInstitutionInformation string `json:"receiver_financial_institution_information"`
	// The ID for the Transaction associated with the transfer reversal.
	TransactionID string `json:"transaction_id"`
}

// TransactionTransactionSourceInboundWireTransfer - A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
type TransactionTransactionSourceInboundWireTransfer struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                                  int64  `json:"amount"`
	BeneficiaryAddressLine1                 string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2                 string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3                 string `json:"beneficiary_address_line3"`
	BeneficiaryName                         string `json:"beneficiary_name"`
	BeneficiaryReference                    string `json:"beneficiary_reference"`
	Description                             string `json:"description"`
	InputMessageAccountabilityData          string `json:"input_message_accountability_data"`
	OriginatorAddressLine1                  string `json:"originator_address_line1"`
	OriginatorAddressLine2                  string `json:"originator_address_line2"`
	OriginatorAddressLine3                  string `json:"originator_address_line3"`
	OriginatorName                          string `json:"originator_name"`
	OriginatorToBeneficiaryInformation      string `json:"originator_to_beneficiary_information"`
	OriginatorToBeneficiaryInformationLine1 string `json:"originator_to_beneficiary_information_line1"`
	OriginatorToBeneficiaryInformationLine2 string `json:"originator_to_beneficiary_information_line2"`
	OriginatorToBeneficiaryInformationLine3 string `json:"originator_to_beneficiary_information_line3"`
	OriginatorToBeneficiaryInformationLine4 string `json:"originator_to_beneficiary_information_line4"`
}

// TransactionTransactionSourceInterestPaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type TransactionTransactionSourceInterestPaymentCurrencyEnum string

const (
	TransactionTransactionSourceInterestPaymentCurrencyEnumCad TransactionTransactionSourceInterestPaymentCurrencyEnum = "CAD"
	TransactionTransactionSourceInterestPaymentCurrencyEnumChf TransactionTransactionSourceInterestPaymentCurrencyEnum = "CHF"
	TransactionTransactionSourceInterestPaymentCurrencyEnumEur TransactionTransactionSourceInterestPaymentCurrencyEnum = "EUR"
	TransactionTransactionSourceInterestPaymentCurrencyEnumGbp TransactionTransactionSourceInterestPaymentCurrencyEnum = "GBP"
	TransactionTransactionSourceInterestPaymentCurrencyEnumJpy TransactionTransactionSourceInterestPaymentCurrencyEnum = "JPY"
	TransactionTransactionSourceInterestPaymentCurrencyEnumUsd TransactionTransactionSourceInterestPaymentCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceInterestPaymentCurrencyEnum) ToPointer() *TransactionTransactionSourceInterestPaymentCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceInterestPaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceInterestPaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceInterestPaymentCurrencyEnum: %v", v)
	}
}

// TransactionTransactionSourceInterestPayment - A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
type TransactionTransactionSourceInterestPayment struct {
	// The account on which the interest was accrued.
	AccruedOnAccountID string `json:"accrued_on_account_id"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency TransactionTransactionSourceInterestPaymentCurrencyEnum `json:"currency"`
	// The end of the period for which this transaction paid interest.
	PeriodEnd time.Time `json:"period_end"`
	// The start of the period for which this transaction paid interest.
	PeriodStart time.Time `json:"period_start"`
}

// TransactionTransactionSourceInternalSourceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type TransactionTransactionSourceInternalSourceCurrencyEnum string

const (
	TransactionTransactionSourceInternalSourceCurrencyEnumCad TransactionTransactionSourceInternalSourceCurrencyEnum = "CAD"
	TransactionTransactionSourceInternalSourceCurrencyEnumChf TransactionTransactionSourceInternalSourceCurrencyEnum = "CHF"
	TransactionTransactionSourceInternalSourceCurrencyEnumEur TransactionTransactionSourceInternalSourceCurrencyEnum = "EUR"
	TransactionTransactionSourceInternalSourceCurrencyEnumGbp TransactionTransactionSourceInternalSourceCurrencyEnum = "GBP"
	TransactionTransactionSourceInternalSourceCurrencyEnumJpy TransactionTransactionSourceInternalSourceCurrencyEnum = "JPY"
	TransactionTransactionSourceInternalSourceCurrencyEnumUsd TransactionTransactionSourceInternalSourceCurrencyEnum = "USD"
)

func (e TransactionTransactionSourceInternalSourceCurrencyEnum) ToPointer() *TransactionTransactionSourceInternalSourceCurrencyEnum {
	return &e
}

func (e *TransactionTransactionSourceInternalSourceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = TransactionTransactionSourceInternalSourceCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceInternalSourceCurrencyEnum: %v", v)
	}
}

type TransactionTransactionSourceInternalSourceReasonEnum string

const (
	TransactionTransactionSourceInternalSourceReasonEnumBankMigration      TransactionTransactionSourceInternalSourceReasonEnum = "bank_migration"
	TransactionTransactionSourceInternalSourceReasonEnumCashback           TransactionTransactionSourceInternalSourceReasonEnum = "cashback"
	TransactionTransactionSourceInternalSourceReasonEnumEmpyrealAdjustment TransactionTransactionSourceInternalSourceReasonEnum = "empyreal_adjustment"
	TransactionTransactionSourceInternalSourceReasonEnumError              TransactionTransactionSourceInternalSourceReasonEnum = "error"
	TransactionTransactionSourceInternalSourceReasonEnumErrorCorrection    TransactionTransactionSourceInternalSourceReasonEnum = "error_correction"
	TransactionTransactionSourceInternalSourceReasonEnumFees               TransactionTransactionSourceInternalSourceReasonEnum = "fees"
	TransactionTransactionSourceInternalSourceReasonEnumInterest           TransactionTransactionSourceInternalSourceReasonEnum = "interest"
	TransactionTransactionSourceInternalSourceReasonEnumSampleFunds        TransactionTransactionSourceInternalSourceReasonEnum = "sample_funds"
	TransactionTransactionSourceInternalSourceReasonEnumSampleFundsReturn  TransactionTransactionSourceInternalSourceReasonEnum = "sample_funds_return"
)

func (e TransactionTransactionSourceInternalSourceReasonEnum) ToPointer() *TransactionTransactionSourceInternalSourceReasonEnum {
	return &e
}

func (e *TransactionTransactionSourceInternalSourceReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank_migration":
		fallthrough
	case "cashback":
		fallthrough
	case "empyreal_adjustment":
		fallthrough
	case "error":
		fallthrough
	case "error_correction":
		fallthrough
	case "fees":
		fallthrough
	case "interest":
		fallthrough
	case "sample_funds":
		fallthrough
	case "sample_funds_return":
		*e = TransactionTransactionSourceInternalSourceReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTransactionSourceInternalSourceReasonEnum: %v", v)
	}
}

// TransactionTransactionSourceInternalSource - A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
type TransactionTransactionSourceInternalSource struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency TransactionTransactionSourceInternalSourceCurrencyEnum `json:"currency"`
	Reason   TransactionTransactionSourceInternalSourceReasonEnum   `json:"reason"`
}

// TransactionTransactionSourceRealTimePaymentsTransferAcknowledgement - A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
type TransactionTransactionSourceRealTimePaymentsTransferAcknowledgement struct {
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The destination account number.
	DestinationAccountNumber string `json:"destination_account_number"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	DestinationRoutingNumber string `json:"destination_routing_number"`
	// Unstructured information that will show on the recipient's bank statement.
	RemittanceInformation string `json:"remittance_information"`
	// The identifier of the Real Time Payments Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceSampleFunds - A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
type TransactionTransactionSourceSampleFunds struct {
	// Where the sample funds came from.
	Originator string `json:"originator"`
}

// TransactionTransactionSourceWireDrawdownPaymentIntention - A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
type TransactionTransactionSourceWireDrawdownPaymentIntention struct {
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
	TransferID         string `json:"transfer_id"`
}

// TransactionTransactionSourceWireDrawdownPaymentRejection - A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
type TransactionTransactionSourceWireDrawdownPaymentRejection struct {
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSourceWireTransferIntention - A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
type TransactionTransactionSourceWireTransferIntention struct {
	// The destination account number.
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The message that will show on the recipient's bank statement.
	MessageToRecipient string `json:"message_to_recipient"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	RoutingNumber string `json:"routing_number"`
	TransferID    string `json:"transfer_id"`
}

// TransactionTransactionSourceWireTransferRejection - A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
type TransactionTransactionSourceWireTransferRejection struct {
	TransferID string `json:"transfer_id"`
}

// TransactionTransactionSource - This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
type TransactionTransactionSource struct {
	// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
	AccountTransferIntention TransactionTransactionSourceAccountTransferIntention `json:"account_transfer_intention"`
	// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
	AchCheckConversion TransactionTransactionSourceACHCheckConversion `json:"ach_check_conversion"`
	// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
	AchCheckConversionReturn TransactionTransactionSourceACHCheckConversionReturn `json:"ach_check_conversion_return"`
	// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
	AchTransferIntention TransactionTransactionSourceACHTransferIntention `json:"ach_transfer_intention"`
	// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
	AchTransferRejection TransactionTransactionSourceACHTransferRejection `json:"ach_transfer_rejection"`
	// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
	AchTransferReturn TransactionTransactionSourceACHTransferReturn `json:"ach_transfer_return"`
	// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
	CardDisputeAcceptance TransactionTransactionSourceCardDisputeAcceptance `json:"card_dispute_acceptance"`
	// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
	CardRefund TransactionTransactionSourceCardRefund `json:"card_refund"`
	// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
	CardRevenuePayment TransactionTransactionSourceCardRevenuePayment `json:"card_revenue_payment"`
	// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
	CardRouteRefund TransactionTransactionSourceDeprecatedCardRefund `json:"card_route_refund"`
	// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
	CardRouteSettlement TransactionTransactionSourceDeprecatedCardSettlement `json:"card_route_settlement"`
	// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
	CardSettlement TransactionTransactionSourceCardSettlement `json:"card_settlement"`
	// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category TransactionTransactionSourceCategoryEnum `json:"category"`
	// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
	CheckDepositAcceptance TransactionTransactionSourceCheckDepositAcceptance `json:"check_deposit_acceptance"`
	// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
	CheckDepositReturn TransactionTransactionSourceCheckDepositReturn `json:"check_deposit_return"`
	// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
	CheckTransferIntention TransactionTransactionSourceCheckTransferIntention `json:"check_transfer_intention"`
	// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
	CheckTransferRejection TransactionTransactionSourceCheckTransferRejection `json:"check_transfer_rejection"`
	// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
	CheckTransferReturn TransactionTransactionSourceCheckTransferReturn `json:"check_transfer_return"`
	// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
	CheckTransferStopPaymentRequest TransactionTransactionSourceCheckTransferStopPaymentRequest `json:"check_transfer_stop_payment_request"`
	// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
	DisputeResolution TransactionTransactionSourceDisputeResolution `json:"dispute_resolution"`
	// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
	EmpyrealCashDeposit TransactionTransactionSourceEmpyrealCashDeposit `json:"empyreal_cash_deposit"`
	// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
	FeePayment TransactionTransactionSourceFeePayment `json:"fee_payment"`
	// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
	InboundAchTransfer TransactionTransactionSourceInboundACHTransfer `json:"inbound_ach_transfer"`
	// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
	InboundCheck TransactionTransactionSourceInboundCheck `json:"inbound_check"`
	// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
	InboundInternationalAchTransfer TransactionTransactionSourceInboundInternationalACHTransfer `json:"inbound_international_ach_transfer"`
	// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
	InboundRealTimePaymentsTransferConfirmation TransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation `json:"inbound_real_time_payments_transfer_confirmation"`
	// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
	InboundWireDrawdownPayment TransactionTransactionSourceInboundWireDrawdownPayment `json:"inbound_wire_drawdown_payment"`
	// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
	InboundWireDrawdownPaymentReversal TransactionTransactionSourceInboundWireDrawdownPaymentReversal `json:"inbound_wire_drawdown_payment_reversal"`
	// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
	InboundWireReversal TransactionTransactionSourceInboundWireReversal `json:"inbound_wire_reversal"`
	// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
	InboundWireTransfer TransactionTransactionSourceInboundWireTransfer `json:"inbound_wire_transfer"`
	// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
	InterestPayment TransactionTransactionSourceInterestPayment `json:"interest_payment"`
	// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
	InternalSource TransactionTransactionSourceInternalSource `json:"internal_source"`
	// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
	RealTimePaymentsTransferAcknowledgement TransactionTransactionSourceRealTimePaymentsTransferAcknowledgement `json:"real_time_payments_transfer_acknowledgement"`
	// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
	SampleFunds TransactionTransactionSourceSampleFunds `json:"sample_funds"`
	// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
	WireDrawdownPaymentIntention TransactionTransactionSourceWireDrawdownPaymentIntention `json:"wire_drawdown_payment_intention"`
	// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
	WireDrawdownPaymentRejection TransactionTransactionSourceWireDrawdownPaymentRejection `json:"wire_drawdown_payment_rejection"`
	// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
	WireTransferIntention TransactionTransactionSourceWireTransferIntention `json:"wire_transfer_intention"`
	// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
	WireTransferRejection TransactionTransactionSourceWireTransferRejection `json:"wire_transfer_rejection"`
}

// TransactionTypeEnum - A constant representing the object's type. For this resource it will always be `transaction`.
type TransactionTypeEnum string

const (
	TransactionTypeEnumTransaction TransactionTypeEnum = "transaction"
)

func (e TransactionTypeEnum) ToPointer() *TransactionTypeEnum {
	return &e
}

func (e *TransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transaction":
		*e = TransactionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTypeEnum: %v", v)
	}
}

// Transaction - Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement.
type Transaction struct {
	// The identifier for the Account the Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
	Currency TransactionCurrencyEnum `json:"currency"`
	// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
	Description string `json:"description"`
	// The Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Transaction came through.
	RouteType TransactionRouteTypeEnum `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
	Source TransactionTransactionSource `json:"source"`
	// A constant representing the object's type. For this resource it will always be `transaction`.
	Type TransactionTypeEnum `json:"type"`
}
