// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetAllSettings200ApplicationJSONActionEnum - The id of the action
type GetAllSettings200ApplicationJSONActionEnum string

const (
	GetAllSettings200ApplicationJSONActionEnumGetAllSettings GetAllSettings200ApplicationJSONActionEnum = "getAllSettings"
)

func (e *GetAllSettings200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getAllSettings":
		*e = GetAllSettings200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONActionEnum: %s", s)
	}
}

type GetAllSettings200ApplicationJSONDataSettingsAllowedNetworks struct {
	// List of allowed networks
	AllowedNetworks []string `json:"allowed_networks,omitempty"`
	// Rudder id of the policy server
	ID *string `json:"id,omitempty"`
}

// GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum - Define the default setting for global policy mode
type GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnumEnforce GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum = "enforce"
	GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnumAudit   GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum = "audit"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce":
		fallthrough
	case "audit":
		*e = GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum - Default policy mode for accepted node
type GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnumDefault GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum = "default"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnumEnforce GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum = "enforce"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnumAudit   GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum = "audit"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "enforce":
		fallthrough
	case "audit":
		*e = GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum - Set default state for node when they are accepted within Rudder
type GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnumEnabled       GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum = "enabled"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnumIgnored       GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum = "ignored"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnumEmptyPolicies GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum = "empty-policies"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnumInitializing  GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum = "initializing"
	GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnumPreparingEol  GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum = "preparing-eol"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "ignored":
		fallthrough
	case "empty-policies":
		fallthrough
	case "initializing":
		fallthrough
	case "preparing-eol":
		*e = GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum - Method used to synchronize data between server and relays, either "classic" (agent protocol, default), "rsync" (use rsync to synchronize, that you'll need to be manually set up), or "disabled" (use third party system to transmit data)
type GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnumClassic  GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum = "classic"
	GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnumRsync    GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum = "rsync"
	GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnumDisabled GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum = "disabled"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "classic":
		fallthrough
	case "rsync":
		fallthrough
	case "disabled":
		*e = GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum - Compliance reporting mode
type GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsReportingModeEnumFullCompliance  GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum = "full-compliance"
	GetAllSettings200ApplicationJSONDataSettingsReportingModeEnumChangesOnly     GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum = "changes-only"
	GetAllSettings200ApplicationJSONDataSettingsReportingModeEnumReportsDisabled GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum = "reports-disabled"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full-compliance":
		fallthrough
	case "changes-only":
		fallthrough
	case "reports-disabled":
		*e = GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum - Protocol used for syslog communication between node and server
type GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnumTCP GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum = "TCP"
	GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnumUDP GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum = "UDP"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TCP":
		fallthrough
	case "UDP":
		*e = GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum - Default reporting protocol used
type GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum string

const (
	GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnumHTTPS  GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum = "HTTPS"
	GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnumSyslog GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum = "SYSLOG"
)

func (e *GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTPS":
		fallthrough
	case "SYSLOG":
		*e = GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum: %s", s)
	}
}

type GetAllSettings200ApplicationJSONDataSettings struct {
	// List of allowed networks for each policy server (root and relays)
	AllowedNetworks []GetAllSettings200ApplicationJSONDataSettingsAllowedNetworks `json:"allowed_networks,omitempty"`
	// Explanation to display
	ChangeMessagePrompt *string `json:"change_message_prompt,omitempty"`
	// Display changes graphs
	DisplayRecentChangesGraphs *bool `json:"display_recent_changes_graphs,omitempty"`
	// Enable change audit logs
	EnableChangeMessage *bool `json:"enable_change_message,omitempty"`
	// Enable Change Requests
	EnableChangeRequest *bool `json:"enable_change_request,omitempty"`
	// Enable script evaluation in Directives
	EnableJavascriptDirectives *string `json:"enable_javascript_directives,omitempty"`
	// Allow self deployment
	EnableSelfDeployment *bool `json:"enable_self_deployment,omitempty"`
	// Allow self validation
	EnableSelfValidation *bool `json:"enable_self_validation,omitempty"`
	// First agent run time - hour
	FirstRunHour *int64 `json:"first_run_hour,omitempty"`
	// First agent run time - minute
	FirstRunMinute *int64 `json:"first_run_minute,omitempty"`
	// Define the default setting for global policy mode
	GlobalPolicyMode *GetAllSettings200ApplicationJSONDataSettingsGlobalPolicyModeEnum `json:"global_policy_mode,omitempty"`
	// Allow overrides on this default setting
	GlobalPolicyModeOverridable *bool `json:"global_policy_mode_overridable,omitempty"`
	// Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)
	HeartbeatFrequency *int64 `json:"heartbeat_frequency,omitempty"`
	// Log all reports received to `/var/log/rudder/reports/all.log`
	LogAllReports *bool `json:"log_all_reports,omitempty"`
	// Make message mandatory
	MandatoryChangeMessage *bool `json:"mandatory_change_message,omitempty"`
	// Number of days to retain modified files
	ModifiedFileTTL *int64 `json:"modified_file_ttl,omitempty"`
	// Allow acceptation of a pending node when another one with the same hostname is already accepted
	NodeAcceptDuplicatedHostname *bool `json:"node_accept_duplicated_hostname,omitempty"`
	// Default policy mode for accepted node
	NodeOnacceptDefaultPolicyMode *GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultPolicyModeEnum `json:"node_onaccept_default_policyMode,omitempty"`
	// Set default state for node when they are accepted within Rudder
	NodeOnacceptDefaultState *GetAllSettings200ApplicationJSONDataSettingsNodeOnacceptDefaultStateEnum `json:"node_onaccept_default_state,omitempty"`
	// Number of days to retain agent output files
	OutputFileTTL *int64 `json:"output_file_ttl,omitempty"`
	// Method used to synchronize data between server and relays, either "classic" (agent protocol, default), "rsync" (use rsync to synchronize, that you'll need to be manually set up), or "disabled" (use third party system to transmit data)
	RelayServerSynchronizationMethod *GetAllSettings200ApplicationJSONDataSettingsRelayServerSynchronizationMethodEnum `json:"relay_server_synchronization_method,omitempty"`
	// If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself.
	RelayServerSynchronizePolicies *bool `json:"relay_server_synchronize_policies,omitempty"`
	// If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself.
	RelayServerSynchronizeSharedFiles *bool `json:"relay_server_synchronize_shared_files,omitempty"`
	// Compliance reporting mode
	ReportingMode *GetAllSettings200ApplicationJSONDataSettingsReportingModeEnum `json:"reporting_mode,omitempty"`
	// Require time synchronization between nodes and policy server
	RequireTimeSynchronization *bool `json:"require_time_synchronization,omitempty"`
	// Protocol used for syslog communication between node and server
	RsyslogReportingProtocol *GetAllSettings200ApplicationJSONDataSettingsRsyslogReportingProtocolEnum `json:"rsyslog_reporting_protocol,omitempty"`
	// Compute list of changes (repaired reports) per rule
	RudderComputeChanges *bool `json:"rudder_compute_changes,omitempty"`
	// Set the parallelism to compute dynamic group, as a number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)
	RudderComputeDyngroupsMaxParallelism *string `json:"rudder_compute_dyngroups_max_parallelism,omitempty"`
	// Recompute all dynamic groups at the start of policy generation
	RudderGenerationComputeDyngroups *bool `json:"rudder_generation_compute_dyngroups,omitempty"`
	// Policy generation continues on error during NodeConfiguration evaluation
	RudderGenerationContinueOnError *bool `json:"rudder_generation_continue_on_error,omitempty"`
	// Set a delay before starting policy generation, this will allow you to accumulate changes before they are deployed to Nodes, and can also lessen webapp resources needs. The value is a number followed by the time unit needed (seconds/s, minutes/m, hours/h ...), ie "5m" for 5 minutes
	RudderGenerationDelay *string `json:"rudder_generation_delay,omitempty"`
	// Policy generation JS evaluation of directive parameter timeout in seconds
	RudderGenerationJsTimeout *int64 `json:"rudder_generation_js_timeout,omitempty"`
	// Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)
	RudderGenerationMaxParallelism *string `json:"rudder_generation_max_parallelism,omitempty"`
	// Should policy generation be triggered automatically after a change (value 'all'), or should we wait until a manual launch (through api or UI, value 'onlyManual') or even no policy generation at all (value "none")
	RudderGenerationPolicy *string `json:"rudder_generation_policy,omitempty"`
	// Default reporting protocol used
	RudderReportProtocolDefault *GetAllSettings200ApplicationJSONDataSettingsRudderReportProtocolDefaultEnum `json:"rudder_report_protocol_default,omitempty"`
	// Store all compliance details in database
	RudderSaveDbComplianceDetails *bool `json:"rudder_save_db_compliance_details,omitempty"`
	// Store all compliance levels in database
	RudderSaveDbComplianceLevels *bool `json:"rudder_save_db_compliance_levels,omitempty"`
	// Enforce certificate validation in all HTTPS calls
	RudderVerifyCertificates *bool `json:"rudder_verify_certificates,omitempty"`
	// Agent run schedule - time between agent runs (in minutes)
	RunFrequency *int64 `json:"run_frequency,omitempty"`
	// Send anonymous usage statistics
	SendMetrics *string `json:"send_metrics,omitempty"`
	// Maximum delay after scheduled run time (random interval)
	SplayTime *int64 `json:"splay_time,omitempty"`
	// Completely disable syslog protocol
	SyslogProtocolDisabled *bool `json:"syslog_protocol_disabled,omitempty"`
	// Ignore duplicated compliance reports
	UnexpectedAllowsDuplicate *bool `json:"unexpected_allows_duplicate,omitempty"`
	// Allows multiple reports for configuration based on a multivalued variable
	UnexpectedUnboundVarValues *bool `json:"unexpected_unbound_var_values,omitempty"`
}

// GetAllSettings200ApplicationJSONData - Information about the setting
type GetAllSettings200ApplicationJSONData struct {
	Settings GetAllSettings200ApplicationJSONDataSettings `json:"settings"`
}

// GetAllSettings200ApplicationJSONResultEnum - Result of the request
type GetAllSettings200ApplicationJSONResultEnum string

const (
	GetAllSettings200ApplicationJSONResultEnumSuccess GetAllSettings200ApplicationJSONResultEnum = "success"
	GetAllSettings200ApplicationJSONResultEnumError   GetAllSettings200ApplicationJSONResultEnum = "error"
)

func (e *GetAllSettings200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetAllSettings200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllSettings200ApplicationJSONResultEnum: %s", s)
	}
}

// GetAllSettings200ApplicationJSON - Settings
type GetAllSettings200ApplicationJSON struct {
	// The id of the action
	Action GetAllSettings200ApplicationJSONActionEnum `json:"action"`
	// Information about the setting
	Data GetAllSettings200ApplicationJSONData `json:"data"`
	// Result of the request
	Result GetAllSettings200ApplicationJSONResultEnum `json:"result"`
}

type GetAllSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	GetAllSettings200ApplicationJSONObject *GetAllSettings200ApplicationJSON
}
