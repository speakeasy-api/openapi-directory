"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import dashboardoptions as shared_dashboardoptions
from ..shared import guardianoptions as shared_guardianoptions
from ..shared import suppressionlistreason_enum as shared_suppressionlistreason_enum
from ..shared import tag as shared_tag
from ..shared import tlspolicy_enum as shared_tlspolicy_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodyDeliveryOptions:
    r"""Used to associate a configuration set with a dedicated IP pool."""
    
    sending_pool_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SendingPoolName'), 'exclude': lambda f: f is None }})  
    tls_policy: Optional[shared_tlspolicy_enum.TLSPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TlsPolicy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodyReputationOptions:
    r"""Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current Amazon Web Services Region."""
    
    last_fresh_start: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastFreshStart'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    reputation_metrics_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReputationMetricsEnabled'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodySendingOptions:
    r"""Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region."""
    
    sending_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SendingEnabled'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodySuppressionOptions:
    r"""An object that contains information about the suppression list preferences for your account."""
    
    suppressed_reasons: Optional[list[shared_suppressionlistreason_enum.SuppressionListReasonEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuppressedReasons'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodyTrackingOptions:
    r"""<p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>"""
    
    custom_redirect_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomRedirectDomain'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBodyVdmOptions:
    r"""An object that defines the VDM settings that apply to emails that you send using the configuration set."""
    
    dashboard_options: Optional[shared_dashboardoptions.DashboardOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DashboardOptions'), 'exclude': lambda f: f is None }})  
    guardian_options: Optional[shared_guardianoptions.GuardianOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GuardianOptions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConfigurationSetRequestBody:
    
    configuration_set_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationSetName') }})
    r"""<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>"""  
    delivery_options: Optional[CreateConfigurationSetRequestBodyDeliveryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryOptions'), 'exclude': lambda f: f is None }})
    r"""Used to associate a configuration set with a dedicated IP pool."""  
    reputation_options: Optional[CreateConfigurationSetRequestBodyReputationOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReputationOptions'), 'exclude': lambda f: f is None }})
    r"""Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current Amazon Web Services Region."""  
    sending_options: Optional[CreateConfigurationSetRequestBodySendingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SendingOptions'), 'exclude': lambda f: f is None }})
    r"""Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region."""  
    suppression_options: Optional[CreateConfigurationSetRequestBodySuppressionOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuppressionOptions'), 'exclude': lambda f: f is None }})
    r"""An object that contains information about the suppression list preferences for your account."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""An array of objects that define the tags (keys and values) to associate with the configuration set."""  
    tracking_options: Optional[CreateConfigurationSetRequestBodyTrackingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrackingOptions'), 'exclude': lambda f: f is None }})
    r"""<p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>"""  
    vdm_options: Optional[CreateConfigurationSetRequestBodyVdmOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VdmOptions'), 'exclude': lambda f: f is None }})
    r"""An object that defines the VDM settings that apply to emails that you send using the configuration set."""  
    

@dataclasses.dataclass
class CreateConfigurationSetRequest:
    
    request_body: CreateConfigurationSetRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateConfigurationSetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AlreadyExistsException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    create_configuration_set_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    