<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List Customers
     * 
     * <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersResponse
     */
	public function getSetupV1Customers(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/customers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerListViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerListViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Customer
     * 
     * <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /setup/v1/customers</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdResponse
     */
	public function getSetupV1CustomersId(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/customers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Customer Data
     * 
     * <p>Use this endpoint to return the <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's using the <i>GET /setup/v1/customers</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyResponse
     */
	public function getSetupV1CustomersIdPrivacy(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/customers/{id}/privacy', \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1CustomersIdPrivacyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerPrivacyViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerPrivacyViewModel', 'json');
            }
        }

        return $response;
    }
}