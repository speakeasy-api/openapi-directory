// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WebhookConfigInsecureSslType string

const (
	WebhookConfigInsecureSslTypeStr    WebhookConfigInsecureSslType = "str"
	WebhookConfigInsecureSslTypeNumber WebhookConfigInsecureSslType = "number"
)

type WebhookConfigInsecureSsl struct {
	Str    *string
	Number *float64

	Type WebhookConfigInsecureSslType
}

func CreateWebhookConfigInsecureSslStr(str string) WebhookConfigInsecureSsl {
	typ := WebhookConfigInsecureSslTypeStr

	return WebhookConfigInsecureSsl{
		Str:  &str,
		Type: typ,
	}
}

func CreateWebhookConfigInsecureSslNumber(number float64) WebhookConfigInsecureSsl {
	typ := WebhookConfigInsecureSslTypeNumber

	return WebhookConfigInsecureSsl{
		Number: &number,
		Type:   typ,
	}
}

func (u *WebhookConfigInsecureSsl) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = WebhookConfigInsecureSslTypeStr
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = WebhookConfigInsecureSslTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WebhookConfigInsecureSsl) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	return nil, nil
}
