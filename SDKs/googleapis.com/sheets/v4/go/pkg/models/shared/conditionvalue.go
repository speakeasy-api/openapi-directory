// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConditionValueRelativeDateEnum - A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
type ConditionValueRelativeDateEnum string

const (
	ConditionValueRelativeDateEnumRelativeDateUnspecified ConditionValueRelativeDateEnum = "RELATIVE_DATE_UNSPECIFIED"
	ConditionValueRelativeDateEnumPastYear                ConditionValueRelativeDateEnum = "PAST_YEAR"
	ConditionValueRelativeDateEnumPastMonth               ConditionValueRelativeDateEnum = "PAST_MONTH"
	ConditionValueRelativeDateEnumPastWeek                ConditionValueRelativeDateEnum = "PAST_WEEK"
	ConditionValueRelativeDateEnumYesterday               ConditionValueRelativeDateEnum = "YESTERDAY"
	ConditionValueRelativeDateEnumToday                   ConditionValueRelativeDateEnum = "TODAY"
	ConditionValueRelativeDateEnumTomorrow                ConditionValueRelativeDateEnum = "TOMORROW"
)

func (e ConditionValueRelativeDateEnum) ToPointer() *ConditionValueRelativeDateEnum {
	return &e
}

func (e *ConditionValueRelativeDateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RELATIVE_DATE_UNSPECIFIED":
		fallthrough
	case "PAST_YEAR":
		fallthrough
	case "PAST_MONTH":
		fallthrough
	case "PAST_WEEK":
		fallthrough
	case "YESTERDAY":
		fallthrough
	case "TODAY":
		fallthrough
	case "TOMORROW":
		*e = ConditionValueRelativeDateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionValueRelativeDateEnum: %v", v)
	}
}

// ConditionValue - The value of the condition.
type ConditionValue struct {
	// A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
	RelativeDate *ConditionValueRelativeDateEnum `json:"relativeDate,omitempty"`
	// A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
	UserEnteredValue *string `json:"userEnteredValue,omitempty"`
}
