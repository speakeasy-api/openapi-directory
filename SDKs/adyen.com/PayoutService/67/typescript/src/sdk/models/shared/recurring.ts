/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The type of recurring contract to be used.
 *
 * @remarks
 * Possible values:
 * * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
 * * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
 * * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
 * * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
 */
export enum RecurringContractEnum {
  Oneclick = "ONECLICK",
  Recurring = "RECURRING",
  Payout = "PAYOUT",
}

/**
 * The name of the token service.
 */
export enum RecurringTokenServiceEnum {
  Visatokenservice = "VISATOKENSERVICE",
  Mctokenservice = "MCTOKENSERVICE",
}

export class Recurring extends SpeakeasyBase {
  /**
   * The type of recurring contract to be used.
   *
   * @remarks
   * Possible values:
   * * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
   * * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
   * * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
   * * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contract" })
  contract?: RecurringContractEnum;

  /**
   * A descriptive name for this detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurringDetailName" })
  recurringDetailName?: string;

  /**
   * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurringExpiry" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  recurringExpiry?: Date;

  /**
   * Minimum number of days between authorisations. Only for 3D Secure 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurringFrequency" })
  recurringFrequency?: string;

  /**
   * The name of the token service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenService" })
  tokenService?: RecurringTokenServiceEnum;
}
