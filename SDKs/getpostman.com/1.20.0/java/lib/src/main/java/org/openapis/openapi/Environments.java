/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Environments {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Environments(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * All Environments
     * The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..
     * 
     * The response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AllEnvironmentsResponse allEnvironments() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/environments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AllEnvironmentsResponse res = new org.openapis.openapi.models.operations.AllEnvironmentsResponse() {{
            allEnvironments200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AllEnvironments200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AllEnvironments200ApplicationJSON.class);
                res.allEnvironments200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create Environment
     * A sample body is added to the request that conforms to the following JSON schema:
     * 
     * ```json
     * {
     *   "type": "object",
     *   "properties": {
     *     "environment": {
     *       "type": "object",
     *       "properties": {
     *         "name": {
     *               "type": "string",
     *               "maxLength": 254,
     *               "minLength": 1
     *             },
     *         "values": {
     *           "type": "array",
     *           "maxItems": 100,
     *           "additionalItems": false,
     *           "items": {
     *               "type": "object",
     *               "properties": {
     *                 "key": {
     *                   "type": "string",
     *                   "maxLength": 254
     *                   "minLength": 1
     *                 },
     *                 "value": { "type": "string" },
     *                 "enabled": { "type": "boolean" }
     *               },
     *               "required": ["key", "value"]
     *             }
     *         }
     *       },
     *       "required": ["name"]
     *     }
     *   },
     *   "required": ["environment"]
     * }
     * ```
     * 
     * On successful creation of the environment, the API returns the environment name and `id`.
     * 
     * You can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEnvironmentResponse createEnvironment(org.openapis.openapi.models.operations.CreateEnvironmentRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/environments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEnvironmentResponse res = new org.openapis.openapi.models.operations.CreateEnvironmentResponse() {{
            createEnvironment200ApplicationJSONObject = null;
            createEnvironment400ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateEnvironment200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateEnvironment200ApplicationJSON.class);
                res.createEnvironment200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateEnvironment400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateEnvironment400ApplicationJSON.class);
                res.createEnvironment400ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete Environment
     * This endpoint allows you to delete a single environment based on an environment's unique `uid`.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEnvironmentResponse deleteEnvironment(org.openapis.openapi.models.operations.DeleteEnvironmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEnvironmentRequest.class, baseUrl, "/environments/{environment_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEnvironmentResponse res = new org.openapis.openapi.models.operations.DeleteEnvironmentResponse() {{
            deleteEnvironment200ApplicationJSONObject = null;
            deleteEnvironment404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteEnvironment200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteEnvironment200ApplicationJSON.class);
                res.deleteEnvironment200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteEnvironment404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteEnvironment404ApplicationJSON.class);
                res.deleteEnvironment404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Single Environment
     * Access the contents of an environment that is accessible to you using its unique id (`uid`).
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SingleEnvironmentResponse singleEnvironment(org.openapis.openapi.models.operations.SingleEnvironmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SingleEnvironmentRequest.class, baseUrl, "/environments/{environment_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SingleEnvironmentResponse res = new org.openapis.openapi.models.operations.SingleEnvironmentResponse() {{
            singleEnvironment200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SingleEnvironment200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SingleEnvironment200ApplicationJSON.class);
                res.singleEnvironment200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Environment
     * This endpoint replaces an existing environment.
     * 
     * A sample body is added to the request that conforms to the following JSON schema:
     * 
     * ```json
     * {
     * 	"type": "object",
     * 	"properties": {
     * 		"environment": {
     * 			"type": "object",
     * 			"properties": {
     * 				"name": {
     * 					"type": "string",
     * 					"maxLength": 254,
     * 					"minLength": 1
     * 				},
     * 				"values": {
     * 					"type": "array",
     * 					"maxItems": 100,
     * 					"additionalItems": false,
     * 					"items": {
     * 						"type": "object",
     * 						"properties": {
     * 							"key": {
     * 								"type": "string",
     * 								"maxLength": 254,
     * 								"minLength": 1
     * 							},
     * 							"value": {
     * 								"type": "string",
     * 								"maxLength": 254,
     * 								"minLength": 1
     * 							},
     * 							"type": {
     * 								"type": "string"
     * 							},
     * 							"enabled": {
     * 								"type": "boolean"
     * 							}
     * 						},
     * 						"required": [
     * 							"key",
     * 							"value"
     * 						]
     * 					}
     * 				}
     * 			}
     * 		}
     * 	},
     * 	"required": [
     * 		"environment"
     * 	]
     * }
     * ```
     * 
     * On successful updation of the environment, the API returns the environment name and `id`.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateEnvironmentResponse updateEnvironment(org.openapis.openapi.models.operations.UpdateEnvironmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateEnvironmentRequest.class, baseUrl, "/environments/{environment_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateEnvironmentResponse res = new org.openapis.openapi.models.operations.UpdateEnvironmentResponse() {{
            updateEnvironment200ApplicationJSONObject = null;
            updateEnvironment400ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateEnvironment200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateEnvironment200ApplicationJSON.class);
                res.updateEnvironment200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateEnvironment400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateEnvironment400ApplicationJSON.class);
                res.updateEnvironment400ApplicationJSONObject = out;
            }
        }

        return res;
    }
}