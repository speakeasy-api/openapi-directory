"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import monthlyschedule as shared_monthlyschedule
from ..shared import timeofday as shared_timeofday
from ..shared import timezone as shared_timezone
from ..shared import weeklyschedule as shared_weeklyschedule
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RecurringScheduleFrequencyEnum(str, Enum):
    r"""Required. The frequency unit of this recurring schedule."""
    FREQUENCY_UNSPECIFIED = 'FREQUENCY_UNSPECIFIED'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    DAILY = 'DAILY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecurringSchedule:
    r"""Sets the time for recurring patch deployments."""
    
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The end time at which a recurring patch deployment schedule is no longer active."""  
    frequency: Optional[RecurringScheduleFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Required. The frequency unit of this recurring schedule."""  
    last_execute_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastExecuteTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the last patch job ran successfully."""  
    monthly: Optional[shared_monthlyschedule.MonthlySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly'), 'exclude': lambda f: f is None }})
    r"""Represents a monthly schedule. An example of a valid monthly schedule is \\"on the third Tuesday of the month\\" or \\"on the 15th of the month\\"."""  
    next_execute_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextExecuteTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the next patch job is scheduled to run."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment."""  
    time_of_day: Optional[shared_timeofday.TimeOfDay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeOfDay'), 'exclude': lambda f: f is None }})
    r"""Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`."""  
    time_zone: Optional[shared_timezone.TimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }})
    r"""Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones)."""  
    weekly: Optional[shared_weeklyschedule.WeeklySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly'), 'exclude': lambda f: f is None }})
    r"""Represents a weekly schedule."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecurringScheduleInput:
    r"""Sets the time for recurring patch deployments."""
    
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The end time at which a recurring patch deployment schedule is no longer active."""  
    frequency: Optional[RecurringScheduleFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Required. The frequency unit of this recurring schedule."""  
    monthly: Optional[shared_monthlyschedule.MonthlySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly'), 'exclude': lambda f: f is None }})
    r"""Represents a monthly schedule. An example of a valid monthly schedule is \\"on the third Tuesday of the month\\" or \\"on the 15th of the month\\"."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment."""  
    time_of_day: Optional[shared_timeofday.TimeOfDay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeOfDay'), 'exclude': lambda f: f is None }})
    r"""Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`."""  
    time_zone: Optional[shared_timezone.TimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }})
    r"""Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones)."""  
    weekly: Optional[shared_weeklyschedule.WeeklySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly'), 'exclude': lambda f: f is None }})
    r"""Represents a weekly schedule."""  
    