// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type PatientCreateResourceAttributesGenderEnum string

const (
	PatientCreateResourceAttributesGenderEnumMale   PatientCreateResourceAttributesGenderEnum = "male"
	PatientCreateResourceAttributesGenderEnumFemale PatientCreateResourceAttributesGenderEnum = "female"
	PatientCreateResourceAttributesGenderEnumOther  PatientCreateResourceAttributesGenderEnum = "other"
)

func (e *PatientCreateResourceAttributesGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "other":
		*e = PatientCreateResourceAttributesGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientCreateResourceAttributesGenderEnum: %s", s)
	}
}

type PatientCreateResourceAttributesInput struct {
	Addresses      []Address                                  `json:"addresses,omitempty"`
	ArchiveHistory []ArchiveHistory                           `json:"archive_history,omitempty"`
	BirthDate      *types.Date                                `json:"birth_date,omitempty"`
	EmailAddress   *string                                    `json:"email_address,omitempty"`
	FirstName      *string                                    `json:"first_name,omitempty"`
	Gender         *PatientCreateResourceAttributesGenderEnum `json:"gender,omitempty"`
	Identifiers    []PatientIdentifier                        `json:"identifiers,omitempty"`
	LastName       *string                                    `json:"last_name,omitempty"`
	// Coach's note about the patient. Not visible to the patient.
	Note         *string       `json:"note,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
}

type PatientCreateResourceRelationshipsCoachesDataMeta struct {
	Primary *bool `json:"primary,omitempty"`
}

type PatientCreateResourceRelationshipsCoachesDataTypeEnum string

const (
	PatientCreateResourceRelationshipsCoachesDataTypeEnumCoach PatientCreateResourceRelationshipsCoachesDataTypeEnum = "coach"
)

func (e *PatientCreateResourceRelationshipsCoachesDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "coach":
		*e = PatientCreateResourceRelationshipsCoachesDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientCreateResourceRelationshipsCoachesDataTypeEnum: %s", s)
	}
}

type PatientCreateResourceRelationshipsCoachesData struct {
	ID   string                                                `json:"id"`
	Meta *PatientCreateResourceRelationshipsCoachesDataMeta    `json:"meta,omitempty"`
	Type PatientCreateResourceRelationshipsCoachesDataTypeEnum `json:"type"`
}

type PatientCreateResourceRelationshipsCoachesInput struct {
	Data []PatientCreateResourceRelationshipsCoachesData `json:"data"`
}

// PatientCreateResourceRelationshipsGroupsDataMetaQuery - 1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
// 2. If the query returns one group, that group will be related to the patient.
// 3. If the query returns more than one group, the creation of the patient will fail.
type PatientCreateResourceRelationshipsGroupsDataMetaQuery struct {
	Name         string `json:"name"`
	Organization string `json:"organization"`
}

// PatientCreateResourceRelationshipsGroupsDataMeta - Allows the specification of a query for a group rather than providing a group id directly
type PatientCreateResourceRelationshipsGroupsDataMeta struct {
	// 1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
	// 2. If the query returns one group, that group will be related to the patient.
	// 3. If the query returns more than one group, the creation of the patient will fail.
	//
	Query PatientCreateResourceRelationshipsGroupsDataMetaQuery `json:"query"`
}

type PatientCreateResourceRelationshipsGroupsDataTypeEnum string

const (
	PatientCreateResourceRelationshipsGroupsDataTypeEnumGroup PatientCreateResourceRelationshipsGroupsDataTypeEnum = "group"
)

func (e *PatientCreateResourceRelationshipsGroupsDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		*e = PatientCreateResourceRelationshipsGroupsDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientCreateResourceRelationshipsGroupsDataTypeEnum: %s", s)
	}
}

type PatientCreateResourceRelationshipsGroupsData struct {
	// Required if the `meta.query` is not defined.
	ID *string `json:"id,omitempty"`
	// Allows the specification of a query for a group rather than providing a group id directly
	Meta *PatientCreateResourceRelationshipsGroupsDataMeta    `json:"meta,omitempty"`
	Type PatientCreateResourceRelationshipsGroupsDataTypeEnum `json:"type"`
}

type PatientCreateResourceRelationshipsGroups struct {
	Data []PatientCreateResourceRelationshipsGroupsData `json:"data"`
}

type PatientCreateResourceRelationshipsInput struct {
	Coaches *PatientCreateResourceRelationshipsCoachesInput `json:"coaches,omitempty"`
	Groups  PatientCreateResourceRelationshipsGroups        `json:"groups"`
}

type PatientCreateResourceTypeEnum string

const (
	PatientCreateResourceTypeEnumPatient PatientCreateResourceTypeEnum = "patient"
)

func (e *PatientCreateResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "patient":
		*e = PatientCreateResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientCreateResourceTypeEnum: %s", s)
	}
}

// PatientCreateResourceInput - Note that `data` can either be a single object or an array of objects matching the schema specified here
// (bulk create).
type PatientCreateResourceInput struct {
	Attributes    PatientCreateResourceAttributesInput     `json:"attributes"`
	ID            *string                                  `json:"id,omitempty"`
	Relationships *PatientCreateResourceRelationshipsInput `json:"relationships,omitempty"`
	Type          PatientCreateResourceTypeEnum            `json:"type"`
}
