/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DetectMitigationActionsTaskStatistics } from "./detectmitigationactionstaskstatistics";
import { DetectMitigationActionsTaskStatusEnum } from "./detectmitigationactionstaskstatusenum";
import { DetectMitigationActionsTaskTarget } from "./detectmitigationactionstasktarget";
import { MitigationAction } from "./mitigationaction";
import { ViolationEventOccurrenceRange } from "./violationeventoccurrencerange";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  The summary of the mitigation action tasks.
 */
export class DetectMitigationActionsTaskSummary extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: MitigationAction })
  @Expose({ name: "actionsDefinition" })
  @Type(() => MitigationAction)
  actionsDefinition?: MitigationAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "onlyActiveViolationsIncluded" })
  onlyActiveViolationsIncluded?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "suppressedAlertsIncluded" })
  suppressedAlertsIncluded?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => DetectMitigationActionsTaskTarget)
  target?: DetectMitigationActionsTaskTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "taskEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  taskEndTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "taskId" })
  taskId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taskStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  taskStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "taskStatistics" })
  @Type(() => DetectMitigationActionsTaskStatistics)
  taskStatistics?: DetectMitigationActionsTaskStatistics;

  @SpeakeasyMetadata()
  @Expose({ name: "taskStatus" })
  taskStatus?: DetectMitigationActionsTaskStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "violationEventOccurrenceRange" })
  @Type(() => ViolationEventOccurrenceRange)
  violationEventOccurrenceRange?: ViolationEventOccurrenceRange;
}
