"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import orderheaderlinks as shared_orderheaderlinks
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderHeaderWithLinks:
    r"""Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails"""
    
    account_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId') }})
    r"""The marketplace account identifier in BeezUP. This account identifier is based on your api settings."""  
    beez_up_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOrderId') }})
    r"""The BeezUP Order identifier"""  
    etag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag') }})
    r"""ETag value to identify the order.\ 
    This information is required for the operation GetOrder and ChangeOrder.\
    For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
    """  
    links: shared_orderheaderlinks.OrderHeaderLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    marketplace_business_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceBusinessCode') }})
    r"""In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code."""  
    marketplace_technical_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceTechnicalCode') }})
    r"""The technical code of the marketplace."""  
    order_last_modification_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_LastModificationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The last modification UTC date done by BeezUP of this order"""  
    order_marketplace_last_modification_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MarketplaceLastModificationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The last modification UTC date done by the marketplace on this order"""  
    order_marketplace_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MarketplaceOrderId') }})
    r"""The order marketplace identifier"""  
    order_purchase_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_PurchaseUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The purchase date of this order"""  
    order_status_beez_up_order_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Status_BeezUPOrderStatus') }})
    r"""BeezUP order status. Unified for all marketplaces."""  
    processing: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing') }})
    r"""If true, there is currently a harvest or an order change in progress. Otherwise false."""  
    beez_up_order_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOrderUrl'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    order_buyer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Name'), 'exclude': lambda f: f is None }})
    r"""Buyer full name"""  
    order_currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_CurrencyCode'), 'exclude': lambda f: f is None }})
    r"""The currency code <a href=\\"https://en.wikipedia.org/wiki/ISO_4217\\">(ISO 4217)</a>"""  
    order_invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Invoice_Number'), 'exclude': lambda f: f is None }})
    r"""The order invoice number"""  
    order_invoice_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Invoice_Uri'), 'exclude': lambda f: f is None }})
    r"""The order invoice URI"""  
    order_merchant_e_commerce_software_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantECommerceSoftwareName'), 'exclude': lambda f: f is None }})
    r"""The e-commerce software name of the merchant"""  
    order_merchant_e_commerce_software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantECommerceSoftwareVersion'), 'exclude': lambda f: f is None }})
    r"""The e-commece software version of the merchant"""  
    order_merchant_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantOrderId'), 'exclude': lambda f: f is None }})
    r"""The order merchant identifier"""  
    order_status_marketplace_order_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Status_MarketplaceOrderStatus'), 'exclude': lambda f: f is None }})
    r"""The marketplace order state"""  
    order_total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_TotalPrice'), 'exclude': lambda f: f is None }})
    r"""The total price of this order (corresponding to the amount paid by the customer)"""  
    