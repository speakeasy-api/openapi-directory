"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rdsdatabase as shared_rdsdatabase
from ..shared import rdsdatabasecredentials as shared_rdsdatabasecredentials
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RDSDataSpec:
    r"""The data specification of an Amazon Relational Database Service (Amazon RDS) <code>DataSource</code>."""
    
    database_credentials: shared_rdsdatabasecredentials.RDSDatabaseCredentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseCredentials') }})  
    database_information: shared_rdsdatabase.RDSDatabase = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseInformation') }})  
    resource_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceRole') }})  
    s3_staging_location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3StagingLocation') }})  
    security_group_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIds') }})  
    select_sql_query: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectSqlQuery') }})  
    service_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRole') }})  
    subnet_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId') }})  
    data_rearrangement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataRearrangement'), 'exclude': lambda f: f is None }})  
    data_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSchema'), 'exclude': lambda f: f is None }})  
    data_schema_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSchemaUri'), 'exclude': lambda f: f is None }})  
    