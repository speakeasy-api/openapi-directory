/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class BatchMeterUsageResponse {
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.BatchMeterUsageResult batchMeterUsageResult;

    public BatchMeterUsageResponse withBatchMeterUsageResult(org.openapis.openapi.models.shared.BatchMeterUsageResult batchMeterUsageResult) {
        this.batchMeterUsageResult = batchMeterUsageResult;
        return this;
    }
    
    
    public String contentType;

    public BatchMeterUsageResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * DisabledApiException
     */
    
    public Object disabledApiException;

    public BatchMeterUsageResponse withDisabledApiException(Object disabledApiException) {
        this.disabledApiException = disabledApiException;
        return this;
    }
    
    /**
     * InternalServiceErrorException
     */
    
    public Object internalServiceErrorException;

    public BatchMeterUsageResponse withInternalServiceErrorException(Object internalServiceErrorException) {
        this.internalServiceErrorException = internalServiceErrorException;
        return this;
    }
    
    /**
     * InvalidCustomerIdentifierException
     */
    
    public Object invalidCustomerIdentifierException;

    public BatchMeterUsageResponse withInvalidCustomerIdentifierException(Object invalidCustomerIdentifierException) {
        this.invalidCustomerIdentifierException = invalidCustomerIdentifierException;
        return this;
    }
    
    /**
     * InvalidProductCodeException
     */
    
    public Object invalidProductCodeException;

    public BatchMeterUsageResponse withInvalidProductCodeException(Object invalidProductCodeException) {
        this.invalidProductCodeException = invalidProductCodeException;
        return this;
    }
    
    /**
     * InvalidTagException
     */
    
    public Object invalidTagException;

    public BatchMeterUsageResponse withInvalidTagException(Object invalidTagException) {
        this.invalidTagException = invalidTagException;
        return this;
    }
    
    /**
     * InvalidUsageAllocationsException
     */
    
    public Object invalidUsageAllocationsException;

    public BatchMeterUsageResponse withInvalidUsageAllocationsException(Object invalidUsageAllocationsException) {
        this.invalidUsageAllocationsException = invalidUsageAllocationsException;
        return this;
    }
    
    /**
     * InvalidUsageDimensionException
     */
    
    public Object invalidUsageDimensionException;

    public BatchMeterUsageResponse withInvalidUsageDimensionException(Object invalidUsageDimensionException) {
        this.invalidUsageDimensionException = invalidUsageDimensionException;
        return this;
    }
    
    
    public Integer statusCode;

    public BatchMeterUsageResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public BatchMeterUsageResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * ThrottlingException
     */
    
    public Object throttlingException;

    public BatchMeterUsageResponse withThrottlingException(Object throttlingException) {
        this.throttlingException = throttlingException;
        return this;
    }
    
    /**
     * TimestampOutOfBoundsException
     */
    
    public Object timestampOutOfBoundsException;

    public BatchMeterUsageResponse withTimestampOutOfBoundsException(Object timestampOutOfBoundsException) {
        this.timestampOutOfBoundsException = timestampOutOfBoundsException;
        return this;
    }
    
    public BatchMeterUsageResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
