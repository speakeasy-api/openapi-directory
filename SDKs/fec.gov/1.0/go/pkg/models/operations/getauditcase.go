// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetAuditCaseRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Primary/foreign key for audit tables
	//
	AuditCaseID []string `queryParam:"style=form,explode=true,name=audit_case_id"`
	// The audit issue. Each subcategory has an unique ID
	//
	AuditID []int `queryParam:"style=form,explode=true,name=audit_id"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// Type of committee:
	//         - H or S - Congressional
	//         - P - Presidential
	//         - X or Y or Z - Party
	//         - N or Q - PAC
	//         - I - Independent expenditure
	//         - O - Super PAC
	//
	CommitteeDesignation *string `queryParam:"style=form,explode=true,name=committee_designation"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType []string `queryParam:"style=form,explode=true,name=committee_type"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	MaxElectionCycle *int `queryParam:"style=form,explode=true,name=max_election_cycle"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	MinElectionCycle *int `queryParam:"style=form,explode=true,name=min_election_cycle"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Audit category ID (table PK)
	//
	PrimaryCategoryID *string `queryParam:"style=form,explode=true,name=primary_category_id"`
	// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
	Q []string `queryParam:"style=form,explode=true,name=q"`
	// Name of candidate running for office
	Qq []string `queryParam:"style=form,explode=true,name=qq"`
	// Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
	//
	Sort []string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.
	//
	SubCategoryID *string `queryParam:"style=form,explode=true,name=sub_category_id"`
}

type GetAuditCaseResponse struct {
	AuditCasePage *shared.AuditCasePage
	ContentType   string
	StatusCode    int
	RawResponse   *http.Response
}
