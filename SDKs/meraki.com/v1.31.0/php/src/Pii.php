<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Pii 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Submit a new delete or restrict processing PII request
     * 
     * Submit a new delete or restrict processing PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse
     */
	public function createNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkPiiRequest201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a restrict processing PII request
     * 
     * Delete a restrict processing PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests/{requestId}
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse
     */
	public function deleteNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * 
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key "0" containing the applicable keys.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/piiKeys
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse
     */
	public function getNetworkPiiPiiKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/piiKeys', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiPiiKeys200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a PII request
     * 
     * Return a PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests/{requestId}
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse
     */
	public function getNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiRequest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the PII requests for this network or organization
     * 
     * List the PII requests for this network or organization
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse
     */
	public function getNetworkPiiRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiRequests200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * 
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/smDevicesForKey
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse
     */
	public function getNetworkPiiSmDevicesForKey(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/smDevicesForKey', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiSmDevicesForKey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * 
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/smOwnersForKey
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse
     */
	public function getNetworkPiiSmOwnersForKey(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/smOwnersForKey', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiSmOwnersForKey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}