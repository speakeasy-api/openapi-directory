"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import backendapiauthtype as shared_backendapiauthtype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetBackendAPIResponseResourceConfigConflictResolutionResolutionStrategyEnum(str, Enum):
    r"""The strategy for conflict resolution."""
    OPTIMISTIC_CONCURRENCY = 'OPTIMISTIC_CONCURRENCY'
    LAMBDA = 'LAMBDA'
    AUTOMERGE = 'AUTOMERGE'
    NONE = 'NONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAPIResponseResourceConfigConflictResolution:
    r"""The conflict resolution strategy for your data stored in the data models."""
    
    resolution_strategy: Optional[GetBackendAPIResponseResourceConfigConflictResolutionResolutionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResolutionStrategy'), 'exclude': lambda f: f is None }})  
    
class GetBackendAPIResponseResourceConfigDefaultAuthTypeModeEnum(str, Enum):
    r"""Describes the authentication mode."""
    API_KEY = 'API_KEY'
    AWS_IAM = 'AWS_IAM'
    AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS'
    OPENID_CONNECT = 'OPENID_CONNECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAPIResponseResourceConfigDefaultAuthTypeSettings:
    r"""Describes settings for the authentication mode."""
    
    cognito_user_pool_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CognitoUserPoolId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    expiration_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationTime'), 'exclude': lambda f: f is None }})  
    open_id_auth_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDAuthTTL'), 'exclude': lambda f: f is None }})  
    open_id_client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDClientId'), 'exclude': lambda f: f is None }})  
    open_id_iat_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIatTTL'), 'exclude': lambda f: f is None }})  
    open_id_issue_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIssueURL'), 'exclude': lambda f: f is None }})  
    open_id_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDProviderName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAPIResponseResourceConfigDefaultAuthType:
    r"""The default authentication type for interacting with the configured data models in your Amplify project."""
    
    mode: Optional[GetBackendAPIResponseResourceConfigDefaultAuthTypeModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mode'), 'exclude': lambda f: f is None }})  
    settings: Optional[GetBackendAPIResponseResourceConfigDefaultAuthTypeSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAPIResponseResourceConfig:
    r"""The resource configuration for this response object."""
    
    additional_auth_types: Optional[list[shared_backendapiauthtype.BackendAPIAuthType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAuthTypes'), 'exclude': lambda f: f is None }})  
    api_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiName'), 'exclude': lambda f: f is None }})  
    conflict_resolution: Optional[GetBackendAPIResponseResourceConfigConflictResolution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConflictResolution'), 'exclude': lambda f: f is None }})  
    default_auth_type: Optional[GetBackendAPIResponseResourceConfigDefaultAuthType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultAuthType'), 'exclude': lambda f: f is None }})  
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service'), 'exclude': lambda f: f is None }})  
    transform_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformSchema'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAPIResponse:
    r"""Success"""
    
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppId'), 'exclude': lambda f: f is None }})  
    backend_environment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackendEnvironmentName'), 'exclude': lambda f: f is None }})  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Error'), 'exclude': lambda f: f is None }})  
    resource_config: Optional[GetBackendAPIResponseResourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceConfig'), 'exclude': lambda f: f is None }})  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceName'), 'exclude': lambda f: f is None }})  
    