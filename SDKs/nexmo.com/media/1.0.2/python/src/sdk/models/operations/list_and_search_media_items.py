"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import media as shared_media
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ListAndSearchMediaItemsOrderEnum(str, Enum):
    r"""The order of search results."""
    ASCENDING = 'ascending'
    DESCENDING = 'descending'


@dataclasses.dataclass
class ListAndSearchMediaItemsRequest:
    
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_time', 'style': 'form', 'explode': True }})
    r"""Retrieve results created on or before this timestamp."""  
    order: Optional[ListAndSearchMediaItemsOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The order of search results."""  
    page_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_index', 'style': 'form', 'explode': True }})
    r"""Which page to retrieve in pagination"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""How many items at most per page"""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_time', 'style': 'form', 'explode': True }})
    r"""Retrieve results created on or after this timestap."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSONEmbedded:
    r"""A collection of media items. See [retrieve a media item](#retrieve-a-media-item) for a description of the returned fields"""
    
    media: Optional[list[shared_media.Media]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSONLinksFirst:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSONLinksLast:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSONLinksSelf:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSONLinks:
    
    first: Optional[ListAndSearchMediaItems200ApplicationJSONLinksFirst] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first'), 'exclude': lambda f: f is None }})  
    last: Optional[ListAndSearchMediaItems200ApplicationJSONLinksLast] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last'), 'exclude': lambda f: f is None }})  
    self_: Optional[ListAndSearchMediaItems200ApplicationJSONLinksSelf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAndSearchMediaItems200ApplicationJSON:
    r"""Successfully retrieved"""
    
    embedded: Optional[ListAndSearchMediaItems200ApplicationJSONEmbedded] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded'), 'exclude': lambda f: f is None }})
    r"""A collection of media items. See [retrieve a media item](#retrieve-a-media-item) for a description of the returned fields"""  
    links: Optional[ListAndSearchMediaItems200ApplicationJSONLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned by your request."""  
    page_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_index'), 'exclude': lambda f: f is None }})
    r"""The `page_index` used in your request."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The amount of records returned in this response."""  
    

@dataclasses.dataclass
class ListAndSearchMediaItemsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_and_search_media_items_200_application_json_object: Optional[ListAndSearchMediaItems200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successfully retrieved"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    