<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Analysis 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv
     * 
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportResponse
     */
	public function createUrlsExport(
        \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export', \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlsQuery", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUrlsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->csvExportStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CsvExportStatus', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an Analysis detail
     * 
     * Get an Analysis detail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryResponse
     */
	public function getAnalysisSummary(
        \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}', \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnalysisSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analysisDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AnalysisDetail', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return global statistics for an analysis
     * 
     * Return global statistics for an analysis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsResponse
     */
	public function getCrawlStatistics(
        \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics', \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crawlStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CrawlStatistics', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
     * 
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyResponse
     */
	public function getCrawlStatisticsByFrequency(
        \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/time', \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsByFrequencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crawlStatisticsTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CrawlStatisticsTime', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * 
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsResponse
     */
	public function getCrawlStatisticsUrls(
        \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/urls/{list_type}', \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrawlStatisticsUrlsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCrawlStatisticsUrls200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of Orphan URLs
     * 
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsResponse
     */
	public function getGanalyticsOrphanURLs(
        \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/ganalytics/orphan_urls/{medium}/{source}', \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getGanalyticsOrphanURLs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetGanalyticsOrphanURLs200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get inlinks percentiles
     * 
     * Get inlinks percentiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesResponse
     */
	public function getLinksPercentiles(
        \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/links/percentiles', \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLinksPercentilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linksPercentiles = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinksPercentiles', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top domains
     * 
     * Top domains
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsResponse
     */
	public function getLinksTopDomains(
        \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/domains', \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomainsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLinksTopDomains200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLinksTopDomains200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top subddomains
     * 
     * Top subddomains
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsResponse
     */
	public function getLinksTopSubdomains(
        \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/subdomains', \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomainsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLinksTopSubdomains200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLinksTopSubdomains200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lost pagerank
     * 
     * Lost pagerank
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostResponse
     */
	public function getPageRankLost(
        \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/pagerank/lost', \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPageRankLostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageRankLost = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageRankLost', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
     * 
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportResponse
     */
	public function getSitemapsReport(
        \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/report', \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitemapsReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sitemapsReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SitemapsReport', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sample list of URLs which were found in your sitemaps but outside of the
     * 
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigResponse
     */
	public function getSitemapsSamplesOutOfConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/out_of_config', \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSitemapsSamplesOutOfConfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesOutOfConfig200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sample list of URLs which were found in your sitemaps, within the project
     * 
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyResponse
     */
	public function getSitemapsSamplesSitemapsOnly(
        \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/sitemap_only', \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSitemapsSamplesSitemapsOnly200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSitemapsSamplesSitemapsOnly200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the detail of an URL for an analysis
     * 
     * Gets the detail of an URL for an analysis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailResponse
     */
	public function getUrlDetail(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/{url}', \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlDetailRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlDetailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Executes a query and returns a paginated response
     * 
     * Executes a query and returns a paginated response
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsResponse
     */
	public function getUrls(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls', \OpenAPI\OpenAPI\Models\Operations\GetUrlsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlsQuery", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUrls200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUrls200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Query aggregator
     * 
     * Query aggregator. It accepts multiple queries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsResponse
     */
	public function getUrlsAggs(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/aggs', \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsAggsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUrlsAggs200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an Analysis datamodel
     * 
     * Gets an Analysis datamodel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelResponse
     */
	public function getUrlsDatamodel(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/datamodel', \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsDatamodelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crawlDatamodel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CrawlDatamodel', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks the status of an CSVUrlExportJob object
     * 
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusResponse
     */
	public function getUrlsExportStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export/{url_export_id}', \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->csvExportStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CsvExportStatus', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of the CSV Exports requests and their current status
     * 
     * A list of the CSV Exports requests and their current status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsResponse
     */
	public function getUrlsExports(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export', \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsExportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUrlsExports200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUrlsExports200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return most frequent segments (= suggested patterns in the previous version)
     * 
     * Return most frequent segments (= suggested patterns in the previous version) for a Botify Query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersResponse
     */
	public function getUrlsSuggestedFilters(
        \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}/{analysis_slug}/urls/suggested_filters', \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlsAggsQuery", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUrlsSuggestedFiltersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlsAggsQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlsAggsQuery', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
}