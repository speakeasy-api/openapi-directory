"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dnssettings as shared_dnssettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigureDNSSettingsRequestInput:
    r"""Request for the `ConfigureDnsSettings` method."""
    
    dns_settings: Optional[shared_dnssettings.DNSSettingsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records."""  
    update_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateMask'), 'exclude': lambda f: f is None }})
    r"""Required. The field mask describing which fields to update as a comma-separated list. For example, if only the name servers are being updated for an existing Custom DNS configuration, the `update_mask` is `\\"custom_dns.name_servers\\"`. When changing the DNS provider from one type to another, pass the new provider's field name as part of the field mask. For example, when changing from a Google Domains DNS configuration to a Custom DNS configuration, the `update_mask` is `\\"custom_dns\\"`. //"""  
    validate_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validateOnly'), 'exclude': lambda f: f is None }})
    r"""Validate the request without actually updating the DNS settings."""  
    