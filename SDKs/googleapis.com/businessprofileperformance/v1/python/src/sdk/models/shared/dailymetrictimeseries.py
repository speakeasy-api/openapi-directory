"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dailysubentitytype as shared_dailysubentitytype
from ..shared import timeseries as shared_timeseries
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DailyMetricTimeSeriesDailyMetricEnum(str, Enum):
    r"""The DailyMetric that the TimeSeries represents."""
    DAILY_METRIC_UNKNOWN = 'DAILY_METRIC_UNKNOWN'
    BUSINESS_IMPRESSIONS_DESKTOP_MAPS = 'BUSINESS_IMPRESSIONS_DESKTOP_MAPS'
    BUSINESS_IMPRESSIONS_DESKTOP_SEARCH = 'BUSINESS_IMPRESSIONS_DESKTOP_SEARCH'
    BUSINESS_IMPRESSIONS_MOBILE_MAPS = 'BUSINESS_IMPRESSIONS_MOBILE_MAPS'
    BUSINESS_IMPRESSIONS_MOBILE_SEARCH = 'BUSINESS_IMPRESSIONS_MOBILE_SEARCH'
    BUSINESS_CONVERSATIONS = 'BUSINESS_CONVERSATIONS'
    BUSINESS_DIRECTION_REQUESTS = 'BUSINESS_DIRECTION_REQUESTS'
    CALL_CLICKS = 'CALL_CLICKS'
    WEBSITE_CLICKS = 'WEBSITE_CLICKS'
    BUSINESS_BOOKINGS = 'BUSINESS_BOOKINGS'
    BUSINESS_FOOD_ORDERS = 'BUSINESS_FOOD_ORDERS'
    BUSINESS_FOOD_MENU_CLICKS = 'BUSINESS_FOOD_MENU_CLICKS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyMetricTimeSeries:
    r"""Represents a single datapoint, where each datapoint is a DailyMetric-DailySubEntityType-TimeSeries tuple."""
    
    daily_metric: Optional[DailyMetricTimeSeriesDailyMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dailyMetric'), 'exclude': lambda f: f is None }})
    r"""The DailyMetric that the TimeSeries represents."""  
    daily_sub_entity_type: Optional[shared_dailysubentitytype.DailySubEntityType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dailySubEntityType'), 'exclude': lambda f: f is None }})
    r"""Represents all possible subentity types that are associated with DailyMetrics."""  
    time_series: Optional[shared_timeseries.TimeSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeries'), 'exclude': lambda f: f is None }})
    r"""Represents a timeseries."""  
    