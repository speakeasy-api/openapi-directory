openapi: 3.0.0
info:
  version: '2022-11-28'
  x-release: v4
  title: Amazon Omics
  description: 'This is the <i>Amazon Omics API Reference</i>. For an introduction to the service, see <a href="https://docs.aws.amazon.com/omics/latest/dev/">What is Amazon Omics?</a> in the <i>Amazon Omics Developer Guide</i>.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: omics
  x-aws-signingName: omics
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/omics-2022-11-28.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/omics/'
servers:
  - url: 'http://omics.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Omics multi-region endpoint
  - url: 'https://omics.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon Omics multi-region endpoint
  - url: 'http://omics.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Omics endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://omics.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Omics endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/sequencestore/{sequenceStoreId}/readset/batch/delete':
    post:
      operationId: BatchDeleteReadSet
      description: Deletes one or more read sets.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteReadSetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: sequenceStoreId
          in: path
          required: true
          description: The read sets' sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  description: The read sets' IDs.
                  type: array
                  items:
                    $ref: '#/components/schemas/ReadSetId'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/import/annotation/{jobId}':
    delete:
      operationId: CancelAnnotationImportJob
      description: Cancels an annotation import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelAnnotationImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: jobId
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAnnotationImportJob
      description: Gets information about an annotation import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotationImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: jobId
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
  '/run/{id}/cancel':
    post:
      operationId: CancelRun
      description: Cancels a run.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The run's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/import/variant/{jobId}':
    delete:
      operationId: CancelVariantImportJob
      description: Cancels a variant import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelVariantImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: jobId
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVariantImportJob
      description: Gets information about a variant import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVariantImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: jobId
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
  /annotationStore:
    post:
      operationId: CreateAnnotationStore
      description: Creates an annotation store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAnnotationStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - storeFormat
              properties:
                description:
                  description: A description for the store.
                  type: string
                  minLength: 0
                  maxLength: 500
                name:
                  description: A name for the store.
                  type: string
                  pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
                reference:
                  description: A genome reference.
                  type: object
                  properties:
                    referenceArn:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceArn'
                        - description: The reference's ARN.
                sseConfig:
                  description: Server-side encryption (SSE) settings for a store.
                  type: object
                  properties:
                    keyArn:
                      allOf:
                        - $ref: '#/components/schemas/SseConfigKeyArnString'
                        - description: An encryption key ARN.
                    type:
                      allOf:
                        - $ref: '#/components/schemas/EncryptionType'
                        - description: The encryption type.
                storeFormat:
                  description: The annotation file format of the store.
                  type: string
                  enum:
                    - GFF
                    - TSV
                    - VCF
                storeOptions:
                  description: Settings for a store.
                  type: object
                  properties:
                    tsvStoreOptions:
                      allOf:
                        - $ref: '#/components/schemas/TsvStoreOptions'
                        - description: File settings for a TSV store.
                tags:
                  description: Tags for the store.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /referencestore:
    post:
      operationId: CreateReferenceStore
      description: Creates a reference store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReferenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                clientToken:
                  description: 'To ensure that requests don''t run multiple times, specify a unique token for each request.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                description:
                  description: A description for the store.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 255
                name:
                  description: A name for the store.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                sseConfig:
                  description: Server-side encryption (SSE) settings for a store.
                  type: object
                  properties:
                    keyArn:
                      allOf:
                        - $ref: '#/components/schemas/SseConfigKeyArnString'
                        - description: An encryption key ARN.
                    type:
                      allOf:
                        - $ref: '#/components/schemas/EncryptionType'
                        - description: The encryption type.
                tags:
                  description: Tags for the store.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /runGroup:
    post:
      operationId: CreateRunGroup
      description: Creates a run group.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRunGroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
              properties:
                maxCpus:
                  description: The maximum number of CPUs to use in the group.
                  type: integer
                  minimum: 1
                  maximum: 100000
                maxDuration:
                  description: A maximum run time for the group in minutes.
                  type: integer
                  minimum: 1
                  maximum: 100000
                maxRuns:
                  description: The maximum number of concurrent runs for the group.
                  type: integer
                  minimum: 1
                  maximum: 100000
                name:
                  description: A name for the group.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                requestId:
                  description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                tags:
                  description: Tags for the group.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListRunGroups
      description: Retrieves a list of run groups.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunGroupsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of run groups to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: name
          in: query
          required: false
          description: The run groups' name.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
        - name: startingToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
  /sequencestore:
    post:
      operationId: CreateSequenceStore
      description: Creates a sequence store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSequenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                clientToken:
                  description: 'To ensure that requests don''t run multiple times, specify a unique token for each request.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                description:
                  description: A description for the store.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 255
                name:
                  description: A name for the store.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                sseConfig:
                  description: Server-side encryption (SSE) settings for a store.
                  type: object
                  properties:
                    keyArn:
                      allOf:
                        - $ref: '#/components/schemas/SseConfigKeyArnString'
                        - description: An encryption key ARN.
                    type:
                      allOf:
                        - $ref: '#/components/schemas/EncryptionType'
                        - description: The encryption type.
                tags:
                  description: Tags for the store.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /variantStore:
    post:
      operationId: CreateVariantStore
      description: Creates a variant store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVariantStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reference
              properties:
                description:
                  description: A description for the store.
                  type: string
                  minLength: 0
                  maxLength: 500
                name:
                  description: A name for the store.
                  type: string
                  pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
                reference:
                  description: A genome reference.
                  type: object
                  properties:
                    referenceArn:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceArn'
                        - description: The reference's ARN.
                sseConfig:
                  description: Server-side encryption (SSE) settings for a store.
                  type: object
                  properties:
                    keyArn:
                      allOf:
                        - $ref: '#/components/schemas/SseConfigKeyArnString'
                        - description: An encryption key ARN.
                    type:
                      allOf:
                        - $ref: '#/components/schemas/EncryptionType'
                        - description: The encryption type.
                tags:
                  description: Tags for the store.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /workflow:
    post:
      operationId: CreateWorkflow
      description: Creates a workflow.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
              properties:
                definitionUri:
                  description: The URI of a definition for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 256
                definitionZip:
                  description: A ZIP archive for the workflow.
                  type: string
                description:
                  description: A description for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 256
                engine:
                  description: An engine for the workflow.
                  type: string
                  enum:
                    - WDL
                    - NEXTFLOW
                  minLength: 1
                  maxLength: 64
                main:
                  description: The path of the main definition file for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                name:
                  description: A name for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                parameterTemplate:
                  description: A parameter template for the workflow.
                  type: object
                  minProperties: 1
                  maxProperties: 1000
                  additionalProperties:
                    $ref: '#/components/schemas/WorkflowParameter'
                requestId:
                  description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                storageCapacity:
                  description: A storage capacity for the workflow in gigabytes.
                  type: integer
                  minimum: 0
                  maximum: 100000
                tags:
                  description: Tags for the workflow.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListWorkflows
      description: Retrieves a list of workflows.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of workflows to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: name
          in: query
          required: false
          description: The workflows' name.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
        - name: startingToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
        - name: type
          in: query
          required: false
          description: The workflows' type.
          schema:
            type: string
            enum:
              - PRIVATE
            minLength: 1
            maxLength: 64
  '/annotationStore/{name}':
    delete:
      operationId: DeleteAnnotationStore
      description: Deletes an annotation store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAnnotationStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: force
          in: query
          required: false
          description: Whether to force deletion.
          schema:
            type: boolean
        - name: name
          in: path
          required: true
          description: The store's name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAnnotationStore
      description: Gets information about an annotation store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotationStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: name
          in: path
          required: true
          description: The store's name.
          schema:
            type: string
    post:
      operationId: UpdateAnnotationStore
      description: Updates an annotation store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAnnotationStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: name
          in: path
          required: true
          description: A name for the store.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description for the store.
                  type: string
                  minLength: 0
                  maxLength: 500
  '/referencestore/{referenceStoreId}/reference/{id}':
    delete:
      operationId: DeleteReference
      description: Deletes a genome reference.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteReferenceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The reference's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: referenceStoreId
          in: path
          required: true
          description: The reference's store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{id}':
    delete:
      operationId: DeleteReferenceStore
      description: Deletes a genome reference store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteReferenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The store's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetReferenceStore
      description: Gets information about a reference store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The store's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
  '/run/{id}':
    delete:
      operationId: DeleteRun
      description: Deletes a workflow run.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The run's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRun
      description: Gets information about a workflow run.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: export
          in: query
          required: false
          description: The run's export format.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RunExport'
            minItems: 0
            maxItems: 32
        - name: id
          in: path
          required: true
          description: The run's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
  '/runGroup/{id}':
    delete:
      operationId: DeleteRunGroup
      description: Deletes a workflow run group.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The run group's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRunGroup
      description: Gets information about a workflow run group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunGroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The group's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    post:
      operationId: UpdateRunGroup
      description: Updates a run group.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The group's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxCpus:
                  description: The maximum number of CPUs to use.
                  type: integer
                  minimum: 1
                  maximum: 100000
                maxDuration:
                  description: A maximum run time for the group in minutes.
                  type: integer
                  minimum: 1
                  maximum: 100000
                maxRuns:
                  description: The maximum number of concurrent runs for the group.
                  type: integer
                  minimum: 1
                  maximum: 100000
                name:
                  description: A name for the group.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
  '/sequencestore/{id}':
    delete:
      operationId: DeleteSequenceStore
      description: Deletes a sequence store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSequenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The sequence store's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetSequenceStore
      description: Gets information about a sequence store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSequenceStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The store's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
  '/variantStore/{name}':
    delete:
      operationId: DeleteVariantStore
      description: Deletes a variant store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVariantStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: force
          in: query
          required: false
          description: Whether to force deletion.
          schema:
            type: boolean
        - name: name
          in: path
          required: true
          description: The store's name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVariantStore
      description: Gets information about a variant store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVariantStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: name
          in: path
          required: true
          description: The store's name.
          schema:
            type: string
    post:
      operationId: UpdateVariantStore
      description: Updates a variant store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVariantStoreResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: name
          in: path
          required: true
          description: A name for the store.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description for the store.
                  type: string
                  minLength: 0
                  maxLength: 500
  '/workflow/{id}':
    delete:
      operationId: DeleteWorkflow
      description: Deletes a workflow.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The workflow's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetWorkflow
      description: Gets information about a workflow.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: export
          in: query
          required: false
          description: The export format for the workflow.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WorkflowExport'
            minItems: 0
            maxItems: 32
        - name: id
          in: path
          required: true
          description: The workflow's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
        - name: type
          in: query
          required: false
          description: The workflow's type.
          schema:
            type: string
            enum:
              - PRIVATE
            minLength: 1
            maxLength: 64
    post:
      operationId: UpdateWorkflow
      description: Updates a workflow.
      responses:
        '202':
          description: Success
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The workflow's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 256
                name:
                  description: A name for the workflow.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
  '/sequencestore/{sequenceStoreId}/readset/{id}#partNumber':
    get:
      operationId: GetReadSet
      description: Gets a file from a read set.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: RangeNotSatisfiableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: file
          in: query
          required: false
          description: The file to retrieve.
          schema:
            type: string
            enum:
              - SOURCE1
              - SOURCE2
              - INDEX
        - name: id
          in: path
          required: true
          description: The read set's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: partNumber
          in: query
          required: true
          description: The part number to retrieve.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/activationjob/{id}':
    get:
      operationId: GetReadSetActivationJob
      description: Gets information about a read set activation job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetActivationJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: sequenceStoreId
          in: path
          required: true
          description: The job's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/exportjob/{id}':
    get:
      operationId: GetReadSetExportJob
      description: Gets information about a read set export job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetExportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: sequenceStoreId
          in: path
          required: true
          description: The job's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/importjob/{id}':
    get:
      operationId: GetReadSetImportJob
      description: Gets information about a read set import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetImportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: sequenceStoreId
          in: path
          required: true
          description: The job's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/readset/{id}/metadata':
    get:
      operationId: GetReadSetMetadata
      description: Gets details about a read set.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetMetadataResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The read set's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/reference/{id}#partNumber':
    get:
      operationId: GetReference
      description: Gets a reference file.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: RangeNotSatisfiableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: file
          in: query
          required: false
          description: The file to retrieve.
          schema:
            type: string
            enum:
              - SOURCE
              - INDEX
        - name: id
          in: path
          required: true
          description: The reference's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: partNumber
          in: query
          required: true
          description: The part number to retrieve.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
        - name: Range
          in: header
          required: false
          description: The range to retrieve.
          schema:
            type: string
            pattern: '^[\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 127
        - name: referenceStoreId
          in: path
          required: true
          description: The reference's store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/importjob/{id}':
    get:
      operationId: GetReferenceImportJob
      description: Gets information about a reference import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceImportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The job's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: referenceStoreId
          in: path
          required: true
          description: The job's reference store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/reference/{id}/metadata':
    get:
      operationId: GetReferenceMetadata
      description: Gets information about a genome reference's metadata.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceMetadataResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The reference's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
        - name: referenceStoreId
          in: path
          required: true
          description: The reference's reference store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/run/{id}/task/{taskId}':
    get:
      operationId: GetRunTask
      description: Gets information about a workflow run task.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunTaskResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The task's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
        - name: taskId
          in: path
          required: true
          description: The task's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /import/annotations:
    post:
      operationId: ListAnnotationImportJobs
      description: Retrieves a list of annotation import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationImportJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            minLength: 1
            maxLength: 10000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for annotation import jobs.
                  type: object
                  properties:
                    status:
                      allOf:
                        - $ref: '#/components/schemas/JobStatus'
                        - description: A status to filter on.
                    storeName:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - description: A store name to filter on.
                ids:
                  description: IDs of annotation import jobs to retrieve.
                  type: array
                  items:
                    $ref: '#/components/schemas/ResourceIdentifier'
                  minItems: 1
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /annotationStores:
    post:
      operationId: ListAnnotationStores
      description: Retrieves a list of annotation stores.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationStoresResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of stores to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            minLength: 1
            maxLength: 10000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for annotation stores.
                  type: object
                  properties:
                    status:
                      allOf:
                        - $ref: '#/components/schemas/StoreStatus'
                        - description: A status to filter on.
                ids:
                  description: IDs of stores to list.
                  type: array
                  items:
                    $ref: '#/components/schemas/ResourceIdentifier'
                  minItems: 1
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/activationjobs':
    post:
      operationId: ListReadSetActivationJobs
      description: Retrieves a list of read set activation jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetActivationJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of read set activation jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A read set activation job filter.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    status:
                      allOf:
                        - $ref: '#/components/schemas/ReadSetActivationJobStatus'
                        - description: The filter's status.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/exportjobs':
    post:
      operationId: ListReadSetExportJobs
      description: Retrieves a list of read set export jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetExportJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: sequenceStoreId
          in: path
          required: true
          description: The jobs' sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: An read set export job filter.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    status:
                      allOf:
                        - $ref: '#/components/schemas/ReadSetExportJobStatus'
                        - description: A status to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/importjobs':
    post:
      operationId: ListReadSetImportJobs
      description: Retrieves a list of read set import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetImportJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: sequenceStoreId
          in: path
          required: true
          description: The jobs' sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for import read set jobs.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    status:
                      allOf:
                        - $ref: '#/components/schemas/ReadSetImportJobStatus'
                        - description: A status to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/readsets':
    post:
      operationId: ListReadSets
      description: Retrieves a list of read sets.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of read sets to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: sequenceStoreId
          in: path
          required: true
          description: The jobs' sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for read sets.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    name:
                      allOf:
                        - $ref: '#/components/schemas/ReadSetName'
                        - description: A name to filter on.
                    referenceArn:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceArn'
                        - description: A genome reference ARN to filter on.
                    status:
                      allOf:
                        - $ref: '#/components/schemas/ReadSetStatus'
                        - description: A status to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/importjobs':
    post:
      operationId: ListReferenceImportJobs
      description: Retrieves a list of reference import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferenceImportJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: referenceStoreId
          in: path
          required: true
          description: The job's reference store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for import references.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    status:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceImportJobStatus'
                        - description: A status to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /referencestores:
    post:
      operationId: ListReferenceStores
      description: Retrieves a list of reference stores.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferenceStoresResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '484':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of stores to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for reference stores.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    name:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceStoreName'
                        - description: The name to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/references':
    post:
      operationId: ListReferences
      description: Retrieves a list of references.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferencesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of references to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
        - name: referenceStoreId
          in: path
          required: true
          description: The references' reference store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for references.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    md5:
                      allOf:
                        - $ref: '#/components/schemas/Md5'
                        - description: An MD5 checksum to filter on.
                    name:
                      allOf:
                        - $ref: '#/components/schemas/ReferenceName'
                        - description: A name to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/run/{id}/task':
    get:
      operationId: ListRunTasks
      description: Retrieves a list of tasks for a run.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunTasksResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: id
          in: path
          required: true
          description: The run's ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
        - name: maxResults
          in: query
          required: false
          description: The maximum number of run tasks to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: startingToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
        - name: status
          in: query
          required: false
          description: Filter the list by status.
          schema:
            type: string
            enum:
              - PENDING
              - STARTING
              - RUNNING
              - STOPPING
              - COMPLETED
              - CANCELLED
              - FAILED
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /run:
    get:
      operationId: ListRuns
      description: Retrieves a list of runs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of runs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: name
          in: query
          required: false
          description: Filter the list by run name.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
        - name: runGroupId
          in: query
          required: false
          description: Filter the list by run group ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 1
            maxLength: 18
        - name: startingToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: StartRun
      description: Starts a run.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartRunResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
                - roleArn
              properties:
                logLevel:
                  description: A log level for the run.
                  type: string
                  enum:
                    - 'OFF'
                    - FATAL
                    - ERROR
                    - ALL
                  minLength: 1
                  maxLength: 64
                name:
                  description: A name for the run.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                outputUri:
                  description: An output URI for the run.
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                parameters:
                  description: Parameters for the run.
                  type: object
                  properties: {}
                priority:
                  description: A priority for the run.
                  type: integer
                  minimum: 0
                  maximum: 100000
                requestId:
                  description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 128
                roleArn:
                  description: A service role for the run.
                  type: string
                  pattern: '^arn:.+$'
                  minLength: 1
                  maxLength: 128
                runGroupId:
                  description: The run's group ID.
                  type: string
                  pattern: '^[0-9]+$'
                  minLength: 1
                  maxLength: 18
                runId:
                  description: The run's ID.
                  type: string
                  pattern: '^[0-9]+$'
                  minLength: 1
                  maxLength: 18
                storageCapacity:
                  description: A storage capacity for the run in gigabytes.
                  type: integer
                  minimum: 0
                  maximum: 100000
                tags:
                  description: Tags for the run.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                workflowId:
                  description: The run's workflow ID.
                  type: string
                  pattern: '^[0-9]+$'
                  minLength: 1
                  maxLength: 18
                workflowType:
                  description: The run's workflows type.
                  type: string
                  enum:
                    - PRIVATE
                  minLength: 1
                  maxLength: 64
  /sequencestores:
    post:
      operationId: ListSequenceStores
      description: Retrieves a list of sequence stores.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSequenceStoresResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '484':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of stores to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
            minLength: 1
            maxLength: 6144
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for a sequence store.
                  type: object
                  properties:
                    createdAfter:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's start date.
                    createdBefore:
                      allOf:
                        - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
                        - description: The filter's end date.
                    name:
                      allOf:
                        - $ref: '#/components/schemas/SequenceStoreName'
                        - description: A name to filter on.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: Retrieves a list of tags for a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The resource's ARN.
          schema:
            type: string
            pattern: '^arn:.+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Tags a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The resource's ARN.
          schema:
            type: string
            pattern: '^arn:.+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: Tags for the resource.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  /import/variants:
    post:
      operationId: ListVariantImportJobs
      description: Retrieves a list of variant import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariantImportJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of import jobs to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            minLength: 1
            maxLength: 10000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for variant import jobs.
                  type: object
                  properties:
                    status:
                      allOf:
                        - $ref: '#/components/schemas/JobStatus'
                        - description: A status to filter on.
                    storeName:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - description: A store name to filter on.
                ids:
                  description: A list of job IDs.
                  type: array
                  items:
                    $ref: '#/components/schemas/ResourceIdentifier'
                  minItems: 1
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /variantStores:
    post:
      operationId: ListVariantStores
      description: Retrieves a list of variant stores.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariantStoresResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of stores to return in one page of results.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: Specify the pagination token from a previous request to retrieve the next page of results.
          schema:
            type: string
            minLength: 1
            maxLength: 10000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter for variant stores.
                  type: object
                  properties:
                    status:
                      allOf:
                        - $ref: '#/components/schemas/StoreStatus'
                        - description: A status to filter on.
                ids:
                  description: A list of store IDs.
                  type: array
                  items:
                    $ref: '#/components/schemas/ResourceIdentifier'
                  minItems: 1
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /import/annotation:
    post:
      operationId: StartAnnotationImportJob
      description: Starts an annotation import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAnnotationImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destinationName
                - items
                - roleArn
              properties:
                destinationName:
                  description: A destination annotation store for the job.
                  type: string
                  pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
                  minLength: 3
                  maxLength: 255
                formatOptions:
                  description: Formatting options for a file.
                  type: object
                  properties:
                    tsvOptions:
                      allOf:
                        - $ref: '#/components/schemas/TsvOptions'
                        - description: Options for a TSV file.
                    vcfOptions:
                      allOf:
                        - $ref: '#/components/schemas/VcfOptions'
                        - description: Options for a VCF file.
                items:
                  description: Items to import.
                  type: array
                  items:
                    $ref: '#/components/schemas/AnnotationImportItemSource'
                  minItems: 1
                roleArn:
                  description: A service role for the job.
                  type: string
                  pattern: '^arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)$'
                  minLength: 20
                  maxLength: 2048
                runLeftNormalization:
                  description: The job's left normalization setting.
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/activationjob':
    post:
      operationId: StartReadSetActivationJob
      description: 'Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetActivationJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sources
              properties:
                clientToken:
                  description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                sources:
                  description: The job's source files.
                  type: array
                  items:
                    $ref: '#/components/schemas/StartReadSetActivationJobSourceItem'
                  minItems: 1
                  maxItems: 20
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/exportjob':
    post:
      operationId: StartReadSetExportJob
      description: Exports a read set to Amazon S3.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetExportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destination
                - roleArn
                - sources
              properties:
                clientToken:
                  description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                destination:
                  description: A location for exported files in Amazon S3.
                  type: string
                  pattern: '^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?$'
                roleArn:
                  description: A service role for the job.
                  type: string
                  pattern: '^arn:.*'
                  minLength: 20
                  maxLength: 2048
                sources:
                  description: The job's source files.
                  type: array
                  items:
                    $ref: '#/components/schemas/ExportReadSet'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sequencestore/{sequenceStoreId}/importjob':
    post:
      operationId: StartReadSetImportJob
      description: Starts a read set import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetImportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: sequenceStoreId
          in: path
          required: true
          description: The read set's sequence store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleArn
                - sources
              properties:
                clientToken:
                  description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                roleArn:
                  description: A service role for the job.
                  type: string
                  pattern: '^arn:.*'
                  minLength: 20
                  maxLength: 2048
                sources:
                  description: The job's source files.
                  type: array
                  items:
                    $ref: '#/components/schemas/StartReadSetImportJobSourceItem'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/referencestore/{referenceStoreId}/importjob':
    post:
      operationId: StartReferenceImportJob
      description: Starts a reference import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReferenceImportJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '486':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: referenceStoreId
          in: path
          required: true
          description: The job's reference store ID.
          schema:
            type: string
            pattern: '^[0-9]+$'
            minLength: 10
            maxLength: 36
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleArn
                - sources
              properties:
                clientToken:
                  description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
                  type: string
                  pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
                  minLength: 1
                  maxLength: 127
                roleArn:
                  description: A service role for the job.
                  type: string
                  pattern: '^arn:.*'
                  minLength: 20
                  maxLength: 2048
                sources:
                  description: The job's source files.
                  type: array
                  items:
                    $ref: '#/components/schemas/StartReferenceImportJobSourceItem'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /import/variant:
    post:
      operationId: StartVariantImportJob
      description: Starts a variant import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVariantImportResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destinationName
                - items
                - roleArn
              properties:
                destinationName:
                  description: The destination variant store for the job.
                  type: string
                  pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
                  minLength: 3
                  maxLength: 255
                items:
                  description: Items to import.
                  type: array
                  items:
                    $ref: '#/components/schemas/VariantImportItemSource'
                  minItems: 1
                roleArn:
                  description: A service role for the job.
                  type: string
                  pattern: '^arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)$'
                  minLength: 20
                  maxLength: 2048
                runLeftNormalization:
                  description: The job's left normalization setting.
                  type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes tags from a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '487':
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The resource's ARN.
          schema:
            type: string
            pattern: '^arn:.+$'
            minLength: 1
            maxLength: 128
        - name: tagKeys
          in: query
          required: true
          description: Keys of tags to remove.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 0
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchDeleteReadSetResponse:
      type: object
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/ReadSetBatchErrorList'
            - description: Errors returned by individual delete operations.
    ReadSetId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    InternalServerException: {}
    ThrottlingException: {}
    ValidationException: {}
    ResourceNotFoundException: {}
    AccessDeniedException: {}
    RequestTimeoutException: {}
    CancelAnnotationImportResponse:
      type: object
      properties: {}
    ServiceQuotaExceededException: {}
    ConflictException: {}
    CancelVariantImportResponse:
      type: object
      properties: {}
    CreateAnnotationStoreResponse:
      type: object
      required:
        - creationTime
        - id
        - name
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference. Required for all stores except TSV format with generic annotations.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        storeFormat:
          allOf:
            - $ref: '#/components/schemas/StoreFormat'
            - description: The annotation file format of the store.
        storeOptions:
          allOf:
            - $ref: '#/components/schemas/StoreOptions'
            - description: The store's file parsing options.
    ReferenceArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 127
    SseConfigKeyArnString:
      type: string
      pattern: 'arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)'
      minLength: 20
      maxLength: 2048
    EncryptionType:
      type: string
      enum:
        - KMS
    TsvStoreOptions:
      type: object
      properties:
        annotationType:
          allOf:
            - $ref: '#/components/schemas/AnnotationType'
            - description: The store's annotation type.
        formatToHeader:
          allOf:
            - $ref: '#/components/schemas/FormatToHeader'
            - description: The store's header key to column name mapping.
        schema:
          allOf:
            - $ref: '#/components/schemas/TsvStoreOptionsSchemaList'
            - description: The store's schema.
      description: File settings for a TSV store.
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    CreateReferenceStoreResponse:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's SSE settings.
    CreateRunGroupResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunGroupArn'
            - description: The group's ARN.
        id:
          allOf:
            - $ref: '#/components/schemas/RunGroupId'
            - description: The group's ID.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the run group.
    CreateSequenceStoreResponse:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's SSE settings.
    CreateVariantStoreResponse:
      type: object
      required:
        - creationTime
        - id
        - name
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
    CreateWorkflowResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/WorkflowArn'
            - description: The workflow's ARN.
        id:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The workflow's ID.
        status:
          allOf:
            - $ref: '#/components/schemas/WorkflowStatus'
            - description: The workflow's status.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The workflow's tags.
    WorkflowParameter:
      type: object
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/WorkflowParameterDescription'
            - description: The parameter's description.
        optional:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Whether the parameter is optional.
      description: A workflow parameter.
    DeleteAnnotationStoreResponse:
      type: object
      required:
        - status
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
    DeleteReferenceResponse:
      type: object
      properties: {}
    DeleteReferenceStoreResponse:
      type: object
      properties: {}
    DeleteSequenceStoreResponse:
      type: object
      properties: {}
    DeleteVariantStoreResponse:
      type: object
      required:
        - status
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
    GetAnnotationImportResponse:
      type: object
      required:
        - completionTime
        - creationTime
        - destinationName
        - formatOptions
        - id
        - items
        - roleArn
        - runLeftNormalization
        - status
        - statusMessage
        - updateTime
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/CompletionTime'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the job was created.
        destinationName:
          allOf:
            - $ref: '#/components/schemas/StoreName'
            - description: The job's destination annotation store.
        formatOptions:
          $ref: '#/components/schemas/FormatOptions'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The job's ID.
        items:
          allOf:
            - $ref: '#/components/schemas/AnnotationImportItemDetails'
            - description: The job's imported items.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The job's service role ARN.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMsg'
            - description: The job's status message.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the job was updated.
    GetAnnotationStoreResponse:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - sseConfig
        - status
        - statusMessage
        - storeArn
        - storeSizeBytes
        - tags
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/StatusMessage'
            - description: A status message.
        storeArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The store's ARN.
        storeFormat:
          allOf:
            - $ref: '#/components/schemas/StoreFormat'
            - description: The store's annotation file format.
        storeOptions:
          allOf:
            - $ref: '#/components/schemas/StoreOptions'
            - description: The store's parsing options.
        storeSizeBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The store's size in bytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The store's tags.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
    GetReadSetResponse:
      type: object
      properties:
        payload:
          allOf:
            - $ref: '#/components/schemas/ReadSetStreamingBlob'
            - description: The read set file payload.
    RangeNotSatisfiableException: {}
    GetReadSetActivationJobResponse:
      type: object
      required:
        - creationTime
        - id
        - sequenceStoreId
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ActivationJobId'
            - description: The job's ID.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        sources:
          allOf:
            - $ref: '#/components/schemas/ActivateReadSetSourceList'
            - description: The job's source files.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetActivationJobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The job's status message.
    GetReadSetExportJobResponse:
      type: object
      required:
        - creationTime
        - destination
        - id
        - sequenceStoreId
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        destination:
          allOf:
            - $ref: '#/components/schemas/S3Destination'
            - description: The job's destination in Amazon S3.
        id:
          allOf:
            - $ref: '#/components/schemas/ExportJobId'
            - description: The job's ID.
        readSets:
          allOf:
            - $ref: '#/components/schemas/ExportReadSetDetailList'
            - description: The job's read sets.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetExportJobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The job's status message.
    GetReadSetImportJobResponse:
      type: object
      required:
        - creationTime
        - id
        - roleArn
        - sequenceStoreId
        - sources
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        sources:
          allOf:
            - $ref: '#/components/schemas/ImportReadSetSourceList'
            - description: The job's source files.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetImportJobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The job's status message.
    GetReadSetMetadataResponse:
      type: object
      required:
        - arn
        - creationTime
        - fileType
        - id
        - sequenceStoreId
        - status
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReadSetArn'
            - description: The read set's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the read set was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReadSetDescription'
            - description: The read set's description.
        fileType:
          allOf:
            - $ref: '#/components/schemas/FileType'
            - description: The read set's file type.
        files:
          allOf:
            - $ref: '#/components/schemas/ReadSetFiles'
            - description: The read set's files.
        id:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The read set's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/ReadSetName'
            - description: The read set's name.
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The read set's genome reference ARN.
        sampleId:
          allOf:
            - $ref: '#/components/schemas/SampleId'
            - description: The read set's sample ID.
        sequenceInformation:
          allOf:
            - $ref: '#/components/schemas/SequenceInformation'
            - description: The read set's sequence information.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The read set's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetStatus'
            - description: The read set's status.
        subjectId:
          allOf:
            - $ref: '#/components/schemas/SubjectId'
            - description: The read set's subject ID.
    GetReferenceResponse:
      type: object
      properties:
        payload:
          allOf:
            - $ref: '#/components/schemas/ReferenceStreamingBlob'
            - description: The reference file payload.
    GetReferenceImportJobResponse:
      type: object
      required:
        - creationTime
        - id
        - referenceStoreId
        - roleArn
        - sources
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        referenceStoreId:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The job's reference store ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        sources:
          allOf:
            - $ref: '#/components/schemas/ImportReferenceSourceList'
            - description: The job's source files.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceImportJobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The job's status message.
    GetReferenceMetadataResponse:
      type: object
      required:
        - arn
        - creationTime
        - id
        - md5
        - referenceStoreId
        - updateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The reference's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the reference was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceDescription'
            - description: The reference's description.
        files:
          allOf:
            - $ref: '#/components/schemas/ReferenceFiles'
            - description: The reference's files.
        id:
          allOf:
            - $ref: '#/components/schemas/ReferenceId'
            - description: The reference's ID.
        md5:
          allOf:
            - $ref: '#/components/schemas/Md5'
            - description: The reference's MD5 checksum.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceName'
            - description: The reference's name.
        referenceStoreId:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The reference's reference store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceStatus'
            - description: The reference's status.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the reference was updated.
    GetReferenceStoreResponse:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
    GetRunResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunArn'
            - description: The run's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: When the run was created.
        definition:
          allOf:
            - $ref: '#/components/schemas/WorkflowDefinition'
            - description: The run's definition.
        digest:
          allOf:
            - $ref: '#/components/schemas/WorkflowDigest'
            - description: The run's digest.
        id:
          allOf:
            - $ref: '#/components/schemas/RunId'
            - description: The run's ID.
        logLevel:
          allOf:
            - $ref: '#/components/schemas/RunLogLevel'
            - description: The run's log level.
        name:
          allOf:
            - $ref: '#/components/schemas/RunName'
            - description: The run's name.
        outputUri:
          allOf:
            - $ref: '#/components/schemas/RunOutputUri'
            - description: The run's output URI.
        parameters:
          allOf:
            - $ref: '#/components/schemas/RunParameters'
            - description: The run's parameters.
        priority:
          allOf:
            - $ref: '#/components/schemas/GetRunResponsePriorityInteger'
            - description: The run's priority.
        resourceDigests:
          allOf:
            - $ref: '#/components/schemas/RunResourceDigests'
            - description: The run's resource digests.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RunRoleArn'
            - description: The run's service role ARN.
        runGroupId:
          allOf:
            - $ref: '#/components/schemas/RunGroupId'
            - description: The run's group ID.
        runId:
          allOf:
            - $ref: '#/components/schemas/RunId'
            - description: The run's ID.
        startTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: When the run started.
        startedBy:
          allOf:
            - $ref: '#/components/schemas/RunStartedBy'
            - description: Who started the run.
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
            - description: The run's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/RunStatusMessage'
            - description: The run's status message.
        stopTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: The run's stop time.
        storageCapacity:
          allOf:
            - $ref: '#/components/schemas/GetRunResponseStorageCapacityInteger'
            - description: The run's storage capacity in gigabytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The run's tags.
        workflowId:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The run's workflow ID.
        workflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The run's workflow type.
    RunExport:
      type: string
      enum:
        - DEFINITION
      minLength: 1
      maxLength: 64
    GetRunGroupResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunGroupArn'
            - description: The group's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/RunGroupTimestamp'
            - description: When the group was created.
        id:
          allOf:
            - $ref: '#/components/schemas/RunGroupId'
            - description: The group's ID.
        maxCpus:
          allOf:
            - $ref: '#/components/schemas/GetRunGroupResponseMaxCpusInteger'
            - description: The group's maximum number of CPUs to use.
        maxDuration:
          allOf:
            - $ref: '#/components/schemas/GetRunGroupResponseMaxDurationInteger'
            - description: The group's maximum run time in minutes.
        maxRuns:
          allOf:
            - $ref: '#/components/schemas/GetRunGroupResponseMaxRunsInteger'
            - description: The maximum number of concurrent runs for the group.
        name:
          allOf:
            - $ref: '#/components/schemas/RunGroupName'
            - description: The group's name.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The group's tags.
    GetRunTaskResponse:
      type: object
      properties:
        cpus:
          allOf:
            - $ref: '#/components/schemas/GetRunTaskResponseCpusInteger'
            - description: The task's CPU usage.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: When the task was created.
        logStream:
          allOf:
            - $ref: '#/components/schemas/TaskLogStream'
            - description: The task's log stream.
        memory:
          allOf:
            - $ref: '#/components/schemas/GetRunTaskResponseMemoryInteger'
            - description: The task's memory use in gigabytes.
        name:
          allOf:
            - $ref: '#/components/schemas/TaskName'
            - description: The task's name.
        startTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: The task's start time.
        status:
          allOf:
            - $ref: '#/components/schemas/TaskStatus'
            - description: The task's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/TaskStatusMessage'
            - description: The task's status message.
        stopTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: The task's stop time.
        taskId:
          allOf:
            - $ref: '#/components/schemas/TaskId'
            - description: The task's ID.
    GetSequenceStoreResponse:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
    GetVariantImportResponse:
      type: object
      required:
        - creationTime
        - destinationName
        - id
        - items
        - roleArn
        - runLeftNormalization
        - status
        - statusMessage
        - updateTime
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/CompletionTime'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the job was created.
        destinationName:
          allOf:
            - $ref: '#/components/schemas/StoreName'
            - description: The job's destination variant store.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The job's ID.
        items:
          allOf:
            - $ref: '#/components/schemas/VariantImportItemDetails'
            - description: The job's items.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The job's service role ARN.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The job's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMsg'
            - description: The job's status message.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the job was updated.
    GetVariantStoreResponse:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - sseConfig
        - status
        - statusMessage
        - storeArn
        - storeSizeBytes
        - tags
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/StatusMessage'
            - description: The store's status message.
        storeArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The store's ARN.
        storeSizeBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The store's size in bytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The store's tags.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
    GetWorkflowResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/WorkflowArn'
            - description: The workflow's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/WorkflowTimestamp'
            - description: When the workflow was created.
        definition:
          allOf:
            - $ref: '#/components/schemas/WorkflowDefinition'
            - description: The workflow's definition.
        description:
          allOf:
            - $ref: '#/components/schemas/WorkflowDescription'
            - description: The workflow's description.
        digest:
          allOf:
            - $ref: '#/components/schemas/WorkflowDigest'
            - description: The workflow's digest.
        engine:
          allOf:
            - $ref: '#/components/schemas/WorkflowEngine'
            - description: The workflow's engine.
        id:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The workflow's ID.
        main:
          allOf:
            - $ref: '#/components/schemas/WorkflowMain'
            - description: The path of the main definition file for the workflow.
        name:
          allOf:
            - $ref: '#/components/schemas/WorkflowName'
            - description: The workflow's name.
        parameterTemplate:
          allOf:
            - $ref: '#/components/schemas/WorkflowParameterTemplate'
            - description: The workflow's parameter template.
        status:
          allOf:
            - $ref: '#/components/schemas/WorkflowStatus'
            - description: The workflow's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/WorkflowStatusMessage'
            - description: The workflow's status message.
        storageCapacity:
          allOf:
            - $ref: '#/components/schemas/GetWorkflowResponseStorageCapacityInteger'
            - description: The workflow's storage capacity in gigabytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The workflow's tags.
        type:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The workflow's type.
    WorkflowExport:
      type: string
      enum:
        - DEFINITION
      minLength: 1
      maxLength: 64
    ListAnnotationImportJobsResponse:
      type: object
      properties:
        annotationImportJobs:
          allOf:
            - $ref: '#/components/schemas/AnnotationImportJobItems'
            - description: A list of jobs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A pagination token that's included if more results are available.
    JobStatus:
      type: string
      enum:
        - SUBMITTED
        - IN_PROGRESS
        - CANCELLED
        - COMPLETED
        - FAILED
        - COMPLETED_WITH_FAILURES
    String:
      type: string
    ResourceIdentifier:
      type: string
      minLength: 1
      maxLength: 50
    ListAnnotationStoresResponse:
      type: object
      properties:
        annotationStores:
          allOf:
            - $ref: '#/components/schemas/AnnotationStoreItems'
            - description: A list of stores.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A pagination token that's included if more results are available.
    StoreStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
        - FAILED
    ListReadSetActivationJobsResponse:
      type: object
      properties:
        activationJobs:
          allOf:
            - $ref: '#/components/schemas/ActivateReadSetJobList'
            - description: A list of jobs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
    SyntheticTimestamp_date_time:
      type: string
      format: date-time
    ReadSetActivationJobStatus:
      type: string
      enum:
        - SUBMITTED
        - IN_PROGRESS
        - CANCELLING
        - CANCELLED
        - FAILED
        - COMPLETED
        - COMPLETED_WITH_FAILURES
    ListReadSetExportJobsResponse:
      type: object
      properties:
        exportJobs:
          allOf:
            - $ref: '#/components/schemas/ExportReadSetJobDetailList'
            - description: A list of jobs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
    ReadSetExportJobStatus:
      type: string
      enum:
        - SUBMITTED
        - IN_PROGRESS
        - CANCELLING
        - CANCELLED
        - FAILED
        - COMPLETED
        - COMPLETED_WITH_FAILURES
    ListReadSetImportJobsResponse:
      type: object
      properties:
        importJobs:
          allOf:
            - $ref: '#/components/schemas/ImportReadSetJobList'
            - description: A list of jobs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
    ReadSetImportJobStatus:
      type: string
      enum:
        - SUBMITTED
        - IN_PROGRESS
        - CANCELLING
        - CANCELLED
        - FAILED
        - COMPLETED
        - COMPLETED_WITH_FAILURES
    ListReadSetsResponse:
      type: object
      required:
        - readSets
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
        readSets:
          allOf:
            - $ref: '#/components/schemas/ReadSetList'
            - description: A list of read sets.
    ReadSetName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    ReadSetStatus:
      type: string
      enum:
        - ARCHIVED
        - ACTIVATING
        - ACTIVE
        - DELETING
        - DELETED
    ListReferenceImportJobsResponse:
      type: object
      properties:
        importJobs:
          allOf:
            - $ref: '#/components/schemas/ImportReferenceJobList'
            - description: A lis of jobs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
    ReferenceImportJobStatus:
      type: string
      enum:
        - SUBMITTED
        - IN_PROGRESS
        - CANCELLING
        - CANCELLED
        - FAILED
        - COMPLETED
        - COMPLETED_WITH_FAILURES
    ListReferenceStoresResponse:
      type: object
      required:
        - referenceStores
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
        referenceStores:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreDetailList'
            - description: A list of reference stores.
    ReferenceStoreName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    ListReferencesResponse:
      type: object
      required:
        - references
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
        references:
          allOf:
            - $ref: '#/components/schemas/ReferenceList'
            - description: A list of references.
    Md5:
      type: string
      pattern: '^[\p{L}||\p{N}]+$'
      minLength: 1
      maxLength: 255
    ReferenceName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 3
      maxLength: 255
    ListRunGroupsResponse:
      type: object
      properties:
        items:
          allOf:
            - $ref: '#/components/schemas/RunGroupList'
            - description: A list of groups.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/RunGroupListToken'
            - description: A pagination token that's included if more results are available.
    ListRunTasksResponse:
      type: object
      properties:
        items:
          allOf:
            - $ref: '#/components/schemas/TaskList'
            - description: A list of tasks.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/TaskListToken'
            - description: A pagination token that's included if more results are available.
    ListRunsResponse:
      type: object
      properties:
        items:
          allOf:
            - $ref: '#/components/schemas/RunList'
            - description: A list of runs.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/RunListToken'
            - description: A pagination token that's included if more results are available.
    ListSequenceStoresResponse:
      type: object
      required:
        - sequenceStores
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: A pagination token that's included if more results are available.
        sequenceStores:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreDetailList'
            - description: A list of sequence stores.
    SequenceStoreName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    ListTagsForResourceResponse:
      type: object
      required:
        - tags
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: A list of tags.
    ListVariantImportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A pagination token that's included if more results are available.
        variantImportJobs:
          allOf:
            - $ref: '#/components/schemas/VariantImportJobItems'
            - description: A list of jobs.
    ListVariantStoresResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A pagination token that's included if more results are available.
        variantStores:
          allOf:
            - $ref: '#/components/schemas/VariantStoreItems'
            - description: A list of variant stores.
    ListWorkflowsResponse:
      type: object
      properties:
        items:
          allOf:
            - $ref: '#/components/schemas/WorkflowList'
            - description: The workflows' items.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/WorkflowListToken'
            - description: A pagination token that's included if more results are available.
    StartAnnotationImportResponse:
      type: object
      required:
        - jobId
      properties:
        jobId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The job's ID.
    TsvOptions:
      type: object
      properties:
        readOptions:
          allOf:
            - $ref: '#/components/schemas/ReadOptions'
            - description: The file's read options.
      description: Formatting options for a TSV file.
    VcfOptions:
      type: object
      properties:
        ignoreFilterField:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: The file's ignore filter field setting.
        ignoreQualField:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: The file's ignore qual field setting.
      description: Formatting options for a VCF file.
    AnnotationImportItemSource:
      type: object
      required:
        - source
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
      description: A source for an annotation import job.
    StartReadSetActivationJobResponse:
      type: object
      required:
        - creationTime
        - id
        - sequenceStoreId
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ActivationJobId'
            - description: The job's ID.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The read set's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetActivationJobStatus'
            - description: The job's status.
    StartReadSetActivationJobSourceItem:
      type: object
      required:
        - readSetId
      properties:
        readSetId:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The source's read set ID.
      description: A source for a read set activation job.
    StartReadSetExportJobResponse:
      type: object
      required:
        - creationTime
        - destination
        - id
        - sequenceStoreId
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        destination:
          allOf:
            - $ref: '#/components/schemas/S3Destination'
            - description: The job's output location.
        id:
          allOf:
            - $ref: '#/components/schemas/ExportJobId'
            - description: The job's ID.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The read set's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetExportJobStatus'
            - description: The job's status.
    ExportReadSet:
      type: object
      required:
        - readSetId
      properties:
        readSetId:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The set's ID.
      description: A read set.
    StartReadSetImportJobResponse:
      type: object
      required:
        - creationTime
        - id
        - roleArn
        - sequenceStoreId
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The read set's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetImportJobStatus'
            - description: The job's status.
    StartReadSetImportJobSourceItem:
      type: object
      required:
        - referenceArn
        - sampleId
        - sourceFileType
        - sourceFiles
        - subjectId
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/ReadSetDescription'
            - description: The source's description.
        generatedFrom:
          allOf:
            - $ref: '#/components/schemas/GeneratedFrom'
            - description: Where the source originated.
        name:
          allOf:
            - $ref: '#/components/schemas/ReadSetName'
            - description: The source's name.
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The source's reference ARN.
        sampleId:
          allOf:
            - $ref: '#/components/schemas/SampleId'
            - description: The source's sample ID.
        sourceFileType:
          allOf:
            - $ref: '#/components/schemas/FileType'
            - description: The source's file type.
        sourceFiles:
          allOf:
            - $ref: '#/components/schemas/SourceFiles'
            - description: The source files' location in Amazon S3.
        subjectId:
          allOf:
            - $ref: '#/components/schemas/SubjectId'
            - description: The source's subject ID.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The source's tags.
      description: A source for a read set import job.
    StartReferenceImportJobResponse:
      type: object
      required:
        - creationTime
        - id
        - referenceStoreId
        - roleArn
        - status
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        referenceStoreId:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The job's reference store ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceImportJobStatus'
            - description: The job's status.
    StartReferenceImportJobSourceItem:
      type: object
      required:
        - name
        - sourceFile
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceDescription'
            - description: The source's description.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceName'
            - description: The source's name.
        sourceFile:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The source's tags.
      description: A source for a reference import job.
    StartRunResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunArn'
            - description: The run's ARN.
        id:
          allOf:
            - $ref: '#/components/schemas/RunId'
            - description: The run's ID.
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
            - description: The run's status.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The run's tags.
    StartVariantImportResponse:
      type: object
      required:
        - jobId
      properties:
        jobId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The job's ID.
    VariantImportItemSource:
      type: object
      required:
        - source
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
      description: A imported variant item's source.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    UpdateAnnotationStoreResponse:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - status
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        storeFormat:
          allOf:
            - $ref: '#/components/schemas/StoreFormat'
            - description: The annotation file format of the store.
        storeOptions:
          allOf:
            - $ref: '#/components/schemas/StoreOptions'
            - description: Parsing options for the store.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
    UpdateVariantStoreResponse:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - status
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
    ActivateReadSetFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetActivationJobStatus'
            - description: The filter's status.
      description: A read set activation job filter.
    ActivationJobId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    SequenceStoreId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    ActivateReadSetJobItem:
      type: object
      required:
        - creationTime
        - id
        - sequenceStoreId
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ActivationJobId'
            - description: The job's ID.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetActivationJobStatus'
            - description: The job's status.
      description: A read set activation job.
    ActivateReadSetJobList:
      type: array
      items:
        $ref: '#/components/schemas/ActivateReadSetJobItem'
    ReadSetActivationJobItemStatus:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - FINISHED
        - FAILED
    JobStatusMessage:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    ActivateReadSetSourceItem:
      type: object
      required:
        - readSetId
        - status
      properties:
        readSetId:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The source's read set ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetActivationJobItemStatus'
            - description: The source's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The source's status message.
      description: A source for a read set activation job.
    ActivateReadSetSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ActivateReadSetSourceItem'
    S3Uri:
      type: string
      pattern: '^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/(.{1,1024})$'
    AnnotationImportItemDetail:
      type: object
      required:
        - jobStatus
        - source
      properties:
        jobStatus:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The item's job status.
        source:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
      description: Details about an imported annotation item.
    AnnotationImportItemDetails:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportItemDetail'
      minItems: 1
      maxItems: 1
    AnnotationImportItemSources:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportItemSource'
      minItems: 1
    CompletionTime:
      type: string
      format: date-time
    CreationTime:
      type: string
      format: date-time
    Arn:
      type: string
      pattern: '^arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)$'
      minLength: 20
      maxLength: 2048
    RunLeftNormalization:
      type: boolean
    UpdateTime:
      type: string
      format: date-time
    AnnotationImportJobItem:
      type: object
      required:
        - creationTime
        - destinationName
        - id
        - roleArn
        - status
        - updateTime
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/CompletionTime'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the job was created.
        destinationName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The job's destination annotation store.
        id:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The job's ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The job's service role ARN.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The job's status.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the job was updated.
      description: An annotation import job.
    AnnotationImportJobItems:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportJobItem'
    StoreDescription:
      type: string
      minLength: 0
      maxLength: 500
    ResourceId:
      type: string
      pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    ReferenceItem:
      type: object
      properties:
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The reference's ARN.
      description: A genome reference.
    SseConfig:
      type: object
      required:
        - type
      properties:
        keyArn:
          allOf:
            - $ref: '#/components/schemas/SseConfigKeyArnString'
            - description: An encryption key ARN.
        type:
          allOf:
            - $ref: '#/components/schemas/EncryptionType'
            - description: The encryption type.
      description: Server-side encryption (SSE) settings for a store.
    StatusMessage:
      type: string
      minLength: 0
      maxLength: 1000
    StoreFormat:
      type: string
      enum:
        - GFF
        - TSV
        - VCF
    Long:
      type: integer
    AnnotationStoreItem:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - sseConfig
        - status
        - statusMessage
        - storeArn
        - storeFormat
        - storeSizeBytes
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: The store's creation time.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/StatusMessage'
            - description: The store's status message.
        storeArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The store's ARN.
        storeFormat:
          allOf:
            - $ref: '#/components/schemas/StoreFormat'
            - description: The store's file format.
        storeSizeBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The store's size in bytes.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
      description: An annotation store.
    AnnotationStoreItems:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationStoreItem'
    AnnotationType:
      type: string
      enum:
        - GENERIC
        - CHR_POS
        - CHR_POS_REF_ALT
        - CHR_START_END_ONE_BASE
        - CHR_START_END_REF_ALT_ONE_BASE
        - CHR_START_END_ZERO_BASE
        - CHR_START_END_REF_ALT_ZERO_BASE
    ReadSetIdList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetId'
      minItems: 1
      maxItems: 100
    BatchDeleteReadSetRequest:
      type: object
      required:
        - ids
      title: BatchDeleteReadSetRequest
      properties:
        ids:
          allOf:
            - $ref: '#/components/schemas/ReadSetIdList'
            - description: The read sets' IDs.
    ReadSetBatchErrorList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetBatchError'
    Blob:
      type: string
    Boolean:
      type: boolean
    CancelAnnotationImportRequest:
      type: object
      title: CancelAnnotationImportRequest
      properties: {}
    RunId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 18
    CancelRunRequest:
      type: object
      title: CancelRunRequest
      properties: {}
    CancelVariantImportRequest:
      type: object
      title: CancelVariantImportRequest
      properties: {}
    ClientToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    CommentChar:
      type: string
      minLength: 1
      maxLength: 1
    CreateAnnotationStoreRequestNameString:
      type: string
      pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
    StoreOptions:
      type: object
      properties:
        tsvStoreOptions:
          allOf:
            - $ref: '#/components/schemas/TsvStoreOptions'
            - description: File settings for a TSV store.
      description: Settings for a store.
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateAnnotationStoreRequest:
      type: object
      required:
        - storeFormat
      title: CreateAnnotationStoreRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: A description for the store.
        name:
          allOf:
            - $ref: '#/components/schemas/CreateAnnotationStoreRequestNameString'
            - description: A name for the store.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The genome reference for the store's annotations.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: Server-side encryption (SSE) settings for the store.
        storeFormat:
          allOf:
            - $ref: '#/components/schemas/StoreFormat'
            - description: The annotation file format of the store.
        storeOptions:
          allOf:
            - $ref: '#/components/schemas/StoreOptions'
            - description: File parsing options for the annotation store.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the store.
    ReferenceStoreDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 255
    CreateReferenceStoreRequest:
      type: object
      required:
        - name
      title: CreateReferenceStoreRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that requests don''t run multiple times, specify a unique token for each request.'
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreDescription'
            - description: A description for the store.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreName'
            - description: A name for the store.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: Server-side encryption (SSE) settings for the store.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the store.
    ReferenceStoreArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 127
    ReferenceStoreId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    CreateRunGroupRequestMaxCpusInteger:
      type: integer
      minimum: 1
      maximum: 100000
    CreateRunGroupRequestMaxDurationInteger:
      type: integer
      minimum: 1
      maximum: 100000
    CreateRunGroupRequestMaxRunsInteger:
      type: integer
      minimum: 1
      maximum: 100000
    RunGroupName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    RunGroupRequestId:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    CreateRunGroupRequest:
      type: object
      required:
        - requestId
      title: CreateRunGroupRequest
      properties:
        maxCpus:
          allOf:
            - $ref: '#/components/schemas/CreateRunGroupRequestMaxCpusInteger'
            - description: The maximum number of CPUs to use in the group.
        maxDuration:
          allOf:
            - $ref: '#/components/schemas/CreateRunGroupRequestMaxDurationInteger'
            - description: A maximum run time for the group in minutes.
        maxRuns:
          allOf:
            - $ref: '#/components/schemas/CreateRunGroupRequestMaxRunsInteger'
            - description: The maximum number of concurrent runs for the group.
        name:
          allOf:
            - $ref: '#/components/schemas/RunGroupName'
            - description: A name for the group.
        requestId:
          allOf:
            - $ref: '#/components/schemas/RunGroupRequestId'
            - description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the group.
    RunGroupArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 128
    RunGroupId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 18
    SequenceStoreDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 255
    CreateSequenceStoreRequest:
      type: object
      required:
        - name
      title: CreateSequenceStoreRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that requests don''t run multiple times, specify a unique token for each request.'
        description:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreDescription'
            - description: A description for the store.
        name:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreName'
            - description: A name for the store.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: Server-side encryption (SSE) settings for the store.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the store.
    SequenceStoreArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 127
    CreateVariantStoreRequestNameString:
      type: string
      pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
    CreateVariantStoreRequest:
      type: object
      required:
        - reference
      title: CreateVariantStoreRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: A description for the store.
        name:
          allOf:
            - $ref: '#/components/schemas/CreateVariantStoreRequestNameString'
            - description: A name for the store.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The genome reference for the store's variants.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: Server-side encryption (SSE) settings for the store.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the store.
    WorkflowDefinition:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 256
    WorkflowDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 256
    WorkflowEngine:
      type: string
      enum:
        - WDL
        - NEXTFLOW
      minLength: 1
      maxLength: 64
    WorkflowMain:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    WorkflowName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    WorkflowParameterTemplate:
      type: object
      minProperties: 1
      maxProperties: 1000
      additionalProperties:
        $ref: '#/components/schemas/WorkflowParameter'
    WorkflowRequestId:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    CreateWorkflowRequestStorageCapacityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    CreateWorkflowRequest:
      type: object
      required:
        - requestId
      title: CreateWorkflowRequest
      properties:
        definitionUri:
          allOf:
            - $ref: '#/components/schemas/WorkflowDefinition'
            - description: The URI of a definition for the workflow.
        definitionZip:
          allOf:
            - $ref: '#/components/schemas/Blob'
            - description: A ZIP archive for the workflow.
        description:
          allOf:
            - $ref: '#/components/schemas/WorkflowDescription'
            - description: A description for the workflow.
        engine:
          allOf:
            - $ref: '#/components/schemas/WorkflowEngine'
            - description: An engine for the workflow.
        main:
          allOf:
            - $ref: '#/components/schemas/WorkflowMain'
            - description: The path of the main definition file for the workflow.
        name:
          allOf:
            - $ref: '#/components/schemas/WorkflowName'
            - description: A name for the workflow.
        parameterTemplate:
          allOf:
            - $ref: '#/components/schemas/WorkflowParameterTemplate'
            - description: A parameter template for the workflow.
        requestId:
          allOf:
            - $ref: '#/components/schemas/WorkflowRequestId'
            - description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
        storageCapacity:
          allOf:
            - $ref: '#/components/schemas/CreateWorkflowRequestStorageCapacityInteger'
            - description: A storage capacity for the workflow in gigabytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the workflow.
    WorkflowArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 128
    WorkflowId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 18
    WorkflowStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - UPDATING
        - DELETED
        - FAILED
      minLength: 1
      maxLength: 64
    PrimitiveBoolean:
      type: boolean
    DeleteAnnotationStoreRequest:
      type: object
      title: DeleteAnnotationStoreRequest
      properties: {}
    ReferenceId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    DeleteReferenceRequest:
      type: object
      title: DeleteReferenceRequest
      properties: {}
    DeleteReferenceStoreRequest:
      type: object
      title: DeleteReferenceStoreRequest
      properties: {}
    DeleteRunGroupRequest:
      type: object
      title: DeleteRunGroupRequest
      properties: {}
    DeleteRunRequest:
      type: object
      title: DeleteRunRequest
      properties: {}
    DeleteSequenceStoreRequest:
      type: object
      title: DeleteSequenceStoreRequest
      properties: {}
    DeleteVariantStoreRequest:
      type: object
      title: DeleteVariantStoreRequest
      properties: {}
    DeleteWorkflowRequest:
      type: object
      title: DeleteWorkflowRequest
      properties: {}
    Encoding:
      type: string
      minLength: 1
      maxLength: 20
    EscapeChar:
      type: string
      minLength: 1
      maxLength: 1
    EscapeQuotes:
      type: boolean
    ExportJobId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    ReadSetExportJobItemStatus:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - FINISHED
        - FAILED
    ExportReadSetDetail:
      type: object
      required:
        - id
        - status
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The set's ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetExportJobItemStatus'
            - description: The set's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The set's status message.
      description: Details about a read set.
    ExportReadSetDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSetDetail'
    ExportReadSetFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetExportJobStatus'
            - description: A status to filter on.
      description: An read set export job filter.
    S3Destination:
      type: string
      pattern: '^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?$'
    ExportReadSetJobDetail:
      type: object
      required:
        - creationTime
        - destination
        - id
        - sequenceStoreId
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        destination:
          allOf:
            - $ref: '#/components/schemas/S3Destination'
            - description: The job's destination in Amazon S3.
        id:
          allOf:
            - $ref: '#/components/schemas/ExportJobId'
            - description: The job's ID.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetExportJobStatus'
            - description: The job's status.
      description: Details about a read set export job.
    ExportReadSetJobDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSetJobDetail'
    FileInformationContentLengthLong:
      type: integer
      minimum: 1
      maximum: 5497558138880
    FileInformationPartSizeLong:
      type: integer
      minimum: 1
      maximum: 5368709120
    FileInformationTotalPartsInteger:
      type: integer
      minimum: 1
      maximum: 10000
    FileInformation:
      type: object
      properties:
        contentLength:
          allOf:
            - $ref: '#/components/schemas/FileInformationContentLengthLong'
            - description: The file's content length.
        partSize:
          allOf:
            - $ref: '#/components/schemas/FileInformationPartSizeLong'
            - description: The file's part size.
        totalParts:
          allOf:
            - $ref: '#/components/schemas/FileInformationTotalPartsInteger'
            - description: The file's total parts.
      description: Details about a file.
    FileType:
      type: string
      enum:
        - FASTQ
        - BAM
        - CRAM
    FormatOptions:
      type: object
      properties:
        tsvOptions:
          allOf:
            - $ref: '#/components/schemas/TsvOptions'
            - description: Options for a TSV file.
        vcfOptions:
          allOf:
            - $ref: '#/components/schemas/VcfOptions'
            - description: Options for a VCF file.
      description: Formatting options for a file.
    FormatToHeaderValueString:
      type: string
      minLength: 0
      maxLength: 1000
    FormatToHeader:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FormatToHeaderValueString'
    FormatToHeaderKey:
      type: string
      enum:
        - CHR
        - START
        - END
        - REF
        - ALT
        - POS
    GeneratedFrom:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    GetAnnotationImportRequest:
      type: object
      title: GetAnnotationImportRequest
      properties: {}
    StoreName:
      type: string
      pattern: '^([a-z]){1}([a-z0-9_]){2,254}$'
      minLength: 3
      maxLength: 255
    JobStatusMsg:
      type: string
    GetAnnotationStoreRequest:
      type: object
      title: GetAnnotationStoreRequest
      properties: {}
    GetReadSetActivationJobRequest:
      type: object
      title: GetReadSetActivationJobRequest
      properties: {}
    GetReadSetExportJobRequest:
      type: object
      title: GetReadSetExportJobRequest
      properties: {}
    ImportJobId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 10
      maxLength: 36
    GetReadSetImportJobRequest:
      type: object
      title: GetReadSetImportJobRequest
      properties: {}
    RoleArn:
      type: string
      pattern: '^arn:.*'
      minLength: 20
      maxLength: 2048
    ImportReadSetSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReadSetSourceItem'
    GetReadSetMetadataRequest:
      type: object
      title: GetReadSetMetadataRequest
      properties: {}
    ReadSetArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 127
    ReadSetDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 255
    ReadSetFiles:
      type: object
      properties:
        index:
          allOf:
            - $ref: '#/components/schemas/FileInformation'
            - description: The files' index.
        source1:
          allOf:
            - $ref: '#/components/schemas/FileInformation'
            - description: The location of the first file in Amazon S3.
        source2:
          allOf:
            - $ref: '#/components/schemas/FileInformation'
            - description: The location of the second file in Amazon S3.
      description: Files in a read set.
    SampleId:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    SequenceInformation:
      type: object
      properties:
        alignment:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The sequence's alignment setting.
        generatedFrom:
          allOf:
            - $ref: '#/components/schemas/GeneratedFrom'
            - description: Where the sequence originated.
        totalBaseCount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The sequence's total base count.
        totalReadCount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The sequence's total read count.
      description: Details about a sequence.
    SubjectId:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    ReadSetFile:
      type: string
      enum:
        - SOURCE1
        - SOURCE2
        - INDEX
    GetReadSetRequestPartNumberInteger:
      type: integer
      minimum: 1
      maximum: 10000
    GetReadSetRequest:
      type: object
      title: GetReadSetRequest
      properties: {}
    ReadSetStreamingBlob:
      type: string
    GetReferenceImportJobRequest:
      type: object
      title: GetReferenceImportJobRequest
      properties: {}
    ImportReferenceSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReferenceSourceItem'
    GetReferenceMetadataRequest:
      type: object
      title: GetReferenceMetadataRequest
      properties: {}
    ReferenceDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 255
    ReferenceFiles:
      type: object
      properties:
        index:
          allOf:
            - $ref: '#/components/schemas/FileInformation'
            - description: The files' index.
        source:
          allOf:
            - $ref: '#/components/schemas/FileInformation'
            - description: The source file's location in Amazon S3.
      description: A set of genome reference files.
    ReferenceStatus:
      type: string
      enum:
        - ACTIVE
        - DELETING
        - DELETED
    ReferenceFile:
      type: string
      enum:
        - SOURCE
        - INDEX
    GetReferenceRequestPartNumberInteger:
      type: integer
      minimum: 1
      maximum: 10000
    Range:
      type: string
      pattern: '^[\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 127
    GetReferenceRequest:
      type: object
      title: GetReferenceRequest
      properties: {}
    ReferenceStreamingBlob:
      type: string
    GetReferenceStoreRequest:
      type: object
      title: GetReferenceStoreRequest
      properties: {}
    GetRunGroupRequest:
      type: object
      title: GetRunGroupRequest
      properties: {}
    RunGroupTimestamp:
      type: string
      format: date-time
    GetRunGroupResponseMaxCpusInteger:
      type: integer
      minimum: 1
      maximum: 100000
    GetRunGroupResponseMaxDurationInteger:
      type: integer
      minimum: 1
      maximum: 100000
    GetRunGroupResponseMaxRunsInteger:
      type: integer
      minimum: 1
      maximum: 100000
    RunExportList:
      type: array
      items:
        $ref: '#/components/schemas/RunExport'
      minItems: 0
      maxItems: 32
    GetRunRequest:
      type: object
      title: GetRunRequest
      properties: {}
    RunArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 128
    RunTimestamp:
      type: string
      format: date-time
    WorkflowDigest:
      type: string
      minLength: 1
      maxLength: 64
    RunLogLevel:
      type: string
      enum:
        - 'OFF'
        - FATAL
        - ERROR
        - ALL
      minLength: 1
      maxLength: 64
    RunName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    RunOutputUri:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    RunParameters:
      type: object
      properties: {}
    GetRunResponsePriorityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    RunResourceDigests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RunResourceDigest'
    RunRoleArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 128
    RunStartedBy:
      type: string
      minLength: 1
      maxLength: 128
    RunStatus:
      type: string
      enum:
        - PENDING
        - STARTING
        - RUNNING
        - STOPPING
        - COMPLETED
        - DELETED
        - CANCELLED
        - FAILED
      minLength: 1
      maxLength: 64
    RunStatusMessage:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
    GetRunResponseStorageCapacityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    WorkflowType:
      type: string
      enum:
        - PRIVATE
      minLength: 1
      maxLength: 64
    TaskId:
      type: string
      pattern: '^[0-9]+$'
      minLength: 1
      maxLength: 18
    GetRunTaskRequest:
      type: object
      title: GetRunTaskRequest
      properties: {}
    GetRunTaskResponseCpusInteger:
      type: integer
      minimum: 1
    TaskTimestamp:
      type: string
      format: date-time
    TaskLogStream:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
    GetRunTaskResponseMemoryInteger:
      type: integer
      minimum: 1
    TaskName:
      type: string
      minLength: 1
      maxLength: 128
    TaskStatus:
      type: string
      enum:
        - PENDING
        - STARTING
        - RUNNING
        - STOPPING
        - COMPLETED
        - CANCELLED
        - FAILED
      minLength: 1
      maxLength: 64
    TaskStatusMessage:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
    GetSequenceStoreRequest:
      type: object
      title: GetSequenceStoreRequest
      properties: {}
    GetVariantImportRequest:
      type: object
      title: GetVariantImportRequest
      properties: {}
    VariantImportItemDetails:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportItemDetail'
      minItems: 1
    GetVariantStoreRequest:
      type: object
      title: GetVariantStoreRequest
      properties: {}
    WorkflowExportList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowExport'
      minItems: 0
      maxItems: 32
    GetWorkflowRequest:
      type: object
      title: GetWorkflowRequest
      properties: {}
    WorkflowTimestamp:
      type: string
      format: date-time
    WorkflowStatusMessage:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
    GetWorkflowResponseStorageCapacityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    Header:
      type: boolean
    ImportReadSetFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetImportJobStatus'
            - description: A status to filter on.
      description: A filter for import read set jobs.
    ImportReadSetJobItem:
      type: object
      required:
        - creationTime
        - id
        - roleArn
        - sequenceStoreId
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The job's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetImportJobStatus'
            - description: The job's status.
      description: An import read set job.
    ImportReadSetJobList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReadSetJobItem'
    SourceFiles:
      type: object
      required:
        - source1
      properties:
        source1:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The location of the first file in Amazon S3.
        source2:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The location of the second file in Amazon S3.
      description: Source files for a sequence.
    ReadSetImportJobItemStatus:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - FINISHED
        - FAILED
    ImportReadSetSourceItem:
      type: object
      required:
        - sampleId
        - sourceFileType
        - sourceFiles
        - status
        - subjectId
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/ReadSetDescription'
            - description: The source's description.
        generatedFrom:
          allOf:
            - $ref: '#/components/schemas/GeneratedFrom'
            - description: Where the source originated.
        name:
          allOf:
            - $ref: '#/components/schemas/ReadSetName'
            - description: The source's name.
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The source's genome reference ARN.
        sampleId:
          allOf:
            - $ref: '#/components/schemas/SampleId'
            - description: The source's sample ID.
        sourceFileType:
          allOf:
            - $ref: '#/components/schemas/FileType'
            - description: The source's file type.
        sourceFiles:
          allOf:
            - $ref: '#/components/schemas/SourceFiles'
            - description: The source files' location in Amazon S3.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetImportJobItemStatus'
            - description: The source's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The source's status message.
        subjectId:
          allOf:
            - $ref: '#/components/schemas/SubjectId'
            - description: The source's subject ID.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The source's tags.
      description: A source for an import read set job.
    ImportReferenceFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceImportJobStatus'
            - description: A status to filter on.
      description: A filter for import references.
    ImportReferenceJobItem:
      type: object
      required:
        - creationTime
        - id
        - referenceStoreId
        - roleArn
        - status
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the job was created.
        id:
          allOf:
            - $ref: '#/components/schemas/ImportJobId'
            - description: The job's ID.
        referenceStoreId:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The job's reference store ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The job's service role ARN.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceImportJobStatus'
            - description: The job's status.
      description: An import reference job.
    ImportReferenceJobList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReferenceJobItem'
    ReferenceImportJobItemStatus:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - FINISHED
        - FAILED
    ImportReferenceSourceItem:
      type: object
      required:
        - status
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceDescription'
            - description: The source's description.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceName'
            - description: The source's name.
        sourceFile:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceImportJobItemStatus'
            - description: The source's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMessage'
            - description: The source's status message.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The source's tags.
      description: An genome reference source.
    LineSep:
      type: string
      minLength: 1
      maxLength: 20
    ListAnnotationImportJobsFilter:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: A status to filter on.
        storeName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A store name to filter on.
      description: A filter for annotation import jobs.
    ListAnnotationImportJobsRequestIdsList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      minItems: 1
      maxItems: 20
    ListAnnotationImportJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListAnnotationImportJobsRequestNextTokenString:
      type: string
      minLength: 1
      maxLength: 10000
    ListAnnotationImportJobsRequest:
      type: object
      title: ListAnnotationImportJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ListAnnotationImportJobsFilter'
            - description: A filter to apply to the list.
        ids:
          allOf:
            - $ref: '#/components/schemas/ListAnnotationImportJobsRequestIdsList'
            - description: IDs of annotation import jobs to retrieve.
    ListAnnotationStoresFilter:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: A status to filter on.
      description: A filter for annotation stores.
    ListAnnotationStoresRequestIdsList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      minItems: 1
      maxItems: 20
    ListAnnotationStoresRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListAnnotationStoresRequestNextTokenString:
      type: string
      minLength: 1
      maxLength: 10000
    ListAnnotationStoresRequest:
      type: object
      title: ListAnnotationStoresRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ListAnnotationStoresFilter'
            - description: A filter to apply to the list.
        ids:
          allOf:
            - $ref: '#/components/schemas/ListAnnotationStoresRequestIdsList'
            - description: IDs of stores to list.
    ListReadSetActivationJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 6144
    ListReadSetActivationJobsRequest:
      type: object
      title: ListReadSetActivationJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ActivateReadSetFilter'
            - description: A filter to apply to the list.
    ListReadSetExportJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReadSetExportJobsRequest:
      type: object
      title: ListReadSetExportJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ExportReadSetFilter'
            - description: A filter to apply to the list.
    ListReadSetImportJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReadSetImportJobsRequest:
      type: object
      title: ListReadSetImportJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ImportReadSetFilter'
            - description: A filter to apply to the list.
    ReadSetFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        name:
          allOf:
            - $ref: '#/components/schemas/ReadSetName'
            - description: A name to filter on.
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: A genome reference ARN to filter on.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetStatus'
            - description: A status to filter on.
      description: A filter for read sets.
    ListReadSetsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReadSetsRequest:
      type: object
      title: ListReadSetsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ReadSetFilter'
            - description: A filter to apply to the list.
    ReadSetList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetListItem'
    ListReferenceImportJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReferenceImportJobsRequest:
      type: object
      title: ListReferenceImportJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ImportReferenceFilter'
            - description: A filter to apply to the list.
    ReferenceStoreFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreName'
            - description: The name to filter on.
      description: A filter for reference stores.
    ListReferenceStoresRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReferenceStoresRequest:
      type: object
      title: ListReferenceStoresRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreFilter'
            - description: A filter to apply to the list.
    ReferenceStoreDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ReferenceStoreDetail'
    ReferenceFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        md5:
          allOf:
            - $ref: '#/components/schemas/Md5'
            - description: An MD5 checksum to filter on.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceName'
            - description: A name to filter on.
      description: A filter for references.
    ListReferencesRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListReferencesRequest:
      type: object
      title: ListReferencesRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ReferenceFilter'
            - description: A filter to apply to the list.
    ReferenceList:
      type: array
      items:
        $ref: '#/components/schemas/ReferenceListItem'
    ListRunGroupsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    RunGroupListToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    ListRunGroupsRequest:
      type: object
      title: ListRunGroupsRequest
      properties: {}
    RunGroupList:
      type: array
      items:
        $ref: '#/components/schemas/RunGroupListItem'
    ListRunTasksRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    TaskListToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    ListRunTasksRequest:
      type: object
      title: ListRunTasksRequest
      properties: {}
    TaskList:
      type: array
      items:
        $ref: '#/components/schemas/TaskListItem'
    ListRunsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    RunListToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    ListRunsRequest:
      type: object
      title: ListRunsRequest
      properties: {}
    RunList:
      type: array
      items:
        $ref: '#/components/schemas/RunListItem'
    SequenceStoreFilter:
      type: object
      properties:
        createdAfter:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's start date.
        createdBefore:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The filter's end date.
        name:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreName'
            - description: A name to filter on.
      description: A filter for a sequence store.
    ListSequenceStoresRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListSequenceStoresRequest:
      type: object
      title: ListSequenceStoresRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreFilter'
            - description: A filter to apply to the list.
    SequenceStoreDetailList:
      type: array
      items:
        $ref: '#/components/schemas/SequenceStoreDetail'
    TagArn:
      type: string
      pattern: '^arn:.+$'
      minLength: 1
      maxLength: 128
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListVariantImportJobsFilter:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: A status to filter on.
        storeName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A store name to filter on.
      description: A filter for variant import jobs.
    ListVariantImportJobsRequestIdsList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      minItems: 1
      maxItems: 20
    ListVariantImportJobsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListVariantImportJobsRequestNextTokenString:
      type: string
      minLength: 1
      maxLength: 10000
    ListVariantImportJobsRequest:
      type: object
      title: ListVariantImportJobsRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ListVariantImportJobsFilter'
            - description: A filter to apply to the list.
        ids:
          allOf:
            - $ref: '#/components/schemas/ListVariantImportJobsRequestIdsList'
            - description: A list of job IDs.
    VariantImportJobItems:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportJobItem'
    ListVariantStoresFilter:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: A status to filter on.
      description: A filter for variant stores.
    ListVariantStoresRequestIdsList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      minItems: 1
      maxItems: 20
    ListVariantStoresRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListVariantStoresRequestNextTokenString:
      type: string
      minLength: 1
      maxLength: 10000
    ListVariantStoresRequest:
      type: object
      title: ListVariantStoresRequest
      properties:
        filter:
          allOf:
            - $ref: '#/components/schemas/ListVariantStoresFilter'
            - description: A filter to apply to the list.
        ids:
          allOf:
            - $ref: '#/components/schemas/ListVariantStoresRequestIdsList'
            - description: A list of store IDs.
    VariantStoreItems:
      type: array
      items:
        $ref: '#/components/schemas/VariantStoreItem'
    ListWorkflowsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    WorkflowListToken:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    ListWorkflowsRequest:
      type: object
      title: ListWorkflowsRequest
      properties: {}
    WorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowListItem'
    Quote:
      type: string
      minLength: 1
      maxLength: 1
    QuoteAll:
      type: boolean
    Separator:
      type: string
      minLength: 1
      maxLength: 20
    ReadOptions:
      type: object
      properties:
        comment:
          allOf:
            - $ref: '#/components/schemas/CommentChar'
            - description: The file's comment character.
        encoding:
          allOf:
            - $ref: '#/components/schemas/Encoding'
            - description: The file's encoding.
        escape:
          allOf:
            - $ref: '#/components/schemas/EscapeChar'
            - description: A character for escaping quotes in the file.
        escapeQuotes:
          allOf:
            - $ref: '#/components/schemas/EscapeQuotes'
            - description: Whether quotes need to be escaped in the file.
        header:
          allOf:
            - $ref: '#/components/schemas/Header'
            - description: Whether the file has a header row.
        lineSep:
          allOf:
            - $ref: '#/components/schemas/LineSep'
            - description: A line separator for the file.
        quote:
          allOf:
            - $ref: '#/components/schemas/Quote'
            - description: The file's quote character.
        quoteAll:
          allOf:
            - $ref: '#/components/schemas/QuoteAll'
            - description: 'Whether all values need to be quoted, or just those that contain quotes.'
        sep:
          allOf:
            - $ref: '#/components/schemas/Separator'
            - description: The file's field separator.
      description: Read options for an annotation import job.
    ReadSetBatchError:
      type: object
      required:
        - code
        - id
        - message
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error's code.
        id:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The error's ID.
        message:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error's message.
      description: An error from a batch read set operation.
    ReadSetListItem:
      type: object
      required:
        - arn
        - creationTime
        - fileType
        - id
        - sequenceStoreId
        - status
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReadSetArn'
            - description: The read set's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the read set was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReadSetDescription'
            - description: The read set's description.
        fileType:
          allOf:
            - $ref: '#/components/schemas/FileType'
            - description: The read set's file type.
        id:
          allOf:
            - $ref: '#/components/schemas/ReadSetId'
            - description: The read set's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/ReadSetName'
            - description: The read set's name.
        referenceArn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The read set's genome reference ARN.
        sampleId:
          allOf:
            - $ref: '#/components/schemas/SampleId'
            - description: The read set's sample ID.
        sequenceInformation:
          $ref: '#/components/schemas/SequenceInformation'
        sequenceStoreId:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The read set's sequence store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReadSetStatus'
            - description: The read set's status.
        subjectId:
          allOf:
            - $ref: '#/components/schemas/SubjectId'
            - description: The read set's subject ID.
      description: A read set.
    ReferenceListItem:
      type: object
      required:
        - arn
        - creationTime
        - id
        - md5
        - referenceStoreId
        - updateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReferenceArn'
            - description: The reference's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the reference was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceDescription'
            - description: The reference's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ReferenceId'
            - description: The reference's ID.
        md5:
          allOf:
            - $ref: '#/components/schemas/Md5'
            - description: The reference's MD5 checksum.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceName'
            - description: The reference's name.
        referenceStoreId:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The reference's store ID.
        status:
          allOf:
            - $ref: '#/components/schemas/ReferenceStatus'
            - description: The reference's status.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the reference was updated.
      description: A genome reference.
    ReferenceStoreDetail:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/ReferenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
      description: Details about a reference store.
    RunGroupListItem:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunGroupArn'
            - description: The group's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/RunGroupTimestamp'
            - description: When the group was created.
        id:
          allOf:
            - $ref: '#/components/schemas/RunGroupId'
            - description: The group's ID.
        maxCpus:
          allOf:
            - $ref: '#/components/schemas/RunGroupListItemMaxCpusInteger'
            - description: The group's maximum CPU count setting.
        maxDuration:
          allOf:
            - $ref: '#/components/schemas/RunGroupListItemMaxDurationInteger'
            - description: The group's maximum duration setting in minutes.
        maxRuns:
          allOf:
            - $ref: '#/components/schemas/RunGroupListItemMaxRunsInteger'
            - description: The group's maximum concurrent run setting.
        name:
          allOf:
            - $ref: '#/components/schemas/RunGroupName'
            - description: The group's name.
      description: A run group.
    RunGroupListItemMaxCpusInteger:
      type: integer
      minimum: 1
      maximum: 100000
    RunGroupListItemMaxDurationInteger:
      type: integer
      minimum: 1
      maximum: 100000
    RunGroupListItemMaxRunsInteger:
      type: integer
      minimum: 1
      maximum: 100000
    RunListItem:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/RunArn'
            - description: The run's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: When the run was created.
        id:
          allOf:
            - $ref: '#/components/schemas/RunId'
            - description: The run's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/RunName'
            - description: The run's name.
        priority:
          allOf:
            - $ref: '#/components/schemas/RunListItemPriorityInteger'
            - description: The run's priority.
        startTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: When the run started.
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
            - description: The run's status.
        stopTime:
          allOf:
            - $ref: '#/components/schemas/RunTimestamp'
            - description: When the run stopped.
        storageCapacity:
          allOf:
            - $ref: '#/components/schemas/RunListItemStorageCapacityInteger'
            - description: The run's storage capacity.
        workflowId:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The run's workflow ID.
      description: A workflow run.
    RunListItemPriorityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    RunListItemStorageCapacityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    RunRequestId:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
    RunResourceDigest:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 0
      maxLength: 64
    RunResourceDigestKey:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 256
    SchemaValueType:
      type: string
      enum:
        - LONG
        - INT
        - STRING
        - FLOAT
        - DOUBLE
        - BOOLEAN
    SchemaItem:
      type: object
      minProperties: 1
      maxProperties: 1
      additionalProperties:
        $ref: '#/components/schemas/SchemaValueType'
    SchemaItemKeyString:
      type: string
      pattern: '^[a-z0-9_]{1,255}$'
    SequenceStoreDetail:
      type: object
      required:
        - arn
        - creationTime
        - id
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreArn'
            - description: The store's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/SequenceStoreName'
            - description: The store's name.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
      description: Details about a sequence store.
    StartAnnotationImportRequest:
      type: object
      required:
        - destinationName
        - items
        - roleArn
      title: StartAnnotationImportRequest
      properties:
        destinationName:
          allOf:
            - $ref: '#/components/schemas/StoreName'
            - description: A destination annotation store for the job.
        formatOptions:
          allOf:
            - $ref: '#/components/schemas/FormatOptions'
            - description: Formatting options for the annotation file.
        items:
          allOf:
            - $ref: '#/components/schemas/AnnotationImportItemSources'
            - description: Items to import.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: A service role for the job.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
    StartReadSetActivationJobRequestSourcesList:
      type: array
      items:
        $ref: '#/components/schemas/StartReadSetActivationJobSourceItem'
      minItems: 1
      maxItems: 20
    StartReadSetActivationJobRequest:
      type: object
      required:
        - sources
      title: StartReadSetActivationJobRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
        sources:
          allOf:
            - $ref: '#/components/schemas/StartReadSetActivationJobRequestSourcesList'
            - description: The job's source files.
    StartReadSetExportJobRequestSourcesList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSet'
      minItems: 1
      maxItems: 100
    StartReadSetExportJobRequest:
      type: object
      required:
        - destination
        - roleArn
        - sources
      title: StartReadSetExportJobRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
        destination:
          allOf:
            - $ref: '#/components/schemas/S3Destination'
            - description: A location for exported files in Amazon S3.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: A service role for the job.
        sources:
          allOf:
            - $ref: '#/components/schemas/StartReadSetExportJobRequestSourcesList'
            - description: The job's source files.
    StartReadSetImportJobRequestSourcesList:
      type: array
      items:
        $ref: '#/components/schemas/StartReadSetImportJobSourceItem'
      minItems: 1
      maxItems: 100
    StartReadSetImportJobRequest:
      type: object
      required:
        - roleArn
        - sources
      title: StartReadSetImportJobRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: A service role for the job.
        sources:
          allOf:
            - $ref: '#/components/schemas/StartReadSetImportJobRequestSourcesList'
            - description: The job's source files.
    StartReferenceImportJobRequestSourcesList:
      type: array
      items:
        $ref: '#/components/schemas/StartReferenceImportJobSourceItem'
      minItems: 1
      maxItems: 100
    StartReferenceImportJobRequest:
      type: object
      required:
        - roleArn
        - sources
      title: StartReferenceImportJobRequest
      properties:
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - description: 'To ensure that jobs don''t run multiple times, specify a unique token for each job.'
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: A service role for the job.
        sources:
          allOf:
            - $ref: '#/components/schemas/StartReferenceImportJobRequestSourcesList'
            - description: The job's source files.
    StartRunRequestPriorityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    StartRunRequestStorageCapacityInteger:
      type: integer
      minimum: 0
      maximum: 100000
    StartRunRequest:
      type: object
      required:
        - requestId
        - roleArn
      title: StartRunRequest
      properties:
        logLevel:
          allOf:
            - $ref: '#/components/schemas/RunLogLevel'
            - description: A log level for the run.
        name:
          allOf:
            - $ref: '#/components/schemas/RunName'
            - description: A name for the run.
        outputUri:
          allOf:
            - $ref: '#/components/schemas/RunOutputUri'
            - description: An output URI for the run.
        parameters:
          allOf:
            - $ref: '#/components/schemas/RunParameters'
            - description: Parameters for the run.
        priority:
          allOf:
            - $ref: '#/components/schemas/StartRunRequestPriorityInteger'
            - description: A priority for the run.
        requestId:
          allOf:
            - $ref: '#/components/schemas/RunRequestId'
            - description: 'To ensure that requests don''t run multiple times, specify a unique ID for each request.'
        roleArn:
          allOf:
            - $ref: '#/components/schemas/RunRoleArn'
            - description: A service role for the run.
        runGroupId:
          allOf:
            - $ref: '#/components/schemas/RunGroupId'
            - description: The run's group ID.
        runId:
          allOf:
            - $ref: '#/components/schemas/RunId'
            - description: The run's ID.
        storageCapacity:
          allOf:
            - $ref: '#/components/schemas/StartRunRequestStorageCapacityInteger'
            - description: A storage capacity for the run in gigabytes.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Tags for the run.
        workflowId:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The run's workflow ID.
        workflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The run's workflows type.
    VariantImportItemSources:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportItemSource'
      minItems: 1
    StartVariantImportRequest:
      type: object
      required:
        - destinationName
        - items
        - roleArn
      title: StartVariantImportRequest
      properties:
        destinationName:
          allOf:
            - $ref: '#/components/schemas/StoreName'
            - description: The destination variant store for the job.
        items:
          allOf:
            - $ref: '#/components/schemas/VariantImportItemSources'
            - description: Items to import.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: A service role for the job.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 50
    TagResourceRequestTagsMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagResourceRequestTagsMap'
            - description: Tags for the resource.
    TaskListItem:
      type: object
      properties:
        cpus:
          allOf:
            - $ref: '#/components/schemas/TaskListItemCpusInteger'
            - description: The task's CPU count.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: When the task was created.
        memory:
          allOf:
            - $ref: '#/components/schemas/TaskListItemMemoryInteger'
            - description: The task's memory use in gigabyes.
        name:
          allOf:
            - $ref: '#/components/schemas/TaskName'
            - description: The task's name.
        startTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: When the task started.
        status:
          allOf:
            - $ref: '#/components/schemas/TaskStatus'
            - description: The task's status.
        stopTime:
          allOf:
            - $ref: '#/components/schemas/TaskTimestamp'
            - description: When the task stopped.
        taskId:
          allOf:
            - $ref: '#/components/schemas/TaskId'
            - description: The task's ID.
      description: A workflow run task.
    TaskListItemCpusInteger:
      type: integer
      minimum: 1
    TaskListItemMemoryInteger:
      type: integer
      minimum: 1
    TsvStoreOptionsSchemaList:
      type: array
      items:
        $ref: '#/components/schemas/SchemaItem'
      minItems: 1
      maxItems: 5000
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateAnnotationStoreRequest:
      type: object
      title: UpdateAnnotationStoreRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: A description for the store.
    UpdateRunGroupRequestMaxCpusInteger:
      type: integer
      minimum: 1
      maximum: 100000
    UpdateRunGroupRequestMaxDurationInteger:
      type: integer
      minimum: 1
      maximum: 100000
    UpdateRunGroupRequestMaxRunsInteger:
      type: integer
      minimum: 1
      maximum: 100000
    UpdateRunGroupRequest:
      type: object
      title: UpdateRunGroupRequest
      properties:
        maxCpus:
          allOf:
            - $ref: '#/components/schemas/UpdateRunGroupRequestMaxCpusInteger'
            - description: The maximum number of CPUs to use.
        maxDuration:
          allOf:
            - $ref: '#/components/schemas/UpdateRunGroupRequestMaxDurationInteger'
            - description: A maximum run time for the group in minutes.
        maxRuns:
          allOf:
            - $ref: '#/components/schemas/UpdateRunGroupRequestMaxRunsInteger'
            - description: The maximum number of concurrent runs for the group.
        name:
          allOf:
            - $ref: '#/components/schemas/RunGroupName'
            - description: A name for the group.
    UpdateVariantStoreRequest:
      type: object
      title: UpdateVariantStoreRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: A description for the store.
    UpdateWorkflowRequest:
      type: object
      title: UpdateWorkflowRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/WorkflowDescription'
            - description: A description for the workflow.
        name:
          allOf:
            - $ref: '#/components/schemas/WorkflowName'
            - description: A name for the workflow.
    VariantImportItemDetail:
      type: object
      required:
        - jobStatus
        - source
      properties:
        jobStatus:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The item's job status.
        source:
          allOf:
            - $ref: '#/components/schemas/S3Uri'
            - description: The source file's location in Amazon S3.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/JobStatusMsg'
            - description: ' A message that provides additional context about a job '
      description: Details about an imported variant item.
    VariantImportJobItem:
      type: object
      required:
        - creationTime
        - destinationName
        - id
        - roleArn
        - status
        - updateTime
      properties:
        completionTime:
          allOf:
            - $ref: '#/components/schemas/CompletionTime'
            - description: When the job completed.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the job was created.
        destinationName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The job's destination variant store.
        id:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The job's ID.
        roleArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The job's service role ARN.
        runLeftNormalization:
          allOf:
            - $ref: '#/components/schemas/RunLeftNormalization'
            - description: The job's left normalization setting.
        status:
          allOf:
            - $ref: '#/components/schemas/JobStatus'
            - description: The job's status.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the job was updated.
      description: A variant import job.
    VariantStoreItem:
      type: object
      required:
        - creationTime
        - description
        - id
        - name
        - reference
        - sseConfig
        - status
        - statusMessage
        - storeArn
        - storeSizeBytes
        - updateTime
      properties:
        creationTime:
          allOf:
            - $ref: '#/components/schemas/CreationTime'
            - description: When the store was created.
        description:
          allOf:
            - $ref: '#/components/schemas/StoreDescription'
            - description: The store's description.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
            - description: The store's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The store's name.
        reference:
          allOf:
            - $ref: '#/components/schemas/ReferenceItem'
            - description: The store's genome reference.
        sseConfig:
          allOf:
            - $ref: '#/components/schemas/SseConfig'
            - description: The store's server-side encryption (SSE) settings.
        status:
          allOf:
            - $ref: '#/components/schemas/StoreStatus'
            - description: The store's status.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/StatusMessage'
            - description: The store's status message.
        storeArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The store's ARN.
        storeSizeBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The store's size in bytes.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/UpdateTime'
            - description: When the store was updated.
      description: A variant store.
    WorkflowListItem:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/WorkflowArn'
            - description: The workflow's ARN.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/WorkflowTimestamp'
            - description: When the workflow was created.
        digest:
          allOf:
            - $ref: '#/components/schemas/WorkflowDigest'
            - description: The workflow's digest.
        id:
          allOf:
            - $ref: '#/components/schemas/WorkflowId'
            - description: The workflow's ID.
        name:
          allOf:
            - $ref: '#/components/schemas/WorkflowName'
            - description: The workflow's name.
        status:
          allOf:
            - $ref: '#/components/schemas/WorkflowStatus'
            - description: The workflow's status.
        type:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The workflow's type.
      description: A workflow.
    WorkflowParameterDescription:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 0
      maxLength: 256
    WorkflowParameterName:
      type: string
      pattern: '^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$'
      minLength: 1
      maxLength: 128
security:
  - hmac: []
