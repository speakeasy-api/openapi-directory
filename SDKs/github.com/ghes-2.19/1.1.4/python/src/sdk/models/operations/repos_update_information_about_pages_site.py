"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import scim_error as shared_scim_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ReposUpdateInformationAboutPagesSiteRequestBody4Source2Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name and path."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'

class ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteRequestBody4:
    
    https_enforced: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_enforced') }})
    r"""Specify whether HTTPS should be enforced for the repository."""  
    public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan."""  
    source: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""  
    
class ReposUpdateInformationAboutPagesSiteRequestBody3Source2Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name and path."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'

class ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteRequestBody3:
    
    public: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public') }})
    r"""Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan."""  
    https_enforced: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_enforced'), 'exclude': lambda f: f is None }})
    r"""Specify whether HTTPS should be enforced for the repository."""  
    source: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""  
    
class ReposUpdateInformationAboutPagesSiteRequestBody2Source2Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name and path."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'

class ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteRequestBody2:
    
    https_enforced: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_enforced'), 'exclude': lambda f: f is None }})
    r"""Specify whether HTTPS should be enforced for the repository."""  
    public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan."""  
    source: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""  
    
class ReposUpdateInformationAboutPagesSiteRequestBody1Source2Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name and path."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'

class ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum(str, Enum):
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""
    GH_PAGES = 'gh-pages'
    MASTER = 'master'
    MASTER_DOCS = 'master /docs'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteRequestBody1:
    
    source: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\\"gh-pages\\"`, `\\"master\\"`, and `\\"master /docs\\"`."""  
    https_enforced: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('https_enforced'), 'exclude': lambda f: f is None }})
    r"""Specify whether HTTPS should be enforced for the repository."""  
    public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan."""  
    

@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: Any = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposUpdateInformationAboutPagesSiteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    