/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * &#128679; Deprecated since v4.11.0
 *
 * @remarks
 *
 * Classification ID:
 *
 * * `1` - public
 *
 * * `2` - internal
 *
 * * `3` - confidential
 *
 * * `4` - strictly confidential
 *
 *
 *
 * (default: classification from parent room)
 */
export enum DownloadShareClassificationEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Download Share information
 */
export class DownloadShare extends SpeakeasyBase {
  /**
   * Share access key to generate secure link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessKey" })
  accessKey: string;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * Classification ID:
   *
   * * `1` - public
   *
   * * `2` - internal
   *
   * * `3` - confidential
   *
   * * `4` - strictly confidential
   *
   *
   *
   * (default: classification from parent room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: DownloadShareClassificationEnum;

  /**
   * Downloads counter (incremented on each download)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntDownloads" })
  cntDownloads: number;

  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy: UserInfo;

  /**
   * Path to shared download node
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataUrl" })
  dataUrl?: string;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt?: Date;

  /**
   * Share ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Internal notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internalNotes" })
  internalNotes?: string;

  /**
   * Encrypted share
   *
   * @remarks
   *
   * (this only applies to shared files, not folders)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncrypted" })
  isEncrypted?: boolean;

  /**
   * Is share protected by password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isProtected" })
  isProtected?: boolean;

  /**
   * Max allowed downloads
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxDownloads" })
  maxDownloads?: number;

  /**
   * Alias name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Source node ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeId" })
  nodeId: number;

  /**
   * Path to shared download node
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodePath" })
  nodePath?: string;

  /**
   * Node type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeType" })
  nodeType?: string;

  /**
   * User notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * &#128679; Deprecated since v4.20.0
   *
   * @remarks
   *
   * Notify creator on every download.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyCreator" })
  notifyCreator: boolean;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * CSV string of recipient email addresses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipients" })
  recipients?: string;

  /**
   * Show creator first and last name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showCreatorName" })
  showCreatorName?: boolean;

  /**
   * Show creator email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showCreatorUsername" })
  showCreatorUsername?: boolean;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * CSV string of recipient MSISDNs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsRecipients" })
  smsRecipients?: string;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;
}
