"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Timeline:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def mirror_timeline_attachments_delete(self, request: operations.MirrorTimelineAttachmentsDeleteRequest, security: operations.MirrorTimelineAttachmentsDeleteSecurity) -> operations.MirrorTimelineAttachmentsDeleteResponse:
        r"""Deletes an attachment from a timeline item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineAttachmentsDeleteRequest, base_url, '/timeline/{itemId}/attachments/{attachmentId}', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineAttachmentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineAttachmentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def mirror_timeline_attachments_get(self, request: operations.MirrorTimelineAttachmentsGetRequest, security: operations.MirrorTimelineAttachmentsGetSecurity) -> operations.MirrorTimelineAttachmentsGetResponse:
        r"""Retrieves an attachment on a timeline item by item ID and attachment ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineAttachmentsGetRequest, base_url, '/timeline/{itemId}/attachments/{attachmentId}', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineAttachmentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineAttachmentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_attachments_insert(self, request: operations.MirrorTimelineAttachmentsInsertRequest, security: operations.MirrorTimelineAttachmentsInsertSecurity) -> operations.MirrorTimelineAttachmentsInsertResponse:
        r"""Adds a new attachment to a timeline item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineAttachmentsInsertRequest, base_url, '/timeline/{itemId}/attachments', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineAttachmentsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineAttachmentsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_attachments_list(self, request: operations.MirrorTimelineAttachmentsListRequest, security: operations.MirrorTimelineAttachmentsListSecurity) -> operations.MirrorTimelineAttachmentsListResponse:
        r"""Returns a list of attachments for a timeline item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineAttachmentsListRequest, base_url, '/timeline/{itemId}/attachments', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineAttachmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineAttachmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_delete(self, request: operations.MirrorTimelineDeleteRequest, security: operations.MirrorTimelineDeleteSecurity) -> operations.MirrorTimelineDeleteResponse:
        r"""Deletes a timeline item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineDeleteRequest, base_url, '/timeline/{id}', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def mirror_timeline_get(self, request: operations.MirrorTimelineGetRequest, security: operations.MirrorTimelineGetSecurity) -> operations.MirrorTimelineGetResponse:
        r"""Gets a single timeline item by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineGetRequest, base_url, '/timeline/{id}', request)
        
        query_params = utils.get_query_params(operations.MirrorTimelineGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_insert(self, request: operations.MirrorTimelineInsertRequest, security: operations.MirrorTimelineInsertSecurity) -> operations.MirrorTimelineInsertResponse:
        r"""Inserts a new item into the timeline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/timeline'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorTimelineInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_list(self, request: operations.MirrorTimelineListRequest, security: operations.MirrorTimelineListSecurity) -> operations.MirrorTimelineListResponse:
        r"""Retrieves a list of timeline items for the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/timeline'
        
        query_params = utils.get_query_params(operations.MirrorTimelineListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_patch(self, request: operations.MirrorTimelinePatchRequest, security: operations.MirrorTimelinePatchSecurity) -> operations.MirrorTimelinePatchResponse:
        r"""Updates a timeline item in place. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelinePatchRequest, base_url, '/timeline/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "timeline_item", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorTimelinePatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelinePatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_timeline_update(self, request: operations.MirrorTimelineUpdateRequest, security: operations.MirrorTimelineUpdateSecurity) -> operations.MirrorTimelineUpdateResponse:
        r"""Updates a timeline item in place."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorTimelineUpdateRequest, base_url, '/timeline/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorTimelineUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorTimelineUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    