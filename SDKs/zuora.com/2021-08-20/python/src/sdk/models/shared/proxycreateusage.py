"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyCreateUsage:
    r"""Container for custom fields of a Usage object."""
    
    quantity: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity') }})
    r"""Indicates the number of units used.
    **Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0
    """  
    start_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.
    **Character limit**: 29 **Values**: a valid date and time value
    """  
    uom: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UOM') }})
    r"""Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    **Character limit**: **Values**: a valid unit of measure
    """  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the account associated with the usage data. This field is only required if no value is specified for the `AccountNumber` field.
    **Character limit**: 32 **Values**: a valid account ID.
    """  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the account associated with the usage data. This field is only required if no value is specified for the `AccountId` field.
    **Character limit**: 50 **Values**: a valid account number.
    """  
    charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeId'), 'exclude': lambda f: f is None }})
    r"""The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID."""  
    charge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeNumber'), 'exclude': lambda f: f is None }})
    r"""A unique number for the rate plan charge related to the usage record. For example, C-00000007."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""A description of the usage record."""  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.
    **Character limit**: 29 **Values**: a valid date and time value.
    """  
    submission_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubmissionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when usage was submitted.
    **Character limit**: 29 **Values**: automatically generated
    """  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription that contains the fees related to the usage data.
    
    The ID of a subscription might change when you create amendments to the subscription. It is good practice to use the unique subscription number that you can specify in the `SubscriptionNumber` field.
    """  
    subscription_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identifier number of the subscription that contains the fees related to the usage data.
    
    It is good practice to use this field when creating usage records.
    """  
    