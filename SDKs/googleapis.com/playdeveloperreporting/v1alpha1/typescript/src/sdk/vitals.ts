/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Vitals {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Searches all error issues in which reports have been grouped.
   */
  playdeveloperreportingVitalsErrorsIssuesSearch(
    req: operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest,
    security: operations.PlaydeveloperreportingVitalsErrorsIssuesSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/errorIssues:search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PlaydeveloperreportingVitalsErrorsIssuesSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse =
        new operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googlePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Searches all error reports received for an app.
   */
  playdeveloperreportingVitalsErrorsReportsSearch(
    req: operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest,
    security: operations.PlaydeveloperreportingVitalsErrorsReportsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/errorReports:search",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PlaydeveloperreportingVitalsErrorsReportsSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse =
        new operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googlePlayDeveloperReportingV1alpha1SearchErrorReportsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Describes the properties of the metric set.
   */
  playdeveloperreportingVitalsStuckbackgroundwakelockrateGet(
    req: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest,
    security: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googlePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet =
              utils.objectToClass(
                httpRes?.data,
                shared.GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Queries the metrics in the metric set.
   */
  playdeveloperreportingVitalsStuckbackgroundwakelockrateQuery(
    req: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest,
    security: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQuerySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:query",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQuerySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse =
        new operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
