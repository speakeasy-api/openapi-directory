// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAssociatedStacksXAmzTargetEnum
type ListAssociatedStacksXAmzTargetEnum string

const (
	ListAssociatedStacksXAmzTargetEnumPhotonAdminProxyServiceListAssociatedStacks ListAssociatedStacksXAmzTargetEnum = "PhotonAdminProxyService.ListAssociatedStacks"
)

func (e ListAssociatedStacksXAmzTargetEnum) ToPointer() *ListAssociatedStacksXAmzTargetEnum {
	return &e
}

func (e *ListAssociatedStacksXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.ListAssociatedStacks":
		*e = ListAssociatedStacksXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAssociatedStacksXAmzTargetEnum: %v", v)
	}
}

type ListAssociatedStacksRequest struct {
	ListAssociatedStacksRequest shared.ListAssociatedStacksRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  ListAssociatedStacksXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAssociatedStacksResponse struct {
	ContentType string
	// Success
	ListAssociatedStacksResult *shared.ListAssociatedStacksResult
	StatusCode                 int
	RawResponse                *http.Response
}
