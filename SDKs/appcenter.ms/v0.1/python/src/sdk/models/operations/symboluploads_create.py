"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SymbolUploadsCreateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class SymbolUploadsCreateRequestBodySymbolTypeEnum(str, Enum):
    r"""The type of the symbol for the current symbol upload"""
    APPLE = 'Apple'
    JAVA_SCRIPT = 'JavaScript'
    BREAKPAD = 'Breakpad'
    ANDROID_PROGUARD = 'AndroidProguard'
    UWP = 'UWP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsCreateRequestBody:
    r"""A request containing information pertaining to starting a symbol upload process"""
    
    symbol_type: SymbolUploadsCreateRequestBodySymbolTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_type') }})
    r"""The type of the symbol for the current symbol upload"""  
    build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""The build number. Optional for Apple. Required for Android."""  
    client_callback: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_callback'), 'exclude': lambda f: f is None }})
    r"""The callback URL that the client can optionally provide to get status updates for the current symbol upload"""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name'), 'exclude': lambda f: f is None }})
    r"""The file name for the symbol upload"""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version number. Optional for Apple. Required for Android."""  
    

@dataclasses.dataclass
class SymbolUploadsCreateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: SymbolUploadsCreateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The symbol information"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsCreate500ApplicationJSON:
    r"""Internal error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsCreate403ApplicationJSON:
    r"""Unauthorized"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsCreate400ApplicationJSON:
    r"""Bad request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsCreate200ApplicationJSON:
    r"""A response containing information pertaining to starting a symbol upload process"""
    
    expiration_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Describes how long the upload_url is valid"""  
    symbol_upload_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_upload_id') }})
    r"""The id for the current upload"""  
    upload_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_url') }})
    r"""The URL where the client needs to upload the symbol blob to"""  
    

@dataclasses.dataclass
class SymbolUploadsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    symbol_uploads_create_200_application_json_object: Optional[SymbolUploadsCreate200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    symbol_uploads_create_400_application_json_object: Optional[SymbolUploadsCreate400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad request"""  
    symbol_uploads_create_403_application_json_object: Optional[SymbolUploadsCreate403ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    symbol_uploads_create_500_application_json_object: Optional[SymbolUploadsCreate500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal error"""  
    