// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceStateEnum - Whether or not the service has been enabled for use by the consumer.
type ServiceStateEnum string

const (
	ServiceStateEnumStateUnspecified ServiceStateEnum = "STATE_UNSPECIFIED"
	ServiceStateEnumDisabled         ServiceStateEnum = "DISABLED"
	ServiceStateEnumEnabled          ServiceStateEnum = "ENABLED"
)

func (e ServiceStateEnum) ToPointer() *ServiceStateEnum {
	return &e
}

func (e *ServiceStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ENABLED":
		*e = ServiceStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceStateEnum: %v", v)
	}
}

// Service - A service that is available for use by the consumer.
type Service struct {
	// The configuration of the service.
	Config *ServiceConfig `json:"config,omitempty"`
	// The resource name of the consumer and service. A valid name would be: - `projects/123/services/serviceusage.googleapis.com`
	Name *string `json:"name,omitempty"`
	// The resource name of the consumer. A valid name would be: - `projects/123`
	Parent *string `json:"parent,omitempty"`
	// Whether or not the service has been enabled for use by the consumer.
	State *ServiceStateEnum `json:"state,omitempty"`
}
