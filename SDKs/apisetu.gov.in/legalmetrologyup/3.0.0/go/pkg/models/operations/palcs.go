// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PalcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PalcsRequestBodyCertificateParameters struct {
	// Application No.
	ApplicationNo string `json:"applicationNo"`
	// License No.
	LicenseNo string `json:"licenseNo"`
}

// PalcsRequestBodyFormatEnum - The format of the certificate in response.
type PalcsRequestBodyFormatEnum string

const (
	PalcsRequestBodyFormatEnumPdf PalcsRequestBodyFormatEnum = "pdf"
)

func (e *PalcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PalcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PalcsRequestBodyFormatEnum: %s", s)
	}
}

// PalcsRequestBody - Request format
type PalcsRequestBody struct {
	CertificateParameters *PalcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PalcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Palcs504ApplicationJSONErrorEnum string

const (
	Palcs504ApplicationJSONErrorEnumGatewayTimeout Palcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Palcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Palcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs504ApplicationJSONErrorDescriptionEnum string

const (
	Palcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Palcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Palcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Palcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs504ApplicationJSON - Gateway timeout
type Palcs504ApplicationJSON struct {
	Error            *Palcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs503ApplicationJSONErrorEnum string

const (
	Palcs503ApplicationJSONErrorEnumServiceUnavailable Palcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Palcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Palcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs503ApplicationJSONErrorDescriptionEnum string

const (
	Palcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Palcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Palcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Palcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs503ApplicationJSON - Service unavailable
type Palcs503ApplicationJSON struct {
	Error            *Palcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs502ApplicationJSONErrorEnum string

const (
	Palcs502ApplicationJSONErrorEnumBadGatewy Palcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Palcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Palcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs502ApplicationJSONErrorDescriptionEnum string

const (
	Palcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Palcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Palcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Palcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs502ApplicationJSON - Bad gateway
type Palcs502ApplicationJSON struct {
	Error            *Palcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs500ApplicationJSONErrorEnum string

const (
	Palcs500ApplicationJSONErrorEnumInternalServerError Palcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Palcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Palcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs500ApplicationJSONErrorDescriptionEnum string

const (
	Palcs500ApplicationJSONErrorDescriptionEnumInternalServerError Palcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Palcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Palcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs500ApplicationJSON - Internal server error
type Palcs500ApplicationJSON struct {
	Error            *Palcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs404ApplicationJSONErrorEnum string

const (
	Palcs404ApplicationJSONErrorEnumRecordNotFound Palcs404ApplicationJSONErrorEnum = "record_not_found"
	Palcs404ApplicationJSONErrorEnumURLNotFound    Palcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Palcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Palcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs404ApplicationJSONErrorDescriptionEnum string

const (
	Palcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Palcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Palcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Palcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Palcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Palcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs404ApplicationJSON - No record found
type Palcs404ApplicationJSON struct {
	Error            *Palcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs401ApplicationJSONErrorEnum string

const (
	Palcs401ApplicationJSONErrorEnumInvalidAuthentication Palcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Palcs401ApplicationJSONErrorEnumInvalidAuthorization  Palcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Palcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Palcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs401ApplicationJSONErrorDescriptionEnum string

const (
	Palcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Palcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Palcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Palcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Palcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Palcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs401ApplicationJSON - Unauthorized access
type Palcs401ApplicationJSON struct {
	Error            *Palcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Palcs400ApplicationJSONErrorEnum string

const (
	Palcs400ApplicationJSONErrorEnumMissingParameter Palcs400ApplicationJSONErrorEnum = "missing_parameter"
	Palcs400ApplicationJSONErrorEnumInvalidParameter Palcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Palcs400ApplicationJSONErrorEnumInvalidFormat    Palcs400ApplicationJSONErrorEnum = "invalid_format"
	Palcs400ApplicationJSONErrorEnumInvalidTxnid     Palcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Palcs400ApplicationJSONErrorEnumInvalidConsentid Palcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Palcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Palcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Palcs400ApplicationJSONErrorDescriptionEnum string

const (
	Palcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Palcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Palcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Palcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Palcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Palcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Palcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Palcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Palcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Palcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Palcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Palcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Palcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Palcs400ApplicationJSON - Bad request
type Palcs400ApplicationJSON struct {
	Error            *Palcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Palcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PalcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Palcs400ApplicationJSONObject *Palcs400ApplicationJSON
	// Unauthorized access
	Palcs401ApplicationJSONObject *Palcs401ApplicationJSON
	// No record found
	Palcs404ApplicationJSONObject *Palcs404ApplicationJSON
	// Internal server error
	Palcs500ApplicationJSONObject *Palcs500ApplicationJSON
	// Bad gateway
	Palcs502ApplicationJSONObject *Palcs502ApplicationJSON
	// Service unavailable
	Palcs503ApplicationJSONObject *Palcs503ApplicationJSON
	// Gateway timeout
	Palcs504ApplicationJSONObject *Palcs504ApplicationJSON
}
