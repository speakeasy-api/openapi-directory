// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BrlcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BrlcsRequestBodyCertificateParameters struct {
	// Certificate Number
	CertificateNumber string `json:"CertificateNumber"`
}

// BrlcsRequestBodyFormatEnum - The format of the certificate in response.
type BrlcsRequestBodyFormatEnum string

const (
	BrlcsRequestBodyFormatEnumPdf BrlcsRequestBodyFormatEnum = "pdf"
)

func (e *BrlcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = BrlcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BrlcsRequestBodyFormatEnum: %s", s)
	}
}

// BrlcsRequestBody - Request format
type BrlcsRequestBody struct {
	CertificateParameters *BrlcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BrlcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Brlcs504ApplicationJSONErrorEnum string

const (
	Brlcs504ApplicationJSONErrorEnumGatewayTimeout Brlcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Brlcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Brlcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs504ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Brlcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Brlcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Brlcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs504ApplicationJSON - Gateway timeout
type Brlcs504ApplicationJSON struct {
	Error            *Brlcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs503ApplicationJSONErrorEnum string

const (
	Brlcs503ApplicationJSONErrorEnumServiceUnavailable Brlcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Brlcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Brlcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs503ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Brlcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Brlcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Brlcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs503ApplicationJSON - Service unavailable
type Brlcs503ApplicationJSON struct {
	Error            *Brlcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs502ApplicationJSONErrorEnum string

const (
	Brlcs502ApplicationJSONErrorEnumBadGatewy Brlcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Brlcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Brlcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs502ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Brlcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Brlcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Brlcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs502ApplicationJSON - Bad gateway
type Brlcs502ApplicationJSON struct {
	Error            *Brlcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs500ApplicationJSONErrorEnum string

const (
	Brlcs500ApplicationJSONErrorEnumInternalServerError Brlcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Brlcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Brlcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs500ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs500ApplicationJSONErrorDescriptionEnumInternalServerError Brlcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Brlcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Brlcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs500ApplicationJSON - Internal server error
type Brlcs500ApplicationJSON struct {
	Error            *Brlcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs404ApplicationJSONErrorEnum string

const (
	Brlcs404ApplicationJSONErrorEnumRecordNotFound Brlcs404ApplicationJSONErrorEnum = "record_not_found"
	Brlcs404ApplicationJSONErrorEnumURLNotFound    Brlcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Brlcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Brlcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs404ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Brlcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Brlcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Brlcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Brlcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Brlcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs404ApplicationJSON - No record found
type Brlcs404ApplicationJSON struct {
	Error            *Brlcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs401ApplicationJSONErrorEnum string

const (
	Brlcs401ApplicationJSONErrorEnumInvalidAuthentication Brlcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Brlcs401ApplicationJSONErrorEnumInvalidAuthorization  Brlcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Brlcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Brlcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs401ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Brlcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Brlcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Brlcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Brlcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Brlcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs401ApplicationJSON - Unauthorized access
type Brlcs401ApplicationJSON struct {
	Error            *Brlcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Brlcs400ApplicationJSONErrorEnum string

const (
	Brlcs400ApplicationJSONErrorEnumMissingParameter Brlcs400ApplicationJSONErrorEnum = "missing_parameter"
	Brlcs400ApplicationJSONErrorEnumInvalidParameter Brlcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Brlcs400ApplicationJSONErrorEnumInvalidFormat    Brlcs400ApplicationJSONErrorEnum = "invalid_format"
	Brlcs400ApplicationJSONErrorEnumInvalidTxnid     Brlcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Brlcs400ApplicationJSONErrorEnumInvalidConsentid Brlcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Brlcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Brlcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Brlcs400ApplicationJSONErrorDescriptionEnum string

const (
	Brlcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Brlcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Brlcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Brlcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Brlcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Brlcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Brlcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Brlcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Brlcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Brlcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Brlcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Brlcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Brlcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Brlcs400ApplicationJSON - Bad request
type Brlcs400ApplicationJSON struct {
	Error            *Brlcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Brlcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BrlcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Brlcs400ApplicationJSONObject *Brlcs400ApplicationJSON
	// Unauthorized access
	Brlcs401ApplicationJSONObject *Brlcs401ApplicationJSON
	// No record found
	Brlcs404ApplicationJSONObject *Brlcs404ApplicationJSON
	// Internal server error
	Brlcs500ApplicationJSONObject *Brlcs500ApplicationJSON
	// Bad gateway
	Brlcs502ApplicationJSONObject *Brlcs502ApplicationJSON
	// Service unavailable
	Brlcs503ApplicationJSONObject *Brlcs503ApplicationJSON
	// Gateway timeout
	Brlcs504ApplicationJSONObject *Brlcs504ApplicationJSON
}
