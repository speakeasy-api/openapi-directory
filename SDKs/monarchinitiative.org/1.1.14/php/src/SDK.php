<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - API integration layer for linked biological objects.
 * 
 * 
 *  __Source:__ https://github.com/biolink/biolink-api/
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'/api',
	];
  	
    /**
     * Retrieve associations between entities or entity and descriptors
     * 
     * @var Association $$association
     */
	public Association $association;
	
    /**
     * Retrieval of domain entities plus associations
     * 
     * @var Bioentity $$bioentity
     */
	public Bioentity $bioentity;
	
    /**
     * Operations over sets of entities
     * 
     * @var Bioentityset $$bioentityset
     */
	public Bioentityset $bioentityset;
	
    /**
     * Map gene IDs to their homologs
     * 
     * @var BioentitysetHomologs $$bioentitysetHomologs
     */
	public BioentitysetHomologs $bioentitysetHomologs;
	
    /**
     * maps a set of entities to a slim
     * 
     * @var BioentitysetSlimmer $$bioentitysetSlimmer
     */
	public BioentitysetSlimmer $bioentitysetSlimmer;
	
    /**
     * Operations on GO Causal Activity Models (GO-CAMs)
     * 
     * @var Cam $$cam
     */
	public Cam $cam;
	
    /**
     * Operations on evidence graphs
     * 
     * @var EvidenceGraph $$evidenceGraph
     */
	public EvidenceGraph $evidenceGraph;
	
    /**
     * Operations to retrieve sequence features
     * 
     * @var GenomeFeatures $$genomeFeatures
     */
	public GenomeFeatures $genomeFeatures;
	
    /**
     * Operations over data graphs
     * 
     * @var Graph $$graph
     */
	public Graph $graph;
	
    /**
     * mapping and resolution of identifiers
     * 
     * @var IdentifierMapper $$identifierMapper
     */
	public IdentifierMapper $identifierMapper;
	
    /**
     * identifier prefixes
     * 
     * @var IdentifierPrefixes $$identifierPrefixes
     */
	public IdentifierPrefixes $identifierPrefixes;
	
    /**
     * Individual humans (including patients), or organisms
     * 
     * @var Individual $$individual
     */
	public Individual $individual;
	
    /**
     * Perform bulk operations
     * 
     * @var Mart $$mart
     */
	public Mart $mart;
	
    /**
     * Get metadata
     * 
     * @var Metadata $$metadata
     */
	public Metadata $metadata;
	
    /**
     * Match patients with similar diseases and non-human genes based on their phenotypes
     * 
     * @var Mme $$mme
     */
	public Mme $mme;
	
    /**
     * annotate text using named entities
     * 
     * @var NlpAnnotate $$nlpAnnotate
     */
	public NlpAnnotate $nlpAnnotate;
	
    /**
     * extract a subgraph from an ontology
     * 
     * @var Ontol $$ontol
     */
	public Ontol $ontol;
	
    /**
     * Retrieve IDs for labels
     * 
     * @var OntolIdentifier $$ontolIdentifier
     */
	public OntolIdentifier $ontolIdentifier;
	
    /**
     * Assign labels to IDs
     * 
     * @var OntolLabeler $$ontolLabeler
     */
	public OntolLabeler $ontolLabeler;
	
    /**
     * Operations on Ontology Terms and Subsets
     * 
     * @var Ontology $$ontology
     */
	public Ontology $ontology;
	
    /**
     * OWL-level operations on an ontology
     * 
     * @var OwlOntology $$owlOntology
     */
	public OwlOntology $owlOntology;
	
    /**
     * pairwise similarity between two entities
     * 
     * @var PairSim $$pairSim
     */
	public PairSim $pairSim;
	
    /**
     * Usage of different relationship types
     * 
     * @var RelationUsage $$relationUsage
     */
	public RelationUsage $relationUsage;
	
    /**
     * Search for entities
     * 
     * @var Search $$search
     */
	public Search $search;
	
    /**
     * Perform semantic similarity, ranking, and sufficiency scoring
     * 
     * @var Sim $$sim
     */
	public Sim $sim;
	
    /**
     * Operations related to sets of variants
     * 
     * @var VariationSet $$variationSet
     */
	public VariationSet $variationSet;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->association = new Association(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bioentity = new Bioentity(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bioentityset = new Bioentityset(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bioentitysetHomologs = new BioentitysetHomologs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bioentitysetSlimmer = new BioentitysetSlimmer(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->cam = new Cam(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->evidenceGraph = new EvidenceGraph(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->genomeFeatures = new GenomeFeatures(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->graph = new Graph(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->identifierMapper = new IdentifierMapper(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->identifierPrefixes = new IdentifierPrefixes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individual = new Individual(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->mart = new Mart(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->metadata = new Metadata(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->mme = new Mme(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->nlpAnnotate = new NlpAnnotate(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->ontol = new Ontol(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->ontolIdentifier = new OntolIdentifier(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->ontolLabeler = new OntolLabeler(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->ontology = new Ontology(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->owlOntology = new OwlOntology(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->pairSim = new PairSim(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->relationUsage = new RelationUsage(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->search = new Search(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->sim = new Sim(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->variationSet = new VariationSet(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}