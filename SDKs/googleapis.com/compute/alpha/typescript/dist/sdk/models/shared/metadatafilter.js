"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataFilter = exports.MetadataFilterFilterMatchCriteriaEnum = void 0;
var utils_1 = require("../../../internal/utils");
var metadatafilterlabelmatch_1 = require("./metadatafilterlabelmatch");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata.
 */
var MetadataFilterFilterMatchCriteriaEnum;
(function (MetadataFilterFilterMatchCriteriaEnum) {
    MetadataFilterFilterMatchCriteriaEnum["MatchAll"] = "MATCH_ALL";
    MetadataFilterFilterMatchCriteriaEnum["MatchAny"] = "MATCH_ANY";
    MetadataFilterFilterMatchCriteriaEnum["NotSet"] = "NOT_SET";
})(MetadataFilterFilterMatchCriteriaEnum = exports.MetadataFilterFilterMatchCriteriaEnum || (exports.MetadataFilterFilterMatchCriteriaEnum = {}));
/**
 * Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
 */
var MetadataFilter = /** @class */ (function (_super) {
    __extends(MetadataFilter, _super);
    function MetadataFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: metadatafilterlabelmatch_1.MetadataFilterLabelMatch }),
        (0, class_transformer_1.Expose)({ name: "filterLabels" }),
        (0, class_transformer_1.Type)(function () { return metadatafilterlabelmatch_1.MetadataFilterLabelMatch; }),
        __metadata("design:type", Array)
    ], MetadataFilter.prototype, "filterLabels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "filterMatchCriteria" }),
        __metadata("design:type", String)
    ], MetadataFilter.prototype, "filterMatchCriteria", void 0);
    return MetadataFilter;
}(utils_1.SpeakeasyBase));
exports.MetadataFilter = MetadataFilter;
