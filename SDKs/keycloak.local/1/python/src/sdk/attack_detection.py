"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class AttackDetection:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_attack_detection_brute_force_users(self, request: operations.DeleteRealmAttackDetectionBruteForceUsersRequest) -> operations.DeleteRealmAttackDetectionBruteForceUsersResponse:
        r"""Clear any user login failures for all users   This can release temporary disabled users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAttackDetectionBruteForceUsersRequest, base_url, '/{realm}/attack-detection/brute-force/users', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAttackDetectionBruteForceUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_attack_detection_brute_force_users_user_id_(self, request: operations.DeleteRealmAttackDetectionBruteForceUsersUserIDRequest) -> operations.DeleteRealmAttackDetectionBruteForceUsersUserIDResponse:
        r"""Clear any user login failures for the user   This can release temporary disabled user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAttackDetectionBruteForceUsersUserIDRequest, base_url, '/{realm}/attack-detection/brute-force/users/{userId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAttackDetectionBruteForceUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_attack_detection_brute_force_users_user_id_(self, request: operations.GetRealmAttackDetectionBruteForceUsersUserIDRequest) -> operations.GetRealmAttackDetectionBruteForceUsersUserIDResponse:
        r"""Get status of a username in brute force detection"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAttackDetectionBruteForceUsersUserIDRequest, base_url, '/{realm}/attack-detection/brute-force/users/{userId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAttackDetectionBruteForceUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_realm_attack_detection_brute_force_users_user_id_2_xx_application_json_object = out

        return res

    