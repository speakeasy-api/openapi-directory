<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Argument - Input/output argument of a function or a stored procedure.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Argument
{
    /**
     * Optional. Defaults to FIXED_TYPE.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ArgumentArgumentKindEnum $argumentKind
     */
	#[\JMS\Serializer\Annotation\SerializedName('argumentKind')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ArgumentArgumentKindEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ArgumentArgumentKindEnum $argumentKind = null;
    
    /**
     * The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StandardSqlDataType $dataType
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataType')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StandardSqlDataType')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StandardSqlDataType $dataType = null;
    
    /**
     * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ArgumentModeEnum $mode
     */
	#[\JMS\Serializer\Annotation\SerializedName('mode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ArgumentModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ArgumentModeEnum $mode = null;
    
    /**
     * Optional. The name of this argument. Can be absent for function return argument.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	public function __construct()
	{
		$this->argumentKind = null;
		$this->dataType = null;
		$this->mode = null;
		$this->name = null;
	}
}
