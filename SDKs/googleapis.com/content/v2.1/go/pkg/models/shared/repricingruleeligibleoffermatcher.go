// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RepricingRuleEligibleOfferMatcherMatcherOptionEnum - Determines whether to use the custom matchers or the product feed attribute "repricing_rule_id" to specify offer-rule mapping.
type RepricingRuleEligibleOfferMatcherMatcherOptionEnum string

const (
	RepricingRuleEligibleOfferMatcherMatcherOptionEnumMatcherOptionUnspecified      RepricingRuleEligibleOfferMatcherMatcherOptionEnum = "MATCHER_OPTION_UNSPECIFIED"
	RepricingRuleEligibleOfferMatcherMatcherOptionEnumMatcherOptionCustomFilter     RepricingRuleEligibleOfferMatcherMatcherOptionEnum = "MATCHER_OPTION_CUSTOM_FILTER"
	RepricingRuleEligibleOfferMatcherMatcherOptionEnumMatcherOptionUseFeedAttribute RepricingRuleEligibleOfferMatcherMatcherOptionEnum = "MATCHER_OPTION_USE_FEED_ATTRIBUTE"
	RepricingRuleEligibleOfferMatcherMatcherOptionEnumMatcherOptionAllProducts      RepricingRuleEligibleOfferMatcherMatcherOptionEnum = "MATCHER_OPTION_ALL_PRODUCTS"
)

func (e *RepricingRuleEligibleOfferMatcherMatcherOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MATCHER_OPTION_UNSPECIFIED":
		fallthrough
	case "MATCHER_OPTION_CUSTOM_FILTER":
		fallthrough
	case "MATCHER_OPTION_USE_FEED_ATTRIBUTE":
		fallthrough
	case "MATCHER_OPTION_ALL_PRODUCTS":
		*e = RepricingRuleEligibleOfferMatcherMatcherOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RepricingRuleEligibleOfferMatcherMatcherOptionEnum: %s", s)
	}
}

// RepricingRuleEligibleOfferMatcher - Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
type RepricingRuleEligibleOfferMatcher struct {
	// Matcher by string attributes.
	BrandMatcher *RepricingRuleEligibleOfferMatcherStringMatcher `json:"brandMatcher,omitempty"`
	// Matcher by string attributes.
	ItemGroupIDMatcher *RepricingRuleEligibleOfferMatcherStringMatcher `json:"itemGroupIdMatcher,omitempty"`
	// Determines whether to use the custom matchers or the product feed attribute "repricing_rule_id" to specify offer-rule mapping.
	MatcherOption *RepricingRuleEligibleOfferMatcherMatcherOptionEnum `json:"matcherOption,omitempty"`
	// Matcher by string attributes.
	OfferIDMatcher *RepricingRuleEligibleOfferMatcherStringMatcher `json:"offerIdMatcher,omitempty"`
	// When true, the rule won't be applied to offers with active promotions.
	SkipWhenOnPromotion *bool `json:"skipWhenOnPromotion,omitempty"`
}
