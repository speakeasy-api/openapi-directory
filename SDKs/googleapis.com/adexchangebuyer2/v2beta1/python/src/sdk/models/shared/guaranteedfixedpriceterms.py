"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import priceperbuyer as shared_priceperbuyer
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GuaranteedFixedPriceTermsReservationTypeEnum(str, Enum):
    r"""The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD."""
    RESERVATION_TYPE_UNSPECIFIED = 'RESERVATION_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    SPONSORSHIP = 'SPONSORSHIP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GuaranteedFixedPriceTerms:
    r"""Terms for Programmatic Guaranteed Deals."""
    
    fixed_prices: Optional[list[shared_priceperbuyer.PricePerBuyer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedPrices'), 'exclude': lambda f: f is None }})
    r"""Fixed price for the specified buyer."""  
    guaranteed_impressions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedImpressions'), 'exclude': lambda f: f is None }})
    r"""Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy."""  
    guaranteed_looks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedLooks'), 'exclude': lambda f: f is None }})
    r"""Count of guaranteed looks. Required for deal, optional for product."""  
    impression_cap: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionCap'), 'exclude': lambda f: f is None }})
    r"""The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached."""  
    minimum_daily_looks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumDailyLooks'), 'exclude': lambda f: f is None }})
    r"""Daily minimum looks for CPD deal types."""  
    percent_share_of_voice: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentShareOfVoice'), 'exclude': lambda f: f is None }})
    r"""For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached."""  
    reservation_type: Optional[GuaranteedFixedPriceTermsReservationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservationType'), 'exclude': lambda f: f is None }})
    r"""The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD."""  
    