// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HookEventTypeEnum - Entity events you want to be notified. If all is selected, there is no need to enter actions
type HookEventTypeEnum string

const (
	HookEventTypeEnumAll   HookEventTypeEnum = "all"
	HookEventTypeEnumCheck HookEventTypeEnum = "check"
)

func (e HookEventTypeEnum) ToPointer() *HookEventTypeEnum {
	return &e
}

func (e *HookEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "check":
		*e = HookEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HookEventTypeEnum: %v", v)
	}
}

// HookStatusEnum - indicates whether the hook is active or not. enabled by default
type HookStatusEnum string

const (
	HookStatusEnumEnabled  HookStatusEnum = "enabled"
	HookStatusEnumDisabled HookStatusEnum = "disabled"
)

func (e HookStatusEnum) ToPointer() *HookStatusEnum {
	return &e
}

func (e *HookStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = HookStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HookStatusEnum: %v", v)
	}
}

// Hook - Represents a hook configuration
type Hook struct {
	// Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
	Actions []string `json:"actions,omitempty"`
	// Entity events you want to be notified. If all is selected, there is no need to enter actions
	EventType *HookEventTypeEnum `json:"event_type,omitempty"`
	// Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events
	SigningKey *string `json:"signing_key,omitempty"`
	// indicates whether the hook is active or not. enabled by default
	Status *HookStatusEnum `json:"status,omitempty"`
	// Platform with an endpoint ready to process the information. Only web is supported currently
	SubscriberType *string `json:"subscriber_type,omitempty"`
	// Link where notification requests will be sent, required when subscriber_type is web
	SubscriberURL *string `json:"subscriber_url,omitempty"`
}
