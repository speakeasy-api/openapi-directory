"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import commandtype as shared_commandtype
from typing import Optional


@dataclasses.dataclass
class GetCommandsTypesRequest:
    
    device_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceId', 'style': 'form', 'explode': True }})
    r"""Internal device identifier. Only works if device has already reported some locations"""  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'protocol', 'style': 'form', 'explode': True }})
    r"""Protocol name. Can be used instead of device id"""  
    text_channel: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'textChannel', 'style': 'form', 'explode': True }})
    r"""When `true` return SMS commands. If not specified or `false` return data commands"""  
    

@dataclasses.dataclass
class GetCommandsTypesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    command_types: Optional[list[shared_commandtype.CommandType]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    