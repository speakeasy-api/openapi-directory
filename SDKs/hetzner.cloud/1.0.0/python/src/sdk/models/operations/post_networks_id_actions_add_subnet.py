"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostNetworksIDActionsAddSubnetAddSubnetRequestTypeEnum(str, Enum):
    r"""Type of Subnetwork"""
    CLOUD = 'cloud'
    SERVER = 'server'
    VSWITCH = 'vswitch'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetAddSubnetRequest:
    
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of Network zone. The Location object contains the `network_zone` property each Location belongs to."""  
    type: PostNetworksIDActionsAddSubnetAddSubnetRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of Subnetwork"""  
    ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range'), 'exclude': lambda f: f is None }})
    r"""Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."""  
    vswitch_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vswitch_id'), 'exclude': lambda f: f is None }})
    r"""ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch."""  
    

@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Network"""  
    request_body: Optional[PostNetworksIDActionsAddSubnetAddSubnetRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetActionResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetActionResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostNetworksIDActionsAddSubnetActionResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetActionResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostNetworksIDActionsAddSubnetActionResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostNetworksIDActionsAddSubnetActionResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostNetworksIDActionsAddSubnetActionResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetActionResponse:
    r"""The `action` key contains the `add_subnet` Action"""
    
    action: PostNetworksIDActionsAddSubnetActionResponseAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})  
    

@dataclasses.dataclass
class PostNetworksIDActionsAddSubnetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    action_response: Optional[PostNetworksIDActionsAddSubnetActionResponse] = dataclasses.field(default=None)
    r"""The `action` key contains the `add_subnet` Action"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    