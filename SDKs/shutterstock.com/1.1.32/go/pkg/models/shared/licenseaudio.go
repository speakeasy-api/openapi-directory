// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LicenseAudioLicenseEnum - Type of license
type LicenseAudioLicenseEnum string

const (
	LicenseAudioLicenseEnumAudioPlatform        LicenseAudioLicenseEnum = "audio_platform"
	LicenseAudioLicenseEnumPremierMusicBasic    LicenseAudioLicenseEnum = "premier_music_basic"
	LicenseAudioLicenseEnumPremierMusicExtended LicenseAudioLicenseEnum = "premier_music_extended"
	LicenseAudioLicenseEnumPremierMusicPro      LicenseAudioLicenseEnum = "premier_music_pro"
	LicenseAudioLicenseEnumPremierMusicComp     LicenseAudioLicenseEnum = "premier_music_comp"
	LicenseAudioLicenseEnumAssetAllMusic        LicenseAudioLicenseEnum = "asset_all_music"
)

func (e LicenseAudioLicenseEnum) ToPointer() *LicenseAudioLicenseEnum {
	return &e
}

func (e *LicenseAudioLicenseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio_platform":
		fallthrough
	case "premier_music_basic":
		fallthrough
	case "premier_music_extended":
		fallthrough
	case "premier_music_pro":
		fallthrough
	case "premier_music_comp":
		fallthrough
	case "asset_all_music":
		*e = LicenseAudioLicenseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseAudioLicenseEnum: %v", v)
	}
}

// LicenseAudio - An audio track in a licensing request
type LicenseAudio struct {
	// ID of the track being licensed
	AudioID string `json:"audio_id"`
	// Type of license
	License *LicenseAudioLicenseEnum `json:"license,omitempty"`
	// ID of the search that led to this licensing event
	SearchID *string `json:"search_id,omitempty"`
}
