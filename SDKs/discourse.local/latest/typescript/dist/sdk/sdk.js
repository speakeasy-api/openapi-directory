"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var admin_1 = require("./admin");
var backups_1 = require("./backups");
var badges_1 = require("./badges");
var categories_1 = require("./categories");
var groups_1 = require("./groups");
var invites_1 = require("./invites");
var notifications_1 = require("./notifications");
var posts_1 = require("./posts");
var privatemessages_1 = require("./privatemessages");
var search_1 = require("./search");
var site_1 = require("./site");
var tags_1 = require("./tags");
var topics_1 = require("./topics");
var uploads_1 = require("./uploads");
var users_1 = require("./users");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://discourse.local",
    "https://{defaultHost}",
];
/**
 * This page contains the documentation on how to use Discourse through API calls.
 *
 * @remarks
 *
 * > Note: For any endpoints not listed you can follow the
 * [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
 * guide to figure out how to use an API endpoint.
 *
 * ### Request Content-Type
 *
 * The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
 * `multipart/form-data`, or `application/json`.
 *
 * ### Endpoint Names and Response Content-Type
 *
 * Most API endpoints provide the same content as their HTML counterparts. For example
 * the URL `/categories` serves a list of categories, the `/categories.json` API provides the
 * same information in JSON format.
 *
 * Instead of sending API requests to `/categories.json` you may also send them to `/categories`
 * and add an `Accept: application/json` header to the request to get the JSON response.
 * Sending requests with the `Accept` header is necessary if you want to use URLs
 * for related endpoints returned by the API, such as pagination URLs.
 * These URLs are returned without the `.json` prefix so you need to add the header in
 * order to get the correct response format.
 *
 * ### Authentication
 *
 * Some endpoints do not require any authentication, pretty much anything else will
 * require you to be authenticated.
 *
 * To become authenticated you will need to create an API Key from the admin panel.
 *
 * Once you have your API Key you can pass it in along with your API Username
 * as an HTTP header like this:
 *
 * ```
 * curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system"
 * ```
 *
 * and this is how POST requests will look:
 *
 * ```
 * curl -X POST "http://127.0.0.1:3000/categories" \
 * -H "Content-Type: multipart/form-data;" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system" \
 * -F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \
 * -F "color=49d9e9" \
 * -F "text_color=f0fcfd"
 * ```
 *
 * ### Boolean values
 *
 * If an endpoint accepts a boolean be sure to specify it as a lowercase
 * `true` or `false` value unless noted otherwise.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.admin = new admin_1.Admin(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.backups = new backups_1.Backups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.badges = new badges_1.Badges(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.categories = new categories_1.Categories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groups = new groups_1.Groups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.invites = new invites_1.Invites(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.notifications = new notifications_1.Notifications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.posts = new posts_1.Posts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.privateMessages = new privatemessages_1.PrivateMessages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.search = new search_1.Search(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.site = new site_1.Site(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tags = new tags_1.Tags(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.topics = new topics_1.Topics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.uploads = new uploads_1.Uploads(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
