"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import backupstatus_enum as shared_backupstatus_enum
from ..shared import backuptype_enum as shared_backuptype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackupDetails:
    r"""Contains the details of the backup created for the table."""
    
    backup_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupArn') }})  
    backup_creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupCreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    backup_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupName') }})  
    backup_status: shared_backupstatus_enum.BackupStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupStatus') }})  
    backup_type: shared_backuptype_enum.BackupTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupType') }})  
    backup_expiry_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupExpiryDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    backup_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupSizeBytes'), 'exclude': lambda f: f is None }})  
    