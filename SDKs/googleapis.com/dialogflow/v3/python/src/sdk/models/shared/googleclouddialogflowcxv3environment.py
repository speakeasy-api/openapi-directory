"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddialogflowcxv3environmenttestcasesconfig as shared_googleclouddialogflowcxv3environmenttestcasesconfig
from ..shared import googleclouddialogflowcxv3environmentversionconfig as shared_googleclouddialogflowcxv3environmentversionconfig
from ..shared import googleclouddialogflowcxv3environmentwebhookconfig as shared_googleclouddialogflowcxv3environmentwebhookconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowCxV3Environment:
    r"""Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the environment. Format: `projects//locations//agents//environments/`."""  
    test_cases_config: Optional[shared_googleclouddialogflowcxv3environmenttestcasesconfig.GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testCasesConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration for continuous tests."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Update time of this environment."""  
    version_configs: Optional[list[shared_googleclouddialogflowcxv3environmentversionconfig.GoogleCloudDialogflowCxV3EnvironmentVersionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionConfigs'), 'exclude': lambda f: f is None }})
    r"""A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned."""  
    webhook_config: Optional[shared_googleclouddialogflowcxv3environmentwebhookconfig.GoogleCloudDialogflowCxV3EnvironmentWebhookConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhookConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for webhooks."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowCxV3EnvironmentInput:
    r"""Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the environment. Format: `projects//locations//agents//environments/`."""  
    test_cases_config: Optional[shared_googleclouddialogflowcxv3environmenttestcasesconfig.GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testCasesConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration for continuous tests."""  
    version_configs: Optional[list[shared_googleclouddialogflowcxv3environmentversionconfig.GoogleCloudDialogflowCxV3EnvironmentVersionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionConfigs'), 'exclude': lambda f: f is None }})
    r"""A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned."""  
    webhook_config: Optional[shared_googleclouddialogflowcxv3environmentwebhookconfig.GoogleCloudDialogflowCxV3EnvironmentWebhookConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhookConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for webhooks."""  
    