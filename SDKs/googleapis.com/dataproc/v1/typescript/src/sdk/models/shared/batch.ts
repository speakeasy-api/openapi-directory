/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnvironmentConfig } from "./environmentconfig";
import { PySparkBatch } from "./pysparkbatch";
import { RuntimeConfig } from "./runtimeconfig";
import { RuntimeInfo, RuntimeInfoInput } from "./runtimeinfo";
import { SparkBatch } from "./sparkbatch";
import { SparkRBatch } from "./sparkrbatch";
import { SparkSqlBatch } from "./sparksqlbatch";
import { StateHistory } from "./statehistory";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The state of the batch.
 */
export enum BatchStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Pending = "PENDING",
  Running = "RUNNING",
  Cancelling = "CANCELLING",
  Cancelled = "CANCELLED",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
}

/**
 * A representation of a batch workload in the service.
 */
export class Batch extends SpeakeasyBase {
  /**
   * Output only. The time when the batch was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. The email address of the user who created the batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creator" })
  creator?: string;

  /**
   * Environment configuration for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environmentConfig" })
  @Type(() => EnvironmentConfig)
  environmentConfig?: EnvironmentConfig;

  /**
   * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Output only. The resource name of the batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The resource name of the operation associated with this batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operation" })
  operation?: string;

  /**
   * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pysparkBatch" })
  @Type(() => PySparkBatch)
  pysparkBatch?: PySparkBatch;

  /**
   * Runtime configuration for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeConfig" })
  @Type(() => RuntimeConfig)
  runtimeConfig?: RuntimeConfig;

  /**
   * Runtime information about workload execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeInfo" })
  @Type(() => RuntimeInfo)
  runtimeInfo?: RuntimeInfo;

  /**
   * A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkBatch" })
  @Type(() => SparkBatch)
  sparkBatch?: SparkBatch;

  /**
   * A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkRBatch" })
  @Type(() => SparkRBatch)
  sparkRBatch?: SparkRBatch;

  /**
   * A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkSqlBatch" })
  @Type(() => SparkSqlBatch)
  sparkSqlBatch?: SparkSqlBatch;

  /**
   * Output only. The state of the batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: BatchStateEnum;

  /**
   * Output only. Historical state information for the batch.
   */
  @SpeakeasyMetadata({ elemType: StateHistory })
  @Expose({ name: "stateHistory" })
  @Type(() => StateHistory)
  stateHistory?: StateHistory[];

  /**
   * Output only. Batch state details, such as a failure description if the state is FAILED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stateMessage" })
  stateMessage?: string;

  /**
   * Output only. The time when the batch entered a current state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stateTime" })
  stateTime?: string;

  /**
   * Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * A representation of a batch workload in the service.
 */
export class BatchInput extends SpeakeasyBase {
  /**
   * Environment configuration for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environmentConfig" })
  @Type(() => EnvironmentConfig)
  environmentConfig?: EnvironmentConfig;

  /**
   * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pysparkBatch" })
  @Type(() => PySparkBatch)
  pysparkBatch?: PySparkBatch;

  /**
   * Runtime configuration for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeConfig" })
  @Type(() => RuntimeConfig)
  runtimeConfig?: RuntimeConfig;

  /**
   * Runtime information about workload execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeInfo" })
  @Type(() => RuntimeInfoInput)
  runtimeInfo?: RuntimeInfoInput;

  /**
   * A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkBatch" })
  @Type(() => SparkBatch)
  sparkBatch?: SparkBatch;

  /**
   * A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkRBatch" })
  @Type(() => SparkRBatch)
  sparkRBatch?: SparkRBatch;

  /**
   * A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sparkSqlBatch" })
  @Type(() => SparkSqlBatch)
  sparkSqlBatch?: SparkSqlBatch;
}
