"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import completelayeruploadrequest as shared_completelayeruploadrequest
from ..shared import completelayeruploadresponse as shared_completelayeruploadresponse
from enum import Enum
from typing import Any, Optional

class CompleteLayerUploadXAmzTargetEnum(str, Enum):
    AMAZON_EC2_CONTAINER_REGISTRY_V20150921_COMPLETE_LAYER_UPLOAD = 'AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload'


@dataclasses.dataclass
class CompleteLayerUploadRequest:
    
    complete_layer_upload_request: shared_completelayeruploadrequest.CompleteLayerUploadRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CompleteLayerUploadXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CompleteLayerUploadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    complete_layer_upload_response: Optional[shared_completelayeruploadresponse.CompleteLayerUploadResponse] = dataclasses.field(default=None)
    r"""Success"""  
    empty_upload_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EmptyUploadException"""  
    invalid_layer_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidLayerException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    kms_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KmsException"""  
    layer_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LayerAlreadyExistsException"""  
    layer_part_too_small_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LayerPartTooSmallException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNotFoundException"""  
    server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerException"""  
    upload_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UploadNotFoundException"""  
    