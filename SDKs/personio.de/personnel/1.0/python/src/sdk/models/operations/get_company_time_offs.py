"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import absenceperiodsresponse as shared_absenceperiodsresponse
from datetime import date
from typing import Optional


@dataclasses.dataclass
class GetCompanyTimeOffsRequest:
    
    employees: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'employees', 'style': 'form', 'explode': True }})
    r"""A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Pagination attribute to limit how many attendances will be returned per page"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': True }})
    r"""First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results"""  
    updated_from: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_from', 'style': 'form', 'explode': True }})
    r"""Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results."""  
    updated_to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_to', 'style': 'form', 'explode': True }})
    r"""Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results."""  
    

@dataclasses.dataclass
class GetCompanyTimeOffsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    absence_periods_response: Optional[shared_absenceperiodsresponse.AbsencePeriodsResponse] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    