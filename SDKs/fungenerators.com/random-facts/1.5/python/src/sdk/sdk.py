"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .fact_of_the_day import FactOfTheDay
from .number_facts import NumberFacts
from .on_this_day import OnThisDay
from .private_facts import PrivateFacts
from .random_facts import RandomFacts

SERVERS = [
    "https://api.fungenerators.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""A full featured Facts API. REST access with json/xml/jsonp result support. On this day birth and death support, random fact, keyword search support etc. Below is the documentation for the Random Facts API calls. You can try them out right here. [Click here to subscribe](http://fungenerators.com/api/facts/)"""
    fact_of_the_day: FactOfTheDay
    r"""Get fact of the day on various categories. This is refreshed daily.
    http://fungenerators.com/api/facts#fact-of-the-day - Find out more
    """
    number_facts: NumberFacts
    r"""Get a random interesting fact about a number.
    http://fungenerators.com/api/facts#number - Find out more
    """
    on_this_day: OnThisDay
    r"""On this day historical events for birth, death and other events.
    http://fungenerators.com/api/facts#number - Find out more
    """
    private_facts: PrivateFacts
    r"""Store and manage your own Facts online
    http://fungenerators.com/api/facts#private - Find out more
    """
    random_facts: RandomFacts
    r"""Get random facts based on category and other criteria.
    http://fungenerators.com/api/facts#number - Find out more
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.fact_of_the_day = FactOfTheDay(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.number_facts = NumberFacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.on_this_day = OnThisDay(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.private_facts = PrivateFacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.random_facts = RandomFacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    