// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GETReviewsFormatSecurity struct {
	APIKey shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=query"`
}

// GETReviewsFormatFormatEnum
type GETReviewsFormatFormatEnum string

const (
	GETReviewsFormatFormatEnumJSON  GETReviewsFormatFormatEnum = "json"
	GETReviewsFormatFormatEnumJsonp GETReviewsFormatFormatEnum = "jsonp"
)

func (e *GETReviewsFormatFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "jsonp":
		*e = GETReviewsFormatFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReviewsFormatFormatEnum: %s", s)
	}
}

type GETReviewsFormatPathParams struct {
	Format GETReviewsFormatFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type GETReviewsFormatQueryParams struct {
	APIKey *string `queryParam:"style=form,explode=true,name=api-key"`
	// You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20.
	Author *string `queryParam:"style=form,explode=true,name=author"`
	// Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.
	Isbn *int64 `queryParam:"style=form,explode=true,name=isbn"`
	// You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.
	Title *string `queryParam:"style=form,explode=true,name=title"`
}

type GETReviewsFormatRequest struct {
	PathParams  GETReviewsFormatPathParams
	QueryParams GETReviewsFormatQueryParams
	Security    GETReviewsFormatSecurity
}

type GETReviewsFormat200ApplicationJSONResults struct {
	BookAuthor    *string  `json:"book_author,omitempty"`
	BookTitle     *string  `json:"book_title,omitempty"`
	Byline        *string  `json:"byline,omitempty"`
	Isbn13        []string `json:"isbn13,omitempty"`
	PublicationDt *string  `json:"publication_dt,omitempty"`
	Summary       *string  `json:"summary,omitempty"`
	URL           *string  `json:"url,omitempty"`
}

type GETReviewsFormat200ApplicationJSON struct {
	Copyright  *string                                     `json:"copyright,omitempty"`
	NumResults *int64                                      `json:"num_results,omitempty"`
	Results    []GETReviewsFormat200ApplicationJSONResults `json:"results,omitempty"`
	Status     *string                                     `json:"status,omitempty"`
}

type GETReviewsFormatResponse struct {
	ContentType                              string
	GETReviewsFormat200ApplicationJSONObject *GETReviewsFormat200ApplicationJSON
	StatusCode                               int
	RawResponse                              *http.Response
}
