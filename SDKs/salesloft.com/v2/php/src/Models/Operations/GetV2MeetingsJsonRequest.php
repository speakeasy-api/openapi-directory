<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetV2MeetingsJsonRequest
{
    /**
     * Filters meetings by account_id. Multiple account ids can be applied
     * 
     * @var ?string $accountId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=account_id')]
    public ?string $accountId = null;
    
    /**
     * Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     * 
     * @var ?array<string> $createdAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=created_at')]
    public ?array $createdAt = null;
    
    /**
     * List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful
     * 
     * @var ?array<string> $eventIds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=event_ids')]
    public ?array $eventIds = null;
    
    /**
     * List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful
     * 
     * @var ?array<string> $iCalUids
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=i_cal_uids')]
    public ?array $iCalUids = null;
    
    /**
     * IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * 
     * @var ?array<int> $ids
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=ids')]
    public ?array $ids = null;
    
    /**
     * Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects
     * 
     * @var ?bool $includeMeetingsSettings
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_meetings_settings')]
    public ?bool $includeMeetingsSettings = null;
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     * 
     * @var ?bool $includePagingCounts
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_paging_counts')]
    public ?bool $includePagingCounts = null;
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * 
     * @var ?bool $limitPagingCounts
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit_paging_counts')]
    public ?bool $limitPagingCounts = null;
    
    /**
     * The current page to fetch results from. Defaults to 1
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * Filters meetings by person_id. Multiple person ids can be applied
     * 
     * @var ?string $personId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=person_id')]
    public ?string $personId = null;
    
    /**
     * Filters meetings by person_id. Multiple person ids can be applied
     * 
     * @var ?array<int> $personIds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=person_ids')]
    public ?array $personIds = null;
    
    /**
     * Whether to include deleted events in the result
     * 
     * @var ?bool $showDeleted
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=show_deleted')]
    public ?bool $showDeleted = null;
    
    /**
     * Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time
     * 
     * @var ?string $sortBy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_by')]
    public ?string $sortBy = null;
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * 
     * @var ?string $sortDirection
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_direction')]
    public ?string $sortDirection = null;
    
    /**
     * Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     * 
     * @var ?array<string> $startTime
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=start_time')]
    public ?array $startTime = null;
    
    /**
     * Filters meetings by status. Possible values are: pending, booked, failed, retry
     * 
     * @var ?string $status
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=status')]
    public ?string $status = null;
    
    /**
     * Filters meetings by task_id. Multiple task ids can be applied
     * 
     * @var ?array<int> $taskIds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=task_ids')]
    public ?array $taskIds = null;
    
    /**
     * Filters meetings by user_guid. Multiple user guids can be applied
     * 
     * @var ?array<string> $userGuids
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=user_guids')]
    public ?array $userGuids = null;
    
	public function __construct()
	{
		$this->accountId = null;
		$this->createdAt = null;
		$this->eventIds = null;
		$this->iCalUids = null;
		$this->ids = null;
		$this->includeMeetingsSettings = null;
		$this->includePagingCounts = null;
		$this->limitPagingCounts = null;
		$this->page = null;
		$this->perPage = null;
		$this->personId = null;
		$this->personIds = null;
		$this->showDeleted = null;
		$this->sortBy = null;
		$this->sortDirection = null;
		$this->startTime = null;
		$this->status = null;
		$this->taskIds = null;
		$this->userGuids = null;
	}
}
