"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabelField:
    r"""Representation of a label field."""
    
    date_string: Optional[list[date]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateString'), 'exclude': lambda f: f is None }})
    r"""Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The identifier of this field."""  
    integer: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integer'), 'exclude': lambda f: f is None }})
    r"""Only present if valueType is integer."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#labelField."""  
    selection: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selection'), 'exclude': lambda f: f is None }})
    r"""Only present if valueType is selection."""  
    text: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Only present if valueType is text."""  
    user: Optional[list[shared_user.User]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Only present if valueType is user."""  
    value_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueType'), 'exclude': lambda f: f is None }})
    r"""The field type. While new values may be supported in the future, the following are currently allowed:
    - dateString 
    - integer 
    - selection 
    - text 
    - user
    """  
    