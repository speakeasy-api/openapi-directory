"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import trafficmirrorfilterrulefield_enum as shared_trafficmirrorfilterrulefield_enum
from enum import Enum
from typing import Optional

class GETModifyTrafficMirrorFilterRuleActionEnum(str, Enum):
    MODIFY_TRAFFIC_MIRROR_FILTER_RULE = 'ModifyTrafficMirrorFilterRule'


@dataclasses.dataclass
class GETModifyTrafficMirrorFilterRuleDestinationPortRange:
    r"""Information about the Traffic Mirror filter rule port range."""
    
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromPort' }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToPort' }})  
    
class GETModifyTrafficMirrorFilterRuleRuleActionEnum(str, Enum):
    r"""The action to assign to the rule."""
    ACCEPT = 'accept'
    REJECT = 'reject'


@dataclasses.dataclass
class GETModifyTrafficMirrorFilterRuleSourcePortRange:
    r"""Information about the Traffic Mirror filter rule port range."""
    
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromPort' }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToPort' }})  
    
class GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum(str, Enum):
    r"""The type of traffic to assign to the rule."""
    INGRESS = 'ingress'
    EGRESS = 'egress'

class GETModifyTrafficMirrorFilterRuleVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyTrafficMirrorFilterRuleRequest:
    
    action: GETModifyTrafficMirrorFilterRuleActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    traffic_mirror_filter_rule_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'TrafficMirrorFilterRuleId', 'style': 'form', 'explode': True }})
    r"""The ID of the Traffic Mirror rule."""  
    version: GETModifyTrafficMirrorFilterRuleVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""The description to assign to the Traffic Mirror rule."""  
    destination_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationCidrBlock', 'style': 'form', 'explode': True }})
    r"""The destination CIDR block to assign to the Traffic Mirror rule."""  
    destination_port_range: Optional[GETModifyTrafficMirrorFilterRuleDestinationPortRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationPortRange', 'style': 'form', 'explode': True }})
    r"""The destination ports that are associated with the Traffic Mirror rule."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    protocol: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Protocol', 'style': 'form', 'explode': True }})
    r"""The protocol, for example TCP, to assign to the Traffic Mirror rule."""  
    remove_field: Optional[list[shared_trafficmirrorfilterrulefield_enum.TrafficMirrorFilterRuleFieldEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveField', 'style': 'form', 'explode': True }})
    r"""<p>The properties that you want to remove from the Traffic Mirror filter rule.</p> <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>"""  
    rule_action: Optional[GETModifyTrafficMirrorFilterRuleRuleActionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RuleAction', 'style': 'form', 'explode': True }})
    r"""The action to assign to the rule."""  
    rule_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RuleNumber', 'style': 'form', 'explode': True }})
    r"""The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number."""  
    source_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SourceCidrBlock', 'style': 'form', 'explode': True }})
    r"""The source CIDR block to assign to the Traffic Mirror rule."""  
    source_port_range: Optional[GETModifyTrafficMirrorFilterRuleSourcePortRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SourcePortRange', 'style': 'form', 'explode': True }})
    r"""The port range to assign to the Traffic Mirror rule."""  
    traffic_direction: Optional[GETModifyTrafficMirrorFilterRuleTrafficDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TrafficDirection', 'style': 'form', 'explode': True }})
    r"""The type of traffic to assign to the rule."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyTrafficMirrorFilterRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    