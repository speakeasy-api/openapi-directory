"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .author import Author
from .group import Group
from .pad import Pad
from .session import Session
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://etherpad.local",
    "http://pads.mro.name/api/1.2.15",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control."""
    author: Author
    group: Group
    pad: Pad
    session: Session

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.author = Author(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group = Group(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pad = Pad(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.session = Session(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def append_text_using_get(self, request: operations.AppendTextUsingGETRequest) -> operations.AppendTextUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appendText'
        
        query_params = utils.get_query_params(operations.AppendTextUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppendTextUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingGET200ApplicationJSON])
                res.append_text_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingGET400ApplicationJSON])
                res.append_text_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingGET401ApplicationJSON])
                res.append_text_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingGET500ApplicationJSON])
                res.append_text_using_get_500_application_json_object = out

        return res

    def append_text_using_post(self, request: operations.AppendTextUsingPOSTRequest) -> operations.AppendTextUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appendText'
        
        query_params = utils.get_query_params(operations.AppendTextUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppendTextUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingPOST200ApplicationJSON])
                res.append_text_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingPOST400ApplicationJSON])
                res.append_text_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingPOST401ApplicationJSON])
                res.append_text_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendTextUsingPOST500ApplicationJSON])
                res.append_text_using_post_500_application_json_object = out

        return res

    def copy_pad_using_get(self, request: operations.CopyPadUsingGETRequest) -> operations.CopyPadUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/copyPad'
        
        query_params = utils.get_query_params(operations.CopyPadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopyPadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingGET200ApplicationJSON])
                res.copy_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingGET400ApplicationJSON])
                res.copy_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingGET401ApplicationJSON])
                res.copy_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingGET500ApplicationJSON])
                res.copy_pad_using_get_500_application_json_object = out

        return res

    def copy_pad_using_post(self, request: operations.CopyPadUsingPOSTRequest) -> operations.CopyPadUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/copyPad'
        
        query_params = utils.get_query_params(operations.CopyPadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopyPadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingPOST200ApplicationJSON])
                res.copy_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingPOST400ApplicationJSON])
                res.copy_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingPOST401ApplicationJSON])
                res.copy_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadUsingPOST500ApplicationJSON])
                res.copy_pad_using_post_500_application_json_object = out

        return res

    def copy_pad_without_history_using_get(self, request: operations.CopyPadWithoutHistoryUsingGETRequest) -> operations.CopyPadWithoutHistoryUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/copyPadWithoutHistory'
        
        query_params = utils.get_query_params(operations.CopyPadWithoutHistoryUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopyPadWithoutHistoryUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingGET200ApplicationJSON])
                res.copy_pad_without_history_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingGET400ApplicationJSON])
                res.copy_pad_without_history_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingGET401ApplicationJSON])
                res.copy_pad_without_history_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingGET500ApplicationJSON])
                res.copy_pad_without_history_using_get_500_application_json_object = out

        return res

    def copy_pad_without_history_using_post(self, request: operations.CopyPadWithoutHistoryUsingPOSTRequest) -> operations.CopyPadWithoutHistoryUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/copyPadWithoutHistory'
        
        query_params = utils.get_query_params(operations.CopyPadWithoutHistoryUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CopyPadWithoutHistoryUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingPOST200ApplicationJSON])
                res.copy_pad_without_history_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingPOST400ApplicationJSON])
                res.copy_pad_without_history_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingPOST401ApplicationJSON])
                res.copy_pad_without_history_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CopyPadWithoutHistoryUsingPOST500ApplicationJSON])
                res.copy_pad_without_history_using_post_500_application_json_object = out

        return res

    def get_attribute_pool_using_get(self, request: operations.GETAttributePoolUsingGETRequest) -> operations.GETAttributePoolUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getAttributePool'
        
        query_params = utils.get_query_params(operations.GETAttributePoolUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAttributePoolUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAttributePoolUsingGET200ApplicationJSON])
                res.get_attribute_pool_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAttributePoolUsingGET400ApplicationJSON])
                res.get_attribute_pool_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAttributePoolUsingGET401ApplicationJSON])
                res.get_attribute_pool_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAttributePoolUsingGET500ApplicationJSON])
                res.get_attribute_pool_using_get_500_application_json_object = out

        return res

    def get_attribute_pool_using_post(self, request: operations.GetAttributePoolUsingPOSTRequest) -> operations.GetAttributePoolUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getAttributePool'
        
        query_params = utils.get_query_params(operations.GetAttributePoolUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAttributePoolUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttributePoolUsingPOST200ApplicationJSON])
                res.get_attribute_pool_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttributePoolUsingPOST400ApplicationJSON])
                res.get_attribute_pool_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttributePoolUsingPOST401ApplicationJSON])
                res.get_attribute_pool_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttributePoolUsingPOST500ApplicationJSON])
                res.get_attribute_pool_using_post_500_application_json_object = out

        return res

    def get_pad_id_using_get(self, request: operations.GETPadIDUsingGETRequest) -> operations.GETPadIDUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPadID'
        
        query_params = utils.get_query_params(operations.GETPadIDUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETPadIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPadIDUsingGET200ApplicationJSON])
                res.get_pad_id_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPadIDUsingGET400ApplicationJSON])
                res.get_pad_id_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPadIDUsingGET401ApplicationJSON])
                res.get_pad_id_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPadIDUsingGET500ApplicationJSON])
                res.get_pad_id_using_get_500_application_json_object = out

        return res

    def get_pad_id_using_post(self, request: operations.GetPadIDUsingPOSTRequest) -> operations.GetPadIDUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPadID'
        
        query_params = utils.get_query_params(operations.GetPadIDUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPadIDUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPadIDUsingPOST200ApplicationJSON])
                res.get_pad_id_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPadIDUsingPOST400ApplicationJSON])
                res.get_pad_id_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPadIDUsingPOST401ApplicationJSON])
                res.get_pad_id_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPadIDUsingPOST500ApplicationJSON])
                res.get_pad_id_using_post_500_application_json_object = out

        return res

    def get_revision_changeset_using_get(self, request: operations.GETRevisionChangesetUsingGETRequest) -> operations.GETRevisionChangesetUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getRevisionChangeset'
        
        query_params = utils.get_query_params(operations.GETRevisionChangesetUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRevisionChangesetUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionChangesetUsingGET200ApplicationJSON])
                res.get_revision_changeset_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionChangesetUsingGET400ApplicationJSON])
                res.get_revision_changeset_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionChangesetUsingGET401ApplicationJSON])
                res.get_revision_changeset_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionChangesetUsingGET500ApplicationJSON])
                res.get_revision_changeset_using_get_500_application_json_object = out

        return res

    def get_revision_changeset_using_post(self, request: operations.GetRevisionChangesetUsingPOSTRequest) -> operations.GetRevisionChangesetUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getRevisionChangeset'
        
        query_params = utils.get_query_params(operations.GetRevisionChangesetUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRevisionChangesetUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionChangesetUsingPOST200ApplicationJSON])
                res.get_revision_changeset_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionChangesetUsingPOST400ApplicationJSON])
                res.get_revision_changeset_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionChangesetUsingPOST401ApplicationJSON])
                res.get_revision_changeset_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionChangesetUsingPOST500ApplicationJSON])
                res.get_revision_changeset_using_post_500_application_json_object = out

        return res

    def get_saved_revisions_count_using_get(self, request: operations.GETSavedRevisionsCountUsingGETRequest) -> operations.GETSavedRevisionsCountUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getSavedRevisionsCount'
        
        query_params = utils.get_query_params(operations.GETSavedRevisionsCountUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSavedRevisionsCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSavedRevisionsCountUsingGET200ApplicationJSON])
                res.get_saved_revisions_count_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSavedRevisionsCountUsingGET400ApplicationJSON])
                res.get_saved_revisions_count_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSavedRevisionsCountUsingGET401ApplicationJSON])
                res.get_saved_revisions_count_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSavedRevisionsCountUsingGET500ApplicationJSON])
                res.get_saved_revisions_count_using_get_500_application_json_object = out

        return res

    def get_saved_revisions_count_using_post(self, request: operations.GetSavedRevisionsCountUsingPOSTRequest) -> operations.GetSavedRevisionsCountUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getSavedRevisionsCount'
        
        query_params = utils.get_query_params(operations.GetSavedRevisionsCountUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSavedRevisionsCountUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSavedRevisionsCountUsingPOST200ApplicationJSON])
                res.get_saved_revisions_count_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSavedRevisionsCountUsingPOST400ApplicationJSON])
                res.get_saved_revisions_count_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSavedRevisionsCountUsingPOST401ApplicationJSON])
                res.get_saved_revisions_count_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSavedRevisionsCountUsingPOST500ApplicationJSON])
                res.get_saved_revisions_count_using_post_500_application_json_object = out

        return res

    def get_stats_using_get(self) -> operations.GETStatsUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getStats'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETStatsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETStatsUsingGET200ApplicationJSON])
                res.get_stats_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETStatsUsingGET400ApplicationJSON])
                res.get_stats_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETStatsUsingGET401ApplicationJSON])
                res.get_stats_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETStatsUsingGET500ApplicationJSON])
                res.get_stats_using_get_500_application_json_object = out

        return res

    def get_stats_using_post(self) -> operations.GetStatsUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getStats'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStatsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetStatsUsingPOST200ApplicationJSON])
                res.get_stats_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetStatsUsingPOST400ApplicationJSON])
                res.get_stats_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetStatsUsingPOST401ApplicationJSON])
                res.get_stats_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetStatsUsingPOST500ApplicationJSON])
                res.get_stats_using_post_500_application_json_object = out

        return res

    def list_saved_revisions_using_get(self, request: operations.ListSavedRevisionsUsingGETRequest) -> operations.ListSavedRevisionsUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSavedRevisions'
        
        query_params = utils.get_query_params(operations.ListSavedRevisionsUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSavedRevisionsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingGET200ApplicationJSON])
                res.list_saved_revisions_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingGET400ApplicationJSON])
                res.list_saved_revisions_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingGET401ApplicationJSON])
                res.list_saved_revisions_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingGET500ApplicationJSON])
                res.list_saved_revisions_using_get_500_application_json_object = out

        return res

    def list_saved_revisions_using_post(self, request: operations.ListSavedRevisionsUsingPOSTRequest) -> operations.ListSavedRevisionsUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSavedRevisions'
        
        query_params = utils.get_query_params(operations.ListSavedRevisionsUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSavedRevisionsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingPOST200ApplicationJSON])
                res.list_saved_revisions_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingPOST400ApplicationJSON])
                res.list_saved_revisions_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingPOST401ApplicationJSON])
                res.list_saved_revisions_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSavedRevisionsUsingPOST500ApplicationJSON])
                res.list_saved_revisions_using_post_500_application_json_object = out

        return res

    def move_pad_using_get(self, request: operations.MovePadUsingGETRequest) -> operations.MovePadUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/movePad'
        
        query_params = utils.get_query_params(operations.MovePadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MovePadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingGET200ApplicationJSON])
                res.move_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingGET400ApplicationJSON])
                res.move_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingGET401ApplicationJSON])
                res.move_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingGET500ApplicationJSON])
                res.move_pad_using_get_500_application_json_object = out

        return res

    def move_pad_using_post(self, request: operations.MovePadUsingPOSTRequest) -> operations.MovePadUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/movePad'
        
        query_params = utils.get_query_params(operations.MovePadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MovePadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingPOST200ApplicationJSON])
                res.move_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingPOST400ApplicationJSON])
                res.move_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingPOST401ApplicationJSON])
                res.move_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MovePadUsingPOST500ApplicationJSON])
                res.move_pad_using_post_500_application_json_object = out

        return res

    def restore_revision_using_get(self, request: operations.RestoreRevisionUsingGETRequest) -> operations.RestoreRevisionUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/restoreRevision'
        
        query_params = utils.get_query_params(operations.RestoreRevisionUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RestoreRevisionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingGET200ApplicationJSON])
                res.restore_revision_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingGET400ApplicationJSON])
                res.restore_revision_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingGET401ApplicationJSON])
                res.restore_revision_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingGET500ApplicationJSON])
                res.restore_revision_using_get_500_application_json_object = out

        return res

    def restore_revision_using_post(self, request: operations.RestoreRevisionUsingPOSTRequest) -> operations.RestoreRevisionUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/restoreRevision'
        
        query_params = utils.get_query_params(operations.RestoreRevisionUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RestoreRevisionUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingPOST200ApplicationJSON])
                res.restore_revision_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingPOST400ApplicationJSON])
                res.restore_revision_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingPOST401ApplicationJSON])
                res.restore_revision_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RestoreRevisionUsingPOST500ApplicationJSON])
                res.restore_revision_using_post_500_application_json_object = out

        return res

    def save_revision_using_get(self, request: operations.SaveRevisionUsingGETRequest) -> operations.SaveRevisionUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/saveRevision'
        
        query_params = utils.get_query_params(operations.SaveRevisionUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveRevisionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingGET200ApplicationJSON])
                res.save_revision_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingGET400ApplicationJSON])
                res.save_revision_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingGET401ApplicationJSON])
                res.save_revision_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingGET500ApplicationJSON])
                res.save_revision_using_get_500_application_json_object = out

        return res

    def save_revision_using_post(self, request: operations.SaveRevisionUsingPOSTRequest) -> operations.SaveRevisionUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/saveRevision'
        
        query_params = utils.get_query_params(operations.SaveRevisionUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveRevisionUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingPOST200ApplicationJSON])
                res.save_revision_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingPOST400ApplicationJSON])
                res.save_revision_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingPOST401ApplicationJSON])
                res.save_revision_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveRevisionUsingPOST500ApplicationJSON])
                res.save_revision_using_post_500_application_json_object = out

        return res

    