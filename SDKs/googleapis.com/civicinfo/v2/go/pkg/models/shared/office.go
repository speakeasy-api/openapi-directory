// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OfficeLevelsEnum string

const (
	OfficeLevelsEnumInternational       OfficeLevelsEnum = "international"
	OfficeLevelsEnumCountry             OfficeLevelsEnum = "country"
	OfficeLevelsEnumAdministrativeArea1 OfficeLevelsEnum = "administrativeArea1"
	OfficeLevelsEnumRegional            OfficeLevelsEnum = "regional"
	OfficeLevelsEnumAdministrativeArea2 OfficeLevelsEnum = "administrativeArea2"
	OfficeLevelsEnumLocality            OfficeLevelsEnum = "locality"
	OfficeLevelsEnumSubLocality1        OfficeLevelsEnum = "subLocality1"
	OfficeLevelsEnumSubLocality2        OfficeLevelsEnum = "subLocality2"
	OfficeLevelsEnumSpecial             OfficeLevelsEnum = "special"
)

func (e *OfficeLevelsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "international":
		fallthrough
	case "country":
		fallthrough
	case "administrativeArea1":
		fallthrough
	case "regional":
		fallthrough
	case "administrativeArea2":
		fallthrough
	case "locality":
		fallthrough
	case "subLocality1":
		fallthrough
	case "subLocality2":
		fallthrough
	case "special":
		*e = OfficeLevelsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OfficeLevelsEnum: %s", s)
	}
}

type OfficeRolesEnum string

const (
	OfficeRolesEnumHeadOfState            OfficeRolesEnum = "headOfState"
	OfficeRolesEnumHeadOfGovernment       OfficeRolesEnum = "headOfGovernment"
	OfficeRolesEnumDeputyHeadOfGovernment OfficeRolesEnum = "deputyHeadOfGovernment"
	OfficeRolesEnumGovernmentOfficer      OfficeRolesEnum = "governmentOfficer"
	OfficeRolesEnumExecutiveCouncil       OfficeRolesEnum = "executiveCouncil"
	OfficeRolesEnumLegislatorUpperBody    OfficeRolesEnum = "legislatorUpperBody"
	OfficeRolesEnumLegislatorLowerBody    OfficeRolesEnum = "legislatorLowerBody"
	OfficeRolesEnumHighestCourtJudge      OfficeRolesEnum = "highestCourtJudge"
	OfficeRolesEnumJudge                  OfficeRolesEnum = "judge"
	OfficeRolesEnumSchoolBoard            OfficeRolesEnum = "schoolBoard"
	OfficeRolesEnumSpecialPurposeOfficer  OfficeRolesEnum = "specialPurposeOfficer"
	OfficeRolesEnumOtherRole              OfficeRolesEnum = "otherRole"
)

func (e *OfficeRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "headOfState":
		fallthrough
	case "headOfGovernment":
		fallthrough
	case "deputyHeadOfGovernment":
		fallthrough
	case "governmentOfficer":
		fallthrough
	case "executiveCouncil":
		fallthrough
	case "legislatorUpperBody":
		fallthrough
	case "legislatorLowerBody":
		fallthrough
	case "highestCourtJudge":
		fallthrough
	case "judge":
		fallthrough
	case "schoolBoard":
		fallthrough
	case "specialPurposeOfficer":
		fallthrough
	case "otherRole":
		*e = OfficeRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OfficeRolesEnum: %s", s)
	}
}

// Office - Information about an Office held by one or more Officials.
type Office struct {
	// The OCD ID of the division with which this office is associated.
	DivisionID *string `json:"divisionId,omitempty"`
	// The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
	Levels []OfficeLevelsEnum `json:"levels,omitempty"`
	// The human-readable name of the office.
	Name *string `json:"name,omitempty"`
	// List of indices in the officials array of people who presently hold this office.
	OfficialIndices []int64 `json:"officialIndices,omitempty"`
	// The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.
	Roles []OfficeRolesEnum `json:"roles,omitempty"`
	// A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.
	Sources []Source `json:"sources,omitempty"`
}
