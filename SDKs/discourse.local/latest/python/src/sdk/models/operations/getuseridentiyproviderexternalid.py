"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetUserIdentiyProviderExternalIDRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    external_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'external_id', 'style': 'simple', 'explode': False }})  
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""Authentication provider name. Can be found in the provider callback
    URL: `/auth/{provider}/callback`
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserCustomFields:
    
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserGroupUsers:
    
    group_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id') }})  
    notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserGroups:
    
    allow_membership_requests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_membership_requests') }})  
    automatic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic') }})  
    bio_cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_cooked') }})  
    bio_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_excerpt') }})  
    bio_raw: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_raw') }})  
    can_admin_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_admin_group') }})  
    can_see_members: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_see_members') }})  
    default_notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_notification_level') }})  
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    grant_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_trust_level') }})  
    has_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_messages') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    incoming_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_email') }})  
    members_visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_visibility_level') }})  
    membership_request_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_template') }})  
    mentionable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionable_level') }})  
    messageable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageable_level') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    primary_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group') }})  
    public_admission: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_admission') }})  
    public_exit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_exit') }})  
    publish_read_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_read_state') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    user_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_count') }})  
    visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility_level') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserUserAuthTokens:
    
    browser: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browser') }})  
    client_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ip') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    device: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})  
    icon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_active') }})  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    os: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os') }})  
    seen_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seen_at') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserUserFields:
    
    one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1') }})  
    two: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('2') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserUserNotificationSchedule:
    
    day_0_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_0_end_time') }})  
    day_0_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_0_start_time') }})  
    day_1_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_1_end_time') }})  
    day_1_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_1_start_time') }})  
    day_2_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_2_end_time') }})  
    day_2_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_2_start_time') }})  
    day_3_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_3_end_time') }})  
    day_3_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_3_start_time') }})  
    day_4_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_4_end_time') }})  
    day_4_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_4_start_time') }})  
    day_5_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_5_end_time') }})  
    day_5_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_5_start_time') }})  
    day_6_end_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_6_end_time') }})  
    day_6_start_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_6_start_time') }})  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUserUserOption:
    
    allow_private_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_private_messages') }})  
    auto_track_topics_after_msecs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_track_topics_after_msecs') }})  
    automatically_unpin_topics: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatically_unpin_topics') }})  
    color_scheme_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color_scheme_id') }})  
    dark_scheme_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dark_scheme_id') }})  
    digest_after_minutes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest_after_minutes') }})  
    dynamic_favicon: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamic_favicon') }})  
    email_digests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_digests') }})  
    email_in_reply_to: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_in_reply_to') }})  
    email_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_level') }})  
    email_messages_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_messages_level') }})  
    email_previous_replies: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_previous_replies') }})  
    enable_allowed_pm_users: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_allowed_pm_users') }})  
    enable_defer: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_defer') }})  
    enable_quoting: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_quoting') }})  
    external_links_in_new_tab: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_links_in_new_tab') }})  
    hide_profile_and_presence: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_profile_and_presence') }})  
    homepage_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage_id') }})  
    include_tl0_in_digests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_tl0_in_digests') }})  
    like_notification_frequency: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_notification_frequency') }})  
    mailing_list_mode: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailing_list_mode') }})  
    mailing_list_mode_frequency: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailing_list_mode_frequency') }})  
    new_topic_duration_minutes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_topic_duration_minutes') }})  
    notification_level_when_replying: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level_when_replying') }})  
    skip_new_user_tips: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_new_user_tips') }})  
    text_size: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_size') }})  
    text_size_seq: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_size_seq') }})  
    theme_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme_ids') }})  
    theme_key_seq: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme_key_seq') }})  
    timezone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})  
    title_count_mode: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_count_mode') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    bookmark_auto_delete_preference: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmark_auto_delete_preference'), 'exclude': lambda f: f is None }})  
    default_calendar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_calendar'), 'exclude': lambda f: f is None }})  
    oldest_search_log_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oldest_search_log_date'), 'exclude': lambda f: f is None }})  
    seen_popups: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seen_popups'), 'exclude': lambda f: f is None }})  
    sidebar_list_destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sidebar_list_destination'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSONUser:
    
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    allowed_pm_usernames: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_pm_usernames') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    badge_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_count') }})  
    can_be_deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_be_deleted') }})  
    can_change_bio: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_change_bio') }})  
    can_change_location: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_change_location') }})  
    can_change_tracking_preferences: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_change_tracking_preferences') }})  
    can_change_website: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_change_website') }})  
    can_delete_all_posts: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete_all_posts') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    can_edit_email: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_email') }})  
    can_edit_name: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_name') }})  
    can_edit_username: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_username') }})  
    can_ignore_user: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_ignore_user') }})  
    can_mute_user: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_mute_user') }})  
    can_send_private_message_to_user: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_send_private_message_to_user') }})  
    can_send_private_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_send_private_messages') }})  
    can_upload_profile_header: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_upload_profile_header') }})  
    can_upload_user_card_background: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_upload_user_card_background') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    custom_fields: GetUserIdentiyProviderExternalID200ApplicationJSONUserCustomFields = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields') }})  
    featured_topic: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured_topic') }})  
    featured_user_badge_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured_user_badge_ids') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_group_id') }})  
    flair_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_name') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    group_users: list[GetUserIdentiyProviderExternalID200ApplicationJSONUserGroupUsers] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_users') }})  
    groups: list[GetUserIdentiyProviderExternalID200ApplicationJSONUserGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    has_title_badges: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_title_badges') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    ignored: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignored') }})  
    ignored_usernames: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignored_usernames') }})  
    invited_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited_by') }})  
    last_posted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_posted_at') }})  
    last_seen_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at') }})  
    locale: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale') }})  
    mailing_list_posts_per_day: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailing_list_posts_per_day') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    muted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted') }})  
    muted_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_category_ids') }})  
    muted_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_tags') }})  
    muted_usernames: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_usernames') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    pending_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_count') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    primary_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_id') }})  
    primary_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_name') }})  
    profile_view_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile_view_count') }})  
    recent_time_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recent_time_read') }})  
    regular_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_category_ids') }})  
    second_factor_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('second_factor_enabled') }})  
    staged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staged') }})  
    system_avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system_avatar_template') }})  
    system_avatar_upload_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system_avatar_upload_id') }})  
    time_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_read') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    tracked_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracked_category_ids') }})  
    tracked_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracked_tags') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    uploaded_avatar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_avatar_id') }})  
    use_logo_small_as_avatar: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_logo_small_as_avatar') }})  
    user_api_keys: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_api_keys') }})  
    user_auth_tokens: list[GetUserIdentiyProviderExternalID200ApplicationJSONUserUserAuthTokens] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_auth_tokens') }})  
    user_notification_schedule: GetUserIdentiyProviderExternalID200ApplicationJSONUserUserNotificationSchedule = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_notification_schedule') }})  
    user_option: GetUserIdentiyProviderExternalID200ApplicationJSONUserUserOption = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_option') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    watched_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_category_ids') }})  
    watched_first_post_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_first_post_category_ids') }})  
    watched_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_tags') }})  
    watching_first_post_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_first_post_tags') }})  
    pending_posts_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_posts_count'), 'exclude': lambda f: f is None }})  
    second_factor_backup_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('second_factor_backup_enabled'), 'exclude': lambda f: f is None }})  
    user_fields: Optional[GetUserIdentiyProviderExternalID200ApplicationJSONUserUserFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_fields'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserIdentiyProviderExternalID200ApplicationJSON:
    r"""user response"""
    
    user: GetUserIdentiyProviderExternalID200ApplicationJSONUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})  
    user_badges: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_badges') }})  
    

@dataclasses.dataclass
class GetUserIdentiyProviderExternalIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_user_identiy_provider_external_id_200_application_json_object: Optional[GetUserIdentiyProviderExternalID200ApplicationJSON] = dataclasses.field(default=None)
    r"""user response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    