<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Activity 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get activity logs
     * 
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges. 
     * 
     * **NOTE:** Total Results will always return as 0 to avoid quering data you're not using and stay as performant as possible. 
     *   
     * **Operation Types**
     * Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:
     * 
     * | File Manager Value | API Value | Notes |
     * |-----|----|---|
     * | Connect | PASS | |
     * | Disconnect | EXIT | |
     * | Upload | STOR | |
     * | Download | RETR | |
     * | Delete | DELE | |
     * | Create Folder | MKD | |
     * | Rename | RNTO | |
     * | Move | MOVE | |
     * | Copy | COPY | |
     * | Compress | COMPR | |
     * | Extract | EXTRACT | |
     * | Shared Folders | SHARE | |
     * | Send Files | SEND | |
     * | Receive Files | RECV | |
     * | _N/A_ | EDIT\_SEND | Update send. Not shown in file manager |
     * | Update Share | EDIT\_SHARE| | 
     * | Update Receive | EDIT\_RECV | |
     * | Delete Send | DELE\_SEND | |
     * | Delete Receive | DELE\_RECV | |
     * | Delete Share | DELE\_SHARE | |
     * | Create Notification | NOTIFY | |
     * | Update Notification | EDIT\_NTFY| |
     * | Delete Notification | DELE\_NTFY | |
     * | Create User | USER | |
     * | Update User | EDIT\_USER | |
     * | Delete User | DELE\_USER | |
     * | _N/A_ | DFA | Create direct link. Not shown in file manager |
     * | _N/A_ | EDIT\_DFA | Update direct link options. Not shown in file manager |
     * | _N/A_ | DELE\_DFA | Deactivate direct link. Not shown in file manager|
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSessionLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSessionLogsResponse
     */
	public function getSessionLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetSessionLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSessionLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/activity/session');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSessionLogsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSessionLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sessionActivityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SessionActivityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get webhook logs
     * 
     * Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.
     * 
     * **NOTE:** Total Results will always return as 0 to avoid querying data you're not using and stay as performant as possible. 
     * 
     * **Event Types**
     * 
     * Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:
     * 
     * - resources.upload
     * - resources.download
     * - resources.delete
     * - resources.createFolder
     * - resources.rename
     * - resources.move
     * - resources.copy
     * - resources.compress
     * - resources.extract
     * - shares.formSubmit
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsResponse
     */
	public function getWebhookLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/activity/webhooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhookLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookActivityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WebhookActivityResponse', 'json');
            }
        }

        return $response;
    }
}