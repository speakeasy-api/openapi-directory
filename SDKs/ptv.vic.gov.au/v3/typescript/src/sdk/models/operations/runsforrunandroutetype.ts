/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum RunsForRunAndRouteTypeExpandEnum {
  All = "All",
  VehicleDescriptor = "VehicleDescriptor",
  VehiclePosition = "VehiclePosition",
  None = "None",
}

/**
 * Number identifying transport mode; values returned via RouteTypes API
 */
export enum RunsForRunAndRouteTypeRouteTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

export class RunsForRunAndRouteTypeRequest extends SpeakeasyBase {
  /**
   * Date of the request. (optional - defaults to now)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_utc;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateUtc?: Date;

  /**
   * Your developer id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=devid" })
  devid?: string;

  /**
   * List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=expand",
  })
  expand: RunsForRunAndRouteTypeExpandEnum[];

  /**
   * Indicates if geopath data will be returned (default = false)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_geopath",
  })
  includeGeopath?: boolean;

  /**
   * Number identifying transport mode; values returned via RouteTypes API
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=route_type",
  })
  routeType: RunsForRunAndRouteTypeRouteTypeEnum;

  /**
   * The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=run_ref",
  })
  runRef: string;

  /**
   * Authentication signature for request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=signature",
  })
  signature?: string;

  /**
   * Please ignore
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class RunsForRunAndRouteTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Invalid Request
   */
  @SpeakeasyMetadata()
  v3ErrorResponse?: shared.V3ErrorResponse;

  /**
   * The trip/service run details for the run_ref and route type specified.
   */
  @SpeakeasyMetadata()
  v3RunResponse?: shared.V3RunResponse;
}
