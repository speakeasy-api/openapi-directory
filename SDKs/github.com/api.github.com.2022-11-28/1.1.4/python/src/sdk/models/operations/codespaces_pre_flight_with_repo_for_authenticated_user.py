"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CodespacesPreFlightWithRepoForAuthenticatedUserRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    client_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'client_ip', 'style': 'form', 'explode': True }})
    r"""An alternative IP for default location auto-detection, such as when proxying a request."""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ref', 'style': 'form', 'explode': True }})
    r"""The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespacesPreFlightWithRepoForAuthenticatedUser200ApplicationJSONDefaults:
    
    devcontainer_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devcontainer_path') }})  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespacesPreFlightWithRepoForAuthenticatedUser200ApplicationJSON:
    r"""Response when a user is able to create codespaces from the repository."""
    
    billable_owner: Optional[shared_simple_user.SimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billable_owner'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    defaults: Optional[CodespacesPreFlightWithRepoForAuthenticatedUser200ApplicationJSONDefaults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaults'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CodespacesPreFlightWithRepoForAuthenticatedUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Requires authentication"""  
    codespaces_pre_flight_with_repo_for_authenticated_user_200_application_json_object: Optional[CodespacesPreFlightWithRepoForAuthenticatedUser200ApplicationJSON] = dataclasses.field(default=None)
    r"""Response when a user is able to create codespaces from the repository."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    