"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Address:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The name of the city. Maximum length: 3000 characters."""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
    > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
    """  
    house_number_or_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('houseNumberOrName') }})
    r"""The number or name of the house. Maximum length: 3000 characters."""  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode') }})
    r"""A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries."""  
    street: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street') }})
    r"""The name of the street. Maximum length: 3000 characters.
    > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
    """  
    state_or_province: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateOrProvince'), 'exclude': lambda f: f is None }})
    r"""The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
    > Required for the US and Canada.
    """  
    