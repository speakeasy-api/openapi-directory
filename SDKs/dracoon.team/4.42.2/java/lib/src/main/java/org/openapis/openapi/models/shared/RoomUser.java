/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RoomUser - User information
 */
public class RoomUser {
    /**
     * &amp;#128679; Deprecated since v4.11.0
     * 
     * Display name
     * 
     * use information from `UserInfo` instead to combine a display name
     */
    @JsonProperty("displayName")
    public String displayName;
    public RoomUser withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.11.0
     * 
     * Email 
     * 
     * use `email` from `UserInfo` instead
     */
    @JsonProperty("email")
    public String email;
    public RoomUser withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.11.0
     * 
     * Unique identifier for the user
     * 
     * use `id` from `UserInfo` instead
     */
    @JsonProperty("id")
    public Long id;
    public RoomUser withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Is user granted room permissions
     */
    @JsonProperty("isGranted")
    public Boolean isGranted;
    public RoomUser withIsGranted(Boolean isGranted) {
        this.isGranted = isGranted;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.11.0
     * 
     * User login name
     */
    @JsonProperty("login")
    public String login;
    public RoomUser withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * Node permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public NodePermissions permissions;
    public RoomUser withPermissions(NodePermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * Public key container
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicKeyContainer")
    public PublicKeyContainer publicKeyContainer;
    public RoomUser withPublicKeyContainer(PublicKeyContainer publicKeyContainer) {
        this.publicKeyContainer = publicKeyContainer;
        return this;
    }
    
    /**
     * User information
     */
    @JsonProperty("userInfo")
    public UserInfo userInfo;
    public RoomUser withUserInfo(UserInfo userInfo) {
        this.userInfo = userInfo;
        return this;
    }
    
}
