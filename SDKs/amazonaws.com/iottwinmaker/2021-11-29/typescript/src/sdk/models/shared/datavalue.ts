/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { RelationshipValue } from "./relationshipvalue";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that specifies a value for a property.
 */
export class DataValue extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "booleanValue" })
  booleanValue?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "doubleValue" })
  doubleValue?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "expression" })
  expression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "integerValue" })
  integerValue?: number;

  @SpeakeasyMetadata({ elemType: DataValue })
  @Expose({ name: "listValue" })
  @Type(() => DataValue)
  listValue?: DataValue[];

  @SpeakeasyMetadata()
  @Expose({ name: "longValue" })
  longValue?: number;

  @SpeakeasyMetadata({ elemType: DataValue })
  @Expose({ name: "mapValue" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DataValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DataValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  mapValue?: Record<string, DataValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "relationshipValue" })
  @Type(() => RelationshipValue)
  relationshipValue?: RelationshipValue;

  @SpeakeasyMetadata()
  @Expose({ name: "stringValue" })
  stringValue?: string;
}
