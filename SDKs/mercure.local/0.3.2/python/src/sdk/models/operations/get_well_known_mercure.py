"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetWellKnownMercureRequest:
    
    topic: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'topic', 'style': 'form', 'explode': True }})
    r"""The topic to get updates from, can be a URI template (RFC6570)."""  
    last_event_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Last-Event-ID', 'style': 'simple', 'explode': False }})
    r"""The last received event id, to retrieve missed events, takes precedence over the query parameter."""  
    last_event_id_query_parameter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Last-Event-ID', 'style': 'form', 'explode': True }})
    r"""The last received event id, to retrieve missed events."""  
    

@dataclasses.dataclass
class GetWellKnownMercureResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    