<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add an email address for the authenticated user
     * 
     * This endpoint is accessible with the `user` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#add-an-email-address-for-the-authenticated-user - API method documentation
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersAddEmailForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#add-an-email-address-for-the-authenticated-user
     */
	public function usersAddEmailForAuthenticated(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersAddEmailForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/emails');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersAddEmailForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Email>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a user follows another user
     * 
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#check-if-a-user-follows-another-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#check-if-a-user-follows-another-user
     */
	public function usersCheckFollowingForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/following/{target_user}', \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersCheckFollowingForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Check if a person is followed by the authenticated user
     * 
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user
     */
	public function usersCheckPersonIsFollowedByAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/following/{username}', \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersCheckPersonIsFollowedByAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a GPG key for the authenticated user
     * 
     * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#create-a-gpg-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCreateGpgKeyForAuthenticatedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersCreateGpgKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#create-a-gpg-key-for-the-authenticated-user
     */
	public function usersCreateGpgKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersCreateGpgKeyForAuthenticatedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersCreateGpgKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/gpg_keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersCreateGpgKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gpgKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GpgKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a public SSH key for the authenticated user
     * 
     * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCreatePublicSshKeyForAuthenticatedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersCreatePublicSshKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user
     */
	public function usersCreatePublicSshKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersCreatePublicSshKeyForAuthenticatedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersCreatePublicSshKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersCreatePublicSshKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Key', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an email address for the authenticated user
     * 
     * This endpoint is accessible with the `user` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-an-email-address-for-the-authenticated-user - API method documentation
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeleteEmailForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-an-email-address-for-the-authenticated-user
     */
	public function usersDeleteEmailForAuthenticated(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeleteEmailForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/emails');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeleteEmailForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a GPG key for the authenticated user
     * 
     * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user
     */
	public function usersDeleteGpgKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/gpg_keys/{gpg_key_id}', \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeleteGpgKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a public SSH key for the authenticated user
     * 
     * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user
     */
	public function usersDeletePublicSshKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/keys/{key_id}', \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeletePublicSshKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow a user
     * 
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."
     * 
     * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#follow-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersFollowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersFollowResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#follow-a-user
     */
	public function usersFollow(
        \OpenAPI\OpenAPI\Models\Operations\UsersFollowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersFollowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/following/{username}', \OpenAPI\OpenAPI\Models\Operations\UsersFollowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersFollowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the authenticated user
     * 
     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
     * 
     * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-the-authenticated-user - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-the-authenticated-user
     */
	public function usersGetAuthenticated(
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetAuthenticated200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user
     * 
     * Provides publicly available information about someone with a GitHub account.
     * 
     * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
     * 
     * The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#authentication).
     * 
     * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@2.21/rest/reference/users#emails)".
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-user
     */
	public function usersGetByUsername(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}', \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetByUsernameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetByUsername200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetByUsername202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get contextual information for a user
     * 
     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
     * 
     * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
     * 
     * ```shell
     *  curl -u username:token
     *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
     * ```
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-contextual-information-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-contextual-information-for-a-user
     */
	public function usersGetContextForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/hovercard', \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetContextForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hovercard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Hovercard', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a GPG key for the authenticated user
     * 
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-gpg-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-gpg-key-for-the-authenticated-user
     */
	public function usersGetGpgKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/gpg_keys/{gpg_key_id}', \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetGpgKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gpgKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GpgKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a public SSH key for the authenticated user
     * 
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user
     */
	public function usersGetPublicSshKeyForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/keys/{key_id}', \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetPublicSshKeyForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Key', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List users
     * 
     * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
     * 
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-users - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-users
     */
	public function usersList(
        \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * List email addresses for the authenticated user
     * 
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-email-addresses-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-email-addresses-for-the-authenticated-user
     */
	public function usersListEmailsForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/emails');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListEmailsForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Email>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the people the authenticated user follows
     * 
     * Lists the people who the authenticated user follows.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-the-people-the-authenticated-user-follows - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-the-people-the-authenticated-user-follows
     */
	public function usersListFollowedByAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/following');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListFollowedByAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List followers of the authenticated user
     * 
     * Lists the people following the authenticated user.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-followers-of-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-followers-of-the-authenticated-user
     */
	public function usersListFollowersForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/followers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List followers of a user
     * 
     * Lists the people following the specified user.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-followers-of-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-followers-of-a-user
     */
	public function usersListFollowersForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/followers', \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListFollowersForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the people a user follows
     * 
     * Lists the people who the specified user follows.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-the-people-a-user-follows - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-the-people-a-user-follows
     */
	public function usersListFollowingForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/following', \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListFollowingForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List GPG keys for the authenticated user
     * 
     * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-gpg-keys-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-gpg-keys-for-the-authenticated-user
     */
	public function usersListGpgKeysForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/gpg_keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gpgKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GpgKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List GPG keys for a user
     * 
     * Lists the GPG keys for a user. This information is accessible by anyone.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-gpg-keys-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-gpg-keys-for-a-user
     */
	public function usersListGpgKeysForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/gpg_keys', \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListGpgKeysForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gpgKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GpgKey>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public email addresses for the authenticated user
     * 
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@2.21/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-email-addresses-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-email-addresses-for-the-authenticated-user
     */
	public function usersListPublicEmailsForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/public_emails');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListPublicEmailsForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Email>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public keys for a user
     * 
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-keys-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-keys-for-a-user
     */
	public function usersListPublicKeysForUser(
        \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/keys', \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListPublicKeysForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keySimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\KeySimple>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public SSH keys for the authenticated user
     * 
     * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user
     */
	public function usersListPublicSshKeysForAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListPublicSshKeysForAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Key>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfollow a user
     * 
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users#unfollow-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users#unfollow-a-user
     */
	public function usersUnfollow(
        \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/following/{username}', \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUnfollowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the authenticated user
     * 
     * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     * https://docs.github.com/enterprise-server@2.21/rest/reference/users/#update-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateAuthenticatedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdateAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@2.21/rest/reference/users/#update-the-authenticated-user
     */
	public function usersUpdateAuthenticated(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateAuthenticatedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdateAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdateAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
}