"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkSensorAlertsProfileResponse = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSON = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.UpdateNetworkSensorAlertsProfileRequest = exports.UpdateNetworkSensorAlertsProfileRequestBody = exports.UpdateNetworkSensorAlertsProfileRequestBodySchedule = exports.UpdateNetworkSensorAlertsProfileRequestBodyRecipients = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditions = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum["Above"] = "above";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum["Below"] = "below";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["Zero"] = "0";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["Sixty"] = "60";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneHundredAndEighty"] = "180";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["TwoHundredAndForty"] = "240";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["ThreeHundred"] = "300";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["SixHundred"] = "600";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["NineHundred"] = "900";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor.prototype, "open", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise.prototype, "ambient", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum;
(function (UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum) {
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum || (exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater.prototype, "present", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "water", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold;
var UpdateNetworkSensorAlertsProfileRequestBodyConditions = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyConditions, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold)
    ], UpdateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "threshold", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyConditions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyConditions = UpdateNetworkSensorAlertsProfileRequestBodyConditions;
/**
 * List of recipients that will recieve the alert.
 */
var UpdateNetworkSensorAlertsProfileRequestBodyRecipients = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodyRecipients, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodyRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "smsNumbers", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodyRecipients;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodyRecipients = UpdateNetworkSensorAlertsProfileRequestBodyRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var UpdateNetworkSensorAlertsProfileRequestBodySchedule = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBodySchedule, _super);
    function UpdateNetworkSensorAlertsProfileRequestBodySchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBodySchedule.prototype, "id", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBodySchedule;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBodySchedule = UpdateNetworkSensorAlertsProfileRequestBodySchedule;
var UpdateNetworkSensorAlertsProfileRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequestBody, _super);
    function UpdateNetworkSensorAlertsProfileRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSensorAlertsProfileRequestBodyConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyConditions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfileRequestBody.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodyRecipients; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodyRecipients)
    ], UpdateNetworkSensorAlertsProfileRequestBody.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfileRequestBodySchedule; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBodySchedule)
    ], UpdateNetworkSensorAlertsProfileRequestBody.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfileRequestBody.prototype, "serials", void 0);
    return UpdateNetworkSensorAlertsProfileRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequestBody = UpdateNetworkSensorAlertsProfileRequestBody;
var UpdateNetworkSensorAlertsProfileRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileRequest, _super);
    function UpdateNetworkSensorAlertsProfileRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfileRequestBody)
    ], UpdateNetworkSensorAlertsProfileRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "pathParam, style=simple;explode=false;name=id" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequest.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileRequest.prototype, "networkId", void 0);
    return UpdateNetworkSensorAlertsProfileRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileRequest = UpdateNetworkSensorAlertsProfileRequest;
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Above"] = "above";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Below"] = "below";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Zero"] = "0";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Sixty"] = "60";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndEighty"] = "180";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["TwoHundredAndForty"] = "240";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeHundred"] = "300";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["SixHundred"] = "600";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["NineHundred"] = "900";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor.prototype, "open", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise.prototype, "ambient", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum;
(function (UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) {
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Good"] = "good";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum || (exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "quality", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater.prototype, "present", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
        }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "water", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
var UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "threshold", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions;
/**
 * List of recipients that will recieve the alert.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "smsNumbers", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients = UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "name", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule = UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule;
/**
 * Successful operation
 */
var UpdateNetworkSensorAlertsProfile200ApplicationJSON = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfile200ApplicationJSON, _super);
    function UpdateNetworkSensorAlertsProfile200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "profileId" }),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "profileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule; }),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "serials", void 0);
    return UpdateNetworkSensorAlertsProfile200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfile200ApplicationJSON = UpdateNetworkSensorAlertsProfile200ApplicationJSON;
var UpdateNetworkSensorAlertsProfileResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkSensorAlertsProfileResponse, _super);
    function UpdateNetworkSensorAlertsProfileResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkSensorAlertsProfileResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkSensorAlertsProfileResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkSensorAlertsProfileResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", UpdateNetworkSensorAlertsProfile200ApplicationJSON)
    ], UpdateNetworkSensorAlertsProfileResponse.prototype, "updateNetworkSensorAlertsProfile200ApplicationJSONObject", void 0);
    return UpdateNetworkSensorAlertsProfileResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSensorAlertsProfileResponse = UpdateNetworkSensorAlertsProfileResponse;
