// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SharedconnectionConnectionsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type SharedconnectionConnectionsRequest struct {
	Security SharedconnectionConnectionsSecurity
}

type SharedconnectionConnectionsDefaultApplicationJSONCodeEnum string

const (
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumBadRequest          SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "BadRequest"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumConflict            SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "Conflict"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumNotAcceptable       SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "NotAcceptable"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumNotFound            SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "NotFound"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumInternalServerError SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "InternalServerError"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumUnauthorized        SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "Unauthorized"
	SharedconnectionConnectionsDefaultApplicationJSONCodeEnumTooManyRequests     SharedconnectionConnectionsDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *SharedconnectionConnectionsDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = SharedconnectionConnectionsDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SharedconnectionConnectionsDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// SharedconnectionConnectionsDefaultApplicationJSON - bad_request: proper details are not provided for connection in body.
type SharedconnectionConnectionsDefaultApplicationJSON struct {
	Code    SharedconnectionConnectionsDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// SharedconnectionConnections200ApplicationJSONCredentialTypeEnum - the type of the credential
type SharedconnectionConnections200ApplicationJSONCredentialTypeEnum string

const (
	SharedconnectionConnections200ApplicationJSONCredentialTypeEnumCredentials SharedconnectionConnections200ApplicationJSONCredentialTypeEnum = "credentials"
	SharedconnectionConnections200ApplicationJSONCredentialTypeEnumCertificate SharedconnectionConnections200ApplicationJSONCredentialTypeEnum = "certificate"
	SharedconnectionConnections200ApplicationJSONCredentialTypeEnumKey         SharedconnectionConnections200ApplicationJSONCredentialTypeEnum = "key"
)

func (e *SharedconnectionConnections200ApplicationJSONCredentialTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "credentials":
		fallthrough
	case "certificate":
		fallthrough
	case "key":
		*e = SharedconnectionConnections200ApplicationJSONCredentialTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SharedconnectionConnections200ApplicationJSONCredentialTypeEnum: %s", s)
	}
}

// SharedconnectionConnections200ApplicationJSONServiceTypeEnum - service type of shared connection can be apple|gitlab|googleplay|jira
type SharedconnectionConnections200ApplicationJSONServiceTypeEnum string

const (
	SharedconnectionConnections200ApplicationJSONServiceTypeEnumApple      SharedconnectionConnections200ApplicationJSONServiceTypeEnum = "apple"
	SharedconnectionConnections200ApplicationJSONServiceTypeEnumJira       SharedconnectionConnections200ApplicationJSONServiceTypeEnum = "jira"
	SharedconnectionConnections200ApplicationJSONServiceTypeEnumGoogleplay SharedconnectionConnections200ApplicationJSONServiceTypeEnum = "googleplay"
	SharedconnectionConnections200ApplicationJSONServiceTypeEnumGitlab     SharedconnectionConnections200ApplicationJSONServiceTypeEnum = "gitlab"
)

func (e *SharedconnectionConnections200ApplicationJSONServiceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "apple":
		fallthrough
	case "jira":
		fallthrough
	case "googleplay":
		fallthrough
	case "gitlab":
		*e = SharedconnectionConnections200ApplicationJSONServiceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SharedconnectionConnections200ApplicationJSONServiceTypeEnum: %s", s)
	}
}

// SharedconnectionConnections200ApplicationJSON - SharedConnectionResponse
type SharedconnectionConnections200ApplicationJSON struct {
	// the type of the credential
	CredentialType *SharedconnectionConnections200ApplicationJSONCredentialTypeEnum `json:"credentialType,omitempty"`
	// display name of shared connection
	DisplayName string `json:"displayName"`
	// service type of shared connection can be apple|gitlab|googleplay|jira
	ServiceType SharedconnectionConnections200ApplicationJSONServiceTypeEnum `json:"serviceType"`
}

type SharedconnectionConnectionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SharedconnectionConnections200ApplicationJSONObjects []SharedconnectionConnections200ApplicationJSON
	// bad_request: proper details are not provided for connection in body.
	//
	SharedconnectionConnectionsDefaultApplicationJSONObject *SharedconnectionConnectionsDefaultApplicationJSON
}
