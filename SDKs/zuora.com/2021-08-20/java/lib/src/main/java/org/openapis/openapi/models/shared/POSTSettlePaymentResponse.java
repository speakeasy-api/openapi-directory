/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class POSTSettlePaymentResponse {
    /**
     * The ID of the customer account that the payment is for.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public POSTSettlePaymentResponse withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The total amount of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;
    public POSTSettlePaymentResponse withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The applied amount of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedAmount")
    public Double appliedAmount;
    public POSTSettlePaymentResponse withAppliedAmount(Double appliedAmount) {
        this.appliedAmount = appliedAmount;
        return this;
    }
    
    /**
     * The authorization transaction ID from the payment gateway.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTransactionId")
    public String authTransactionId;
    public POSTSettlePaymentResponse withAuthTransactionId(String authTransactionId) {
        this.authTransactionId = authTransactionId;
        return this;
    }
    
    /**
     * The first six digits of the credit card or debit card used for the payment, when applicable.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankIdentificationNumber")
    public String bankIdentificationNumber;
    public POSTSettlePaymentResponse withBankIdentificationNumber(String bankIdentificationNumber) {
        this.bankIdentificationNumber = bankIdentificationNumber;
        return this;
    }
    
    /**
     * The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("cancelledOn")
    public OffsetDateTime cancelledOn;
    public POSTSettlePaymentResponse withCancelledOn(OffsetDateTime cancelledOn) {
        this.cancelledOn = cancelledOn;
        return this;
    }
    
    /**
     * Comments about the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public POSTSettlePaymentResponse withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdById")
    public String createdById;
    public POSTSettlePaymentResponse withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public POSTSettlePaymentResponse withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditBalanceAmount")
    public Double creditBalanceAmount;
    public POSTSettlePaymentResponse withCreditBalanceAmount(Double creditBalanceAmount) {
        this.creditBalanceAmount = creditBalanceAmount;
        return this;
    }
    
    /**
     * A currency defined in the web-based UI administrative settings.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public POSTSettlePaymentResponse withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("effectiveDate")
    public OffsetDateTime effectiveDate;
    public POSTSettlePaymentResponse withEffectiveDate(OffsetDateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * Container for the finance information related to the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public POSTSettlePaymentResponseFinanceInformation financeInformation;
    public POSTSettlePaymentResponse withFinanceInformation(POSTSettlePaymentResponseFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The ID of the gateway instance that processes the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayId")
    public String gatewayId;
    public POSTSettlePaymentResponse withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }
    
    /**
     * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayOrderId")
    public String gatewayOrderId;
    public POSTSettlePaymentResponse withGatewayOrderId(String gatewayOrderId) {
        this.gatewayOrderId = gatewayOrderId;
        return this;
    }
    
    /**
     * The message returned from the payment gateway for the payment. This message is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayResponse")
    public String gatewayResponse;
    public POSTSettlePaymentResponse withGatewayResponse(String gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
        return this;
    }
    
    /**
     * The code returned from the payment gateway for the payment. This code is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayResponseCode")
    public String gatewayResponseCode;
    public POSTSettlePaymentResponse withGatewayResponseCode(String gatewayResponseCode) {
        this.gatewayResponseCode = gatewayResponseCode;
        return this;
    }
    
    /**
     * The status of the payment in the gateway; used for reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayState")
    public POSTSettlePaymentResponseGatewayStateEnum gatewayState;
    public POSTSettlePaymentResponse withGatewayState(POSTSettlePaymentResponseGatewayStateEnum gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * The ID of the payment chargeback.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public POSTSettlePaymentResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("markedForSubmissionOn")
    public OffsetDateTime markedForSubmissionOn;
    public POSTSettlePaymentResponse withMarkedForSubmissionOn(OffsetDateTime markedForSubmissionOn) {
        this.markedForSubmissionOn = markedForSubmissionOn;
        return this;
    }
    
    /**
     * The unique identification number of the payment. For example, P-00000001.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public POSTSettlePaymentResponse withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The unique ID of the payment method that the customer used to make the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodId")
    public String paymentMethodId;
    public POSTSettlePaymentResponse withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodSnapshotId")
    public String paymentMethodSnapshotId;
    public POSTSettlePaymentResponse withPaymentMethodSnapshotId(String paymentMethodSnapshotId) {
        this.paymentMethodSnapshotId = paymentMethodSnapshotId;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public String referenceId;
    public POSTSettlePaymentResponse withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * The amount of the payment that is refunded.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundAmount")
    public Double refundAmount;
    public POSTSettlePaymentResponse withRefundAmount(Double refundAmount) {
        this.refundAmount = refundAmount;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway if there is an additional transaction for the payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondPaymentReferenceId")
    public String secondPaymentReferenceId;
    public POSTSettlePaymentResponse withSecondPaymentReferenceId(String secondPaymentReferenceId) {
        this.secondPaymentReferenceId = secondPaymentReferenceId;
        return this;
    }
    
    /**
     * The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("settledOn")
    public OffsetDateTime settledOn;
    public POSTSettlePaymentResponse withSettledOn(OffsetDateTime settledOn) {
        this.settledOn = settledOn;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps Zuora to other gateways.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptor")
    public String softDescriptor;
    public POSTSettlePaymentResponse withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps Zuora to other gateways.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptorPhone")
    public String softDescriptorPhone;
    public POSTSettlePaymentResponse withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * The status of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public POSTSettlePaymentResponse withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("submittedOn")
    public OffsetDateTime submittedOn;
    public POSTSettlePaymentResponse withSubmittedOn(OffsetDateTime submittedOn) {
        this.submittedOn = submittedOn;
        return this;
    }
    
    /**
     * Indicates if the request is processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public POSTSettlePaymentResponse withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * The type of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public POSTSettlePaymentResponseTypeEnum type;
    public POSTSettlePaymentResponse withType(POSTSettlePaymentResponseTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The unapplied amount of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unappliedAmount")
    public Double unappliedAmount;
    public POSTSettlePaymentResponse withUnappliedAmount(Double unappliedAmount) {
        this.unappliedAmount = unappliedAmount;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedById")
    public String updatedById;
    public POSTSettlePaymentResponse withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedDate")
    public OffsetDateTime updatedDate;
    public POSTSettlePaymentResponse withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
