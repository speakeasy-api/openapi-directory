<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Badges 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List badges
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminListBadgesResponse
     */
	public function adminListBadges(
    ): \OpenAPI\OpenAPI\Models\Operations\AdminListBadgesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/badges.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminListBadgesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminListBadges200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AdminListBadges200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create badge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBadgeRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBadgeResponse
     */
	public function createBadge(
        \OpenAPI\OpenAPI\Models\Operations\CreateBadgeRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBadgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/badges.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBadgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBadge200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateBadge200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete badge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeResponse
     */
	public function deleteBadge(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/badges/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBadgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List badges for a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesResponse
     */
	public function listUserBadges(
        \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user-badges/{username}.json', \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserBadgesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserBadges200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUserBadges200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update badge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeResponse
     */
	public function updateBadge(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/badges/{id}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBadgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateBadge200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateBadge200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}