// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeAvailabilityZonesResultAvailabilityZonesMessages - Describes a message about an Availability Zone, Local Zone, or Wavelength Zone.
type DescribeAvailabilityZonesResultAvailabilityZonesMessages struct {
	Message *string
}

// DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum - <p>For Availability Zones, this parameter always has the value of <code>opt-in-not-required</code>.</p> <p>For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are <code>opted-in</code>, and <code>not-opted-in</code>.</p>
type DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum string

const (
	DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnumOptInNotRequired DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum = "opt-in-not-required"
	DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnumOptedIn          DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum = "opted-in"
	DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnumNotOptedIn       DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum = "not-opted-in"
)

func (e *DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "opt-in-not-required":
		fallthrough
	case "opted-in":
		fallthrough
	case "not-opted-in":
		*e = DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum: %s", s)
	}
}

// DescribeAvailabilityZonesResultAvailabilityZonesStateEnum - The state of the Availability Zone, Local Zone, or Wavelength Zone. This value is always <code>available</code>.
type DescribeAvailabilityZonesResultAvailabilityZonesStateEnum string

const (
	DescribeAvailabilityZonesResultAvailabilityZonesStateEnumAvailable   DescribeAvailabilityZonesResultAvailabilityZonesStateEnum = "available"
	DescribeAvailabilityZonesResultAvailabilityZonesStateEnumInformation DescribeAvailabilityZonesResultAvailabilityZonesStateEnum = "information"
	DescribeAvailabilityZonesResultAvailabilityZonesStateEnumImpaired    DescribeAvailabilityZonesResultAvailabilityZonesStateEnum = "impaired"
	DescribeAvailabilityZonesResultAvailabilityZonesStateEnumUnavailable DescribeAvailabilityZonesResultAvailabilityZonesStateEnum = "unavailable"
)

func (e *DescribeAvailabilityZonesResultAvailabilityZonesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "information":
		fallthrough
	case "impaired":
		fallthrough
	case "unavailable":
		*e = DescribeAvailabilityZonesResultAvailabilityZonesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAvailabilityZonesResultAvailabilityZonesStateEnum: %s", s)
	}
}

// DescribeAvailabilityZonesResultAvailabilityZones - Describes Availability Zones, Local Zones, and Wavelength Zones.
type DescribeAvailabilityZonesResultAvailabilityZones struct {
	GroupName          *string
	Messages           []DescribeAvailabilityZonesResultAvailabilityZonesMessages
	NetworkBorderGroup *string
	OptInStatus        *DescribeAvailabilityZonesResultAvailabilityZonesOptInStatusEnum
	ParentZoneID       *string
	ParentZoneName     *string
	RegionName         *string
	State              *DescribeAvailabilityZonesResultAvailabilityZonesStateEnum
	ZoneID             *string
	ZoneName           *string
	ZoneType           *string
}

// DescribeAvailabilityZonesResult - Success
type DescribeAvailabilityZonesResult struct {
	AvailabilityZones []DescribeAvailabilityZonesResultAvailabilityZones
}
