/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TerminalOrdersMerchantLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of billing entities
   *
   * @remarks
   * Returns the billing entities of the merchant account identified in the path.
   * A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdBillingEntities(
    req: operations.GetMerchantsMerchantIdBillingEntitiesRequest,
    security: operations.GetMerchantsMerchantIdBillingEntitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdBillingEntitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdBillingEntitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/billingEntities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdBillingEntitiesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdBillingEntitiesResponse =
        new operations.GetMerchantsMerchantIdBillingEntitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.billingEntitiesResponse = utils.objectToClass(
              httpRes?.data,
              shared.BillingEntitiesResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of shipping locations
   *
   * @remarks
   * Returns the shipping locations for the merchant account identified in the path.
   * A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdShippingLocations(
    req: operations.GetMerchantsMerchantIdShippingLocationsRequest,
    security: operations.GetMerchantsMerchantIdShippingLocationsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdShippingLocationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdShippingLocationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/shippingLocations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdShippingLocationsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdShippingLocationsResponse =
        new operations.GetMerchantsMerchantIdShippingLocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shippingLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ShippingLocationsResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of terminal models
   *
   * @remarks
   * Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdTerminalModels(
    req: operations.GetMerchantsMerchantIdTerminalModelsRequest,
    security: operations.GetMerchantsMerchantIdTerminalModelsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdTerminalModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdTerminalModelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalModels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdTerminalModelsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdTerminalModelsResponse =
        new operations.GetMerchantsMerchantIdTerminalModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalModelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TerminalModelsResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of orders
   *
   * @remarks
   * Returns a list of terminal products orders for the merchant account identified in the path.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdTerminalOrders(
    req: operations.GetMerchantsMerchantIdTerminalOrdersRequest,
    security: operations.GetMerchantsMerchantIdTerminalOrdersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdTerminalOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdTerminalOrdersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalOrders",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdTerminalOrdersSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdTerminalOrdersResponse =
        new operations.GetMerchantsMerchantIdTerminalOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalOrdersResponse = utils.objectToClass(
              httpRes?.data,
              shared.TerminalOrdersResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an order
   *
   * @remarks
   * Returns the details of the terminal products order identified in the path.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdTerminalOrdersOrderId(
    req: operations.GetMerchantsMerchantIdTerminalOrdersOrderIdRequest,
    security: operations.GetMerchantsMerchantIdTerminalOrdersOrderIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdTerminalOrdersOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdTerminalOrdersOrderIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalOrders/{orderId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetMerchantsMerchantIdTerminalOrdersOrderIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdTerminalOrdersOrderIdResponse =
        new operations.GetMerchantsMerchantIdTerminalOrdersOrderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalOrder = utils.objectToClass(
              httpRes?.data,
              shared.TerminalOrder
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of terminal products
   *
   * @remarks
   * Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read
   * * Management API—Terminal ordering read and write
   */
  getMerchantsMerchantIdTerminalProducts(
    req: operations.GetMerchantsMerchantIdTerminalProductsRequest,
    security: operations.GetMerchantsMerchantIdTerminalProductsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdTerminalProductsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdTerminalProductsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalProducts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdTerminalProductsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdTerminalProductsResponse =
        new operations.GetMerchantsMerchantIdTerminalProductsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalProductsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TerminalProductsResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an order
   *
   * @remarks
   * Updates the terminal products order identified in the path.
   * Updating is only possible while the order has the status **Placed**.
   *
   * The request body only needs to contain what you want to change.
   * However, to update the products in the `items` array, you must provice the entire array. For example, if the array has three items:
   *  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read and write
   */
  patchMerchantsMerchantIdTerminalOrdersOrderId(
    req: operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdRequest,
    security: operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalOrders/{orderId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "terminalOrderRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse =
        new operations.PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalOrder = utils.objectToClass(
              httpRes?.data,
              shared.TerminalOrder
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a shipping location
   *
   * @remarks
   * Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read and write
   */
  postMerchantsMerchantIdShippingLocations(
    req: operations.PostMerchantsMerchantIdShippingLocationsRequest,
    security: operations.PostMerchantsMerchantIdShippingLocationsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdShippingLocationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMerchantsMerchantIdShippingLocationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/shippingLocations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "shippingLocation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostMerchantsMerchantIdShippingLocationsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdShippingLocationsResponse =
        new operations.PostMerchantsMerchantIdShippingLocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shippingLocation = utils.objectToClass(
              httpRes?.data,
              shared.ShippingLocation
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an order
   *
   * @remarks
   * Creates an order for payment terminal products for the merchant account identified in the path.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read and write
   */
  postMerchantsMerchantIdTerminalOrders(
    req: operations.PostMerchantsMerchantIdTerminalOrdersRequest,
    security: operations.PostMerchantsMerchantIdTerminalOrdersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdTerminalOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMerchantsMerchantIdTerminalOrdersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalOrders",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "terminalOrderRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostMerchantsMerchantIdTerminalOrdersSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdTerminalOrdersResponse =
        new operations.PostMerchantsMerchantIdTerminalOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalOrder = utils.objectToClass(
              httpRes?.data,
              shared.TerminalOrder
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancel an order
   *
   * @remarks
   * Cancels the terminal products order identified in the path.
   * Cancelling is only possible while the order has the status **Placed**.
   * To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal ordering read and write
   */
  postMerchantsMerchantIdTerminalOrdersOrderIdCancel(
    req: operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelRequest,
    security: operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/terminalOrders/{orderId}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse =
        new operations.PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalOrder = utils.objectToClass(
              httpRes?.data,
              shared.TerminalOrder
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
