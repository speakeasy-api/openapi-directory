// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ScoreCommentTypeEnum - The type of the comment
type ScoreCommentTypeEnum string

const (
	ScoreCommentTypeEnumDocument ScoreCommentTypeEnum = "document"
	ScoreCommentTypeEnumInline   ScoreCommentTypeEnum = "inline"
)

func (e ScoreCommentTypeEnum) ToPointer() *ScoreCommentTypeEnum {
	return &e
}

func (e *ScoreCommentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "document":
		fallthrough
	case "inline":
		*e = ScoreCommentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreCommentTypeEnum: %v", v)
	}
}

// ScoreComment - Comment added on a sheet music
type ScoreComment struct {
	// The comment text that can includes mentions using the following
	// format: `@[id:username]`.
	//
	Comment *string `json:"comment,omitempty"`
	// The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
	//
	Context *ScoreCommentContext `json:"context,omitempty"`
	// The date when the comment was posted
	Date *time.Time `json:"date,omitempty"`
	// The comment unique identifier
	ID *string `json:"id,omitempty"`
	// The list of user identifier mentioned on the score
	Mentions []string `json:"mentions,omitempty"`
	// The date of the last comment modification
	ModificationDate *time.Time `json:"modificationDate,omitempty"`
	// A raw version of the comment, that can be displayed without parsing
	// the mentions.
	//
	RawComment *string `json:"rawComment,omitempty"`
	// When the comment is a reply to another comment, the unique identifier of the parent comment
	//
	ReplyTo *string `json:"replyTo,omitempty"`
	// For inline comments, the comment can be marked as resolved and will be hidden in the future responses
	//
	Resolved *bool `json:"resolved,omitempty"`
	// If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
	//
	ResolvedBy *string `json:"resolvedBy,omitempty"`
	// The unique identifier of revision the comment was posted
	Revision *string `json:"revision,omitempty"`
	// The unique identifier of the score where the comment was posted
	Score *string `json:"score,omitempty"`
	// `true  if the message has been detected as spam and hidden from other users
	//
	Spam *bool `json:"spam,omitempty"`
	// The type of the comment
	Type *ScoreCommentTypeEnum `json:"type,omitempty"`
	// The author unique identifier
	User *string `json:"user,omitempty"`
}
