"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_group_to_customer(self, request: operations.AddGroupToCustomerRequest, security: operations.AddGroupToCustomerSecurity) -> operations.AddGroupToCustomerResponse:
        r"""AddGroupToCustomer
        Adds a group membership to a customer.
        
        The customer is identified by the `customer_id` value
        and the customer group is identified by the `group_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddGroupToCustomerRequest, base_url, '/v2/customers/{customer_id}/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddGroupToCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddGroupToCustomerResponse])
                res.add_group_to_customer_response = out

        return res

    def create_customer(self, request: shared.CreateCustomerRequest, security: operations.CreateCustomerSecurity) -> operations.CreateCustomerResponse:
        r"""CreateCustomer
        Creates a new customer for a business.
        
        You must provide at least one of the following values in your request to this
        endpoint:
        
        - `given_name`
        - `family_name`
        - `company_name`
        - `email_address`
        - `phone_number`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCustomerResponse])
                res.create_customer_response = out

        return res

    def create_customer_card(self, request: operations.CreateCustomerCardRequest, security: operations.CreateCustomerCardSecurity) -> operations.CreateCustomerCardResponse:
        r"""CreateCustomerCard
        Adds a card on file to an existing customer.
        
        As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
        calls with the same card nonce return the same card record that was created
        with the provided nonce during the _first_ call.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCustomerCardRequest, base_url, '/v2/customers/{customer_id}/cards', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_customer_card_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCustomerCardResponse])
                res.create_customer_card_response = out

        return res

    def delete_customer(self, request: operations.DeleteCustomerRequest, security: operations.DeleteCustomerSecurity) -> operations.DeleteCustomerResponse:
        r"""DeleteCustomer
        Deletes a customer profile from a business. This operation also unlinks any associated cards on file. 
        
        As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile. 
        
        To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomerRequest, base_url, '/v2/customers/{customer_id}', request)
        
        query_params = utils.get_query_params(operations.DeleteCustomerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteCustomerResponse])
                res.delete_customer_response = out

        return res

    def delete_customer_card(self, request: operations.DeleteCustomerCardRequest, security: operations.DeleteCustomerCardSecurity) -> operations.DeleteCustomerCardResponse:
        r"""DeleteCustomerCard
        Removes a card on file from a customer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomerCardRequest, base_url, '/v2/customers/{customer_id}/cards/{card_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteCustomerCardResponse])
                res.delete_customer_card_response = out

        return res

    def list_customers(self, request: operations.ListCustomersRequest, security: operations.ListCustomersSecurity) -> operations.ListCustomersResponse:
        r"""ListCustomers
        Lists customer profiles associated with a Square account.
        
        Under normal operating conditions, newly created or updated customer profiles become available
        for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
        profiles can take closer to one minute or longer, especially during network incidents and outages.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers'
        
        query_params = utils.get_query_params(operations.ListCustomersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomersResponse])
                res.list_customers_response = out

        return res

    def remove_group_from_customer(self, request: operations.RemoveGroupFromCustomerRequest, security: operations.RemoveGroupFromCustomerSecurity) -> operations.RemoveGroupFromCustomerResponse:
        r"""RemoveGroupFromCustomer
        Removes a group membership from a customer.
        
        The customer is identified by the `customer_id` value
        and the customer group is identified by the `group_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveGroupFromCustomerRequest, base_url, '/v2/customers/{customer_id}/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveGroupFromCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoveGroupFromCustomerResponse])
                res.remove_group_from_customer_response = out

        return res

    def retrieve_customer(self, request: operations.RetrieveCustomerRequest, security: operations.RetrieveCustomerSecurity) -> operations.RetrieveCustomerResponse:
        r"""RetrieveCustomer
        Returns details for a single customer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveCustomerRequest, base_url, '/v2/customers/{customer_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveCustomerResponse])
                res.retrieve_customer_response = out

        return res

    def search_customers(self, request: shared.SearchCustomersRequest, security: operations.SearchCustomersSecurity) -> operations.SearchCustomersResponse:
        r"""SearchCustomers
        Searches the customer profiles associated with a Square account using a supported query filter.
        
        Calling `SearchCustomers` without any explicit query filter returns all
        customer profiles ordered alphabetically based on `given_name` and
        `family_name`.
        
        Under normal operating conditions, newly created or updated customer profiles become available
        for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
        profiles can take closer to one minute or longer, especially during network incidents and outages.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchCustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchCustomersResponse])
                res.search_customers_response = out

        return res

    def update_customer(self, request: operations.UpdateCustomerRequest, security: operations.UpdateCustomerSecurity) -> operations.UpdateCustomerResponse:
        r"""UpdateCustomer
        Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.
        
        As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
        
        To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
        
        You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](https://developer.squareup.com/reference/square_2021-08-18/cards-api) or [Gift Cards API](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomerRequest, base_url, '/v2/customers/{customer_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_customer_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateCustomerResponse])
                res.update_customer_response = out

        return res

    