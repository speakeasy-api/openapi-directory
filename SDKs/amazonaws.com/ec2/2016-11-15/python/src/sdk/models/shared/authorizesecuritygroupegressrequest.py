"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestIPPermissionsIPRanges:
    r"""Describes an IPv4 range."""
    
    cidr_ip: Optional[str] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestIPPermissionsIpv6Ranges:
    r"""[EC2-VPC only] Describes an IPv6 range."""
    
    cidr_ipv6: Optional[str] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestIPPermissionsPrefixListIds:
    r"""Describes a prefix list ID."""
    
    description: Optional[str] = dataclasses.field(default=None)  
    prefix_list_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestIPPermissionsUserIDGroupPairs:
    r"""<p>Describes a security group and Amazon Web Services account ID pair.</p> <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html\\">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note>"""
    
    description: Optional[str] = dataclasses.field(default=None)  
    group_id: Optional[str] = dataclasses.field(default=None)  
    group_name: Optional[str] = dataclasses.field(default=None)  
    peering_status: Optional[str] = dataclasses.field(default=None)  
    user_id: Optional[str] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    vpc_peering_connection_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestIPPermissions:
    r"""Describes a set of permissions for a security group rule."""
    
    from_port: Optional[int] = dataclasses.field(default=None)  
    ip_protocol: Optional[str] = dataclasses.field(default=None)  
    ip_ranges: Optional[list[AuthorizeSecurityGroupEgressRequestIPPermissionsIPRanges]] = dataclasses.field(default=None)  
    ipv6_ranges: Optional[list[AuthorizeSecurityGroupEgressRequestIPPermissionsIpv6Ranges]] = dataclasses.field(default=None)  
    prefix_list_ids: Optional[list[AuthorizeSecurityGroupEgressRequestIPPermissionsPrefixListIds]] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    user_id_group_pairs: Optional[list[AuthorizeSecurityGroupEgressRequestIPPermissionsUserIDGroupPairs]] = dataclasses.field(default=None)  
    
class AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum(str, Enum):
    r"""The type of resource to tag on creation."""
    CAPACITY_RESERVATION = 'capacity-reservation'
    CLIENT_VPN_ENDPOINT = 'client-vpn-endpoint'
    CUSTOMER_GATEWAY = 'customer-gateway'
    CARRIER_GATEWAY = 'carrier-gateway'
    COIP_POOL = 'coip-pool'
    DEDICATED_HOST = 'dedicated-host'
    DHCP_OPTIONS = 'dhcp-options'
    EGRESS_ONLY_INTERNET_GATEWAY = 'egress-only-internet-gateway'
    ELASTIC_IP = 'elastic-ip'
    ELASTIC_GPU = 'elastic-gpu'
    EXPORT_IMAGE_TASK = 'export-image-task'
    EXPORT_INSTANCE_TASK = 'export-instance-task'
    FLEET = 'fleet'
    FPGA_IMAGE = 'fpga-image'
    HOST_RESERVATION = 'host-reservation'
    IMAGE = 'image'
    IMPORT_IMAGE_TASK = 'import-image-task'
    IMPORT_SNAPSHOT_TASK = 'import-snapshot-task'
    INSTANCE = 'instance'
    INSTANCE_EVENT_WINDOW = 'instance-event-window'
    INTERNET_GATEWAY = 'internet-gateway'
    IPAM = 'ipam'
    IPAM_POOL = 'ipam-pool'
    IPAM_SCOPE = 'ipam-scope'
    IPV4POOL_EC2 = 'ipv4pool-ec2'
    IPV6POOL_EC2 = 'ipv6pool-ec2'
    KEY_PAIR = 'key-pair'
    LAUNCH_TEMPLATE = 'launch-template'
    LOCAL_GATEWAY = 'local-gateway'
    LOCAL_GATEWAY_ROUTE_TABLE = 'local-gateway-route-table'
    LOCAL_GATEWAY_VIRTUAL_INTERFACE = 'local-gateway-virtual-interface'
    LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUP = 'local-gateway-virtual-interface-group'
    LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'local-gateway-route-table-vpc-association'
    LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATION = 'local-gateway-route-table-virtual-interface-group-association'
    NATGATEWAY = 'natgateway'
    NETWORK_ACL = 'network-acl'
    NETWORK_INTERFACE = 'network-interface'
    NETWORK_INSIGHTS_ANALYSIS = 'network-insights-analysis'
    NETWORK_INSIGHTS_PATH = 'network-insights-path'
    NETWORK_INSIGHTS_ACCESS_SCOPE = 'network-insights-access-scope'
    NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSIS = 'network-insights-access-scope-analysis'
    PLACEMENT_GROUP = 'placement-group'
    PREFIX_LIST = 'prefix-list'
    REPLACE_ROOT_VOLUME_TASK = 'replace-root-volume-task'
    RESERVED_INSTANCES = 'reserved-instances'
    ROUTE_TABLE = 'route-table'
    SECURITY_GROUP = 'security-group'
    SECURITY_GROUP_RULE = 'security-group-rule'
    SNAPSHOT = 'snapshot'
    SPOT_FLEET_REQUEST = 'spot-fleet-request'
    SPOT_INSTANCES_REQUEST = 'spot-instances-request'
    SUBNET = 'subnet'
    SUBNET_CIDR_RESERVATION = 'subnet-cidr-reservation'
    TRAFFIC_MIRROR_FILTER = 'traffic-mirror-filter'
    TRAFFIC_MIRROR_SESSION = 'traffic-mirror-session'
    TRAFFIC_MIRROR_TARGET = 'traffic-mirror-target'
    TRANSIT_GATEWAY = 'transit-gateway'
    TRANSIT_GATEWAY_ATTACHMENT = 'transit-gateway-attachment'
    TRANSIT_GATEWAY_CONNECT_PEER = 'transit-gateway-connect-peer'
    TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'transit-gateway-multicast-domain'
    TRANSIT_GATEWAY_POLICY_TABLE = 'transit-gateway-policy-table'
    TRANSIT_GATEWAY_ROUTE_TABLE = 'transit-gateway-route-table'
    TRANSIT_GATEWAY_ROUTE_TABLE_ANNOUNCEMENT = 'transit-gateway-route-table-announcement'
    VOLUME = 'volume'
    VPC = 'vpc'
    VPC_ENDPOINT = 'vpc-endpoint'
    VPC_ENDPOINT_CONNECTION = 'vpc-endpoint-connection'
    VPC_ENDPOINT_SERVICE = 'vpc-endpoint-service'
    VPC_ENDPOINT_SERVICE_PERMISSION = 'vpc-endpoint-service-permission'
    VPC_PEERING_CONNECTION = 'vpc-peering-connection'
    VPN_CONNECTION = 'vpn-connection'
    VPN_GATEWAY = 'vpn-gateway'
    VPC_FLOW_LOG = 'vpc-flow-log'
    CAPACITY_RESERVATION_FLEET = 'capacity-reservation-fleet'
    TRAFFIC_MIRROR_FILTER_RULE = 'traffic-mirror-filter-rule'
    VPC_ENDPOINT_CONNECTION_DEVICE_TYPE = 'vpc-endpoint-connection-device-type'
    VERIFIED_ACCESS_INSTANCE = 'verified-access-instance'
    VERIFIED_ACCESS_GROUP = 'verified-access-group'
    VERIFIED_ACCESS_ENDPOINT = 'verified-access-endpoint'
    VERIFIED_ACCESS_POLICY = 'verified-access-policy'
    VERIFIED_ACCESS_TRUST_PROVIDER = 'verified-access-trust-provider'
    VPN_CONNECTION_DEVICE_TYPE = 'vpn-connection-device-type'
    VPC_BLOCK_PUBLIC_ACCESS_EXCLUSION = 'vpc-block-public-access-exclusion'
    IPAM_RESOURCE_DISCOVERY = 'ipam-resource-discovery'
    IPAM_RESOURCE_DISCOVERY_ASSOCIATION = 'ipam-resource-discovery-association'


@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestTagSpecificationsTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequestTagSpecifications:
    r"""<p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>"""
    
    resource_type: Optional[AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum] = dataclasses.field(default=None)  
    tags: Optional[list[AuthorizeSecurityGroupEgressRequestTagSpecificationsTags]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequest:
    
    group_id: str = dataclasses.field()  
    cidr_ip: Optional[str] = dataclasses.field(default=None)  
    dry_run: Optional[bool] = dataclasses.field(default=None)  
    from_port: Optional[int] = dataclasses.field(default=None)  
    ip_permissions: Optional[list[AuthorizeSecurityGroupEgressRequestIPPermissions]] = dataclasses.field(default=None)  
    ip_protocol: Optional[str] = dataclasses.field(default=None)  
    source_security_group_name: Optional[str] = dataclasses.field(default=None)  
    source_security_group_owner_id: Optional[str] = dataclasses.field(default=None)  
    tag_specifications: Optional[list[AuthorizeSecurityGroupEgressRequestTagSpecifications]] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    