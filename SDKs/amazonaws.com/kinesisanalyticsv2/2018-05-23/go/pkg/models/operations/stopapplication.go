// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StopApplicationXAmzTargetEnum
type StopApplicationXAmzTargetEnum string

const (
	StopApplicationXAmzTargetEnumKinesisAnalytics20180523StopApplication StopApplicationXAmzTargetEnum = "KinesisAnalytics_20180523.StopApplication"
)

func (e StopApplicationXAmzTargetEnum) ToPointer() *StopApplicationXAmzTargetEnum {
	return &e
}

func (e *StopApplicationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KinesisAnalytics_20180523.StopApplication":
		*e = StopApplicationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopApplicationXAmzTargetEnum: %v", v)
	}
}

type StopApplicationRequest struct {
	StopApplicationRequest shared.StopApplicationRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             StopApplicationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StopApplicationResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidApplicationConfigurationException
	InvalidApplicationConfigurationException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StopApplicationResponse map[string]interface{}
}
