// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PolicyRepresentationDecisionStrategyEnum string

const (
	PolicyRepresentationDecisionStrategyEnumAffirmative PolicyRepresentationDecisionStrategyEnum = "AFFIRMATIVE"
	PolicyRepresentationDecisionStrategyEnumUnanimous   PolicyRepresentationDecisionStrategyEnum = "UNANIMOUS"
	PolicyRepresentationDecisionStrategyEnumConsensus   PolicyRepresentationDecisionStrategyEnum = "CONSENSUS"
)

func (e *PolicyRepresentationDecisionStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AFFIRMATIVE":
		fallthrough
	case "UNANIMOUS":
		fallthrough
	case "CONSENSUS":
		*e = PolicyRepresentationDecisionStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRepresentationDecisionStrategyEnum: %s", s)
	}
}

type PolicyRepresentationLogicEnum string

const (
	PolicyRepresentationLogicEnumPositive PolicyRepresentationLogicEnum = "POSITIVE"
	PolicyRepresentationLogicEnumNegative PolicyRepresentationLogicEnum = "NEGATIVE"
)

func (e *PolicyRepresentationLogicEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POSITIVE":
		fallthrough
	case "NEGATIVE":
		*e = PolicyRepresentationLogicEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRepresentationLogicEnum: %s", s)
	}
}

type PolicyRepresentation struct {
	Config           map[string]interface{}                    `json:"config,omitempty"`
	DecisionStrategy *PolicyRepresentationDecisionStrategyEnum `json:"decisionStrategy,omitempty"`
	Description      *string                                   `json:"description,omitempty"`
	ID               *string                                   `json:"id,omitempty"`
	Logic            *PolicyRepresentationLogicEnum            `json:"logic,omitempty"`
	Name             *string                                   `json:"name,omitempty"`
	Owner            *string                                   `json:"owner,omitempty"`
	Policies         []string                                  `json:"policies,omitempty"`
	Resources        []string                                  `json:"resources,omitempty"`
	ResourcesData    []ResourceRepresentation                  `json:"resourcesData,omitempty"`
	Scopes           []string                                  `json:"scopes,omitempty"`
	ScopesData       []ScopeRepresentation                     `json:"scopesData,omitempty"`
	Type             *string                                   `json:"type,omitempty"`
}
