// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PivotValueCalculatedDisplayTypeEnum - If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
type PivotValueCalculatedDisplayTypeEnum string

const (
	PivotValueCalculatedDisplayTypeEnumPivotValueCalculatedDisplayTypeUnspecified PivotValueCalculatedDisplayTypeEnum = "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED"
	PivotValueCalculatedDisplayTypeEnumPercentOfRowTotal                          PivotValueCalculatedDisplayTypeEnum = "PERCENT_OF_ROW_TOTAL"
	PivotValueCalculatedDisplayTypeEnumPercentOfColumnTotal                       PivotValueCalculatedDisplayTypeEnum = "PERCENT_OF_COLUMN_TOTAL"
	PivotValueCalculatedDisplayTypeEnumPercentOfGrandTotal                        PivotValueCalculatedDisplayTypeEnum = "PERCENT_OF_GRAND_TOTAL"
)

func (e *PivotValueCalculatedDisplayTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED":
		fallthrough
	case "PERCENT_OF_ROW_TOTAL":
		fallthrough
	case "PERCENT_OF_COLUMN_TOTAL":
		fallthrough
	case "PERCENT_OF_GRAND_TOTAL":
		*e = PivotValueCalculatedDisplayTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PivotValueCalculatedDisplayTypeEnum: %s", s)
	}
}

// PivotValueSummarizeFunctionEnum - A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
type PivotValueSummarizeFunctionEnum string

const (
	PivotValueSummarizeFunctionEnumPivotStandardValueFunctionUnspecified PivotValueSummarizeFunctionEnum = "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED"
	PivotValueSummarizeFunctionEnumSum                                   PivotValueSummarizeFunctionEnum = "SUM"
	PivotValueSummarizeFunctionEnumCounta                                PivotValueSummarizeFunctionEnum = "COUNTA"
	PivotValueSummarizeFunctionEnumCount                                 PivotValueSummarizeFunctionEnum = "COUNT"
	PivotValueSummarizeFunctionEnumCountunique                           PivotValueSummarizeFunctionEnum = "COUNTUNIQUE"
	PivotValueSummarizeFunctionEnumAverage                               PivotValueSummarizeFunctionEnum = "AVERAGE"
	PivotValueSummarizeFunctionEnumMax                                   PivotValueSummarizeFunctionEnum = "MAX"
	PivotValueSummarizeFunctionEnumMin                                   PivotValueSummarizeFunctionEnum = "MIN"
	PivotValueSummarizeFunctionEnumMedian                                PivotValueSummarizeFunctionEnum = "MEDIAN"
	PivotValueSummarizeFunctionEnumProduct                               PivotValueSummarizeFunctionEnum = "PRODUCT"
	PivotValueSummarizeFunctionEnumStdev                                 PivotValueSummarizeFunctionEnum = "STDEV"
	PivotValueSummarizeFunctionEnumStdevp                                PivotValueSummarizeFunctionEnum = "STDEVP"
	PivotValueSummarizeFunctionEnumVar                                   PivotValueSummarizeFunctionEnum = "VAR"
	PivotValueSummarizeFunctionEnumVarp                                  PivotValueSummarizeFunctionEnum = "VARP"
	PivotValueSummarizeFunctionEnumCustom                                PivotValueSummarizeFunctionEnum = "CUSTOM"
)

func (e *PivotValueSummarizeFunctionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED":
		fallthrough
	case "SUM":
		fallthrough
	case "COUNTA":
		fallthrough
	case "COUNT":
		fallthrough
	case "COUNTUNIQUE":
		fallthrough
	case "AVERAGE":
		fallthrough
	case "MAX":
		fallthrough
	case "MIN":
		fallthrough
	case "MEDIAN":
		fallthrough
	case "PRODUCT":
		fallthrough
	case "STDEV":
		fallthrough
	case "STDEVP":
		fallthrough
	case "VAR":
		fallthrough
	case "VARP":
		fallthrough
	case "CUSTOM":
		*e = PivotValueSummarizeFunctionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PivotValueSummarizeFunctionEnum: %s", s)
	}
}

// PivotValue - The definition of how a value in a pivot table should be calculated.
type PivotValue struct {
	// If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
	CalculatedDisplayType *PivotValueCalculatedDisplayTypeEnum `json:"calculatedDisplayType,omitempty"`
	// An unique identifier that references a data source column.
	DataSourceColumnReference *DataSourceColumnReference `json:"dataSourceColumnReference,omitempty"`
	// A custom formula to calculate the value. The formula must start with an `=` character.
	Formula *string `json:"formula,omitempty"`
	// A name to use for the value.
	Name *string `json:"name,omitempty"`
	// The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
	SourceColumnOffset *int `json:"sourceColumnOffset,omitempty"`
	// A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
	SummarizeFunction *PivotValueSummarizeFunctionEnum `json:"summarizeFunction,omitempty"`
}
