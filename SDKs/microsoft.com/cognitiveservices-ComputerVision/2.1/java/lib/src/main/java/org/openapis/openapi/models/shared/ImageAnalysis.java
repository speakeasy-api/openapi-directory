/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImageAnalysis - Result of AnalyzeImage operation.
 */
public class ImageAnalysis {
    /**
     * An object describing whether the image contains adult-oriented content and/or is racy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adult")
    public AdultInfo adult;

    public ImageAnalysis withAdult(AdultInfo adult) {
        this.adult = adult;
        return this;
    }
    
    /**
     * Array of brands detected in the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brands")
    public DetectedBrand[] brands;

    public ImageAnalysis withBrands(DetectedBrand[] brands) {
        this.brands = brands;
        return this;
    }
    
    /**
     * An array indicating identified categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Category[] categories;

    public ImageAnalysis withCategories(Category[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * An object providing additional metadata describing color attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public ColorInfo color;

    public ImageAnalysis withColor(ColorInfo color) {
        this.color = color;
        return this;
    }
    
    /**
     * A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public ImageDescriptionDetails description;

    public ImageAnalysis withDescription(ImageDescriptionDetails description) {
        this.description = description;
        return this;
    }
    
    /**
     * An array of possible faces within the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("faces")
    public FaceDescription[] faces;

    public ImageAnalysis withFaces(FaceDescription[] faces) {
        this.faces = faces;
        return this;
    }
    
    /**
     * An object providing possible image types and matching confidence levels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageType")
    public ImageType imageType;

    public ImageAnalysis withImageType(ImageType imageType) {
        this.imageType = imageType;
        return this;
    }
    
    /**
     * Image metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ImageMetadata metadata;

    public ImageAnalysis withMetadata(ImageMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Array of objects describing what was detected in the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objects")
    public DetectedObject[] objects;

    public ImageAnalysis withObjects(DetectedObject[] objects) {
        this.objects = objects;
        return this;
    }
    
    /**
     * Id of the REST API request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestId")
    public String requestId;

    public ImageAnalysis withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
    /**
     * A list of tags with confidence level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public ImageTag[] tags;

    public ImageAnalysis withTags(ImageTag[] tags) {
        this.tags = tags;
        return this;
    }
    
    public ImageAnalysis(){}
}
