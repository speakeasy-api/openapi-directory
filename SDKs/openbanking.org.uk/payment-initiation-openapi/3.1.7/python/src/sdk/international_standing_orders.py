"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InternationalStandingOrders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_international_standing_order_consents_json(self, request: operations.CreateInternationalStandingOrderConsentsJSONRequest, security: operations.CreateInternationalStandingOrderConsentsJSONSecurity) -> operations.CreateInternationalStandingOrderConsentsJSONResponse:
        r"""Create International Standing Order Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-standing-order-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_international_standing_order_consent6", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalStandingOrderConsentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_standing_order_consents_raw(self, request: operations.CreateInternationalStandingOrderConsentsRawRequest, security: operations.CreateInternationalStandingOrderConsentsRawSecurity) -> operations.CreateInternationalStandingOrderConsentsRawResponse:
        r"""Create International Standing Order Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-standing-order-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalStandingOrderConsentsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_standing_orders_json(self, request: operations.CreateInternationalStandingOrdersJSONRequest, security: operations.CreateInternationalStandingOrdersJSONSecurity) -> operations.CreateInternationalStandingOrdersJSONResponse:
        r"""Create International Standing Orders"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-standing-orders'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_international_standing_order4", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalStandingOrdersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_standing_orders_raw(self, request: operations.CreateInternationalStandingOrdersRawRequest, security: operations.CreateInternationalStandingOrdersRawSecurity) -> operations.CreateInternationalStandingOrdersRawResponse:
        r"""Create International Standing Orders"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-standing-orders'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalStandingOrdersRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_international_standing_order_consents_consent_id(self, request: operations.GetInternationalStandingOrderConsentsConsentIDRequest, security: operations.GetInternationalStandingOrderConsentsConsentIDSecurity) -> operations.GetInternationalStandingOrderConsentsConsentIDResponse:
        r"""Get International Standing Order Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInternationalStandingOrderConsentsConsentIDRequest, base_url, '/international-standing-order-consents/{ConsentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInternationalStandingOrderConsentsConsentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderConsentResponse7])
                res.ob_write_international_standing_order_consent_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_international_standing_orders_international_standing_order_payment_id(self, request: operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIDRequest, security: operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIDSecurity) -> operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIDResponse:
        r"""Get International Standing Orders"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIDRequest, base_url, '/international-standing-orders/{InternationalStandingOrderPaymentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalStandingOrderResponse7])
                res.ob_write_international_standing_order_response7 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    