"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .admin import Admin
from .artifact_rules import ArtifactRules
from .artifact_type import ArtifactType
from .artifacts import Artifacts
from .global_rules import GlobalRules
from .groups import Groups
from .metadata import Metadata
from .search import Search
from .system import System
from .users import Users
from .versions import Versions

SERVERS = [
    "http://apicurio.local",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.
    
    The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata. 
    
    The supported artifact types include:
    - Apache Avro schema
    - AsyncAPI specification
    - Google protocol buffers
    - GraphQL schema
    - JSON Schema
    - Kafka Connect schema
    - OpenAPI specification
    - Web Services Description Language
    - XML Schema Definition
    
    
    **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.
    """
    admin: Admin
    r"""Application functionality that is only accessible to admin users.  Includes logging, global rules, and export/import of registry data."""
    artifact_type: ArtifactType
    artifact_rules: ArtifactRules
    r"""Rules can be configured on a per-artifact basis, allowing for different approaches
    to content evolution for each artifact.  These rules override any global rules
    that have been configured. This section contains the operations used to manage a
    single artifact's rules.
    """
    artifacts: Artifacts
    r"""The primary way to interact with the Apicurio Registry API is to add, update,
    or delete artifacts. This section includes all of these primary operations.
    """
    global_rules: GlobalRules
    r"""Global rules can be configured in the registry to govern how artifact content can
    evolve over time (as artifact content is **updated**). Global rules are applied 
    whenever an artifact is added to the registry, and also whenever an artifact's 
    content is updated (only if that artifact does not have its own specific rules 
    configured). This section describes the operations used to manage the global rules.
    """
    groups: Groups
    r"""Registry artifacts can be collected together using groups. This section includes all of the primary operations related to groups."""
    metadata: Metadata
    r"""Sometimes the metadata for an artifact is important. For example, metadata includes
    when the artifact was created, last updated, and so on. This section contains 
    operations to access (and in some cases change) an artifact's metadata.
    """
    search: Search
    r"""The search API is used to browse or find artifacts in the registry. This section describes the operations for searching for artifacts and versions."""
    system: System
    r"""System level functionality, including versioning and status information."""
    users: Users
    r"""Operations related to users."""
    versions: Versions
    r"""When artifact content is updated, old versions of the artifact content are not lost.  All versions can be listed and accessed if necessary. This section describes the operations used to list and access all versions of an artifact's content and metadata."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.admin = Admin(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.artifact_type = ArtifactType(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.artifact_rules = ArtifactRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.artifacts = Artifacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.global_rules = GlobalRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.metadata = Metadata(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.system = System(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.versions = Versions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    