<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ConnectorInput - Definition of a Serverless VPC Access connector.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ConnectorInput
{
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     * 
     * @var ?string $ipCidrRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('ipCidrRange')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ipCidrRange = null;
    
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     * 
     * @var ?string $machineType
     */
	#[\JMS\Serializer\Annotation\SerializedName('machineType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $machineType = null;
    
    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     * 
     * @var ?int $maxInstances
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxInstances')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxInstances = null;
    
    /**
     * Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
     * 
     * @var ?int $maxThroughput
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxThroughput')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxThroughput = null;
    
    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     * 
     * @var ?int $minInstances
     */
	#[\JMS\Serializer\Annotation\SerializedName('minInstances')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $minInstances = null;
    
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     * 
     * @var ?int $minThroughput
     */
	#[\JMS\Serializer\Annotation\SerializedName('minThroughput')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $minThroughput = null;
    
    /**
     * The resource name in the format `projects/* /locations/* /connectors/*`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Name of a VPC network.
     * 
     * @var ?string $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $network = null;
    
    /**
     * The subnet in which to house the connector
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Subnet $subnet
     */
	#[\JMS\Serializer\Annotation\SerializedName('subnet')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Subnet')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Subnet $subnet = null;
    
	public function __construct()
	{
		$this->ipCidrRange = null;
		$this->machineType = null;
		$this->maxInstances = null;
		$this->maxThroughput = null;
		$this->minInstances = null;
		$this->minThroughput = null;
		$this->name = null;
		$this->network = null;
		$this->subnet = null;
	}
}
