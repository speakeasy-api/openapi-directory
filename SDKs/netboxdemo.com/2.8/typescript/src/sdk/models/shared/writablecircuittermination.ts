/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedCableInput } from "./nestedcable";
import { Expose, Type } from "class-transformer";

export enum WritableCircuitTerminationConnectionStatusEnum {
  False = "false",
  True = "true",
}

export enum WritableCircuitTerminationTerminationEnum {
  A = "A",
  Z = "Z",
}

export class WritableCircuitTerminationInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cable" })
  @Type(() => NestedCableInput)
  cable?: NestedCableInput;

  @SpeakeasyMetadata()
  @Expose({ name: "circuit" })
  circuit: number;

  @SpeakeasyMetadata()
  @Expose({ name: "connection_status" })
  connectionStatus?: WritableCircuitTerminationConnectionStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "port_speed" })
  portSpeed: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pp_info" })
  ppInfo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site" })
  site: number;

  @SpeakeasyMetadata()
  @Expose({ name: "term_side" })
  termSide: WritableCircuitTerminationTerminationEnum;

  /**
   * Upstream speed, if different from port speed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upstream_speed" })
  upstreamSpeed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "xconnect_id" })
  xconnectId?: string;
}
