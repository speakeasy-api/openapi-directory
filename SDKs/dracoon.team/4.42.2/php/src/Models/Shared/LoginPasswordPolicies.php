<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * LoginPasswordPolicies - Login password policies
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class LoginPasswordPolicies
{
    /**
     * Password character rules
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CharacterRules $characterRules
     */
	#[\JMS\Serializer\Annotation\SerializedName('characterRules')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CharacterRules')]
    public CharacterRules $characterRules;
    
    /**
     * Minimum number of characters a password must contain
     * 
     * @var int $minLength
     */
	#[\JMS\Serializer\Annotation\SerializedName('minLength')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $minLength;
    
    /**
     * Number of passwords to archive
     * 
     * 
     * (must be between `0` and `10`; `0` means that password history is disabled)
     * 
     * @var int $numberOfArchivedPasswords
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberOfArchivedPasswords')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $numberOfArchivedPasswords;
    
    /**
     * Password expiration information
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PasswordExpiration $passwordExpiration
     */
	#[\JMS\Serializer\Annotation\SerializedName('passwordExpiration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PasswordExpiration')]
    public PasswordExpiration $passwordExpiration;
    
    /**
     * Determines whether a password must NOT contain word(s) from a dictionary
     * 
     * @var bool $rejectDictionaryWords
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectDictionaryWords')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $rejectDictionaryWords;
    
    /**
     * Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
     * 
     * 
     * (min. 4 character pattern)
     * 
     * @var bool $rejectKeyboardPatterns
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectKeyboardPatterns')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $rejectKeyboardPatterns;
    
    /**
     * Determines whether a password must NOT contain user info (first name, last name, email, user name)
     * 
     * @var bool $rejectUserInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectUserInfo')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $rejectUserInfo;
    
    /**
     * Modification date
     * 
     * @var \DateTime $updatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('updatedAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $updatedAt;
    
    /**
     * User information
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\UserInfo $updatedBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('updatedBy')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\UserInfo')]
    public UserInfo $updatedBy;
    
    /**
     * User lockout information
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\UserLockout $userLockout
     */
	#[\JMS\Serializer\Annotation\SerializedName('userLockout')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\UserLockout')]
    public UserLockout $userLockout;
    
	public function __construct()
	{
		$this->characterRules = new \OpenAPI\OpenAPI\Models\Shared\CharacterRules();
		$this->minLength = 0;
		$this->numberOfArchivedPasswords = 0;
		$this->passwordExpiration = new \OpenAPI\OpenAPI\Models\Shared\PasswordExpiration();
		$this->rejectDictionaryWords = false;
		$this->rejectKeyboardPatterns = false;
		$this->rejectUserInfo = false;
		$this->updatedAt = new \DateTime();
		$this->updatedBy = new \OpenAPI\OpenAPI\Models\Shared\UserInfo();
		$this->userLockout = new \OpenAPI\OpenAPI\Models\Shared\UserLockout();
	}
}
