/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class GetSpacesSpaceIdFoldersIdMessagesMessageIdRequest extends SpeakeasyBase {
  /**
   * Id of the folder
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * Id of the mesage
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=messageId",
  })
  messageId: string;

  /**
   * Id of the space
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spaceId",
  })
  spaceId: string;
}

export enum GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONLevelEnum {
  Confidential = "confidential",
  Regular = "regular",
}

/**
 * A message
 */
export class GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Author" })
  author?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Level" })
  level?: GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONLevelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "MessageDate" })
  messageDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ModificationAuthor" })
  modificationAuthor?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ModificationDate" })
  modificationDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Text" })
  text?: string;
}

export class GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A message
   */
  @SpeakeasyMetadata()
  getSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONObject?: GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSON;
}
