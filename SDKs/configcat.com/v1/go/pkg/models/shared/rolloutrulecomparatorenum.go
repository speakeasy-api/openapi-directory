// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RolloutRuleComparatorEnum string

const (
	RolloutRuleComparatorEnumIsOneOf               RolloutRuleComparatorEnum = "isOneOf"
	RolloutRuleComparatorEnumIsNotOneOf            RolloutRuleComparatorEnum = "isNotOneOf"
	RolloutRuleComparatorEnumContains              RolloutRuleComparatorEnum = "contains"
	RolloutRuleComparatorEnumDoesNotContain        RolloutRuleComparatorEnum = "doesNotContain"
	RolloutRuleComparatorEnumSemVerIsOneOf         RolloutRuleComparatorEnum = "semVerIsOneOf"
	RolloutRuleComparatorEnumSemVerIsNotOneOf      RolloutRuleComparatorEnum = "semVerIsNotOneOf"
	RolloutRuleComparatorEnumSemVerLess            RolloutRuleComparatorEnum = "semVerLess"
	RolloutRuleComparatorEnumSemVerLessOrEquals    RolloutRuleComparatorEnum = "semVerLessOrEquals"
	RolloutRuleComparatorEnumSemVerGreater         RolloutRuleComparatorEnum = "semVerGreater"
	RolloutRuleComparatorEnumSemVerGreaterOrEquals RolloutRuleComparatorEnum = "semVerGreaterOrEquals"
	RolloutRuleComparatorEnumNumberEquals          RolloutRuleComparatorEnum = "numberEquals"
	RolloutRuleComparatorEnumNumberDoesNotEqual    RolloutRuleComparatorEnum = "numberDoesNotEqual"
	RolloutRuleComparatorEnumNumberLess            RolloutRuleComparatorEnum = "numberLess"
	RolloutRuleComparatorEnumNumberLessOrEquals    RolloutRuleComparatorEnum = "numberLessOrEquals"
	RolloutRuleComparatorEnumNumberGreater         RolloutRuleComparatorEnum = "numberGreater"
	RolloutRuleComparatorEnumNumberGreaterOrEquals RolloutRuleComparatorEnum = "numberGreaterOrEquals"
	RolloutRuleComparatorEnumSensitiveIsOneOf      RolloutRuleComparatorEnum = "sensitiveIsOneOf"
	RolloutRuleComparatorEnumSensitiveIsNotOneOf   RolloutRuleComparatorEnum = "sensitiveIsNotOneOf"
)

func (e RolloutRuleComparatorEnum) ToPointer() *RolloutRuleComparatorEnum {
	return &e
}

func (e *RolloutRuleComparatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "isOneOf":
		fallthrough
	case "isNotOneOf":
		fallthrough
	case "contains":
		fallthrough
	case "doesNotContain":
		fallthrough
	case "semVerIsOneOf":
		fallthrough
	case "semVerIsNotOneOf":
		fallthrough
	case "semVerLess":
		fallthrough
	case "semVerLessOrEquals":
		fallthrough
	case "semVerGreater":
		fallthrough
	case "semVerGreaterOrEquals":
		fallthrough
	case "numberEquals":
		fallthrough
	case "numberDoesNotEqual":
		fallthrough
	case "numberLess":
		fallthrough
	case "numberLessOrEquals":
		fallthrough
	case "numberGreater":
		fallthrough
	case "numberGreaterOrEquals":
		fallthrough
	case "sensitiveIsOneOf":
		fallthrough
	case "sensitiveIsNotOneOf":
		*e = RolloutRuleComparatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolloutRuleComparatorEnum: %v", v)
	}
}
