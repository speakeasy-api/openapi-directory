/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Platforms {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns list of channels that are available for a given platform.
   */
  versionhistoryPlatformsChannelsList(
    req: operations.VersionhistoryPlatformsChannelsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VersionhistoryPlatformsChannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VersionhistoryPlatformsChannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/channels",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VersionhistoryPlatformsChannelsListResponse =
        new operations.VersionhistoryPlatformsChannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listChannelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListChannelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of version for the given platform/channel.
   */
  versionhistoryPlatformsChannelsVersionsList(
    req: operations.VersionhistoryPlatformsChannelsVersionsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VersionhistoryPlatformsChannelsVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VersionhistoryPlatformsChannelsVersionsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/versions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VersionhistoryPlatformsChannelsVersionsListResponse =
        new operations.VersionhistoryPlatformsChannelsVersionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of releases of the given version.
   */
  versionhistoryPlatformsChannelsVersionsReleasesList(
    req: operations.VersionhistoryPlatformsChannelsVersionsReleasesListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VersionhistoryPlatformsChannelsVersionsReleasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VersionhistoryPlatformsChannelsVersionsReleasesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/releases",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VersionhistoryPlatformsChannelsVersionsReleasesListResponse =
        new operations.VersionhistoryPlatformsChannelsVersionsReleasesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReleasesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReleasesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of platforms that are available for a given product. The resource "product" has no resource name in its name.
   */
  versionhistoryPlatformsList(
    req: operations.VersionhistoryPlatformsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VersionhistoryPlatformsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VersionhistoryPlatformsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/platforms",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VersionhistoryPlatformsListResponse =
        new operations.VersionhistoryPlatformsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPlatformsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPlatformsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
