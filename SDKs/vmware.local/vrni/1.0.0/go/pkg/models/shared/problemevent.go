// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProblemEventAdminStateEnum string

const (
	ProblemEventAdminStateEnumEnabled  ProblemEventAdminStateEnum = "ENABLED"
	ProblemEventAdminStateEnumDisabled ProblemEventAdminStateEnum = "DISABLED"
)

func (e *ProblemEventAdminStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = ProblemEventAdminStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProblemEventAdminStateEnum: %s", s)
	}
}

type ProblemEventSeverityEnum string

const (
	ProblemEventSeverityEnumCritical ProblemEventSeverityEnum = "CRITICAL"
	ProblemEventSeverityEnumModerate ProblemEventSeverityEnum = "MODERATE"
	ProblemEventSeverityEnumWarning  ProblemEventSeverityEnum = "WARNING"
	ProblemEventSeverityEnumInfo     ProblemEventSeverityEnum = "INFO"
)

func (e *ProblemEventSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CRITICAL":
		fallthrough
	case "MODERATE":
		fallthrough
	case "WARNING":
		fallthrough
	case "INFO":
		*e = ProblemEventSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProblemEventSeverityEnum: %s", s)
	}
}

// ProblemEvent - OK
type ProblemEvent struct {
	AdminState            *ProblemEventAdminStateEnum `json:"admin_state,omitempty"`
	AnchorEntities        []Reference                 `json:"anchor_entities,omitempty"`
	Archived              *bool                       `json:"archived,omitempty"`
	EntityID              *string                     `json:"entity_id,omitempty"`
	EntityType            *EntityTypeEnum             `json:"entity_type,omitempty"`
	EventCloseTimeEpochMs *int64                      `json:"event_close_time_epoch_ms,omitempty"`
	EventTags             []string                    `json:"event_tags,omitempty"`
	EventTimeEpochMs      *int64                      `json:"event_time_epoch_ms,omitempty"`
	Message               *string                     `json:"message,omitempty"`
	Name                  *string                     `json:"name,omitempty"`
	RelatedEntities       []Reference                 `json:"related_entities,omitempty"`
	Severity              *ProblemEventSeverityEnum   `json:"severity,omitempty"`
}
