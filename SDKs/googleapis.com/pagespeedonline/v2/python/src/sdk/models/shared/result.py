"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import pagespeedapiformatstringv2 as shared_pagespeedapiformatstringv2
from ..shared import pagespeedapiimagev2 as shared_pagespeedapiimagev2
from typing import Optional


@dataclasses.dataclass
class ResultFormattedResultsRuleResultsURLBlocksUrls:
    
    details: Optional[list[shared_pagespeedapiformatstringv2.PagespeedAPIFormatStringV2]] = dataclasses.field(default=None)
    r"""List of entries that provide additional details about a single URL. Optional."""  
    result: Optional[shared_pagespeedapiformatstringv2.PagespeedAPIFormatStringV2] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class ResultFormattedResultsRuleResultsURLBlocks:
    
    header: Optional[shared_pagespeedapiformatstringv2.PagespeedAPIFormatStringV2] = dataclasses.field(default=None)  
    urls: Optional[list[ResultFormattedResultsRuleResultsURLBlocksUrls]] = dataclasses.field(default=None)
    r"""List of entries that provide information about URLs in the url block. Optional."""  
    

@dataclasses.dataclass
class ResultFormattedResultsRuleResults:
    r"""The enum-like identifier for this rule. For instance \\"EnableKeepAlive\\" or \\"AvoidCssImport\\". Not localized."""
    
    groups: Optional[list[str]] = dataclasses.field(default=None)
    r"""List of rule groups that this rule belongs to. Each entry in the list is one of \\"SPEED\\" or \\"USABILITY\\"."""  
    localized_rule_name: Optional[str] = dataclasses.field(default=None)
    r"""Localized name of the rule, intended for presentation to a user."""  
    rule_impact: Optional[float] = dataclasses.field(default=None)
    r"""The impact (unbounded floating point value) that implementing the suggestions for this rule would have on making the page faster. Impact is comparable between rules to determine which rule's suggestions would have a higher or lower impact on making a page faster. For instance, if enabling compression would save 1MB, while optimizing images would save 500kB, the enable compression rule would have 2x the impact of the image optimization rule, all other things being equal."""  
    summary: Optional[shared_pagespeedapiformatstringv2.PagespeedAPIFormatStringV2] = dataclasses.field(default=None)  
    url_blocks: Optional[list[ResultFormattedResultsRuleResultsURLBlocks]] = dataclasses.field(default=None)
    r"""List of blocks of URLs. Each block may contain a heading and a list of URLs. Each URL may optionally include additional details."""  
    

@dataclasses.dataclass
class ResultFormattedResults:
    r"""Localized PageSpeed results. Contains a ruleResults entry for each PageSpeed rule instantiated and run by the server."""
    
    locale: Optional[str] = dataclasses.field(default=None)
    r"""The locale of the formattedResults, e.g. \\"en_US\\"."""  
    rule_results: Optional[dict[str, ResultFormattedResultsRuleResults]] = dataclasses.field(default=None)
    r"""Dictionary of formatted rule results, with one entry for each PageSpeed rule instantiated and run by the server."""  
    

@dataclasses.dataclass
class ResultPageStats:
    r"""Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc."""
    
    css_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of uncompressed response bytes for CSS resources on the page."""  
    flash_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of response bytes for flash resources on the page."""  
    html_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of uncompressed response bytes for the main HTML document and all iframes on the page."""  
    image_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of response bytes for image resources on the page."""  
    javascript_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of uncompressed response bytes for JS resources on the page."""  
    number_css_resources: Optional[int] = dataclasses.field(default=None)
    r"""Number of CSS resources referenced by the page."""  
    number_hosts: Optional[int] = dataclasses.field(default=None)
    r"""Number of unique hosts referenced by the page."""  
    number_js_resources: Optional[int] = dataclasses.field(default=None)
    r"""Number of JavaScript resources referenced by the page."""  
    number_resources: Optional[int] = dataclasses.field(default=None)
    r"""Number of HTTP resources loaded by the page."""  
    number_static_resources: Optional[int] = dataclasses.field(default=None)
    r"""Number of static (i.e. cacheable) resources on the page."""  
    other_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of response bytes for other resources on the page."""  
    text_response_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Number of uncompressed response bytes for text resources not covered by other statistics (i.e non-HTML, non-script, non-CSS resources) on the page."""  
    total_request_bytes: Optional[str] = dataclasses.field(default=None)
    r"""Total size of all request bytes sent by the page."""  
    

@dataclasses.dataclass
class ResultRuleGroups:
    r"""The name of this rule group: one of \\"SPEED\\" or \\"USABILITY\\"."""
    
    score: Optional[int] = dataclasses.field(default=None)
    r"""The score (0-100) for this rule group, which indicates how much better a page could be in that category (e.g. how much faster, or how much more usable). A high score indicates little room for improvement, while a lower score indicates more room for improvement."""  
    

@dataclasses.dataclass
class ResultVersion:
    r"""The version of PageSpeed used to generate these results."""
    
    major: Optional[int] = dataclasses.field(default=None)
    r"""The major version number of PageSpeed used to generate these results."""  
    minor: Optional[int] = dataclasses.field(default=None)
    r"""The minor version number of PageSpeed used to generate these results."""  
    

@dataclasses.dataclass
class Result:
    r"""Successful response"""
    
    captcha_result: Optional[str] = dataclasses.field(default=None)
    r"""The captcha verify result"""  
    formatted_results: Optional[ResultFormattedResults] = dataclasses.field(default=None)
    r"""Localized PageSpeed results. Contains a ruleResults entry for each PageSpeed rule instantiated and run by the server."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Canonicalized and final URL for the document, after following page redirects (if any)."""  
    invalid_rules: Optional[list[str]] = dataclasses.field(default=None)
    r"""List of rules that were specified in the request, but which the server did not know how to instantiate."""  
    kind: Optional[str] = dataclasses.field(default=None)
    r"""Kind of result."""  
    page_stats: Optional[ResultPageStats] = dataclasses.field(default=None)
    r"""Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc."""  
    response_code: Optional[int] = dataclasses.field(default=None)
    r"""Response code for the document. 200 indicates a normal page load. 4xx/5xx indicates an error."""  
    rule_groups: Optional[dict[str, ResultRuleGroups]] = dataclasses.field(default=None)
    r"""A map with one entry for each rule group in these results."""  
    screenshot: Optional[shared_pagespeedapiimagev2.PagespeedAPIImageV2] = dataclasses.field(default=None)  
    title: Optional[str] = dataclasses.field(default=None)
    r"""Title of the page, as displayed in the browser's title bar."""  
    version: Optional[ResultVersion] = dataclasses.field(default=None)
    r"""The version of PageSpeed used to generate these results."""  
    