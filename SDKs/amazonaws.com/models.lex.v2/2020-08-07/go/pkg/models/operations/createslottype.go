// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateSlotTypePathParams struct {
	// The identifier of the bot associated with this slot type.
	BotID string `pathParam:"style=simple,explode=false,name=botId"`
	// The identifier of the bot version associated with this slot type.
	BotVersion string `pathParam:"style=simple,explode=false,name=botVersion"`
	// The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
	LocaleID string `pathParam:"style=simple,explode=false,name=localeId"`
}

type CreateSlotTypeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateSlotTypeRequestBodyCompositeSlotTypeSetting - A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
type CreateSlotTypeRequestBodyCompositeSlotTypeSetting struct {
	SubSlots []shared.SubSlotTypeComposition `json:"subSlots,omitempty"`
}

// CreateSlotTypeRequestBodyExternalSourceSetting - Provides information about the external source of the slot type's definition.
type CreateSlotTypeRequestBodyExternalSourceSetting struct {
	GrammarSlotTypeSetting *shared.GrammarSlotTypeSetting `json:"grammarSlotTypeSetting,omitempty"`
}

// CreateSlotTypeRequestBodyValueSelectionSetting - Contains settings used by Amazon Lex to select a slot value.
type CreateSlotTypeRequestBodyValueSelectionSetting struct {
	AdvancedRecognitionSetting *shared.AdvancedRecognitionSetting      `json:"advancedRecognitionSetting,omitempty"`
	RegexFilter                *shared.SlotValueRegexFilter            `json:"regexFilter,omitempty"`
	ResolutionStrategy         *shared.SlotValueResolutionStrategyEnum `json:"resolutionStrategy,omitempty"`
}

type CreateSlotTypeRequestBody struct {
	// A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
	CompositeSlotTypeSetting *CreateSlotTypeRequestBodyCompositeSlotTypeSetting `json:"compositeSlotTypeSetting,omitempty"`
	// A description of the slot type. Use the description to help identify the slot type in lists.
	Description *string `json:"description,omitempty"`
	// Provides information about the external source of the slot type's definition.
	ExternalSourceSetting *CreateSlotTypeRequestBodyExternalSourceSetting `json:"externalSourceSetting,omitempty"`
	// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
	ParentSlotTypeSignature *string `json:"parentSlotTypeSignature,omitempty"`
	// The name for the slot. A slot type name must be unique within the account.
	SlotTypeName string `json:"slotTypeName"`
	// A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.
	SlotTypeValues []shared.SlotTypeValue `json:"slotTypeValues,omitempty"`
	// Contains settings used by Amazon Lex to select a slot value.
	ValueSelectionSetting *CreateSlotTypeRequestBodyValueSelectionSetting `json:"valueSelectionSetting,omitempty"`
}

type CreateSlotTypeRequest struct {
	PathParams CreateSlotTypePathParams
	Headers    CreateSlotTypeHeaders
	Request    CreateSlotTypeRequestBody `request:"mediaType=application/json"`
}

type CreateSlotTypeResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateSlotTypeResponse *shared.CreateSlotTypeResponse
	// InternalServerException
	InternalServerException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
