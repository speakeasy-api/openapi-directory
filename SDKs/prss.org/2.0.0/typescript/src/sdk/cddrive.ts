/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * ContentDepot Drive functionality for uploading and stating content files for use in other API operations.
 */
export class CDDrive {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a file.
   *
   * @remarks
   * Delete a file from the customer's private CD Drive.
   */
  deleteApiV2CddriveFilesFileId(
    req: operations.DeleteApiV2CddriveFilesFileIdRequest,
    security: operations.DeleteApiV2CddriveFilesFileIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV2CddriveFilesFileIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV2CddriveFilesFileIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/files/{file-id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV2CddriveFilesFileIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV2CddriveFilesFileIdResponse =
        new operations.DeleteApiV2CddriveFilesFileIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * UNDER DEVELOPMENT - Delete a folder.
   *
   * @remarks
   * Delete a file from the customer's private CD Drive.
   */
  deleteApiV2CddriveFoldersFolderId(
    req: operations.DeleteApiV2CddriveFoldersFolderIdRequest,
    security: operations.DeleteApiV2CddriveFoldersFolderIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV2CddriveFoldersFolderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV2CddriveFoldersFolderIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/folders/{folder-id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV2CddriveFoldersFolderIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV2CddriveFoldersFolderIdResponse =
        new operations.DeleteApiV2CddriveFoldersFolderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get file information.
   *
   * @remarks
   * Get the information about a file in the customer's private CD Drive.
   */
  getApiV2CddriveFilesFileId(
    req: operations.GetApiV2CddriveFilesFileIdRequest,
    security: operations.GetApiV2CddriveFilesFileIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2CddriveFilesFileIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2CddriveFilesFileIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/files/{file-id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2CddriveFilesFileIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2CddriveFilesFileIdResponse =
        new operations.GetApiV2CddriveFilesFileIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cdDriveFile = utils.objectToClass(
              httpRes?.data,
              shared.CDDriveFile
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * UNDER DEVELOPMENT - Download a file.
   *
   * @remarks
   * Download a file from the customer's private CD Drive.
   */
  getApiV2CddriveFilesFileIdContent(
    req: operations.GetApiV2CddriveFilesFileIdContentRequest,
    security: operations.GetApiV2CddriveFilesFileIdContentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2CddriveFilesFileIdContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2CddriveFilesFileIdContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/files/{file-id}/content",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2CddriveFilesFileIdContentSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2CddriveFilesFileIdContentResponse =
        new operations.GetApiV2CddriveFilesFileIdContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getApiV2CddriveFilesFileIdContent200ApplicationOctetStreamBinaryString =
              out;
          }
          break;
        case httpRes?.status == 302:
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * UNDER DEVELOPMENT - Get folder information.
   *
   * @remarks
   * Get the information about a folder in the customer's private CD Drive.
   */
  getApiV2CddriveFoldersFolderId(
    req: operations.GetApiV2CddriveFoldersFolderIdRequest,
    security: operations.GetApiV2CddriveFoldersFolderIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2CddriveFoldersFolderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2CddriveFoldersFolderIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/folders/{folder-id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2CddriveFoldersFolderIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2CddriveFoldersFolderIdResponse =
        new operations.GetApiV2CddriveFoldersFolderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cdDriveFolder = utils.objectToClass(
              httpRes?.data,
              shared.CDDriveFolder
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Get the items in the folder.
   *
   * @remarks
   * Get the information about a folder in the customer's private CD Drive.
   */
  getApiV2CddriveFoldersFolderIdItems(
    req: operations.GetApiV2CddriveFoldersFolderIdItemsRequest,
    security: operations.GetApiV2CddriveFoldersFolderIdItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2CddriveFoldersFolderIdItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2CddriveFoldersFolderIdItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v2/cddrive/folders/{folder-id}/items",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2CddriveFoldersFolderIdItemsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2CddriveFoldersFolderIdItemsResponse =
        new operations.GetApiV2CddriveFoldersFolderIdItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getApiV2CddriveFoldersFolderIdItems200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetApiV2CddriveFoldersFolderIdItems200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Upload a file.
   *
   * @remarks
   * Upload a file to the customer's private CD Drive.
   */
  postApiV2CddriveFilesContent(
    req: operations.PostApiV2CddriveFilesContentRequest,
    security: operations.PostApiV2CddriveFilesContentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV2CddriveFilesContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiV2CddriveFilesContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v2/cddrive/files/content";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV2CddriveFilesContentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV2CddriveFilesContentResponse =
        new operations.PostApiV2CddriveFilesContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cdDriveFile = utils.objectToClass(
              httpRes?.data,
              shared.CDDriveFile
            );
          }
          break;
        case [400, 403, 404, 409, 413].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a folder.
   *
   * @remarks
   * Create a new folder in the customer's private CD Drive.
   */
  postApiV2CddriveFolders(
    req: operations.PostApiV2CddriveFoldersRequestBody,
    security: operations.PostApiV2CddriveFoldersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV2CddriveFoldersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiV2CddriveFoldersRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v2/cddrive/folders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV2CddriveFoldersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV2CddriveFoldersResponse =
        new operations.PostApiV2CddriveFoldersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cdDriveFolder = utils.objectToClass(
              httpRes?.data,
              shared.CDDriveFolder
            );
          }
          break;
        case [403, 404, 409].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
