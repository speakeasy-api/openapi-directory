// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type FindPlacesFindPlacesGetSecurity struct {
	APIKeyHeader shared.SchemeAPIKeyHeader `security:"scheme,type=apiKey,subtype=header"`
}

// FindPlacesFindPlacesGetLanguageLanguageEnum - An enumeration.
type FindPlacesFindPlacesGetLanguageLanguageEnum string

const (
	FindPlacesFindPlacesGetLanguageLanguageEnumCs FindPlacesFindPlacesGetLanguageLanguageEnum = "cs"
	FindPlacesFindPlacesGetLanguageLanguageEnumEn FindPlacesFindPlacesGetLanguageLanguageEnum = "en"
	FindPlacesFindPlacesGetLanguageLanguageEnumDe FindPlacesFindPlacesGetLanguageLanguageEnum = "de"
	FindPlacesFindPlacesGetLanguageLanguageEnumEs FindPlacesFindPlacesGetLanguageLanguageEnum = "es"
	FindPlacesFindPlacesGetLanguageLanguageEnumFr FindPlacesFindPlacesGetLanguageLanguageEnum = "fr"
	FindPlacesFindPlacesGetLanguageLanguageEnumPl FindPlacesFindPlacesGetLanguageLanguageEnum = "pl"
	FindPlacesFindPlacesGetLanguageLanguageEnumPt FindPlacesFindPlacesGetLanguageLanguageEnum = "pt"
)

func (e *FindPlacesFindPlacesGetLanguageLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cs":
		fallthrough
	case "en":
		fallthrough
	case "de":
		fallthrough
	case "es":
		fallthrough
	case "fr":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		*e = FindPlacesFindPlacesGetLanguageLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindPlacesFindPlacesGetLanguageLanguageEnum: %s", s)
	}
}

type FindPlacesFindPlacesGetQueryParams struct {
	// Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The language of text summaries and place names (variable names are never translated). Available languages are:
	//
	//    * ``en``: English
	//    * ``es``: Spanish
	//    * ``fr``: French
	//    * ``de``: German
	//    * ``pl``: Polish
	//    * ``pt``: Portuguese
	//    * ``cs``: Czech
	//
	Language *FindPlacesFindPlacesGetLanguageLanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Place name or ZIP code
	Text string `queryParam:"style=form,explode=true,name=text"`
}

type FindPlacesFindPlacesGetRequest struct {
	QueryParams FindPlacesFindPlacesGetQueryParams
	Security    FindPlacesFindPlacesGetSecurity
}

type FindPlacesFindPlacesGetResponse struct {
	ContentType string
	// Successful Response
	FindPlacesModels []shared.FindPlacesModel
	// Error in passed parameter.
	GeneralRequestError *shared.GeneralRequestError
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	StatusCode          int
	RawResponse         *http.Response
}
