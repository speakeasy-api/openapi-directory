"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import volumes as shared_volumes
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class BooksVolumesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class BooksVolumesListDownloadEnum(str, Enum):
    r"""Restrict to volumes by download availability."""
    DOWNLOAD_UNDEFINED = 'DOWNLOAD_UNDEFINED'
    EPUB = 'EPUB'

class BooksVolumesListFilterEnum(str, Enum):
    r"""Filter search results."""
    FILTER_UNDEFINED = 'FILTER_UNDEFINED'
    EBOOKS = 'ebooks'
    FREE_EBOOKS = 'free-ebooks'
    FULL = 'full'
    PAID_EBOOKS = 'paid-ebooks'
    PARTIAL = 'partial'

class BooksVolumesListLibraryRestrictEnum(str, Enum):
    r"""Restrict search to this user's library."""
    LIBRARY_RESTRICT_UNDEFINED = 'LIBRARY_RESTRICT_UNDEFINED'
    MY_LIBRARY = 'my-library'
    NO_RESTRICT = 'no-restrict'

class BooksVolumesListMaxAllowedMaturityRatingEnum(str, Enum):
    r"""The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out."""
    MAX_ALLOWED_MATURITY_RATING_UNDEFINED = 'MAX_ALLOWED_MATURITY_RATING_UNDEFINED'
    MATURE = 'MATURE'
    NOT_MATURE = 'not-mature'

class BooksVolumesListOrderByEnum(str, Enum):
    r"""Sort search results."""
    ORDER_BY_UNDEFINED = 'ORDER_BY_UNDEFINED'
    NEWEST = 'newest'
    RELEVANCE = 'relevance'

class BooksVolumesListPrintTypeEnum(str, Enum):
    r"""Restrict to books or magazines."""
    PRINT_TYPE_UNDEFINED = 'PRINT_TYPE_UNDEFINED'
    ALL = 'ALL'
    BOOKS = 'BOOKS'
    MAGAZINES = 'MAGAZINES'

class BooksVolumesListProjectionEnum(str, Enum):
    r"""Restrict information returned to a set of selected fields."""
    PROJECTION_UNDEFINED = 'PROJECTION_UNDEFINED'
    FULL = 'FULL'
    LITE = 'LITE'


@dataclasses.dataclass
class BooksVolumesListRequest:
    
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Full-text search query string."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    download: Optional[BooksVolumesListDownloadEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'download', 'style': 'form', 'explode': True }})
    r"""Restrict to volumes by download availability."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    filter: Optional[BooksVolumesListFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filter search results."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    lang_restrict: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'langRestrict', 'style': 'form', 'explode': True }})
    r"""Restrict results to books with this language code."""  
    library_restrict: Optional[BooksVolumesListLibraryRestrictEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'libraryRestrict', 'style': 'form', 'explode': True }})
    r"""Restrict search to this user's library."""  
    max_allowed_maturity_rating: Optional[BooksVolumesListMaxAllowedMaturityRatingEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxAllowedMaturityRating', 'style': 'form', 'explode': True }})
    r"""The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    order_by: Optional[BooksVolumesListOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': True }})
    r"""Sort search results."""  
    partner: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'partner', 'style': 'form', 'explode': True }})
    r"""Restrict and brand results for partner ID."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    print_type: Optional[BooksVolumesListPrintTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'printType', 'style': 'form', 'explode': True }})
    r"""Restrict to books or magazines."""  
    projection: Optional[BooksVolumesListProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""Restrict information returned to a set of selected fields."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    show_preorders: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showPreorders', 'style': 'form', 'explode': True }})
    r"""Set to true to show books available for preorder. Defaults to false."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""String to identify the originator of this request."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startIndex', 'style': 'form', 'explode': True }})
    r"""Index of the first result to return (starts at 0)"""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class BooksVolumesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    volumes: Optional[shared_volumes.Volumes] = dataclasses.field(default=None)
    r"""Successful response"""  
    