/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TargetVMDetails - TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
public class TargetVMDetails {
    /**
     * AppliedLicense holds the license data returned by adaptation module report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedLicense")
    public AppliedLicense appliedLicense;
    public TargetVMDetails withAppliedLicense(AppliedLicense appliedLicense) {
        this.appliedLicense = appliedLicense;
        return this;
    }
    
    /**
     * Output only. The VM Boot Option, as set in the source vm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootOption")
    public TargetVMDetailsBootOptionEnum bootOption;
    public TargetVMDetails withBootOption(TargetVMDetailsBootOptionEnum bootOption) {
        this.bootOption = bootOption;
        return this;
    }
    
    /**
     * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeScheduling")
    public ComputeScheduling computeScheduling;
    public TargetVMDetails withComputeScheduling(ComputeScheduling computeScheduling) {
        this.computeScheduling = computeScheduling;
        return this;
    }
    
    /**
     * The disk type to use in the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskType")
    public TargetVMDetailsDiskTypeEnum diskType;
    public TargetVMDetails withDiskType(TargetVMDetailsDiskTypeEnum diskType) {
        this.diskType = diskType;
        return this;
    }
    
    /**
     * The external IP to define in the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalIp")
    public String externalIp;
    public TargetVMDetails withExternalIp(String externalIp) {
        this.externalIp = externalIp;
        return this;
    }
    
    /**
     * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internalIp")
    public String internalIp;
    public TargetVMDetails withInternalIp(String internalIp) {
        this.internalIp = internalIp;
        return this;
    }
    
    /**
     * A map of labels to associate with the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public TargetVMDetails withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The license type to use in OS adaptation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseType")
    public TargetVMDetailsLicenseTypeEnum licenseType;
    public TargetVMDetails withLicenseType(TargetVMDetailsLicenseTypeEnum licenseType) {
        this.licenseType = licenseType;
        return this;
    }
    
    /**
     * The machine type to create the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;
    public TargetVMDetails withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * The machine type series to create the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineTypeSeries")
    public String machineTypeSeries;
    public TargetVMDetails withMachineTypeSeries(String machineTypeSeries) {
        this.machineTypeSeries = machineTypeSeries;
        return this;
    }
    
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public TargetVMDetails withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The name of the VM to create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TargetVMDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The network to connect the VM to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public TargetVMDetails withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * List of NICs connected to this VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkInterfaces")
    public NetworkInterface[] networkInterfaces;
    public TargetVMDetails withNetworkInterfaces(NetworkInterface[] networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }
    
    /**
     * A map of network tags to associate with the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkTags")
    public String[] networkTags;
    public TargetVMDetails withNetworkTags(String[] networkTags) {
        this.networkTags = networkTags;
        return this;
    }
    
    /**
     * Output only. The project in which to create the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;
    public TargetVMDetails withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secureBoot")
    public Boolean secureBoot;
    public TargetVMDetails withSecureBoot(Boolean secureBoot) {
        this.secureBoot = secureBoot;
        return this;
    }
    
    /**
     * The service account to associate the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;
    public TargetVMDetails withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * The subnetwork to connect the VM to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetwork")
    public String subnetwork;
    public TargetVMDetails withSubnetwork(String subnetwork) {
        this.subnetwork = subnetwork;
        return this;
    }
    
    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetProject")
    public String targetProject;
    public TargetVMDetails withTargetProject(String targetProject) {
        this.targetProject = targetProject;
        return this;
    }
    
    /**
     * The zone in which to create the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;
    public TargetVMDetails withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
}
