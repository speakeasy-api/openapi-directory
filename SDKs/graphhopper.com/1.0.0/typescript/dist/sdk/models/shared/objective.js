"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Objective = exports.ObjectiveValueEnum = exports.ObjectiveTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Type of objective function, i.e. `min` or `min-max`.
 *
 * @remarks
 *
 *  * `min`: Minimizes the objective value.
 *  * `min-max`: Minimizes the maximum objective value.
 *
 * For instance, `min` -> `vehicles` minimizes the number of employed vehicles.
 * `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.
 *
 * If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.
 * This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.
 * If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that
 * the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours
 * to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,
 * this usually comes with higher transport costs.
 *
 * If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:
 *
 * ```json
 * "objectives" : [
 *    {
 *       "type": "min",
 *       "value": "vehicles"
 *    },
 *    {
 *       "type": "min",
 *       "value": "completion_time"
 *    }
 * ]
 * ```
 *
 * If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:
 *
 * ```json
 * "objectives" : [
 *    {
 *       "type": "min-max",
 *       "value": "completion_time"
 *    },
 *    {
 *       "type": "min-max",
 *       "value": "activities"
 *    }
 * ]
 * ```
 *
 */
var ObjectiveTypeEnum;
(function (ObjectiveTypeEnum) {
    ObjectiveTypeEnum["Min"] = "min";
    ObjectiveTypeEnum["MinMax"] = "min-max";
})(ObjectiveTypeEnum = exports.ObjectiveTypeEnum || (exports.ObjectiveTypeEnum = {}));
/**
 * The value of the objective function.
 *
 * @remarks
 * The objective value `transport_time` solely considers the time
 * your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.
 * The `completion_time` of a route is defined as the time from starting to ending the route,
 * i.e. the route's transport time, the sum of waiting times plus the sum of activity durations.
 * Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in
 * scenarios with time windows waiting times can occur.
 * The objective value `vehicles` can only be used along with `min` and minimizes vehicles.
 *
 */
var ObjectiveValueEnum;
(function (ObjectiveValueEnum) {
    ObjectiveValueEnum["CompletionTime"] = "completion_time";
    ObjectiveValueEnum["TransportTime"] = "transport_time";
    ObjectiveValueEnum["Vehicles"] = "vehicles";
    ObjectiveValueEnum["Activities"] = "activities";
})(ObjectiveValueEnum = exports.ObjectiveValueEnum || (exports.ObjectiveValueEnum = {}));
var Objective = /** @class */ (function (_super) {
    __extends(Objective, _super);
    function Objective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Objective.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], Objective.prototype, "value", void 0);
    return Objective;
}(utils_1.SpeakeasyBase));
exports.Objective = Objective;
