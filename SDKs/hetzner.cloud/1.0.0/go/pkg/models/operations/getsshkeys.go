// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSSHKeysSortEnum - Can be used multiple times.
type GetSSHKeysSortEnum string

const (
	GetSSHKeysSortEnumID       GetSSHKeysSortEnum = "id"
	GetSSHKeysSortEnumIDAsc    GetSSHKeysSortEnum = "id:asc"
	GetSSHKeysSortEnumIDDesc   GetSSHKeysSortEnum = "id:desc"
	GetSSHKeysSortEnumName     GetSSHKeysSortEnum = "name"
	GetSSHKeysSortEnumNameAsc  GetSSHKeysSortEnum = "name:asc"
	GetSSHKeysSortEnumNameDesc GetSSHKeysSortEnum = "name:desc"
)

func (e *GetSSHKeysSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		*e = GetSSHKeysSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSSHKeysSortEnum: %s", s)
	}
}

type GetSSHKeysRequest struct {
	// Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.
	Fingerprint *string `queryParam:"style=form,explode=true,name=fingerprint"`
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetSSHKeysSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetSSHKeys200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetSSHKeys200ApplicationJSONMeta struct {
	Pagination GetSSHKeys200ApplicationJSONMetaPagination `json:"pagination"`
}

type GetSSHKeys200ApplicationJSONSSHKeys struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Fingerprint of public key
	Fingerprint string `json:"fingerprint"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Public key
	PublicKey string `json:"public_key"`
}

// GetSSHKeys200ApplicationJSON - The `ssh_keys` key in the reply contains an array of SSH key objects with this structure
type GetSSHKeys200ApplicationJSON struct {
	Meta    *GetSSHKeys200ApplicationJSONMeta     `json:"meta,omitempty"`
	SSHKeys []GetSSHKeys200ApplicationJSONSSHKeys `json:"ssh_keys"`
}

type GetSSHKeysResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `ssh_keys` key in the reply contains an array of SSH key objects with this structure
	GetSSHKeys200ApplicationJSONObject *GetSSHKeys200ApplicationJSON
}
