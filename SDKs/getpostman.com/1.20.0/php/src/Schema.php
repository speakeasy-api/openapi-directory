<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Schema 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create collection from schema
     * 
     * This call creates a collection and links it to an API as one or multiple relations. 
     * 
     * Request body requires two keys:
     * - `name` - Name of the collection to be created.
     * - `relations` - A list of relation(s) to be created.
     * 
     * The allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaResponse
     */
	public function createCollectionFromSchema(
        \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections', \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCollectionFromSchema200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateCollectionFromSchema200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Schema
     * 
     * This call creates a new schema.
     * 
     * Request body should contain a `schema` object which should atleast have these properties with `string` values:
     * 
     * - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
     * - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
     * - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
     * 
     * Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSchemaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSchemaResponse
     */
	public function createSchema(
        \OpenAPI\OpenAPI\Models\Operations\CreateSchemaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSchemaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}/schemas', \OpenAPI\OpenAPI\Models\Operations\CreateSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSchema200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateSchema200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Schema
     * 
     * This call fetches a single schema having the specified id.
     * 
     * Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. 
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSchemaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSchemaResponse
     */
	public function getSchema(
        \OpenAPI\OpenAPI\Models\Operations\GetSchemaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSchemaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}', \OpenAPI\OpenAPI\Models\Operations\GetSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSchema200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSchema200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Schema
     * 
     * This call updates an existing schema.
     * 
     * Request body should contain a `schema` object which should atleast have these properties with `string` values:
     * 
     * - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
     * - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
     * - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
     * 
     * Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaResponse
     */
	public function updateSchema(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateSchema200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateSchema200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}