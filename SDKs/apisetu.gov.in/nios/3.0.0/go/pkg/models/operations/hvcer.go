// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type HvcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type HvcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// ROLL NO
	Rroll string `json:"RROLL"`
	// YEAR
	Year string `json:"YEAR"`
}

// HvcerRequestBodyFormatEnum - The format of the certificate in response.
type HvcerRequestBodyFormatEnum string

const (
	HvcerRequestBodyFormatEnumPdf HvcerRequestBodyFormatEnum = "pdf"
)

func (e *HvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = HvcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HvcerRequestBodyFormatEnum: %s", s)
	}
}

// HvcerRequestBody - Request format
type HvcerRequestBody struct {
	CertificateParameters *HvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format HvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Hvcer504ApplicationJSONErrorEnum string

const (
	Hvcer504ApplicationJSONErrorEnumGatewayTimeout Hvcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Hvcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Hvcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer504ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Hvcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Hvcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Hvcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer504ApplicationJSON - Gateway timeout
type Hvcer504ApplicationJSON struct {
	Error            *Hvcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer503ApplicationJSONErrorEnum string

const (
	Hvcer503ApplicationJSONErrorEnumServiceUnavailable Hvcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Hvcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Hvcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer503ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Hvcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Hvcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Hvcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer503ApplicationJSON - Service unavailable
type Hvcer503ApplicationJSON struct {
	Error            *Hvcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer502ApplicationJSONErrorEnum string

const (
	Hvcer502ApplicationJSONErrorEnumBadGatewy Hvcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Hvcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Hvcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer502ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Hvcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Hvcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Hvcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer502ApplicationJSON - Bad gateway
type Hvcer502ApplicationJSON struct {
	Error            *Hvcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer500ApplicationJSONErrorEnum string

const (
	Hvcer500ApplicationJSONErrorEnumInternalServerError Hvcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Hvcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Hvcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer500ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer500ApplicationJSONErrorDescriptionEnumInternalServerError Hvcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Hvcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Hvcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer500ApplicationJSON - Internal server error
type Hvcer500ApplicationJSON struct {
	Error            *Hvcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer404ApplicationJSONErrorEnum string

const (
	Hvcer404ApplicationJSONErrorEnumRecordNotFound Hvcer404ApplicationJSONErrorEnum = "record_not_found"
	Hvcer404ApplicationJSONErrorEnumURLNotFound    Hvcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Hvcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Hvcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer404ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Hvcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Hvcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Hvcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Hvcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Hvcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer404ApplicationJSON - No record found
type Hvcer404ApplicationJSON struct {
	Error            *Hvcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer401ApplicationJSONErrorEnum string

const (
	Hvcer401ApplicationJSONErrorEnumInvalidAuthentication Hvcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Hvcer401ApplicationJSONErrorEnumInvalidAuthorization  Hvcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Hvcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Hvcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer401ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Hvcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Hvcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Hvcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Hvcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Hvcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer401ApplicationJSON - Unauthorized access
type Hvcer401ApplicationJSON struct {
	Error            *Hvcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hvcer400ApplicationJSONErrorEnum string

const (
	Hvcer400ApplicationJSONErrorEnumMissingParameter Hvcer400ApplicationJSONErrorEnum = "missing_parameter"
	Hvcer400ApplicationJSONErrorEnumInvalidParameter Hvcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Hvcer400ApplicationJSONErrorEnumInvalidFormat    Hvcer400ApplicationJSONErrorEnum = "invalid_format"
	Hvcer400ApplicationJSONErrorEnumInvalidTxnid     Hvcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Hvcer400ApplicationJSONErrorEnumInvalidConsentid Hvcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Hvcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Hvcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Hvcer400ApplicationJSONErrorDescriptionEnum string

const (
	Hvcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Hvcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Hvcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Hvcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Hvcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Hvcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Hvcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Hvcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Hvcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Hvcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Hvcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Hvcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hvcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hvcer400ApplicationJSON - Bad request
type Hvcer400ApplicationJSON struct {
	Error            *Hvcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hvcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type HvcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Hvcer400ApplicationJSONObject *Hvcer400ApplicationJSON
	// Unauthorized access
	Hvcer401ApplicationJSONObject *Hvcer401ApplicationJSON
	// No record found
	Hvcer404ApplicationJSONObject *Hvcer404ApplicationJSON
	// Internal server error
	Hvcer500ApplicationJSONObject *Hvcer500ApplicationJSON
	// Bad gateway
	Hvcer502ApplicationJSONObject *Hvcer502ApplicationJSON
	// Service unavailable
	Hvcer503ApplicationJSONObject *Hvcer503ApplicationJSON
	// Gateway timeout
	Hvcer504ApplicationJSONObject *Hvcer504ApplicationJSON
}
