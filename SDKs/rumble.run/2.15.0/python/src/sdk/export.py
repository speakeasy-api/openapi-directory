"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Export:
    r"""Requires Export Token or Organization Key"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def export_asset_top_hwcsv(self) -> operations.ExportAssetTopHWCSVResponse:
        r"""Top asset hardware products as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/top.hw.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetTopHWCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_asset_top_hwcsv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_asset_top_oscsv(self) -> operations.ExportAssetTopOSCSVResponse:
        r"""Top asset operating systems as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/top.os.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetTopOSCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_asset_top_oscsv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_asset_top_tags_csv(self) -> operations.ExportAssetTopTagsCSVResponse:
        r"""Top asset tags as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/top.tags.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetTopTagsCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_asset_top_tags_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_asset_top_types_csv(self) -> operations.ExportAssetTopTypesCSVResponse:
        r"""Top asset types as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/top.types.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetTopTypesCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_asset_top_types_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_assets_csv(self, request: operations.ExportAssetsCSVRequest, security: operations.ExportAssetsCSVSecurity) -> operations.ExportAssetsCSVResponse:
        r"""Asset inventory as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/assets.csv'
        
        query_params = utils.get_query_params(operations.ExportAssetsCSVRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetsCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_assets_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_assets_json(self, request: operations.ExportAssetsJSONRequest, security: operations.ExportAssetsJSONSecurity) -> operations.ExportAssetsJSONResponse:
        r"""Exports the asset inventory"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/assets.json'
        
        query_params = utils.get_query_params(operations.ExportAssetsJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Asset]])
                res.assets = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_assets_jsonl(self, request: operations.ExportAssetsJSONLRequest, security: operations.ExportAssetsJSONLSecurity) -> operations.ExportAssetsJSONLResponse:
        r"""Asset inventory as JSON line-delimited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/assets.jsonl'
        
        query_params = utils.get_query_params(operations.ExportAssetsJSONLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetsJSONLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.export_assets_jsonl_200_application_json_binary_string = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_assets_nmap_xml(self, request: operations.ExportAssetsNmapXMLRequest, security: operations.ExportAssetsNmapXMLSecurity) -> operations.ExportAssetsNmapXMLResponse:
        r"""Asset inventory as Nmap-style XML"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/assets.nmap.xml'
        
        query_params = utils.get_query_params(operations.ExportAssetsNmapXMLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAssetsNmapXMLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.export_assets_nmap_xml_200_text_xml_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_csv(self, request: operations.ExportServicesCSVRequest, security: operations.ExportServicesCSVSecurity) -> operations.ExportServicesCSVResponse:
        r"""Service inventory as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/services.csv'
        
        query_params = utils.get_query_params(operations.ExportServicesCSVRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_services_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_json(self, request: operations.ExportServicesJSONRequest, security: operations.ExportServicesJSONSecurity) -> operations.ExportServicesJSONResponse:
        r"""Service inventory as JSON"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/services.json'
        
        query_params = utils.get_query_params(operations.ExportServicesJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Service]])
                res.services = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_jsonl(self, request: operations.ExportServicesJSONLRequest, security: operations.ExportServicesJSONLSecurity) -> operations.ExportServicesJSONLResponse:
        r"""Service inventory as JSON line-delimited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/services.jsonl'
        
        query_params = utils.get_query_params(operations.ExportServicesJSONLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesJSONLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.export_services_jsonl_200_application_json_binary_string = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_top_products_csv(self) -> operations.ExportServicesTopProductsCSVResponse:
        r"""Top service products as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services/top.products.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesTopProductsCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_services_top_products_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_top_protocols_csv(self) -> operations.ExportServicesTopProtocolsCSVResponse:
        r"""Top service protocols as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services/top.protocols.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesTopProtocolsCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_services_top_protocols_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_top_tcpcsv(self) -> operations.ExportServicesTopTCPCSVResponse:
        r"""Top TCP services as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services/top.tcp.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesTopTCPCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_services_top_tcpcsv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_services_top_udpcsv(self) -> operations.ExportServicesTopUDPCSVResponse:
        r"""Top UDP services as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services/top.udp.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportServicesTopUDPCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_services_top_udpcsv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_sites_csv(self) -> operations.ExportSitesCSVResponse:
        r"""Site list as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/sites.csv'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSitesCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_sites_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_sites_json(self, request: operations.ExportSitesJSONRequest, security: operations.ExportSitesJSONSecurity) -> operations.ExportSitesJSONResponse:
        r"""Export all sites"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/sites.json'
        
        query_params = utils.get_query_params(operations.ExportSitesJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSitesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Site]])
                res.sites = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_sites_jsonl(self, request: operations.ExportSitesJSONLRequest, security: operations.ExportSitesJSONLSecurity) -> operations.ExportSitesJSONLResponse:
        r"""Site list as JSON line-delimited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/sites.jsonl'
        
        query_params = utils.get_query_params(operations.ExportSitesJSONLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSitesJSONLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.export_sites_jsonl_200_application_json_binary_string = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_subnet_utilization_stats_csv(self, request: operations.ExportSubnetUtilizationStatsCSVRequest, security: operations.ExportSubnetUtilizationStatsCSVSecurity) -> operations.ExportSubnetUtilizationStatsCSVResponse:
        r"""Subnet utilization statistics as as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services/subnet.stats.csv'
        
        query_params = utils.get_query_params(operations.ExportSubnetUtilizationStatsCSVRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSubnetUtilizationStatsCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_subnet_utilization_stats_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_wireless_csv(self, request: operations.ExportWirelessCSVRequest, security: operations.ExportWirelessCSVSecurity) -> operations.ExportWirelessCSVResponse:
        r"""Wireless inventory as CSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/wireless.csv'
        
        query_params = utils.get_query_params(operations.ExportWirelessCSVRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportWirelessCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.export_wireless_csv_200_text_csv_binary_string = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def export_wireless_json(self, request: operations.ExportWirelessJSONRequest, security: operations.ExportWirelessJSONSecurity) -> operations.ExportWirelessJSONResponse:
        r"""Wireless inventory as JSON"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/wireless.json'
        
        query_params = utils.get_query_params(operations.ExportWirelessJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportWirelessJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Wireless]])
                res.wirelesses = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_wireless_jsonl(self, request: operations.ExportWirelessJSONLRequest, security: operations.ExportWirelessJSONLSecurity) -> operations.ExportWirelessJSONLResponse:
        r"""Wireless inventory as JSON line-delimited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export/org/wireless.jsonl'
        
        query_params = utils.get_query_params(operations.ExportWirelessJSONLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportWirelessJSONLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.export_wireless_jsonl_200_application_json_binary_string = out
        elif http_res.status_code == 401:
            pass

        return res

    