/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Application for Renewal of Contractor Migrant Workmen license
   *
   * @remarks
   * API to verify Application for Renewal of Contractor Migrant Workmen license.
   */
  aecmw(
    req: operations.AecmwRequestBody,
    security: operations.AecmwSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AecmwResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AecmwRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aecmw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AecmwSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AecmwResponse = new operations.AecmwResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aecmw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aecmw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Application for Renewal of Motor Transport Worker Registration
   *
   * @remarks
   * API to verify Application for Renewal of Motor Transport Worker Registration.
   */
  aemtw(
    req: operations.AemtwRequestBody,
    security: operations.AemtwSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AemtwResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AemtwRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aemtw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AemtwSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AemtwResponse = new operations.AemtwResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aemtw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Aemtw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Agriculture/ Agriculturist Certificate
   *
   * @remarks
   * API to verify Agriculture/ Agriculturist Certificate.
   */
  agcer(
    req: operations.AgcerRequestBody,
    security: operations.AgcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AgcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AgcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/agcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AgcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AgcerResponse = new operations.AgcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Agcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Application for License for Inter State Migrant Workmen
   *
   * @remarks
   * API to verify Application for License for Inter State Migrant Workmen.
   */
  alimw(
    req: operations.AlimwRequestBody,
    security: operations.AlimwSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlimwResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlimwRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/alimw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlimwSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlimwResponse = new operations.AlimwResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alimw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alimw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Application for Registration of Contractor Migrant Workmen license
   *
   * @remarks
   * API to verify Application for Registration of Contractor Migrant Workmen license.
   */
  arcmw(
    req: operations.ArcmwRequestBody,
    security: operations.ArcmwSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArcmwResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArcmwRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/arcmw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ArcmwSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArcmwResponse = new operations.ArcmwResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.arcmw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Arcmw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Application for Registration of Motor Transport Worker Registration
   *
   * @remarks
   * API to verify Application for Registration of Motor Transport Worker Registration.
   */
  armtw(
    req: operations.ArmtwRequestBody,
    security: operations.ArmtwSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ArmtwResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArmtwRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/armtw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ArmtwSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArmtwResponse = new operations.ArmtwResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.armtw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Armtw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Backward Area Certificate
   *
   * @remarks
   * API to verify Backward Area Certificate.
   */
  bacer(
    req: operations.BacerRequestBody,
    security: operations.BacerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BacerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BacerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bacer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BacerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BacerResponse = new operations.BacerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bacer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bacer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bonafide Certificate
   *
   * @remarks
   * API to verify Bonafide Certificate.
   */
  bhcer(
    req: operations.BhcerRequestBody,
    security: operations.BhcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BhcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BhcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bhcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BhcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BhcerResponse = new operations.BhcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bhcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bhcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * BPL Card
   *
   * @remarks
   * API to verify BPL Card.
   */
  bpcrd(
    req: operations.BpcrdRequestBody,
    security: operations.BpcrdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BpcrdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BpcrdRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bpcrd/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BpcrdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BpcrdResponse = new operations.BpcrdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcrd504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcrd504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Birth Certificate
   *
   * @remarks
   * API to verify Birth Certificate.
   */
  btcer(
    req: operations.BtcerRequestBody,
    security: operations.BtcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BtcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BtcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/btcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BtcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BtcerResponse = new operations.BtcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.btcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Btcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Renewal Certificate of Contract Labour License
   *
   * @remarks
   * API to verify Renewal Certificate of Contract Labour License.
   */
  cecer(
    req: operations.CecerRequestBody,
    security: operations.CecerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CecerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CecerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cecer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CecerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CecerResponse = new operations.CecerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cecer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cecer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Character Certificate
   *
   * @remarks
   * API to verify Character Certificate.
   */
  chcer(
    req: operations.ChcerRequestBody,
    security: operations.ChcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/chcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChcerResponse = new operations.ChcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registration Certificate for Contract Labour License
   *
   * @remarks
   * API to verify Registration Certificate for Contract Labour License.
   */
  clcer(
    req: operations.ClcerRequestBody,
    security: operations.ClcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/clcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClcerResponse = new operations.ClcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Clcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copy of Pariwar Register
   *
   * @remarks
   * API to verify Copy of Pariwar Register.
   */
  coprg(
    req: operations.CoprgRequestBody,
    security: operations.CoprgSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CoprgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CoprgRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/coprg/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CoprgSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CoprgResponse = new operations.CoprgResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.coprg504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Coprg504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dogra Class Certificate
   *
   * @remarks
   * API to verify Dogra Class Certificate.
   */
  dccer(
    req: operations.DccerRequestBody,
    security: operations.DccerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DccerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DccerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dccer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DccerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DccerResponse = new operations.DccerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dccer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dccer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Domicile Certificate
   *
   * @remarks
   * API to verify Domicile Certificate.
   */
  dmcer(
    req: operations.DmcerRequestBody,
    security: operations.DmcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DmcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DmcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dmcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DmcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DmcerResponse = new operations.DmcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dmcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dmcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disabled Person Identity Card/ Certificate
   *
   * @remarks
   * API to verify Disabled Person Identity Card/ Certificate.
   */
  dpicr(
    req: operations.DpicrRequestBody,
    security: operations.DpicrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DpicrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DpicrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dpicr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DpicrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DpicrResponse = new operations.DpicrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpicr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpicr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Death Certificate
   *
   * @remarks
   * API to verify Death Certificate.
   */
  dtcer(
    req: operations.DtcerRequestBody,
    security: operations.DtcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DtcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DtcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dtcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DtcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DtcerResponse = new operations.DtcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dtcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dtcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registration Certificate of Establishment Employing Contract Labour
   *
   * @remarks
   * API to verify Registration Certificate of Establishment Employing Contract Labour.
   */
  ercer(
    req: operations.ErcerRequestBody,
    security: operations.ErcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ErcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ErcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ercer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ErcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ErcerResponse = new operations.ErcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Freedom Fighter Certificate
   *
   * @remarks
   * API to verify Freedom Fighter Certificate.
   */
  ffcer(
    req: operations.FfcerRequestBody,
    security: operations.FfcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FfcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FfcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ffcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FfcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FfcerResponse = new operations.FfcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ffcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ffcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Indigent (Needy Person) Certificate
   *
   * @remarks
   * API to verify Indigent (Needy Person) Certificate.
   */
  igcer(
    req: operations.IgcerRequestBody,
    security: operations.IgcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IgcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IgcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/igcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IgcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IgcerResponse = new operations.IgcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.igcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Igcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Income Certificate
   *
   * @remarks
   * API to verify Income Certificate.
   */
  incer(
    req: operations.IncerRequestBody,
    security: operations.IncerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IncerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IncerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/incer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IncerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IncerResponse = new operations.IncerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Legal Heir Certificate
   *
   * @remarks
   * API to verify Legal Heir Certificate.
   */
  lhcer(
    req: operations.LhcerRequestBody,
    security: operations.LhcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LhcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LhcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/lhcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LhcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LhcerResponse = new operations.LhcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lhcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lhcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Minority Certificate
   *
   * @remarks
   * API to verify Minority Certificate.
   */
  mncer(
    req: operations.MncerRequestBody,
    security: operations.MncerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MncerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MncerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/mncer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MncerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MncerResponse = new operations.MncerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mncer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mncer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * MNREGA Job Card
   *
   * @remarks
   * API to verify MNREGA Job Card.
   */
  mnrga(
    req: operations.MnrgaRequestBody,
    security: operations.MnrgaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MnrgaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MnrgaRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/mnrga/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MnrgaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MnrgaResponse = new operations.MnrgaResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mnrga504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mnrga504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * OBC Certificate
   *
   * @remarks
   * API to verify OBC Certificate.
   */
  obcer(
    req: operations.ObcerRequestBody,
    security: operations.ObcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ObcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/obcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ObcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObcerResponse = new operations.ObcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rural Area Certificate
   *
   * @remarks
   * API to verify Rural Area Certificate.
   */
  racer(
    req: operations.RacerRequestBody,
    security: operations.RacerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RacerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RacerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/racer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RacerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RacerResponse = new operations.RacerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.racer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Racer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marriage Certificate
   *
   * @remarks
   * API to verify Marriage Certificate.
   */
  rmcer(
    req: operations.RmcerRequestBody,
    security: operations.RmcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RmcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RmcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/rmcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RmcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RmcerResponse = new operations.RmcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Renewal Certificate of Shops And Commercial Establishment
   *
   * @remarks
   * API to verify Renewal Certificate of Shops And Commercial Establishment.
   */
  secer(
    req: operations.SecerRequestBody,
    security: operations.SecerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/secer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecerResponse = new operations.SecerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Secer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SC/ST  Certificate
   *
   * @remarks
   * API to verify SC/ST  Certificate.
   */
  shcer(
    req: operations.ShcerRequestBody,
    security: operations.ShcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ShcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ShcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/shcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ShcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ShcerResponse = new operations.ShcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Senior Citizen Identity Card/ Certificate
   *
   * @remarks
   * API to verify Senior Citizen Identity Card/ Certificate.
   */
  sicrd(
    req: operations.SicrdRequestBody,
    security: operations.SicrdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SicrdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SicrdRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sicrd/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SicrdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SicrdResponse = new operations.SicrdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sicrd504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sicrd504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registration Certificate of Shops And Commercial Establishment
   *
   * @remarks
   * API to verify Registration Certificate of Shops And Commercial Establishment.
   */
  srcer(
    req: operations.SrcerRequestBody,
    security: operations.SrcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SrcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SrcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/srcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SrcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SrcerResponse = new operations.SrcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.srcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Srcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
