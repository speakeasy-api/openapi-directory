"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddataplexv1dataprofileresult as shared_googleclouddataplexv1dataprofileresult
from ..shared import googleclouddataplexv1dataqualityresult as shared_googleclouddataplexv1dataqualityresult
from ..shared import googleclouddataplexv1dataqualityspec as shared_googleclouddataplexv1dataqualityspec
from ..shared import googleclouddataplexv1datascanexecutionspec as shared_googleclouddataplexv1datascanexecutionspec
from ..shared import googleclouddataplexv1datascanexecutionstatus as shared_googleclouddataplexv1datascanexecutionstatus
from ..shared import googleclouddataplexv1datasource as shared_googleclouddataplexv1datasource
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GoogleCloudDataplexV1DataScanStateEnum(str, Enum):
    r"""Output only. Current state of the DataScan."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'

class GoogleCloudDataplexV1DataScanTypeEnum(str, Enum):
    r"""Output only. The type of DataScan."""
    DATA_SCAN_TYPE_UNSPECIFIED = 'DATA_SCAN_TYPE_UNSPECIFIED'
    DATA_QUALITY = 'DATA_QUALITY'
    DATA_PROFILE = 'DATA_PROFILE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDataplexV1DataScan:
    r"""Represents a user-visible job which provides the insights for the related data source.For example: Data Quality: generates queries based on the rules and runs against the data to get data quality check results. Data Profile: analyzes the data in table(s) and generates insights about the structure, content and relationships (such as null percent, cardinality, min/max/mean, etc)."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the scan was created."""  
    data: Optional[shared_googleclouddataplexv1datasource.GoogleCloudDataplexV1DataSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""The data source for DataScan."""  
    data_profile_result: Optional[shared_googleclouddataplexv1dataprofileresult.GoogleCloudDataplexV1DataProfileResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataProfileResult'), 'exclude': lambda f: f is None }})
    r"""DataProfileResult defines the output of DataProfileScan. Each field of the table will have field type specific profile result."""  
    data_profile_spec: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataProfileSpec'), 'exclude': lambda f: f is None }})
    r"""DataProfileScan related setting."""  
    data_quality_result: Optional[shared_googleclouddataplexv1dataqualityresult.GoogleCloudDataplexV1DataQualityResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataQualityResult'), 'exclude': lambda f: f is None }})
    r"""The output of a DataQualityScan."""  
    data_quality_spec: Optional[shared_googleclouddataplexv1dataqualityspec.GoogleCloudDataplexV1DataQualitySpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataQualitySpec'), 'exclude': lambda f: f is None }})
    r"""DataQualityScan related setting."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the scan. Must be between 1-1024 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. User friendly display name. Must be between 1-256 characters."""  
    execution_spec: Optional[shared_googleclouddataplexv1datascanexecutionspec.GoogleCloudDataplexV1DataScanExecutionSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionSpec'), 'exclude': lambda f: f is None }})
    r"""DataScan execution settings."""  
    execution_status: Optional[shared_googleclouddataplexv1datascanexecutionstatus.GoogleCloudDataplexV1DataScanExecutionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionStatus'), 'exclude': lambda f: f is None }})
    r"""Status of the data scan execution."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. User-defined labels for the scan."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The relative resource name of the scan, of the form: projects/{project}/locations/{location_id}/dataScans/{datascan_id}, where project refers to a project_id or project_number and location_id refers to a GCP region."""  
    state: Optional[GoogleCloudDataplexV1DataScanStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Current state of the DataScan."""  
    type: Optional[GoogleCloudDataplexV1DataScanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of DataScan."""  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""Output only. System generated globally unique ID for the scan. This ID will be different if the scan is deleted and re-created with the same name."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the scan was last updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDataplexV1DataScanInput:
    r"""Represents a user-visible job which provides the insights for the related data source.For example: Data Quality: generates queries based on the rules and runs against the data to get data quality check results. Data Profile: analyzes the data in table(s) and generates insights about the structure, content and relationships (such as null percent, cardinality, min/max/mean, etc)."""
    
    data: Optional[shared_googleclouddataplexv1datasource.GoogleCloudDataplexV1DataSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""The data source for DataScan."""  
    data_profile_result: Optional[shared_googleclouddataplexv1dataprofileresult.GoogleCloudDataplexV1DataProfileResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataProfileResult'), 'exclude': lambda f: f is None }})
    r"""DataProfileResult defines the output of DataProfileScan. Each field of the table will have field type specific profile result."""  
    data_profile_spec: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataProfileSpec'), 'exclude': lambda f: f is None }})
    r"""DataProfileScan related setting."""  
    data_quality_result: Optional[shared_googleclouddataplexv1dataqualityresult.GoogleCloudDataplexV1DataQualityResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataQualityResult'), 'exclude': lambda f: f is None }})
    r"""The output of a DataQualityScan."""  
    data_quality_spec: Optional[shared_googleclouddataplexv1dataqualityspec.GoogleCloudDataplexV1DataQualitySpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataQualitySpec'), 'exclude': lambda f: f is None }})
    r"""DataQualityScan related setting."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the scan. Must be between 1-1024 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. User friendly display name. Must be between 1-256 characters."""  
    execution_spec: Optional[shared_googleclouddataplexv1datascanexecutionspec.GoogleCloudDataplexV1DataScanExecutionSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionSpec'), 'exclude': lambda f: f is None }})
    r"""DataScan execution settings."""  
    execution_status: Optional[shared_googleclouddataplexv1datascanexecutionstatus.GoogleCloudDataplexV1DataScanExecutionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionStatus'), 'exclude': lambda f: f is None }})
    r"""Status of the data scan execution."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. User-defined labels for the scan."""  
    