/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ContentRedaction } from "./contentredaction";
import { LanguageCodeEnum } from "./languagecodeenum";
import { LanguageIdSettings } from "./languageidsettings";
import { VocabularyFilterMethodEnum } from "./vocabularyfiltermethodenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides additional optional settings for your request, including content redaction, automatic language identification; allows you to apply custom language models, custom vocabulary filters, and custom vocabularies.
 */
export class CallAnalyticsJobSettings extends SpeakeasyBase {
  /**
   * Makes it possible to redact or flag specified personally identifiable information (PII) in your transcript. If you use <code>ContentRedaction</code>, you must also include the sub-parameters: <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and <code>RedactionType</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ContentRedaction" })
  @Type(() => ContentRedaction)
  contentRedaction?: ContentRedaction;

  @SpeakeasyMetadata({ elemType: LanguageIdSettings })
  @Expose({ name: "LanguageIdSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LanguageIdSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LanguageIdSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  languageIdSettings?: Record<string, LanguageIdSettings>;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageModelName" })
  languageModelName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageOptions" })
  languageOptions?: LanguageCodeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyFilterMethod" })
  vocabularyFilterMethod?: VocabularyFilterMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyFilterName" })
  vocabularyFilterName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyName" })
  vocabularyName?: string;
}
