"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import abortinfo as shared_abortinfo
from ..shared import appengineversioninfo as shared_appengineversioninfo
from ..shared import cloudfunctioninfo as shared_cloudfunctioninfo
from ..shared import cloudrunrevisioninfo as shared_cloudrunrevisioninfo
from ..shared import cloudsqlinstanceinfo as shared_cloudsqlinstanceinfo
from ..shared import deliverinfo as shared_deliverinfo
from ..shared import dropinfo as shared_dropinfo
from ..shared import endpointinfo as shared_endpointinfo
from ..shared import firewallinfo as shared_firewallinfo
from ..shared import forwardinfo as shared_forwardinfo
from ..shared import forwardingruleinfo as shared_forwardingruleinfo
from ..shared import gkemasterinfo as shared_gkemasterinfo
from ..shared import instanceinfo as shared_instanceinfo
from ..shared import loadbalancerinfo as shared_loadbalancerinfo
from ..shared import networkinfo as shared_networkinfo
from ..shared import routeinfo as shared_routeinfo
from ..shared import vpcconnectorinfo as shared_vpcconnectorinfo
from ..shared import vpngatewayinfo as shared_vpngatewayinfo
from ..shared import vpntunnelinfo as shared_vpntunnelinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StepStateEnum(str, Enum):
    r"""Each step is in one of the pre-defined states."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    START_FROM_INSTANCE = 'START_FROM_INSTANCE'
    START_FROM_INTERNET = 'START_FROM_INTERNET'
    START_FROM_PRIVATE_NETWORK = 'START_FROM_PRIVATE_NETWORK'
    START_FROM_GKE_MASTER = 'START_FROM_GKE_MASTER'
    START_FROM_CLOUD_SQL_INSTANCE = 'START_FROM_CLOUD_SQL_INSTANCE'
    START_FROM_CLOUD_FUNCTION = 'START_FROM_CLOUD_FUNCTION'
    START_FROM_APP_ENGINE_VERSION = 'START_FROM_APP_ENGINE_VERSION'
    START_FROM_CLOUD_RUN_REVISION = 'START_FROM_CLOUD_RUN_REVISION'
    APPLY_INGRESS_FIREWALL_RULE = 'APPLY_INGRESS_FIREWALL_RULE'
    APPLY_EGRESS_FIREWALL_RULE = 'APPLY_EGRESS_FIREWALL_RULE'
    APPLY_ROUTE = 'APPLY_ROUTE'
    APPLY_FORWARDING_RULE = 'APPLY_FORWARDING_RULE'
    SPOOFING_APPROVED = 'SPOOFING_APPROVED'
    ARRIVE_AT_INSTANCE = 'ARRIVE_AT_INSTANCE'
    ARRIVE_AT_INTERNAL_LOAD_BALANCER = 'ARRIVE_AT_INTERNAL_LOAD_BALANCER'
    ARRIVE_AT_EXTERNAL_LOAD_BALANCER = 'ARRIVE_AT_EXTERNAL_LOAD_BALANCER'
    ARRIVE_AT_VPN_GATEWAY = 'ARRIVE_AT_VPN_GATEWAY'
    ARRIVE_AT_VPN_TUNNEL = 'ARRIVE_AT_VPN_TUNNEL'
    ARRIVE_AT_VPC_CONNECTOR = 'ARRIVE_AT_VPC_CONNECTOR'
    NAT = 'NAT'
    PROXY_CONNECTION = 'PROXY_CONNECTION'
    DELIVER = 'DELIVER'
    DROP = 'DROP'
    FORWARD = 'FORWARD'
    ABORT = 'ABORT'
    VIEWER_PERMISSION_MISSING = 'VIEWER_PERMISSION_MISSING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Step:
    r"""A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration."""
    
    abort: Optional[shared_abortinfo.AbortInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abort'), 'exclude': lambda f: f is None }})
    r"""Details of the final state \\"abort\\" and associated resource."""  
    app_engine_version: Optional[shared_appengineversioninfo.AppEngineVersionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appEngineVersion'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with an App Engine version."""  
    causes_drop: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('causesDrop'), 'exclude': lambda f: f is None }})
    r"""This is a step that leads to the final state Drop."""  
    cloud_function: Optional[shared_cloudfunctioninfo.CloudFunctionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudFunction'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Cloud Function."""  
    cloud_run_revision: Optional[shared_cloudrunrevisioninfo.CloudRunRevisionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudRunRevision'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Cloud Run revision."""  
    cloud_sql_instance: Optional[shared_cloudsqlinstanceinfo.CloudSQLInstanceInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudSqlInstance'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Cloud SQL instance."""  
    deliver: Optional[shared_deliverinfo.DeliverInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliver'), 'exclude': lambda f: f is None }})
    r"""Details of the final state \\"deliver\\" and associated resource."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the step. Usually this is a summary of the state."""  
    drop: Optional[shared_dropinfo.DropInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drop'), 'exclude': lambda f: f is None }})
    r"""Details of the final state \\"drop\\" and associated resource."""  
    endpoint: Optional[shared_endpointinfo.EndpointInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint'), 'exclude': lambda f: f is None }})
    r"""For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model."""  
    firewall: Optional[shared_firewallinfo.FirewallInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewall'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule."""  
    forward: Optional[shared_forwardinfo.ForwardInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forward'), 'exclude': lambda f: f is None }})
    r"""Details of the final state \\"forward\\" and associated resource."""  
    forwarding_rule: Optional[shared_forwardingruleinfo.ForwardingRuleInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardingRule'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine forwarding rule."""  
    gke_master: Optional[shared_gkemasterinfo.GKEMasterInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeMaster'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master."""  
    instance: Optional[shared_instanceinfo.InstanceInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine instance."""  
    load_balancer: Optional[shared_loadbalancerinfo.LoadBalancerInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadBalancer'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a load balancer."""  
    network: Optional[shared_networkinfo.NetworkInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine network."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Project ID that contains the configuration this step is validating."""  
    route: Optional[shared_routeinfo.RouteInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine route."""  
    state: Optional[StepStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Each step is in one of the pre-defined states."""  
    vpc_connector: Optional[shared_vpcconnectorinfo.VpcConnectorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConnector'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a VPC connector."""  
    vpn_gateway: Optional[shared_vpngatewayinfo.VpnGatewayInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpnGateway'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine VPN gateway."""  
    vpn_tunnel: Optional[shared_vpntunnelinfo.VpnTunnelInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpnTunnel'), 'exclude': lambda f: f is None }})
    r"""For display only. Metadata associated with a Compute Engine VPN tunnel."""  
    