// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type AddBatchWebinarRegistrantsSecurity struct {
	Bearer *shared.SchemeBearer `security:"scheme,type=apiKey,subtype=header"`
	OAuth  *shared.SchemeOAuth  `security:"scheme,type=oauth2"`
}

type AddBatchWebinarRegistrantsPathParams struct {
	// Unique identifier of the webinar.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

type AddBatchWebinarRegistrantsApplicationJSONRegistrants struct {
	// Email address of the registrant.
	Email string `json:"email"`
	// First name of the registrant.
	FirstName string `json:"first_name"`
	// Last name of the registrant.
	LastName *string `json:"last_name,omitempty"`
}

type AddBatchWebinarRegistrantsApplicationJSON struct {
	// If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`.
	//
	// You **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).
	AutoApprove *bool                                                  `json:"auto_approve,omitempty"`
	Registrants []AddBatchWebinarRegistrantsApplicationJSONRegistrants `json:"registrants,omitempty"`
}

type AddBatchWebinarRegistrantsRequest struct {
	PathParams AddBatchWebinarRegistrantsPathParams
	Request    *AddBatchWebinarRegistrantsApplicationJSON `request:"mediaType=application/json"`
	Security   AddBatchWebinarRegistrantsSecurity
}

type AddBatchWebinarRegistrants200ApplicationXMLRegistrants struct {
	// Email address of the registrant.
	Email *string
	// Unique URL using which registrant can join the webinar.
	JoinURL *string
	// Unique identifier of the registrant.
	RegistrantID *string
}

// AddBatchWebinarRegistrants200ApplicationXML - **HTTP Status Code:** `200` **OK** <br>
// Registrants added.
type AddBatchWebinarRegistrants200ApplicationXML struct {
	Registrants []AddBatchWebinarRegistrants200ApplicationXMLRegistrants
}

type AddBatchWebinarRegistrants200ApplicationJSONRegistrants struct {
	// Email address of the registrant.
	Email *string `json:"email,omitempty"`
	// Unique URL using which registrant can join the webinar.
	JoinURL *string `json:"join_url,omitempty"`
	// Unique identifier of the registrant.
	RegistrantID *string `json:"registrant_id,omitempty"`
}

// AddBatchWebinarRegistrants200ApplicationJSON - **HTTP Status Code:** `200` **OK** <br>
// Registrants added.
type AddBatchWebinarRegistrants200ApplicationJSON struct {
	Registrants []AddBatchWebinarRegistrants200ApplicationJSONRegistrants `json:"registrants,omitempty"`
}

type AddBatchWebinarRegistrantsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK** <br>
	// Registrants added.
	AddBatchWebinarRegistrants200ApplicationJSONObject *AddBatchWebinarRegistrants200ApplicationJSON
}
