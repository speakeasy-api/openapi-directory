"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import jobstate_enum as shared_jobstate_enum
from ..shared import listcodereviewsresponse as shared_listcodereviewsresponse
from ..shared import providertype_enum as shared_providertype_enum
from enum import Enum
from typing import Any, Optional

class ListCodeReviewsTypeEnum(str, Enum):
    r"""The type of code reviews to list in the response."""
    PULL_REQUEST = 'PullRequest'
    REPOSITORY_ANALYSIS = 'RepositoryAnalysis'


@dataclasses.dataclass
class ListCodeReviewsRequest:
    
    type: ListCodeReviewsTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Type', 'style': 'form', 'explode': True }})
    r"""The type of code reviews to list in the response."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results that are returned per call. The default is 100."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged."""  
    provider_types: Optional[list[shared_providertype_enum.ProviderTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ProviderTypes', 'style': 'form', 'explode': True }})
    r"""List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub."""  
    repository_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RepositoryNames', 'style': 'form', 'explode': True }})
    r"""List of repository names for filtering that needs to be applied before displaying the result."""  
    states: Optional[list[shared_jobstate_enum.JobStateEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'States', 'style': 'form', 'explode': True }})
    r"""<p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p> <p>The valid code review states are:</p> <ul> <li> <p> <code>Completed</code>: The code review is complete.</p> </li> <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li> <li> <p> <code>Failed</code>: The code review failed.</p> </li> <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li> </ul>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListCodeReviewsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_code_reviews_response: Optional[shared_listcodereviewsresponse.ListCodeReviewsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    