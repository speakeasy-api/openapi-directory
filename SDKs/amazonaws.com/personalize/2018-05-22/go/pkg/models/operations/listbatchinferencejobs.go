// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListBatchInferenceJobsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListBatchInferenceJobsXAmzTargetEnum
type ListBatchInferenceJobsXAmzTargetEnum string

const (
	ListBatchInferenceJobsXAmzTargetEnumAmazonPersonalizeListBatchInferenceJobs ListBatchInferenceJobsXAmzTargetEnum = "AmazonPersonalize.ListBatchInferenceJobs"
)

func (e *ListBatchInferenceJobsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.ListBatchInferenceJobs":
		*e = ListBatchInferenceJobsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBatchInferenceJobsXAmzTargetEnum: %s", s)
	}
}

type ListBatchInferenceJobsHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListBatchInferenceJobsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListBatchInferenceJobsRequest struct {
	QueryParams ListBatchInferenceJobsQueryParams
	Headers     ListBatchInferenceJobsHeaders
	Request     shared.ListBatchInferenceJobsRequest `request:"mediaType=application/json"`
}

type ListBatchInferenceJobsResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListBatchInferenceJobsResponse *shared.ListBatchInferenceJobsResponse
	StatusCode                     int
	RawResponse                    *http.Response
}
