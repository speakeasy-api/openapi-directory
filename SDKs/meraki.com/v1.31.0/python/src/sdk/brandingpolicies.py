"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class BrandingPolicies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_branding_policy(self, request: operations.CreateOrganizationBrandingPolicyRequest) -> operations.CreateOrganizationBrandingPolicyResponse:
        r"""Add a new branding policy to an organization
        Add a new branding policy to an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationBrandingPolicyRequest, base_url, '/organizations/{organizationId}/brandingPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationBrandingPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateOrganizationBrandingPolicy201ApplicationJSON])
                res.create_organization_branding_policy_201_application_json_object = out

        return res

    def delete_organization_branding_policy(self, request: operations.DeleteOrganizationBrandingPolicyRequest) -> operations.DeleteOrganizationBrandingPolicyResponse:
        r"""Delete a branding policy
        Delete a branding policy
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationBrandingPolicyRequest, base_url, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationBrandingPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_organization_branding_policies(self, request: operations.GetOrganizationBrandingPoliciesRequest) -> operations.GetOrganizationBrandingPoliciesResponse:
        r"""List the branding policies of an organization
        List the branding policies of an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationBrandingPoliciesRequest, base_url, '/organizations/{organizationId}/brandingPolicies', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationBrandingPoliciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationBrandingPolicies200ApplicationJSON]])
                res.get_organization_branding_policies_200_application_json_objects = out

        return res

    def get_organization_branding_policies_priorities(self, request: operations.GetOrganizationBrandingPoliciesPrioritiesRequest) -> operations.GetOrganizationBrandingPoliciesPrioritiesResponse:
        r"""Return the branding policy IDs of an organization in priority order
        Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationBrandingPoliciesPrioritiesRequest, base_url, '/organizations/{organizationId}/brandingPolicies/priorities', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationBrandingPoliciesPrioritiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationBrandingPoliciesPriorities200ApplicationJSON])
                res.get_organization_branding_policies_priorities_200_application_json_object = out

        return res

    def get_organization_branding_policy(self, request: operations.GetOrganizationBrandingPolicyRequest) -> operations.GetOrganizationBrandingPolicyResponse:
        r"""Return a branding policy
        Return a branding policy
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationBrandingPolicyRequest, base_url, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationBrandingPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationBrandingPolicy200ApplicationJSON])
                res.get_organization_branding_policy_200_application_json_object = out

        return res

    def update_organization_branding_policies_priorities(self, request: operations.UpdateOrganizationBrandingPoliciesPrioritiesRequest) -> operations.UpdateOrganizationBrandingPoliciesPrioritiesResponse:
        r"""Update the priority ordering of an organization's branding policies.
        Update the priority ordering of an organization's branding policies.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationBrandingPoliciesPrioritiesRequest, base_url, '/organizations/{organizationId}/brandingPolicies/priorities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationBrandingPoliciesPrioritiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateOrganizationBrandingPoliciesPriorities200ApplicationJSON])
                res.update_organization_branding_policies_priorities_200_application_json_object = out

        return res

    def update_organization_branding_policy(self, request: operations.UpdateOrganizationBrandingPolicyRequest) -> operations.UpdateOrganizationBrandingPolicyResponse:
        r"""Update a branding policy
        Update a branding policy
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationBrandingPolicyRequest, base_url, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationBrandingPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateOrganizationBrandingPolicy200ApplicationJSON])
                res.update_organization_branding_policy_200_application_json_object = out

        return res

    