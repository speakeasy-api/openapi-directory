// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BackgroundJobLogEntryCompletionStateEnum - Job completion state, i.e. the final state after the job completed.
type BackgroundJobLogEntryCompletionStateEnum string

const (
	BackgroundJobLogEntryCompletionStateEnumJobCompletionStateUnspecified BackgroundJobLogEntryCompletionStateEnum = "JOB_COMPLETION_STATE_UNSPECIFIED"
	BackgroundJobLogEntryCompletionStateEnumSucceeded                     BackgroundJobLogEntryCompletionStateEnum = "SUCCEEDED"
	BackgroundJobLogEntryCompletionStateEnumFailed                        BackgroundJobLogEntryCompletionStateEnum = "FAILED"
)

func (e *BackgroundJobLogEntryCompletionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JOB_COMPLETION_STATE_UNSPECIFIED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = BackgroundJobLogEntryCompletionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackgroundJobLogEntryCompletionStateEnum: %s", s)
	}
}

// BackgroundJobLogEntryJobTypeEnum - The type of job that was executed.
type BackgroundJobLogEntryJobTypeEnum string

const (
	BackgroundJobLogEntryJobTypeEnumBackgroundJobTypeUnspecified      BackgroundJobLogEntryJobTypeEnum = "BACKGROUND_JOB_TYPE_UNSPECIFIED"
	BackgroundJobLogEntryJobTypeEnumBackgroundJobTypeSourceSeed       BackgroundJobLogEntryJobTypeEnum = "BACKGROUND_JOB_TYPE_SOURCE_SEED"
	BackgroundJobLogEntryJobTypeEnumBackgroundJobTypeConvert          BackgroundJobLogEntryJobTypeEnum = "BACKGROUND_JOB_TYPE_CONVERT"
	BackgroundJobLogEntryJobTypeEnumBackgroundJobTypeApplyDestination BackgroundJobLogEntryJobTypeEnum = "BACKGROUND_JOB_TYPE_APPLY_DESTINATION"
	BackgroundJobLogEntryJobTypeEnumBackgroundJobTypeImportRulesFile  BackgroundJobLogEntryJobTypeEnum = "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE"
)

func (e *BackgroundJobLogEntryJobTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BACKGROUND_JOB_TYPE_UNSPECIFIED":
		fallthrough
	case "BACKGROUND_JOB_TYPE_SOURCE_SEED":
		fallthrough
	case "BACKGROUND_JOB_TYPE_CONVERT":
		fallthrough
	case "BACKGROUND_JOB_TYPE_APPLY_DESTINATION":
		fallthrough
	case "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE":
		*e = BackgroundJobLogEntryJobTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackgroundJobLogEntryJobTypeEnum: %s", s)
	}
}

// BackgroundJobLogEntry - Execution log of a background job.
type BackgroundJobLogEntry struct {
	// Details regarding an Apply background job.
	ApplyJobDetails *ApplyJobDetails `json:"applyJobDetails,omitempty"`
	// Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.
	CompletionComment *string `json:"completionComment,omitempty"`
	// Job completion state, i.e. the final state after the job completed.
	CompletionState *BackgroundJobLogEntryCompletionStateEnum `json:"completionState,omitempty"`
	// Details regarding a Convert background job.
	ConvertJobDetails *ConvertJobDetails `json:"convertJobDetails,omitempty"`
	// The timestamp when the background job was finished.
	FinishTime *string `json:"finishTime,omitempty"`
	// The background job log entry ID.
	ID *string `json:"id,omitempty"`
	// Details regarding an Import Rules background job.
	ImportRulesJobDetails *ImportRulesJobDetails `json:"importRulesJobDetails,omitempty"`
	// The type of job that was executed.
	JobType *BackgroundJobLogEntryJobTypeEnum `json:"jobType,omitempty"`
	// Whether the client requested the conversion workspace to be committed after a successful completion of the job.
	RequestAutocommit *bool `json:"requestAutocommit,omitempty"`
	// Details regarding a Seed background job.
	SeedJobDetails *SeedJobDetails `json:"seedJobDetails,omitempty"`
	// The timestamp when the background job was started.
	StartTime *string `json:"startTime,omitempty"`
}
