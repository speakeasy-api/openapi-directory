/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConfigManagementGitConfig - Git repo configuration for a single cluster.
 */
public class ConfigManagementGitConfig {
    /**
     * The GCP Service Account Email used for auth when secret_type is gcpServiceAccount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gcpServiceAccountEmail")
    public String gcpServiceAccountEmail;

    public ConfigManagementGitConfig withGcpServiceAccountEmail(String gcpServiceAccountEmail) {
        this.gcpServiceAccountEmail = gcpServiceAccountEmail;
        return this;
    }
    
    /**
     * URL for the HTTPS proxy to be used when communicating with the Git repo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpsProxy")
    public String httpsProxy;

    public ConfigManagementGitConfig withHttpsProxy(String httpsProxy) {
        this.httpsProxy = httpsProxy;
        return this;
    }
    
    /**
     * The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyDir")
    public String policyDir;

    public ConfigManagementGitConfig withPolicyDir(String policyDir) {
        this.policyDir = policyDir;
        return this;
    }
    
    /**
     * Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretType")
    public String secretType;

    public ConfigManagementGitConfig withSecretType(String secretType) {
        this.secretType = secretType;
        return this;
    }
    
    /**
     * The branch of the repository to sync from. Default: master.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncBranch")
    public String syncBranch;

    public ConfigManagementGitConfig withSyncBranch(String syncBranch) {
        this.syncBranch = syncBranch;
        return this;
    }
    
    /**
     * The URL of the Git repository to use as the source of truth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncRepo")
    public String syncRepo;

    public ConfigManagementGitConfig withSyncRepo(String syncRepo) {
        this.syncRepo = syncRepo;
        return this;
    }
    
    /**
     * Git revision (tag or hash) to check out. Default HEAD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncRev")
    public String syncRev;

    public ConfigManagementGitConfig withSyncRev(String syncRev) {
        this.syncRev = syncRev;
        return this;
    }
    
    /**
     * Period in seconds between consecutive syncs. Default: 15.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncWaitSecs")
    public String syncWaitSecs;

    public ConfigManagementGitConfig withSyncWaitSecs(String syncWaitSecs) {
        this.syncWaitSecs = syncWaitSecs;
        return this;
    }
    
    public ConfigManagementGitConfig(){}
}
