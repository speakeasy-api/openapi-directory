"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VendorInvoices:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_payment_1(self, request: operations.CreatePayment1Request) -> operations.CreatePayment1Response:
        r"""Creates a new payment on the vendor account and assigns the payment to the invoice.
        Creates a new payment on the vendor account and assigns the payment to the invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePayment1Request, base_url, '/accounting/providers/invoices/{invoiceId}/payments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayment1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_4(self, request: shared.ProviderInvoiceCreateDTO) -> operations.Create4Response:
        r"""Creates a new invoice.
        Creates a new invoice from jobs. Jobs are grouped by provider and currency, therefore multiple invoices can be created.If any of the jobs cannot be invoiced (ie. it is already invoiced) then an error is reported.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/providers/invoices'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProviderInvoiceCreateResultDTO])
                res.provider_invoice_create_result_dto = out

        return res

    def delete_6(self, request: operations.Delete6Request) -> operations.Delete6Response:
        r"""Removes a provider invoice.
        Removes a provider invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete6Request, base_url, '/accounting/providers/invoices/{invoiceId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete6Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_7(self, request: operations.Delete7Request) -> operations.Delete7Response:
        r"""Removes a provider payment.
        Removes a provider payment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete7Request, base_url, '/accounting/providers/payments/{paymentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete7Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_ids_3(self, request: operations.GetAllIds3Request) -> operations.GetAllIds3Response:
        r"""Returns vendor invoices' internal identifiers.
        Returns vendor invoices' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/providers/invoices/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds3Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_3_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_all_2(self, request: operations.GetAll2Request) -> operations.GetAll2Response:
        r"""Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
        Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/providers/invoices'
        
        query_params = utils.get_query_params(operations.GetAll2Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAll2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProviderInvoiceDTO]])
                res.provider_invoice_dtos = out

        return res

    def get_by_id_3(self, request: operations.GetByID3Request) -> operations.GetByID3Response:
        r"""Returns provider invoice details.
        Returns provider invoice details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID3Request, base_url, '/accounting/providers/invoices/{invoiceId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProviderInvoiceDTO])
                res.provider_invoice_dto = out

        return res

    def get_document_1(self, request: operations.GetDocument1Request) -> operations.GetDocument1Response:
        r"""Generates provider invoice document (PDF).
        Generates provider invoice document (PDF).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocument1Request, base_url, '/accounting/providers/invoices/{invoiceId}/document', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocument1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.URLResultDTO])
                res.url_result_dto = out

        return res

    def get_payments_1(self, request: operations.GetPayments1Request) -> operations.GetPayments1Response:
        r"""Returns all payments for the vendor invoice.
        Returns all payments for the vendor invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayments1Request, base_url, '/accounting/providers/invoices/{invoiceId}/payments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayments1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PaymentDTO]])
                res.payment_dtos = out

        return res

    def send(self, request: operations.SendRequest) -> operations.SendResponse:
        r"""Sends a provider invoice.
        Sends a provider invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendRequest, base_url, '/accounting/providers/invoices/{invoiceId}/send', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def set_status(self, request: operations.SetStatusRequest) -> operations.SetStatusResponse:
        r"""Changes invoice status to given status.
        Changes invoice status to given status.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetStatusRequest, base_url, '/accounting/providers/invoices/{invoiceId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "status_request_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    