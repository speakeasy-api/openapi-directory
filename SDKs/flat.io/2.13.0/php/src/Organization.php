<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organization 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Count the organization users using the provided filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersResponse
     */
	public function countOrgaUsers(
        \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/users/count');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountOrgaUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->countOrgaUsers200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new couple of LTI 1.x credentials
     * 
     * Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LtiCredentialsCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLtiCredentialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLtiCredentialsResponse
     */
	public function createLtiCredentials(
        \OpenAPI\OpenAPI\Models\Shared\LtiCredentialsCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateLtiCredentialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLtiCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/lti/credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLtiCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ltiCredentials = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LtiCredentials', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new invitation to join the organization
     * 
     * This method creates and sends invitation for teachers and admins.
     * 
     * Invitations can only be used by new Flat users or users who are not part of the organization yet.
     * 
     * If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OrganizationInvitationCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInvitationResponse
     */
	public function createOrganizationInvitation(
        \OpenAPI\OpenAPI\Models\Shared\OrganizationInvitationCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/invitations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrganizationInvitation', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user account
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationUserResponse
     */
	public function createOrganizationUser(
        \OpenAPI\OpenAPI\Models\Shared\UserCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDetailsAdmin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserDetailsAdmin', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List LTI 1.x credentials
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLtiCredentialsResponse
     */
	public function listLtiCredentials(
    ): \OpenAPI\OpenAPI\Models\Operations\ListLtiCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/lti/credentials');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLtiCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ltiCredentials = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LtiCredentials>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the organization invitations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsResponse
     */
	public function listOrganizationInvitations(
        \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/invitations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListOrganizationInvitationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrganizationInvitation>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the organization users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersResponse
     */
	public function listOrganizationUsers(
        \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListOrganizationUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDetailsAdmins = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserDetailsAdmin>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an organization invitation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationResponse
     */
	public function removeOrganizationInvitation(
        \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/invitations/{invitation}', \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an account from Flat
     * 
     * This operation removes an account from Flat and its data, including:
     * * The music scores created by this user (documents, history, comments, collaboration information)
     * * Education related data (assignments and classroom information)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserResponse
     */
	public function removeOrganizationUser(
        \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/users/{user}', \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveOrganizationUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revoke LTI 1.x credentials
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsResponse
     */
	public function revokeLtiCredentials(
        \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/lti/credentials/{credentials}', \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RevokeLtiCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update account information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserResponse
     */
	public function updateOrganizationUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/users/{user}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userAdminUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDetailsAdmin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserDetailsAdmin', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
}