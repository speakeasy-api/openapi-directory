/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BfdStatus - Next free: 15
 */
public class BfdStatus {
    /**
     * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bfdSessionInitializationMode")
    public BfdStatusBfdSessionInitializationModeEnum bfdSessionInitializationMode;

    public BfdStatus withBfdSessionInitializationMode(BfdStatusBfdSessionInitializationModeEnum bfdSessionInitializationMode) {
        this.bfdSessionInitializationMode = bfdSessionInitializationMode;
        return this;
    }
    
    /**
     * Unix timestamp of the most recent config update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configUpdateTimestampMicros")
    public String configUpdateTimestampMicros;

    public BfdStatus withConfigUpdateTimestampMicros(String configUpdateTimestampMicros) {
        this.configUpdateTimestampMicros = configUpdateTimestampMicros;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controlPacketCounts")
    public BfdStatusPacketCounts controlPacketCounts;

    public BfdStatus withControlPacketCounts(BfdStatusPacketCounts controlPacketCounts) {
        this.controlPacketCounts = controlPacketCounts;
        return this;
    }
    
    /**
     * Inter-packet time interval statistics for control packets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controlPacketIntervals")
    public PacketIntervals[] controlPacketIntervals;

    public BfdStatus withControlPacketIntervals(PacketIntervals[] controlPacketIntervals) {
        this.controlPacketIntervals = controlPacketIntervals;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("echoPacketCounts")
    public BfdStatusPacketCounts echoPacketCounts;

    public BfdStatus withEchoPacketCounts(BfdStatusPacketCounts echoPacketCounts) {
        this.echoPacketCounts = echoPacketCounts;
        return this;
    }
    
    /**
     * Inter-packet time interval statistics for echo packets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("echoPacketIntervals")
    public PacketIntervals[] echoPacketIntervals;

    public BfdStatus withEchoPacketIntervals(PacketIntervals[] echoPacketIntervals) {
        this.echoPacketIntervals = echoPacketIntervals;
        return this;
    }
    
    /**
     * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localDiagnostic")
    public BfdStatusLocalDiagnosticEnum localDiagnostic;

    public BfdStatus withLocalDiagnostic(BfdStatusLocalDiagnosticEnum localDiagnostic) {
        this.localDiagnostic = localDiagnostic;
        return this;
    }
    
    /**
     * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localState")
    public BfdStatusLocalStateEnum localState;

    public BfdStatus withLocalState(BfdStatusLocalStateEnum localState) {
        this.localState = localState;
        return this;
    }
    
    /**
     * Negotiated transmit interval for control packets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("negotiatedLocalControlTxIntervalMs")
    public Long negotiatedLocalControlTxIntervalMs;

    public BfdStatus withNegotiatedLocalControlTxIntervalMs(Long negotiatedLocalControlTxIntervalMs) {
        this.negotiatedLocalControlTxIntervalMs = negotiatedLocalControlTxIntervalMs;
        return this;
    }
    
    /**
     * Negotiated transmit interval for echo packets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("negotiatedLocalEchoTxIntervalMs")
    public Long negotiatedLocalEchoTxIntervalMs;

    public BfdStatus withNegotiatedLocalEchoTxIntervalMs(Long negotiatedLocalEchoTxIntervalMs) {
        this.negotiatedLocalEchoTxIntervalMs = negotiatedLocalEchoTxIntervalMs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rxPacket")
    public BfdPacket rxPacket;

    public BfdStatus withRxPacket(BfdPacket rxPacket) {
        this.rxPacket = rxPacket;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("txPacket")
    public BfdPacket txPacket;

    public BfdStatus withTxPacket(BfdPacket txPacket) {
        this.txPacket = txPacket;
        return this;
    }
    
    /**
     * Session uptime in milliseconds. Value will be 0 if session is not up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uptimeMs")
    public String uptimeMs;

    public BfdStatus withUptimeMs(String uptimeMs) {
        this.uptimeMs = uptimeMs;
        return this;
    }
    
    /**
     * Indicates if echo mode is currently being used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usingEchoMode")
    public Boolean usingEchoMode;

    public BfdStatus withUsingEchoMode(Boolean usingEchoMode) {
        this.usingEchoMode = usingEchoMode;
        return this;
    }
    
    public BfdStatus(){}
}
