"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_snippets as shared_paginated_snippets
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetSnippetsSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetSnippetsRoleEnum(str, Enum):
    r"""Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`)."""
    OWNER = 'owner'
    CONTRIBUTOR = 'contributor'
    MEMBER = 'member'


@dataclasses.dataclass
class GetSnippetsRequest:
    
    role: Optional[GetSnippetsRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`)."""  
    

@dataclasses.dataclass
class GetSnippetsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the snippet does not exist."""  
    paginated_snippets: Optional[shared_paginated_snippets.PaginatedSnippets] = dataclasses.field(default=None)
    r"""A paginated list of snippets."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    