// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type SearchEditorialVideosSecurity struct {
	Basic              *shared.SchemeBasic              `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *shared.SchemeCustomerAccessCode `security:"scheme,type=oauth2"`
}

// SearchEditorialVideosResolutionEnum - Show only editorial video content with specific resolution
type SearchEditorialVideosResolutionEnum string

const (
	SearchEditorialVideosResolutionEnumFourk              SearchEditorialVideosResolutionEnum = "4k"
	SearchEditorialVideosResolutionEnumHighDefinition     SearchEditorialVideosResolutionEnum = "high_definition"
	SearchEditorialVideosResolutionEnumStandardDefinition SearchEditorialVideosResolutionEnum = "standard_definition"
)

func (e *SearchEditorialVideosResolutionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4k":
		fallthrough
	case "high_definition":
		fallthrough
	case "standard_definition":
		*e = SearchEditorialVideosResolutionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchEditorialVideosResolutionEnum: %s", s)
	}
}

// SearchEditorialVideosSortEnum - Sort by
type SearchEditorialVideosSortEnum string

const (
	SearchEditorialVideosSortEnumRelevant SearchEditorialVideosSortEnum = "relevant"
	SearchEditorialVideosSortEnumNewest   SearchEditorialVideosSortEnum = "newest"
	SearchEditorialVideosSortEnumOldest   SearchEditorialVideosSortEnum = "oldest"
)

func (e *SearchEditorialVideosSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "relevant":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		*e = SearchEditorialVideosSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchEditorialVideosSortEnum: %s", s)
	}
}

type SearchEditorialVideosQueryParams struct {
	// Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// Show only editorial video content that is available for distribution in a certain country
	Country string `queryParam:"style=form,explode=true,name=country"`
	// The cursor of the page with which to start fetching results; this cursor is returned from previous requests
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Show only editorial video content generated on or before a specific date
	DateEnd *types.Date `queryParam:"style=form,explode=true,name=date_end"`
	// Show only editorial video content generated on or after a specific date
	DateStart *types.Date `queryParam:"style=form,explode=true,name=date_start"`
	// Show only editorial video content generated with specific frames per second
	Fps *float64 `queryParam:"style=form,explode=true,name=fps"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// One or more search terms separated by spaces
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Show only editorial video content with specific resolution
	Resolution *SearchEditorialVideosResolutionEnum `queryParam:"style=form,explode=true,name=resolution"`
	// Sort by
	Sort *SearchEditorialVideosSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show only editorial video content from certain suppliers
	SupplierCode []string `queryParam:"style=form,explode=true,name=supplier_code"`
}

type SearchEditorialVideosRequest struct {
	QueryParams SearchEditorialVideosQueryParams
	Security    SearchEditorialVideosSecurity
}

type SearchEditorialVideosResponse struct {
	ContentType string
	// OK
	EditorialVideoSearchResults *shared.EditorialVideoSearchResults
	StatusCode                  int
	RawResponse                 *http.Response
}
