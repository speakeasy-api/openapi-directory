"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import regioninfo as shared_regioninfo
from ..shared import replicationsetstatus_enum as shared_replicationsetstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationSet:
    r"""The set of Amazon Web Services Region that your Incident Manager data will be replicated to and the KMS key used to encrypt the data."""
    
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy') }})  
    created_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    deletion_protected: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletionProtected') }})  
    last_modified_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedBy') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    region_map: dict[str, shared_regioninfo.RegionInfo] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionMap') }})  
    status: shared_replicationsetstatus_enum.ReplicationSetStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    