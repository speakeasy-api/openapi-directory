/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderLineItemDiscount - Represents a discount that applies to one or more line items in an
 * order.
 * 
 * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
 * The amount distributed to each line item is relative to the
 * amount contributed by the item to the order subtotal.
 */
public class OrderLineItemDiscount {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_money")
    public Money amountMoney;
    public OrderLineItemDiscount withAmountMoney(Money amountMoney) {
        this.amountMoney = amountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_money")
    public Money appliedMoney;
    public OrderLineItemDiscount withAppliedMoney(Money appliedMoney) {
        this.appliedMoney = appliedMoney;
        return this;
    }
    
    /**
     * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_object_id")
    public String catalogObjectId;
    public OrderLineItemDiscount withCatalogObjectId(String catalogObjectId) {
        this.catalogObjectId = catalogObjectId;
        return this;
    }
    
    /**
     * The version of the catalog object that this discount references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_version")
    public Long catalogVersion;
    public OrderLineItemDiscount withCatalogVersion(Long catalogVersion) {
        this.catalogVersion = catalogVersion;
        return this;
    }
    
    /**
     * Application-defined data attached to this discount. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public OrderLineItemDiscount withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The discount's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrderLineItemDiscount withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The percentage of the discount, as a string representation of a decimal number.
     * A value of `7.25` corresponds to a percentage of 7.25%.
     * 
     * `percentage` is not set for amount-based discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    public String percentage;
    public OrderLineItemDiscount withPercentage(String percentage) {
        this.percentage = percentage;
        return this;
    }
    
    /**
     * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied 
     * automatically to this discount. The specification and application of the discounts, to 
     * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding 
     * pricing rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_rule_id")
    public String pricingRuleId;
    public OrderLineItemDiscount withPricingRuleId(String pricingRuleId) {
        this.pricingRuleId = pricingRuleId;
        return this;
    }
    
    /**
     * The reward IDs corresponding to this discount. The application and
     * specification of discounts that have `reward_ids` are completely controlled by the backing
     * criteria corresponding to the reward tiers of the rewards that are added to the order
     * through the Loyalty API. To manually unapply discounts that are the result of added rewards,
     * the rewards must be removed from the order through the Loyalty API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reward_ids")
    public String[] rewardIds;
    public OrderLineItemDiscount withRewardIds(String[] rewardIds) {
        this.rewardIds = rewardIds;
        return this;
    }
    
    /**
     * Indicates the level at which the discount applies. For `ORDER` scoped discounts,
     * Square generates references in `applied_discounts` on all order line items that do
     * not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
     * with a discount reference in their `applied_discounts` field.
     * 
     * This field is immutable. To change the scope of a discount, you must delete
     * the discount and re-add it as a new discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public OrderLineItemDiscount withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * The type of the discount.
     * 
     * Discounts that do not reference a catalog object ID must have a type of
     * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public OrderLineItemDiscount withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * A unique ID that identifies the discount only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderLineItemDiscount withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
}
