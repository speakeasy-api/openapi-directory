"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ForwardingRuleInfo:
    r"""For display only. Metadata associated with a Compute Engine forwarding rule."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name of a Compute Engine forwarding rule."""  
    matched_port_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedPortRange'), 'exclude': lambda f: f is None }})
    r"""Port range defined in the forwarding rule that matches the test."""  
    matched_protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedProtocol'), 'exclude': lambda f: f is None }})
    r"""Protocol defined in the forwarding rule that matches the test."""  
    network_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkUri'), 'exclude': lambda f: f is None }})
    r"""Network URI. Only valid for Internal Load Balancer."""  
    target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""Target type of the forwarding rule."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""URI of a Compute Engine forwarding rule."""  
    vip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vip'), 'exclude': lambda f: f is None }})
    r"""VIP of the forwarding rule."""  
    