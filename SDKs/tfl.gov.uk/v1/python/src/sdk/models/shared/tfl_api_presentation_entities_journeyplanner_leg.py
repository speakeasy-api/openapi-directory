"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_disruption as shared_tfl_api_presentation_entities_disruption
from ..shared import tfl_api_presentation_entities_identifier as shared_tfl_api_presentation_entities_identifier
from ..shared import tfl_api_presentation_entities_instruction as shared_tfl_api_presentation_entities_instruction
from ..shared import tfl_api_presentation_entities_journeyplanner_obstacle as shared_tfl_api_presentation_entities_journeyplanner_obstacle
from ..shared import tfl_api_presentation_entities_journeyplanner_path as shared_tfl_api_presentation_entities_journeyplanner_path
from ..shared import tfl_api_presentation_entities_journeyplanner_plannedwork as shared_tfl_api_presentation_entities_journeyplanner_plannedwork
from ..shared import tfl_api_presentation_entities_journeyplanner_routeoption as shared_tfl_api_presentation_entities_journeyplanner_routeoption
from ..shared import tfl_api_presentation_entities_point as shared_tfl_api_presentation_entities_point
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesJourneyPlannerLeg:
    
    arrival_point: Optional[shared_tfl_api_presentation_entities_point.TflAPIPresentationEntitiesPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrivalPoint'), 'exclude': lambda f: f is None }})
    r"""Represents a point located at a latitude and longitude using the WGS84 co-ordinate system."""  
    arrival_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrivalTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    departure_point: Optional[shared_tfl_api_presentation_entities_point.TflAPIPresentationEntitiesPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePoint'), 'exclude': lambda f: f is None }})
    r"""Represents a point located at a latitude and longitude using the WGS84 co-ordinate system."""  
    departure_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departureTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    disruptions: Optional[list[shared_tfl_api_presentation_entities_disruption.TflAPIPresentationEntitiesDisruption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disruptions'), 'exclude': lambda f: f is None }})  
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})  
    has_fixed_locations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasFixedLocations'), 'exclude': lambda f: f is None }})  
    instruction: Optional[shared_tfl_api_presentation_entities_instruction.TflAPIPresentationEntitiesInstruction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instruction'), 'exclude': lambda f: f is None }})  
    inter_change_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interChangeDuration'), 'exclude': lambda f: f is None }})  
    inter_change_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interChangePosition'), 'exclude': lambda f: f is None }})  
    is_disrupted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisrupted'), 'exclude': lambda f: f is None }})  
    mode: Optional[shared_tfl_api_presentation_entities_identifier.TflAPIPresentationEntitiesIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})  
    obstacles: Optional[list[shared_tfl_api_presentation_entities_journeyplanner_obstacle.TflAPIPresentationEntitiesJourneyPlannerObstacle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obstacles'), 'exclude': lambda f: f is None }})  
    path: Optional[shared_tfl_api_presentation_entities_journeyplanner_path.TflAPIPresentationEntitiesJourneyPlannerPath] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})  
    planned_works: Optional[list[shared_tfl_api_presentation_entities_journeyplanner_plannedwork.TflAPIPresentationEntitiesJourneyPlannerPlannedWork]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plannedWorks'), 'exclude': lambda f: f is None }})  
    route_options: Optional[list[shared_tfl_api_presentation_entities_journeyplanner_routeoption.TflAPIPresentationEntitiesJourneyPlannerRouteOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeOptions'), 'exclude': lambda f: f is None }})  
    scheduled_arrival_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledArrivalTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    scheduled_departure_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledDepartureTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    speed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})  
    