// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeScalableTargetsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// DescribeScalableTargetsXAmzTargetEnum
type DescribeScalableTargetsXAmzTargetEnum string

const (
	DescribeScalableTargetsXAmzTargetEnumAnyScaleFrontendServiceDescribeScalableTargets DescribeScalableTargetsXAmzTargetEnum = "AnyScaleFrontendService.DescribeScalableTargets"
)

func (e *DescribeScalableTargetsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AnyScaleFrontendService.DescribeScalableTargets":
		*e = DescribeScalableTargetsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeScalableTargetsXAmzTargetEnum: %s", s)
	}
}

type DescribeScalableTargetsHeaders struct {
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeScalableTargetsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeScalableTargetsRequest struct {
	QueryParams DescribeScalableTargetsQueryParams
	Headers     DescribeScalableTargetsHeaders
	Request     shared.DescribeScalableTargetsRequest `request:"mediaType=application/json"`
}

type DescribeScalableTargetsResponse struct {
	// ConcurrentUpdateException
	ConcurrentUpdateException interface{}
	ContentType               string
	// Success
	DescribeScalableTargetsResponse *shared.DescribeScalableTargetsResponse
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
