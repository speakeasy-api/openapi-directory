<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Domains 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Download Whole Dataset for TLD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadResponse
     */
	public function getDomainsTldZoneIdDownload(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/tld/{zone_id}/download', \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Domains Search for TLD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchResponse
     */
	public function getDomainsTldZoneIdSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/tld/{zone_id}/search', \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsTldZoneIdSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get added domains, latest if date not specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedResponse
     */
	public function getDomainsUpdatesAdded(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/updates/added');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Download added domains, latest if date not specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadResponse
     */
	public function getDomainsUpdatesAddedDownload(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/updates/added/download');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesAddedDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get deleted domains, latest if date not specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedResponse
     */
	public function getDomainsUpdatesDeleted(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/updates/deleted');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Download deleted domains, latest if date not specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadResponse
     */
	public function getDomainsUpdatesDeletedDownload(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/updates/deleted/download');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesDeletedDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List of updates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListResponse
     */
	public function getDomainsUpdatesList(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/updates/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsUpdatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Domains Database Search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemResponse
     */
	public function getSearchDomainItem(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchDomainItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get TLD records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemResponse
     */
	public function getTldDomainItem(
        \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/tld/{zone_id}', \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTldDomainItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}