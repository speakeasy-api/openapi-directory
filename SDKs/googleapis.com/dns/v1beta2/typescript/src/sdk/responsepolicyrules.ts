/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ResponsePolicyRules {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new Response Policy Rule.
   */
  dnsResponsePolicyRulesCreate(
    req: operations.DnsResponsePolicyRulesCreateRequest,
    security: operations.DnsResponsePolicyRulesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "responsePolicyRule",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesCreateResponse =
        new operations.DnsResponsePolicyRulesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responsePolicyRule = utils.objectToClass(
              httpRes?.data,
              shared.ResponsePolicyRule
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a previously created Response Policy Rule.
   */
  dnsResponsePolicyRulesDelete(
    req: operations.DnsResponsePolicyRulesDeleteRequest,
    security: operations.DnsResponsePolicyRulesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesDeleteResponse =
        new operations.DnsResponsePolicyRulesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Fetches the representation of an existing Response Policy Rule.
   */
  dnsResponsePolicyRulesGet(
    req: operations.DnsResponsePolicyRulesGetRequest,
    security: operations.DnsResponsePolicyRulesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesGetResponse =
        new operations.DnsResponsePolicyRulesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responsePolicyRule = utils.objectToClass(
              httpRes?.data,
              shared.ResponsePolicyRule
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enumerates all Response Policy Rules associated with a project.
   */
  dnsResponsePolicyRulesList(
    req: operations.DnsResponsePolicyRulesListRequest,
    security: operations.DnsResponsePolicyRulesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesListResponse =
        new operations.DnsResponsePolicyRulesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responsePolicyRulesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResponsePolicyRulesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Applies a partial update to an existing Response Policy Rule.
   */
  dnsResponsePolicyRulesPatch(
    req: operations.DnsResponsePolicyRulesPatchRequest,
    security: operations.DnsResponsePolicyRulesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "responsePolicyRule1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesPatchResponse =
        new operations.DnsResponsePolicyRulesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responsePolicyRulesPatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResponsePolicyRulesPatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing Response Policy Rule.
   */
  dnsResponsePolicyRulesUpdate(
    req: operations.DnsResponsePolicyRulesUpdateRequest,
    security: operations.DnsResponsePolicyRulesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DnsResponsePolicyRulesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DnsResponsePolicyRulesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "responsePolicyRule1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DnsResponsePolicyRulesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DnsResponsePolicyRulesUpdateResponse =
        new operations.DnsResponsePolicyRulesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responsePolicyRulesUpdateResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResponsePolicyRulesUpdateResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
