/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OSPolicyAssignment - OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information about the OS policy resource definitions and examples, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 */
public class OSPolicyAssignment {
    /**
     * Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseline")
    public Boolean baseline;

    public OSPolicyAssignment withBaseline(Boolean baseline) {
        this.baseline = baseline;
        return this;
    }
    
    /**
     * Output only. Indicates that this revision deletes the OS policy assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;

    public OSPolicyAssignment withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public OSPolicyAssignment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public OSPolicyAssignment withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceFilter")
    public OSPolicyAssignmentInstanceFilter instanceFilter;

    public OSPolicyAssignment withInstanceFilter(OSPolicyAssignmentInstanceFilter instanceFilter) {
        this.instanceFilter = instanceFilter;
        return this;
    }
    
    /**
     * Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public OSPolicyAssignment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. List of OS policies to be applied to the VMs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osPolicies")
    public OSPolicy[] osPolicies;

    public OSPolicyAssignment withOsPolicies(OSPolicy[] osPolicies) {
        this.osPolicies = osPolicies;
        return this;
    }
    
    /**
     * Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciling")
    public Boolean reconciling;

    public OSPolicyAssignment withReconciling(Boolean reconciling) {
        this.reconciling = reconciling;
        return this;
    }
    
    /**
     * Output only. The timestamp that the revision was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revisionCreateTime")
    public String revisionCreateTime;

    public OSPolicyAssignment withRevisionCreateTime(String revisionCreateTime) {
        this.revisionCreateTime = revisionCreateTime;
        return this;
    }
    
    /**
     * Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revisionId")
    public String revisionId;

    public OSPolicyAssignment withRevisionId(String revisionId) {
        this.revisionId = revisionId;
        return this;
    }
    
    /**
     * Message to configure the rollout at the zonal level for the OS policy assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollout")
    public OSPolicyAssignmentRollout rollout;

    public OSPolicyAssignment withRollout(OSPolicyAssignmentRollout rollout) {
        this.rollout = rollout;
        return this;
    }
    
    /**
     * Output only. OS policy assignment rollout state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rolloutState")
    public OSPolicyAssignmentRolloutStateEnum rolloutState;

    public OSPolicyAssignment withRolloutState(OSPolicyAssignmentRolloutStateEnum rolloutState) {
        this.rolloutState = rolloutState;
        return this;
    }
    
    /**
     * Output only. Server generated unique id for the OS policy assignment resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public OSPolicyAssignment withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    public OSPolicyAssignment(){}
}
