/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthTypeEnum } from "./authtypeenum";
import { ConnectionStateEnum } from "./connectionstateenum";
import { FormField } from "./formfield";
import { IntegrationStateEnum } from "./integrationstateenum";
import { OAuthGrantTypeEnum } from "./oauthgranttypeenum";
import { WebhookSubscription } from "./webhooksubscription";
import { Expose, Type } from "class-transformer";

export class ConnectionConfigurationDefaultsInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: any;
}

export class ConnectionConfigurationInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConnectionConfigurationDefaultsInput })
  @Expose({ name: "defaults" })
  @Type(() => ConnectionConfigurationDefaultsInput)
  defaults?: ConnectionConfigurationDefaultsInput[];

  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource?: string;
}

/**
 * Fields that need to be updated on the resource
 */
export class ConnectionInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConnectionConfigurationInput })
  @Expose({ name: "configuration" })
  @Type(() => ConnectionConfigurationInput)
  configuration?: ConnectionConfigurationInput[];

  /**
   * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Attach your own consumer specific metadata
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * Connection settings. Values will persist to `form_fields` with corresponding id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  settings?: Record<string, any>;
}

export enum ConnectionConfigurationDefaultsTargetEnum {
  CustomFields = "custom_fields",
  Resource = "resource",
}

export class ConnectionConfigurationDefaults extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  target?: ConnectionConfigurationDefaultsTargetEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: any;
}

export class ConnectionConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConnectionConfigurationDefaults })
  @Expose({ name: "defaults" })
  @Type(() => ConnectionConfigurationDefaults)
  defaults?: ConnectionConfigurationDefaults[];

  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource?: string;
}

/**
 * Status of the connection.
 */
export enum ConnectionStatusEnum {
  Live = "live",
  Upcoming = "upcoming",
  Requested = "requested",
}

export class Connection extends SpeakeasyBase {
  /**
   * Type of authorization used by the connector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth_type" })
  authType?: AuthTypeEnum;

  /**
   * The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorize_url" })
  authorizeUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "configurable_resources" })
  configurableResources?: string[];

  @SpeakeasyMetadata({ elemType: ConnectionConfiguration })
  @Expose({ name: "configuration" })
  @Type(() => ConnectionConfiguration)
  configuration?: ConnectionConfiguration[];

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: number;

  /**
   * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * The settings that are wanted to create a connection.
   */
  @SpeakeasyMetadata({ elemType: FormField })
  @Expose({ name: "form_fields" })
  @Type(() => FormField)
  formFields?: FormField[];

  /**
   * Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_guide" })
  hasGuide?: boolean;

  /**
   * A visual icon of the connection, that will be shown in the Vault
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icon" })
  icon?: string;

  /**
   * The unique identifier of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The current state of the Integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integration_state" })
  integrationState?: IntegrationStateEnum;

  /**
   * The logo of the connection, that will be shown in the Vault
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logo" })
  logo?: string;

  /**
   * Attach your own consumer specific metadata
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * The name of the connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth_grant_type" })
  oauthGrantType?: OAuthGrantTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "resource_schema_support" })
  resourceSchemaSupport?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "resource_settings_support" })
  resourceSettingsSupport?: string[];

  /**
   * The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revoke_url" })
  revokeUrl?: string;

  /**
   * The ID of the service this connection belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_id" })
  serviceId?: string;

  /**
   * Connection settings. Values will persist to `form_fields` with corresponding id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  settings?: Record<string, any>;

  /**
   * List of settings that are required to be configured on integration before authorization can occur
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings_required_for_authorization" })
  settingsRequiredForAuthorization?: string[];

  /**
   * [Connection state flow](#section/Connection-state)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ConnectionStateEnum;

  /**
   * Status of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ConnectionStatusEnum;

  @SpeakeasyMetadata({ elemType: WebhookSubscription })
  @Expose({ name: "subscriptions" })
  @Type(() => WebhookSubscription)
  subscriptions?: WebhookSubscription[];

  @SpeakeasyMetadata()
  @Expose({ name: "tag_line" })
  tagLine?: string;

  /**
   * The unified API category where the connection belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unified_api" })
  unifiedApi?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: number;

  /**
   * The website URL of the connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "website" })
  website?: string;
}
