// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RegisteredIdentifierIdentifierTypeEnum - The registered identifier type.
type RegisteredIdentifierIdentifierTypeEnum string

const (
	RegisteredIdentifierIdentifierTypeEnumAcn RegisteredIdentifierIdentifierTypeEnum = "ACN"
	RegisteredIdentifierIdentifierTypeEnumAbn RegisteredIdentifierIdentifierTypeEnum = "ABN"
)

func (e *RegisteredIdentifierIdentifierTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACN":
		fallthrough
	case "ABN":
		*e = RegisteredIdentifierIdentifierTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisteredIdentifierIdentifierTypeEnum: %s", s)
	}
}

// RegisteredIdentifierInput - The Registered Identifier resource.
type RegisteredIdentifierInput struct {
	// The registered identifier.
	Identifier *string `json:"identifier,omitempty"`
	// The registered identifier type.
	IdentifierType *RegisteredIdentifierIdentifierTypeEnum `json:"identifierType,omitempty"`
}

// RegisteredIdentifier - The Registered Identifier resource.
type RegisteredIdentifier struct {
	// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	FromDate *time.Time `json:"fromDate,omitempty"`
	// The resource's unique identifier.
	ID *string `json:"id,omitempty"`
	// The registered identifier.
	Identifier *string `json:"identifier,omitempty"`
	// The registered identifier type.
	IdentifierType *RegisteredIdentifierIdentifierTypeEnum `json:"identifierType,omitempty"`
	// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	ToDate *time.Time `json:"toDate,omitempty"`
}
