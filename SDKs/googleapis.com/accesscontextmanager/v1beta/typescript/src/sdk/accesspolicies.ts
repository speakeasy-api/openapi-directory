/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccessPolicies {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.
   */
  accesscontextmanagerAccessPoliciesAccessLevelsCreate(
    req: operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest,
    security: operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/accessLevels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accessLevel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all Access Levels for an access policy.
   */
  accesscontextmanagerAccessPoliciesAccessLevelsList(
    req: operations.AccesscontextmanagerAccessPoliciesAccessLevelsListRequest,
    security: operations.AccesscontextmanagerAccessPoliciesAccessLevelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesAccessLevelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/accessLevels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesAccessLevelsListResponse =
        new operations.AccesscontextmanagerAccessPoliciesAccessLevelsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAccessLevelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAccessLevelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
   */
  accesscontextmanagerAccessPoliciesCreate(
    req: operations.AccesscontextmanagerAccessPoliciesCreateRequest,
    security: operations.AccesscontextmanagerAccessPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AccesscontextmanagerAccessPoliciesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta/accessPolicies";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accessPolicy",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesCreateResponse =
        new operations.AccesscontextmanagerAccessPoliciesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all AccessPolicies under a container.
   */
  accesscontextmanagerAccessPoliciesList(
    req: operations.AccesscontextmanagerAccessPoliciesListRequest,
    security: operations.AccesscontextmanagerAccessPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AccesscontextmanagerAccessPoliciesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta/accessPolicies";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AccesscontextmanagerAccessPoliciesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesListResponse =
        new operations.AccesscontextmanagerAccessPoliciesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAccessPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAccessPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.
   */
  accesscontextmanagerAccessPoliciesServicePerimetersCreate(
    req: operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest,
    security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/servicePerimeters",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "servicePerimeter",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.
   */
  accesscontextmanagerAccessPoliciesServicePerimetersDelete(
    req: operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest,
    security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all Service Perimeters for an access policy.
   */
  accesscontextmanagerAccessPoliciesServicePerimetersList(
    req: operations.AccesscontextmanagerAccessPoliciesServicePerimetersListRequest,
    security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesServicePerimetersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/servicePerimeters",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesServicePerimetersListResponse =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listServicePerimetersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListServicePerimetersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.
   */
  accesscontextmanagerAccessPoliciesServicePerimetersPatch(
    req: operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest,
    security: operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "servicePerimeter",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse =
        new operations.AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
