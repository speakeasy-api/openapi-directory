// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TextClassificationDatasetMetadataClassificationTypeEnum - Required. Type of the classification problem.
type TextClassificationDatasetMetadataClassificationTypeEnum string

const (
	TextClassificationDatasetMetadataClassificationTypeEnumClassificationTypeUnspecified TextClassificationDatasetMetadataClassificationTypeEnum = "CLASSIFICATION_TYPE_UNSPECIFIED"
	TextClassificationDatasetMetadataClassificationTypeEnumMulticlass                    TextClassificationDatasetMetadataClassificationTypeEnum = "MULTICLASS"
	TextClassificationDatasetMetadataClassificationTypeEnumMultilabel                    TextClassificationDatasetMetadataClassificationTypeEnum = "MULTILABEL"
)

func (e TextClassificationDatasetMetadataClassificationTypeEnum) ToPointer() *TextClassificationDatasetMetadataClassificationTypeEnum {
	return &e
}

func (e *TextClassificationDatasetMetadataClassificationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLASSIFICATION_TYPE_UNSPECIFIED":
		fallthrough
	case "MULTICLASS":
		fallthrough
	case "MULTILABEL":
		*e = TextClassificationDatasetMetadataClassificationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextClassificationDatasetMetadataClassificationTypeEnum: %v", v)
	}
}

// TextClassificationDatasetMetadata - Dataset metadata for classification.
type TextClassificationDatasetMetadata struct {
	// Required. Type of the classification problem.
	ClassificationType *TextClassificationDatasetMetadataClassificationTypeEnum `json:"classificationType,omitempty"`
}
