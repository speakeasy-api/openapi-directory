"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import file as shared_file
from typing import Optional


@dataclasses.dataclass
class DriveFilesUpdateSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesUpdateSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesUpdateSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesUpdateSecurityOption4:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesUpdateSecurityOption5:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesUpdateSecurity:
    
    option1: Optional[DriveFilesUpdateSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[DriveFilesUpdateSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[DriveFilesUpdateSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option4: Optional[DriveFilesUpdateSecurityOption4] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option5: Optional[DriveFilesUpdateSecurityOption5] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    

@dataclasses.dataclass
class DriveFilesUpdateRequest:
    
    file_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'fileId', 'style': 'simple', 'explode': False }})
    r"""The ID of the file."""  
    add_parents: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'addParents', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of parent IDs to add."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    enforce_single_parent: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enforceSingleParent', 'style': 'form', 'explode': True }})
    r"""Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    include_labels: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeLabels', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of IDs of labels to include in the labelInfo part of the response."""  
    include_permissions_for_view: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includePermissionsForView', 'style': 'form', 'explode': True }})
    r"""Specifies which additional view's permissions to include in the response. Only 'published' is supported."""  
    keep_revision_forever: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keepRevisionForever', 'style': 'form', 'explode': True }})
    r"""Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    ocr_language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ocrLanguage', 'style': 'form', 'explode': True }})
    r"""A language hint for OCR processing during image import (ISO 639-1 code)."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    remove_parents: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'removeParents', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of parent IDs to remove."""  
    request_body: Optional[bytes] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/octet-stream' }})  
    supports_all_drives: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supportsAllDrives', 'style': 'form', 'explode': True }})
    r"""Whether the requesting application supports both My Drives and shared drives."""  
    supports_team_drives: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supportsTeamDrives', 'style': 'form', 'explode': True }})
    r"""Deprecated use supportsAllDrives instead."""  
    use_content_as_indexable_text: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useContentAsIndexableText', 'style': 'form', 'explode': True }})
    r"""Whether to use the uploaded content as indexable text."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class DriveFilesUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    file: Optional[shared_file.File] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    