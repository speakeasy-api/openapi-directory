"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import grpcrouteheadermatch as shared_grpcrouteheadermatch
from ..shared import grpcroutemethodmatch as shared_grpcroutemethodmatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GrpcRouteRouteMatch:
    r"""Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match."""
    
    headers: Optional[list[shared_grpcrouteheadermatch.GrpcRouteHeaderMatch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies a collection of headers to match."""  
    method: Optional[shared_grpcroutemethodmatch.GrpcRouteMethodMatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""Specifies a match against a method."""  
    