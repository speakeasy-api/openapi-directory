"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resourcetag as shared_resourcetag
from ..shared import securityservicepolicydata as shared_securityservicepolicydata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Policy:
    r"""An Firewall Manager policy."""
    
    exclude_resource_tags: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludeResourceTags') }})  
    policy_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyName') }})  
    remediation_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemediationEnabled') }})  
    resource_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceType') }})  
    security_service_policy_data: shared_securityservicepolicydata.SecurityServicePolicyData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityServicePolicyData') }})  
    delete_unused_fm_managed_resources: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeleteUnusedFMManagedResources'), 'exclude': lambda f: f is None }})  
    exclude_map: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludeMap'), 'exclude': lambda f: f is None }})  
    include_map: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeMap'), 'exclude': lambda f: f is None }})  
    policy_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyDescription'), 'exclude': lambda f: f is None }})  
    policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyId'), 'exclude': lambda f: f is None }})  
    policy_update_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyUpdateToken'), 'exclude': lambda f: f is None }})  
    resource_set_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceSetIds'), 'exclude': lambda f: f is None }})  
    resource_tags: Optional[list[shared_resourcetag.ResourceTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTags'), 'exclude': lambda f: f is None }})  
    resource_type_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTypeList'), 'exclude': lambda f: f is None }})  
    