"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import clientdetailsapimodel as shared_clientdetailsapimodel
from ..shared import currencydetailsapimodel as shared_currencydetailsapimodel
from ..shared import invoicerecurringapimodel as shared_invoicerecurringapimodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class InvoiceDetailsAPIModelStatusEnum(str, Enum):
    r"""Indicate the status of the invoice (paid/unpaid/overdue)"""
    DRAFT = 'Draft'
    PAID = 'Paid'
    UNPAID = 'Unpaid'
    OVERDUE = 'Overdue'
    VOID = 'Void'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvoiceDetailsAPIModel:
    
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessToken'), 'exclude': lambda f: f is None }})
    r"""Security access token used for accessing the invoice anonymously"""  
    client: Optional[shared_clientdetailsapimodel.ClientDetailsAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Client'), 'exclude': lambda f: f is None }})  
    cloned_from_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClonedFromId'), 'exclude': lambda f: f is None }})
    r"""Indicate from which invoice this invoice has been cloned from"""  
    currency: Optional[shared_currencydetailsapimodel.CurrencyDetailsAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    discount_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiscountAmount'), 'exclude': lambda f: f is None }})
    r"""Amount that goes as a discount"""  
    duedate: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Duedate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicates when the invoice will be proclamed as due"""  
    enable_partial_payments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnablePartialPayments'), 'exclude': lambda f: f is None }})
    r"""Indicate that the invoice allows the user to pay the invoice partially"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Invoice id"""  
    invoice_category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceCategoryId'), 'exclude': lambda f: f is None }})
    r"""Hold the id of the invoice category"""  
    issued_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicates when the invoice was issued"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notes'), 'exclude': lambda f: f is None }})
    r"""Internal note regarding the invoice"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})
    r"""Unique invoice number"""  
    po_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PoNumber'), 'exclude': lambda f: f is None }})
    r"""Unique number generated by the buyer"""  
    recurring_profile: Optional[shared_invoicerecurringapimodel.InvoiceRecurringAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringProfile'), 'exclude': lambda f: f is None }})
    r"""Definition of invoice recurring profile"""  
    recurring_profile_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringProfileId'), 'exclude': lambda f: f is None }})
    r"""Hold the id of the recurring profile"""  
    should_send_reminders: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShouldSendReminders'), 'exclude': lambda f: f is None }})
    r"""Should send email reminders to client?"""  
    status: Optional[InvoiceDetailsAPIModelStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Indicate the status of the invoice (paid/unpaid/overdue)"""  
    sub_total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubTotalAmount'), 'exclude': lambda f: f is None }})
    r"""Total amount of the invoice without tax"""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""Amount that goes to the tax"""  
    terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Terms'), 'exclude': lambda f: f is None }})
    r"""Terms of agreement"""  
    total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalAmount'), 'exclude': lambda f: f is None }})
    r"""Total amount of the invoice with tax"""  
    