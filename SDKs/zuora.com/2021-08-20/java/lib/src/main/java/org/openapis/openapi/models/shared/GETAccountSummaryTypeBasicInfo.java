/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * GETAccountSummaryTypeBasicInfo - Container for custom fields of an Account object.
 * 
 */
public class GETAccountSummaryTypeBasicInfo {
    /**
     * Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Class__NS")
    public String classNS;
    public GETAccountSummaryTypeBasicInfo withClassNS(String classNS) {
        this.classNS = classNS;
        return this;
    }
    
    /**
     * Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomerType__NS")
    public GETAccountSummaryTypeBasicInfoCustomerTypeNSEnum customerTypeNS;
    public GETAccountSummaryTypeBasicInfo withCustomerTypeNS(GETAccountSummaryTypeBasicInfoCustomerTypeNSEnum customerTypeNS) {
        this.customerTypeNS = customerTypeNS;
        return this;
    }
    
    /**
     * Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Department__NS")
    public String departmentNS;
    public GETAccountSummaryTypeBasicInfo withDepartmentNS(String departmentNS) {
        this.departmentNS = departmentNS;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public GETAccountSummaryTypeBasicInfo withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public GETAccountSummaryTypeBasicInfo withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location__NS")
    public String locationNS;
    public GETAccountSummaryTypeBasicInfo withLocationNS(String locationNS) {
        this.locationNS = locationNS;
        return this;
    }
    
    /**
     * Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Subsidiary__NS")
    public String subsidiaryNS;
    public GETAccountSummaryTypeBasicInfo withSubsidiaryNS(String subsidiaryNS) {
        this.subsidiaryNS = subsidiaryNS;
        return this;
    }
    
    /**
     * Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public GETAccountSummaryTypeBasicInfo withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public GETAccountSummaryTypeBasicInfoSynctoNetSuiteNSEnum synctoNetSuiteNS;
    public GETAccountSummaryTypeBasicInfo withSynctoNetSuiteNS(GETAccountSummaryTypeBasicInfoSynctoNetSuiteNSEnum synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     * Account number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    public String accountNumber;
    public GETAccountSummaryTypeBasicInfo withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * A list of additional email addresses to receive emailed invoices.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalEmailAddresses")
    public String[] additionalEmailAddresses;
    public GETAccountSummaryTypeBasicInfo withAdditionalEmailAddresses(String[] additionalEmailAddresses) {
        this.additionalEmailAddresses = additionalEmailAddresses;
        return this;
    }
    
    /**
     * Current outstanding balance.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public String balance;
    public GETAccountSummaryTypeBasicInfo withBalance(String balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * The alias name given to a batch. A string of 50 characters or less.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch")
    public String batch;
    public GETAccountSummaryTypeBasicInfo withBatch(String batch) {
        this.batch = batch;
        return this;
    }
    
    /**
     * Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleDay")
    public String billCycleDay;
    public GETAccountSummaryTypeBasicInfo withBillCycleDay(String billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     * A currency as defined in Billing Settings in the Zuora UI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GETAccountSummaryTypeBasicInfo withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPaymentMethod")
    public GETAccountSummaryTypeBasicInfoDefaultPaymentMethod defaultPaymentMethod;
    public GETAccountSummaryTypeBasicInfo withDefaultPaymentMethod(GETAccountSummaryTypeBasicInfoDefaultPaymentMethod defaultPaymentMethod) {
        this.defaultPaymentMethod = defaultPaymentMethod;
        return this;
    }
    
    /**
     * Account ID.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETAccountSummaryTypeBasicInfo withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the customer wants to receive invoices through email. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceDeliveryPrefsEmail")
    public Boolean invoiceDeliveryPrefsEmail;
    public GETAccountSummaryTypeBasicInfo withInvoiceDeliveryPrefsEmail(Boolean invoiceDeliveryPrefsEmail) {
        this.invoiceDeliveryPrefsEmail = invoiceDeliveryPrefsEmail;
        return this;
    }
    
    /**
     * Whether the customer wants to receive printed invoices, such as through postal mail.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceDeliveryPrefsPrint")
    public Boolean invoiceDeliveryPrefsPrint;
    public GETAccountSummaryTypeBasicInfo withInvoiceDeliveryPrefsPrint(Boolean invoiceDeliveryPrefsPrint) {
        this.invoiceDeliveryPrefsPrint = invoiceDeliveryPrefsPrint;
        return this;
    }
    
    /**
     * Date of the most recent invoice for the account; null if no invoice has ever been generated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("lastInvoiceDate")
    public LocalDate lastInvoiceDate;
    public GETAccountSummaryTypeBasicInfo withLastInvoiceDate(LocalDate lastInvoiceDate) {
        this.lastInvoiceDate = lastInvoiceDate;
        return this;
    }
    
    /**
     * Amount of the most recent payment collected for the account; null if no payment has ever been collected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastPaymentAmount")
    public String lastPaymentAmount;
    public GETAccountSummaryTypeBasicInfo withLastPaymentAmount(String lastPaymentAmount) {
        this.lastPaymentAmount = lastPaymentAmount;
        return this;
    }
    
    /**
     * Date of the most recent payment collected for the account. Null if no payment has ever been collected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("lastPaymentDate")
    public LocalDate lastPaymentDate;
    public GETAccountSummaryTypeBasicInfo withLastPaymentDate(LocalDate lastPaymentDate) {
        this.lastPaymentDate = lastPaymentDate;
        return this;
    }
    
    /**
     * Account name.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETAccountSummaryTypeBasicInfo withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Account status; possible values are: `Active`, `Draft`, `Canceled`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public GETAccountSummaryTypeBasicInfo withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String tags;
    public GETAccountSummaryTypeBasicInfo withTags(String tags) {
        this.tags = tags;
        return this;
    }
    
}
