// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LivingAreaFeaturesAirConditioningExceptionEnum - Air conditioning exception.
type LivingAreaFeaturesAirConditioningExceptionEnum string

const (
	LivingAreaFeaturesAirConditioningExceptionEnumExceptionUnspecified LivingAreaFeaturesAirConditioningExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesAirConditioningExceptionEnumUnderConstruction    LivingAreaFeaturesAirConditioningExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesAirConditioningExceptionEnumDependentOnSeason    LivingAreaFeaturesAirConditioningExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesAirConditioningExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesAirConditioningExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesAirConditioningExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesAirConditioningExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesAirConditioningExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesBathtubExceptionEnum - Bathtub exception.
type LivingAreaFeaturesBathtubExceptionEnum string

const (
	LivingAreaFeaturesBathtubExceptionEnumExceptionUnspecified LivingAreaFeaturesBathtubExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesBathtubExceptionEnumUnderConstruction    LivingAreaFeaturesBathtubExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesBathtubExceptionEnumDependentOnSeason    LivingAreaFeaturesBathtubExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesBathtubExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesBathtubExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesBathtubExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesBathtubExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesBathtubExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesBidetExceptionEnum - Bidet exception.
type LivingAreaFeaturesBidetExceptionEnum string

const (
	LivingAreaFeaturesBidetExceptionEnumExceptionUnspecified LivingAreaFeaturesBidetExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesBidetExceptionEnumUnderConstruction    LivingAreaFeaturesBidetExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesBidetExceptionEnumDependentOnSeason    LivingAreaFeaturesBidetExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesBidetExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesBidetExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesBidetExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesBidetExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesBidetExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesDryerExceptionEnum - Dryer exception.
type LivingAreaFeaturesDryerExceptionEnum string

const (
	LivingAreaFeaturesDryerExceptionEnumExceptionUnspecified LivingAreaFeaturesDryerExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesDryerExceptionEnumUnderConstruction    LivingAreaFeaturesDryerExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesDryerExceptionEnumDependentOnSeason    LivingAreaFeaturesDryerExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesDryerExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesDryerExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesDryerExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesDryerExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesDryerExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesElectronicRoomKeyExceptionEnum - Electronic room key exception.
type LivingAreaFeaturesElectronicRoomKeyExceptionEnum string

const (
	LivingAreaFeaturesElectronicRoomKeyExceptionEnumExceptionUnspecified LivingAreaFeaturesElectronicRoomKeyExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesElectronicRoomKeyExceptionEnumUnderConstruction    LivingAreaFeaturesElectronicRoomKeyExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesElectronicRoomKeyExceptionEnumDependentOnSeason    LivingAreaFeaturesElectronicRoomKeyExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesElectronicRoomKeyExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesElectronicRoomKeyExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesElectronicRoomKeyExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesElectronicRoomKeyExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesElectronicRoomKeyExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesFireplaceExceptionEnum - Fireplace exception.
type LivingAreaFeaturesFireplaceExceptionEnum string

const (
	LivingAreaFeaturesFireplaceExceptionEnumExceptionUnspecified LivingAreaFeaturesFireplaceExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesFireplaceExceptionEnumUnderConstruction    LivingAreaFeaturesFireplaceExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesFireplaceExceptionEnumDependentOnSeason    LivingAreaFeaturesFireplaceExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesFireplaceExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesFireplaceExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesFireplaceExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesFireplaceExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesFireplaceExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesHairdryerExceptionEnum - Hairdryer exception.
type LivingAreaFeaturesHairdryerExceptionEnum string

const (
	LivingAreaFeaturesHairdryerExceptionEnumExceptionUnspecified LivingAreaFeaturesHairdryerExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesHairdryerExceptionEnumUnderConstruction    LivingAreaFeaturesHairdryerExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesHairdryerExceptionEnumDependentOnSeason    LivingAreaFeaturesHairdryerExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesHairdryerExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesHairdryerExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesHairdryerExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesHairdryerExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesHairdryerExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesHeatingExceptionEnum - Heating exception.
type LivingAreaFeaturesHeatingExceptionEnum string

const (
	LivingAreaFeaturesHeatingExceptionEnumExceptionUnspecified LivingAreaFeaturesHeatingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesHeatingExceptionEnumUnderConstruction    LivingAreaFeaturesHeatingExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesHeatingExceptionEnumDependentOnSeason    LivingAreaFeaturesHeatingExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesHeatingExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesHeatingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesHeatingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesHeatingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesHeatingExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesInunitSafeExceptionEnum - In-unit safe exception.
type LivingAreaFeaturesInunitSafeExceptionEnum string

const (
	LivingAreaFeaturesInunitSafeExceptionEnumExceptionUnspecified LivingAreaFeaturesInunitSafeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesInunitSafeExceptionEnumUnderConstruction    LivingAreaFeaturesInunitSafeExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesInunitSafeExceptionEnumDependentOnSeason    LivingAreaFeaturesInunitSafeExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesInunitSafeExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesInunitSafeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesInunitSafeExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesInunitSafeExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesInunitSafeExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesInunitWifiAvailableExceptionEnum - In-unit Wifi available exception.
type LivingAreaFeaturesInunitWifiAvailableExceptionEnum string

const (
	LivingAreaFeaturesInunitWifiAvailableExceptionEnumExceptionUnspecified LivingAreaFeaturesInunitWifiAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesInunitWifiAvailableExceptionEnumUnderConstruction    LivingAreaFeaturesInunitWifiAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesInunitWifiAvailableExceptionEnumDependentOnSeason    LivingAreaFeaturesInunitWifiAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesInunitWifiAvailableExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesInunitWifiAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesInunitWifiAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesInunitWifiAvailableExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesInunitWifiAvailableExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesIroningEquipmentExceptionEnum - Ironing equipment exception.
type LivingAreaFeaturesIroningEquipmentExceptionEnum string

const (
	LivingAreaFeaturesIroningEquipmentExceptionEnumExceptionUnspecified LivingAreaFeaturesIroningEquipmentExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesIroningEquipmentExceptionEnumUnderConstruction    LivingAreaFeaturesIroningEquipmentExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesIroningEquipmentExceptionEnumDependentOnSeason    LivingAreaFeaturesIroningEquipmentExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesIroningEquipmentExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesIroningEquipmentExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesIroningEquipmentExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesIroningEquipmentExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesIroningEquipmentExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesPayPerViewMoviesExceptionEnum - Pay per view movies exception.
type LivingAreaFeaturesPayPerViewMoviesExceptionEnum string

const (
	LivingAreaFeaturesPayPerViewMoviesExceptionEnumExceptionUnspecified LivingAreaFeaturesPayPerViewMoviesExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesPayPerViewMoviesExceptionEnumUnderConstruction    LivingAreaFeaturesPayPerViewMoviesExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesPayPerViewMoviesExceptionEnumDependentOnSeason    LivingAreaFeaturesPayPerViewMoviesExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesPayPerViewMoviesExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesPayPerViewMoviesExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesPayPerViewMoviesExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesPayPerViewMoviesExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesPayPerViewMoviesExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesPrivateBathroomExceptionEnum - Private bathroom exception.
type LivingAreaFeaturesPrivateBathroomExceptionEnum string

const (
	LivingAreaFeaturesPrivateBathroomExceptionEnumExceptionUnspecified LivingAreaFeaturesPrivateBathroomExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesPrivateBathroomExceptionEnumUnderConstruction    LivingAreaFeaturesPrivateBathroomExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesPrivateBathroomExceptionEnumDependentOnSeason    LivingAreaFeaturesPrivateBathroomExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesPrivateBathroomExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesPrivateBathroomExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesPrivateBathroomExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesPrivateBathroomExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesPrivateBathroomExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesShowerExceptionEnum - Shower exception.
type LivingAreaFeaturesShowerExceptionEnum string

const (
	LivingAreaFeaturesShowerExceptionEnumExceptionUnspecified LivingAreaFeaturesShowerExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesShowerExceptionEnumUnderConstruction    LivingAreaFeaturesShowerExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesShowerExceptionEnumDependentOnSeason    LivingAreaFeaturesShowerExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesShowerExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesShowerExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesShowerExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesShowerExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesShowerExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesToiletExceptionEnum - Toilet exception.
type LivingAreaFeaturesToiletExceptionEnum string

const (
	LivingAreaFeaturesToiletExceptionEnumExceptionUnspecified LivingAreaFeaturesToiletExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesToiletExceptionEnumUnderConstruction    LivingAreaFeaturesToiletExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesToiletExceptionEnumDependentOnSeason    LivingAreaFeaturesToiletExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesToiletExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesToiletExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesToiletExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesToiletExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesToiletExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesTvCastingExceptionEnum - TV exception.
type LivingAreaFeaturesTvCastingExceptionEnum string

const (
	LivingAreaFeaturesTvCastingExceptionEnumExceptionUnspecified LivingAreaFeaturesTvCastingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesTvCastingExceptionEnumUnderConstruction    LivingAreaFeaturesTvCastingExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesTvCastingExceptionEnumDependentOnSeason    LivingAreaFeaturesTvCastingExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesTvCastingExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesTvCastingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesTvCastingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesTvCastingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesTvCastingExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesTvExceptionEnum - TV exception.
type LivingAreaFeaturesTvExceptionEnum string

const (
	LivingAreaFeaturesTvExceptionEnumExceptionUnspecified LivingAreaFeaturesTvExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesTvExceptionEnumUnderConstruction    LivingAreaFeaturesTvExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesTvExceptionEnumDependentOnSeason    LivingAreaFeaturesTvExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesTvExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesTvExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesTvExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesTvExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesTvExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesTvStreamingExceptionEnum - TV streaming exception.
type LivingAreaFeaturesTvStreamingExceptionEnum string

const (
	LivingAreaFeaturesTvStreamingExceptionEnumExceptionUnspecified LivingAreaFeaturesTvStreamingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesTvStreamingExceptionEnumUnderConstruction    LivingAreaFeaturesTvStreamingExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesTvStreamingExceptionEnumDependentOnSeason    LivingAreaFeaturesTvStreamingExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesTvStreamingExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesTvStreamingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesTvStreamingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesTvStreamingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesTvStreamingExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum - Universal power adapters exception.
type LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum string

const (
	LivingAreaFeaturesUniversalPowerAdaptersExceptionEnumExceptionUnspecified LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesUniversalPowerAdaptersExceptionEnumUnderConstruction    LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesUniversalPowerAdaptersExceptionEnumDependentOnSeason    LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesUniversalPowerAdaptersExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum: %s", s)
	}
}

// LivingAreaFeaturesWasherExceptionEnum - Washer exception.
type LivingAreaFeaturesWasherExceptionEnum string

const (
	LivingAreaFeaturesWasherExceptionEnumExceptionUnspecified LivingAreaFeaturesWasherExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaFeaturesWasherExceptionEnumUnderConstruction    LivingAreaFeaturesWasherExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaFeaturesWasherExceptionEnumDependentOnSeason    LivingAreaFeaturesWasherExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaFeaturesWasherExceptionEnumDependentOnDayOfWeek LivingAreaFeaturesWasherExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaFeaturesWasherExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaFeaturesWasherExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaFeaturesWasherExceptionEnum: %s", s)
	}
}

// LivingAreaFeatures - Features in the living area.
type LivingAreaFeatures struct {
	// Air conditioning. An electrical machine used to cool the temperature of the guestroom.
	AirConditioning *bool `json:"airConditioning,omitempty"`
	// Air conditioning exception.
	AirConditioningException *LivingAreaFeaturesAirConditioningExceptionEnum `json:"airConditioningException,omitempty"`
	// Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
	Bathtub *bool `json:"bathtub,omitempty"`
	// Bathtub exception.
	BathtubException *LivingAreaFeaturesBathtubExceptionEnum `json:"bathtubException,omitempty"`
	// Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
	Bidet *bool `json:"bidet,omitempty"`
	// Bidet exception.
	BidetException *LivingAreaFeaturesBidetExceptionEnum `json:"bidetException,omitempty"`
	// Dryer. An electrical machine designed to dry clothing.
	Dryer *bool `json:"dryer,omitempty"`
	// Dryer exception.
	DryerException *LivingAreaFeaturesDryerExceptionEnum `json:"dryerException,omitempty"`
	// Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
	ElectronicRoomKey *bool `json:"electronicRoomKey,omitempty"`
	// Electronic room key exception.
	ElectronicRoomKeyException *LivingAreaFeaturesElectronicRoomKeyExceptionEnum `json:"electronicRoomKeyException,omitempty"`
	// Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
	Fireplace *bool `json:"fireplace,omitempty"`
	// Fireplace exception.
	FireplaceException *LivingAreaFeaturesFireplaceExceptionEnum `json:"fireplaceException,omitempty"`
	// Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.
	Hairdryer *bool `json:"hairdryer,omitempty"`
	// Hairdryer exception.
	HairdryerException *LivingAreaFeaturesHairdryerExceptionEnum `json:"hairdryerException,omitempty"`
	// Heating. An electrical machine used to warm the temperature of the guestroom.
	Heating *bool `json:"heating,omitempty"`
	// Heating exception.
	HeatingException *LivingAreaFeaturesHeatingExceptionEnum `json:"heatingException,omitempty"`
	// In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
	InunitSafe *bool `json:"inunitSafe,omitempty"`
	// In-unit safe exception.
	InunitSafeException *LivingAreaFeaturesInunitSafeExceptionEnum `json:"inunitSafeException,omitempty"`
	// In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
	InunitWifiAvailable *bool `json:"inunitWifiAvailable,omitempty"`
	// In-unit Wifi available exception.
	InunitWifiAvailableException *LivingAreaFeaturesInunitWifiAvailableExceptionEnum `json:"inunitWifiAvailableException,omitempty"`
	// Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
	IroningEquipment *bool `json:"ironingEquipment,omitempty"`
	// Ironing equipment exception.
	IroningEquipmentException *LivingAreaFeaturesIroningEquipmentExceptionEnum `json:"ironingEquipmentException,omitempty"`
	// Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
	PayPerViewMovies *bool `json:"payPerViewMovies,omitempty"`
	// Pay per view movies exception.
	PayPerViewMoviesException *LivingAreaFeaturesPayPerViewMoviesExceptionEnum `json:"payPerViewMoviesException,omitempty"`
	// Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
	PrivateBathroom *bool `json:"privateBathroom,omitempty"`
	// Private bathroom exception.
	PrivateBathroomException *LivingAreaFeaturesPrivateBathroomExceptionEnum `json:"privateBathroomException,omitempty"`
	// Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.
	Shower *bool `json:"shower,omitempty"`
	// Shower exception.
	ShowerException *LivingAreaFeaturesShowerExceptionEnum `json:"showerException,omitempty"`
	// Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
	Toilet *bool `json:"toilet,omitempty"`
	// Toilet exception.
	ToiletException *LivingAreaFeaturesToiletExceptionEnum `json:"toiletException,omitempty"`
	// TV. A television is available in the guestroom.
	Tv *bool `json:"tv,omitempty"`
	// TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.
	TvCasting *bool `json:"tvCasting,omitempty"`
	// TV exception.
	TvCastingException *LivingAreaFeaturesTvCastingExceptionEnum `json:"tvCastingException,omitempty"`
	// TV exception.
	TvException *LivingAreaFeaturesTvExceptionEnum `json:"tvException,omitempty"`
	// TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
	TvStreaming *bool `json:"tvStreaming,omitempty"`
	// TV streaming exception.
	TvStreamingException *LivingAreaFeaturesTvStreamingExceptionEnum `json:"tvStreamingException,omitempty"`
	// Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
	UniversalPowerAdapters *bool `json:"universalPowerAdapters,omitempty"`
	// Universal power adapters exception.
	UniversalPowerAdaptersException *LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum `json:"universalPowerAdaptersException,omitempty"`
	// Washer. An electrical machine connected to a running water source designed to launder clothing.
	Washer *bool `json:"washer,omitempty"`
	// Washer exception.
	WasherException *LivingAreaFeaturesWasherExceptionEnum `json:"washerException,omitempty"`
}
