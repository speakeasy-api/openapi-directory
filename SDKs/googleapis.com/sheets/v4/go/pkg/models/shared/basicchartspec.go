// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BasicChartSpecChartTypeEnum - The type of the chart.
type BasicChartSpecChartTypeEnum string

const (
	BasicChartSpecChartTypeEnumBasicChartTypeUnspecified BasicChartSpecChartTypeEnum = "BASIC_CHART_TYPE_UNSPECIFIED"
	BasicChartSpecChartTypeEnumBar                       BasicChartSpecChartTypeEnum = "BAR"
	BasicChartSpecChartTypeEnumLine                      BasicChartSpecChartTypeEnum = "LINE"
	BasicChartSpecChartTypeEnumArea                      BasicChartSpecChartTypeEnum = "AREA"
	BasicChartSpecChartTypeEnumColumn                    BasicChartSpecChartTypeEnum = "COLUMN"
	BasicChartSpecChartTypeEnumScatter                   BasicChartSpecChartTypeEnum = "SCATTER"
	BasicChartSpecChartTypeEnumCombo                     BasicChartSpecChartTypeEnum = "COMBO"
	BasicChartSpecChartTypeEnumSteppedArea               BasicChartSpecChartTypeEnum = "STEPPED_AREA"
)

func (e BasicChartSpecChartTypeEnum) ToPointer() *BasicChartSpecChartTypeEnum {
	return &e
}

func (e *BasicChartSpecChartTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC_CHART_TYPE_UNSPECIFIED":
		fallthrough
	case "BAR":
		fallthrough
	case "LINE":
		fallthrough
	case "AREA":
		fallthrough
	case "COLUMN":
		fallthrough
	case "SCATTER":
		fallthrough
	case "COMBO":
		fallthrough
	case "STEPPED_AREA":
		*e = BasicChartSpecChartTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicChartSpecChartTypeEnum: %v", v)
	}
}

// BasicChartSpecCompareModeEnum - The behavior of tooltips and data highlighting when hovering on data and chart area.
type BasicChartSpecCompareModeEnum string

const (
	BasicChartSpecCompareModeEnumBasicChartCompareModeUnspecified BasicChartSpecCompareModeEnum = "BASIC_CHART_COMPARE_MODE_UNSPECIFIED"
	BasicChartSpecCompareModeEnumDatum                            BasicChartSpecCompareModeEnum = "DATUM"
	BasicChartSpecCompareModeEnumCategory                         BasicChartSpecCompareModeEnum = "CATEGORY"
)

func (e BasicChartSpecCompareModeEnum) ToPointer() *BasicChartSpecCompareModeEnum {
	return &e
}

func (e *BasicChartSpecCompareModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC_CHART_COMPARE_MODE_UNSPECIFIED":
		fallthrough
	case "DATUM":
		fallthrough
	case "CATEGORY":
		*e = BasicChartSpecCompareModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicChartSpecCompareModeEnum: %v", v)
	}
}

// BasicChartSpecLegendPositionEnum - The position of the chart legend.
type BasicChartSpecLegendPositionEnum string

const (
	BasicChartSpecLegendPositionEnumBasicChartLegendPositionUnspecified BasicChartSpecLegendPositionEnum = "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED"
	BasicChartSpecLegendPositionEnumBottomLegend                        BasicChartSpecLegendPositionEnum = "BOTTOM_LEGEND"
	BasicChartSpecLegendPositionEnumLeftLegend                          BasicChartSpecLegendPositionEnum = "LEFT_LEGEND"
	BasicChartSpecLegendPositionEnumRightLegend                         BasicChartSpecLegendPositionEnum = "RIGHT_LEGEND"
	BasicChartSpecLegendPositionEnumTopLegend                           BasicChartSpecLegendPositionEnum = "TOP_LEGEND"
	BasicChartSpecLegendPositionEnumNoLegend                            BasicChartSpecLegendPositionEnum = "NO_LEGEND"
)

func (e BasicChartSpecLegendPositionEnum) ToPointer() *BasicChartSpecLegendPositionEnum {
	return &e
}

func (e *BasicChartSpecLegendPositionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED":
		fallthrough
	case "BOTTOM_LEGEND":
		fallthrough
	case "LEFT_LEGEND":
		fallthrough
	case "RIGHT_LEGEND":
		fallthrough
	case "TOP_LEGEND":
		fallthrough
	case "NO_LEGEND":
		*e = BasicChartSpecLegendPositionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicChartSpecLegendPositionEnum: %v", v)
	}
}

// BasicChartSpecStackedTypeEnum - The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
type BasicChartSpecStackedTypeEnum string

const (
	BasicChartSpecStackedTypeEnumBasicChartStackedTypeUnspecified BasicChartSpecStackedTypeEnum = "BASIC_CHART_STACKED_TYPE_UNSPECIFIED"
	BasicChartSpecStackedTypeEnumNotStacked                       BasicChartSpecStackedTypeEnum = "NOT_STACKED"
	BasicChartSpecStackedTypeEnumStacked                          BasicChartSpecStackedTypeEnum = "STACKED"
	BasicChartSpecStackedTypeEnumPercentStacked                   BasicChartSpecStackedTypeEnum = "PERCENT_STACKED"
)

func (e BasicChartSpecStackedTypeEnum) ToPointer() *BasicChartSpecStackedTypeEnum {
	return &e
}

func (e *BasicChartSpecStackedTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC_CHART_STACKED_TYPE_UNSPECIFIED":
		fallthrough
	case "NOT_STACKED":
		fallthrough
	case "STACKED":
		fallthrough
	case "PERCENT_STACKED":
		*e = BasicChartSpecStackedTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicChartSpecStackedTypeEnum: %v", v)
	}
}

// BasicChartSpec - The specification for a basic chart. See BasicChartType for the list of charts this supports.
type BasicChartSpec struct {
	// The axis on the chart.
	Axis []BasicChartAxis `json:"axis,omitempty"`
	// The type of the chart.
	ChartType *BasicChartSpecChartTypeEnum `json:"chartType,omitempty"`
	// The behavior of tooltips and data highlighting when hovering on data and chart area.
	CompareMode *BasicChartSpecCompareModeEnum `json:"compareMode,omitempty"`
	// The domain of data this is charting. Only a single domain is supported.
	Domains []BasicChartDomain `json:"domains,omitempty"`
	// The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
	HeaderCount *int `json:"headerCount,omitempty"`
	// If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
	InterpolateNulls *bool `json:"interpolateNulls,omitempty"`
	// The position of the chart legend.
	LegendPosition *BasicChartSpecLegendPositionEnum `json:"legendPosition,omitempty"`
	// Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
	LineSmoothing *bool `json:"lineSmoothing,omitempty"`
	// The data this chart is visualizing.
	Series []BasicChartSeries `json:"series,omitempty"`
	// The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
	StackedType *BasicChartSpecStackedTypeEnum `json:"stackedType,omitempty"`
	// True to make the chart 3D. Applies to Bar and Column charts.
	ThreeDimensional *bool `json:"threeDimensional,omitempty"`
	// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
	TotalDataLabel *DataLabel `json:"totalDataLabel,omitempty"`
}
