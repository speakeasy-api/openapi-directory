<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyDefinitionsDestinyInventoryItemDefinitionAction - If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyDefinitionsDestinyInventoryItemDefinitionAction
{
    /**
     * The internal identifier for the action.
     * 
     * @var ?string $actionTypeLabel
     */
	
    public ?string $actionTypeLabel = null;
    
    /**
     * If true, the entire stack is deleted when the action completes.
     * 
     * @var ?bool $consumeEntireStack
     */
	
    public ?bool $consumeEntireStack = null;
    
    /**
     * If true, the item is deleted when the action completes.
     * 
     * @var ?bool $deleteOnAction
     */
	
    public ?bool $deleteOnAction = null;
    
    /**
     * The content has this property, however it's not entirely clear how it is used.
     * 
     * @var ?bool $isPositive
     */
	
    public ?bool $isPositive = null;
    
    /**
     * The icon associated with the overlay screen for the action, if any.
     * 
     * @var ?string $overlayIcon
     */
	
    public ?string $overlayIcon = null;
    
    /**
     * If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.
     * 
     * @var ?string $overlayScreenName
     */
	
    public ?string $overlayScreenName = null;
    
    /**
     * If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DestinyDefinitionsDestinyProgressionRewardDefinition> $progressionRewards
     */
	
    public ?array $progressionRewards = null;
    
    /**
     * The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
     * 
     * @var ?int $requiredCooldownHash
     */
	
    public ?int $requiredCooldownHash = null;
    
    /**
     * The number of seconds to delay before allowing this action to be performed again.
     * 
     * @var ?int $requiredCooldownSeconds
     */
	
    public ?int $requiredCooldownSeconds = null;
    
    /**
     * If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DestinyDefinitionsDestinyItemActionRequiredItemDefinition> $requiredItems
     */
	
    public ?array $requiredItems = null;
    
    /**
     * Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
     * 
     * @var ?string $requiredLocation
     */
	
    public ?string $requiredLocation = null;
    
    /**
     * If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
     * 
     * @var ?bool $useOnAcquire
     */
	
    public ?bool $useOnAcquire = null;
    
    /**
     * Localized text describing the action being performed.
     * 
     * @var ?string $verbDescription
     */
	
    public ?string $verbDescription = null;
    
    /**
     * Localized text for the verb of the action being performed.
     * 
     * @var ?string $verbName
     */
	
    public ?string $verbName = null;
    
	public function __construct()
	{
		$this->actionTypeLabel = null;
		$this->consumeEntireStack = null;
		$this->deleteOnAction = null;
		$this->isPositive = null;
		$this->overlayIcon = null;
		$this->overlayScreenName = null;
		$this->progressionRewards = null;
		$this->requiredCooldownHash = null;
		$this->requiredCooldownSeconds = null;
		$this->requiredItems = null;
		$this->requiredLocation = null;
		$this->useOnAcquire = null;
		$this->verbDescription = null;
		$this->verbName = null;
	}
}
