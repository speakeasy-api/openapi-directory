"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import linkclicktoordertype_enum as shared_linkclicktoordertype_enum
from ..shared import margintype_enum as shared_margintype_enum
from ..shared import performanceindicatorformula as shared_performanceindicatorformula
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportAdvancedFilters:
    
    link_click_to_order_type: shared_linkclicktoordertype_enum.LinkClickToOrderTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkClickToOrderType') }})  
    margin_type: shared_margintype_enum.MarginTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginType') }})  
    only_direct_sales: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onlyDirectSales') }})
    r"""If true, you will get only direct sales. Otherwise the indirect sales will be included."""  
    only_payment_validated_orders: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onlyPaymentValidatedOrders') }})
    r"""If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not."""  
    performance_indicator_formula: shared_performanceindicatorformula.PerformanceIndicatorFormula = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceIndicatorFormula') }})
    r"""The KPI formula"""  
    global_margin_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('globalMarginPercent'), 'exclude': lambda f: f is None }})
    r"""If the margin type is 'Global', indicate the percentage of sale price."""  
    link_click_to_order_max_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkClickToOrderMaxDay'), 'exclude': lambda f: f is None }})
    r"""If the linkOrderType is OnClickDate, indicate the max day to search the click from the order"""  
    