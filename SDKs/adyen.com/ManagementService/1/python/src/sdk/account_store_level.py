"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountStoreLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_merchants_merchant_id_stores(self, request: operations.GetMerchantsMerchantIDStoresRequest, security: operations.GetMerchantsMerchantIDStoresSecurity) -> operations.GetMerchantsMerchantIDStoresResponse:
        r"""Get a list of stores
        Returns a list of stores for the merchant account identified in the path. The list is grouped into pages as defined by the query parameters.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDStoresRequest, base_url, '/merchants/{merchantId}/stores', request)
        
        query_params = utils.get_query_params(operations.GetMerchantsMerchantIDStoresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDStoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListStoresResponse])
                res.list_stores_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_stores_store_id(self, request: operations.GetMerchantsMerchantIDStoresStoreIDRequest, security: operations.GetMerchantsMerchantIDStoresStoreIDSecurity) -> operations.GetMerchantsMerchantIDStoresStoreIDResponse:
        r"""Get a store
        Returns the details of the store identified in the path.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDStoresStoreIDRequest, base_url, '/merchants/{merchantId}/stores/{storeId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDStoresStoreIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_stores(self, request: operations.GetStoresRequest, security: operations.GetStoresSecurity) -> operations.GetStoresResponse:
        r"""Get a list of stores
        Returns a list of stores. The list is grouped into pages as defined by the query parameters.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stores'
        
        query_params = utils.get_query_params(operations.GetStoresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListStoresResponse])
                res.list_stores_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_stores_store_id(self, request: operations.GetStoresStoreIDRequest, security: operations.GetStoresStoreIDSecurity) -> operations.GetStoresStoreIDResponse:
        r"""Get a store
        Returns the details of the store identified in the path.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoresStoreIDRequest, base_url, '/stores/{storeId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoresStoreIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_merchants_merchant_id_stores_store_id(self, request: operations.PatchMerchantsMerchantIDStoresStoreIDRequest, security: operations.PatchMerchantsMerchantIDStoresStoreIDSecurity) -> operations.PatchMerchantsMerchantIDStoresStoreIDResponse:
        r"""Update a store
        Updates the store identified in the path. You can only update some store parameters.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMerchantsMerchantIDStoresStoreIDRequest, base_url, '/merchants/{merchantId}/stores/{storeId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_store_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMerchantsMerchantIDStoresStoreIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_stores_store_id(self, request: operations.PatchStoresStoreIDRequest, security: operations.PatchStoresStoreIDSecurity) -> operations.PatchStoresStoreIDResponse:
        r"""Update a store
        Updates the store identified in the path.
        You can only update some store parameters.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchStoresStoreIDRequest, base_url, '/stores/{storeId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_store_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchStoresStoreIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_stores(self, request: operations.PostMerchantsMerchantIDStoresRequest, security: operations.PostMerchantsMerchantIDStoresSecurity) -> operations.PostMerchantsMerchantIDStoresResponse:
        r"""Create a store
        Creates a store for the merchant account identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDStoresRequest, base_url, '/merchants/{merchantId}/stores', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "store_creation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDStoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_stores(self, request: shared.StoreCreationWithMerchantCodeRequest, security: operations.PostStoresSecurity) -> operations.PostStoresResponse:
        r"""Create a store
        Creates a store for the merchant account specified in the request.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Stores read and write
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stores'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostStoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Store])
                res.store = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    