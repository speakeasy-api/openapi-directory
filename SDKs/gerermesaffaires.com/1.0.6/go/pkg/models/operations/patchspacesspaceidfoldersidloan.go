// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum string

const (
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumDebtSpreading      PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "debt spreading"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumBankLoan           PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "bank loan"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumCurrentAccount     PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "current account"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumOverdraftAgreement PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "overdraft agreement"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumLeasing            PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "leasing"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnumObligation         PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum = "obligation"
)

func (e *PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "debt spreading":
		fallthrough
	case "bank loan":
		fallthrough
	case "current account":
		fallthrough
	case "overdraft agreement":
		fallthrough
	case "leasing":
		fallthrough
	case "obligation":
		*e = PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnumConfidential PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnumRegular      PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum = "regular"
	PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnumPublic       PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum = "public"
)

func (e *PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum: %s", s)
	}
}

// PatchSpacesSpaceIDFoldersIDLoanRequestBody - Loan to modify (except name, class and archivaldate)
type PatchSpacesSpaceIDFoldersIDLoanRequestBody struct {
	About        *string                                                 `json:"About,omitempty"`
	Amount       *float32                                                `json:"Amount,omitempty"`
	Category     *PatchSpacesSpaceIDFoldersIDLoanRequestBodyCategoryEnum `json:"Category,omitempty"`
	Comment      *string                                                 `json:"Comment,omitempty"`
	Designation  *string                                                 `json:"Designation,omitempty"`
	DueAmount    *float32                                                `json:"DueAmount,omitempty"`
	End          *string                                                 `json:"End,omitempty"`
	Home         *bool                                                   `json:"Home,omitempty"`
	Keywords     []string                                                `json:"Keywords,omitempty"`
	Level        *PatchSpacesSpaceIDFoldersIDLoanRequestBodyLevelEnum    `json:"Level,omitempty"`
	MonthsNumber *float64                                                `json:"MonthsNumber,omitempty"`
	Rate         *float32                                                `json:"Rate,omitempty"`
	Start        *string                                                 `json:"Start,omitempty"`
	TotalCost    *float32                                                `json:"TotalCost,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDLoanRequest struct {
	// Loan to modify (except name, class and archivaldate)
	RequestBody PatchSpacesSpaceIDFoldersIDLoanRequestBody `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersIDLoanResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
