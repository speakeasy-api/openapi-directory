/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Assignment - Assignment created
 */
public class Assignment {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowsAnonymousContributions")
    public Boolean allowsAnonymousContributions;
    public Assignment withAllowsAnonymousContributions(Boolean allowsAnonymousContributions) {
        this.allowsAnonymousContributions = allowsAnonymousContributions;
        return this;
    }
    
    /**
     * An optional call to action specific to this assignment. ie. Submit your snow pictures.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callToAction")
    public String callToAction;
    public Assignment withCallToAction(String callToAction) {
        this.callToAction = callToAction;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover")
    public MediaUsage cover;
    public Assignment withCover(MediaUsage cover) {
        this.cover = cover;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public Assignment withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Assignment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("embargo")
    public OffsetDateTime embargo;
    public Assignment withEmbargo(OffsetDateTime embargo) {
        this.embargo = embargo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ends")
    public OffsetDateTime ends;
    public Assignment withEnds(OffsetDateTime ends) {
        this.ends = ends;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured")
    public Boolean featured;
    public Assignment withFeatured(Boolean featured) {
        this.featured = featured;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Assignment withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaRequired")
    public Boolean mediaRequired;
    public Assignment withMediaRequired(Boolean mediaRequired) {
        this.mediaRequired = mediaRequired;
        return this;
    }
    
    /**
     * Optional credential id of the moderator who owns this particular assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moderator")
    public String moderator;
    public Assignment withModerator(String moderator) {
        this.moderator = moderator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Assignment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Helper value. Is this assignment currently open? Based on the value of the ends field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open")
    public Boolean open;
    public Assignment withOpen(Boolean open) {
        this.open = open;
        return this;
    }
    
    /**
     * An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receiptMessage")
    public String receiptMessage;
    public Assignment withReceiptMessage(String receiptMessage) {
        this.receiptMessage = receiptMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("starts")
    public OffsetDateTime starts;
    public Assignment withStarts(OffsetDateTime starts) {
        this.starts = starts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public Assignment withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlWords")
    public String urlWords;
    public Assignment withUrlWords(String urlWords) {
        this.urlWords = urlWords;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webUrl")
    public String webUrl;
    public Assignment withWebUrl(String webUrl) {
        this.webUrl = webUrl;
        return this;
    }
    
}
