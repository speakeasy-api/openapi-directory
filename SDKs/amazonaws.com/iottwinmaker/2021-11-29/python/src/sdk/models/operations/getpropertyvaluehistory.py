"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import getpropertyvaluehistoryresponse as shared_getpropertyvaluehistoryresponse
from ..shared import interpolationtype_enum as shared_interpolationtype_enum
from ..shared import propertyfilter as shared_propertyfilter
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPropertyValueHistoryRequestBodyInterpolation:
    r"""An object that specifies how to interpolate data in a list."""
    
    interpolation_type: Optional[shared_interpolationtype_enum.InterpolationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interpolationType'), 'exclude': lambda f: f is None }})  
    interval_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intervalInSeconds'), 'exclude': lambda f: f is None }})  
    
class GetPropertyValueHistoryRequestBodyOrderByTimeEnum(str, Enum):
    r"""The time direction to use in the result order."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPropertyValueHistoryRequestBody:
    
    selected_properties: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedProperties') }})
    r"""A list of properties whose value histories the request retrieves."""  
    component_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentName'), 'exclude': lambda f: f is None }})
    r"""The name of the component."""  
    component_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentTypeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the component type."""  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""supports epoch seconds value"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp represented in ISO 8601 format"""  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityId'), 'exclude': lambda f: f is None }})
    r"""The ID of the entity."""  
    interpolation: Optional[GetPropertyValueHistoryRequestBodyInterpolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interpolation'), 'exclude': lambda f: f is None }})
    r"""An object that specifies how to interpolate data in a list."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""The string that specifies the next page of results."""  
    order_by_time: Optional[GetPropertyValueHistoryRequestBodyOrderByTimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderByTime'), 'exclude': lambda f: f is None }})
    r"""The time direction to use in the result order."""  
    property_filters: Optional[list[shared_propertyfilter.PropertyFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyFilters'), 'exclude': lambda f: f is None }})
    r"""A list of objects that filter the property value history request."""  
    start_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""supports epoch seconds value"""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp represented in ISO 8601 format"""  
    

@dataclasses.dataclass
class GetPropertyValueHistoryRequest:
    
    request_body: GetPropertyValueHistoryRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    workspace_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspaceId', 'style': 'simple', 'explode': False }})
    r"""The ID of the workspace."""  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetPropertyValueHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    connector_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorFailureException"""  
    connector_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorTimeoutException"""  
    get_property_value_history_response: Optional[shared_getpropertyvaluehistoryresponse.GetPropertyValueHistoryResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    