<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateAuthorizerRequestBody
{
    /**
     * The ARN of the authorizer's Lambda function.
     * 
     * @var ?string $authorizerFunctionArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerFunctionArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizerFunctionArn = null;
    
    /**
     * When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.
     * 
     * @var ?bool $enableCachingForHttp
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableCachingForHttp')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableCachingForHttp = null;
    
    /**
     * The status of the update authorizer request.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateAuthorizerRequestBodyStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateAuthorizerRequestBodyStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateAuthorizerRequestBodyStatusEnum $status = null;
    
    /**
     * The key used to extract the token from the HTTP headers. 
     * 
     * @var ?string $tokenKeyName
     */
	#[\JMS\Serializer\Annotation\SerializedName('tokenKeyName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tokenKeyName = null;
    
    /**
     * The public keys used to verify the token signature.
     * 
     * @var ?array<string, string> $tokenSigningPublicKeys
     */
	#[\JMS\Serializer\Annotation\SerializedName('tokenSigningPublicKeys')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tokenSigningPublicKeys = null;
    
	public function __construct()
	{
		$this->authorizerFunctionArn = null;
		$this->enableCachingForHttp = null;
		$this->status = null;
		$this->tokenKeyName = null;
		$this->tokenSigningPublicKeys = null;
	}
}
