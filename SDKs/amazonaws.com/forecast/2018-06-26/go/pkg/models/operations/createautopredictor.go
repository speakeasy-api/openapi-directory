// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAutoPredictorXAmzTargetEnum
type CreateAutoPredictorXAmzTargetEnum string

const (
	CreateAutoPredictorXAmzTargetEnumAmazonForecastCreateAutoPredictor CreateAutoPredictorXAmzTargetEnum = "AmazonForecast.CreateAutoPredictor"
)

func (e *CreateAutoPredictorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonForecast.CreateAutoPredictor":
		*e = CreateAutoPredictorXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAutoPredictorXAmzTargetEnum: %s", s)
	}
}

type CreateAutoPredictorHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateAutoPredictorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAutoPredictorRequest struct {
	Headers CreateAutoPredictorHeaders
	Request shared.CreateAutoPredictorRequest `request:"mediaType=application/json"`
}

type CreateAutoPredictorResponse struct {
	ContentType string
	// Success
	CreateAutoPredictorResponse *shared.CreateAutoPredictorResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
