"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from typing import Optional


@dataclasses.dataclass
class GetOauthAuthorizeRequest:
    
    client_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'client_id', 'style': 'form', 'explode': True }})
    r"""Client ID, obtained during app registration."""  
    redirect_uri: str = dataclasses.field(metadata={'query_param': { 'field_name': 'redirect_uri', 'style': 'form', 'explode': True }})
    r"""Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be shown instead. Must match one of the redirect URIs declared during app registration."""  
    response_type: str = dataclasses.field(metadata={'query_param': { 'field_name': 'response_type', 'style': 'form', 'explode': True }})
    r"""Should be set equal to code."""  
    force_login: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'force_login', 'style': 'form', 'explode': True }})
    r"""Added in 2.6.0. Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance."""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of scopes declared during app registration. If not provided, defaults to read."""  
    

@dataclasses.dataclass
class GetOauthAuthorizeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""If the authorization code is incorrect or has been used already, the request will fail."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    