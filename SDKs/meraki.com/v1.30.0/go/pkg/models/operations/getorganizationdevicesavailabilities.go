// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationDevicesAvailabilitiesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum - An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
type GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum string

const (
	GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnumWithAllTags GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum = "withAllTags"
	GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnumWithAnyTags GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum = "withAnyTags"
)

func (e *GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum: %s", s)
	}
}

type GetOrganizationDevicesAvailabilitiesQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
	ProductTypes []string `queryParam:"style=form,explode=false,name=productTypes"`
	// Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
	TagsFilterType *GetOrganizationDevicesAvailabilitiesTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
}

type GetOrganizationDevicesAvailabilitiesRequest struct {
	PathParams  GetOrganizationDevicesAvailabilitiesPathParams
	QueryParams GetOrganizationDevicesAvailabilitiesQueryParams
}

// GetOrganizationDevicesAvailabilities200ApplicationJSONNetwork - Network info.
type GetOrganizationDevicesAvailabilities200ApplicationJSONNetwork struct {
	// ID for the network containing the device.
	ID *string `json:"id,omitempty"`
}

// GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum - Device product type.
type GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum string

const (
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumAppliance       GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "appliance"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumCamera          GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "camera"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumCellularGateway GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "cellularGateway"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumSensor          GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "sensor"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumSwitch          GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "switch"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumSystemsManager  GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "systemsManager"
	GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnumWireless        GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum = "wireless"
)

func (e *GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum: %s", s)
	}
}

// GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum - Status of the device. Possible values are: online, alerting, offline, dormant.
type GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum string

const (
	GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnumAlerting GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum = "alerting"
	GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnumDormant  GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum = "dormant"
	GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnumOffline  GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum = "offline"
	GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnumOnline   GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum = "online"
)

func (e *GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alerting":
		fallthrough
	case "dormant":
		fallthrough
	case "offline":
		fallthrough
	case "online":
		*e = GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum: %s", s)
	}
}

type GetOrganizationDevicesAvailabilities200ApplicationJSON struct {
	// The device MAC address.
	Mac *string `json:"mac,omitempty"`
	// The device name.
	Name *string `json:"name,omitempty"`
	// Network info.
	Network *GetOrganizationDevicesAvailabilities200ApplicationJSONNetwork `json:"network,omitempty"`
	// Device product type.
	ProductType *GetOrganizationDevicesAvailabilities200ApplicationJSONProductTypeEnum `json:"productType,omitempty"`
	// The device serial number.
	Serial *string `json:"serial,omitempty"`
	// Status of the device. Possible values are: online, alerting, offline, dormant.
	Status *GetOrganizationDevicesAvailabilities200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// List of custom tags for the device.
	Tags []string `json:"tags,omitempty"`
}

type GetOrganizationDevicesAvailabilitiesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevicesAvailabilities200ApplicationJSONObjects []GetOrganizationDevicesAvailabilities200ApplicationJSON
}
