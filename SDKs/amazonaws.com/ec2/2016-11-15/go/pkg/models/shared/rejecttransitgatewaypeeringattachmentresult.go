// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo - Information about the accepter transit gateway.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo struct {
	CoreNetworkID    *string
	OwnerID          *string
	Region           *string
	TransitGatewayID *string
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum - Describes whether dynamic routing is enabled or disabled for the transit gateway peering attachment.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum string

const (
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnumEnable  RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum = "enable"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnumDisable RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum = "disable"
)

func (e *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enable":
		fallthrough
	case "disable":
		*e = RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum: %s", s)
	}
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions - Details about the transit gateway peering attachment.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions struct {
	DynamicRouting *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptionsDynamicRoutingEnum
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo - Information about the requester transit gateway.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo struct {
	CoreNetworkID    *string
	OwnerID          *string
	Region           *string
	TransitGatewayID *string
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum - The state of the transit gateway peering attachment. Note that the <code>initiating</code> state has been deprecated.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum string

const (
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumInitiating        RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "initiating"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumInitiatingRequest RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "initiatingRequest"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumPendingAcceptance RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "pendingAcceptance"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRollingBack       RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rollingBack"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumPending           RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "pending"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumAvailable         RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "available"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumModifying         RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "modifying"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumDeleting          RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "deleting"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumDeleted           RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "deleted"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumFailed            RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "failed"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRejected          RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rejected"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumRejecting         RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "rejecting"
	RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnumFailing           RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum = "failing"
)

func (e *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiating":
		fallthrough
	case "initiatingRequest":
		fallthrough
	case "pendingAcceptance":
		fallthrough
	case "rollingBack":
		fallthrough
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "modifying":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		fallthrough
	case "failed":
		fallthrough
	case "rejected":
		fallthrough
	case "rejecting":
		fallthrough
	case "failing":
		*e = RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum: %s", s)
	}
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus - The status of the transit gateway peering attachment.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus struct {
	Code    *string
	Message *string
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags - Describes a tag.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags struct {
	Key   *string
	Value *string
}

// RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment - The transit gateway peering attachment.
type RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment struct {
	AccepterTgwInfo                    *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentAccepterTgwInfo
	AccepterTransitGatewayAttachmentID *string
	CreationTime                       *time.Time
	Options                            *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentOptions
	RequesterTgwInfo                   *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentRequesterTgwInfo
	State                              *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStateEnum
	Status                             *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentStatus
	Tags                               []RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachmentTags
	TransitGatewayAttachmentID         *string
}

// RejectTransitGatewayPeeringAttachmentResult - Success
type RejectTransitGatewayPeeringAttachmentResult struct {
	TransitGatewayPeeringAttachment *RejectTransitGatewayPeeringAttachmentResultTransitGatewayPeeringAttachment
}
