<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Certificate - A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Certificate
{
    /**
     * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     * @var ?string $issuer
     */
	#[\JMS\Serializer\Annotation\SerializedName('issuer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $issuer = null;
    
    /**
     * Output only. The certificate is not valid after this time. Only present if parsed is true.
     * 
     * @var ?string $notAfterTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('notAfterTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notAfterTime = null;
    
    /**
     * Output only. The certificate is not valid before this time. Only present if parsed is true.
     * 
     * @var ?string $notBeforeTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('notBeforeTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notBeforeTime = null;
    
    /**
     * Output only. True if the certificate was parsed successfully.
     * 
     * @var ?bool $parsed
     */
	#[\JMS\Serializer\Annotation\SerializedName('parsed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $parsed = null;
    
    /**
     * Required. The raw certificate bytes in DER format.
     * 
     * @var ?string $rawDer
     */
	#[\JMS\Serializer\Annotation\SerializedName('rawDer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $rawDer = null;
    
    /**
     * Output only. The certificate serial number as a hex string. Only present if parsed is true.
     * 
     * @var ?string $serialNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('serialNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serialNumber = null;
    
    /**
     * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     * @var ?string $sha256Fingerprint
     */
	#[\JMS\Serializer\Annotation\SerializedName('sha256Fingerprint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sha256Fingerprint = null;
    
    /**
     * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     * @var ?string $subject
     */
	#[\JMS\Serializer\Annotation\SerializedName('subject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subject = null;
    
    /**
     * Output only. The subject Alternative DNS names. Only present if parsed is true.
     * 
     * @var ?array<string> $subjectAlternativeDnsNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('subjectAlternativeDnsNames')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $subjectAlternativeDnsNames = null;
    
	public function __construct()
	{
		$this->issuer = null;
		$this->notAfterTime = null;
		$this->notBeforeTime = null;
		$this->parsed = null;
		$this->rawDer = null;
		$this->serialNumber = null;
		$this->sha256Fingerprint = null;
		$this->subject = null;
		$this->subjectAlternativeDnsNames = null;
	}
}
