"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import iampolicyanalysisquery as shared_iampolicyanalysisquery
from ..shared import iampolicyanalysisresult as shared_iampolicyanalysisresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IamPolicyAnalysis:
    r"""An analysis message to group the query and results."""
    
    analysis_query: Optional[shared_iampolicyanalysisquery.IamPolicyAnalysisQuery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisQuery'), 'exclude': lambda f: f is None }})
    r"""IAM policy analysis query message."""  
    analysis_results: Optional[list[shared_iampolicyanalysisresult.IamPolicyAnalysisResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisResults'), 'exclude': lambda f: f is None }})
    r"""A list of IamPolicyAnalysisResult that matches the analysis query, or empty if no result is found."""  
    fully_explored: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullyExplored'), 'exclude': lambda f: f is None }})
    r"""Represents whether all entries in the analysis_results have been fully explored to answer the query."""  
    