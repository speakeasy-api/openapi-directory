<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - API for reading and writing personnel data incl. data about attendances and absences
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.personio.de/v1',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * This endpoint is responsible for deleting attendance data for the company employees.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdResponse
     */
	public function deleteCompanyAttendancesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/attendances/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyAttendancesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for deleting absence period data for the company employees.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdResponse
     */
	public function deleteCompanyTimeOffsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/time-offs/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCompanyTimeOffsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesResponse
     */
	public function getCompanyAttendances(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/attendances');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyAttendancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attendancePeriodsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AttendancePeriodsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Employees
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesResponse
     */
	public function getCompanyEmployees(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/employees');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employeesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmployeesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show employee by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdResponse
     */
	public function getCompanyEmployeesEmployeeId(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/employees/{employee_id}', \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employeeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmployeeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show employee profile picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthResponse
     */
	public function getCompanyEmployeesEmployeeIdProfilePictureWidth(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/employees/{employee_id}/profile-picture/{width}', \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyEmployeesEmployeeIdProfilePictureWidthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->getCompanyEmployeesEmployeeIdProfilePictureWidth200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Provides a list of available time-off types, for example 'Paid vacation', 'Parental leave' or 'Home office'
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesResponse
     */
	public function getCompanyTimeOffTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/time-off-types');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCompanyTimeOffTypes200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffTypes200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsResponse
     */
	public function getCompanyTimeOffs(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/time-offs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->absencePeriodsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AbsencePeriodsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Absence Period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdResponse
     */
	public function getCompanyTimeOffsId(
        \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/time-offs/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompanyTimeOffsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->absencePeriodResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdResponse
     */
	public function patchCompanyAttendancesId(
        \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/attendances/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAttendancePeriodRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchCompanyAttendancesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NewAttendancePeriodRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompanyAttendancesResponse
     */
	public function postCompanyAttendances(
        \OpenAPI\OpenAPI\Models\Shared\NewAttendancePeriodRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompanyAttendancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/attendances');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompanyAttendancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newAttendancePeriodResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NewAttendancePeriodResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->detailedErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DetailedErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an employee
     * 
     * Creates new employee. Status of the employee will be set to `active` if `hire_date` provided is in past. Otherwise status will be set to `onboarding`. This endpoint will respond with `id` of created employee in case of success.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompanyEmployeesRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompanyEmployeesResponse
     */
	public function postCompanyEmployees(
        \OpenAPI\OpenAPI\Models\Operations\PostCompanyEmployeesRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompanyEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/employees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompanyEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This endpoint is responsible for adding absence data for the company employees.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTimeOffPeriodRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompanyTimeOffsResponse
     */
	public function postCompanyTimeOffs(
        \OpenAPI\OpenAPI\Models\Shared\CreateTimeOffPeriodRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompanyTimeOffsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/company/time-offs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompanyTimeOffsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postCompanyTimeOffs201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostCompanyTimeOffs201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}