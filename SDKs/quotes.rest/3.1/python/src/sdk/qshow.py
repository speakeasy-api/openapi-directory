"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Qshow:
    r"""Access Qshow - quote collection service. Create curated quotes collection. You can group quotes by any way you want and access them as a single unit. You need an API key to access this service."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_qshow(self, request: operations.DeleteQshowRequest, security: operations.DeleteQshowSecurity) -> operations.DeleteQshowResponse:
        r"""Delete a qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow'
        
        query_params = utils.get_query_params(operations.DeleteQshowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQshowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_qshow(self, request: operations.GetQshowRequest, security: operations.GetQshowSecurity) -> operations.GetQshowResponse:
        r"""Gets a details about a qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow'
        
        query_params = utils.get_query_params(operations.GetQshowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQshowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_qshow_list(self, request: operations.GetQshowListRequest, security: operations.GetQshowListSecurity) -> operations.GetQshowListResponse:
        r"""Get the list of Qshows in They Said So platform."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow/list'
        
        query_params = utils.get_query_params(operations.GetQshowListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQshowListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_qshow_quotes(self, request: operations.GetQshowQuotesRequest, security: operations.GetQshowQuotesSecurity) -> operations.GetQshowQuotesResponse:
        r"""Get the quotes in a given Qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow/quotes'
        
        query_params = utils.get_query_params(operations.GetQshowQuotesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQshowQuotesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_qshow(self, request: operations.PatchQshowRequest, security: operations.PatchQshowSecurity) -> operations.PatchQshowResponse:
        r"""Update an existing qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow'
        
        query_params = utils.get_query_params(operations.PatchQshowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchQshowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_qshow_quotes_add(self, request: operations.PostQshowQuotesAddRequest, security: operations.PostQshowQuotesAddSecurity) -> operations.PostQshowQuotesAddResponse:
        r"""Add a quote to a given Qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow/quotes/add'
        
        query_params = utils.get_query_params(operations.PostQshowQuotesAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQshowQuotesAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_qshow_quotes_remove(self, request: operations.PostQshowQuotesRemoveRequest, security: operations.PostQshowQuotesRemoveSecurity) -> operations.PostQshowQuotesRemoveResponse:
        r"""Remove a quote to a given Qshow."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow/quotes/remove'
        
        query_params = utils.get_query_params(operations.PostQshowQuotesRemoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQshowQuotesRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_qshow(self, request: operations.PutQshowRequest, security: operations.PutQshowSecurity) -> operations.PutQshowResponse:
        r"""Create and add a new qshow to your private collection."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/qshow'
        
        query_params = utils.get_query_params(operations.PutQshowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutQshowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    