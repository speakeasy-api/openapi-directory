// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetRelatedWordsPathParams struct {
	// Word to fetch relationships for
	Word string `pathParam:"style=simple,explode=false,name=word"`
}

// GetRelatedWordsRelationshipTypesEnum - Limits the total results per type of relationship type
type GetRelatedWordsRelationshipTypesEnum string

const (
	GetRelatedWordsRelationshipTypesEnumSynonym                   GetRelatedWordsRelationshipTypesEnum = "synonym"
	GetRelatedWordsRelationshipTypesEnumAntonym                   GetRelatedWordsRelationshipTypesEnum = "antonym"
	GetRelatedWordsRelationshipTypesEnumVariant                   GetRelatedWordsRelationshipTypesEnum = "variant"
	GetRelatedWordsRelationshipTypesEnumEquivalent                GetRelatedWordsRelationshipTypesEnum = "equivalent"
	GetRelatedWordsRelationshipTypesEnumCrossReference            GetRelatedWordsRelationshipTypesEnum = "cross-reference"
	GetRelatedWordsRelationshipTypesEnumRelatedWord               GetRelatedWordsRelationshipTypesEnum = "related-word"
	GetRelatedWordsRelationshipTypesEnumRhyme                     GetRelatedWordsRelationshipTypesEnum = "rhyme"
	GetRelatedWordsRelationshipTypesEnumForm                      GetRelatedWordsRelationshipTypesEnum = "form"
	GetRelatedWordsRelationshipTypesEnumEtymologicallyRelatedTerm GetRelatedWordsRelationshipTypesEnum = "etymologically-related-term"
	GetRelatedWordsRelationshipTypesEnumHypernym                  GetRelatedWordsRelationshipTypesEnum = "hypernym"
	GetRelatedWordsRelationshipTypesEnumHyponym                   GetRelatedWordsRelationshipTypesEnum = "hyponym"
	GetRelatedWordsRelationshipTypesEnumInflectedForm             GetRelatedWordsRelationshipTypesEnum = "inflected-form"
	GetRelatedWordsRelationshipTypesEnumPrimary                   GetRelatedWordsRelationshipTypesEnum = "primary"
	GetRelatedWordsRelationshipTypesEnumSameContext               GetRelatedWordsRelationshipTypesEnum = "same-context"
	GetRelatedWordsRelationshipTypesEnumVerbForm                  GetRelatedWordsRelationshipTypesEnum = "verb-form"
	GetRelatedWordsRelationshipTypesEnumVerbStem                  GetRelatedWordsRelationshipTypesEnum = "verb-stem"
	GetRelatedWordsRelationshipTypesEnumHasTopic                  GetRelatedWordsRelationshipTypesEnum = "has_topic"
)

func (e *GetRelatedWordsRelationshipTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "synonym":
		fallthrough
	case "antonym":
		fallthrough
	case "variant":
		fallthrough
	case "equivalent":
		fallthrough
	case "cross-reference":
		fallthrough
	case "related-word":
		fallthrough
	case "rhyme":
		fallthrough
	case "form":
		fallthrough
	case "etymologically-related-term":
		fallthrough
	case "hypernym":
		fallthrough
	case "hyponym":
		fallthrough
	case "inflected-form":
		fallthrough
	case "primary":
		fallthrough
	case "same-context":
		fallthrough
	case "verb-form":
		fallthrough
	case "verb-stem":
		fallthrough
	case "has_topic":
		*e = GetRelatedWordsRelationshipTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRelatedWordsRelationshipTypesEnum: %s", s)
	}
}

// GetRelatedWordsUseCanonicalEnum - If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
type GetRelatedWordsUseCanonicalEnum string

const (
	GetRelatedWordsUseCanonicalEnumFalse GetRelatedWordsUseCanonicalEnum = "false"
	GetRelatedWordsUseCanonicalEnumTrue  GetRelatedWordsUseCanonicalEnum = "true"
)

func (e *GetRelatedWordsUseCanonicalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = GetRelatedWordsUseCanonicalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRelatedWordsUseCanonicalEnum: %s", s)
	}
}

type GetRelatedWordsQueryParams struct {
	// Restrict to the supplied relationship types
	LimitPerRelationshipType *int `queryParam:"style=form,explode=true,name=limitPerRelationshipType"`
	// Limits the total results per type of relationship type
	RelationshipTypes *GetRelatedWordsRelationshipTypesEnum `queryParam:"style=form,explode=true,name=relationshipTypes"`
	// If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
	UseCanonical *GetRelatedWordsUseCanonicalEnum `queryParam:"style=form,explode=true,name=useCanonical"`
}

type GetRelatedWordsRequest struct {
	PathParams  GetRelatedWordsPathParams
	QueryParams GetRelatedWordsQueryParams
}

type GetRelatedWordsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
