/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * OBWriteInternationalStandingOrderConsentResponse7DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
 */
public class OBWriteInternationalStandingOrderConsentResponse7DataInitiation {
    /**
     * Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeBearer")
    public OBChargeBearerType1CodeEnum chargeBearer;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withChargeBearer(OBChargeBearerType1CodeEnum chargeBearer) {
        this.chargeBearer = chargeBearer;
        return this;
    }
    
    /**
     * Party to which an amount of money is due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Creditor")
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditor creditor;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withCreditor(OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditor creditor) {
        this.creditor = creditor;
        return this;
    }
    
    /**
     * Provides the details to identify the beneficiary account.
     */
    @JsonProperty("CreditorAccount")
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAccount creditorAccount;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withCreditorAccount(OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAccount creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
     * This is the servicer of the beneficiary account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditorAgent")
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAgent creditorAgent;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withCreditorAgent(OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAgent creditorAgent) {
        this.creditorAgent = creditorAgent;
        return this;
    }
    
    /**
     * Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
     */
    @JsonProperty("CurrencyOfTransfer")
    public String currencyOfTransfer;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withCurrencyOfTransfer(String currencyOfTransfer) {
        this.currencyOfTransfer = currencyOfTransfer;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount debtorAccount;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withDebtorAccount(OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DestinationCountryCode")
    public String destinationCountryCode;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withDestinationCountryCode(String destinationCountryCode) {
        this.destinationCountryCode = destinationCountryCode;
        return this;
    }
    
    /**
     * Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExtendedPurpose")
    public String extendedPurpose;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withExtendedPurpose(String extendedPurpose) {
        this.extendedPurpose = extendedPurpose;
        return this;
    }
    
    /**
     * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FinalPaymentDateTime")
    public OffsetDateTime finalPaymentDateTime;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withFinalPaymentDateTime(OffsetDateTime finalPaymentDateTime) {
        this.finalPaymentDateTime = finalPaymentDateTime;
        return this;
    }
    
    /**
     * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FirstPaymentDateTime")
    public OffsetDateTime firstPaymentDateTime;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withFirstPaymentDateTime(OffsetDateTime firstPaymentDateTime) {
        this.firstPaymentDateTime = firstPaymentDateTime;
        return this;
    }
    
    /**
     * Individual Definitions:
     * EvryDay - Every day
     * EvryWorkgDay - Every working day
     * IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
     * WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
     * IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
     * QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
     * ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
     * SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
     * RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
     * Individual Patterns:
     * EvryDay (ScheduleCode)
     * EvryWorkgDay (ScheduleCode)
     * IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
     * WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
     * IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
     * QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
     * The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
     * EvryDay
     * EvryWorkgDay
     * IntrvlWkDay:0[1-9]:0[1-7]
     * WkInMnthDay:0[1-5]:0[1-7]
     * IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
     * QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
     * Full Regular Expression:
     * ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
     */
    @JsonProperty("Frequency")
    public String frequency;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    /**
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
     * Usage: This amount has to be transported unchanged through the transaction chain.
     */
    @JsonProperty("InstructedAmount")
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiationInstructedAmount instructedAmount;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withInstructedAmount(OBWriteInternationalStandingOrderConsentResponse7DataInitiationInstructedAmount instructedAmount) {
        this.instructedAmount = instructedAmount;
        return this;
    }
    
    /**
     * Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumberOfPayments")
    public String numberOfPayments;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withNumberOfPayments(String numberOfPayments) {
        this.numberOfPayments = numberOfPayments;
        return this;
    }
    
    /**
     * Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
     * The list of valid codes is an external code list published separately.
     * External code sets can be downloaded from www.iso20022.org.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Purpose")
    public String purpose;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withPurpose(String purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
     * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
     * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Reference")
    public String reference;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;

    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
    public OBWriteInternationalStandingOrderConsentResponse7DataInitiation(@JsonProperty("CreditorAccount") OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAccount creditorAccount, @JsonProperty("CurrencyOfTransfer") String currencyOfTransfer, @JsonProperty("FirstPaymentDateTime") OffsetDateTime firstPaymentDateTime, @JsonProperty("Frequency") String frequency, @JsonProperty("InstructedAmount") OBWriteInternationalStandingOrderConsentResponse7DataInitiationInstructedAmount instructedAmount) {
        this.creditorAccount = creditorAccount;
        this.currencyOfTransfer = currencyOfTransfer;
        this.firstPaymentDateTime = firstPaymentDateTime;
        this.frequency = frequency;
        this.instructedAmount = instructedAmount;
  }
}
