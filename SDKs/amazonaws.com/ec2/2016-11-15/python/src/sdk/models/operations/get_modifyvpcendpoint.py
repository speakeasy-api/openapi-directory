"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dnsrecordiptype_enum as shared_dnsrecordiptype_enum
from enum import Enum
from typing import Optional

class GETModifyVpcEndpointActionEnum(str, Enum):
    MODIFY_VPC_ENDPOINT = 'ModifyVpcEndpoint'


@dataclasses.dataclass
class GETModifyVpcEndpointDNSOptions:
    r"""Describes the DNS options for an endpoint."""
    
    dns_record_ip_type: Optional[shared_dnsrecordiptype_enum.DNSRecordIPTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DnsRecordIpType' }})  
    private_dns_only_for_inbound_resolver_endpoint: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PrivateDnsOnlyForInboundResolverEndpoint' }})  
    
class GETModifyVpcEndpointIPAddressTypeEnum(str, Enum):
    r"""The IP address type for the endpoint."""
    IPV4 = 'ipv4'
    DUALSTACK = 'dualstack'
    IPV6 = 'ipv6'

class GETModifyVpcEndpointVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyVpcEndpointRequest:
    
    action: GETModifyVpcEndpointActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETModifyVpcEndpointVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    vpc_endpoint_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'VpcEndpointId', 'style': 'form', 'explode': True }})
    r"""The ID of the endpoint."""  
    add_route_table_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AddRouteTableId', 'style': 'form', 'explode': True }})
    r"""(Gateway endpoint) The IDs of the route tables to associate with the endpoint."""  
    add_security_group_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AddSecurityGroupId', 'style': 'form', 'explode': True }})
    r"""(Interface endpoint) The IDs of the security groups to associate with the network interface."""  
    add_subnet_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AddSubnetId', 'style': 'form', 'explode': True }})
    r"""(Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet."""  
    dns_options: Optional[GETModifyVpcEndpointDNSOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DnsOptions', 'style': 'form', 'explode': True }})
    r"""The DNS options for the endpoint."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    ip_address_type: Optional[GETModifyVpcEndpointIPAddressTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IpAddressType', 'style': 'form', 'explode': True }})
    r"""The IP address type for the endpoint."""  
    policy_document: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PolicyDocument', 'style': 'form', 'explode': True }})
    r"""(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format."""  
    private_dns_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PrivateDnsEnabled', 'style': 'form', 'explode': True }})
    r"""(Interface endpoint) Indicates whether a private hosted zone is associated with the VPC."""  
    remove_route_table_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveRouteTableId', 'style': 'form', 'explode': True }})
    r"""(Gateway endpoint) The IDs of the route tables to disassociate from the endpoint."""  
    remove_security_group_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveSecurityGroupId', 'style': 'form', 'explode': True }})
    r"""(Interface endpoint) The IDs of the security groups to disassociate from the network interface."""  
    remove_subnet_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveSubnetId', 'style': 'form', 'explode': True }})
    r"""(Interface endpoint) The IDs of the subnets from which to remove the endpoint."""  
    reset_policy: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ResetPolicy', 'style': 'form', 'explode': True }})
    r"""(Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyVpcEndpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    