"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dateinterval as shared_dateinterval
from ..shared import reservationaggregates as shared_reservationaggregates
from ..shared import reservationutilizationgroup as shared_reservationutilizationgroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UtilizationByTime:
    r"""The amount of utilization, in hours."""
    
    groups: Optional[list[shared_reservationutilizationgroup.ReservationUtilizationGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Groups'), 'exclude': lambda f: f is None }})  
    time_period: Optional[shared_dateinterval.DateInterval] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimePeriod'), 'exclude': lambda f: f is None }})  
    total: Optional[shared_reservationaggregates.ReservationAggregates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Total'), 'exclude': lambda f: f is None }})  
    