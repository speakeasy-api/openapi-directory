// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeLaunchConfigurationsActionEnum
type POSTDescribeLaunchConfigurationsActionEnum string

const (
	POSTDescribeLaunchConfigurationsActionEnumDescribeLaunchConfigurations POSTDescribeLaunchConfigurationsActionEnum = "DescribeLaunchConfigurations"
)

func (e *POSTDescribeLaunchConfigurationsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeLaunchConfigurations":
		*e = POSTDescribeLaunchConfigurationsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeLaunchConfigurationsActionEnum: %s", s)
	}
}

// POSTDescribeLaunchConfigurationsVersionEnum
type POSTDescribeLaunchConfigurationsVersionEnum string

const (
	POSTDescribeLaunchConfigurationsVersionEnumTwoThousandAndEleven0101 POSTDescribeLaunchConfigurationsVersionEnum = "2011-01-01"
)

func (e *POSTDescribeLaunchConfigurationsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2011-01-01":
		*e = POSTDescribeLaunchConfigurationsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeLaunchConfigurationsVersionEnum: %s", s)
	}
}

type POSTDescribeLaunchConfigurationsRequest struct {
	Action POSTDescribeLaunchConfigurationsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxRecords *string `queryParam:"style=form,explode=true,name=MaxRecords"`
	// Pagination token
	NextToken         *string                                     `queryParam:"style=form,explode=true,name=NextToken"`
	RequestBody       []byte                                      `request:"mediaType=text/xml"`
	Version           POSTDescribeLaunchConfigurationsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeLaunchConfigurationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
