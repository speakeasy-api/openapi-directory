"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetMapVersionNumberStaticimageFormatEnum(str, Enum):
    r"""Image format to be returned"""
    PNG = 'png'
    JPG = 'jpg'
    JPEG = 'jpeg'

class GetMapVersionNumberStaticimageLayerEnum(str, Enum):
    r"""Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em>
    are intended for layering with other data and are only available in <em>png</em> format.
    """
    BASIC = 'basic'
    HYBRID = 'hybrid'
    LABELS = 'labels'

class GetMapVersionNumberStaticimageStyleEnum(str, Enum):
    r"""Map style to be returned"""
    MAIN = 'main'
    NIGHT = 'night'

class GetMapVersionNumberStaticimageVersionNumberEnum(str, Enum):
    r"""Version of the service to call. The current version is 1."""
    ONE = '1'

class GetMapVersionNumberStaticimageViewEnum(str, Enum):
    r"""Geopolitical view. Determines rendering of disputed areas. See the <a href=\\"/maps-api/maps-api-documentation-raster/raster-tile\\">documentation</a> for an explanation of how this works in live services."""
    UNIFIED = 'Unified'
    IN = 'IN'

class GetMapVersionNumberStaticimageZoomEnum(str, Enum):
    r"""Zoom level of map image to be returned."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    THIRTEEN = '13'
    FOURTEEN = '14'
    FIFTEEN = '15'
    SIXTEEN = '16'
    SEVENTEEN = '17'
    EIGHTEEN = '18'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'


@dataclasses.dataclass
class GetMapVersionNumberStaticimageRequest:
    
    version_number: GetMapVersionNumberStaticimageVersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Version of the service to call. The current version is 1."""  
    bbox: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bbox', 'style': 'form', 'explode': True }})
    r"""Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910).
    Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat.
    MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian.
    Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.
    """  
    center: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'center', 'style': 'form', 'explode': True }})
    r"""Coordinates for the center point of the image.
    Must be used with the <strong>width</strong> and
    <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>.
    Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).
    """  
    format: Optional[GetMapVersionNumberStaticimageFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Image format to be returned"""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'height', 'style': 'form', 'explode': True }})
    r"""Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192."""  
    layer: Optional[GetMapVersionNumberStaticimageLayerEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'layer', 'style': 'form', 'explode': True }})
    r"""Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em>
    are intended for layering with other data and are only available in <em>png</em> format.
    """  
    style: Optional[GetMapVersionNumberStaticimageStyleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'style', 'style': 'form', 'explode': True }})
    r"""Map style to be returned"""  
    view: Optional[GetMapVersionNumberStaticimageViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Geopolitical view. Determines rendering of disputed areas. See the <a href=\\"/maps-api/maps-api-documentation-raster/raster-tile\\">documentation</a> for an explanation of how this works in live services."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192."""  
    zoom: Optional[GetMapVersionNumberStaticimageZoomEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zoom', 'style': 'form', 'explode': True }})
    r"""Zoom level of map image to be returned."""  
    

@dataclasses.dataclass
class GetMapVersionNumberStaticimageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    