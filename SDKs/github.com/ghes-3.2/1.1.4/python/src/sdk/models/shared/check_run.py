"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import deployment_simple as shared_deployment_simple
from ..shared import nullable_integration as shared_nullable_integration
from ..shared import pull_request_minimal as shared_pull_request_minimal
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckRunCheckSuite:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    
class CheckRunConclusionEnum(str, Enum):
    SUCCESS = 'success'
    FAILURE = 'failure'
    NEUTRAL = 'neutral'
    CANCELLED = 'cancelled'
    SKIPPED = 'skipped'
    TIMED_OUT = 'timed_out'
    ACTION_REQUIRED = 'action_required'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckRunOutput:
    
    annotations_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations_count') }})  
    annotations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations_url') }})  
    summary: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary') }})  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class CheckRunStatusEnum(str, Enum):
    r"""The phase of the lifecycle that the check is currently in."""
    QUEUED = 'queued'
    IN_PROGRESS = 'in_progress'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckRun:
    r"""A check performed on the code of a given code change"""
    
    app: shared_nullable_integration.NullableIntegration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app') }})
    r"""GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub."""  
    check_suite: CheckRunCheckSuite = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_suite') }})  
    completed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    conclusion: CheckRunConclusionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conclusion') }})  
    details_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details_url') }})  
    external_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_id') }})  
    head_sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_sha') }})
    r"""The SHA of the commit that is being checked."""  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of the check."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the check."""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    output: CheckRunOutput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('output') }})  
    pull_requests: list[shared_pull_request_minimal.PullRequestMinimal] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_requests') }})  
    started_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    status: CheckRunStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The phase of the lifecycle that the check is currently in."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    deployment: Optional[shared_deployment_simple.DeploymentSimple] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment'), 'exclude': lambda f: f is None }})
    r"""A deployment created as the result of an Actions check run from a workflow that references an environment"""  
    