/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CaseExpression } from "./caseexpression";
import { ConcatenateExpression } from "./concatenateexpression";
import { Expose, Type } from "class-transformer";

/**
 * Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).
 */
export class DimensionExpression extends SpeakeasyBase {
  /**
   * Used to combine dimension values to a single dimension.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concatenate" })
  @Type(() => ConcatenateExpression)
  concatenate?: ConcatenateExpression;

  /**
   * Used to convert a dimension value to a single case.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lowerCase" })
  @Type(() => CaseExpression)
  lowerCase?: CaseExpression;

  /**
   * Used to convert a dimension value to a single case.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upperCase" })
  @Type(() => CaseExpression)
  upperCase?: CaseExpression;
}
