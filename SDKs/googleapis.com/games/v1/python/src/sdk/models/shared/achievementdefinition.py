"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AchievementDefinitionAchievementTypeEnum(str, Enum):
    r"""The type of the achievement."""
    ACHIEVEMENT_TYPE_UNSPECIFIED = 'ACHIEVEMENT_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    INCREMENTAL = 'INCREMENTAL'

class AchievementDefinitionInitialStateEnum(str, Enum):
    r"""The initial state of the achievement."""
    INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED = 'INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchievementDefinition:
    r"""An achievement definition object."""
    
    achievement_type: Optional[AchievementDefinitionAchievementTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievementType'), 'exclude': lambda f: f is None }})
    r"""The type of the achievement."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the achievement."""  
    experience_points: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('experiencePoints'), 'exclude': lambda f: f is None }})
    r"""Experience points which will be earned when unlocking this achievement."""  
    formatted_total_steps: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedTotalSteps'), 'exclude': lambda f: f is None }})
    r"""The total steps for an incremental achievement as a string."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the achievement."""  
    initial_state: Optional[AchievementDefinitionInitialStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialState'), 'exclude': lambda f: f is None }})
    r"""The initial state of the achievement."""  
    is_revealed_icon_url_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRevealedIconUrlDefault'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the revealed icon image being returned is a default image, or is provided by the game."""  
    is_unlocked_icon_url_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUnlockedIconUrlDefault'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the unlocked icon image being returned is a default image, or is game-provided."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the achievement."""  
    revealed_icon_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revealedIconUrl'), 'exclude': lambda f: f is None }})
    r"""The image URL for the revealed achievement icon."""  
    total_steps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSteps'), 'exclude': lambda f: f is None }})
    r"""The total steps for an incremental achievement."""  
    unlocked_icon_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlockedIconUrl'), 'exclude': lambda f: f is None }})
    r"""The image URL for the unlocked achievement icon."""  
    