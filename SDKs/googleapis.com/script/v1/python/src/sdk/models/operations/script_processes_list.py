"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import listuserprocessesresponse as shared_listuserprocessesresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ScriptProcessesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ScriptProcessesListUserProcessFilterStatusesEnum(str, Enum):
    PROCESS_STATUS_UNSPECIFIED = 'PROCESS_STATUS_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    COMPLETED = 'COMPLETED'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    UNKNOWN = 'UNKNOWN'
    DELAYED = 'DELAYED'

class ScriptProcessesListUserProcessFilterTypesEnum(str, Enum):
    PROCESS_TYPE_UNSPECIFIED = 'PROCESS_TYPE_UNSPECIFIED'
    ADD_ON = 'ADD_ON'
    EXECUTION_API = 'EXECUTION_API'
    TIME_DRIVEN = 'TIME_DRIVEN'
    TRIGGER = 'TRIGGER'
    WEBAPP = 'WEBAPP'
    EDITOR = 'EDITOR'
    SIMPLE_TRIGGER = 'SIMPLE_TRIGGER'
    MENU = 'MENU'
    BATCH_TASK = 'BATCH_TASK'

class ScriptProcessesListUserProcessFilterUserAccessLevelsEnum(str, Enum):
    USER_ACCESS_LEVEL_UNSPECIFIED = 'USER_ACCESS_LEVEL_UNSPECIFIED'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'
    OWNER = 'OWNER'


@dataclasses.dataclass
class ScriptProcessesListRequest:
    
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The maximum number of returned processes per page of results. Defaults to 50."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    user_process_filter_deployment_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.deploymentId', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those originating from projects with a specific deployment ID."""  
    user_process_filter_end_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.endTime', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those that completed on or before the given timestamp."""  
    user_process_filter_function_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.functionName', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those originating from a script function with the given function name."""  
    user_process_filter_project_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.projectName', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those originating from projects with project names containing a specific string."""  
    user_process_filter_script_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.scriptId', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those originating from projects with a specific script ID."""  
    user_process_filter_start_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.startTime', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those that were started on or after the given timestamp."""  
    user_process_filter_statuses: Optional[list[ScriptProcessesListUserProcessFilterStatusesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.statuses', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those having one of the specified process statuses."""  
    user_process_filter_types: Optional[list[ScriptProcessesListUserProcessFilterTypesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.types', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those having one of the specified process types."""  
    user_process_filter_user_access_levels: Optional[list[ScriptProcessesListUserProcessFilterUserAccessLevelsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProcessFilter.userAccessLevels', 'style': 'form', 'explode': True }})
    r"""Optional field used to limit returned processes to those having one of the specified user access levels."""  
    

@dataclasses.dataclass
class ScriptProcessesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_user_processes_response: Optional[shared_listuserprocessesresponse.ListUserProcessesResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    