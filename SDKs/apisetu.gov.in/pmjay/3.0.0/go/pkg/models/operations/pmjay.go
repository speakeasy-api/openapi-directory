// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PmjaySecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PmjayRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// PMJAY ID
	Udf1 string `json:"UDF1"`
	// State Name
	Udf2 string `json:"UDF2"`
}

// PmjayRequestBodyFormatEnum - The format of the certificate in response.
type PmjayRequestBodyFormatEnum string

const (
	PmjayRequestBodyFormatEnumPdf PmjayRequestBodyFormatEnum = "pdf"
)

func (e PmjayRequestBodyFormatEnum) ToPointer() *PmjayRequestBodyFormatEnum {
	return &e
}

func (e *PmjayRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PmjayRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PmjayRequestBodyFormatEnum: %v", v)
	}
}

// PmjayRequestBody - Request format
type PmjayRequestBody struct {
	CertificateParameters *PmjayRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PmjayRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pmjay504ApplicationJSONErrorEnum string

const (
	Pmjay504ApplicationJSONErrorEnumGatewayTimeout Pmjay504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Pmjay504ApplicationJSONErrorEnum) ToPointer() *Pmjay504ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Pmjay504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay504ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay504ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pmjay504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Pmjay504ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Pmjay504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay504ApplicationJSON - Gateway timeout
type Pmjay504ApplicationJSON struct {
	Error            *Pmjay504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay503ApplicationJSONErrorEnum string

const (
	Pmjay503ApplicationJSONErrorEnumServiceUnavailable Pmjay503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Pmjay503ApplicationJSONErrorEnum) ToPointer() *Pmjay503ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Pmjay503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay503ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay503ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pmjay503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Pmjay503ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Pmjay503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay503ApplicationJSON - Service unavailable
type Pmjay503ApplicationJSON struct {
	Error            *Pmjay503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay502ApplicationJSONErrorEnum string

const (
	Pmjay502ApplicationJSONErrorEnumBadGatewy Pmjay502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Pmjay502ApplicationJSONErrorEnum) ToPointer() *Pmjay502ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Pmjay502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay502ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay502ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pmjay502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Pmjay502ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Pmjay502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay502ApplicationJSON - Bad gateway
type Pmjay502ApplicationJSON struct {
	Error            *Pmjay502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay500ApplicationJSONErrorEnum string

const (
	Pmjay500ApplicationJSONErrorEnumInternalServerError Pmjay500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Pmjay500ApplicationJSONErrorEnum) ToPointer() *Pmjay500ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Pmjay500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay500ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay500ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay500ApplicationJSONErrorDescriptionEnumInternalServerError Pmjay500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Pmjay500ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Pmjay500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay500ApplicationJSON - Internal server error
type Pmjay500ApplicationJSON struct {
	Error            *Pmjay500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay404ApplicationJSONErrorEnum string

const (
	Pmjay404ApplicationJSONErrorEnumRecordNotFound Pmjay404ApplicationJSONErrorEnum = "record_not_found"
	Pmjay404ApplicationJSONErrorEnumURLNotFound    Pmjay404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Pmjay404ApplicationJSONErrorEnum) ToPointer() *Pmjay404ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pmjay404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay404ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay404ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pmjay404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pmjay404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pmjay404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Pmjay404ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pmjay404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay404ApplicationJSON - No record found
type Pmjay404ApplicationJSON struct {
	Error            *Pmjay404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay401ApplicationJSONErrorEnum string

const (
	Pmjay401ApplicationJSONErrorEnumInvalidAuthentication Pmjay401ApplicationJSONErrorEnum = "invalid_authentication"
	Pmjay401ApplicationJSONErrorEnumInvalidAuthorization  Pmjay401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Pmjay401ApplicationJSONErrorEnum) ToPointer() *Pmjay401ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pmjay401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay401ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay401ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pmjay401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pmjay401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pmjay401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Pmjay401ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pmjay401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay401ApplicationJSON - Unauthorized access
type Pmjay401ApplicationJSON struct {
	Error            *Pmjay401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pmjay400ApplicationJSONErrorEnum string

const (
	Pmjay400ApplicationJSONErrorEnumMissingParameter Pmjay400ApplicationJSONErrorEnum = "missing_parameter"
	Pmjay400ApplicationJSONErrorEnumInvalidParameter Pmjay400ApplicationJSONErrorEnum = "invalid_parameter"
	Pmjay400ApplicationJSONErrorEnumInvalidFormat    Pmjay400ApplicationJSONErrorEnum = "invalid_format"
	Pmjay400ApplicationJSONErrorEnumInvalidTxnid     Pmjay400ApplicationJSONErrorEnum = "invalid_txnid"
	Pmjay400ApplicationJSONErrorEnumInvalidConsentid Pmjay400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Pmjay400ApplicationJSONErrorEnum) ToPointer() *Pmjay400ApplicationJSONErrorEnum {
	return &e
}

func (e *Pmjay400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pmjay400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay400ApplicationJSONErrorEnum: %v", v)
	}
}

type Pmjay400ApplicationJSONErrorDescriptionEnum string

const (
	Pmjay400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pmjay400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pmjay400ApplicationJSONErrorDescriptionEnumBadRequest                              Pmjay400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pmjay400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pmjay400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pmjay400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pmjay400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pmjay400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pmjay400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Pmjay400ApplicationJSONErrorDescriptionEnum) ToPointer() *Pmjay400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pmjay400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pmjay400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pmjay400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pmjay400ApplicationJSON - Bad request
type Pmjay400ApplicationJSON struct {
	Error            *Pmjay400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pmjay400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PmjayResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pmjay400ApplicationJSONObject *Pmjay400ApplicationJSON
	// Unauthorized access
	Pmjay401ApplicationJSONObject *Pmjay401ApplicationJSON
	// No record found
	Pmjay404ApplicationJSONObject *Pmjay404ApplicationJSON
	// Internal server error
	Pmjay500ApplicationJSONObject *Pmjay500ApplicationJSON
	// Bad gateway
	Pmjay502ApplicationJSONObject *Pmjay502ApplicationJSON
	// Service unavailable
	Pmjay503ApplicationJSONObject *Pmjay503ApplicationJSON
	// Gateway timeout
	Pmjay504ApplicationJSONObject *Pmjay504ApplicationJSON
}
