/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Image } from "./image";
import { Expose, Type } from "class-transformer";

/**
 * whether a tag has been pushed to or pulled in the past month
 */
export enum TagStatusEnum {
  Active = "active",
  Inactive = "inactive",
}

/**
 * repository tag
 */
export class Tag extends SpeakeasyBase {
  /**
   * ID of the user that pushed the tag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creator" })
  creator?: number;

  /**
   * compressed size (sum of all layers) of the tagged image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "full_size" })
  fullSize?: number;

  /**
   * tag ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "images" })
  @Type(() => Image)
  images?: Image;

  /**
   * datetime of last update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_updated" })
  lastUpdated?: string;

  /**
   * ID of the last user that updated the tag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_updater" })
  lastUpdater?: number;

  /**
   * Hub username of the user that updated the tag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_updater_username" })
  lastUpdaterUsername?: string;

  /**
   * name of the tag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * repository ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  repository?: number;

  /**
   * whether a tag has been pushed to or pulled in the past month
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: TagStatusEnum;

  /**
   * datetime of last pull
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag_last_pulled" })
  tagLastPulled?: string;

  /**
   * datetime of last push
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag_last_pushed" })
  tagLastPushed?: string;

  /**
   * repository API version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "v2" })
  v2?: string;
}
