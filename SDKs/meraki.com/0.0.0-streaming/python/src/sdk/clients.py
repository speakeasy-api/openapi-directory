"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Clients:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_device_clients(self, request: operations.GetDeviceClientsRequest) -> operations.GetDeviceClientsResponse:
        r"""List the clients of a device, up to a maximum of a month ago
        List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceClientsRequest, base_url, '/devices/{serial}/clients', request)
        
        query_params = utils.get_query_params(operations.GetDeviceClientsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_device_clients_200_application_json_objects = out

        return res

    def get_network_client(self, request: operations.GetNetworkClientRequest) -> operations.GetNetworkClientResponse:
        r"""Return the client associated with the given identifier
        Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientRequest, base_url, '/networks/{networkId}/clients/{clientId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_client_200_application_json_object = out

        return res

    def get_network_client_events(self, request: operations.GetNetworkClientEventsRequest) -> operations.GetNetworkClientEventsResponse:
        r"""Return the events associated with this client
        Return the events associated with this client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientEventsRequest, base_url, '/networks/{networkId}/clients/{clientId}/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_client_events_200_application_json_objects = out

        return res

    def get_network_client_latency_history(self, request: operations.GetNetworkClientLatencyHistoryRequest) -> operations.GetNetworkClientLatencyHistoryResponse:
        r"""Return the latency history for a client
        Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientLatencyHistoryRequest, base_url, '/networks/{networkId}/clients/{clientId}/latencyHistory', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientLatencyHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientLatencyHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_client_latency_history_200_application_json_objects = out

        return res

    def get_network_client_policy(self, request: operations.GetNetworkClientPolicyRequest) -> operations.GetNetworkClientPolicyResponse:
        r"""Return the policy assigned to a client on the network
        Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientPolicyRequest, base_url, '/networks/{networkId}/clients/{clientId}/policy', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_client_policy_200_application_json_object = out

        return res

    def get_network_client_splash_authorization_status(self, request: operations.GetNetworkClientSplashAuthorizationStatusRequest) -> operations.GetNetworkClientSplashAuthorizationStatusResponse:
        r"""Return the splash authorization for a client, for each SSID they've associated with through splash
        Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientSplashAuthorizationStatusRequest, base_url, '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientSplashAuthorizationStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_client_splash_authorization_status_200_application_json_object = out

        return res

    def get_network_client_usage_history(self, request: operations.GetNetworkClientUsageHistoryRequest) -> operations.GetNetworkClientUsageHistoryResponse:
        r"""Return the client's daily usage history
        Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientUsageHistoryRequest, base_url, '/networks/{networkId}/clients/{clientId}/usageHistory', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientUsageHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_client_usage_history_200_application_json_objects = out

        return res

    def get_network_clients(self, request: operations.GetNetworkClientsRequest) -> operations.GetNetworkClientsResponse:
        r"""List the clients that have used this network in the timespan
        List the clients that have used this network in the timespan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientsRequest, base_url, '/networks/{networkId}/clients', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkClients200ApplicationJSON])
                res.get_network_clients_200_application_json_object = out

        return res

    def provision_network_clients(self, request: operations.ProvisionNetworkClientsRequest) -> operations.ProvisionNetworkClientsResponse:
        r"""Provisions a client with a name and policy
        Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProvisionNetworkClientsRequest, base_url, '/networks/{networkId}/clients/provision', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProvisionNetworkClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.provision_network_clients_201_application_json_object = out

        return res

    def update_network_client_policy(self, request: operations.UpdateNetworkClientPolicyRequest) -> operations.UpdateNetworkClientPolicyResponse:
        r"""Update the policy assigned to a client on the network
        Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkClientPolicyRequest, base_url, '/networks/{networkId}/clients/{clientId}/policy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkClientPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_client_policy_200_application_json_object = out

        return res

    def update_network_client_splash_authorization_status(self, request: operations.UpdateNetworkClientSplashAuthorizationStatusRequest) -> operations.UpdateNetworkClientSplashAuthorizationStatusResponse:
        r"""Update a client's splash authorization
        Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkClientSplashAuthorizationStatusRequest, base_url, '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkClientSplashAuthorizationStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_client_splash_authorization_status_200_application_json_object = out

        return res

    