"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Fields:
    r"""Field data endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fetch_all_fields(self, request: operations.FetchAllFieldsRequest, security: operations.FetchAllFieldsSecurity) -> operations.FetchAllFieldsResponse:
        r"""Retrieve list of all Fields the user has access to.
        Retrieve all fields the authenticated user has access to, including fields shared with the authenticated user from other resource owners. Filter the results by field name if the `fieldName` query parameter is specified.
        A 409 will be returned if the X-Next-Token has expired. When receiving a 409, the client should discard the X-Next-Token, discard all currently persisted fields for the user, and re-fetch fields from /fields/all.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/fields/all'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FetchAllFieldsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAllFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Fields])
                res.fields_ = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 409, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def fetch_field_by_id(self, request: operations.FetchFieldByIDRequest, security: operations.FetchFieldByIDSecurity) -> operations.FetchFieldByIDResponse:
        r"""Retrieve a specific Field by ID
        Retrieve a given **Field** by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchFieldByIDRequest, base_url, '/v4/fields/{fieldId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFieldByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Field])
                res.field = out
        elif http_res.status_code in [400, 401, 403, 404, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def fetch_fields(self, request: operations.FetchFieldsRequest, security: operations.FetchFieldsSecurity) -> operations.FetchFieldsResponse:
        r"""Retrieve list of Fields
        Retrieve list of **Fields**. Filter the results by field name if the `fieldName` query parameter is specified.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/fields'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FetchFieldsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Fields])
                res.fields_ = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    