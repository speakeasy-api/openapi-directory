"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource."""  
    avg_task_acceptance_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_task_acceptance_time'), 'exclude': lambda f: f is None }})
    r"""The average time in seconds between Task creation and acceptance."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""  
    reservations_accepted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_accepted'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations accepted by Workers."""  
    reservations_canceled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_canceled'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations that were canceled."""  
    reservations_created: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_created'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations that were created for Workers."""  
    reservations_rejected: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_rejected'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations that were rejected."""  
    reservations_rescinded: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_rescinded'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations that were rescinded."""  
    reservations_timed_out: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations_timed_out'), 'exclude': lambda f: f is None }})
    r"""The total number of Reservations that were timed out."""  
    split_by_wait_time: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('split_by_wait_time'), 'exclude': lambda f: f is None }})
    r"""A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""  
    tasks_canceled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_canceled'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that were canceled."""  
    tasks_completed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_completed'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that were completed."""  
    tasks_deleted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_deleted'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that were deleted."""  
    tasks_entered: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_entered'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that entered the Workflow."""  
    tasks_moved: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_moved'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that were moved from one queue to another."""  
    tasks_timed_out_in_workflow: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_timed_out_in_workflow'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks that were timed out of their Workflows (and deleted)."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The absolute URL of the Workflow statistics resource."""  
    wait_duration_until_accepted: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wait_duration_until_accepted'), 'exclude': lambda f: f is None }})
    r"""The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were accepted."""  
    wait_duration_until_canceled: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wait_duration_until_canceled'), 'exclude': lambda f: f is None }})
    r"""The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were canceled."""  
    workflow_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_sid'), 'exclude': lambda f: f is None }})
    r"""Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value."""  
    workspace_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workspace_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the Workspace that contains the Workflow."""  
    