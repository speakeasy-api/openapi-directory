/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PublicAdvertisedPrefixPublicDelegatedPrefix } from "./publicadvertisedprefixpublicdelegatedprefix";
import { Expose, Type } from "class-transformer";

/**
 * The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed.
 */
export enum PublicAdvertisedPrefixStatusEnum {
  Initial = "INITIAL",
  PrefixConfigurationComplete = "PREFIX_CONFIGURATION_COMPLETE",
  PrefixConfigurationInProgress = "PREFIX_CONFIGURATION_IN_PROGRESS",
  PrefixRemovalInProgress = "PREFIX_REMOVAL_IN_PROGRESS",
  PtrConfigured = "PTR_CONFIGURED",
  ReverseDnsLookupFailed = "REVERSE_DNS_LOOKUP_FAILED",
  Validated = "VALIDATED",
}

/**
 * A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet.
 */
export class PublicAdvertisedPrefix extends SpeakeasyBase {
  /**
   * [Output Only] Creation timestamp in RFC3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The IPv4 address to be used for reverse DNS verification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dnsVerificationIp" })
  dnsVerificationIp?: string;

  /**
   * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * [Output Only] The unique identifier for the resource type. The server generates this identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The IPv4 address range, in CIDR format, represented by this public advertised prefix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipCidrRange" })
  ipCidrRange?: string;

  /**
   * [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * [Output Only] The list of public delegated prefixes that exist for this public advertised prefix.
   */
  @SpeakeasyMetadata({ elemType: PublicAdvertisedPrefixPublicDelegatedPrefix })
  @Expose({ name: "publicDelegatedPrefixs" })
  @Type(() => PublicAdvertisedPrefixPublicDelegatedPrefix)
  publicDelegatedPrefixs?: PublicAdvertisedPrefixPublicDelegatedPrefix[];

  /**
   * [Output Only] Server-defined URL for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * [Output Only] The shared secret to be used for reverse DNS verification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sharedSecret" })
  sharedSecret?: string;

  /**
   * The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PublicAdvertisedPrefixStatusEnum;
}
