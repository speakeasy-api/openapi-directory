<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * KeysAndAttributes - <p>Represents a set of primary keys and, for each key, the attributes to retrieve from the table.</p> <p>For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide <i>both</i> the partition key and the sort key.</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class KeysAndAttributes
{
    /**
     * $attributesToGet
     * 
     * @var ?array<string> $attributesToGet
     */
	#[\JMS\Serializer\Annotation\SerializedName('AttributesToGet')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $attributesToGet = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ConsistentRead')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $consistentRead = null;
    
    /**
     * $expressionAttributeNames
     * 
     * @var ?array<string, string> $expressionAttributeNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('ExpressionAttributeNames')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $expressionAttributeNames = null;
    
    /**
     * $keys
     * 
     * @var array<array<string, \OpenAPI\OpenAPI\Models\Shared\AttributeValue>> $keys
     */
	#[\JMS\Serializer\Annotation\SerializedName('Keys')]
    #[\JMS\Serializer\Annotation\Type('array<array<string, OpenAPI\OpenAPI\Models\Shared\AttributeValue>>')]
    public array $keys;
    
	#[\JMS\Serializer\Annotation\SerializedName('ProjectionExpression')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $projectionExpression = null;
    
	public function __construct()
	{
		$this->attributesToGet = null;
		$this->consistentRead = null;
		$this->expressionAttributeNames = null;
		$this->keys = [];
		$this->projectionExpression = null;
	}
}
