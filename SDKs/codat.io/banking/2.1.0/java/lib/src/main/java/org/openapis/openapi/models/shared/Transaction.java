/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transaction - The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 * 
 * View the coverage for banking transactions in the [Data Coverage Explorer](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&amp;dataType=banking-transactions).
 */
public class Transaction {
    /**
     * The unique identifier of the bank account.
     */
    @JsonProperty("accountId")
    public String accountId;

    public Transaction withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The amount of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public Transaction withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedDate")
    public String authorizedDate;

    public Transaction withAuthorizedDate(String authorizedDate) {
        this.authorizedDate = authorizedDate;
        return this;
    }
    
    /**
     * Code to identify the underlying transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public TransactionCodeEnum code;

    public Transaction withCode(TransactionCodeEnum code) {
        this.code = code;
        return this;
    }
    
    /**
     * The currency of the bank transaction.
     */
    @JsonProperty("currency")
    public String currency;

    public Transaction withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The description of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Transaction withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The unique identifier of the bank transaction.
     */
    @JsonProperty("id")
    public String id;

    public Transaction withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantName")
    public String merchantName;

    public Transaction withMerchantName(String merchantName) {
        this.merchantName = merchantName;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    public String modifiedDate;

    public Transaction withModifiedDate(String modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postedDate")
    public String postedDate;

    public Transaction withPostedDate(String postedDate) {
        this.postedDate = postedDate;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    public String sourceModifiedDate;

    public Transaction withSourceModifiedDate(String sourceModifiedDate) {
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }
    
    /**
     * An object of bank transaction category reference data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCategoryRef")
    public TransactionCategoryRef transactionCategoryRef;

    public Transaction withTransactionCategoryRef(TransactionCategoryRef transactionCategoryRef) {
        this.transactionCategoryRef = transactionCategoryRef;
        return this;
    }
    
    public Transaction(@JsonProperty("accountId") String accountId, @JsonProperty("currency") String currency, @JsonProperty("id") String id) {
        this.accountId = accountId;
        this.currency = currency;
        this.id = id;
  }
}
