"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class WebinarUpdateMultipartSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""
    MINUS_1 = '-1'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'

class WebinarUpdateMultipartFormDataRecurrenceTypeEnum(str, Enum):
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""
    ONE = '1'
    TWO = '2'
    THREE = '3'

class WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum(str, Enum):
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateMultipartFormDataRecurrence:
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""
    
    type: WebinarUpdateMultipartFormDataRecurrenceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \\"end_times\\".)"""  
    end_times: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_times'), 'exclude': lambda f: f is None }})
    r"""Select how many times the meeting should recur before it is canceled. (Cannot be used with \\"end_date_time\\".)"""  
    monthly_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
    
    For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
    """  
    monthly_week: Optional[WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""  
    monthly_week_day: Optional[WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    repeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_interval'), 'exclude': lambda f: f is None }})
    r"""Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
    
    For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
    """  
    weekly_days: Optional[WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly_days'), 'exclude': lambda f: f is None }})
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateMultipartFormDataTrackingFields:
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Tracking fields type"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Tracking fields value"""  
    
class WebinarUpdateMultipartFormDataTypeEnum1(str, Enum):
    r"""Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time."""
    FIVE = '5'
    SIX = '6'
    NINE = '9'


@dataclasses.dataclass
class WebinarUpdateMultipartFormData3:
    r"""Base webinar object for sessions."""
    
    agenda: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'agenda' }})
    r"""Webinar description."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'duration' }})
    r"""Webinar duration (minutes). Used for scheduled webinar only."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password' }})
    r"""[Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.
    
    **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. 
    
    If \"**Require a passcode when scheduling new meetings**\" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
    """  
    recurrence: Optional[WebinarUpdateMultipartFormDataRecurrence] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'recurrence', 'json': True }})
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""  
    settings: Optional[Any] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'settings', 'json': True }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'start_time' }})
    r"""Webinar start time, in the format \\"yyyy-MM-dd'T'HH:mm:ss'Z'.\\" Should be in GMT time. In the format \\"yyyy-MM-dd'T'HH:mm:ss.\\" This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'timezone' }})
    r"""Time zone to format start_time. For example, \\"America/Los_Angeles\\". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'topic' }})
    r"""Webinar topic."""  
    tracking_fields: Optional[list[WebinarUpdateMultipartFormDataTrackingFields]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'tracking_fields', 'json': True }})
    r"""Tracking fields"""  
    type: Optional[WebinarUpdateMultipartFormDataTypeEnum1] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'type' }})
    r"""Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time."""  
    

@dataclasses.dataclass
class WebinarUpdateMultipartRequest:
    
    request_body: WebinarUpdateMultipartFormData3 = dataclasses.field(metadata={'request': { 'media_type': 'multipart/form-data' }})
    r"""Webinar."""  
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}"""  
    

@dataclasses.dataclass
class WebinarUpdateMultipartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    