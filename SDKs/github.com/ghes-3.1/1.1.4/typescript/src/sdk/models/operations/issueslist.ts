/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
 */
export enum IssuesListFilterEnum {
  Assigned = "assigned",
  Created = "created",
  Mentioned = "mentioned",
  Subscribed = "subscribed",
  Repos = "repos",
  All = "all",
}

/**
 * What to sort results by. Can be either `created`, `updated`, `comments`.
 */
export enum IssuesListSortEnum {
  Created = "created",
  Updated = "updated",
  Comments = "comments",
}

/**
 * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
 */
export enum IssuesListStateEnum {
  Open = "open",
  Closed = "closed",
  All = "all",
}

export class IssuesListRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=collab",
  })
  collab?: boolean;

  /**
   * The direction to sort the results by.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: shared.DirectionEnum;

  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: IssuesListFilterEnum;

  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=labels",
  })
  labels?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=orgs" })
  orgs?: boolean;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=owned" })
  owned?: boolean;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=pulls" })
  pulls?: boolean;

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=since;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  since?: Date;

  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: IssuesListSortEnum;

  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: IssuesListStateEnum;
}

export class IssuesListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Issue })
  issues?: shared.Issue[];

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
