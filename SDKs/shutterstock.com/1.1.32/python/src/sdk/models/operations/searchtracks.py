"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import audiosearchresults as shared_audiosearchresults
from ..shared import security as shared_security
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class SearchTracksSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class SearchTracksLibraryEnum(str, Enum):
    r"""Which library to search"""
    SHUTTERSTOCK = 'shutterstock'
    PREMIER = 'premier'

class SearchTracksSortEnum(str, Enum):
    r"""Sort by"""
    SCORE = 'score'
    RANKING_ALL = 'ranking_all'
    ARTIST = 'artist'
    TITLE = 'title'
    BPM = 'bpm'
    FRESHNESS = 'freshness'
    DURATION = 'duration'

class SearchTracksSortOrderEnum(str, Enum):
    r"""Sort order"""
    ASC = 'asc'
    DESC = 'desc'

class SearchTracksViewEnum(str, Enum):
    r"""Amount of detail to render in the response"""
    MINIMAL = 'minimal'
    FULL = 'full'


@dataclasses.dataclass
class SearchTracksRequest:
    
    artists: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'artists', 'style': 'form', 'explode': True }})
    r"""Show tracks with one of the specified artist names or IDs"""  
    bpm: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bpm', 'style': 'form', 'explode': True }})
    r"""(Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute"""  
    bpm_from: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bpm_from', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified beats per minute or faster"""  
    bpm_to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bpm_to', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified beats per minute or slower"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified duration in seconds"""  
    duration_from: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_from', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified duration or longer in seconds"""  
    duration_to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_to', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified duration or shorter in seconds"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Fields to display in the response; see the documentation for the fields parameter in the overview section"""  
    genre: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'genre', 'style': 'form', 'explode': True }})
    r"""Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`"""  
    instruments: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'instruments', 'style': 'form', 'explode': True }})
    r"""Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`"""  
    is_instrumental: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_instrumental', 'style': 'form', 'explode': True }})
    r"""Show instrumental music only"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Which language to search in"""  
    library: Optional[SearchTracksLibraryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'library', 'style': 'form', 'explode': True }})
    r"""Which library to search"""  
    moods: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'moods', 'style': 'form', 'explode': True }})
    r"""Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""One or more search terms separated by spaces"""  
    sort: Optional[SearchTracksSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by"""  
    sort_order: Optional[SearchTracksSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_order', 'style': 'form', 'explode': True }})
    r"""Sort order"""  
    view: Optional[SearchTracksViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Amount of detail to render in the response"""  
    vocal_description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vocal_description', 'style': 'form', 'explode': True }})
    r"""Show tracks with the specified vocal description (male, female)"""  
    

@dataclasses.dataclass
class SearchTracksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    audio_search_results: Optional[shared_audiosearchresults.AudioSearchResults] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    