/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * POST parameters
 */
export class GroupCallParameters extends SpeakeasyBase {
  /**
   * Fully qualified URL which will provide the RestXML once the call connects
   */
  @SpeakeasyMetadata({ data: "form, name=AnswerUrl" })
  answerUrl: string;

  /**
   * Caller Name to be set for the call
   */
  @SpeakeasyMetadata({ data: "form, name=CallerName" })
  callerName?: string;

  /**
   * DTMF tone the called party must send to accept the call
   */
  @SpeakeasyMetadata({ data: "form, name=ConfirmKey" })
  confirmKey?: string;

  /**
   * Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
   */
  @SpeakeasyMetadata({ data: "form, name=ConfirmSound" })
  confirmSound?: string;

  /**
   * Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
   */
  @SpeakeasyMetadata({ data: "form, name=CoreUUID" })
  coreUUID?: string;

  /**
   * Any character, except `/` and `,`, which will be used as a separator within several parameters
   */
  @SpeakeasyMetadata({ data: "form, name=Delimiter" })
  delimiter: string;

  /**
   * Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
   */
  @SpeakeasyMetadata({ data: "form, name=ExtraDialString" })
  extraDialString?: string;

  /**
   * Phone number to be used as Caller ID
   */
  @SpeakeasyMetadata({ data: "form, name=From" })
  from: string;

  /**
   * List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
   */
  @SpeakeasyMetadata({ data: "form, name=GatewayCodecs" })
  gatewayCodecs?: string;

  /**
   * List of maximum retry counts for each gateway
   */
  @SpeakeasyMetadata({ data: "form, name=GatewayRetries" })
  gatewayRetries?: string;

  /**
   * List of maximum timeout amounts (in seconds) for each gateway
   */
  @SpeakeasyMetadata({ data: "form, name=GatewayTimeouts" })
  gatewayTimeouts?: string;

  /**
   * Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
   */
  @SpeakeasyMetadata({ data: "form, name=Gateways" })
  gateways: string;

  /**
   * Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
   */
  @SpeakeasyMetadata({ data: "form, name=HangupOnRing" })
  hangupOnRing?: number;

  /**
   * Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
   */
  @SpeakeasyMetadata({ data: "form, name=HangupUrl" })
  hangupUrl?: string;

  /**
   * Comma separated reject causes
   */
  @SpeakeasyMetadata({ data: "form, name=RejectCauses" })
  rejectCauses?: string;

  /**
   * Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
   */
  @SpeakeasyMetadata({ data: "form, name=RingUrl" })
  ringUrl?: string;

  /**
   * DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
   */
  @SpeakeasyMetadata({ data: "form, name=SendDigits" })
  sendDigits?: string;

  /**
   * When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
   */
  @SpeakeasyMetadata({ data: "form, name=SendOnPreanswer" })
  sendOnPreanswer?: boolean;

  /**
   * Schedules the call's hangup at a given time offset (in seconds) after the call is answered
   */
  @SpeakeasyMetadata({ data: "form, name=TimeLimit" })
  timeLimit?: number;

  /**
   * Phone number to be called
   */
  @SpeakeasyMetadata({ data: "form, name=To" })
  to: string;
}
