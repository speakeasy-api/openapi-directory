<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Requests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete all requests in journal
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsResponse
     */
	public function deleteAdminRequests(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete request by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdResponse
     */
	public function deleteAdminRequestsRequestId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAdminRequestsRequestIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get all requests in journal
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsResponse
     */
	public function getAdminRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find unmatched requests
     * 
     * Get details of logged requests that weren't matched by any stub mapping
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsUnmatchedResponse
     */
	public function getAdminRequestsUnmatched(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsUnmatchedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/unmatched');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsUnmatchedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get request by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdResponse
     */
	public function getAdminRequestsRequestId(
        \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminRequestsRequestIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Count requests by criteria
     * 
     * Count requests logged in the journal matching the specified criteria
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCountRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCountResponse
     */
	public function postAdminRequestsCount(
        \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCountRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/count');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAdminRequestsCount200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsCount200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find requests by criteria
     * 
     * Retrieve details of requests logged in the journal matching the specified criteria
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsFindRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsFindResponse
     */
	public function postAdminRequestsFind(
        \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsFindRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsFindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/find');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsFindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Remove requests by criteria
     * 
     * Removed requests logged in the journal matching the specified criteria
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveResponse
     */
	public function postAdminRequestsRemove(
        \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/remove');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete requests mappings matching metadata
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveByMetadataResponse
     */
	public function postAdminRequestsRemoveByMetadata(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveByMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/remove-by-metadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsRemoveByMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Empty the request journal
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsResetResponse
     */
	public function postAdminRequestsReset(
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/requests/reset');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminRequestsResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}