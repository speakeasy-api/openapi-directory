"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitykey as shared_entitykey
from ..shared import transitivemembershiprole as shared_transitivemembershiprole
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MemberRelationRelationTypeEnum(str, Enum):
    r"""The relation between the group and the transitive member."""
    RELATION_TYPE_UNSPECIFIED = 'RELATION_TYPE_UNSPECIFIED'
    DIRECT = 'DIRECT'
    INDIRECT = 'INDIRECT'
    DIRECT_AND_INDIRECT = 'DIRECT_AND_INDIRECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberRelation:
    r"""Message representing a transitive membership of a group."""
    
    member: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member'), 'exclude': lambda f: f is None }})
    r"""Resource name for this member."""  
    preferred_member_key: Optional[list[shared_entitykey.EntityKey]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredMemberKey'), 'exclude': lambda f: f is None }})
    r"""Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace."""  
    relation_type: Optional[MemberRelationRelationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationType'), 'exclude': lambda f: f is None }})
    r"""The relation between the group and the transitive member."""  
    roles: Optional[list[shared_transitivemembershiprole.TransitiveMembershipRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""The membership role details (i.e name of role and expiry time)."""  
    