// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StoreReleasesGetRealTimeStatusByReleaseIDSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type StoreReleasesGetRealTimeStatusByReleaseIDPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The id of the release
	ReleaseID float64 `pathParam:"style=simple,explode=false,name=release_id"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasesGetRealTimeStatusByReleaseIDRequest struct {
	PathParams StoreReleasesGetRealTimeStatusByReleaseIDPathParams
	Security   StoreReleasesGetRealTimeStatusByReleaseIDSecurity
}

type StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum string

const (
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumBadRequest          StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumConflict            StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumNotFound            StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumInternalServerError StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSON - Error
type StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSON struct {
	Code    StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                                                  `json:"message"`
}

// StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSONStatus - Status Data from store
type StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSONStatus struct {
	// status from store
	Status *string `json:"status,omitempty"`
	// store type
	Storetype *string `json:"storetype,omitempty"`
	// track information from store
	Track *string `json:"track,omitempty"`
	// version of the app from store
	Version *string `json:"version,omitempty"`
}

// StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSON - status of the app from store
type StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSON struct {
	// app id
	AppID *string `json:"app_id,omitempty"`
	// release id
	ReleaseID *string `json:"release_id,omitempty"`
	// Status Data from store
	Status *StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSONStatus `json:"status,omitempty"`
}

type StoreReleasesGetRealTimeStatusByReleaseIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSONObject *StoreReleasesGetRealTimeStatusByReleaseID200ApplicationJSON
	// Error
	StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSONObject *StoreReleasesGetRealTimeStatusByReleaseIDDefaultApplicationJSON
}
