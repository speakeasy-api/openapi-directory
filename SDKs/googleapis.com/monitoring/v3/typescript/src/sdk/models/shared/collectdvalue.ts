/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TypedValue } from "./typedvalue";
import { Expose, Type } from "class-transformer";

/**
 * The type of measurement.
 */
export enum CollectdValueDataSourceTypeEnum {
  UnspecifiedDataSourceType = "UNSPECIFIED_DATA_SOURCE_TYPE",
  Gauge = "GAUGE",
  Counter = "COUNTER",
  Derive = "DERIVE",
  Absolute = "ABSOLUTE",
}

/**
 * A single data point from a collectd-based plugin.
 */
export class CollectdValue extends SpeakeasyBase {
  /**
   * The data source for the collectd value. For example, there are two data sources for network measurements: "rx" and "tx".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataSourceName" })
  dataSourceName?: string;

  /**
   * The type of measurement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataSourceType" })
  dataSourceType?: CollectdValueDataSourceTypeEnum;

  /**
   * A single strongly-typed value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(() => TypedValue)
  value?: TypedValue;
}
