/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.
 */
export enum UpdateNetworkSwitchAccessControlListsRequestBodyRulesIpVersionEnum {
  Any = "any",
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * 'allow' or 'deny' traffic specified by this rule.
 */
export enum UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum {
  Allow = "allow",
  Deny = "deny",
}

/**
 * The type of protocol (must be 'tcp', 'udp', or 'any').
 */
export enum UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum {
  Any = "any",
  Tcp = "tcp",
  Udp = "udp",
}

export class UpdateNetworkSwitchAccessControlListsRequestBodyRules extends SpeakeasyBase {
  /**
   * Description of the rule (optional).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * Destination IP address (in IP or CIDR notation) or 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dstCidr" })
  dstCidr: string;

  /**
   * Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dstPort" })
  dstPort?: string;

  /**
   * IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipVersion" })
  ipVersion?: UpdateNetworkSwitchAccessControlListsRequestBodyRulesIpVersionEnum;

  /**
   * 'allow' or 'deny' traffic specified by this rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy: UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum;

  /**
   * The type of protocol (must be 'tcp', 'udp', or 'any').
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum;

  /**
   * Source IP address (in IP or CIDR notation) or 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "srcCidr" })
  srcCidr: string;

  /**
   * Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "srcPort" })
  srcPort?: string;

  /**
   * Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: string;
}

export class UpdateNetworkSwitchAccessControlListsRequestBody extends SpeakeasyBase {
  /**
   * An ordered array of the access control list rules (not including the default rule). An empty array will clear the rules.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkSwitchAccessControlListsRequestBodyRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkSwitchAccessControlListsRequestBodyRules)
  rules: UpdateNetworkSwitchAccessControlListsRequestBodyRules[];
}

export class UpdateNetworkSwitchAccessControlListsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkSwitchAccessControlListsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * IP address version
 */
export enum UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesIpVersionEnum {
  Any = "any",
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * 'allow' or 'deny' traffic specified by this rule
 */
export enum UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum {
  Allow = "allow",
  Deny = "deny",
}

/**
 * The type of protocol
 */
export enum UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum {
  Any = "any",
  Tcp = "tcp",
  Udp = "udp",
}

export class UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules extends SpeakeasyBase {
  /**
   * Description of the rule (optional)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * Destination IP address (in IP or CIDR notation)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dstCidr" })
  dstCidr?: string;

  /**
   * Destination port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dstPort" })
  dstPort?: string;

  /**
   * IP address version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipVersion" })
  ipVersion?: UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesIpVersionEnum;

  /**
   * 'allow' or 'deny' traffic specified by this rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy?: UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum;

  /**
   * The type of protocol
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum;

  /**
   * Source IP address (in IP or CIDR notation)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "srcCidr" })
  srcCidr?: string;

  /**
   * Source port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "srcPort" })
  srcPort?: string;

  /**
   * ncoming traffic VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: string;
}

/**
 * Successful operation
 */
export class UpdateNetworkSwitchAccessControlLists200ApplicationJSON extends SpeakeasyBase {
  /**
   * An ordered array of the access control list rules
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules)
  rules?: UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules[];
}

export class UpdateNetworkSwitchAccessControlListsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkSwitchAccessControlLists200ApplicationJSONObject?: UpdateNetworkSwitchAccessControlLists200ApplicationJSON;
}
