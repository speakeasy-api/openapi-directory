/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class CreateComponentTypeRequestBody extends SpeakeasyBase {
  /**
   * A friendly name for the component type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeName" })
  componentTypeName?: string;

  /**
   * The description of the component type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Specifies the parent component type to extend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extendsFrom" })
  extendsFrom?: string[];

  /**
   * An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
   */
  @SpeakeasyMetadata({ elemType: shared.FunctionRequest })
  @Expose({ name: "functions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.FunctionRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.FunctionRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  functions?: Record<string, shared.FunctionRequest>;

  /**
   * A Boolean value that specifies whether an entity can have more than one component of this type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSingleton" })
  isSingleton?: boolean;

  /**
   * An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
   */
  @SpeakeasyMetadata({ elemType: shared.PropertyDefinitionRequest })
  @Expose({ name: "propertyDefinitions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.PropertyDefinitionRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.PropertyDefinitionRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyDefinitions?: Record<string, shared.PropertyDefinitionRequest>;

  /**
   * <p/>
   */
  @SpeakeasyMetadata({ elemType: shared.PropertyGroupRequest })
  @Expose({ name: "propertyGroups" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.PropertyGroupRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.PropertyGroupRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyGroups?: Record<string, shared.PropertyGroupRequest>;

  /**
   * Metadata that you can use to manage the component type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateComponentTypeRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateComponentTypeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the component type.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=componentTypeId",
  })
  componentTypeId: string;

  /**
   * The ID of the workspace that contains the component type.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspaceId",
  })
  workspaceId: string;
}

export class CreateComponentTypeResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createComponentTypeResponse?: shared.CreateComponentTypeResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
