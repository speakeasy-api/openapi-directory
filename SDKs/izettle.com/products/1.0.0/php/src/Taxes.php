<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Taxes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new tax rates
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TaxRatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaxRatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaxRatesResponse
     */
	public function createTaxRates(
        \OpenAPI\OpenAPI\Models\Shared\TaxRatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTaxRatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaxRatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaxRatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxRatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxRatesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Delete a single tax rate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateResponse
     */
	public function deleteTaxRate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/{taxRateUuid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTaxRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all tax rates and a count of products associated with each
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductCountForAllTaxesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductCountForAllTaxesResponse
     */
	public function getProductCountForAllTaxes(
        \OpenAPI\OpenAPI\Models\Operations\GetProductCountForAllTaxesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductCountForAllTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/count');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductCountForAllTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxRateProductCountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxRateProductCountResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get a single tax rate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaxRateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaxRateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaxRateResponse
     */
	public function getTaxRate(
        \OpenAPI\OpenAPI\Models\Operations\GetTaxRateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTaxRateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaxRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/{taxRateUuid}', \OpenAPI\OpenAPI\Models\Operations\GetTaxRateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaxRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxRate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxRate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all available tax rates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaxRatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaxRatesResponse
     */
	public function getTaxRates(
        \OpenAPI\OpenAPI\Models\Operations\GetTaxRatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaxRatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaxRatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxRatesResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TaxRatesResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get the organization tax settings 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaxSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaxSettingsResponse
     */
	public function getTaxSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetTaxSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaxSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/settings');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaxSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxSettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxSettingsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Update the organization tax settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TaxSettingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetTaxationModeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetTaxationModeResponse
     */
	public function setTaxationMode(
        \OpenAPI\OpenAPI\Models\Shared\TaxSettingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetTaxationModeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetTaxationModeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetTaxationModeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxSettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxSettingsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Update a single tax rate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateResponse
     */
	public function updateTaxRate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxes/{taxRateUuid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taxRateUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaxRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxRate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaxRate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}