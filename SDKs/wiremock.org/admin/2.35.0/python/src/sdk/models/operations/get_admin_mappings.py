"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetAdminMappingsRequest:
    
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The start index of the results to return"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappingsRequestBasicAuthCredentials:
    r"""Pre-emptive basic auth credentials to match against"""
    
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappingsRequest:
    
    basic_auth_credentials: Optional[GetAdminMappings200ApplicationJSONMappingsRequestBasicAuthCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthCredentials'), 'exclude': lambda f: f is None }})
    r"""Pre-emptive basic auth credentials to match against"""  
    body_patterns: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bodyPatterns'), 'exclude': lambda f: f is None }})
    r"""Request body patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    cookies: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Cookie patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Header patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The HTTP request method e.g. GET"""  
    query_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryParameters'), 'exclude': lambda f: f is None }})
    r"""Query parameter patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPath'), 'exclude': lambda f: f is None }})
    r"""The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_path_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPathPattern'), 'exclude': lambda f: f is None }})
    r"""The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPattern'), 'exclude': lambda f: f is None }})
    r"""The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    
class GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum(str, Enum):
    UNIFORM = 'uniform'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionUniform:
    r"""Uniformly distributed random response delay."""
    
    lower: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lower'), 'exclude': lambda f: f is None }})  
    type: Optional[GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    upper: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upper'), 'exclude': lambda f: f is None }})  
    
class GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum(str, Enum):
    LOGNORMAL = 'lognormal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionLogNormal:
    r"""Log normal randomly distributed response delay."""
    
    median: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('median'), 'exclude': lambda f: f is None }})  
    sigma: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sigma'), 'exclude': lambda f: f is None }})  
    type: Optional[GetAdminMappings200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    
class GetAdminMappings200ApplicationJSONMappingsResponseFaultEnum(str, Enum):
    r"""The fault to apply (instead of a full, valid response)."""
    CONNECTION_RESET_BY_PEER = 'CONNECTION_RESET_BY_PEER'
    EMPTY_RESPONSE = 'EMPTY_RESPONSE'
    MALFORMED_RESPONSE_CHUNK = 'MALFORMED_RESPONSE_CHUNK'
    RANDOM_DATA_THEN_CLOSE = 'RANDOM_DATA_THEN_CLOSE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappingsResponse:
    
    additional_proxy_request_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalProxyRequestHeaders'), 'exclude': lambda f: f is None }})
    r"""Extra request headers to send when proxying to another host."""  
    base64_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base64Body'), 'exclude': lambda f: f is None }})
    r"""The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified."""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified."""  
    body_file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bodyFileName'), 'exclude': lambda f: f is None }})
    r"""The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified."""  
    delay_distribution: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delayDistribution'), 'exclude': lambda f: f is None }})
    r"""The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper."""  
    fault: Optional[GetAdminMappings200ApplicationJSONMappingsResponseFaultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})
    r"""The fault to apply (instead of a full, valid response)."""  
    fixed_delay_milliseconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedDelayMilliseconds'), 'exclude': lambda f: f is None }})
    r"""Number of milliseconds to delay be before sending the response."""  
    from_configured_stub: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromConfiguredStub'), 'exclude': lambda f: f is None }})
    r"""Read-only flag indicating false if this was the default, unmatched response. Not present otherwise."""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Map of response headers to send"""  
    json_body: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonBody'), 'exclude': lambda f: f is None }})
    r"""The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified."""  
    proxy_base_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxyBaseUrl'), 'exclude': lambda f: f is None }})
    r"""The base URL of the target to proxy matching requests to."""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The HTTP status code to be returned"""  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})
    r"""The HTTP status message to be returned"""  
    transformer_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformerParameters'), 'exclude': lambda f: f is None }})
    r"""Parameters to apply to response transformers."""  
    transformers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformers'), 'exclude': lambda f: f is None }})
    r"""List of names of transformers to apply to this response."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMappings:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""This stub mapping's unique identifier"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The stub mapping's name"""  
    new_scenario_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newScenarioState'), 'exclude': lambda f: f is None }})
    r"""The new state for the scenario to be updated to after this stub is served."""  
    persistent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persistent'), 'exclude': lambda f: f is None }})
    r"""Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default."""  
    post_serve_actions: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postServeActions'), 'exclude': lambda f: f is None }})
    r"""A map of the names of post serve action extensions to trigger and their parameters."""  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""This stub mapping's priority relative to others. 1 is highest."""  
    request: Optional[GetAdminMappings200ApplicationJSONMappingsRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})  
    required_scenario_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiredScenarioState'), 'exclude': lambda f: f is None }})
    r"""The required state of the scenario in order for this stub to be matched."""  
    response: Optional[GetAdminMappings200ApplicationJSONMappingsResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})  
    scenario_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scenarioName'), 'exclude': lambda f: f is None }})
    r"""The name of the scenario that this stub mapping is part of"""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Alias for the id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSONMeta:
    
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdminMappings200ApplicationJSON:
    r"""All stub mappings"""
    
    mappings: Optional[list[GetAdminMappings200ApplicationJSONMappings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mappings'), 'exclude': lambda f: f is None }})  
    meta: Optional[GetAdminMappings200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAdminMappingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_admin_mappings_200_application_json_object: Optional[GetAdminMappings200ApplicationJSON] = dataclasses.field(default=None)
    r"""All stub mappings"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    