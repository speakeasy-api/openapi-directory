"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import album as shared_album
from ..shared import legacy_error as shared_legacy_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EditAlbumAlt1Security:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class EditAlbumAlt1RequestBodyLayoutEnum(str, Enum):
    r"""The type of layout for presenting the album."""
    GRID = 'grid'
    PLAYER = 'player'

class EditAlbumAlt1RequestBodyPrivacyEnum(str, Enum):
    r"""The privacy level of the album."""
    ANYBODY = 'anybody'
    EMBED_ONLY = 'embed_only'
    PASSWORD = 'password'

class EditAlbumAlt1RequestBodySortEnum(str, Enum):
    r"""The default sort order of the album's videos."""
    ADDED_FIRST = 'added_first'
    ADDED_LAST = 'added_last'
    ALPHABETICAL = 'alphabetical'
    ARRANGED = 'arranged'
    COMMENTS = 'comments'
    LIKES = 'likes'
    NEWEST = 'newest'
    OLDEST = 'oldest'
    PLAYS = 'plays'

class EditAlbumAlt1RequestBodyThemeEnum(str, Enum):
    r"""The color theme of the album."""
    DARK = 'dark'
    STANDARD = 'standard'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditAlbumAlt1RequestBody:
    
    brand_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand_color'), 'exclude': lambda f: f is None }})
    r"""The hexadecimal code for the color of the player buttons."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the album."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The custom domain a user has selected for their album."""  
    hide_nav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_nav'), 'exclude': lambda f: f is None }})
    r"""Whether to hide Vimeo navigation when displaying the album."""  
    layout: Optional[EditAlbumAlt1RequestBodyLayoutEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""The type of layout for presenting the album."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the album."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The album's password. Required only if **privacy** is `password`."""  
    privacy: Optional[EditAlbumAlt1RequestBodyPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The privacy level of the album."""  
    review_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_mode'), 'exclude': lambda f: f is None }})
    r"""Whether album videos should use the review mode URL."""  
    sort: Optional[EditAlbumAlt1RequestBodySortEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort'), 'exclude': lambda f: f is None }})
    r"""The default sort order of the album's videos."""  
    theme: Optional[EditAlbumAlt1RequestBodyThemeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme'), 'exclude': lambda f: f is None }})
    r"""The color theme of the album."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The custom Vimeo URL a user has selected for their album."""  
    use_custom_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_custom_domain'), 'exclude': lambda f: f is None }})
    r"""Whether the user has opted in to use a custom domain for their album."""  
    

@dataclasses.dataclass
class EditAlbumAlt1Request:
    
    album_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'album_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the album."""  
    request_body: Optional[EditAlbumAlt1RequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/vnd.vimeo.album+json' }})  
    

@dataclasses.dataclass
class EditAlbumAlt1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    album: Optional[shared_album.Album] = dataclasses.field(default=None)
    r"""The album was edited."""  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""A parameter is invalid."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    