"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInfoDetails:
    
    business_model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessModel'), 'exclude': lambda f: f is None }})
    r"""The business model of the channel"""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The channel category"""  
    channel_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelType'), 'exclude': lambda f: f is None }})
    r"""The channel type"""  
    costs: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costs'), 'exclude': lambda f: f is None }})
    r"""The cost's description of the channel"""  
    home_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeUrl'), 'exclude': lambda f: f is None }})
    r"""The home url of the channel"""  
    subscription_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionLink'), 'exclude': lambda f: f is None }})
    r"""The subscription link to the channel"""  
    tracking_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingType'), 'exclude': lambda f: f is None }})
    r"""The tracking type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInfoKeyNumbers:
    
    categories: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""The estimated category count of the channel"""  
    products: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""The estimated product count of the channel"""  
    stores: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stores'), 'exclude': lambda f: f is None }})
    r"""The estimated store count of the channel"""  
    views_per_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewsPerMonth'), 'exclude': lambda f: f is None }})
    r"""The estimated view count per month of the channel"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInfoSalesContact:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Indicate the sales contact email"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Indicate the BeezUP offer"""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""The sales contact phone number"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInfoTechnicalContact:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The technical contact email"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The technical contact name"""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""The technical contact phone number"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInfo:
    r"""Channel information"""
    
    channel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId') }})
    r"""The channel identifier"""  
    channel_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelName') }})
    r"""The channel name"""  
    beez_up_offer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOffer'), 'exclude': lambda f: f is None }})
    r"""Indicate the BeezUP offer"""  
    channel_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelDescription'), 'exclude': lambda f: f is None }})
    r"""Indicae a description to the channel"""  
    channel_logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelLogoUrl'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    details: Optional[ChannelInfoDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})  
    key_numbers: Optional[ChannelInfoKeyNumbers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyNumbers'), 'exclude': lambda f: f is None }})  
    sales_contact: Optional[ChannelInfoSalesContact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesContact'), 'exclude': lambda f: f is None }})  
    technical_contact: Optional[ChannelInfoTechnicalContact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('technicalContact'), 'exclude': lambda f: f is None }})  
    