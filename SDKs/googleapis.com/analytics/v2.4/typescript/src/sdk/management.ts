/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Management {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists all accounts to which the user has access.
   */
  analyticsManagementAccountsList(
    req: operations.AnalyticsManagementAccountsListRequest,
    security: operations.AnalyticsManagementAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/management/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementAccountsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementAccountsListResponse =
        new operations.AnalyticsManagementAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists goals to which the user has access.
   */
  analyticsManagementGoalsList(
    req: operations.AnalyticsManagementGoalsListRequest,
    security: operations.AnalyticsManagementGoalsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementGoalsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementGoalsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementGoalsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementGoalsListResponse =
        new operations.AnalyticsManagementGoalsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists views (profiles) to which the user has access.
   */
  analyticsManagementProfilesList(
    req: operations.AnalyticsManagementProfilesListRequest,
    security: operations.AnalyticsManagementProfilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementProfilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementProfilesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementProfilesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementProfilesListResponse =
        new operations.AnalyticsManagementProfilesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists advanced segments to which the user has access.
   */
  analyticsManagementSegmentsList(
    req: operations.AnalyticsManagementSegmentsListRequest,
    security: operations.AnalyticsManagementSegmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementSegmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementSegmentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/management/segments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementSegmentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementSegmentsListResponse =
        new operations.AnalyticsManagementSegmentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists web properties to which the user has access.
   */
  analyticsManagementWebpropertiesList(
    req: operations.AnalyticsManagementWebpropertiesListRequest,
    security: operations.AnalyticsManagementWebpropertiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsManagementWebpropertiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsManagementWebpropertiesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/management/accounts/{accountId}/webproperties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsManagementWebpropertiesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsManagementWebpropertiesListResponse =
        new operations.AnalyticsManagementWebpropertiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
