<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Campaigns 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a specific sound
     * 
     * Deletes a single campaign sound instance for a specific campaign sound id, this operation does not delete sound completely, it sets sound status to ARCHIVED which means that sound will no longer appear in 'find' operation results, but still accessible via 'get' operation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundResponse
     */
	public function deleteCampaignSound(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCampaignSoundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find sounds
     * 
     * To find all campaign sounds which were created by user. Returns all sounds available to be used in campaigns
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsResponse
     */
	public function findCampaignSounds(
        \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindCampaignSoundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaignSoundPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CampaignSoundPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific batch
     * 
     * Returns a single Batch instance for a given batch id. This API is useful for determining the state of a validating batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchResponse
     */
	public function getCampaignBatch(
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/batches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCampaignBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Batch', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific sound
     * 
     * Returns a single CampaignSound instance for a given sound id in campaign. This is a meta data to the sounds. No audio data is returned from this API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundResponse
     */
	public function getCampaignSound(
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaignSound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CampaignSound', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a MP3 sound
     * 
     * Download the MP3 version of a hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Response
     */
	public function getCampaignSoundDataMp3(
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/{id}.mp3', \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataMp3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'audio/mpeg')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download a WAV sound
     * 
     * Download the WAV version of the hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavResponse
     */
	public function getCampaignSoundDataWav(
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/{id}.wav', \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCampaignSoundDataWavResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'audio/wav')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Add sound via call
     * 
     * Use this API to create a sound via a phone call. Provide the required phone number in the CallCreateSound object inside the request, and user will receive a call shortly after with instructions on how to record a sound over the phone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundResponse
     */
	public function postCallCampaignSound(
        \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/calls');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "callCreateSound", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCallCampaignSoundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaignSound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CampaignSound', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add sound via file
     * 
     * Create a campaign sound file via a supplied .mp3 or .wav file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundResponse
     */
	public function postFileCampaignSound(
        \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/files');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFileCampaignSoundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaignSound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CampaignSound', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add sound via text-to-speech
     * 
     * Use this API to create a sound file via a supplied string of text. Add a text in the TextToSpeech.message field, and pick a voice in the TextToSpeech.voice field. Available voices are: MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundResponse
     */
	public function postTTSCampaignSound(
        \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/sounds/tts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "textToSpeech", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTTSCampaignSoundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaignSound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CampaignSound', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a batch
     * 
     * Updates a single Batch instance, currently batch can only be turned "on/off"
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchResponse
     */
	public function updateCampaignBatch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/campaigns/batches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCampaignBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}