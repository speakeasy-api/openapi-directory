/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataPoint } from "./datapoint";
import { Expose, Type } from "class-transformer";

/**
 * A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.
 */
export class Dataset extends SpeakeasyBase {
  /**
   * The data stream ID of the data source that created the points in this dataset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataSourceId" })
  dataSourceId?: string;

  /**
   * The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxEndTimeNs" })
  maxEndTimeNs?: string;

  /**
   * The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minStartTimeNs" })
  minStartTimeNs?: string;

  /**
   * This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPageToken" })
  nextPageToken?: string;

  /**
   * A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.
   */
  @SpeakeasyMetadata({ elemType: DataPoint })
  @Expose({ name: "point" })
  @Type(() => DataPoint)
  point?: DataPoint[];
}
