"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EventTags:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_event_tags_delete(self, request: operations.DfareportingEventTagsDeleteRequest, security: operations.DfareportingEventTagsDeleteSecurity) -> operations.DfareportingEventTagsDeleteResponse:
        r"""Deletes an existing event tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsDeleteRequest, base_url, '/userprofiles/{profileId}/eventTags/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingEventTagsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_event_tags_get(self, request: operations.DfareportingEventTagsGetRequest, security: operations.DfareportingEventTagsGetSecurity) -> operations.DfareportingEventTagsGetResponse:
        r"""Gets one event tag by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsGetRequest, base_url, '/userprofiles/{profileId}/eventTags/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingEventTagsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTag])
                res.event_tag = out

        return res

    def dfareporting_event_tags_insert(self, request: operations.DfareportingEventTagsInsertRequest, security: operations.DfareportingEventTagsInsertSecurity) -> operations.DfareportingEventTagsInsertResponse:
        r"""Inserts a new event tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsInsertRequest, base_url, '/userprofiles/{profileId}/eventTags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingEventTagsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTag])
                res.event_tag = out

        return res

    def dfareporting_event_tags_list(self, request: operations.DfareportingEventTagsListRequest, security: operations.DfareportingEventTagsListSecurity) -> operations.DfareportingEventTagsListResponse:
        r"""Retrieves a list of event tags, possibly filtered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsListRequest, base_url, '/userprofiles/{profileId}/eventTags', request)
        
        query_params = utils.get_query_params(operations.DfareportingEventTagsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTagsListResponse])
                res.event_tags_list_response = out

        return res

    def dfareporting_event_tags_patch(self, request: operations.DfareportingEventTagsPatchRequest, security: operations.DfareportingEventTagsPatchSecurity) -> operations.DfareportingEventTagsPatchResponse:
        r"""Updates an existing event tag. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsPatchRequest, base_url, '/userprofiles/{profileId}/eventTags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingEventTagsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTag])
                res.event_tag = out

        return res

    def dfareporting_event_tags_update(self, request: operations.DfareportingEventTagsUpdateRequest, security: operations.DfareportingEventTagsUpdateSecurity) -> operations.DfareportingEventTagsUpdateResponse:
        r"""Updates an existing event tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingEventTagsUpdateRequest, base_url, '/userprofiles/{profileId}/eventTags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingEventTagsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingEventTagsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTag])
                res.event_tag = out

        return res

    