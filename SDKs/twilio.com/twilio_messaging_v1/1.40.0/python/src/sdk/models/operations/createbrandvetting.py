"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import brand_vetting_enum_vetting_provider_enum as shared_brand_vetting_enum_vetting_provider_enum
from ..shared import messaging_v1_brand_registrations_brand_vetting as shared_messaging_v1_brand_registrations_brand_vetting
from typing import Optional

CREATE_BRAND_VETTING_SERVERS = [
	"https://messaging.twilio.com",
]


@dataclasses.dataclass
class CreateBrandVettingSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateBrandVettingCreateBrandVettingRequest:
    
    vetting_provider: shared_brand_vetting_enum_vetting_provider_enum.BrandVettingEnumVettingProviderEnum = dataclasses.field(metadata={'form': { 'field_name': 'VettingProvider' }})  
    vetting_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VettingId' }})
    r"""The unique ID of the vetting"""  
    

@dataclasses.dataclass
class CreateBrandVettingRequest:
    
    brand_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'BrandSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Brand Registration resource of the vettings to create ."""  
    request_body: Optional[CreateBrandVettingCreateBrandVettingRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateBrandVettingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    messaging_v1_brand_registrations_brand_vetting: Optional[shared_messaging_v1_brand_registrations_brand_vetting.MessagingV1BrandRegistrationsBrandVetting] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    