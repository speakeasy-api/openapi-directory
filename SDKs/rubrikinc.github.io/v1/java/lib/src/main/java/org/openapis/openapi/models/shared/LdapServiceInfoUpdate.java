/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LdapServiceInfoUpdate - Information for updating an authentication domain.
 */
public class LdapServiceInfoUpdate {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advancedOptions")
    public AdvancedLdapConfiguration advancedOptions;

    public LdapServiceInfoUpdate withAdvancedOptions(AdvancedLdapConfiguration advancedOptions) {
        this.advancedOptions = advancedOptions;
        return this;
    }
    
    /**
     * An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authServers")
    public String[] authServers;

    public LdapServiceInfoUpdate withAuthServers(String[] authServers) {
        this.authServers = authServers;
        return this;
    }
    
    /**
     * The path to the directory where searches for users begin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseDn")
    public String baseDn;

    public LdapServiceInfoUpdate withBaseDn(String baseDn) {
        this.baseDn = baseDn;
        return this;
    }
    
    /**
     * The name of the user that searches the authentication server for other users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindUserName")
    public String bindUserName;

    public LdapServiceInfoUpdate withBindUserName(String bindUserName) {
        this.bindUserName = bindUserName;
        return this;
    }
    
    /**
     * Password for the bind user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindUserPassword")
    public String bindUserPassword;

    public LdapServiceInfoUpdate withBindUserPassword(String bindUserPassword) {
        this.bindUserPassword = bindUserPassword;
        return this;
    }
    
    /**
     * ID of the imported certificate to use for connections to this server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateId")
    public String certificateId;

    public LdapServiceInfoUpdate withCertificateId(String certificateId) {
        this.certificateId = certificateId;
        return this;
    }
    
    /**
     * Dynamic DNS name for locating authentication servers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicDnsName")
    public String dynamicDnsName;

    public LdapServiceInfoUpdate withDynamicDnsName(String dynamicDnsName) {
        this.dynamicDnsName = dynamicDnsName;
        return this;
    }
    
    /**
     * Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isTotpEnforced")
    public Boolean isTotpEnforced;

    public LdapServiceInfoUpdate withIsTotpEnforced(Boolean isTotpEnforced) {
        this.isTotpEnforced = isTotpEnforced;
        return this;
    }
    
    /**
     * MFA server associated with LDAP service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfaServerId")
    public String mfaServerId;

    public LdapServiceInfoUpdate withMfaServerId(String mfaServerId) {
        this.mfaServerId = mfaServerId;
        return this;
    }
    
    /**
     * Human friendly name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public LdapServiceInfoUpdate withName(String name) {
        this.name = name;
        return this;
    }
    
    public LdapServiceInfoUpdate(){}
}
