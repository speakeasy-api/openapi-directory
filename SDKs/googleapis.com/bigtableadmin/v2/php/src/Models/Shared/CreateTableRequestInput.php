<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CreateTableRequestInput - Request message for google.bigtable.admin.v2.BigtableTableAdmin.CreateTable
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CreateTableRequestInput
{
    /**
     * The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",` `"other", "zz"]` * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]` * Key assignment: - Tablet 1 `[, apple) => {"a"}.` - Tablet 2 `[apple, customer_1) => {"apple", "custom"}.` - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.` - Tablet 4 `[customer_2, other) => {"customer_2"}.` - Tablet 5 `[other, ) => {"other", "zz"}.`
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Split> $initialSplits
     */
	#[\JMS\Serializer\Annotation\SerializedName('initialSplits')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Split>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $initialSplits = null;
    
    /**
     * A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TableInput $table
     */
	#[\JMS\Serializer\Annotation\SerializedName('table')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TableInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TableInput $table = null;
    
    /**
     * Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.
     * 
     * @var ?string $tableId
     */
	#[\JMS\Serializer\Annotation\SerializedName('tableId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tableId = null;
    
	public function __construct()
	{
		$this->initialSplits = null;
		$this->table = null;
		$this->tableId = null;
	}
}
