"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Contribution:
    r"""Submit, moderate and retrieve user contributions"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_contributions_id_(self, request: operations.DeleteContributionsIDRequest) -> operations.DeleteContributionsIDResponse:
        r"""Delete this contribution"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteContributionsIDRequest, base_url, '/contributions/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteContributionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Contribution])
                res.contribution = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_contribution_refinement_types(self) -> operations.GetContributionRefinementTypesResponse:
        r"""List valid contribution refinement types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contribution-refinement-types'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributionRefinementTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_contribution_refinement_types_200_application_json_strings = out

        return res

    def get_contribution_refinements(self, request: operations.GetContributionRefinementsRequest) -> operations.GetContributionRefinementsResponse:
        r"""List contribution refinement options
        Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contribution-refinements'
        
        query_params = utils.get_query_params(operations.GetContributionRefinementsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributionRefinementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, list[str]]])
                res.get_contribution_refinements_200_application_json_object = out

        return res

    def get_contributions(self, request: operations.GetContributionsRequest) -> operations.GetContributionsResponse:
        r"""List contributions
        Retrieve contributions.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contributions'
        
        query_params = utils.get_query_params(operations.GetContributionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Contribution]])
                res.contributions = out

        return res

    def get_contributions_id_(self, request: operations.GetContributionsIDRequest) -> operations.GetContributionsIDResponse:
        r"""Get a single contribution by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributionsIDRequest, base_url, '/contributions/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Contribution])
                res.contribution = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_contributions_id_likes(self, request: operations.GetContributionsIDLikesRequest) -> operations.GetContributionsIDLikesResponse:
        r"""List users who have liked this contributions
        Returns a list of user ids of users who have liked this conribution
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributionsIDLikesRequest, base_url, '/contributions/{id}/likes', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributionsIDLikesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_contributions_id_likes_200_application_json_strings = out

        return res

    def get_exports_id_(self, request: operations.GetExportsIDRequest) -> operations.GetExportsIDResponse:
        r"""Get a single export job; poll to follow export progress."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExportsIDRequest, base_url, '/exports/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExportsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Export])
                res.export = out
        elif http_res.status_code == 404:
            pass

        return res

    def post_contributions(self, request: shared.Contribution, security: operations.PostContributionsSecurity) -> operations.PostContributionsResponse:
        r"""Create a new contribution"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contributions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostContributionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Contribution])
                res.contribution = out

        return res

    def post_contributions_id_flag(self, request: operations.PostContributionsIDFlagRequest) -> operations.PostContributionsIDFlagResponse:
        r"""Raise a flag against this contribution
        Allows end users to bring potential issues with publicly visible content to the attention of moderators.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostContributionsIDFlagRequest, base_url, '/contributions/{id}/flag', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "flag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostContributionsIDFlagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Flag])
                res.flag = out

        return res

    def post_contributions_id_like(self, request: operations.PostContributionsIDLikeRequest) -> operations.PostContributionsIDLikeResponse:
        r"""Allows a user to mark a contribution as liked"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostContributionsIDLikeRequest, base_url, '/contributions/{id}/like', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostContributionsIDLikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[float])
                res.post_contributions_id_like_200_application_json_number = out

        return res

    def post_contributions_id_moderate(self, request: operations.PostContributionsIDModerateRequest) -> operations.PostContributionsIDModerateResponse:
        r"""Perform a moderation action on this contribution
        Allows the contribution to approved of rejected.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostContributionsIDModerateRequest, base_url, '/contributions/{id}/moderate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "moderation_history_item_submission", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostContributionsIDModerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_contributions_id_moderate_200_application_json_string = http_res.content
        elif http_res.status_code in [400, 401, 403, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def post_export(self, request: operations.PostExportRequest) -> operations.PostExportResponse:
        r"""Export contributions.
        Begin an export job. Returns a export job which can be polled to follow the progress of an export.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export'
        
        query_params = utils.get_query_params(operations.PostExportRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Export])
                res.export = out

        return res

    def post_export_summary(self, request: operations.PostExportSummaryRequest) -> operations.PostExportSummaryResponse:
        r"""Export contributions preflight summary.
        Provide a preflight summary of an export request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/export-summary'
        
        query_params = utils.get_query_params(operations.PostExportSummaryRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostExportSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExportSummary])
                res.export_summary = out

        return res

    