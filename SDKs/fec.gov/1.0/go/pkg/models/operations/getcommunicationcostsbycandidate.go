// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCommunicationCostsByCandidateOfficeEnum - Federal office candidate runs for: H, S or P
type GetCommunicationCostsByCandidateOfficeEnum string

const (
	GetCommunicationCostsByCandidateOfficeEnumHouse     GetCommunicationCostsByCandidateOfficeEnum = "house"
	GetCommunicationCostsByCandidateOfficeEnumSenate    GetCommunicationCostsByCandidateOfficeEnum = "senate"
	GetCommunicationCostsByCandidateOfficeEnumPresident GetCommunicationCostsByCandidateOfficeEnum = "president"
)

func (e *GetCommunicationCostsByCandidateOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "house":
		fallthrough
	case "senate":
		fallthrough
	case "president":
		*e = GetCommunicationCostsByCandidateOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommunicationCostsByCandidateOfficeEnum: %s", s)
	}
}

// GetCommunicationCostsByCandidateSupportOpposeEnum - Support or opposition
type GetCommunicationCostsByCandidateSupportOpposeEnum string

const (
	GetCommunicationCostsByCandidateSupportOpposeEnumS GetCommunicationCostsByCandidateSupportOpposeEnum = "S"
	GetCommunicationCostsByCandidateSupportOpposeEnumO GetCommunicationCostsByCandidateSupportOpposeEnum = "O"
)

func (e *GetCommunicationCostsByCandidateSupportOpposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "S":
		fallthrough
	case "O":
		*e = GetCommunicationCostsByCandidateSupportOpposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommunicationCostsByCandidateSupportOpposeEnum: %s", s)
	}
}

type GetCommunicationCostsByCandidateQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District *string `queryParam:"style=form,explode=true,name=district"`
	// `True` indicates that full election period of a candidate.
	// `False` indicates that two year election cycle.
	ElectionFull *bool `queryParam:"style=form,explode=true,name=election_full"`
	// Federal office candidate runs for: H, S or P
	Office *GetCommunicationCostsByCandidateOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Support or opposition
	SupportOppose *GetCommunicationCostsByCandidateSupportOpposeEnum `queryParam:"style=form,explode=true,name=support_oppose"`
}

type GetCommunicationCostsByCandidateRequest struct {
	QueryParams GetCommunicationCostsByCandidateQueryParams
}

type GetCommunicationCostsByCandidateResponse struct {
	CommunicationCostByCandidatePage *shared.CommunicationCostByCandidatePage
	ContentType                      string
	StatusCode                       int
	RawResponse                      *http.Response
}
