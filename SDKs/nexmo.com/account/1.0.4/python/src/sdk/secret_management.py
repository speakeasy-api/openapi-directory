"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class SecretManagement:
    r"""Many of the Vonage APIs are accessed using an API key and secret. It is recommended that you change or \\"rotate\\" your secrets from time to time for security purposes. This section provides the API interface for achieving this.
    Note: to work on secrets for your secondary accounts, you may authenticate with your primary credentials and supply the secondary API keys as URL parameters to these API endpoints.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_api_secret(self, request: operations.CreateAPISecretRequest, security: operations.CreateAPISecretSecurity) -> operations.CreateAPISecretResponse:
        r"""Create API Secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAPISecretRequest, base_url, '/accounts/{api_key}/secrets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_secret_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAPISecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretInfo])
                res.secret_info = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAPISecret400ApplicationJSON])
                res.create_api_secret_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAPISecret401ApplicationJSON])
                res.create_api_secret_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorAPIKeyNotFound])
                res.error_api_key_not_found = out

        return res

    def retrieve_api_secret(self, request: operations.RetrieveAPISecretRequest, security: operations.RetrieveAPISecretSecurity) -> operations.RetrieveAPISecretResponse:
        r"""Retrieve one API Secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveAPISecretRequest, base_url, '/accounts/{api_key}/secrets/{secret_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveAPISecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretInfo])
                res.secret_info = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrieveAPISecret401ApplicationJSON])
                res.retrieve_api_secret_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.retrieve_api_secret_404_application_json_one_of = out

        return res

    def retrieve_api_secrets(self, request: operations.RetrieveAPISecretsRequest, security: operations.RetrieveAPISecretsSecurity) -> operations.RetrieveAPISecretsResponse:
        r"""Retrieve API Secrets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveAPISecretsRequest, base_url, '/accounts/{api_key}/secrets', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveAPISecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrieveAPISecrets200ApplicationJSON])
                res.retrieve_api_secrets_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrieveAPISecrets401ApplicationJSON])
                res.retrieve_api_secrets_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorAPIKeyNotFound])
                res.error_api_key_not_found = out

        return res

    def revoke_api_secret(self, request: operations.RevokeAPISecretRequest, security: operations.RevokeAPISecretSecurity) -> operations.RevokeAPISecretResponse:
        r"""Revoke an API Secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RevokeAPISecretRequest, base_url, '/accounts/{api_key}/secrets/{secret_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevokeAPISecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RevokeAPISecret401ApplicationJSON])
                res.revoke_api_secret_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RevokeAPISecret403ApplicationJSON])
                res.revoke_api_secret_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.revoke_api_secret_404_application_json_one_of = out

        return res

    