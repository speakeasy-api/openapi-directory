// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EmployeeLevelEnum string

const (
	EmployeeLevelEnumConfidential EmployeeLevelEnum = "confidential"
	EmployeeLevelEnumRegular      EmployeeLevelEnum = "regular"
	EmployeeLevelEnumPublic       EmployeeLevelEnum = "public"
)

func (e *EmployeeLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = EmployeeLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeLevelEnum: %s", s)
	}
}

// Employee - An employee folder
type Employee struct {
	About            *string            `json:"About,omitempty"`
	ArchivalDate     *string            `json:"ArchivalDate,omitempty"`
	Class            *string            `json:"Class,omitempty"`
	Comment          *string            `json:"Comment,omitempty"`
	ContractType     *string            `json:"ContractType,omitempty"`
	EmployeeNumber   *string            `json:"EmployeeNumber,omitempty"`
	End              *string            `json:"End,omitempty"`
	Function         *string            `json:"Function,omitempty"`
	Home             *bool              `json:"Home,omitempty"`
	ID               *string            `json:"Id,omitempty"`
	Keywords         []string           `json:"Keywords,omitempty"`
	Level            *EmployeeLevelEnum `json:"Level,omitempty"`
	ModificationDate *string            `json:"ModificationDate,omitempty"`
	Name             *string            `json:"Name,omitempty"`
	Parent           *string            `json:"Parent,omitempty"`
	PostalMail       *bool              `json:"PostalMail,omitempty"`
	SSNumber         *string            `json:"SSNumber,omitempty"`
	Start            *string            `json:"Start,omitempty"`
}
