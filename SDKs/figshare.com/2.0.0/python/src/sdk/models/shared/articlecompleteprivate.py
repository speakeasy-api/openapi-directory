"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import author as shared_author
from ..shared import category as shared_category
from ..shared import customarticlefield as shared_customarticlefield
from ..shared import groupembargooptions as shared_groupembargooptions
from ..shared import license as shared_license
from ..shared import publicfile as shared_publicfile
from ..shared import timeline as shared_timeline
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ArticleCompletePrivate:
    r"""OK. Article representation"""
    
    account_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""ID of the account owning the article"""  
    authors: list[shared_author.Author] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authors') }})
    r"""List of article authors"""  
    categories: list[shared_category.Category] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""List of categories selected for the article"""  
    citation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('citation') }})
    r"""Article citation"""  
    confidential_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidential_reason') }})
    r"""Confidentiality reason"""  
    created_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_date') }})
    r"""Date when article was created"""  
    custom_fields: list[shared_customarticlefield.CustomArticleField] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields') }})
    r"""List of custom fields values"""  
    defined_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defined_type') }})
    r"""Type of article identifier"""  
    defined_type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defined_type_name') }})
    r"""Name of the article type identifier"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Article description"""  
    doi: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doi') }})
    r"""DOI"""  
    embargo_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_date') }})
    r"""Date when embargo lifts"""  
    embargo_options: list[shared_groupembargooptions.GroupEmbargoOptions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_options') }})
    r"""List of embargo options"""  
    embargo_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_reason') }})
    r"""Reason for embargo"""  
    embargo_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_title') }})
    r"""Title for embargo"""  
    embargo_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_type') }})
    r"""Article embargo"""  
    figshare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('figshare_url') }})
    r"""Article public url"""  
    files: list[shared_publicfile.PublicFile] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files') }})
    r"""List of article files"""  
    funding: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding') }})
    r"""Article funding"""  
    funding_list: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding_list') }})  
    group_id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id') }})
    r"""Group ID"""  
    group_resource_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_resource_id') }})
    r"""Group resource id"""  
    handle: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handle') }})
    r"""Handle"""  
    has_linked_file: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_linked_file') }})
    r"""True if any files are linked to the article"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for article"""  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_active') }})
    r"""True if article is active"""  
    is_confidential: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_confidential') }})
    r"""Article Confidentiality"""  
    is_embargoed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_embargoed') }})
    r"""True if article is embargoed"""  
    is_metadata_record: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_metadata_record') }})
    r"""True if article has no files"""  
    is_public: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_public') }})
    r"""True if article is published"""  
    license: shared_license.License = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})  
    metadata_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata_reason') }})
    r"""Article metadata reason"""  
    modified_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_date') }})
    r"""Date when article was last modified"""  
    published_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published_date') }})
    r"""Posted date"""  
    references: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('references') }})
    r"""List of references"""  
    resource_doi: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_doi') }})
    r"""Article DOI"""  
    resource_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_title') }})
    r"""Article resource title"""  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Article size"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Article status"""  
    tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""List of article tags"""  
    thumb: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb') }})
    r"""Thumbnail image"""  
    timeline: shared_timeline.Timeline = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Title of article"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Api endpoint for article"""  
    url_private_api: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_private_api') }})
    r"""Private Api endpoint for article"""  
    url_private_html: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_private_html') }})
    r"""Private site endpoint for article"""  
    url_public_api: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_public_api') }})
    r"""Public Api endpoint for article"""  
    url_public_html: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_public_html') }})
    r"""Public site endpoint for article"""  
    version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""Article version"""  
    